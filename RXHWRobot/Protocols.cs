/**
 * Created by Tool.
 */
using System;
using System.Collections.Generic;
using System.Text;
using UnityLight.Internets;
namespace RXHWRobot
{
    /// <summary>
    ///  数据包版本号[29017]
    /// </summary>
    public partial class PacketVer
    {
        public const int Ver = 29017;
        public const int SVer = 1058;
        public const int PVer = 6757;
    }

    /// <summary>
    ///  [请求类]连接地图服务器
    /// </summary>
    public partial class ReqConnectMapServer: Packet 
    {

        public override Packet Clone()
        {
            ReqConnectMapServer pkg = new ReqConnectMapServer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqConnectMapServer()
		{
			PacketID = 101;
		}
    }

    /// <summary>
    ///  [请求类] 连接地图服务器 创建者
    /// </summary>
    [Package(101)]
    public partial class ReqConnectMapServerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqConnectMapServer();
        }
    }


    /// <summary>
    ///  [响应类]连接地图服务器
    /// </summary>
    public partial class ResConnectMapServer: Packet 
    {
        /// <summary>
        /// 地图服务器IP
        /// </summary>
        public string MapServerIP;
        /// <summary>
        /// 地图服务器端口
        /// </summary>
        public ushort MapServerPort;
        /// <summary>
        /// 地图服务器名称
        /// </summary>
        public string MapServerName;

        public override Packet Clone()
        {
            ResConnectMapServer pkg = new ResConnectMapServer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapServerIP = MapServerIP;
            pkg.MapServerPort = MapServerPort;
            pkg.MapServerName = MapServerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(MapServerIP);
                oByteArray.WriteUShort(MapServerPort);
                oByteArray.WriteUTF(MapServerName);
            }
            else
            {
                MapServerIP = oByteArray.ReadUTF();
                MapServerPort = oByteArray.ReadUShort();
                MapServerName = oByteArray.ReadUTF();
            }
        }
		public ResConnectMapServer()
		{
			PacketID = 102;
		}
    }

    /// <summary>
    ///  [响应类] 连接地图服务器 创建者
    /// </summary>
    [Package(102)]
    public partial class ResConnectMapServerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResConnectMapServer();
        }
    }


    /// <summary>
    ///  [请求类]踢玩家下线
    /// </summary>
    public partial class ReqKickPlayer: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public byte Reason;

        public override Packet Clone()
        {
            ReqKickPlayer pkg = new ReqKickPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Reason = Reason;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Reason);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Reason = oByteArray.ReadByte();
            }
        }
		public ReqKickPlayer()
		{
			PacketID = 103;
		}
    }

    /// <summary>
    ///  [请求类] 踢玩家下线 创建者
    /// </summary>
    [Package(103)]
    public partial class ReqKickPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKickPlayer();
        }
    }


    /// <summary>
    ///  [响应类]踢玩家下线
    /// </summary>
    public partial class ResKickPlayer: Packet 
    {

        public override Packet Clone()
        {
            ResKickPlayer pkg = new ResKickPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResKickPlayer()
		{
			PacketID = 104;
		}
    }

    /// <summary>
    ///  [响应类] 踢玩家下线 创建者
    /// </summary>
    [Package(104)]
    public partial class ResKickPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKickPlayer();
        }
    }


    /// <summary>
    ///  [请求类]保存地图ID对应服务器的Session
    /// </summary>
    public partial class ReqSaveMapSession: Packet 
    {

        public override Packet Clone()
        {
            ReqSaveMapSession pkg = new ReqSaveMapSession();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSaveMapSession()
		{
			PacketID = 105;
		}
    }

    /// <summary>
    ///  [请求类] 保存地图ID对应服务器的Session 创建者
    /// </summary>
    [Package(105)]
    public partial class ReqSaveMapSessionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSaveMapSession();
        }
    }


    /// <summary>
    ///  [响应类]保存地图ID对应服务器的Session
    /// </summary>
    public partial class ResSaveMapSession: Packet 
    {
        /// <summary>
        /// 正在运行的地图ID
        /// </summary>
        public List<uint> MapID = new List<uint>();

        public override Packet Clone()
        {
            ResSaveMapSession pkg = new ResSaveMapSession();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in MapID)
            {
                pkg.MapID.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)MapID.Count);
                for (int i = 0; i < MapID.Count; i++)
                {
                    oByteArray.WriteUInt(MapID[i]);
                }
            }
            else
            {
                int MapIDCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapIDCount; i++)
                {
                    MapID.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResSaveMapSession()
		{
			PacketID = 106;
		}
    }

    /// <summary>
    ///  [响应类] 保存地图ID对应服务器的Session 创建者
    /// </summary>
    [Package(106)]
    public partial class ResSaveMapSessionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSaveMapSession();
        }
    }


    /// <summary>
    ///  [请求类]从地图上移除玩家
    /// </summary>
    public partial class ReqRemoveFromMap: Packet 
    {
        /// <summary>
        /// 是否随机，转发的变量
        /// </summary>
        public bool Random;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 坐标X
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 坐标Y
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 0普通传送;1任务传送;2副本传送;3登录传送;
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public uint WorldPort;
        /// <summary>
        /// 
        /// </summary>
        public uint MapGuid;

        public override Packet Clone()
        {
            ReqRemoveFromMap pkg = new ReqRemoveFromMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Random = Random;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Type = Type;
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Random);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
                oByteArray.WriteUInt(MapGuid);
            }
            else
            {
                Random = oByteArray.ReadBoolean();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
            }
        }
		public ReqRemoveFromMap()
		{
			PacketID = 107;
		}
    }

    /// <summary>
    ///  [请求类] 从地图上移除玩家 创建者
    /// </summary>
    [Package(107)]
    public partial class ReqRemoveFromMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveFromMap();
        }
    }


    /// <summary>
    ///  [响应类]从地图上移除玩家
    /// </summary>
    public partial class ResRemoveFromMap: Packet 
    {

        public override Packet Clone()
        {
            ResRemoveFromMap pkg = new ResRemoveFromMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResRemoveFromMap()
		{
			PacketID = 108;
		}
    }

    /// <summary>
    ///  [响应类] 从地图上移除玩家 创建者
    /// </summary>
    [Package(108)]
    public partial class ResRemoveFromMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveFromMap();
        }
    }


    /// <summary>
    ///  [请求类]玩家连接断开
    /// </summary>
    public partial class ReqPlayerDisconnect: Packet 
    {

        public override Packet Clone()
        {
            ReqPlayerDisconnect pkg = new ReqPlayerDisconnect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPlayerDisconnect()
		{
			PacketID = 109;
		}
    }

    /// <summary>
    ///  [请求类] 玩家连接断开 创建者
    /// </summary>
    [Package(109)]
    public partial class ReqPlayerDisconnectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerDisconnect();
        }
    }


    /// <summary>
    ///  [响应类]玩家连接断开
    /// </summary>
    public partial class ResPlayerDisconnect: Packet 
    {
        /// <summary>
        /// 1,//同账号踢出2,//进入地图出错3,//进入世界错误4,//缓存服务器崩溃5,//网关服务器崩溃，客户端不可能收到这个6,//管理员踢出7,//封账号8,//心跳异常（客户端网络延迟）9,//心跳异常（客户端加速）10,//心跳异常（客户端心跳停止）
        /// </summary>
        public uint KickReason;
        /// <summary>
        /// 服务器运行时间
        /// </summary>
        public uint ServerRunTime;
        /// <summary>
        /// 
        /// </summary>
        public ulong Guid;

        public override Packet Clone()
        {
            ResPlayerDisconnect pkg = new ResPlayerDisconnect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.KickReason = KickReason;
            pkg.ServerRunTime = ServerRunTime;
            pkg.Guid = Guid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(KickReason);
                oByteArray.WriteUInt(ServerRunTime);
                oByteArray.WriteUInt64(Guid);
            }
            else
            {
                KickReason = oByteArray.ReadUInt();
                ServerRunTime = oByteArray.ReadUInt();
                Guid = oByteArray.ReadUInt64();
            }
        }
		public ResPlayerDisconnect()
		{
			PacketID = 110;
		}
    }

    /// <summary>
    ///  [响应类] 玩家连接断开 创建者
    /// </summary>
    [Package(110)]
    public partial class ResPlayerDisconnectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerDisconnect();
        }
    }


    /// <summary>
    ///  [请求类]保存玩家角色数据
    /// </summary>
    public partial class ReqSaveCharacter: Packet 
    {
        /// <summary>
        /// 登陆IP
        /// </summary>
        public string LoginIP;
        /// <summary>
        /// 金币
        /// </summary>
        public uint GoldCoins;
        /// <summary>
        /// 绑定金币
        /// </summary>
        public uint SilverCoins;
        /// <summary>
        /// 元宝
        /// </summary>
        public uint Ingots;
        /// <summary>
        /// 礼券
        /// </summary>
        public uint Gifts;
        /// <summary>
        /// 王者币
        /// </summary>
        public uint KingCoins;
        /// <summary>
        /// VIP等级
        /// </summary>
        public byte VIPLv;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 经验
        /// </summary>
        public ulong Exp;
        /// <summary>
        /// 当前血量
        /// </summary>
        public uint CurHP;
        /// <summary>
        /// 当前魔法值
        /// </summary>
        public uint CurMP;
        /// <summary>
        /// 当前内力值
        /// </summary>
        public uint CurSP;
        /// <summary>
        /// 善恶(PK值)
        /// </summary>
        public uint PKValue;
        /// <summary>
        /// 当前所在地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 当前地图所在坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 当前地图所在坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 当前内功等级
        /// </summary>
        public uint SPLevel;
        /// <summary>
        /// 当前内功经验
        /// </summary>
        public uint SPExp;
        /// <summary>
        /// 血符值
        /// </summary>
        public uint XuefuValue;
        /// <summary>
        /// 护盾值
        /// </summary>
        public uint ShieldValue;
        /// <summary>
        /// 神石值
        /// </summary>
        public uint JewelValue;
        /// <summary>
        /// 命珠值
        /// </summary>
        public uint LifeStoneValue;
        /// <summary>
        /// 七日签到
        /// </summary>
        public uint SevendaysSign;
        /// <summary>
        /// 签到标识
        /// </summary>
        public uint SignFlag;
        /// <summary>
        /// 累计签到天数
        /// </summary>
        public uint SignTimes;
        /// <summary>
        /// 签到奖励标识
        /// </summary>
        public uint SignAwards;
        /// <summary>
        /// 补签次数
        /// </summary>
        public uint RetroactiveTimes;
        /// <summary>
        /// 最后一次更新时间
        /// </summary>
        public uint LastRefreshTime;
        /// <summary>
        /// 衣服ID
        /// </summary>
        public uint ClothesID;
        /// <summary>
        /// 武器ID
        /// </summary>
        public uint WeaponID;
        /// <summary>
        /// 成就积分
        /// </summary>
        public uint AchievementScore;
        /// <summary>
        /// 翅膀等级
        /// </summary>
        public uint WingLevel;
        /// <summary>
        /// 玩家攻击状态
        /// </summary>
        public uint AppendAttackSkillID;
        /// <summary>
        /// 攻击模式 0-和平，1-全体，2-组队，3-工会，4-善恶，5-阵营
        /// </summary>
        public byte FightModle;
        /// <summary>
        /// 默认称号
        /// </summary>
        public uint DefaultTitle;
        /// <summary>
        /// 玩家朝向
        /// </summary>
        public uint Direct;
        /// <summary>
        /// 品阶
        /// </summary>
        public uint OfficialRank;
        /// <summary>
        /// 品阶经验
        /// </summary>
        public uint OfficialExp;
        /// <summary>
        /// 每日累计在线时间
        /// </summary>
        public uint OnlineTimesDay;
        /// <summary>
        /// 登陆时间
        /// </summary>
        public uint LoginTime;
        /// <summary>
        /// 是否在线
        /// </summary>
        public uint IsOnline;
        /// <summary>
        /// 今日提建议剩余次数
        /// </summary>
        public uint AdviceNum;
        /// <summary>
        /// 今日剩余兑换境界经验次数
        /// </summary>
        public uint ChangeStateExpTime;
        /// <summary>
        /// 是否自动组队0不开启1开启
        /// </summary>
        public uint IsAutoTeam;
        /// <summary>
        /// 客户端登录类型 0-网页 1-微端
        /// </summary>
        public uint ClientType;
        /// <summary>
        /// 当前主线任务ID
        /// </summary>
        public uint CurTaskID;
        /// <summary>
        /// 能否领取微端奖励 0-可以 1-不可以
        /// </summary>
        public uint CanGetMicroendAward;
        /// <summary>
        /// 下线IP
        /// </summary>
        public string LogoutIP;
        /// <summary>
        /// 石墓烧猪经验值
        /// </summary>
        public uint FirPigExp;
        /// <summary>
        /// 总体离线时间
        /// </summary>
        public uint AllOffineTime;
        /// <summary>
        /// 
        /// </summary>
        public uint AllSendRedBagTime;
        /// <summary>
        /// 
        /// </summary>
        public uint LastTakeRedBagTime;
        /// <summary>
        /// 最后一次领取的系统补偿ID
        /// </summary>
        public int LastGetSystemCompensate;
        /// <summary>
        /// GM用的扶持元宝,不可以与玩家交互
        /// </summary>
        public uint GMIngots;
        /// <summary>
        /// 翅膀祝福值
        /// </summary>
        public uint WingExp;
        /// <summary>
        /// 0是不禁言,1是禁言
        /// </summary>
        public uint IsForbiddenLanguage;
        /// <summary>
        /// 跨服战荣誉值
        /// </summary>
        public uint HonorValue;
        /// <summary>
        /// 时装ID
        /// </summary>
        public uint FashionClothesID;
        /// <summary>
        /// 时装武器ID
        /// </summary>
        public uint FashionWeaponID;
        /// <summary>
        /// 手机验证,0未验证,1已验证,2已领取
        /// </summary>
        public uint PhoneVerification;
        /// <summary>
        /// 平台vip等级
        /// </summary>
        public string PlatformVIPInfo;
        /// <summary>
        /// 血符Lv
        /// </summary>
        public uint XuefuLv;
        /// <summary>
        /// 护盾Lv
        /// </summary>
        public uint ShieldLv;
        /// <summary>
        /// 神石Lv
        /// </summary>
        public uint JewelLv;
        /// <summary>
        /// 命珠Lv
        /// </summary>
        public uint LifeStoneLv;
        /// <summary>
        /// 成就勋章Lv
        /// </summary>
        public uint AchievementMedalLv;
        /// <summary>
        /// 累计充值天数
        /// </summary>
        public uint DailyPayTimes;
        /// <summary>
        /// 
        /// </summary>
        public string NickName;
        /// <summary>
        /// 
        /// </summary>
        public string AwardComplete;
        /// <summary>
        /// 
        /// </summary>
        public string SkillListStr;
        /// <summary>
        /// 
        /// </summary>
        public string Hotkeys;
        /// <summary>
        /// 
        /// </summary>
        public string Title;
        /// <summary>
        /// 
        /// </summary>
        public string GetAwardCodeStr;
        /// <summary>
        /// 
        /// </summary>
        public string MusicSet;
        /// <summary>
        /// 
        /// </summary>
        public string ServiceWarTakeItemInfo;
        /// <summary>
        /// 
        /// </summary>
        public string DailyTaskInfo;
        /// <summary>
        /// 
        /// </summary>
        public string VIPAwardState;
        /// <summary>
        /// 
        /// </summary>
        public string ItemGropDailyNum;
        /// <summary>
        /// 
        /// </summary>
        public string PersonBossInfo;
        /// <summary>
        /// 
        /// </summary>
        public string TaskInfo;
        /// <summary>
        /// 
        /// </summary>
        public string DungeonInfo;
        /// <summary>
        /// 
        /// </summary>
        public string LegendSoulInfo;
        /// <summary>
        /// 
        /// </summary>
        public string InvestmentStr;
        /// <summary>
        /// 
        /// </summary>
        public string Signature;
        /// <summary>
        /// 
        /// </summary>
        public string FashionInfo;
        /// <summary>
        /// 
        /// </summary>
        public string FirstSystemInfo;
        /// <summary>
        /// 成长计划领奖信息
        /// </summary>
        public string GrowthPlanInfo;
        /// <summary>
        /// 特殊效果
        /// </summary>
        public string EffectInfo;
        /// <summary>
        /// GM等级权限,0-没有,1-全部权限,2-尽可以查看
        /// </summary>
        public uint GMLv;
        /// <summary>
        /// 日常精英任务数据
        /// </summary>
        public string DailyEliteTaskInfo;
        /// <summary>
        /// 威望值
        /// </summary>
        public uint Fame;
        /// <summary>
        /// 宝藏任务字符串
        /// </summary>
        public int TreasureTaskInfo;
        /// <summary>
        /// 活跃度奖励信息
        /// </summary>
        public string LivenessAwardInfo;
        /// <summary>
        /// 今日领取双倍经验玉次数
        /// </summary>
        public uint DoubleTakeExpJadeTimes;
        /// <summary>
        /// 累计在线时间（用于防沉迷）
        /// </summary>
        public uint CumulativeOnLineTime;
        /// <summary>
        /// 最近一次退出行会时间戳
        /// </summary>
        public uint LastLExitGuildTime;
        /// <summary>
        /// 是否领取了首次加入帮派的奖励
        /// </summary>
        public byte IsGetGuildAward;
        /// <summary>
        /// 限时任务字符串
        /// </summary>
        public string LimiteTaskStr;
        /// <summary>
        /// 限时任务开启时间
        /// </summary>
        public uint LimiteTaskStartTime;
        /// <summary>
        /// 洗炼碎片值
        /// </summary>
        public uint BaptizeValue;
        /// <summary>
        /// 平台VIP TID
        /// </summary>
        public uint PlatfromVipTID;
        /// <summary>
        /// 微端每日领奖状态
        /// </summary>
        public uint MicroClientDailyAward;
        /// <summary>
        /// 微端等级奖励领取状态
        /// </summary>
        public string MicroClientLvAward;
        /// <summary>
        /// 引导信息
        /// </summary>
        public string GuideInfo;
        /// <summary>
        /// 资源找回信息
        /// </summary>
        public string GetBack;
        /// <summary>
        /// 排行榜战斗力
        /// </summary>
        public uint ComatEffectiveness;
        /// <summary>
        /// 日常次数
        /// </summary>
        public string DailyNum;
        /// <summary>
        /// 祈福信息
        /// </summary>
        public string PrayInfo;
        /// <summary>
        /// 活跃度等级奖励信息
        /// </summary>
        public string LivenessLvAwardInfo;
        /// <summary>
        /// 灵气值
        /// </summary>
        public uint FixSoulValue;
        /// <summary>
        /// 巡城信息
        /// </summary>
        public string PatrolCityTaskInfo;
        /// <summary>
        /// 已双倍领取过的副本ID
        /// </summary>
        public string DoubleDungeonAward;
        /// <summary>
        /// 今日魔法阵已捐献次数
        /// </summary>
        public int MagicDonateTimes;
        /// <summary>
        /// 声望
        /// </summary>
        public int Prestige;
        /// <summary>
        /// 通天塔等级
        /// </summary>
        public uint BabelLv;
        /// <summary>
        /// 通天塔领奖信息
        /// </summary>
        public string BabelAwardInfo;
        /// <summary>
        /// 传奇之魂最大值
        /// </summary>
        public uint LegendMaxSoul;
        /// <summary>
        /// 进入通天塔剩余次数
        /// </summary>
        public uint BabelTimes;
        /// <summary>
        /// 地图Guid
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 背包物品掉落概率
        /// </summary>
        public int BagItemDropProbability;
        /// <summary>
        /// 装备物品掉落概率
        /// </summary>
        public int EquipItemDropProbability;
        /// <summary>
        /// 功能引导开启
        /// </summary>
        public string OldGuideInfo;
        /// <summary>
        /// 连击技能信息
        /// </summary>
        public string ComboSkillInfo;
        /// <summary>
        /// 炼狱剩余时间
        /// </summary>
        public int LianYuTime;
        /// <summary>
        /// 今天回收装备获得的经验
        /// </summary>
        public string RecycleExpInfo;
        /// <summary>
        /// 今天产生的行会资金
        /// </summary>
        public int GuildMoney;
        /// <summary>
        /// 临时Vip1到期时间戳
        /// </summary>
        public uint VipTime;
        /// <summary>
        /// 总天赋点
        /// </summary>
        public uint MaxTalentPoint;
        /// <summary>
        /// 当前剩余点
        /// </summary>
        public uint CurTalentPoint;
        /// <summary>
        /// 天赋信息
        /// </summary>
        public string TalentInfo;
        /// <summary>
        /// 今天已经领取全民红包次数
        /// </summary>
        public uint CurDayTakeRedBagTimes;
        /// <summary>
        /// 行会任务信息
        /// </summary>
        public string GuildTaskInfo;
        /// <summary>
        /// 通天塔排行榜奖励信息
        /// </summary>
        public string BabelRankAward;
        /// <summary>
        /// 心魔系统信息
        /// </summary>
        public string InnerDemonsInfo;
        /// <summary>
        /// 今日已使用免费增加最大强化等级的数量
        /// </summary>
        public byte FreeBuyMaxStrengthTimes;
        /// <summary>
        /// 结义信息
        /// </summary>
        public string BrothersInfo;
        /// <summary>
        /// 国家宝藏信息
        /// </summary>
        public string NationalTreasure;
        /// <summary>
        /// 免费剩余次数
        /// </summary>
        public int FreeShaiZiTimes;
        /// <summary>
        /// 正常剩余次数
        /// </summary>
        public int ShaiZiTimes;
        /// <summary>
        /// 全民红包元宝
        /// </summary>
        public int RedBagMoney;
        /// <summary>
        /// 头像图片名字
        /// </summary>
        public string HeadSculpture;
        /// <summary>
        /// 是否上榜
        /// </summary>
        public int IsRank;
        /// <summary>
        /// 血符任务信息
        /// </summary>
        public string XueFuTaskInfo;
        /// <summary>
        /// 坐骑ID
        /// </summary>
        public uint MountsID;
        /// <summary>
        /// 通天塔完成时间
        /// </summary>
        public uint BabelFinishTime;
        /// <summary>
        /// 开服离线挂机经验
        /// </summary>
        public uint OpenDayOffLineExp;
        /// <summary>
        /// 可解锁背包起始格子
        /// </summary>
        public uint BagCanUnlockStartPos;
        /// <summary>
        /// 背包结束格子(不包括这个位置)
        /// </summary>
        public uint BagEndPos;
        /// <summary>
        /// 解锁背包时间
        /// </summary>
        public uint UnlockBagTime;
        /// <summary>
        /// 已时间解锁背包格子数量
        /// </summary>
        public uint BagPosTimeUnlockCount;
        /// <summary>
        /// 魔器洗炼碎片
        /// </summary>
        public uint GemEquipBaptizeValue;
        /// <summary>
        /// 魔器系统等级
        /// </summary>
        public int GemEquipLv;
        /// <summary>
        /// 魔器系统升级经验
        /// </summary>
        public int GemEquipExp;
        /// <summary>
        /// 剩余魔器经验兑换次数
        /// </summary>
        public int ExchangeGenExpTime;
        /// <summary>
        /// 每(日周月)购买商城限购物品
        /// </summary>
        public string DwmBuyShopItem;
        /// <summary>
        /// 屏蔽信息
        /// </summary>
        public string ScreenInfo;
        /// <summary>
        /// 今日已经获得魔煞值
        /// </summary>
        public uint CurDayMoShaValue;
        /// <summary>
        /// 心魔派遣
        /// </summary>
        public string XinMoPaiQian;
        /// <summary>
        /// 翅膀技能
        /// </summary>
        public string WingSkillInfo;
        /// <summary>
        /// 平台VIP奖励
        /// </summary>
        public string PlatformVIPAward;
        /// <summary>
        /// 实名验证奖励 0未领取，1已领取
        /// </summary>
        public uint RealNameAward;
        /// <summary>
        /// 后台设置平台VIP信息
        /// </summary>
        public string GMSetPlatformVIP;
        /// <summary>
        /// 回收任务信息
        /// </summary>
        public string RecycleTaskInfo;
        /// <summary>
        /// 猜拳玩家信息
        /// </summary>
        public string GuessInfo;
        /// <summary>
        /// 猜拳任务信息
        /// </summary>
        public string GuessTaskInfo;
        /// <summary>
        /// 突破等级
        /// </summary>
        public uint BreakLv;
        /// <summary>
        /// 突破值
        /// </summary>
        public uint BreakValue;
        /// <summary>
        /// 兑换突破值次数
        /// </summary>
        public uint ChangeBreakValueTime;
        /// <summary>
        /// 采集信息
        /// </summary>
        public string CollectInfo;
        /// <summary>
        /// 龙魄等级
        /// </summary>
        public uint LongPoLv;
        /// <summary>
        /// 龙魄值
        /// </summary>
        public uint LongPoValue;
        /// <summary>
        /// 卧龙山庄任务信息
        /// </summary>
        public string WolongTaskInfo;
        /// <summary>
        /// 奇遇副本信息
        /// </summary>
        public string AdventureInfo;
        /// <summary>
        /// 奇遇副本GUID
        /// </summary>
        public uint AdventureMapGuid;
        /// <summary>
        /// YY平台相关信息
        /// </summary>
        public string YYPlatformInfo;
        /// <summary>
        /// 后台设置YY平台信息
        /// </summary>
        public string GMSetYYPlatformInfo;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Career;
        /// <summary>
        /// 新元宝
        /// </summary>
        public uint NewGifts;
        /// <summary>
        /// 已捐献次数信息
        /// </summary>
        public string SacrificeInfo;
        /// <summary>
        /// 当前泡点玉ID
        /// </summary>
        public int BubbleStoneId;
        /// <summary>
        /// 是否已领免费泡点
        /// </summary>
        public int FreeBubble;
        /// <summary>
        /// 是否已购买泡点效率提升卡
        /// </summary>
        public int BubbleUp;
        /// <summary>
        /// 是否泡点效率提升中
        /// </summary>
        public int IsBubbleUp;
        /// <summary>
        /// 多倍泡点剩余时长
        /// </summary>
        public int MulBubbleTime;
        /// <summary>
        /// 商城限时物品信息
        /// </summary>
        public string LimitTimeShopItem;
        /// <summary>
        /// 练功房累计时间
        /// </summary>
        public int LGFTime;
        /// <summary>
        /// 练功房剩余时间
        /// </summary>
        public uint LGFLeftTime;
        /// <summary>
        /// 日常活动补签信息
        /// </summary>
        public string DailyActivitySignInfo;
        /// <summary>
        /// 日常活动补签刷新时间
        /// </summary>
        public int DASSRefreshTime;
        /// <summary>
        /// 市场上次刷新时间[黑市、集市、比奇黑市、盟重黑市]
        /// </summary>
        public string MarketRefreshTime;
        /// <summary>
        /// 仓库解锁信息（第一页结束位置|第二页结束位置|......）
        /// </summary>
        public string StoreHouseInfo;
        /// <summary>
        /// 装备强化失败附加成功率
        /// </summary>
        public int StrengthFailExtraRate;
        /// <summary>
        /// 官印等级
        /// </summary>
        public uint OfficialSealLv;
        /// <summary>
        /// 官印经验
        /// </summary>
        public uint OfficialSealValue;
        /// <summary>
        /// 当前待召唤魂宠Group
        /// </summary>
        public uint SoulPetGroup;
        /// <summary>
        /// 变身能量
        /// </summary>
        public uint ShapeShiftEnergy;
        /// <summary>
        /// 藏宝图幸运值
        /// </summary>
        public uint TreasureMapLucky;
        /// <summary>
        /// 当日藏宝图开启次数
        /// </summary>
        public uint OpenTMCount;
        /// <summary>
        /// 当前密文套装名号
        /// </summary>
        public uint CurCiphertext;
        /// <summary>
        /// 通天塔掉落层数
        /// </summary>
        public uint BabelDropLayer;
        /// <summary>
        /// 神器盒子等级
        /// </summary>
        public uint ArtifactBoxLv;
        /// <summary>
        /// 神器盒子经验值
        /// </summary>
        public uint ArtifactBoxValue;
        /// <summary>
        /// 玩家黑市刷新次数
        /// </summary>
        public uint BlackMarketTimes;
        /// <summary>
        /// 绑钻
        /// </summary>
        public uint BindIngots;
        /// <summary>
        /// 商店限购商品购买信息
        /// </summary>
        public string MarketBuyInfo;
        /// <summary>
        /// 帮会战旗等级
        /// </summary>
        public int GuildFlagLv;
        /// <summary>
        /// 兵骨养成信息
        /// </summary>
        public string SmelterBoneInfo;
        /// <summary>
        /// 剩余活跃值
        /// </summary>
        public uint Liveness;
        /// <summary>
        /// 签到轮次
        /// </summary>
        public uint SignInCircle;
        /// <summary>
        /// 熔炉积分
        /// </summary>
        public uint SmelterIntegral;
        /// <summary>
        /// 图腾等级
        /// </summary>
        public uint TotemLv;
        /// <summary>
        /// 图腾经验
        /// </summary>
        public uint TotemExp;
        /// <summary>
        /// A类已触发TID
        /// </summary>
        public uint TimeLimitedATid;
        /// <summary>
        /// A类截至时间
        /// </summary>
        public uint TimeLimitedAEndTime;
        /// <summary>
        /// A完成限时目标
        /// </summary>
        public uint TimeLimitedADone;
        /// <summary>
        /// B类已触发TID
        /// </summary>
        public uint TimeLimitedBTid;
        /// <summary>
        /// B类截至时间
        /// </summary>
        public uint TimeLimitedBEndTime;
        /// <summary>
        /// B完成限时目标
        /// </summary>
        public uint TimeLimitedBDone;
        /// <summary>
        /// 十二宫当前通关层数
        /// </summary>
        public uint ZodiaceLayer;
        /// <summary>
        /// 圣十二宫当前通关层数
        /// </summary>
        public uint HolyZodiaceLayer;
        /// <summary>
        /// 沙城捐赠数量
        /// </summary>
        public uint ShachengDonationNum;
        /// <summary>
        /// 王者归来领取记录
        /// </summary>
        public string NewCompensateRecord;
        /// <summary>
        /// 经验炼制最后日期
        /// </summary>
        public uint ExpRefineDay;
        /// <summary>
        /// 经验炼制次数
        /// </summary>
        public uint ExpRefineNum;
        /// <summary>
        /// 被动技能开启记录
        /// </summary>
        public string OpenSkillStr;
        /// <summary>
        /// 押镖最后刷新日期
        /// </summary>
        public uint LastRefreshPatrolDate;
        /// <summary>
        /// 押镖最后刷新次数
        /// </summary>
        public uint LastRefreshPatrolNum;
        /// <summary>
        /// 签到下次重置时间
        /// </summary>
        public uint SignResetTime;
        /// <summary>
        /// 神石孔信息
        /// </summary>
        public string GemStoneHole;
        /// <summary>
        /// 宝玉装备位解锁
        /// </summary>
        public string JadeStoneUnlock;
        /// <summary>
        /// 时装足迹ID
        /// </summary>
        public uint FashionFootMark;
        /// <summary>
        /// 热血币
        /// </summary>
        public uint HotBloodCoins;
        /// <summary>
        /// 元素通天塔等级
        /// </summary>
        public uint ElementBabelLv;
        /// <summary>
        /// 元素通天塔领奖信息
        /// </summary>
        public string ElementBabelAwardInfo;
        /// <summary>
        /// 进入元素通天塔剩余次数
        /// </summary>
        public uint ElementBabelTimes;
        /// <summary>
        /// 元素通天塔完成时间
        /// </summary>
        public uint ElementBabelFinishTime;

        public override Packet Clone()
        {
            ReqSaveCharacter pkg = new ReqSaveCharacter();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LoginIP = LoginIP;
            pkg.GoldCoins = GoldCoins;
            pkg.SilverCoins = SilverCoins;
            pkg.Ingots = Ingots;
            pkg.Gifts = Gifts;
            pkg.KingCoins = KingCoins;
            pkg.VIPLv = VIPLv;
            pkg.Lv = Lv;
            pkg.Exp = Exp;
            pkg.CurHP = CurHP;
            pkg.CurMP = CurMP;
            pkg.CurSP = CurSP;
            pkg.PKValue = PKValue;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.SPLevel = SPLevel;
            pkg.SPExp = SPExp;
            pkg.XuefuValue = XuefuValue;
            pkg.ShieldValue = ShieldValue;
            pkg.JewelValue = JewelValue;
            pkg.LifeStoneValue = LifeStoneValue;
            pkg.SevendaysSign = SevendaysSign;
            pkg.SignFlag = SignFlag;
            pkg.SignTimes = SignTimes;
            pkg.SignAwards = SignAwards;
            pkg.RetroactiveTimes = RetroactiveTimes;
            pkg.LastRefreshTime = LastRefreshTime;
            pkg.ClothesID = ClothesID;
            pkg.WeaponID = WeaponID;
            pkg.AchievementScore = AchievementScore;
            pkg.WingLevel = WingLevel;
            pkg.AppendAttackSkillID = AppendAttackSkillID;
            pkg.FightModle = FightModle;
            pkg.DefaultTitle = DefaultTitle;
            pkg.Direct = Direct;
            pkg.OfficialRank = OfficialRank;
            pkg.OfficialExp = OfficialExp;
            pkg.OnlineTimesDay = OnlineTimesDay;
            pkg.LoginTime = LoginTime;
            pkg.IsOnline = IsOnline;
            pkg.AdviceNum = AdviceNum;
            pkg.ChangeStateExpTime = ChangeStateExpTime;
            pkg.IsAutoTeam = IsAutoTeam;
            pkg.ClientType = ClientType;
            pkg.CurTaskID = CurTaskID;
            pkg.CanGetMicroendAward = CanGetMicroendAward;
            pkg.LogoutIP = LogoutIP;
            pkg.FirPigExp = FirPigExp;
            pkg.AllOffineTime = AllOffineTime;
            pkg.AllSendRedBagTime = AllSendRedBagTime;
            pkg.LastTakeRedBagTime = LastTakeRedBagTime;
            pkg.LastGetSystemCompensate = LastGetSystemCompensate;
            pkg.GMIngots = GMIngots;
            pkg.WingExp = WingExp;
            pkg.IsForbiddenLanguage = IsForbiddenLanguage;
            pkg.HonorValue = HonorValue;
            pkg.FashionClothesID = FashionClothesID;
            pkg.FashionWeaponID = FashionWeaponID;
            pkg.PhoneVerification = PhoneVerification;
            pkg.PlatformVIPInfo = PlatformVIPInfo;
            pkg.XuefuLv = XuefuLv;
            pkg.ShieldLv = ShieldLv;
            pkg.JewelLv = JewelLv;
            pkg.LifeStoneLv = LifeStoneLv;
            pkg.AchievementMedalLv = AchievementMedalLv;
            pkg.DailyPayTimes = DailyPayTimes;
            pkg.NickName = NickName;
            pkg.AwardComplete = AwardComplete;
            pkg.SkillListStr = SkillListStr;
            pkg.Hotkeys = Hotkeys;
            pkg.Title = Title;
            pkg.GetAwardCodeStr = GetAwardCodeStr;
            pkg.MusicSet = MusicSet;
            pkg.ServiceWarTakeItemInfo = ServiceWarTakeItemInfo;
            pkg.DailyTaskInfo = DailyTaskInfo;
            pkg.VIPAwardState = VIPAwardState;
            pkg.ItemGropDailyNum = ItemGropDailyNum;
            pkg.PersonBossInfo = PersonBossInfo;
            pkg.TaskInfo = TaskInfo;
            pkg.DungeonInfo = DungeonInfo;
            pkg.LegendSoulInfo = LegendSoulInfo;
            pkg.InvestmentStr = InvestmentStr;
            pkg.Signature = Signature;
            pkg.FashionInfo = FashionInfo;
            pkg.FirstSystemInfo = FirstSystemInfo;
            pkg.GrowthPlanInfo = GrowthPlanInfo;
            pkg.EffectInfo = EffectInfo;
            pkg.GMLv = GMLv;
            pkg.DailyEliteTaskInfo = DailyEliteTaskInfo;
            pkg.Fame = Fame;
            pkg.TreasureTaskInfo = TreasureTaskInfo;
            pkg.LivenessAwardInfo = LivenessAwardInfo;
            pkg.DoubleTakeExpJadeTimes = DoubleTakeExpJadeTimes;
            pkg.CumulativeOnLineTime = CumulativeOnLineTime;
            pkg.LastLExitGuildTime = LastLExitGuildTime;
            pkg.IsGetGuildAward = IsGetGuildAward;
            pkg.LimiteTaskStr = LimiteTaskStr;
            pkg.LimiteTaskStartTime = LimiteTaskStartTime;
            pkg.BaptizeValue = BaptizeValue;
            pkg.PlatfromVipTID = PlatfromVipTID;
            pkg.MicroClientDailyAward = MicroClientDailyAward;
            pkg.MicroClientLvAward = MicroClientLvAward;
            pkg.GuideInfo = GuideInfo;
            pkg.GetBack = GetBack;
            pkg.ComatEffectiveness = ComatEffectiveness;
            pkg.DailyNum = DailyNum;
            pkg.PrayInfo = PrayInfo;
            pkg.LivenessLvAwardInfo = LivenessLvAwardInfo;
            pkg.FixSoulValue = FixSoulValue;
            pkg.PatrolCityTaskInfo = PatrolCityTaskInfo;
            pkg.DoubleDungeonAward = DoubleDungeonAward;
            pkg.MagicDonateTimes = MagicDonateTimes;
            pkg.Prestige = Prestige;
            pkg.BabelLv = BabelLv;
            pkg.BabelAwardInfo = BabelAwardInfo;
            pkg.LegendMaxSoul = LegendMaxSoul;
            pkg.BabelTimes = BabelTimes;
            pkg.MapGuid = MapGuid;
            pkg.BagItemDropProbability = BagItemDropProbability;
            pkg.EquipItemDropProbability = EquipItemDropProbability;
            pkg.OldGuideInfo = OldGuideInfo;
            pkg.ComboSkillInfo = ComboSkillInfo;
            pkg.LianYuTime = LianYuTime;
            pkg.RecycleExpInfo = RecycleExpInfo;
            pkg.GuildMoney = GuildMoney;
            pkg.VipTime = VipTime;
            pkg.MaxTalentPoint = MaxTalentPoint;
            pkg.CurTalentPoint = CurTalentPoint;
            pkg.TalentInfo = TalentInfo;
            pkg.CurDayTakeRedBagTimes = CurDayTakeRedBagTimes;
            pkg.GuildTaskInfo = GuildTaskInfo;
            pkg.BabelRankAward = BabelRankAward;
            pkg.InnerDemonsInfo = InnerDemonsInfo;
            pkg.FreeBuyMaxStrengthTimes = FreeBuyMaxStrengthTimes;
            pkg.BrothersInfo = BrothersInfo;
            pkg.NationalTreasure = NationalTreasure;
            pkg.FreeShaiZiTimes = FreeShaiZiTimes;
            pkg.ShaiZiTimes = ShaiZiTimes;
            pkg.RedBagMoney = RedBagMoney;
            pkg.HeadSculpture = HeadSculpture;
            pkg.IsRank = IsRank;
            pkg.XueFuTaskInfo = XueFuTaskInfo;
            pkg.MountsID = MountsID;
            pkg.BabelFinishTime = BabelFinishTime;
            pkg.OpenDayOffLineExp = OpenDayOffLineExp;
            pkg.BagCanUnlockStartPos = BagCanUnlockStartPos;
            pkg.BagEndPos = BagEndPos;
            pkg.UnlockBagTime = UnlockBagTime;
            pkg.BagPosTimeUnlockCount = BagPosTimeUnlockCount;
            pkg.GemEquipBaptizeValue = GemEquipBaptizeValue;
            pkg.GemEquipLv = GemEquipLv;
            pkg.GemEquipExp = GemEquipExp;
            pkg.ExchangeGenExpTime = ExchangeGenExpTime;
            pkg.DwmBuyShopItem = DwmBuyShopItem;
            pkg.ScreenInfo = ScreenInfo;
            pkg.CurDayMoShaValue = CurDayMoShaValue;
            pkg.XinMoPaiQian = XinMoPaiQian;
            pkg.WingSkillInfo = WingSkillInfo;
            pkg.PlatformVIPAward = PlatformVIPAward;
            pkg.RealNameAward = RealNameAward;
            pkg.GMSetPlatformVIP = GMSetPlatformVIP;
            pkg.RecycleTaskInfo = RecycleTaskInfo;
            pkg.GuessInfo = GuessInfo;
            pkg.GuessTaskInfo = GuessTaskInfo;
            pkg.BreakLv = BreakLv;
            pkg.BreakValue = BreakValue;
            pkg.ChangeBreakValueTime = ChangeBreakValueTime;
            pkg.CollectInfo = CollectInfo;
            pkg.LongPoLv = LongPoLv;
            pkg.LongPoValue = LongPoValue;
            pkg.WolongTaskInfo = WolongTaskInfo;
            pkg.AdventureInfo = AdventureInfo;
            pkg.AdventureMapGuid = AdventureMapGuid;
            pkg.YYPlatformInfo = YYPlatformInfo;
            pkg.GMSetYYPlatformInfo = GMSetYYPlatformInfo;
            pkg.Career = Career;
            pkg.NewGifts = NewGifts;
            pkg.SacrificeInfo = SacrificeInfo;
            pkg.BubbleStoneId = BubbleStoneId;
            pkg.FreeBubble = FreeBubble;
            pkg.BubbleUp = BubbleUp;
            pkg.IsBubbleUp = IsBubbleUp;
            pkg.MulBubbleTime = MulBubbleTime;
            pkg.LimitTimeShopItem = LimitTimeShopItem;
            pkg.LGFTime = LGFTime;
            pkg.LGFLeftTime = LGFLeftTime;
            pkg.DailyActivitySignInfo = DailyActivitySignInfo;
            pkg.DASSRefreshTime = DASSRefreshTime;
            pkg.MarketRefreshTime = MarketRefreshTime;
            pkg.StoreHouseInfo = StoreHouseInfo;
            pkg.StrengthFailExtraRate = StrengthFailExtraRate;
            pkg.OfficialSealLv = OfficialSealLv;
            pkg.OfficialSealValue = OfficialSealValue;
            pkg.SoulPetGroup = SoulPetGroup;
            pkg.ShapeShiftEnergy = ShapeShiftEnergy;
            pkg.TreasureMapLucky = TreasureMapLucky;
            pkg.OpenTMCount = OpenTMCount;
            pkg.CurCiphertext = CurCiphertext;
            pkg.BabelDropLayer = BabelDropLayer;
            pkg.ArtifactBoxLv = ArtifactBoxLv;
            pkg.ArtifactBoxValue = ArtifactBoxValue;
            pkg.BlackMarketTimes = BlackMarketTimes;
            pkg.BindIngots = BindIngots;
            pkg.MarketBuyInfo = MarketBuyInfo;
            pkg.GuildFlagLv = GuildFlagLv;
            pkg.SmelterBoneInfo = SmelterBoneInfo;
            pkg.Liveness = Liveness;
            pkg.SignInCircle = SignInCircle;
            pkg.SmelterIntegral = SmelterIntegral;
            pkg.TotemLv = TotemLv;
            pkg.TotemExp = TotemExp;
            pkg.TimeLimitedATid = TimeLimitedATid;
            pkg.TimeLimitedAEndTime = TimeLimitedAEndTime;
            pkg.TimeLimitedADone = TimeLimitedADone;
            pkg.TimeLimitedBTid = TimeLimitedBTid;
            pkg.TimeLimitedBEndTime = TimeLimitedBEndTime;
            pkg.TimeLimitedBDone = TimeLimitedBDone;
            pkg.ZodiaceLayer = ZodiaceLayer;
            pkg.HolyZodiaceLayer = HolyZodiaceLayer;
            pkg.ShachengDonationNum = ShachengDonationNum;
            pkg.NewCompensateRecord = NewCompensateRecord;
            pkg.ExpRefineDay = ExpRefineDay;
            pkg.ExpRefineNum = ExpRefineNum;
            pkg.OpenSkillStr = OpenSkillStr;
            pkg.LastRefreshPatrolDate = LastRefreshPatrolDate;
            pkg.LastRefreshPatrolNum = LastRefreshPatrolNum;
            pkg.SignResetTime = SignResetTime;
            pkg.GemStoneHole = GemStoneHole;
            pkg.JadeStoneUnlock = JadeStoneUnlock;
            pkg.FashionFootMark = FashionFootMark;
            pkg.HotBloodCoins = HotBloodCoins;
            pkg.ElementBabelLv = ElementBabelLv;
            pkg.ElementBabelAwardInfo = ElementBabelAwardInfo;
            pkg.ElementBabelTimes = ElementBabelTimes;
            pkg.ElementBabelFinishTime = ElementBabelFinishTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(LoginIP);
                oByteArray.WriteUInt(GoldCoins);
                oByteArray.WriteUInt(SilverCoins);
                oByteArray.WriteUInt(Ingots);
                oByteArray.WriteUInt(Gifts);
                oByteArray.WriteUInt(KingCoins);
                oByteArray.WriteByte(VIPLv);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUInt64(Exp);
                oByteArray.WriteUInt(CurHP);
                oByteArray.WriteUInt(CurMP);
                oByteArray.WriteUInt(CurSP);
                oByteArray.WriteUInt(PKValue);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(SPLevel);
                oByteArray.WriteUInt(SPExp);
                oByteArray.WriteUInt(XuefuValue);
                oByteArray.WriteUInt(ShieldValue);
                oByteArray.WriteUInt(JewelValue);
                oByteArray.WriteUInt(LifeStoneValue);
                oByteArray.WriteUInt(SevendaysSign);
                oByteArray.WriteUInt(SignFlag);
                oByteArray.WriteUInt(SignTimes);
                oByteArray.WriteUInt(SignAwards);
                oByteArray.WriteUInt(RetroactiveTimes);
                oByteArray.WriteUInt(LastRefreshTime);
                oByteArray.WriteUInt(ClothesID);
                oByteArray.WriteUInt(WeaponID);
                oByteArray.WriteUInt(AchievementScore);
                oByteArray.WriteUInt(WingLevel);
                oByteArray.WriteUInt(AppendAttackSkillID);
                oByteArray.WriteByte(FightModle);
                oByteArray.WriteUInt(DefaultTitle);
                oByteArray.WriteUInt(Direct);
                oByteArray.WriteUInt(OfficialRank);
                oByteArray.WriteUInt(OfficialExp);
                oByteArray.WriteUInt(OnlineTimesDay);
                oByteArray.WriteUInt(LoginTime);
                oByteArray.WriteUInt(IsOnline);
                oByteArray.WriteUInt(AdviceNum);
                oByteArray.WriteUInt(ChangeStateExpTime);
                oByteArray.WriteUInt(IsAutoTeam);
                oByteArray.WriteUInt(ClientType);
                oByteArray.WriteUInt(CurTaskID);
                oByteArray.WriteUInt(CanGetMicroendAward);
                oByteArray.WriteUTF(LogoutIP);
                oByteArray.WriteUInt(FirPigExp);
                oByteArray.WriteUInt(AllOffineTime);
                oByteArray.WriteUInt(AllSendRedBagTime);
                oByteArray.WriteUInt(LastTakeRedBagTime);
                oByteArray.WriteInt(LastGetSystemCompensate);
                oByteArray.WriteUInt(GMIngots);
                oByteArray.WriteUInt(WingExp);
                oByteArray.WriteUInt(IsForbiddenLanguage);
                oByteArray.WriteUInt(HonorValue);
                oByteArray.WriteUInt(FashionClothesID);
                oByteArray.WriteUInt(FashionWeaponID);
                oByteArray.WriteUInt(PhoneVerification);
                oByteArray.WriteUTF(PlatformVIPInfo);
                oByteArray.WriteUInt(XuefuLv);
                oByteArray.WriteUInt(ShieldLv);
                oByteArray.WriteUInt(JewelLv);
                oByteArray.WriteUInt(LifeStoneLv);
                oByteArray.WriteUInt(AchievementMedalLv);
                oByteArray.WriteUInt(DailyPayTimes);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUTF(AwardComplete);
                oByteArray.WriteUTF(SkillListStr);
                oByteArray.WriteUTF(Hotkeys);
                oByteArray.WriteUTF(Title);
                oByteArray.WriteUTF(GetAwardCodeStr);
                oByteArray.WriteUTF(MusicSet);
                oByteArray.WriteUTF(ServiceWarTakeItemInfo);
                oByteArray.WriteUTF(DailyTaskInfo);
                oByteArray.WriteUTF(VIPAwardState);
                oByteArray.WriteUTF(ItemGropDailyNum);
                oByteArray.WriteUTF(PersonBossInfo);
                oByteArray.WriteUTF(TaskInfo);
                oByteArray.WriteUTF(DungeonInfo);
                oByteArray.WriteUTF(LegendSoulInfo);
                oByteArray.WriteUTF(InvestmentStr);
                oByteArray.WriteUTF(Signature);
                oByteArray.WriteUTF(FashionInfo);
                oByteArray.WriteUTF(FirstSystemInfo);
                oByteArray.WriteUTF(GrowthPlanInfo);
                oByteArray.WriteUTF(EffectInfo);
                oByteArray.WriteUInt(GMLv);
                oByteArray.WriteUTF(DailyEliteTaskInfo);
                oByteArray.WriteUInt(Fame);
                oByteArray.WriteInt(TreasureTaskInfo);
                oByteArray.WriteUTF(LivenessAwardInfo);
                oByteArray.WriteUInt(DoubleTakeExpJadeTimes);
                oByteArray.WriteUInt(CumulativeOnLineTime);
                oByteArray.WriteUInt(LastLExitGuildTime);
                oByteArray.WriteByte(IsGetGuildAward);
                oByteArray.WriteUTF(LimiteTaskStr);
                oByteArray.WriteUInt(LimiteTaskStartTime);
                oByteArray.WriteUInt(BaptizeValue);
                oByteArray.WriteUInt(PlatfromVipTID);
                oByteArray.WriteUInt(MicroClientDailyAward);
                oByteArray.WriteUTF(MicroClientLvAward);
                oByteArray.WriteUTF(GuideInfo);
                oByteArray.WriteUTF(GetBack);
                oByteArray.WriteUInt(ComatEffectiveness);
                oByteArray.WriteUTF(DailyNum);
                oByteArray.WriteUTF(PrayInfo);
                oByteArray.WriteUTF(LivenessLvAwardInfo);
                oByteArray.WriteUInt(FixSoulValue);
                oByteArray.WriteUTF(PatrolCityTaskInfo);
                oByteArray.WriteUTF(DoubleDungeonAward);
                oByteArray.WriteInt(MagicDonateTimes);
                oByteArray.WriteInt(Prestige);
                oByteArray.WriteUInt(BabelLv);
                oByteArray.WriteUTF(BabelAwardInfo);
                oByteArray.WriteUInt(LegendMaxSoul);
                oByteArray.WriteUInt(BabelTimes);
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteInt(BagItemDropProbability);
                oByteArray.WriteInt(EquipItemDropProbability);
                oByteArray.WriteUTF(OldGuideInfo);
                oByteArray.WriteUTF(ComboSkillInfo);
                oByteArray.WriteInt(LianYuTime);
                oByteArray.WriteUTF(RecycleExpInfo);
                oByteArray.WriteInt(GuildMoney);
                oByteArray.WriteUInt(VipTime);
                oByteArray.WriteUInt(MaxTalentPoint);
                oByteArray.WriteUInt(CurTalentPoint);
                oByteArray.WriteUTF(TalentInfo);
                oByteArray.WriteUInt(CurDayTakeRedBagTimes);
                oByteArray.WriteUTF(GuildTaskInfo);
                oByteArray.WriteUTF(BabelRankAward);
                oByteArray.WriteUTF(InnerDemonsInfo);
                oByteArray.WriteByte(FreeBuyMaxStrengthTimes);
                oByteArray.WriteUTF(BrothersInfo);
                oByteArray.WriteUTF(NationalTreasure);
                oByteArray.WriteInt(FreeShaiZiTimes);
                oByteArray.WriteInt(ShaiZiTimes);
                oByteArray.WriteInt(RedBagMoney);
                oByteArray.WriteUTF(HeadSculpture);
                oByteArray.WriteInt(IsRank);
                oByteArray.WriteUTF(XueFuTaskInfo);
                oByteArray.WriteUInt(MountsID);
                oByteArray.WriteUInt(BabelFinishTime);
                oByteArray.WriteUInt(OpenDayOffLineExp);
                oByteArray.WriteUInt(BagCanUnlockStartPos);
                oByteArray.WriteUInt(BagEndPos);
                oByteArray.WriteUInt(UnlockBagTime);
                oByteArray.WriteUInt(BagPosTimeUnlockCount);
                oByteArray.WriteUInt(GemEquipBaptizeValue);
                oByteArray.WriteInt(GemEquipLv);
                oByteArray.WriteInt(GemEquipExp);
                oByteArray.WriteInt(ExchangeGenExpTime);
                oByteArray.WriteUTF(DwmBuyShopItem);
                oByteArray.WriteUTF(ScreenInfo);
                oByteArray.WriteUInt(CurDayMoShaValue);
                oByteArray.WriteUTF(XinMoPaiQian);
                oByteArray.WriteUTF(WingSkillInfo);
                oByteArray.WriteUTF(PlatformVIPAward);
                oByteArray.WriteUInt(RealNameAward);
                oByteArray.WriteUTF(GMSetPlatformVIP);
                oByteArray.WriteUTF(RecycleTaskInfo);
                oByteArray.WriteUTF(GuessInfo);
                oByteArray.WriteUTF(GuessTaskInfo);
                oByteArray.WriteUInt(BreakLv);
                oByteArray.WriteUInt(BreakValue);
                oByteArray.WriteUInt(ChangeBreakValueTime);
                oByteArray.WriteUTF(CollectInfo);
                oByteArray.WriteUInt(LongPoLv);
                oByteArray.WriteUInt(LongPoValue);
                oByteArray.WriteUTF(WolongTaskInfo);
                oByteArray.WriteUTF(AdventureInfo);
                oByteArray.WriteUInt(AdventureMapGuid);
                oByteArray.WriteUTF(YYPlatformInfo);
                oByteArray.WriteUTF(GMSetYYPlatformInfo);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteUInt(NewGifts);
                oByteArray.WriteUTF(SacrificeInfo);
                oByteArray.WriteInt(BubbleStoneId);
                oByteArray.WriteInt(FreeBubble);
                oByteArray.WriteInt(BubbleUp);
                oByteArray.WriteInt(IsBubbleUp);
                oByteArray.WriteInt(MulBubbleTime);
                oByteArray.WriteUTF(LimitTimeShopItem);
                oByteArray.WriteInt(LGFTime);
                oByteArray.WriteUInt(LGFLeftTime);
                oByteArray.WriteUTF(DailyActivitySignInfo);
                oByteArray.WriteInt(DASSRefreshTime);
                oByteArray.WriteUTF(MarketRefreshTime);
                oByteArray.WriteUTF(StoreHouseInfo);
                oByteArray.WriteInt(StrengthFailExtraRate);
                oByteArray.WriteUInt(OfficialSealLv);
                oByteArray.WriteUInt(OfficialSealValue);
                oByteArray.WriteUInt(SoulPetGroup);
                oByteArray.WriteUInt(ShapeShiftEnergy);
                oByteArray.WriteUInt(TreasureMapLucky);
                oByteArray.WriteUInt(OpenTMCount);
                oByteArray.WriteUInt(CurCiphertext);
                oByteArray.WriteUInt(BabelDropLayer);
                oByteArray.WriteUInt(ArtifactBoxLv);
                oByteArray.WriteUInt(ArtifactBoxValue);
                oByteArray.WriteUInt(BlackMarketTimes);
                oByteArray.WriteUInt(BindIngots);
                oByteArray.WriteUTF(MarketBuyInfo);
                oByteArray.WriteInt(GuildFlagLv);
                oByteArray.WriteUTF(SmelterBoneInfo);
                oByteArray.WriteUInt(Liveness);
                oByteArray.WriteUInt(SignInCircle);
                oByteArray.WriteUInt(SmelterIntegral);
                oByteArray.WriteUInt(TotemLv);
                oByteArray.WriteUInt(TotemExp);
                oByteArray.WriteUInt(TimeLimitedATid);
                oByteArray.WriteUInt(TimeLimitedAEndTime);
                oByteArray.WriteUInt(TimeLimitedADone);
                oByteArray.WriteUInt(TimeLimitedBTid);
                oByteArray.WriteUInt(TimeLimitedBEndTime);
                oByteArray.WriteUInt(TimeLimitedBDone);
                oByteArray.WriteUInt(ZodiaceLayer);
                oByteArray.WriteUInt(HolyZodiaceLayer);
                oByteArray.WriteUInt(ShachengDonationNum);
                oByteArray.WriteUTF(NewCompensateRecord);
                oByteArray.WriteUInt(ExpRefineDay);
                oByteArray.WriteUInt(ExpRefineNum);
                oByteArray.WriteUTF(OpenSkillStr);
                oByteArray.WriteUInt(LastRefreshPatrolDate);
                oByteArray.WriteUInt(LastRefreshPatrolNum);
                oByteArray.WriteUInt(SignResetTime);
                oByteArray.WriteUTF(GemStoneHole);
                oByteArray.WriteUTF(JadeStoneUnlock);
                oByteArray.WriteUInt(FashionFootMark);
                oByteArray.WriteUInt(HotBloodCoins);
                oByteArray.WriteUInt(ElementBabelLv);
                oByteArray.WriteUTF(ElementBabelAwardInfo);
                oByteArray.WriteUInt(ElementBabelTimes);
                oByteArray.WriteUInt(ElementBabelFinishTime);
            }
            else
            {
                LoginIP = oByteArray.ReadUTF();
                GoldCoins = oByteArray.ReadUInt();
                SilverCoins = oByteArray.ReadUInt();
                Ingots = oByteArray.ReadUInt();
                Gifts = oByteArray.ReadUInt();
                KingCoins = oByteArray.ReadUInt();
                VIPLv = oByteArray.ReadByte();
                Lv = oByteArray.ReadUInt();
                Exp = oByteArray.ReadUInt64();
                CurHP = oByteArray.ReadUInt();
                CurMP = oByteArray.ReadUInt();
                CurSP = oByteArray.ReadUInt();
                PKValue = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                SPLevel = oByteArray.ReadUInt();
                SPExp = oByteArray.ReadUInt();
                XuefuValue = oByteArray.ReadUInt();
                ShieldValue = oByteArray.ReadUInt();
                JewelValue = oByteArray.ReadUInt();
                LifeStoneValue = oByteArray.ReadUInt();
                SevendaysSign = oByteArray.ReadUInt();
                SignFlag = oByteArray.ReadUInt();
                SignTimes = oByteArray.ReadUInt();
                SignAwards = oByteArray.ReadUInt();
                RetroactiveTimes = oByteArray.ReadUInt();
                LastRefreshTime = oByteArray.ReadUInt();
                ClothesID = oByteArray.ReadUInt();
                WeaponID = oByteArray.ReadUInt();
                AchievementScore = oByteArray.ReadUInt();
                WingLevel = oByteArray.ReadUInt();
                AppendAttackSkillID = oByteArray.ReadUInt();
                FightModle = oByteArray.ReadByte();
                DefaultTitle = oByteArray.ReadUInt();
                Direct = oByteArray.ReadUInt();
                OfficialRank = oByteArray.ReadUInt();
                OfficialExp = oByteArray.ReadUInt();
                OnlineTimesDay = oByteArray.ReadUInt();
                LoginTime = oByteArray.ReadUInt();
                IsOnline = oByteArray.ReadUInt();
                AdviceNum = oByteArray.ReadUInt();
                ChangeStateExpTime = oByteArray.ReadUInt();
                IsAutoTeam = oByteArray.ReadUInt();
                ClientType = oByteArray.ReadUInt();
                CurTaskID = oByteArray.ReadUInt();
                CanGetMicroendAward = oByteArray.ReadUInt();
                LogoutIP = oByteArray.ReadUTF();
                FirPigExp = oByteArray.ReadUInt();
                AllOffineTime = oByteArray.ReadUInt();
                AllSendRedBagTime = oByteArray.ReadUInt();
                LastTakeRedBagTime = oByteArray.ReadUInt();
                LastGetSystemCompensate = oByteArray.ReadInt();
                GMIngots = oByteArray.ReadUInt();
                WingExp = oByteArray.ReadUInt();
                IsForbiddenLanguage = oByteArray.ReadUInt();
                HonorValue = oByteArray.ReadUInt();
                FashionClothesID = oByteArray.ReadUInt();
                FashionWeaponID = oByteArray.ReadUInt();
                PhoneVerification = oByteArray.ReadUInt();
                PlatformVIPInfo = oByteArray.ReadUTF();
                XuefuLv = oByteArray.ReadUInt();
                ShieldLv = oByteArray.ReadUInt();
                JewelLv = oByteArray.ReadUInt();
                LifeStoneLv = oByteArray.ReadUInt();
                AchievementMedalLv = oByteArray.ReadUInt();
                DailyPayTimes = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                AwardComplete = oByteArray.ReadUTF();
                SkillListStr = oByteArray.ReadUTF();
                Hotkeys = oByteArray.ReadUTF();
                Title = oByteArray.ReadUTF();
                GetAwardCodeStr = oByteArray.ReadUTF();
                MusicSet = oByteArray.ReadUTF();
                ServiceWarTakeItemInfo = oByteArray.ReadUTF();
                DailyTaskInfo = oByteArray.ReadUTF();
                VIPAwardState = oByteArray.ReadUTF();
                ItemGropDailyNum = oByteArray.ReadUTF();
                PersonBossInfo = oByteArray.ReadUTF();
                TaskInfo = oByteArray.ReadUTF();
                DungeonInfo = oByteArray.ReadUTF();
                LegendSoulInfo = oByteArray.ReadUTF();
                InvestmentStr = oByteArray.ReadUTF();
                Signature = oByteArray.ReadUTF();
                FashionInfo = oByteArray.ReadUTF();
                FirstSystemInfo = oByteArray.ReadUTF();
                GrowthPlanInfo = oByteArray.ReadUTF();
                EffectInfo = oByteArray.ReadUTF();
                GMLv = oByteArray.ReadUInt();
                DailyEliteTaskInfo = oByteArray.ReadUTF();
                Fame = oByteArray.ReadUInt();
                TreasureTaskInfo = oByteArray.ReadInt();
                LivenessAwardInfo = oByteArray.ReadUTF();
                DoubleTakeExpJadeTimes = oByteArray.ReadUInt();
                CumulativeOnLineTime = oByteArray.ReadUInt();
                LastLExitGuildTime = oByteArray.ReadUInt();
                IsGetGuildAward = oByteArray.ReadByte();
                LimiteTaskStr = oByteArray.ReadUTF();
                LimiteTaskStartTime = oByteArray.ReadUInt();
                BaptizeValue = oByteArray.ReadUInt();
                PlatfromVipTID = oByteArray.ReadUInt();
                MicroClientDailyAward = oByteArray.ReadUInt();
                MicroClientLvAward = oByteArray.ReadUTF();
                GuideInfo = oByteArray.ReadUTF();
                GetBack = oByteArray.ReadUTF();
                ComatEffectiveness = oByteArray.ReadUInt();
                DailyNum = oByteArray.ReadUTF();
                PrayInfo = oByteArray.ReadUTF();
                LivenessLvAwardInfo = oByteArray.ReadUTF();
                FixSoulValue = oByteArray.ReadUInt();
                PatrolCityTaskInfo = oByteArray.ReadUTF();
                DoubleDungeonAward = oByteArray.ReadUTF();
                MagicDonateTimes = oByteArray.ReadInt();
                Prestige = oByteArray.ReadInt();
                BabelLv = oByteArray.ReadUInt();
                BabelAwardInfo = oByteArray.ReadUTF();
                LegendMaxSoul = oByteArray.ReadUInt();
                BabelTimes = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
                BagItemDropProbability = oByteArray.ReadInt();
                EquipItemDropProbability = oByteArray.ReadInt();
                OldGuideInfo = oByteArray.ReadUTF();
                ComboSkillInfo = oByteArray.ReadUTF();
                LianYuTime = oByteArray.ReadInt();
                RecycleExpInfo = oByteArray.ReadUTF();
                GuildMoney = oByteArray.ReadInt();
                VipTime = oByteArray.ReadUInt();
                MaxTalentPoint = oByteArray.ReadUInt();
                CurTalentPoint = oByteArray.ReadUInt();
                TalentInfo = oByteArray.ReadUTF();
                CurDayTakeRedBagTimes = oByteArray.ReadUInt();
                GuildTaskInfo = oByteArray.ReadUTF();
                BabelRankAward = oByteArray.ReadUTF();
                InnerDemonsInfo = oByteArray.ReadUTF();
                FreeBuyMaxStrengthTimes = oByteArray.ReadByte();
                BrothersInfo = oByteArray.ReadUTF();
                NationalTreasure = oByteArray.ReadUTF();
                FreeShaiZiTimes = oByteArray.ReadInt();
                ShaiZiTimes = oByteArray.ReadInt();
                RedBagMoney = oByteArray.ReadInt();
                HeadSculpture = oByteArray.ReadUTF();
                IsRank = oByteArray.ReadInt();
                XueFuTaskInfo = oByteArray.ReadUTF();
                MountsID = oByteArray.ReadUInt();
                BabelFinishTime = oByteArray.ReadUInt();
                OpenDayOffLineExp = oByteArray.ReadUInt();
                BagCanUnlockStartPos = oByteArray.ReadUInt();
                BagEndPos = oByteArray.ReadUInt();
                UnlockBagTime = oByteArray.ReadUInt();
                BagPosTimeUnlockCount = oByteArray.ReadUInt();
                GemEquipBaptizeValue = oByteArray.ReadUInt();
                GemEquipLv = oByteArray.ReadInt();
                GemEquipExp = oByteArray.ReadInt();
                ExchangeGenExpTime = oByteArray.ReadInt();
                DwmBuyShopItem = oByteArray.ReadUTF();
                ScreenInfo = oByteArray.ReadUTF();
                CurDayMoShaValue = oByteArray.ReadUInt();
                XinMoPaiQian = oByteArray.ReadUTF();
                WingSkillInfo = oByteArray.ReadUTF();
                PlatformVIPAward = oByteArray.ReadUTF();
                RealNameAward = oByteArray.ReadUInt();
                GMSetPlatformVIP = oByteArray.ReadUTF();
                RecycleTaskInfo = oByteArray.ReadUTF();
                GuessInfo = oByteArray.ReadUTF();
                GuessTaskInfo = oByteArray.ReadUTF();
                BreakLv = oByteArray.ReadUInt();
                BreakValue = oByteArray.ReadUInt();
                ChangeBreakValueTime = oByteArray.ReadUInt();
                CollectInfo = oByteArray.ReadUTF();
                LongPoLv = oByteArray.ReadUInt();
                LongPoValue = oByteArray.ReadUInt();
                WolongTaskInfo = oByteArray.ReadUTF();
                AdventureInfo = oByteArray.ReadUTF();
                AdventureMapGuid = oByteArray.ReadUInt();
                YYPlatformInfo = oByteArray.ReadUTF();
                GMSetYYPlatformInfo = oByteArray.ReadUTF();
                Career = oByteArray.ReadUInt();
                NewGifts = oByteArray.ReadUInt();
                SacrificeInfo = oByteArray.ReadUTF();
                BubbleStoneId = oByteArray.ReadInt();
                FreeBubble = oByteArray.ReadInt();
                BubbleUp = oByteArray.ReadInt();
                IsBubbleUp = oByteArray.ReadInt();
                MulBubbleTime = oByteArray.ReadInt();
                LimitTimeShopItem = oByteArray.ReadUTF();
                LGFTime = oByteArray.ReadInt();
                LGFLeftTime = oByteArray.ReadUInt();
                DailyActivitySignInfo = oByteArray.ReadUTF();
                DASSRefreshTime = oByteArray.ReadInt();
                MarketRefreshTime = oByteArray.ReadUTF();
                StoreHouseInfo = oByteArray.ReadUTF();
                StrengthFailExtraRate = oByteArray.ReadInt();
                OfficialSealLv = oByteArray.ReadUInt();
                OfficialSealValue = oByteArray.ReadUInt();
                SoulPetGroup = oByteArray.ReadUInt();
                ShapeShiftEnergy = oByteArray.ReadUInt();
                TreasureMapLucky = oByteArray.ReadUInt();
                OpenTMCount = oByteArray.ReadUInt();
                CurCiphertext = oByteArray.ReadUInt();
                BabelDropLayer = oByteArray.ReadUInt();
                ArtifactBoxLv = oByteArray.ReadUInt();
                ArtifactBoxValue = oByteArray.ReadUInt();
                BlackMarketTimes = oByteArray.ReadUInt();
                BindIngots = oByteArray.ReadUInt();
                MarketBuyInfo = oByteArray.ReadUTF();
                GuildFlagLv = oByteArray.ReadInt();
                SmelterBoneInfo = oByteArray.ReadUTF();
                Liveness = oByteArray.ReadUInt();
                SignInCircle = oByteArray.ReadUInt();
                SmelterIntegral = oByteArray.ReadUInt();
                TotemLv = oByteArray.ReadUInt();
                TotemExp = oByteArray.ReadUInt();
                TimeLimitedATid = oByteArray.ReadUInt();
                TimeLimitedAEndTime = oByteArray.ReadUInt();
                TimeLimitedADone = oByteArray.ReadUInt();
                TimeLimitedBTid = oByteArray.ReadUInt();
                TimeLimitedBEndTime = oByteArray.ReadUInt();
                TimeLimitedBDone = oByteArray.ReadUInt();
                ZodiaceLayer = oByteArray.ReadUInt();
                HolyZodiaceLayer = oByteArray.ReadUInt();
                ShachengDonationNum = oByteArray.ReadUInt();
                NewCompensateRecord = oByteArray.ReadUTF();
                ExpRefineDay = oByteArray.ReadUInt();
                ExpRefineNum = oByteArray.ReadUInt();
                OpenSkillStr = oByteArray.ReadUTF();
                LastRefreshPatrolDate = oByteArray.ReadUInt();
                LastRefreshPatrolNum = oByteArray.ReadUInt();
                SignResetTime = oByteArray.ReadUInt();
                GemStoneHole = oByteArray.ReadUTF();
                JadeStoneUnlock = oByteArray.ReadUTF();
                FashionFootMark = oByteArray.ReadUInt();
                HotBloodCoins = oByteArray.ReadUInt();
                ElementBabelLv = oByteArray.ReadUInt();
                ElementBabelAwardInfo = oByteArray.ReadUTF();
                ElementBabelTimes = oByteArray.ReadUInt();
                ElementBabelFinishTime = oByteArray.ReadUInt();
            }
        }
		public ReqSaveCharacter()
		{
			PacketID = 111;
		}
    }

    /// <summary>
    ///  [请求类] 保存玩家角色数据 创建者
    /// </summary>
    [Package(111)]
    public partial class ReqSaveCharacterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSaveCharacter();
        }
    }


    /// <summary>
    ///  [响应类]保存玩家角色数据
    /// </summary>
    public partial class ResSaveCharacter: Packet 
    {

        public override Packet Clone()
        {
            ResSaveCharacter pkg = new ResSaveCharacter();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSaveCharacter()
		{
			PacketID = 112;
		}
    }

    /// <summary>
    ///  [响应类] 保存玩家角色数据 创建者
    /// </summary>
    [Package(112)]
    public partial class ResSaveCharacterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSaveCharacter();
        }
    }


    /// <summary>
    ///  [请求类]装备装备到身上
    /// </summary>
    public partial class ReqUseEquip: Packet 
    {
        /// <summary>
        /// 背包格子索引
        /// </summary>
        public int BagPos;
        /// <summary>
        /// 装备栏格子索引
        /// </summary>
        public int BodyPos;

        public override Packet Clone()
        {
            ReqUseEquip pkg = new ReqUseEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BagPos = BagPos;
            pkg.BodyPos = BodyPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(BagPos);
                oByteArray.WriteInt(BodyPos);
            }
            else
            {
                BagPos = oByteArray.ReadInt();
                BodyPos = oByteArray.ReadInt();
            }
        }
		public ReqUseEquip()
		{
			PacketID = 113;
		}
    }

    /// <summary>
    ///  [请求类] 装备装备到身上 创建者
    /// </summary>
    [Package(113)]
    public partial class ReqUseEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseEquip();
        }
    }


    /// <summary>
    ///  [响应类]装备装备到身上
    /// </summary>
    public partial class ResUseEquip: Packet 
    {
        /// <summary>
        /// 目标位置
        /// </summary>
        public int DestPos;
        /// <summary>
        /// 发起使用位置
        /// </summary>
        public int SrcPos;
        /// <summary>
        /// 穿戴结果，0成功, 1:不是装备; 2:职业不符; 3:性别不符; 4:境界不足; 5:等级不足;
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUseEquip pkg = new ResUseEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DestPos = DestPos;
            pkg.SrcPos = SrcPos;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(DestPos);
                oByteArray.WriteInt(SrcPos);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                DestPos = oByteArray.ReadInt();
                SrcPos = oByteArray.ReadInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUseEquip()
		{
			PacketID = 114;
		}
    }

    /// <summary>
    ///  [响应类] 装备装备到身上 创建者
    /// </summary>
    [Package(114)]
    public partial class ResUseEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseEquip();
        }
    }


    /// <summary>
    ///  [请求类]交换2格子
    /// </summary>
    public partial class ReqSwapGood: Packet 
    {
        /// <summary>
        /// 第一个位置
        /// </summary>
        public int Pos0;
        /// <summary>
        /// 第2个位置
        /// </summary>
        public int Pos1;

        public override Packet Clone()
        {
            ReqSwapGood pkg = new ReqSwapGood();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos0 = Pos0;
            pkg.Pos1 = Pos1;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Pos0);
                oByteArray.WriteInt(Pos1);
            }
            else
            {
                Pos0 = oByteArray.ReadInt();
                Pos1 = oByteArray.ReadInt();
            }
        }
		public ReqSwapGood()
		{
			PacketID = 115;
		}
    }

    /// <summary>
    ///  [请求类] 交换2格子 创建者
    /// </summary>
    [Package(115)]
    public partial class ReqSwapGoodCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSwapGood();
        }
    }


    /// <summary>
    ///  [响应类]交换2格子
    /// </summary>
    public partial class ResSwapGood: Packet 
    {
        /// <summary>
        /// 源格子位置
        /// </summary>
        public int Pos0;
        /// <summary>
        /// 目的格子位置
        /// </summary>
        public int Pos1;
        /// <summary>
        /// 0成功; 1:交换到身上的只能是装备; 2:找不到格子对应的模板;
        /// </summary>
        public int Result;

        public override Packet Clone()
        {
            ResSwapGood pkg = new ResSwapGood();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos0 = Pos0;
            pkg.Pos1 = Pos1;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Pos0);
                oByteArray.WriteInt(Pos1);
                oByteArray.WriteInt(Result);
            }
            else
            {
                Pos0 = oByteArray.ReadInt();
                Pos1 = oByteArray.ReadInt();
                Result = oByteArray.ReadInt();
            }
        }
		public ResSwapGood()
		{
			PacketID = 116;
		}
    }

    /// <summary>
    ///  [响应类] 交换2格子 创建者
    /// </summary>
    [Package(116)]
    public partial class ResSwapGoodCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSwapGood();
        }
    }


    /// <summary>
    ///  [请求类]GM命令
    /// </summary>
    public partial class ReqGMCommand: Packet 
    {
        /// <summary>
        /// GM命令完整字符串
        /// </summary>
        public string CommandStr;

        public override Packet Clone()
        {
            ReqGMCommand pkg = new ReqGMCommand();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CommandStr = CommandStr;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(CommandStr);
            }
            else
            {
                CommandStr = oByteArray.ReadUTF();
            }
        }
		public ReqGMCommand()
		{
			PacketID = 117;
		}
    }

    /// <summary>
    ///  [请求类] GM命令 创建者
    /// </summary>
    [Package(117)]
    public partial class ReqGMCommandCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGMCommand();
        }
    }


    /// <summary>
    ///  [响应类]GM命令
    /// </summary>
    public partial class ResGMCommand: Packet 
    {
        /// <summary>
        /// GM命令执行结果
        /// </summary>
        public string ResultMsg;

        public override Packet Clone()
        {
            ResGMCommand pkg = new ResGMCommand();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ResultMsg = ResultMsg;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ResultMsg);
            }
            else
            {
                ResultMsg = oByteArray.ReadUTF();
            }
        }
		public ResGMCommand()
		{
			PacketID = 118;
		}
    }

    /// <summary>
    ///  [响应类] GM命令 创建者
    /// </summary>
    [Package(118)]
    public partial class ResGMCommandCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGMCommand();
        }
    }


    /// <summary>
    ///  [请求类]脱下装备
    /// </summary>
    public partial class ReqUnEquip: Packet 
    {
        /// <summary>
        /// 装备点
        /// </summary>
        public int Pos;

        public override Packet Clone()
        {
            ReqUnEquip pkg = new ReqUnEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Pos);
            }
            else
            {
                Pos = oByteArray.ReadInt();
            }
        }
		public ReqUnEquip()
		{
			PacketID = 119;
		}
    }

    /// <summary>
    ///  [请求类] 脱下装备 创建者
    /// </summary>
    [Package(119)]
    public partial class ReqUnEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUnEquip();
        }
    }


    /// <summary>
    ///  [响应类]脱下装备
    /// </summary>
    public partial class ResUnEquip: Packet 
    {
        /// <summary>
        /// 0:ok, 1:bag no empty cell；2：找不到装备点 3:背包没空格; 4:未知原因取不到可用背包格位置 5：未知原因脱下装备出错
        /// </summary>
        public int nResult;
        /// <summary>
        /// 成功的话是目的背包格子
        /// </summary>
        public int PosBag;
        /// <summary>
        /// 成功的话是装备点索引
        /// </summary>
        public int PosEquipPoint;
        /// <summary>
        /// 
        /// </summary>
        public uint Reason;

        public override Packet Clone()
        {
            ResUnEquip pkg = new ResUnEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.nResult = nResult;
            pkg.PosBag = PosBag;
            pkg.PosEquipPoint = PosEquipPoint;
            pkg.Reason = Reason;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(nResult);
                oByteArray.WriteInt(PosBag);
                oByteArray.WriteInt(PosEquipPoint);
                oByteArray.WriteUInt(Reason);
            }
            else
            {
                nResult = oByteArray.ReadInt();
                PosBag = oByteArray.ReadInt();
                PosEquipPoint = oByteArray.ReadInt();
                Reason = oByteArray.ReadUInt();
            }
        }
		public ResUnEquip()
		{
			PacketID = 120;
		}
    }

    /// <summary>
    ///  [响应类] 脱下装备 创建者
    /// </summary>
    [Package(120)]
    public partial class ResUnEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUnEquip();
        }
    }


    /// <summary>
    ///  [请求类]通知周围其他对象移动
    /// </summary>
    public partial class ReqNoticeObjectMove: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeObjectMove pkg = new ReqNoticeObjectMove();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeObjectMove()
		{
			PacketID = 121;
		}
    }

    /// <summary>
    ///  [请求类] 通知周围其他对象移动 创建者
    /// </summary>
    [Package(121)]
    public partial class ReqNoticeObjectMoveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeObjectMove();
        }
    }


    /// <summary>
    ///  [响应类]通知周围其他对象移动
    /// </summary>
    public partial class ResNoticeObjectMove: Packet 
    {
        /// <summary>
        /// 坐标位置
        /// </summary>
        public ushort TargetX;
        /// <summary>
        /// 坐标位置
        /// </summary>
        public ushort TargetY;
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 0是跑1是走
        /// </summary>
        public byte WalkType;
        /// <summary>
        /// 当前位置X
        /// </summary>
        public ushort MapX;
        /// <summary>
        /// 当前位置Y
        /// </summary>
        public ushort MapY;

        public override Packet Clone()
        {
            ResNoticeObjectMove pkg = new ResNoticeObjectMove();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetX = TargetX;
            pkg.TargetY = TargetY;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.WalkType = WalkType;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(TargetX);
                oByteArray.WriteUShort(TargetY);
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(WalkType);
                oByteArray.WriteUShort(MapX);
                oByteArray.WriteUShort(MapY);
            }
            else
            {
                TargetX = oByteArray.ReadUShort();
                TargetY = oByteArray.ReadUShort();
                ObjectID.Serializtion(oByteArray, bSerialize);
                WalkType = oByteArray.ReadByte();
                MapX = oByteArray.ReadUShort();
                MapY = oByteArray.ReadUShort();
            }
        }
		public ResNoticeObjectMove()
		{
			PacketID = 122;
		}
    }

    /// <summary>
    ///  [响应类] 通知周围其他对象移动 创建者
    /// </summary>
    [Package(122)]
    public partial class ResNoticeObjectMoveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeObjectMove();
        }
    }


    /// <summary>
    ///  [请求类]地图服务器更新玩家地图位置到世界服务器
    /// </summary>
    public partial class ReqUpdatePlayerXY: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图坐标
        /// </summary>
        public ushort MapX;
        /// <summary>
        /// 地图坐标
        /// </summary>
        public ushort MapY;
        /// <summary>
        /// 玩家朝向
        /// </summary>
        public uint Direct;
        /// <summary>
        /// 是否在安全区
        /// </summary>
        public bool IsSafePoint;

        public override Packet Clone()
        {
            ReqUpdatePlayerXY pkg = new ReqUpdatePlayerXY();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Direct = Direct;
            pkg.IsSafePoint = IsSafePoint;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUShort(MapX);
                oByteArray.WriteUShort(MapY);
                oByteArray.WriteUInt(Direct);
                oByteArray.WriteBoolean(IsSafePoint);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUShort();
                MapY = oByteArray.ReadUShort();
                Direct = oByteArray.ReadUInt();
                IsSafePoint = oByteArray.ReadBoolean();
            }
        }
		public ReqUpdatePlayerXY()
		{
			PacketID = 123;
		}
    }

    /// <summary>
    ///  [请求类] 地图服务器更新玩家地图位置到世界服务器 创建者
    /// </summary>
    [Package(123)]
    public partial class ReqUpdatePlayerXYCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerXY();
        }
    }


    /// <summary>
    ///  [响应类]地图服务器更新玩家地图位置到世界服务器
    /// </summary>
    public partial class ResUpdatePlayerXY: Packet 
    {

        public override Packet Clone()
        {
            ResUpdatePlayerXY pkg = new ResUpdatePlayerXY();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdatePlayerXY()
		{
			PacketID = 124;
		}
    }

    /// <summary>
    ///  [响应类] 地图服务器更新玩家地图位置到世界服务器 创建者
    /// </summary>
    [Package(124)]
    public partial class ResUpdatePlayerXYCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerXY();
        }
    }


    /// <summary>
    ///  [请求类]提高境界等级
    /// </summary>
    public partial class ReqUpGradeStateLv: Packet 
    {

        public override Packet Clone()
        {
            ReqUpGradeStateLv pkg = new ReqUpGradeStateLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpGradeStateLv()
		{
			PacketID = 125;
		}
    }

    /// <summary>
    ///  [请求类] 提高境界等级 创建者
    /// </summary>
    [Package(125)]
    public partial class ReqUpGradeStateLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpGradeStateLv();
        }
    }


    /// <summary>
    ///  [响应类]提高境界等级
    /// </summary>
    public partial class ResUpGradeStateLv: Packet 
    {
        /// <summary>
        /// 0-成功，1-境界值不足，无法突破，2-经验值不足无法兑换，3-等级不足，无法兑换境界值，4-货币不足,5-已到顶级,6-功能未开启,7-今日已达兑换次数上线
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResUpGradeStateLv pkg = new ResUpGradeStateLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResUpGradeStateLv()
		{
			PacketID = 126;
		}
    }

    /// <summary>
    ///  [响应类] 提高境界等级 创建者
    /// </summary>
    [Package(126)]
    public partial class ResUpGradeStateLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpGradeStateLv();
        }
    }


    /// <summary>
    ///  [请求类]商城购买物品
    /// </summary>
    public partial class ReqBuyItem: Packet 
    {
        /// <summary>
        /// 商城ID
        /// </summary>
        public uint ShopTID;
        /// <summary>
        /// 1- 商城购买，2-快速购买并使用
        /// </summary>
        public byte Type;
        /// <summary>
        /// 数量
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ReqBuyItem pkg = new ReqBuyItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ShopTID = ShopTID;
            pkg.Type = Type;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ShopTID);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                ShopTID = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                Count = oByteArray.ReadUInt();
            }
        }
		public ReqBuyItem()
		{
			PacketID = 127;
		}
    }

    /// <summary>
    ///  [请求类] 商城购买物品 创建者
    /// </summary>
    [Package(127)]
    public partial class ReqBuyItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyItem();
        }
    }


    /// <summary>
    ///  [响应类]商城购买物品
    /// </summary>
    public partial class ResBuyItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 购买物品的ID
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 商城ID
        /// </summary>
        public uint ShopTID;

        public override Packet Clone()
        {
            ResBuyItem pkg = new ResBuyItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemID = ItemID;
            pkg.ShopTID = ShopTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt(ShopTID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                ItemID = oByteArray.ReadUInt();
                ShopTID = oByteArray.ReadUInt();
            }
        }
		public ResBuyItem()
		{
			PacketID = 128;
		}
    }

    /// <summary>
    ///  [响应类] 商城购买物品 创建者
    /// </summary>
    [Package(128)]
    public partial class ResBuyItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyItem();
        }
    }


    /// <summary>
    ///  [请求类]更新属性加成值
    /// </summary>
    public partial class ReqUpdateBasicAttribute: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateBasicAttribute pkg = new ReqUpdateBasicAttribute();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateBasicAttribute()
		{
			PacketID = 129;
		}
    }

    /// <summary>
    ///  [请求类] 更新属性加成值 创建者
    /// </summary>
    [Package(129)]
    public partial class ReqUpdateBasicAttributeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateBasicAttribute();
        }
    }


    /// <summary>
    ///  [响应类]更新属性加成值
    /// </summary>
    public partial class ResUpdateBasicAttribute: Packet 
    {
        /// <summary>
        /// 战斗属性集合
        /// </summary>
        public CombatAttribute AttributeInfo = new CombatAttribute();
        /// <summary>
        /// 角色等级
        /// </summary>
        public uint Level;
        /// <summary>
        /// 是否升级
        /// </summary>
        public bool LevelUp;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Career;
        /// <summary>
        /// 是否回满状态
        /// </summary>
        public bool FullStatus;

        public override Packet Clone()
        {
            ResUpdateBasicAttribute pkg = new ResUpdateBasicAttribute();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AttributeInfo = AttributeInfo.Clone() as CombatAttribute;
            pkg.Level = Level;
            pkg.LevelUp = LevelUp;
            pkg.Career = Career;
            pkg.FullStatus = FullStatus;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                AttributeInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Level);
                oByteArray.WriteBoolean(LevelUp);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteBoolean(FullStatus);
            }
            else
            {
                AttributeInfo.Serializtion(oByteArray, bSerialize);
                Level = oByteArray.ReadUInt();
                LevelUp = oByteArray.ReadBoolean();
                Career = oByteArray.ReadUInt();
                FullStatus = oByteArray.ReadBoolean();
            }
        }
		public ResUpdateBasicAttribute()
		{
			PacketID = 130;
		}
    }

    /// <summary>
    ///  [响应类] 更新属性加成值 创建者
    /// </summary>
    [Package(130)]
    public partial class ResUpdateBasicAttributeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateBasicAttribute();
        }
    }


    /// <summary>
    ///  [请求类]货币变更更新
    /// </summary>
    public partial class ReqUpdateMoney: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMoney pkg = new ReqUpdateMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMoney()
		{
			PacketID = 131;
		}
    }

    /// <summary>
    ///  [请求类] 货币变更更新 创建者
    /// </summary>
    [Package(131)]
    public partial class ReqUpdateMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMoney();
        }
    }


    /// <summary>
    ///  [响应类]货币变更更新
    /// </summary>
    public partial class ResUpdateMoney: Packet 
    {
        /// <summary>
        /// 货币类型1-元宝，2-礼券，3-绑定金币，4-金币
        /// </summary>
        public byte Type;
        /// <summary>
        /// 货币值
        /// </summary>
        public uint Money;
        /// <summary>
        /// 累计充值
        /// </summary>
        public uint AllRecharge;
        /// <summary>
        /// VIP等级
        /// </summary>
        public byte VipLv;
        /// <summary>
        /// 每日充值
        /// </summary>
        public uint DailyPayNum;
        /// <summary>
        /// 今日累计充值，用于七日每日充值领取补充奖励，可以小于每日充值数
        /// </summary>
        public uint CurDayPayNum;
        /// <summary>
        /// 总RMB充值
        /// </summary>
        public uint AllRechargeRMB;
        /// <summary>
        /// 当日RMB充值
        /// </summary>
        public uint DailyRechargeRMB;

        public override Packet Clone()
        {
            ResUpdateMoney pkg = new ResUpdateMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Money = Money;
            pkg.AllRecharge = AllRecharge;
            pkg.VipLv = VipLv;
            pkg.DailyPayNum = DailyPayNum;
            pkg.CurDayPayNum = CurDayPayNum;
            pkg.AllRechargeRMB = AllRechargeRMB;
            pkg.DailyRechargeRMB = DailyRechargeRMB;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(Money);
                oByteArray.WriteUInt(AllRecharge);
                oByteArray.WriteByte(VipLv);
                oByteArray.WriteUInt(DailyPayNum);
                oByteArray.WriteUInt(CurDayPayNum);
                oByteArray.WriteUInt(AllRechargeRMB);
                oByteArray.WriteUInt(DailyRechargeRMB);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Money = oByteArray.ReadUInt();
                AllRecharge = oByteArray.ReadUInt();
                VipLv = oByteArray.ReadByte();
                DailyPayNum = oByteArray.ReadUInt();
                CurDayPayNum = oByteArray.ReadUInt();
                AllRechargeRMB = oByteArray.ReadUInt();
                DailyRechargeRMB = oByteArray.ReadUInt();
            }
        }
		public ResUpdateMoney()
		{
			PacketID = 132;
		}
    }

    /// <summary>
    ///  [响应类] 货币变更更新 创建者
    /// </summary>
    [Package(132)]
    public partial class ResUpdateMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMoney();
        }
    }


    /// <summary>
    ///  [请求类]更新角色经验值
    /// </summary>
    public partial class ReqUpdateExp: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateExp pkg = new ReqUpdateExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateExp()
		{
			PacketID = 133;
		}
    }

    /// <summary>
    ///  [请求类] 更新角色经验值 创建者
    /// </summary>
    [Package(133)]
    public partial class ReqUpdateExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateExp();
        }
    }


    /// <summary>
    ///  [响应类]更新角色经验值
    /// </summary>
    public partial class ResUpdateExp: Packet 
    {
        /// <summary>
        /// 经验值
        /// </summary>
        public long Exp;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Level;
        /// <summary>
        /// 0杀怪1使用物品2降妖除魔3回收装备4经验红包5石墓烧猪6完成副本7完成任务8轮回9境界 10三圣布武 11-批量使用经验丹
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResUpdateExp pkg = new ResUpdateExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Exp = Exp;
            pkg.Level = Level;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt64(Exp);
                oByteArray.WriteUInt(Level);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Exp = oByteArray.ReadInt64();
                Level = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResUpdateExp()
		{
			PacketID = 134;
		}
    }

    /// <summary>
    ///  [响应类] 更新角色经验值 创建者
    /// </summary>
    [Package(134)]
    public partial class ResUpdateExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateExp();
        }
    }


    /// <summary>
    ///  [请求类]GM命令列表
    /// </summary>
    public partial class ReqGMCmdList: Packet 
    {

        public override Packet Clone()
        {
            ReqGMCmdList pkg = new ReqGMCmdList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGMCmdList()
		{
			PacketID = 135;
		}
    }

    /// <summary>
    ///  [请求类] GM命令列表 创建者
    /// </summary>
    [Package(135)]
    public partial class ReqGMCmdListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGMCmdList();
        }
    }


    /// <summary>
    ///  [响应类]GM命令列表
    /// </summary>
    public partial class ResGMCmdList: Packet 
    {
        /// <summary>
        /// 命令说明
        /// </summary>
        public string CmdDes;

        public override Packet Clone()
        {
            ResGMCmdList pkg = new ResGMCmdList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CmdDes = CmdDes;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(CmdDes);
            }
            else
            {
                CmdDes = oByteArray.ReadUTF();
            }
        }
		public ResGMCmdList()
		{
			PacketID = 136;
		}
    }

    /// <summary>
    ///  [响应类] GM命令列表 创建者
    /// </summary>
    [Package(136)]
    public partial class ResGMCmdListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGMCmdList();
        }
    }


    /// <summary>
    ///  [请求类]装备回收
    /// </summary>
    public partial class ReqEquipRecycle: Packet 
    {
        /// <summary>
        /// true是自动
        /// </summary>
        public bool IsSystem;
        /// <summary>
        /// 物品列表
        /// </summary>
        public List<ObjectGuidInfo> ItemList = new List<ObjectGuidInfo>();
        /// <summary>
        /// 0实收普通装备1回收魔器2宝藏仓库回收
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqEquipRecycle pkg = new ReqEquipRecycle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsSystem = IsSystem;
            foreach (ObjectGuidInfo item in ItemList)
            {
                pkg.ItemList.Add(item.Clone() as ObjectGuidInfo);
            }
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(IsSystem);
                for (int i = 0; i < ItemList.Count; i++)
                {
                      ItemList[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(Type);
            }
            else
            {
                IsSystem = oByteArray.ReadBoolean();
                int ItemListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemListCount; i++)
                {
                    ObjectGuidInfo obj = new ObjectGuidInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemList.Add(obj);
                }
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqEquipRecycle()
		{
			PacketID = 137;
		}
    }

    /// <summary>
    ///  [请求类] 装备回收 创建者
    /// </summary>
    [Package(137)]
    public partial class ReqEquipRecycleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEquipRecycle();
        }
    }


    /// <summary>
    ///  [响应类]装备回收
    /// </summary>
    public partial class ResEquipRecycle: Packet 
    {
        /// <summary>
        /// 0:成功;  1:不是装备;  2:不能回收;  3:客户端类型填写错误;  4:一键回收但找不到符合条件的要回收物品!;
        /// </summary>
        public int Result;
        /// <summary>
        /// 增加的经验值
        /// </summary>
        public uint AddExp;
        /// <summary>
        /// 0实收普通装备1回收魔器2宝藏仓库回收
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResEquipRecycle pkg = new ResEquipRecycle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.AddExp = AddExp;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
                oByteArray.WriteUInt(AddExp);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Result = oByteArray.ReadInt();
                AddExp = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResEquipRecycle()
		{
			PacketID = 138;
		}
    }

    /// <summary>
    ///  [响应类] 装备回收 创建者
    /// </summary>
    [Package(138)]
    public partial class ResEquipRecycleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEquipRecycle();
        }
    }


    /// <summary>
    ///  [请求类]装备合成
    /// </summary>
    public partial class ReqEquipCompound: Packet 
    {
        /// <summary>
        /// 合成规则ID
        /// </summary>
        public uint CompoundID;

        public override Packet Clone()
        {
            ReqEquipCompound pkg = new ReqEquipCompound();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CompoundID = CompoundID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CompoundID);
            }
            else
            {
                CompoundID = oByteArray.ReadUInt();
            }
        }
		public ReqEquipCompound()
		{
			PacketID = 139;
		}
    }

    /// <summary>
    ///  [请求类] 装备合成 创建者
    /// </summary>
    [Package(139)]
    public partial class ReqEquipCompoundCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEquipCompound();
        }
    }


    /// <summary>
    ///  [响应类]装备合成
    /// </summary>
    public partial class ResEquipCompound: Packet 
    {
        /// <summary>
        /// 0-成功，1-所需装备不够，2-缺少消耗物品
        /// </summary>
        public int Result;

        public override Packet Clone()
        {
            ResEquipCompound pkg = new ResEquipCompound();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
            }
            else
            {
                Result = oByteArray.ReadInt();
            }
        }
		public ResEquipCompound()
		{
			PacketID = 140;
		}
    }

    /// <summary>
    ///  [响应类] 装备合成 创建者
    /// </summary>
    [Package(140)]
    public partial class ResEquipCompoundCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEquipCompound();
        }
    }


    /// <summary>
    ///  [请求类]更新地图上的玩家形象
    /// </summary>
    public partial class ReqUpdateAvatar: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAvatar pkg = new ReqUpdateAvatar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAvatar()
		{
			PacketID = 141;
		}
    }

    /// <summary>
    ///  [请求类] 更新地图上的玩家形象 创建者
    /// </summary>
    [Package(141)]
    public partial class ReqUpdateAvatarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAvatar();
        }
    }


    /// <summary>
    ///  [响应类]更新地图上的玩家形象
    /// </summary>
    public partial class ResUpdateAvatar: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 外观类型 1-武器，2-衣服，3-翅膀，4-头衔，5-品阶,6-公会,7-PK值,8-灰名[1:灰，0:不灰],12-名号
        /// </summary>
        public uint Type;
        /// <summary>
        /// 外观ID
        /// </summary>
        public uint AvatarID;
        /// <summary>
        /// 外观名称
        /// </summary>
        public string AvatarName;

        public override Packet Clone()
        {
            ResUpdateAvatar pkg = new ResUpdateAvatar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Type = Type;
            pkg.AvatarID = AvatarID;
            pkg.AvatarName = AvatarName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(AvatarID);
                oByteArray.WriteUTF(AvatarName);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Type = oByteArray.ReadUInt();
                AvatarID = oByteArray.ReadUInt();
                AvatarName = oByteArray.ReadUTF();
            }
        }
		public ResUpdateAvatar()
		{
			PacketID = 142;
		}
    }

    /// <summary>
    ///  [响应类] 更新地图上的玩家形象 创建者
    /// </summary>
    [Package(142)]
    public partial class ResUpdateAvatarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAvatar();
        }
    }


    /// <summary>
    ///  [请求类]整理物品
    /// </summary>
    public partial class ReqArrangeItems: Packet 
    {
        /// <summary>
        /// 1-背包整理，2-仓库整理，3-宝藏仓库
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqArrangeItems pkg = new ReqArrangeItems();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqArrangeItems()
		{
			PacketID = 143;
		}
    }

    /// <summary>
    ///  [请求类] 整理物品 创建者
    /// </summary>
    [Package(143)]
    public partial class ReqArrangeItemsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqArrangeItems();
        }
    }


    /// <summary>
    ///  [响应类]整理物品
    /// </summary>
    public partial class ResArrangeItems: Packet 
    {
        /// <summary>
        /// 1-背包整理，2-仓库整理，3-宝藏仓库，4-矿工仓库
        /// </summary>
        public byte Type;
        /// <summary>
        /// 0-成功 1-类型错误
        /// </summary>
        public byte Result;
        /// <summary>
        /// 宝藏仓库及挖矿背包有效
        /// </summary>
        public List<GameItemInfo> ItemVec = new List<GameItemInfo>();

        public override Packet Clone()
        {
            ResArrangeItems pkg = new ResArrangeItems();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Result = Result;
            foreach (GameItemInfo item in ItemVec)
            {
                pkg.ItemVec.Add(item.Clone() as GameItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(Result);
                oByteArray.WriteUShort((ushort)ItemVec.Count);
                for (int i = 0; i < ItemVec.Count; i++)
                {
                    ItemVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Type = oByteArray.ReadByte();
                Result = oByteArray.ReadByte();
                int ItemVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemVecCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemVec.Add(obj);
                }
            }
        }
		public ResArrangeItems()
		{
			PacketID = 144;
		}
    }

    /// <summary>
    ///  [响应类] 整理物品 创建者
    /// </summary>
    [Package(144)]
    public partial class ResArrangeItemsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResArrangeItems();
        }
    }


    /// <summary>
    ///  [请求类]圣器精炼
    /// </summary>
    public partial class ReqStoveUpgrade: Packet 
    {
        /// <summary>
        /// 进阶类型（1龙血,2掌灵,3元力,4暗器,6面纱）
        /// </summary>
        public uint Type;
        /// <summary>
        /// false 不用钱，true用钱;
        /// </summary>
        public bool UseIgnots;

        public override Packet Clone()
        {
            ReqStoveUpgrade pkg = new ReqStoveUpgrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.UseIgnots = UseIgnots;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteBoolean(UseIgnots);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                UseIgnots = oByteArray.ReadBoolean();
            }
        }
		public ReqStoveUpgrade()
		{
			PacketID = 145;
		}
    }

    /// <summary>
    ///  [请求类] 圣器精炼 创建者
    /// </summary>
    [Package(145)]
    public partial class ReqStoveUpgradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStoveUpgrade();
        }
    }


    /// <summary>
    ///  [响应类]圣器精炼
    /// </summary>
    public partial class ResStoveUpgrade: Packet 
    {
        /// <summary>
        /// 0-升级成功，1-位置不合法，2-满级，3-钱不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 进阶类型（1龙血,2掌灵,3元力,4暗器,6面纱）
        /// </summary>
        public byte Type;
        /// <summary>
        /// 等级（result值为0有效）
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 是否等级提升了
        /// </summary>
        public bool IsLvUp;

        public override Packet Clone()
        {
            ResStoveUpgrade pkg = new ResStoveUpgrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.Lv = Lv;
            pkg.IsLvUp = IsLvUp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteBoolean(IsLvUp);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                Lv = oByteArray.ReadUInt();
                IsLvUp = oByteArray.ReadBoolean();
            }
        }
		public ResStoveUpgrade()
		{
			PacketID = 146;
		}
    }

    /// <summary>
    ///  [响应类] 圣器精炼 创建者
    /// </summary>
    [Package(146)]
    public partial class ResStoveUpgradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStoveUpgrade();
        }
    }


    /// <summary>
    ///  [请求类]领取成就奖励
    /// </summary>
    public partial class ReqGetAchievementAward: Packet 
    {
        /// <summary>
        /// 领取奖励索引
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqGetAchievementAward pkg = new ReqGetAchievementAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqGetAchievementAward()
		{
			PacketID = 147;
		}
    }

    /// <summary>
    ///  [请求类] 领取成就奖励 创建者
    /// </summary>
    [Package(147)]
    public partial class ReqGetAchievementAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetAchievementAward();
        }
    }


    /// <summary>
    ///  [响应类]领取成就奖励
    /// </summary>
    public partial class ResGetAchievementAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 领取奖励索引
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResGetAchievementAward pkg = new ResGetAchievementAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResGetAchievementAward()
		{
			PacketID = 148;
		}
    }

    /// <summary>
    ///  [响应类] 领取成就奖励 创建者
    /// </summary>
    [Package(148)]
    public partial class ResGetAchievementAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetAchievementAward();
        }
    }


    /// <summary>
    ///  [请求类]保存玩家成就信息
    /// </summary>
    public partial class ReqSaveAchievement: Packet 
    {
        /// <summary>
        /// 成就类型
        /// </summary>
        public uint AchievementType;
        /// <summary>
        /// 完成次数
        /// </summary>
        public uint CompleteTimes;
        /// <summary>
        /// 成就积分领取标识
        /// </summary>
        public uint ScoreAwardState;
        /// <summary>
        /// 成就达成次数领取标识
        /// </summary>
        public uint CompleteAwardState;

        public override Packet Clone()
        {
            ReqSaveAchievement pkg = new ReqSaveAchievement();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AchievementType = AchievementType;
            pkg.CompleteTimes = CompleteTimes;
            pkg.ScoreAwardState = ScoreAwardState;
            pkg.CompleteAwardState = CompleteAwardState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AchievementType);
                oByteArray.WriteUInt(CompleteTimes);
                oByteArray.WriteUInt(ScoreAwardState);
                oByteArray.WriteUInt(CompleteAwardState);
            }
            else
            {
                AchievementType = oByteArray.ReadUInt();
                CompleteTimes = oByteArray.ReadUInt();
                ScoreAwardState = oByteArray.ReadUInt();
                CompleteAwardState = oByteArray.ReadUInt();
            }
        }
		public ReqSaveAchievement()
		{
			PacketID = 149;
		}
    }

    /// <summary>
    ///  [请求类] 保存玩家成就信息 创建者
    /// </summary>
    [Package(149)]
    public partial class ReqSaveAchievementCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSaveAchievement();
        }
    }


    /// <summary>
    ///  [响应类]保存玩家成就信息
    /// </summary>
    public partial class ResSaveAchievement: Packet 
    {

        public override Packet Clone()
        {
            ResSaveAchievement pkg = new ResSaveAchievement();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSaveAchievement()
		{
			PacketID = 150;
		}
    }

    /// <summary>
    ///  [响应类] 保存玩家成就信息 创建者
    /// </summary>
    [Package(150)]
    public partial class ResSaveAchievementCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSaveAchievement();
        }
    }


    /// <summary>
    ///  [请求类]更新角色基础属性值
    /// </summary>
    public partial class ReqUpdatePlayerValue: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerValue pkg = new ReqUpdatePlayerValue();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerValue()
		{
			PacketID = 151;
		}
    }

    /// <summary>
    ///  [请求类] 更新角色基础属性值 创建者
    /// </summary>
    [Package(151)]
    public partial class ReqUpdatePlayerValueCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerValue();
        }
    }


    /// <summary>
    ///  [响应类]更新角色基础属性值
    /// </summary>
    public partial class ResUpdatePlayerValue: Packet 
    {
        /// <summary>
        /// 类型1-血符，2-护盾，3-神石，4-命珠...
        /// </summary>
        public byte Type;
        /// <summary>
        /// 更新后的值
        /// </summary>
        public uint Value;
        /// <summary>
        /// 获取类型
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 更新后的值int64
        /// </summary>
        public long Value64;

        public override Packet Clone()
        {
            ResUpdatePlayerValue pkg = new ResUpdatePlayerValue();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Value = Value;
            pkg.SubType = SubType;
            pkg.Value64 = Value64;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(Value);
                oByteArray.WriteByte(SubType);
                oByteArray.WriteInt64(Value64);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Value = oByteArray.ReadUInt();
                SubType = oByteArray.ReadByte();
                Value64 = oByteArray.ReadInt64();
            }
        }
		public ResUpdatePlayerValue()
		{
			PacketID = 152;
		}
    }

    /// <summary>
    ///  [响应类] 更新角色基础属性值 创建者
    /// </summary>
    [Package(152)]
    public partial class ResUpdatePlayerValueCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerValue();
        }
    }


    /// <summary>
    ///  [请求类]玩家攻击
    /// </summary>
    public partial class ReqPlayerAttack: Packet 
    {
        /// <summary>
        /// 攻击方向(必需)
        /// </summary>
        public byte Direct;
        /// <summary>
        /// 攻击坐标(非锁定有效)
        /// </summary>
        public ushort TargetX;
        /// <summary>
        /// 攻击坐标(非锁定有效)
        /// </summary>
        public ushort TargetY;
        /// <summary>
        /// 目标对象ID(玩家或怪物)
        /// </summary>
        public ObjectGuidInfo TargetObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 技能ID(普通攻击时为0)
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 附加攻击技能ID
        /// </summary>
        public ushort AppendAttackSkillID;
        /// <summary>
        /// 0:普通技能，1：怒气技能
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqPlayerAttack pkg = new ReqPlayerAttack();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Direct = Direct;
            pkg.TargetX = TargetX;
            pkg.TargetY = TargetY;
            pkg.TargetObjectID = TargetObjectID.Clone() as ObjectGuidInfo;
            pkg.SkillID = SkillID;
            pkg.AppendAttackSkillID = AppendAttackSkillID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Direct);
                oByteArray.WriteUShort(TargetX);
                oByteArray.WriteUShort(TargetY);
                TargetObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteUShort(AppendAttackSkillID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Direct = oByteArray.ReadByte();
                TargetX = oByteArray.ReadUShort();
                TargetY = oByteArray.ReadUShort();
                TargetObjectID.Serializtion(oByteArray, bSerialize);
                SkillID = oByteArray.ReadUInt();
                AppendAttackSkillID = oByteArray.ReadUShort();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqPlayerAttack()
		{
			PacketID = 153;
		}
    }

    /// <summary>
    ///  [请求类] 玩家攻击 创建者
    /// </summary>
    [Package(153)]
    public partial class ReqPlayerAttackCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerAttack();
        }
    }


    /// <summary>
    ///  [响应类]玩家攻击
    /// </summary>
    public partial class ResPlayerAttack: Packet 
    {

        public override Packet Clone()
        {
            ResPlayerAttack pkg = new ResPlayerAttack();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResPlayerAttack()
		{
			PacketID = 154;
		}
    }

    /// <summary>
    ///  [响应类] 玩家攻击 创建者
    /// </summary>
    [Package(154)]
    public partial class ResPlayerAttackCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerAttack();
        }
    }


    /// <summary>
    ///  [请求类]更新物品模板
    /// </summary>
    public partial class ReqNoticeUpdateItemTmplID: Packet 
    {
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 物品模板ID
        /// </summary>
        public uint TmplID;

        public override Packet Clone()
        {
            ReqNoticeUpdateItemTmplID pkg = new ReqNoticeUpdateItemTmplID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.TmplID = TmplID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(TmplID);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                TmplID = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeUpdateItemTmplID()
		{
			PacketID = 155;
		}
    }

    /// <summary>
    ///  [请求类] 更新物品模板 创建者
    /// </summary>
    [Package(155)]
    public partial class ReqNoticeUpdateItemTmplIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemTmplID();
        }
    }


    /// <summary>
    ///  [响应类]更新物品模板
    /// </summary>
    public partial class ResNoticeUpdateItemTmplID: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateItemTmplID pkg = new ResNoticeUpdateItemTmplID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateItemTmplID()
		{
			PacketID = 156;
		}
    }

    /// <summary>
    ///  [响应类] 更新物品模板 创建者
    /// </summary>
    [Package(156)]
    public partial class ResNoticeUpdateItemTmplIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemTmplID();
        }
    }


    /// <summary>
    ///  [请求类]升级翅膀
    /// </summary>
    public partial class ReqUpgradeWing: Packet 
    {
        /// <summary>
        /// false 不用钱，true用钱
        /// </summary>
        public bool UseIgnots;

        public override Packet Clone()
        {
            ReqUpgradeWing pkg = new ReqUpgradeWing();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.UseIgnots = UseIgnots;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(UseIgnots);
            }
            else
            {
                UseIgnots = oByteArray.ReadBoolean();
            }
        }
		public ReqUpgradeWing()
		{
			PacketID = 157;
		}
    }

    /// <summary>
    ///  [请求类] 升级翅膀 创建者
    /// </summary>
    [Package(157)]
    public partial class ReqUpgradeWingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeWing();
        }
    }


    /// <summary>
    ///  [响应类]升级翅膀
    /// </summary>
    public partial class ResUpgradeWing: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public byte Level;

        public override Packet Clone()
        {
            ResUpgradeWing pkg = new ResUpgradeWing();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Level = Level;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Level);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Level = oByteArray.ReadByte();
            }
        }
		public ResUpgradeWing()
		{
			PacketID = 158;
		}
    }

    /// <summary>
    ///  [响应类] 升级翅膀 创建者
    /// </summary>
    [Package(158)]
    public partial class ResUpgradeWingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeWing();
        }
    }


    /// <summary>
    ///  [请求类]通知周围玩家自己的攻击状态
    /// </summary>
    public partial class ReqNoticeObjectAttack: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeObjectAttack pkg = new ReqNoticeObjectAttack();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeObjectAttack()
		{
			PacketID = 159;
		}
    }

    /// <summary>
    ///  [请求类] 通知周围玩家自己的攻击状态 创建者
    /// </summary>
    [Package(159)]
    public partial class ReqNoticeObjectAttackCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeObjectAttack();
        }
    }


    /// <summary>
    ///  [响应类]通知周围玩家自己的攻击状态
    /// </summary>
    public partial class ResNoticeObjectAttack: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 攻击方向
        /// </summary>
        public byte Direct;
        /// <summary>
        /// 攻击目标点
        /// </summary>
        public ushort TargetX;
        /// <summary>
        /// 攻击目标点
        /// </summary>
        public ushort TargetY;
        /// <summary>
        /// 使用的技能ID(普攻为0)
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 目标对象ID
        /// </summary>
        public ObjectGuidInfo TargetObjectID = new ObjectGuidInfo();
        /// <summary>
        /// false 表示普通技能,true表示是触发技能
        /// </summary>
        public bool IsTirgger;
        /// <summary>
        /// 是否使用多次伤害特效
        /// </summary>
        public bool IsEffExplode1;

        public override Packet Clone()
        {
            ResNoticeObjectAttack pkg = new ResNoticeObjectAttack();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.Direct = Direct;
            pkg.TargetX = TargetX;
            pkg.TargetY = TargetY;
            pkg.SkillID = SkillID;
            pkg.TargetObjectID = TargetObjectID.Clone() as ObjectGuidInfo;
            pkg.IsTirgger = IsTirgger;
            pkg.IsEffExplode1 = IsEffExplode1;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Direct);
                oByteArray.WriteUShort(TargetX);
                oByteArray.WriteUShort(TargetY);
                oByteArray.WriteUInt(SkillID);
                TargetObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(IsTirgger);
                oByteArray.WriteBoolean(IsEffExplode1);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                Direct = oByteArray.ReadByte();
                TargetX = oByteArray.ReadUShort();
                TargetY = oByteArray.ReadUShort();
                SkillID = oByteArray.ReadUInt();
                TargetObjectID.Serializtion(oByteArray, bSerialize);
                IsTirgger = oByteArray.ReadBoolean();
                IsEffExplode1 = oByteArray.ReadBoolean();
            }
        }
		public ResNoticeObjectAttack()
		{
			PacketID = 160;
		}
    }

    /// <summary>
    ///  [响应类] 通知周围玩家自己的攻击状态 创建者
    /// </summary>
    [Package(160)]
    public partial class ResNoticeObjectAttackCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeObjectAttack();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端指定对象受伤扣血
    /// </summary>
    public partial class ReqNoticeObjectHurt: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeObjectHurt pkg = new ReqNoticeObjectHurt();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeObjectHurt()
		{
			PacketID = 161;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端指定对象受伤扣血 创建者
    /// </summary>
    [Package(161)]
    public partial class ReqNoticeObjectHurtCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeObjectHurt();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端指定对象受伤扣血
    /// </summary>
    public partial class ResNoticeObjectHurt: Packet 
    {
        /// <summary>
        /// 目标对象ID(玩家或怪物)
        /// </summary>
        public ObjectGuidInfo TargetObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 伤害类型(0-没有目标，1-普通伤害，2-闪避，4-暴击，8-幸运，16-诅咒，32无敌，64毒，128火墙，256无畏，512断骨，1024威慑)
        /// </summary>
        public uint HurtType;
        /// <summary>
        /// 目标坐标
        /// </summary>
        public ushort TargetX;
        /// <summary>
        /// 目标坐标
        /// </summary>
        public ushort TargetY;
        /// <summary>
        /// 攻击方向
        /// </summary>
        public byte Direct;
        /// <summary>
        /// 对方使用的技能ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 当前血量（扣血自己算）
        /// </summary>
        public long CurHp;
        /// <summary>
        /// 当前蓝量
        /// </summary>
        public long CurMp;
        /// <summary>
        /// 当前内力
        /// </summary>
        public long CurSp;
        /// <summary>
        /// 攻击者ID
        /// </summary>
        public ObjectGuidInfo AttackObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 伤害值
        /// </summary>
        public long HurtValue;

        public override Packet Clone()
        {
            ResNoticeObjectHurt pkg = new ResNoticeObjectHurt();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetObjectID = TargetObjectID.Clone() as ObjectGuidInfo;
            pkg.HurtType = HurtType;
            pkg.TargetX = TargetX;
            pkg.TargetY = TargetY;
            pkg.Direct = Direct;
            pkg.SkillID = SkillID;
            pkg.CurHp = CurHp;
            pkg.CurMp = CurMp;
            pkg.CurSp = CurSp;
            pkg.AttackObjectID = AttackObjectID.Clone() as ObjectGuidInfo;
            pkg.HurtValue = HurtValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TargetObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(HurtType);
                oByteArray.WriteUShort(TargetX);
                oByteArray.WriteUShort(TargetY);
                oByteArray.WriteByte(Direct);
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteInt64(CurHp);
                oByteArray.WriteInt64(CurMp);
                oByteArray.WriteInt64(CurSp);
                AttackObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteInt64(HurtValue);
            }
            else
            {
                TargetObjectID.Serializtion(oByteArray, bSerialize);
                HurtType = oByteArray.ReadUInt();
                TargetX = oByteArray.ReadUShort();
                TargetY = oByteArray.ReadUShort();
                Direct = oByteArray.ReadByte();
                SkillID = oByteArray.ReadUInt();
                CurHp = oByteArray.ReadInt64();
                CurMp = oByteArray.ReadInt64();
                CurSp = oByteArray.ReadInt64();
                AttackObjectID.Serializtion(oByteArray, bSerialize);
                HurtValue = oByteArray.ReadInt64();
            }
        }
		public ResNoticeObjectHurt()
		{
			PacketID = 162;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端指定对象受伤扣血 创建者
    /// </summary>
    [Package(162)]
    public partial class ResNoticeObjectHurtCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeObjectHurt();
        }
    }


    /// <summary>
    ///  [请求类]通知周围玩家客户端停止移动
    /// </summary>
    public partial class ReqNoticeStopWalk: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeStopWalk pkg = new ReqNoticeStopWalk();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeStopWalk()
		{
			PacketID = 163;
		}
    }

    /// <summary>
    ///  [请求类] 通知周围玩家客户端停止移动 创建者
    /// </summary>
    [Package(163)]
    public partial class ReqNoticeStopWalkCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeStopWalk();
        }
    }


    /// <summary>
    ///  [响应类]通知周围玩家客户端停止移动
    /// </summary>
    public partial class ResNoticeStopWalk: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeStopWalk pkg = new ResNoticeStopWalk();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeStopWalk()
		{
			PacketID = 164;
		}
    }

    /// <summary>
    ///  [响应类] 通知周围玩家客户端停止移动 创建者
    /// </summary>
    [Package(164)]
    public partial class ResNoticeStopWalkCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeStopWalk();
        }
    }


    /// <summary>
    ///  [请求类]更新地图服务器上玩家的技能信息
    /// </summary>
    public partial class ReqUpdateMapPlayerSkill: Packet 
    {
        /// <summary>
        /// 技能组
        /// </summary>
        public uint SkillGroup;
        /// <summary>
        /// 技能等级模板ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 
        /// </summary>
        public bool Open;

        public override Packet Clone()
        {
            ReqUpdateMapPlayerSkill pkg = new ReqUpdateMapPlayerSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillGroup = SkillGroup;
            pkg.SkillID = SkillID;
            pkg.Open = Open;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillGroup);
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteBoolean(Open);
            }
            else
            {
                SkillGroup = oByteArray.ReadUInt();
                SkillID = oByteArray.ReadUInt();
                Open = oByteArray.ReadBoolean();
            }
        }
		public ReqUpdateMapPlayerSkill()
		{
			PacketID = 165;
		}
    }

    /// <summary>
    ///  [请求类] 更新地图服务器上玩家的技能信息 创建者
    /// </summary>
    [Package(165)]
    public partial class ReqUpdateMapPlayerSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMapPlayerSkill();
        }
    }


    /// <summary>
    ///  [响应类]更新地图服务器上玩家的技能信息
    /// </summary>
    public partial class ResUpdateMapPlayerSkill: Packet 
    {

        public override Packet Clone()
        {
            ResUpdateMapPlayerSkill pkg = new ResUpdateMapPlayerSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdateMapPlayerSkill()
		{
			PacketID = 166;
		}
    }

    /// <summary>
    ///  [响应类] 更新地图服务器上玩家的技能信息 创建者
    /// </summary>
    [Package(166)]
    public partial class ResUpdateMapPlayerSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMapPlayerSkill();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家攻击状态(刺杀、半月)，用于同步世界服和通知客户端
    /// </summary>
    public partial class ReqUpdateAttackState: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAttackState pkg = new ReqUpdateAttackState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAttackState()
		{
			PacketID = 167;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家攻击状态(刺杀、半月)，用于同步世界服和通知客户端 创建者
    /// </summary>
    [Package(167)]
    public partial class ReqUpdateAttackStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAttackState();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家攻击状态(刺杀、半月)，用于同步世界服和通知客户端
    /// </summary>
    public partial class ResUpdateAttackState: Packet 
    {
        /// <summary>
        /// 附加攻击技能ID
        /// </summary>
        public uint AppendAttackSkillID;
        /// <summary>
        /// 0是一次性，1是持续性
        /// </summary>
        public short Type;
        /// <summary>
        /// 0移除,1添加
        /// </summary>
        public byte state;

        public override Packet Clone()
        {
            ResUpdateAttackState pkg = new ResUpdateAttackState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AppendAttackSkillID = AppendAttackSkillID;
            pkg.Type = Type;
            pkg.state = state;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AppendAttackSkillID);
                oByteArray.WriteShort(Type);
                oByteArray.WriteByte(state);
            }
            else
            {
                AppendAttackSkillID = oByteArray.ReadUInt();
                Type = oByteArray.ReadShort();
                state = oByteArray.ReadByte();
            }
        }
		public ResUpdateAttackState()
		{
			PacketID = 168;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家攻击状态(刺杀、半月)，用于同步世界服和通知客户端 创建者
    /// </summary>
    [Package(168)]
    public partial class ResUpdateAttackStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAttackState();
        }
    }


    /// <summary>
    ///  [请求类]技能使用结果
    /// </summary>
    public partial class ReqUseSkillResult: Packet 
    {

        public override Packet Clone()
        {
            ReqUseSkillResult pkg = new ReqUseSkillResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUseSkillResult()
		{
			PacketID = 169;
		}
    }

    /// <summary>
    ///  [请求类] 技能使用结果 创建者
    /// </summary>
    [Package(169)]
    public partial class ReqUseSkillResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseSkillResult();
        }
    }


    /// <summary>
    ///  [响应类]技能使用结果
    /// </summary>
    public partial class ResUseSkillResult: Packet 
    {
        /// <summary>
        /// 结果，0表示成功，1表示失败
        /// </summary>
        public byte Result;
        /// <summary>
        /// 使用的技能ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 0:普通技能，1：怒气技能
        /// </summary>
        public uint Type;
        /// <summary>
        /// 附加攻击技能ID
        /// </summary>
        public uint AppendAttackSkillID;
        /// <summary>
        /// 
        /// </summary>
        public bool Trigger;

        public override Packet Clone()
        {
            ResUseSkillResult pkg = new ResUseSkillResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.SkillID = SkillID;
            pkg.Type = Type;
            pkg.AppendAttackSkillID = AppendAttackSkillID;
            pkg.Trigger = Trigger;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(AppendAttackSkillID);
                oByteArray.WriteBoolean(Trigger);
            }
            else
            {
                Result = oByteArray.ReadByte();
                SkillID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                AppendAttackSkillID = oByteArray.ReadUInt();
                Trigger = oByteArray.ReadBoolean();
            }
        }
		public ResUseSkillResult()
		{
			PacketID = 170;
		}
    }

    /// <summary>
    ///  [响应类] 技能使用结果 创建者
    /// </summary>
    [Package(170)]
    public partial class ResUseSkillResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseSkillResult();
        }
    }


    /// <summary>
    ///  [请求类]消息通知
    /// </summary>
    public partial class ReqMessageNotice: Packet 
    {

        public override Packet Clone()
        {
            ReqMessageNotice pkg = new ReqMessageNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqMessageNotice()
		{
			PacketID = 171;
		}
    }

    /// <summary>
    ///  [请求类] 消息通知 创建者
    /// </summary>
    [Package(171)]
    public partial class ReqMessageNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMessageNotice();
        }
    }


    /// <summary>
    ///  [响应类]消息通知
    /// </summary>
    public partial class ResMessageNotice: Packet 
    {
        /// <summary>
        /// 1-中上屏，2-中下屏，3-右下屏，4-左下屏
        /// </summary>
        public byte Location;
        /// <summary>
        /// 消息内容
        /// </summary>
        public string Message;

        public override Packet Clone()
        {
            ResMessageNotice pkg = new ResMessageNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Location = Location;
            pkg.Message = Message;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Location);
                oByteArray.WriteUTF(Message);
            }
            else
            {
                Location = oByteArray.ReadByte();
                Message = oByteArray.ReadUTF();
            }
        }
		public ResMessageNotice()
		{
			PacketID = 172;
		}
    }

    /// <summary>
    ///  [响应类] 消息通知 创建者
    /// </summary>
    [Package(172)]
    public partial class ResMessageNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMessageNotice();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端施放野蛮冲撞技能
    /// </summary>
    public partial class ReqNoticePlayerCollide: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticePlayerCollide pkg = new ReqNoticePlayerCollide();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticePlayerCollide()
		{
			PacketID = 173;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端施放野蛮冲撞技能 创建者
    /// </summary>
    [Package(173)]
    public partial class ReqNoticePlayerCollideCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePlayerCollide();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端施放野蛮冲撞技能
    /// </summary>
    public partial class ResNoticePlayerCollide: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public List<ObjectGuidInfo> ObjectIDVec = new List<ObjectGuidInfo>();
        /// <summary>
        /// 冲撞方向
        /// </summary>
        public byte Dir;
        /// <summary>
        /// 被冲撞着结束X坐标
        /// </summary>
        public int MaxEndX;
        /// <summary>
        /// 被冲撞着结束Y坐标
        /// </summary>
        public int MaxEndY;
        /// <summary>
        /// 技能ID
        /// </summary>
        public uint SkillID;

        public override Packet Clone()
        {
            ResNoticePlayerCollide pkg = new ResNoticePlayerCollide();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ObjectGuidInfo item in ObjectIDVec)
            {
                pkg.ObjectIDVec.Add(item.Clone() as ObjectGuidInfo);
            }
            pkg.Dir = Dir;
            pkg.MaxEndX = MaxEndX;
            pkg.MaxEndY = MaxEndY;
            pkg.SkillID = SkillID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ObjectIDVec.Count);
                for (int i = 0; i < ObjectIDVec.Count; i++)
                {
                    ObjectIDVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteByte(Dir);
                oByteArray.WriteInt(MaxEndX);
                oByteArray.WriteInt(MaxEndY);
                oByteArray.WriteUInt(SkillID);
            }
            else
            {
                int ObjectIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ObjectIDVecCount; i++)
                {
                    ObjectGuidInfo obj = new ObjectGuidInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ObjectIDVec.Add(obj);
                }
                Dir = oByteArray.ReadByte();
                MaxEndX = oByteArray.ReadInt();
                MaxEndY = oByteArray.ReadInt();
                SkillID = oByteArray.ReadUInt();
            }
        }
		public ResNoticePlayerCollide()
		{
			PacketID = 174;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端施放野蛮冲撞技能 创建者
    /// </summary>
    [Package(174)]
    public partial class ResNoticePlayerCollideCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePlayerCollide();
        }
    }


    /// <summary>
    ///  [请求类]交换快捷键
    /// </summary>
    public partial class ReqSwapHotkey: Packet 
    {
        /// <summary>
        /// 交换热键1
        /// </summary>
        public byte Pos1;
        /// <summary>
        /// 交换热键2
        /// </summary>
        public byte Pos2;

        public override Packet Clone()
        {
            ReqSwapHotkey pkg = new ReqSwapHotkey();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos1 = Pos1;
            pkg.Pos2 = Pos2;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Pos1);
                oByteArray.WriteByte(Pos2);
            }
            else
            {
                Pos1 = oByteArray.ReadByte();
                Pos2 = oByteArray.ReadByte();
            }
        }
		public ReqSwapHotkey()
		{
			PacketID = 175;
		}
    }

    /// <summary>
    ///  [请求类] 交换快捷键 创建者
    /// </summary>
    [Package(175)]
    public partial class ReqSwapHotkeyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSwapHotkey();
        }
    }


    /// <summary>
    ///  [响应类]交换快捷键
    /// </summary>
    public partial class ResSwapHotkey: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public byte Pos1;
        /// <summary>
        /// 
        /// </summary>
        public byte Pos2;

        public override Packet Clone()
        {
            ResSwapHotkey pkg = new ResSwapHotkey();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Pos1 = Pos1;
            pkg.Pos2 = Pos2;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Pos1);
                oByteArray.WriteByte(Pos2);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Pos1 = oByteArray.ReadByte();
                Pos2 = oByteArray.ReadByte();
            }
        }
		public ResSwapHotkey()
		{
			PacketID = 176;
		}
    }

    /// <summary>
    ///  [响应类] 交换快捷键 创建者
    /// </summary>
    [Package(176)]
    public partial class ResSwapHotkeyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSwapHotkey();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端添加对象
    /// </summary>
    public partial class ReqAddMapObject: Packet 
    {

        public override Packet Clone()
        {
            ReqAddMapObject pkg = new ReqAddMapObject();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddMapObject()
		{
			PacketID = 177;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端添加对象 创建者
    /// </summary>
    [Package(177)]
    public partial class ReqAddMapObjectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddMapObject();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端添加对象
    /// </summary>
    public partial class ResAddMapObject: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 对象名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 对象等级
        /// </summary>
        public uint Level;
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 当前血量
        /// </summary>
        public long CurHP;
        /// <summary>
        /// 最大血量
        /// </summary>
        public long MaxHP;
        /// <summary>
        /// 当前内力
        /// </summary>
        public long CurSP;
        /// <summary>
        /// 最大内力
        /// </summary>
        public long MaxSP;
        /// <summary>
        /// 武器ID
        /// </summary>
        public uint WeaponID;
        /// <summary>
        /// 衣服ID
        /// </summary>
        public uint ClothesID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图坐标
        /// </summary>
        public ushort MapX;
        /// <summary>
        /// 地图坐标
        /// </summary>
        public ushort MapY;
        /// <summary>
        /// 翅膀等级
        /// </summary>
        public byte WingLv;
        /// <summary>
        /// 头衔ID
        /// </summary>
        public ushort TitleID;
        /// <summary>
        /// 玩家朝向
        /// </summary>
        public byte Direct;
        /// <summary>
        /// buff列表
        /// </summary>
        public List<uint> BuffList = new List<uint>();
        /// <summary>
        /// 是否摆摊
        /// </summary>
        public bool IsRetail;
        /// <summary>
        /// 阵营
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 工会名字
        /// </summary>
        public string GuildName;
        /// <summary>
        /// PK值
        /// </summary>
        public ushort PKValue;
        /// <summary>
        /// 品阶等级
        /// </summary>
        public uint OfficialLv;
        /// <summary>
        /// 队伍ID
        /// </summary>
        public string GroupIDStr;
        /// <summary>
        /// 行会ID
        /// </summary>
        public string GuildIDStr;
        /// <summary>
        /// 保护时间（秒）
        /// </summary>
        public byte ProtectTime;
        /// <summary>
        /// 是否灰名
        /// </summary>
        public bool IsGray;
        /// <summary>
        /// 模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 添加对象的原因
        /// </summary>
        public uint AddObjectReason;
        /// <summary>
        /// 时装衣服ID
        /// </summary>
        public uint FashionClothesID;
        /// <summary>
        /// 时装武器ID
        /// </summary>
        public uint FashionWeaponID;
        /// <summary>
        /// 攻击力
        /// </summary>
        public uint Attack;
        /// <summary>
        /// 平台VIP TID
        /// </summary>
        public uint PlatfromVipTID;
        /// <summary>
        /// 注灵等级
        /// </summary>
        public uint FixSoulLv;
        /// <summary>
        /// 强化等级
        /// </summary>
        public uint StrengthLv;
        /// <summary>
        /// 是否已经出来
        /// </summary>
        public bool IsDrilled;
        /// <summary>
        /// 已经采集的玩家ID
        /// </summary>
        public List<ObjectGuidInfo> CollectPlayerIDVec = new List<ObjectGuidInfo>();
        /// <summary>
        /// 头像文件名
        /// </summary>
        public string FileName;
        /// <summary>
        /// 主人ID
        /// </summary>
        public ObjectGuidInfo OwnerID = new ObjectGuidInfo();
        /// <summary>
        /// 坐骑ID
        /// </summary>
        public uint MountsID;
        /// <summary>
        /// vip等级
        /// </summary>
        public byte VipLv;
        /// <summary>
        /// 移动信息
        /// </summary>
        public List<PlayerMoveInfo> MoveInfo = new List<PlayerMoveInfo>();
        /// <summary>
        /// 下跪结束时间
        /// </summary>
        public uint XiaGuiEndTime;
        /// <summary>
        /// 状态
        /// </summary>
        public uint State;
        /// <summary>
        /// 行会职位
        /// </summary>
        public byte GuildPosition;
        /// <summary>
        /// 矿工背包内矿石数量
        /// </summary>
        public uint MinerBagCount;
        /// <summary>
        /// 当前密文套装名号
        /// </summary>
        public uint CurCiphertext;
        /// <summary>
        /// 是否为极品装备
        /// </summary>
        public uint IsBestEquip;
        /// <summary>
        /// 词缀tid
        /// </summary>
        public uint AffixTID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public uint ItemNum;
        /// <summary>
        /// 保护结束前可拾取的对象GUID
        /// </summary>
        public ObjectGuidInfo PickUpObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 活动积分
        /// </summary>
        public uint ActivityScore;
        /// <summary>
        /// 时装足迹ID
        /// </summary>
        public uint FashionFootMark;
        /// <summary>
        /// 头像框ID
        /// </summary>
        public uint HeadShotFrameId;
        /// <summary>
        /// 标识(目前暂时只有战旗车颜色用到)
        /// </summary>
        public uint Identifier;
        /// <summary>
        /// 角色附加等级
        /// </summary>
        public uint RoleAddLv;

        public override Packet Clone()
        {
            ResAddMapObject pkg = new ResAddMapObject();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.Name = Name;
            pkg.Level = Level;
            pkg.Sex = Sex;
            pkg.Career = Career;
            pkg.CurHP = CurHP;
            pkg.MaxHP = MaxHP;
            pkg.CurSP = CurSP;
            pkg.MaxSP = MaxSP;
            pkg.WeaponID = WeaponID;
            pkg.ClothesID = ClothesID;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.WingLv = WingLv;
            pkg.TitleID = TitleID;
            pkg.Direct = Direct;
            foreach (var item in BuffList)
            {
                pkg.BuffList.Add(item);
            }
            pkg.IsRetail = IsRetail;
            pkg.Camp = Camp;
            pkg.GuildName = GuildName;
            pkg.PKValue = PKValue;
            pkg.OfficialLv = OfficialLv;
            pkg.GroupIDStr = GroupIDStr;
            pkg.GuildIDStr = GuildIDStr;
            pkg.ProtectTime = ProtectTime;
            pkg.IsGray = IsGray;
            pkg.TmplID = TmplID;
            pkg.AddObjectReason = AddObjectReason;
            pkg.FashionClothesID = FashionClothesID;
            pkg.FashionWeaponID = FashionWeaponID;
            pkg.Attack = Attack;
            pkg.PlatfromVipTID = PlatfromVipTID;
            pkg.FixSoulLv = FixSoulLv;
            pkg.StrengthLv = StrengthLv;
            pkg.IsDrilled = IsDrilled;
            foreach (ObjectGuidInfo item in CollectPlayerIDVec)
            {
                pkg.CollectPlayerIDVec.Add(item.Clone() as ObjectGuidInfo);
            }
            pkg.FileName = FileName;
            pkg.OwnerID = OwnerID.Clone() as ObjectGuidInfo;
            pkg.MountsID = MountsID;
            pkg.VipLv = VipLv;
            foreach (PlayerMoveInfo item in MoveInfo)
            {
                pkg.MoveInfo.Add(item.Clone() as PlayerMoveInfo);
            }
            pkg.XiaGuiEndTime = XiaGuiEndTime;
            pkg.State = State;
            pkg.GuildPosition = GuildPosition;
            pkg.MinerBagCount = MinerBagCount;
            pkg.CurCiphertext = CurCiphertext;
            pkg.IsBestEquip = IsBestEquip;
            pkg.AffixTID = AffixTID;
            pkg.ItemNum = ItemNum;
            pkg.PickUpObjectID = PickUpObjectID.Clone() as ObjectGuidInfo;
            pkg.ActivityScore = ActivityScore;
            pkg.FashionFootMark = FashionFootMark;
            pkg.HeadShotFrameId = HeadShotFrameId;
            pkg.Identifier = Identifier;
            pkg.RoleAddLv = RoleAddLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(Name);
                oByteArray.WriteUInt(Level);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteByte(Career);
                oByteArray.WriteInt64(CurHP);
                oByteArray.WriteInt64(MaxHP);
                oByteArray.WriteInt64(CurSP);
                oByteArray.WriteInt64(MaxSP);
                oByteArray.WriteUInt(WeaponID);
                oByteArray.WriteUInt(ClothesID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUShort(MapX);
                oByteArray.WriteUShort(MapY);
                oByteArray.WriteByte(WingLv);
                oByteArray.WriteUShort(TitleID);
                oByteArray.WriteByte(Direct);
                oByteArray.WriteUShort((ushort)BuffList.Count);
                for (int i = 0; i < BuffList.Count; i++)
                {
                    oByteArray.WriteUInt(BuffList[i]);
                }
                oByteArray.WriteBoolean(IsRetail);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUShort(PKValue);
                oByteArray.WriteUInt(OfficialLv);
                oByteArray.WriteUTF(GroupIDStr);
                oByteArray.WriteUTF(GuildIDStr);
                oByteArray.WriteByte(ProtectTime);
                oByteArray.WriteBoolean(IsGray);
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(AddObjectReason);
                oByteArray.WriteUInt(FashionClothesID);
                oByteArray.WriteUInt(FashionWeaponID);
                oByteArray.WriteUInt(Attack);
                oByteArray.WriteUInt(PlatfromVipTID);
                oByteArray.WriteUInt(FixSoulLv);
                oByteArray.WriteUInt(StrengthLv);
                oByteArray.WriteBoolean(IsDrilled);
                oByteArray.WriteUShort((ushort)CollectPlayerIDVec.Count);
                for (int i = 0; i < CollectPlayerIDVec.Count; i++)
                {
                    CollectPlayerIDVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUTF(FileName);
                OwnerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MountsID);
                oByteArray.WriteByte(VipLv);
                oByteArray.WriteUShort((ushort)MoveInfo.Count);
                for (int i = 0; i < MoveInfo.Count; i++)
                {
                    MoveInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(XiaGuiEndTime);
                oByteArray.WriteUInt(State);
                oByteArray.WriteByte(GuildPosition);
                oByteArray.WriteUInt(MinerBagCount);
                oByteArray.WriteUInt(CurCiphertext);
                oByteArray.WriteUInt(IsBestEquip);
                oByteArray.WriteUInt(AffixTID);
                oByteArray.WriteUInt(ItemNum);
                PickUpObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ActivityScore);
                oByteArray.WriteUInt(FashionFootMark);
                oByteArray.WriteUInt(HeadShotFrameId);
                oByteArray.WriteUInt(Identifier);
                oByteArray.WriteUInt(RoleAddLv);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                Name = oByteArray.ReadUTF();
                Level = oByteArray.ReadUInt();
                Sex = oByteArray.ReadByte();
                Career = oByteArray.ReadByte();
                CurHP = oByteArray.ReadInt64();
                MaxHP = oByteArray.ReadInt64();
                CurSP = oByteArray.ReadInt64();
                MaxSP = oByteArray.ReadInt64();
                WeaponID = oByteArray.ReadUInt();
                ClothesID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUShort();
                MapY = oByteArray.ReadUShort();
                WingLv = oByteArray.ReadByte();
                TitleID = oByteArray.ReadUShort();
                Direct = oByteArray.ReadByte();
                int BuffListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BuffListCount; i++)
                {
                    BuffList.Add(oByteArray.ReadUInt());
                }
                IsRetail = oByteArray.ReadBoolean();
                Camp = oByteArray.ReadUInt();
                GuildName = oByteArray.ReadUTF();
                PKValue = oByteArray.ReadUShort();
                OfficialLv = oByteArray.ReadUInt();
                GroupIDStr = oByteArray.ReadUTF();
                GuildIDStr = oByteArray.ReadUTF();
                ProtectTime = oByteArray.ReadByte();
                IsGray = oByteArray.ReadBoolean();
                TmplID = oByteArray.ReadUInt();
                AddObjectReason = oByteArray.ReadUInt();
                FashionClothesID = oByteArray.ReadUInt();
                FashionWeaponID = oByteArray.ReadUInt();
                Attack = oByteArray.ReadUInt();
                PlatfromVipTID = oByteArray.ReadUInt();
                FixSoulLv = oByteArray.ReadUInt();
                StrengthLv = oByteArray.ReadUInt();
                IsDrilled = oByteArray.ReadBoolean();
                int CollectPlayerIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < CollectPlayerIDVecCount; i++)
                {
                    ObjectGuidInfo obj = new ObjectGuidInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    CollectPlayerIDVec.Add(obj);
                }
                FileName = oByteArray.ReadUTF();
                OwnerID.Serializtion(oByteArray, bSerialize);
                MountsID = oByteArray.ReadUInt();
                VipLv = oByteArray.ReadByte();
                int MoveInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MoveInfoCount; i++)
                {
                    PlayerMoveInfo obj = new PlayerMoveInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    MoveInfo.Add(obj);
                }
                XiaGuiEndTime = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
                GuildPosition = oByteArray.ReadByte();
                MinerBagCount = oByteArray.ReadUInt();
                CurCiphertext = oByteArray.ReadUInt();
                IsBestEquip = oByteArray.ReadUInt();
                AffixTID = oByteArray.ReadUInt();
                ItemNum = oByteArray.ReadUInt();
                PickUpObjectID.Serializtion(oByteArray, bSerialize);
                ActivityScore = oByteArray.ReadUInt();
                FashionFootMark = oByteArray.ReadUInt();
                HeadShotFrameId = oByteArray.ReadUInt();
                Identifier = oByteArray.ReadUInt();
                RoleAddLv = oByteArray.ReadUInt();
            }
        }
		public ResAddMapObject()
		{
			PacketID = 178;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端添加对象 创建者
    /// </summary>
    [Package(178)]
    public partial class ResAddMapObjectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddMapObject();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端删除对象
    /// </summary>
    public partial class ReqDelMapObject: Packet 
    {

        public override Packet Clone()
        {
            ReqDelMapObject pkg = new ReqDelMapObject();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDelMapObject()
		{
			PacketID = 179;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端删除对象 创建者
    /// </summary>
    [Package(179)]
    public partial class ReqDelMapObjectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDelMapObject();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端删除对象
    /// </summary>
    public partial class ResDelMapObject: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 是否是传送
        /// </summary>
        public bool IsTransfer;

        public override Packet Clone()
        {
            ResDelMapObject pkg = new ResDelMapObject();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.IsTransfer = IsTransfer;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(IsTransfer);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                IsTransfer = oByteArray.ReadBoolean();
            }
        }
		public ResDelMapObject()
		{
			PacketID = 180;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端删除对象 创建者
    /// </summary>
    [Package(180)]
    public partial class ResDelMapObjectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDelMapObject();
        }
    }


    /// <summary>
    ///  [请求类]学习技能
    /// </summary>
    public partial class ReqStudySkill: Packet 
    {

        public override Packet Clone()
        {
            ReqStudySkill pkg = new ReqStudySkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqStudySkill()
		{
			PacketID = 181;
		}
    }

    /// <summary>
    ///  [请求类] 学习技能 创建者
    /// </summary>
    [Package(181)]
    public partial class ReqStudySkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStudySkill();
        }
    }


    /// <summary>
    ///  [响应类]学习技能
    /// </summary>
    public partial class ResStudySkill: Packet 
    {
        /// <summary>
        /// 技能ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 0.普通技能，1.怒气技能
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResStudySkill pkg = new ResStudySkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillID = SkillID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                SkillID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResStudySkill()
		{
			PacketID = 182;
		}
    }

    /// <summary>
    ///  [响应类] 学习技能 创建者
    /// </summary>
    [Package(182)]
    public partial class ResStudySkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStudySkill();
        }
    }


    /// <summary>
    ///  [请求类]技能升级
    /// </summary>
    public partial class ReqUpgradeSkill: Packet 
    {
        /// <summary>
        /// 想要升级的技能ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 0:升级进阶;1:转奥义
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqUpgradeSkill pkg = new ReqUpgradeSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillID = SkillID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                SkillID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqUpgradeSkill()
		{
			PacketID = 183;
		}
    }

    /// <summary>
    ///  [请求类] 技能升级 创建者
    /// </summary>
    [Package(183)]
    public partial class ReqUpgradeSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeSkill();
        }
    }


    /// <summary>
    ///  [响应类]技能升级
    /// </summary>
    public partial class ResUpgradeSkill: Packet 
    {
        /// <summary>
        /// ,4-经验值不够,5-没钱,6-道具不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 旧技能ID
        /// </summary>
        public uint OldSkillID;
        /// <summary>
        /// 新技能ID
        /// </summary>
        public uint NewSkillID;
        /// <summary>
        /// 新技能经验值
        /// </summary>
        public uint NewSkillExp;
        /// <summary>
        /// 0:升级进阶;1:转奥义
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResUpgradeSkill pkg = new ResUpgradeSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.OldSkillID = OldSkillID;
            pkg.NewSkillID = NewSkillID;
            pkg.NewSkillExp = NewSkillExp;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(OldSkillID);
                oByteArray.WriteUInt(NewSkillID);
                oByteArray.WriteUInt(NewSkillExp);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                OldSkillID = oByteArray.ReadUInt();
                NewSkillID = oByteArray.ReadUInt();
                NewSkillExp = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeSkill()
		{
			PacketID = 184;
		}
    }

    /// <summary>
    ///  [响应类] 技能升级 创建者
    /// </summary>
    [Package(184)]
    public partial class ResUpgradeSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeSkill();
        }
    }


    /// <summary>
    ///  [请求类]使用物品
    /// </summary>
    public partial class ReqUseItem: Packet 
    {
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 是否自动使用
        /// </summary>
        public bool IsAuto;
        /// <summary>
        /// 道具类型44:自选道具TID;其它:0
        /// </summary>
        public uint Data1;
        /// <summary>
        /// 道具使用数量(默认0:一键)
        /// </summary>
        public uint UseCount;

        public override Packet Clone()
        {
            ReqUseItem pkg = new ReqUseItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.IsAuto = IsAuto;
            pkg.Data1 = Data1;
            pkg.UseCount = UseCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(IsAuto);
                oByteArray.WriteUInt(Data1);
                oByteArray.WriteUInt(UseCount);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                IsAuto = oByteArray.ReadBoolean();
                Data1 = oByteArray.ReadUInt();
                UseCount = oByteArray.ReadUInt();
            }
        }
		public ReqUseItem()
		{
			PacketID = 185;
		}
    }

    /// <summary>
    ///  [请求类] 使用物品 创建者
    /// </summary>
    [Package(185)]
    public partial class ReqUseItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseItem();
        }
    }


    /// <summary>
    ///  [响应类]使用物品
    /// </summary>
    public partial class ResUseItem: Packet 
    {
        /// <summary>
        /// 0-成功，1-背包物品数据错误2-相关模板未找到（例如buff模板）3-没穿武器4-武器幸运值满了5-等级不足6-背包不足7-数据表配置错误8-学习技能职业不匹配9-你已经学会该技能 10-不能使用随机卷 11-元宝不足  12-数量不足   15-不在行会无法使用 100-祝福油祝福失败不降级101祝福油祝福失败降级 102-随机之王随机冷却 103-随机之王顶层 104-不在随机之王的地图 105-英雄技能学习已满 106-英雄重复技能无法学习
        /// </summary>
        public byte Result;
        /// <summary>
        /// 使用物品的模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 使用的数量
        /// </summary>
        public uint UseCount;

        public override Packet Clone()
        {
            ResUseItem pkg = new ResUseItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TmplID = TmplID;
            pkg.UseCount = UseCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(UseCount);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TmplID = oByteArray.ReadUInt();
                UseCount = oByteArray.ReadUInt();
            }
        }
		public ResUseItem()
		{
			PacketID = 186;
		}
    }

    /// <summary>
    ///  [响应类] 使用物品 创建者
    /// </summary>
    [Package(186)]
    public partial class ResUseItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseItem();
        }
    }


    /// <summary>
    ///  [请求类]设置攻击模式
    /// </summary>
    public partial class ReqSetFightModle: Packet 
    {
        /// <summary>
        /// 攻击模式 0-和平，1-全体，2-组队，3-工会，4-善恶，5-阵营
        /// </summary>
        public byte FightModle;

        public override Packet Clone()
        {
            ReqSetFightModle pkg = new ReqSetFightModle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FightModle = FightModle;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(FightModle);
            }
            else
            {
                FightModle = oByteArray.ReadByte();
            }
        }
		public ReqSetFightModle()
		{
			PacketID = 187;
		}
    }

    /// <summary>
    ///  [请求类] 设置攻击模式 创建者
    /// </summary>
    [Package(187)]
    public partial class ReqSetFightModleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetFightModle();
        }
    }


    /// <summary>
    ///  [响应类]设置攻击模式
    /// </summary>
    public partial class ResSetFightModle: Packet 
    {
        /// <summary>
        /// 0-成功
        /// </summary>
        public byte Result;
        /// <summary>
        /// 玩家攻击模式
        /// </summary>
        public byte FightModle;

        public override Packet Clone()
        {
            ResSetFightModle pkg = new ResSetFightModle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.FightModle = FightModle;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(FightModle);
            }
            else
            {
                Result = oByteArray.ReadByte();
                FightModle = oByteArray.ReadByte();
            }
        }
		public ResSetFightModle()
		{
			PacketID = 188;
		}
    }

    /// <summary>
    ///  [响应类] 设置攻击模式 创建者
    /// </summary>
    [Package(188)]
    public partial class ResSetFightModleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetFightModle();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端对象死亡;
    /// </summary>
    public partial class ReqNoticeObjectDie: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeObjectDie pkg = new ReqNoticeObjectDie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeObjectDie()
		{
			PacketID = 189;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端对象死亡; 创建者
    /// </summary>
    [Package(189)]
    public partial class ReqNoticeObjectDieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeObjectDie();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端对象死亡;
    /// </summary>
    public partial class ResNoticeObjectDie: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 杀手对象ID
        /// </summary>
        public ObjectGuidInfo KillerObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 杀手名称
        /// </summary>
        public string KillerName;

        public override Packet Clone()
        {
            ResNoticeObjectDie pkg = new ResNoticeObjectDie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.KillerObjectID = KillerObjectID.Clone() as ObjectGuidInfo;
            pkg.KillerName = KillerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                KillerObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(KillerName);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                KillerObjectID.Serializtion(oByteArray, bSerialize);
                KillerName = oByteArray.ReadUTF();
            }
        }
		public ResNoticeObjectDie()
		{
			PacketID = 190;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端对象死亡; 创建者
    /// </summary>
    [Package(190)]
    public partial class ResNoticeObjectDieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeObjectDie();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服务器更新生命、魔法、内力
    /// </summary>
    public partial class ReqNoticeUpdateHPMPSP: Packet 
    {
        /// <summary>
        /// 当前血量
        /// </summary>
        public long CurHP;
        /// <summary>
        /// 当前魔法
        /// </summary>
        public long CurMP;
        /// <summary>
        /// 当前内力
        /// </summary>
        public long CurSP;
        /// <summary>
        /// 攻击者玩家GUID
        /// </summary>
        public ulong AttackerGuid;

        public override Packet Clone()
        {
            ReqNoticeUpdateHPMPSP pkg = new ReqNoticeUpdateHPMPSP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurHP = CurHP;
            pkg.CurMP = CurMP;
            pkg.CurSP = CurSP;
            pkg.AttackerGuid = AttackerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt64(CurHP);
                oByteArray.WriteInt64(CurMP);
                oByteArray.WriteInt64(CurSP);
                oByteArray.WriteUInt64(AttackerGuid);
            }
            else
            {
                CurHP = oByteArray.ReadInt64();
                CurMP = oByteArray.ReadInt64();
                CurSP = oByteArray.ReadInt64();
                AttackerGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqNoticeUpdateHPMPSP()
		{
			PacketID = 191;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服务器更新生命、魔法、内力 创建者
    /// </summary>
    [Package(191)]
    public partial class ReqNoticeUpdateHPMPSPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateHPMPSP();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服务器更新生命、魔法、内力
    /// </summary>
    public partial class ResNoticeUpdateHPMPSP: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateHPMPSP pkg = new ResNoticeUpdateHPMPSP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateHPMPSP()
		{
			PacketID = 192;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服务器更新生命、魔法、内力 创建者
    /// </summary>
    [Package(192)]
    public partial class ResNoticeUpdateHPMPSPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateHPMPSP();
        }
    }


    /// <summary>
    ///  [请求类]通知周围玩家更新等级
    /// </summary>
    public partial class ReqNoticeUpdateLv: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdateLv pkg = new ReqNoticeUpdateLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdateLv()
		{
			PacketID = 193;
		}
    }

    /// <summary>
    ///  [请求类] 通知周围玩家更新等级 创建者
    /// </summary>
    [Package(193)]
    public partial class ReqNoticeUpdateLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateLv();
        }
    }


    /// <summary>
    ///  [响应类]通知周围玩家更新等级
    /// </summary>
    public partial class ResNoticeUpdateLv: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 等级
        /// </summary>
        public uint Level;

        public override Packet Clone()
        {
            ResNoticeUpdateLv pkg = new ResNoticeUpdateLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.Level = Level;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Level);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                Level = oByteArray.ReadUInt();
            }
        }
		public ResNoticeUpdateLv()
		{
			PacketID = 194;
		}
    }

    /// <summary>
    ///  [响应类] 通知周围玩家更新等级 创建者
    /// </summary>
    [Package(194)]
    public partial class ResNoticeUpdateLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateLv();
        }
    }


    /// <summary>
    ///  [请求类]一键提取宝藏仓库物品
    /// </summary>
    public partial class ReqExtractTreasureItem: Packet 
    {

        public override Packet Clone()
        {
            ReqExtractTreasureItem pkg = new ReqExtractTreasureItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqExtractTreasureItem()
		{
			PacketID = 195;
		}
    }

    /// <summary>
    ///  [请求类] 一键提取宝藏仓库物品 创建者
    /// </summary>
    [Package(195)]
    public partial class ReqExtractTreasureItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqExtractTreasureItem();
        }
    }


    /// <summary>
    ///  [响应类]一键提取宝藏仓库物品
    /// </summary>
    public partial class ResExtractTreasureItem: Packet 
    {
        /// <summary>
        /// 0-成功 1-背包无空格
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResExtractTreasureItem pkg = new ResExtractTreasureItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResExtractTreasureItem()
		{
			PacketID = 196;
		}
    }

    /// <summary>
    ///  [响应类] 一键提取宝藏仓库物品 创建者
    /// </summary>
    [Package(196)]
    public partial class ResExtractTreasureItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResExtractTreasureItem();
        }
    }


    /// <summary>
    ///  [请求类]玩家复活操作
    /// </summary>
    public partial class ReqPlayerRevive: Packet 
    {
        /// <summary>
        /// 类型：1-回城复活，2-原地复活
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqPlayerRevive pkg = new ReqPlayerRevive();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqPlayerRevive()
		{
			PacketID = 197;
		}
    }

    /// <summary>
    ///  [请求类] 玩家复活操作 创建者
    /// </summary>
    [Package(197)]
    public partial class ReqPlayerReviveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerRevive();
        }
    }


    /// <summary>
    ///  [响应类]玩家复活操作
    /// </summary>
    public partial class ResPlayerRevive: Packet 
    {
        /// <summary>
        /// 剩余免费原地复活次数
        /// </summary>
        public byte FreeReviveCount;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 0-成功 1-失败 2-地图不能复活
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResPlayerRevive pkg = new ResPlayerRevive();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FreeReviveCount = FreeReviveCount;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(FreeReviveCount);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Result);
            }
            else
            {
                FreeReviveCount = oByteArray.ReadByte();
                PlayerID.Serializtion(oByteArray, bSerialize);
                Result = oByteArray.ReadByte();
            }
        }
		public ResPlayerRevive()
		{
			PacketID = 198;
		}
    }

    /// <summary>
    ///  [响应类] 玩家复活操作 创建者
    /// </summary>
    [Package(198)]
    public partial class ResPlayerReviveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerRevive();
        }
    }


    /// <summary>
    ///  [请求类]加成等级和经验物品
    /// </summary>
    public partial class ReqUseAddExpItem: Packet 
    {

        public override Packet Clone()
        {
            ReqUseAddExpItem pkg = new ReqUseAddExpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUseAddExpItem()
		{
			PacketID = 199;
		}
    }

    /// <summary>
    ///  [请求类] 加成等级和经验物品 创建者
    /// </summary>
    [Package(199)]
    public partial class ReqUseAddExpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseAddExpItem();
        }
    }


    /// <summary>
    ///  [响应类]加成等级和经验物品
    /// </summary>
    public partial class ResUseAddExpItem: Packet 
    {
        /// <summary>
        /// 0-成功，1-等级不足无法使用，2-没有行会，3-已到达顶级
        /// </summary>
        public byte Result;
        /// <summary>
        /// 玩家经验值
        /// </summary>
        public uint Exp;
        /// <summary>
        /// 玩家等级
        /// </summary>
        public uint Level;

        public override Packet Clone()
        {
            ResUseAddExpItem pkg = new ResUseAddExpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Exp = Exp;
            pkg.Level = Level;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(Exp);
                oByteArray.WriteUInt(Level);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Exp = oByteArray.ReadUInt();
                Level = oByteArray.ReadUInt();
            }
        }
		public ResUseAddExpItem()
		{
			PacketID = 200;
		}
    }

    /// <summary>
    ///  [响应类] 加成等级和经验物品 创建者
    /// </summary>
    [Package(200)]
    public partial class ResUseAddExpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseAddExpItem();
        }
    }


    /// <summary>
    ///  [请求类]礼包物品
    /// </summary>
    public partial class ReqUseGiftBagItem: Packet 
    {

        public override Packet Clone()
        {
            ReqUseGiftBagItem pkg = new ReqUseGiftBagItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUseGiftBagItem()
		{
			PacketID = 201;
		}
    }

    /// <summary>
    ///  [请求类] 礼包物品 创建者
    /// </summary>
    [Package(201)]
    public partial class ReqUseGiftBagItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseGiftBagItem();
        }
    }


    /// <summary>
    ///  [响应类]礼包物品
    /// </summary>
    public partial class ResUseGiftBagItem: Packet 
    {
        /// <summary>
        /// 0-成功，1-等级限制，2-背包空间不足
        /// </summary>
        public byte Result;
        /// <summary>
        /// 物品ID
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public uint ItemNum;

        public override Packet Clone()
        {
            ResUseGiftBagItem pkg = new ResUseGiftBagItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemID = ItemID;
            pkg.ItemNum = ItemNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt(ItemNum);
            }
            else
            {
                Result = oByteArray.ReadByte();
                ItemID = oByteArray.ReadUInt();
                ItemNum = oByteArray.ReadUInt();
            }
        }
		public ResUseGiftBagItem()
		{
			PacketID = 202;
		}
    }

    /// <summary>
    ///  [响应类] 礼包物品 创建者
    /// </summary>
    [Package(202)]
    public partial class ResUseGiftBagItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseGiftBagItem();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新血量蓝量内力
    /// </summary>
    public partial class ReqUpdateObjectHPMPSP: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateObjectHPMPSP pkg = new ReqUpdateObjectHPMPSP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateObjectHPMPSP()
		{
			PacketID = 203;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新血量蓝量内力 创建者
    /// </summary>
    [Package(203)]
    public partial class ReqUpdateObjectHPMPSPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateObjectHPMPSP();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新血量蓝量内力
    /// </summary>
    public partial class ResUpdateObjectHPMPSP: Packet 
    {
        /// <summary>
        /// 当前血量
        /// </summary>
        public long CurHP;
        /// <summary>
        /// 当前蓝量
        /// </summary>
        public long CurMP;
        /// <summary>
        /// 当前内力
        /// </summary>
        public long CurSP;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 默认0，1是吸血
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResUpdateObjectHPMPSP pkg = new ResUpdateObjectHPMPSP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurHP = CurHP;
            pkg.CurMP = CurMP;
            pkg.CurSP = CurSP;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt64(CurHP);
                oByteArray.WriteInt64(CurMP);
                oByteArray.WriteInt64(CurSP);
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Type);
            }
            else
            {
                CurHP = oByteArray.ReadInt64();
                CurMP = oByteArray.ReadInt64();
                CurSP = oByteArray.ReadInt64();
                ObjectID.Serializtion(oByteArray, bSerialize);
                Type = oByteArray.ReadByte();
            }
        }
		public ResUpdateObjectHPMPSP()
		{
			PacketID = 204;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新血量蓝量内力 创建者
    /// </summary>
    [Package(204)]
    public partial class ResUpdateObjectHPMPSPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateObjectHPMPSP();
        }
    }


    /// <summary>
    ///  [请求类]使用掉落金币物品
    /// </summary>
    public partial class ReqUseDropCoinItem: Packet 
    {

        public override Packet Clone()
        {
            ReqUseDropCoinItem pkg = new ReqUseDropCoinItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUseDropCoinItem()
		{
			PacketID = 205;
		}
    }

    /// <summary>
    ///  [请求类] 使用掉落金币物品 创建者
    /// </summary>
    [Package(205)]
    public partial class ReqUseDropCoinItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseDropCoinItem();
        }
    }


    /// <summary>
    ///  [响应类]使用掉落金币物品
    /// </summary>
    public partial class ResUseDropCoinItem: Packet 
    {

        public override Packet Clone()
        {
            ResUseDropCoinItem pkg = new ResUseDropCoinItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUseDropCoinItem()
		{
			PacketID = 206;
		}
    }

    /// <summary>
    ///  [响应类] 使用掉落金币物品 创建者
    /// </summary>
    [Package(206)]
    public partial class ResUseDropCoinItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseDropCoinItem();
        }
    }


    /// <summary>
    ///  [请求类]丢弃物品
    /// </summary>
    public partial class ReqDiscardItem: Packet 
    {
        /// <summary>
        /// 丢弃背包位置
        /// </summary>
        public uint Pos;

        public override Packet Clone()
        {
            ReqDiscardItem pkg = new ReqDiscardItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Pos);
            }
            else
            {
                Pos = oByteArray.ReadUInt();
            }
        }
		public ReqDiscardItem()
		{
			PacketID = 207;
		}
    }

    /// <summary>
    ///  [请求类] 丢弃物品 创建者
    /// </summary>
    [Package(207)]
    public partial class ReqDiscardItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDiscardItem();
        }
    }


    /// <summary>
    ///  [响应类]丢弃物品
    /// </summary>
    public partial class ResDiscardItem: Packet 
    {
        /// <summary>
        /// 0-成功，1-绑定物品不能丢弃，2-不是背包物品不能丢弃 3-找不到物品模板 4-物品不存在
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResDiscardItem pkg = new ResDiscardItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResDiscardItem()
		{
			PacketID = 208;
		}
    }

    /// <summary>
    ///  [响应类] 丢弃物品 创建者
    /// </summary>
    [Package(208)]
    public partial class ResDiscardItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDiscardItem();
        }
    }


    /// <summary>
    ///  [请求类]初始化排行榜信息(开启服务器时请求)
    /// </summary>
    public partial class ReqGetRankingList: Packet 
    {

        public override Packet Clone()
        {
            ReqGetRankingList pkg = new ReqGetRankingList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetRankingList()
		{
			PacketID = 209;
		}
    }

    /// <summary>
    ///  [请求类] 初始化排行榜信息(开启服务器时请求) 创建者
    /// </summary>
    [Package(209)]
    public partial class ReqGetRankingListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetRankingList();
        }
    }


    /// <summary>
    ///  [响应类]初始化排行榜信息(开启服务器时请求)
    /// </summary>
    public partial class ResGetRankingList: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Level;
        /// <summary>
        /// 攻击力 type:1-物理攻击力，2-魔法攻击力，3-道术攻击力排
        /// </summary>
        public uint Attack;
        /// <summary>
        /// 充值总数
        /// </summary>
        public uint PayNum;
        /// <summary>
        /// 境界等级
        /// </summary>
        public uint StateLv;
        /// <summary>
        /// 1-物理攻击力排行，2-魔法攻击力排行，3-道术攻击力排，4-充值排行榜，5-境界等级排行榜
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResGetRankingList pkg = new ResGetRankingList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Sex = Sex;
            pkg.Career = Career;
            pkg.Level = Level;
            pkg.Attack = Attack;
            pkg.PayNum = PayNum;
            pkg.StateLv = StateLv;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteByte(Career);
                oByteArray.WriteUInt(Level);
                oByteArray.WriteUInt(Attack);
                oByteArray.WriteUInt(PayNum);
                oByteArray.WriteUInt(StateLv);
                oByteArray.WriteByte(Type);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Sex = oByteArray.ReadByte();
                Career = oByteArray.ReadByte();
                Level = oByteArray.ReadUInt();
                Attack = oByteArray.ReadUInt();
                PayNum = oByteArray.ReadUInt();
                StateLv = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResGetRankingList()
		{
			PacketID = 210;
		}
    }

    /// <summary>
    ///  [响应类] 初始化排行榜信息(开启服务器时请求) 创建者
    /// </summary>
    [Package(210)]
    public partial class ResGetRankingListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetRankingList();
        }
    }


    /// <summary>
    ///  [请求类]称号激活通知
    /// </summary>
    public partial class ReqTitleActiveNotice: Packet 
    {

        public override Packet Clone()
        {
            ReqTitleActiveNotice pkg = new ReqTitleActiveNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTitleActiveNotice()
		{
			PacketID = 211;
		}
    }

    /// <summary>
    ///  [请求类] 称号激活通知 创建者
    /// </summary>
    [Package(211)]
    public partial class ReqTitleActiveNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTitleActiveNotice();
        }
    }


    /// <summary>
    ///  [响应类]称号激活通知
    /// </summary>
    public partial class ResTitleActiveNotice: Packet 
    {
        /// <summary>
        /// 称号TID
        /// </summary>
        public uint TitleTID;
        /// <summary>
        /// 0-获得称号，1-移除称号
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTitleActiveNotice pkg = new ResTitleActiveNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TitleTID = TitleTID;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TitleTID);
                oByteArray.WriteByte(Result);
            }
            else
            {
                TitleTID = oByteArray.ReadUInt();
                Result = oByteArray.ReadByte();
            }
        }
		public ResTitleActiveNotice()
		{
			PacketID = 212;
		}
    }

    /// <summary>
    ///  [响应类] 称号激活通知 创建者
    /// </summary>
    [Package(212)]
    public partial class ResTitleActiveNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTitleActiveNotice();
        }
    }


    /// <summary>
    ///  [请求类]拆分物品
    /// </summary>
    public partial class ReqSplitItems: Packet 
    {
        /// <summary>
        /// 物品位置
        /// </summary>
        public uint Pos;
        /// <summary>
        /// 拆分的物品数量
        /// </summary>
        public uint Num;

        public override Packet Clone()
        {
            ReqSplitItems pkg = new ReqSplitItems();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Pos);
                oByteArray.WriteUInt(Num);
            }
            else
            {
                Pos = oByteArray.ReadUInt();
                Num = oByteArray.ReadUInt();
            }
        }
		public ReqSplitItems()
		{
			PacketID = 213;
		}
    }

    /// <summary>
    ///  [请求类] 拆分物品 创建者
    /// </summary>
    [Package(213)]
    public partial class ReqSplitItemsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSplitItems();
        }
    }


    /// <summary>
    ///  [响应类]拆分物品
    /// </summary>
    public partial class ResSplitItems: Packet 
    {
        /// <summary>
        /// 0-成功1-拆分物品数量大于拥有数量 2-包满了
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResSplitItems pkg = new ResSplitItems();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResSplitItems()
		{
			PacketID = 214;
		}
    }

    /// <summary>
    ///  [响应类] 拆分物品 创建者
    /// </summary>
    [Package(214)]
    public partial class ResSplitItemsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSplitItems();
        }
    }


    /// <summary>
    ///  [请求类]设置佩戴称号
    /// </summary>
    public partial class ReqSetAdronTitle: Packet 
    {
        /// <summary>
        /// 设置的佩戴称号ID
        /// </summary>
        public uint TitleID;

        public override Packet Clone()
        {
            ReqSetAdronTitle pkg = new ReqSetAdronTitle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TitleID = TitleID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TitleID);
            }
            else
            {
                TitleID = oByteArray.ReadUInt();
            }
        }
		public ReqSetAdronTitle()
		{
			PacketID = 215;
		}
    }

    /// <summary>
    ///  [请求类] 设置佩戴称号 创建者
    /// </summary>
    [Package(215)]
    public partial class ReqSetAdronTitleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetAdronTitle();
        }
    }


    /// <summary>
    ///  [响应类]设置佩戴称号
    /// </summary>
    public partial class ResSetAdronTitle: Packet 
    {
        /// <summary>
        /// 0-成功，1-当前称号未激活
        /// </summary>
        public byte Result;
        /// <summary>
        /// 设置佩戴的称号
        /// </summary>
        public uint TitleID;

        public override Packet Clone()
        {
            ResSetAdronTitle pkg = new ResSetAdronTitle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TitleID = TitleID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TitleID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TitleID = oByteArray.ReadUInt();
            }
        }
		public ResSetAdronTitle()
		{
			PacketID = 216;
		}
    }

    /// <summary>
    ///  [响应类] 设置佩戴称号 创建者
    /// </summary>
    [Package(216)]
    public partial class ResSetAdronTitleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetAdronTitle();
        }
    }


    /// <summary>
    ///  [请求类]加载邮件
    /// </summary>
    public partial class ReqLoadMail: Packet 
    {

        public override Packet Clone()
        {
            ReqLoadMail pkg = new ReqLoadMail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqLoadMail()
		{
			PacketID = 217;
		}
    }

    /// <summary>
    ///  [请求类] 加载邮件 创建者
    /// </summary>
    [Package(217)]
    public partial class ReqLoadMailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLoadMail();
        }
    }


    /// <summary>
    ///  [响应类]加载邮件
    /// </summary>
    public partial class ResLoadMail: Packet 
    {
        /// <summary>
        /// 标题
        /// </summary>
        public string Headling;
        /// <summary>
        /// 邮件内容
        /// </summary>
        public string Content;
        /// <summary>
        /// 接收邮件时间
        /// </summary>
        public uint ReceiveTime;
        /// <summary>
        /// 预计到期时间
        /// </summary>
        public uint ExpiresTime;
        /// <summary>
        /// 阅读信件时间
        /// </summary>
        public uint ReadTime;
        /// <summary>
        /// 附属物品列表
        /// </summary>
        public List<GameItemInfo> AppendixItmes = new List<GameItemInfo>();
        /// <summary>
        /// 邮件ID
        /// </summary>
        public uint MailID;
        /// <summary>
        /// true-新邮件
        /// </summary>
        public bool NewMail;
        /// <summary>
        /// true-已领取附件
        /// </summary>
        public bool TakeOutAppendix;
        /// <summary>
        /// 邮件模板TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 额外字符串1
        /// </summary>
        public string AppendString1;
        /// <summary>
        /// 额外字符串2
        /// </summary>
        public string AppendString2;
        /// <summary>
        /// 额外字符串3
        /// </summary>
        public string AppendString3;
        /// <summary>
        /// 额外字符串4
        /// </summary>
        public string AppendString4;
        /// <summary>
        /// 额外字符串5
        /// </summary>
        public string AppendString5;
        /// <summary>
        /// 额外字符串6
        /// </summary>
        public string AppendString6;

        public override Packet Clone()
        {
            ResLoadMail pkg = new ResLoadMail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Headling = Headling;
            pkg.Content = Content;
            pkg.ReceiveTime = ReceiveTime;
            pkg.ExpiresTime = ExpiresTime;
            pkg.ReadTime = ReadTime;
            foreach (GameItemInfo item in AppendixItmes)
            {
                pkg.AppendixItmes.Add(item.Clone() as GameItemInfo);
            }
            pkg.MailID = MailID;
            pkg.NewMail = NewMail;
            pkg.TakeOutAppendix = TakeOutAppendix;
            pkg.TID = TID;
            pkg.AppendString1 = AppendString1;
            pkg.AppendString2 = AppendString2;
            pkg.AppendString3 = AppendString3;
            pkg.AppendString4 = AppendString4;
            pkg.AppendString5 = AppendString5;
            pkg.AppendString6 = AppendString6;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Headling);
                oByteArray.WriteUTF(Content);
                oByteArray.WriteUInt(ReceiveTime);
                oByteArray.WriteUInt(ExpiresTime);
                oByteArray.WriteUInt(ReadTime);
                oByteArray.WriteUShort((ushort)AppendixItmes.Count);
                for (int i = 0; i < AppendixItmes.Count; i++)
                {
                    AppendixItmes[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(MailID);
                oByteArray.WriteBoolean(NewMail);
                oByteArray.WriteBoolean(TakeOutAppendix);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUTF(AppendString1);
                oByteArray.WriteUTF(AppendString2);
                oByteArray.WriteUTF(AppendString3);
                oByteArray.WriteUTF(AppendString4);
                oByteArray.WriteUTF(AppendString5);
                oByteArray.WriteUTF(AppendString6);
            }
            else
            {
                Headling = oByteArray.ReadUTF();
                Content = oByteArray.ReadUTF();
                ReceiveTime = oByteArray.ReadUInt();
                ExpiresTime = oByteArray.ReadUInt();
                ReadTime = oByteArray.ReadUInt();
                int AppendixItmesCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AppendixItmesCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    AppendixItmes.Add(obj);
                }
                MailID = oByteArray.ReadUInt();
                NewMail = oByteArray.ReadBoolean();
                TakeOutAppendix = oByteArray.ReadBoolean();
                TID = oByteArray.ReadUInt();
                AppendString1 = oByteArray.ReadUTF();
                AppendString2 = oByteArray.ReadUTF();
                AppendString3 = oByteArray.ReadUTF();
                AppendString4 = oByteArray.ReadUTF();
                AppendString5 = oByteArray.ReadUTF();
                AppendString6 = oByteArray.ReadUTF();
            }
        }
		public ResLoadMail()
		{
			PacketID = 218;
		}
    }

    /// <summary>
    ///  [响应类] 加载邮件 创建者
    /// </summary>
    [Package(218)]
    public partial class ResLoadMailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLoadMail();
        }
    }


    /// <summary>
    ///  [请求类]阅读邮件
    /// </summary>
    public partial class ReqReadMail: Packet 
    {
        /// <summary>
        /// 邮件ID
        /// </summary>
        public uint MailID;
        /// <summary>
        /// 1-读取邮件，2-提取附件，3-删除邮件
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqReadMail pkg = new ReqReadMail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MailID = MailID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MailID);
                oByteArray.WriteByte(Type);
            }
            else
            {
                MailID = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqReadMail()
		{
			PacketID = 219;
		}
    }

    /// <summary>
    ///  [请求类] 阅读邮件 创建者
    /// </summary>
    [Package(219)]
    public partial class ReqReadMailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReadMail();
        }
    }


    /// <summary>
    ///  [响应类]阅读邮件
    /// </summary>
    public partial class ResReadMail: Packet 
    {
        /// <summary>
        /// 0-成功，1-邮件已被删除，2-附件已领取，3-邮件已有效期，4-背包无空格
        /// </summary>
        public uint Result;
        /// <summary>
        /// 读取信件时间
        /// </summary>
        public uint ReadTime;
        /// <summary>
        /// 附加列表
        /// </summary>
        public List<GameItemInfo> AppendixItems = new List<GameItemInfo>();
        /// <summary>
        /// 1-读取邮件，2-提取附件，3-删除邮件
        /// </summary>
        public byte Type;
        /// <summary>
        /// 邮件ID
        /// </summary>
        public uint MailID;

        public override Packet Clone()
        {
            ResReadMail pkg = new ResReadMail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ReadTime = ReadTime;
            foreach (GameItemInfo item in AppendixItems)
            {
                pkg.AppendixItems.Add(item.Clone() as GameItemInfo);
            }
            pkg.Type = Type;
            pkg.MailID = MailID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(ReadTime);
                oByteArray.WriteUShort((ushort)AppendixItems.Count);
                for (int i = 0; i < AppendixItems.Count; i++)
                {
                    AppendixItems[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(MailID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ReadTime = oByteArray.ReadUInt();
                int AppendixItemsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AppendixItemsCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    AppendixItems.Add(obj);
                }
                Type = oByteArray.ReadByte();
                MailID = oByteArray.ReadUInt();
            }
        }
		public ResReadMail()
		{
			PacketID = 220;
		}
    }

    /// <summary>
    ///  [响应类] 阅读邮件 创建者
    /// </summary>
    [Package(220)]
    public partial class ResReadMailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReadMail();
        }
    }


    /// <summary>
    ///  [请求类]第1步：客户端发送玩家登陆包
    /// </summary>
    public partial class ReqPlayerLogin0100: Packet 
    {
        /// <summary>
        /// 登陆信息
        /// </summary>
        public LoginInfo LoginInf = new LoginInfo();

        public override Packet Clone()
        {
            ReqPlayerLogin0100 pkg = new ReqPlayerLogin0100();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LoginInf = LoginInf.Clone() as LoginInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                LoginInf.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                LoginInf.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqPlayerLogin0100()
		{
			PacketID = 221;
		}
    }

    /// <summary>
    ///  [请求类] 第1步：客户端发送玩家登陆包 创建者
    /// </summary>
    [Package(221)]
    public partial class ReqPlayerLogin0100Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerLogin0100();
        }
    }


    /// <summary>
    ///  [响应类]第1步：客户端发送玩家登陆包
    /// </summary>
    public partial class ResPlayerLogin0100: Packet 
    {
        /// <summary>
        /// 验证结果:0表示成功，1表示校验失败，2表示没有可用的网关，3表示未创建角色，4表示创建账号失败5表示账号被封，6表示IP被封
        /// </summary>
        public byte Result;
        /// <summary>
        /// 网关IP
        /// </summary>
        public string GatewayIP;
        /// <summary>
        /// 网关端口
        /// </summary>
        public ushort GatewayPort;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public uint PlayerID;
        /// <summary>
        /// 玩家ID签名时间
        /// </summary>
        public uint PlayerIDSignTime;
        /// <summary>
        /// 玩家ID校验串
        /// </summary>
        public string PlayerIDSignCode;
        /// <summary>
        /// 后台登录校验串（可登录被封账号）
        /// </summary>
        public string BackstageLogin;
        /// <summary>
        /// 
        /// </summary>
        public uint PlatformEntrance;
        /// <summary>
        /// IP归属地
        /// </summary>
        public string IPBelong;

        public override Packet Clone()
        {
            ResPlayerLogin0100 pkg = new ResPlayerLogin0100();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.GatewayIP = GatewayIP;
            pkg.GatewayPort = GatewayPort;
            pkg.PlayerID = PlayerID;
            pkg.PlayerIDSignTime = PlayerIDSignTime;
            pkg.PlayerIDSignCode = PlayerIDSignCode;
            pkg.BackstageLogin = BackstageLogin;
            pkg.PlatformEntrance = PlatformEntrance;
            pkg.IPBelong = IPBelong;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUTF(GatewayIP);
                oByteArray.WriteUShort(GatewayPort);
                oByteArray.WriteUInt(PlayerID);
                oByteArray.WriteUInt(PlayerIDSignTime);
                oByteArray.WriteUTF(PlayerIDSignCode);
                oByteArray.WriteUTF(BackstageLogin);
                oByteArray.WriteUInt(PlatformEntrance);
                oByteArray.WriteUTF(IPBelong);
            }
            else
            {
                Result = oByteArray.ReadByte();
                GatewayIP = oByteArray.ReadUTF();
                GatewayPort = oByteArray.ReadUShort();
                PlayerID = oByteArray.ReadUInt();
                PlayerIDSignTime = oByteArray.ReadUInt();
                PlayerIDSignCode = oByteArray.ReadUTF();
                BackstageLogin = oByteArray.ReadUTF();
                PlatformEntrance = oByteArray.ReadUInt();
                IPBelong = oByteArray.ReadUTF();
            }
        }
		public ResPlayerLogin0100()
		{
			PacketID = 222;
		}
    }

    /// <summary>
    ///  [响应类] 第1步：客户端发送玩家登陆包 创建者
    /// </summary>
    [Package(222)]
    public partial class ResPlayerLogin0100Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerLogin0100();
        }
    }


    /// <summary>
    ///  [请求类]第2步：通知缓存加载玩家数据
    /// </summary>
    public partial class ReqPlayerLogin0101: Packet 
    {
        /// <summary>
        /// 平台ID;
        /// </summary>
        public ushort PlatformID;
        /// <summary>
        /// 区服ID;
        /// </summary>
        public ushort ServerID;
        /// <summary>
        /// 帐号;
        /// </summary>
        public string Account;
        /// <summary>
        /// 登陆IP;
        /// </summary>
        public string LoginIP;
        /// <summary>
        /// 客户端类型;0表示网页，1表示微端;
        /// </summary>
        public uint ClientType;
        /// <summary>
        /// 后台登录校验串
        /// </summary>
        public string BackstageLogin;
        /// <summary>
        /// 平台vip等级信息 VIP是否过期，VIP等级，是否是年费VIP，是否是超级VIP
        /// </summary>
        public uint[] PlatformVipLv = new uint[4];
        /// <summary>
        /// YY平台信息
        /// </summary>
        public uint[] YYPlatformInfo = new uint[3];
        /// <summary>
        /// 
        /// </summary>
        public uint PlatformEntrance;
        /// <summary>
        /// 登录额外信息
        /// </summary>
        public string LoginExt;

        public override Packet Clone()
        {
            ReqPlayerLogin0101 pkg = new ReqPlayerLogin0101();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.Account = Account;
            pkg.LoginIP = LoginIP;
            pkg.ClientType = ClientType;
            pkg.BackstageLogin = BackstageLogin;
            for (int i = 0; i < 4; i++)
            {
                pkg.PlatformVipLv[i] = PlatformVipLv[i];
            }
            for (int i = 0; i < 3; i++)
            {
                pkg.YYPlatformInfo[i] = YYPlatformInfo[i];
            }
            pkg.PlatformEntrance = PlatformEntrance;
            pkg.LoginExt = LoginExt;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(PlatformID);
                oByteArray.WriteUShort(ServerID);
                oByteArray.WriteUTF(Account);
                oByteArray.WriteUTF(LoginIP);
                oByteArray.WriteUInt(ClientType);
                oByteArray.WriteUTF(BackstageLogin);
                for (int i = 0; i < 4; i++)
                {
                      oByteArray.WriteUInt(PlatformVipLv[i]);
                }
                for (int i = 0; i < 3; i++)
                {
                      oByteArray.WriteUInt(YYPlatformInfo[i]);
                }
                oByteArray.WriteUInt(PlatformEntrance);
                oByteArray.WriteUTF(LoginExt);
            }
            else
            {
                PlatformID = oByteArray.ReadUShort();
                ServerID = oByteArray.ReadUShort();
                Account = oByteArray.ReadUTF();
                LoginIP = oByteArray.ReadUTF();
                ClientType = oByteArray.ReadUInt();
                BackstageLogin = oByteArray.ReadUTF();
                for (int i = 0; i < 4; i++)
                {
                    PlatformVipLv[i] = oByteArray.ReadUInt();
                }
                for (int i = 0; i < 3; i++)
                {
                    YYPlatformInfo[i] = oByteArray.ReadUInt();
                }
                PlatformEntrance = oByteArray.ReadUInt();
                LoginExt = oByteArray.ReadUTF();
            }
        }
		public ReqPlayerLogin0101()
		{
			PacketID = 223;
		}
    }

    /// <summary>
    ///  [请求类] 第2步：通知缓存加载玩家数据 创建者
    /// </summary>
    [Package(223)]
    public partial class ReqPlayerLogin0101Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerLogin0101();
        }
    }


    /// <summary>
    ///  [响应类]第2步：通知缓存加载玩家数据
    /// </summary>
    public partial class ResPlayerLogin0101: Packet 
    {
        /// <summary>
        /// 平台ID
        /// </summary>
        public ushort PlatformID;
        /// <summary>
        /// 区服ID
        /// </summary>
        public ushort ServerID;
        /// <summary>
        /// 账号
        /// </summary>
        public string Account;
        /// <summary>
        /// 结果;0表示成功，1表示未创角，2表示账号写入失败 3-账号被封 4-IP被封
        /// </summary>
        public byte Result;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public uint PlayerID;
        /// <summary>
        /// 玩家ID校验时间
        /// </summary>
        public uint PlayerIDSignTime;
        /// <summary>
        /// 玩家ID校验串
        /// </summary>
        public string PlayerIDSignCode;

        public override Packet Clone()
        {
            ResPlayerLogin0101 pkg = new ResPlayerLogin0101();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.Account = Account;
            pkg.Result = Result;
            pkg.PlayerID = PlayerID;
            pkg.PlayerIDSignTime = PlayerIDSignTime;
            pkg.PlayerIDSignCode = PlayerIDSignCode;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(PlatformID);
                oByteArray.WriteUShort(ServerID);
                oByteArray.WriteUTF(Account);
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(PlayerID);
                oByteArray.WriteUInt(PlayerIDSignTime);
                oByteArray.WriteUTF(PlayerIDSignCode);
            }
            else
            {
                PlatformID = oByteArray.ReadUShort();
                ServerID = oByteArray.ReadUShort();
                Account = oByteArray.ReadUTF();
                Result = oByteArray.ReadByte();
                PlayerID = oByteArray.ReadUInt();
                PlayerIDSignTime = oByteArray.ReadUInt();
                PlayerIDSignCode = oByteArray.ReadUTF();
            }
        }
		public ResPlayerLogin0101()
		{
			PacketID = 224;
		}
    }

    /// <summary>
    ///  [响应类] 第2步：通知缓存加载玩家数据 创建者
    /// </summary>
    [Package(224)]
    public partial class ResPlayerLogin0101Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerLogin0101();
        }
    }


    /// <summary>
    ///  [请求类]第3步：告诉客户端玩家角色信息
    /// </summary>
    public partial class ReqPlayerLogin0102: Packet 
    {

        public override Packet Clone()
        {
            ReqPlayerLogin0102 pkg = new ReqPlayerLogin0102();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPlayerLogin0102()
		{
			PacketID = 225;
		}
    }

    /// <summary>
    ///  [请求类] 第3步：告诉客户端玩家角色信息 创建者
    /// </summary>
    [Package(225)]
    public partial class ReqPlayerLogin0102Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerLogin0102();
        }
    }


    /// <summary>
    ///  [响应类]第3步：告诉客户端玩家角色信息
    /// </summary>
    public partial class ResPlayerLogin0102: Packet 
    {
        /// <summary>
        /// 角色等级
        /// </summary>
        public uint Level;
        /// <summary>
        /// 角色昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 角色职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 角色性别
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 是不是创建角色
        /// </summary>
        public bool IsCreateRole;
        /// <summary>
        /// 公会名字
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ResPlayerLogin0102 pkg = new ResPlayerLogin0102();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Level = Level;
            pkg.NickName = NickName;
            pkg.Career = Career;
            pkg.Sex = Sex;
            pkg.IsCreateRole = IsCreateRole;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Level);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteByte(Career);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteBoolean(IsCreateRole);
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                Level = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                Career = oByteArray.ReadByte();
                Sex = oByteArray.ReadByte();
                IsCreateRole = oByteArray.ReadBoolean();
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ResPlayerLogin0102()
		{
			PacketID = 226;
		}
    }

    /// <summary>
    ///  [响应类] 第3步：告诉客户端玩家角色信息 创建者
    /// </summary>
    [Package(226)]
    public partial class ResPlayerLogin0102Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerLogin0102();
        }
    }


    /// <summary>
    ///  [请求类]第1步：客户端发送创建角色包
    /// </summary>
    public partial class ReqCreateRole0100: Packet 
    {
        /// <summary>
        /// 通过平台ID、区服ID、玩家ID生成的校验串
        /// </summary>
        public string PlayerIDSignCode;
        /// <summary>
        /// 登陆时间
        /// </summary>
        public uint PlayerIDSignTime;
        /// <summary>
        /// 职业：1战士，2法师，3道士
        /// </summary>
        public byte Career;
        /// <summary>
        /// 性别：1男,2女
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 玩家昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 客户端类型 0-网页 1-客户端
        /// </summary>
        public uint ClientType;

        public override Packet Clone()
        {
            ReqCreateRole0100 pkg = new ReqCreateRole0100();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerIDSignCode = PlayerIDSignCode;
            pkg.PlayerIDSignTime = PlayerIDSignTime;
            pkg.Career = Career;
            pkg.Sex = Sex;
            pkg.NickName = NickName;
            pkg.ClientType = ClientType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(PlayerIDSignCode);
                oByteArray.WriteUInt(PlayerIDSignTime);
                oByteArray.WriteByte(Career);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUInt(ClientType);
            }
            else
            {
                PlayerIDSignCode = oByteArray.ReadUTF();
                PlayerIDSignTime = oByteArray.ReadUInt();
                Career = oByteArray.ReadByte();
                Sex = oByteArray.ReadByte();
                NickName = oByteArray.ReadUTF();
                ClientType = oByteArray.ReadUInt();
            }
        }
		public ReqCreateRole0100()
		{
			PacketID = 227;
		}
    }

    /// <summary>
    ///  [请求类] 第1步：客户端发送创建角色包 创建者
    /// </summary>
    [Package(227)]
    public partial class ReqCreateRole0100Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateRole0100();
        }
    }


    /// <summary>
    ///  [响应类]第1步：客户端发送创建角色包
    /// </summary>
    public partial class ResCreateRole0100: Packet 
    {
        /// <summary>
        /// 结果：0表示成功，1表示校验失败，2表示角色已存在，3表示昵称已存在，4表示数据更新失败，5表示昵称记录失败,6性别错误,7职业错误
        /// </summary>
        public byte Result;
        /// <summary>
        /// 客户端类型 0-网页 1-客户端
        /// </summary>
        public uint ClientType;
        /// <summary>
        /// 玩家昵称
        /// </summary>
        public string NickName;

        public override Packet Clone()
        {
            ResCreateRole0100 pkg = new ResCreateRole0100();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ClientType = ClientType;
            pkg.NickName = NickName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(ClientType);
                oByteArray.WriteUTF(NickName);
            }
            else
            {
                Result = oByteArray.ReadByte();
                ClientType = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
            }
        }
		public ResCreateRole0100()
		{
			PacketID = 228;
		}
    }

    /// <summary>
    ///  [响应类] 第1步：客户端发送创建角色包 创建者
    /// </summary>
    [Package(228)]
    public partial class ResCreateRole0100Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateRole0100();
        }
    }


    /// <summary>
    ///  [请求类]第2步：检查玩家昵称是否可用
    /// </summary>
    public partial class ReqCreateRole0101: Packet 
    {
        /// <summary>
        /// 检查昵称来源：1表示验证昵称，2表示创建角色
        /// </summary>
        public byte CheckSource;
        /// <summary>
        /// 要检查的昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;

        public override Packet Clone()
        {
            ReqCreateRole0101 pkg = new ReqCreateRole0101();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CheckSource = CheckSource;
            pkg.NickName = NickName;
            pkg.Career = Career;
            pkg.Sex = Sex;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(CheckSource);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteByte(Career);
                oByteArray.WriteByte(Sex);
            }
            else
            {
                CheckSource = oByteArray.ReadByte();
                NickName = oByteArray.ReadUTF();
                Career = oByteArray.ReadByte();
                Sex = oByteArray.ReadByte();
            }
        }
		public ReqCreateRole0101()
		{
			PacketID = 229;
		}
    }

    /// <summary>
    ///  [请求类] 第2步：检查玩家昵称是否可用 创建者
    /// </summary>
    [Package(229)]
    public partial class ReqCreateRole0101Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateRole0101();
        }
    }


    /// <summary>
    ///  [响应类]第2步：检查玩家昵称是否可用
    /// </summary>
    public partial class ResCreateRole0101: Packet 
    {
        /// <summary>
        /// 结果：0表示可用，1表示不可用，2表示数据写入失败
        /// </summary>
        public byte Result;
        /// <summary>
        /// 检查昵称来源：1表示验证昵称，2表示创建角色
        /// </summary>
        public byte CheckSource;
        /// <summary>
        /// 可用昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;

        public override Packet Clone()
        {
            ResCreateRole0101 pkg = new ResCreateRole0101();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CheckSource = CheckSource;
            pkg.NickName = NickName;
            pkg.Career = Career;
            pkg.Sex = Sex;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(CheckSource);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteByte(Career);
                oByteArray.WriteByte(Sex);
            }
            else
            {
                Result = oByteArray.ReadByte();
                CheckSource = oByteArray.ReadByte();
                NickName = oByteArray.ReadUTF();
                Career = oByteArray.ReadByte();
                Sex = oByteArray.ReadByte();
            }
        }
		public ResCreateRole0101()
		{
			PacketID = 230;
		}
    }

    /// <summary>
    ///  [响应类] 第2步：检查玩家昵称是否可用 创建者
    /// </summary>
    [Package(230)]
    public partial class ResCreateRole0101Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateRole0101();
        }
    }


    /// <summary>
    ///  [请求类]创建新邮件
    /// </summary>
    public partial class ReqCreateMailNotice: Packet 
    {
        /// <summary>
        /// 自定义
        /// </summary>
        public byte Type;
        /// <summary>
        /// 标题
        /// </summary>
        public string Headline;
        /// <summary>
        /// 内容
        /// </summary>
        public string Content;
        /// <summary>
        /// 附件
        /// </summary>
        public string AppendixItems;
        /// <summary>
        /// 有效时间(秒)
        /// </summary>
        public uint Expire;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 邮件ID
        /// </summary>
        public uint MailID;
        /// <summary>
        /// 接收邮件时间
        /// </summary>
        public uint ReceiveTime;
        /// <summary>
        /// 邮件模板TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 附带文字1
        /// </summary>
        public string AppendString1;
        /// <summary>
        /// 附带文字2
        /// </summary>
        public string AppendString2;
        /// <summary>
        /// 附带文字3
        /// </summary>
        public string AppendString3;
        /// <summary>
        /// 附带文字4
        /// </summary>
        public string AppendString4;
        /// <summary>
        /// 附带文字5
        /// </summary>
        public string AppendString5;
        /// <summary>
        /// 附带文字6
        /// </summary>
        public string AppendString6;
        /// <summary>
        /// 附属物品列表(ItemGuid | ItemGuid | ...)
        /// </summary>
        public string AppendixGoods;

        public override Packet Clone()
        {
            ReqCreateMailNotice pkg = new ReqCreateMailNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Headline = Headline;
            pkg.Content = Content;
            pkg.AppendixItems = AppendixItems;
            pkg.Expire = Expire;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.MailID = MailID;
            pkg.ReceiveTime = ReceiveTime;
            pkg.TID = TID;
            pkg.AppendString1 = AppendString1;
            pkg.AppendString2 = AppendString2;
            pkg.AppendString3 = AppendString3;
            pkg.AppendString4 = AppendString4;
            pkg.AppendString5 = AppendString5;
            pkg.AppendString6 = AppendString6;
            pkg.AppendixGoods = AppendixGoods;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUTF(Headline);
                oByteArray.WriteUTF(Content);
                oByteArray.WriteUTF(AppendixItems);
                oByteArray.WriteUInt(Expire);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MailID);
                oByteArray.WriteUInt(ReceiveTime);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUTF(AppendString1);
                oByteArray.WriteUTF(AppendString2);
                oByteArray.WriteUTF(AppendString3);
                oByteArray.WriteUTF(AppendString4);
                oByteArray.WriteUTF(AppendString5);
                oByteArray.WriteUTF(AppendString6);
                oByteArray.WriteUTF(AppendixGoods);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Headline = oByteArray.ReadUTF();
                Content = oByteArray.ReadUTF();
                AppendixItems = oByteArray.ReadUTF();
                Expire = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
                MailID = oByteArray.ReadUInt();
                ReceiveTime = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                AppendString1 = oByteArray.ReadUTF();
                AppendString2 = oByteArray.ReadUTF();
                AppendString3 = oByteArray.ReadUTF();
                AppendString4 = oByteArray.ReadUTF();
                AppendString5 = oByteArray.ReadUTF();
                AppendString6 = oByteArray.ReadUTF();
                AppendixGoods = oByteArray.ReadUTF();
            }
        }
		public ReqCreateMailNotice()
		{
			PacketID = 231;
		}
    }

    /// <summary>
    ///  [请求类] 创建新邮件 创建者
    /// </summary>
    [Package(231)]
    public partial class ReqCreateMailNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateMailNotice();
        }
    }


    /// <summary>
    ///  [响应类]创建新邮件
    /// </summary>
    public partial class ResCreateMailNotice: Packet 
    {

        public override Packet Clone()
        {
            ResCreateMailNotice pkg = new ResCreateMailNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResCreateMailNotice()
		{
			PacketID = 232;
		}
    }

    /// <summary>
    ///  [响应类] 创建新邮件 创建者
    /// </summary>
    [Package(232)]
    public partial class ResCreateMailNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateMailNotice();
        }
    }


    /// <summary>
    ///  [请求类]第1步：客户端发送进入游戏数据包
    /// </summary>
    public partial class ReqEnterGame001: Packet 
    {
        /// <summary>
        /// 玩家ID签名时间
        /// </summary>
        public uint PlayerIDSignTime;
        /// <summary>
        /// 玩家ID签名校验串
        /// </summary>
        public string PlayerIDSignCode;
        /// <summary>
        /// 0:未实名;1:已实名且已成年;2:已实名但未成年
        /// </summary>
        public int PlayerIsIndulgence;
        /// <summary>
        /// 手机验证，0未验证，1已经验证，2已经领取
        /// </summary>
        public int PlayerIsPhoneVerification;
        /// <summary>
        /// 玩家IP
        /// </summary>
        public string PlayerIP;

        public override Packet Clone()
        {
            ReqEnterGame001 pkg = new ReqEnterGame001();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerIDSignTime = PlayerIDSignTime;
            pkg.PlayerIDSignCode = PlayerIDSignCode;
            pkg.PlayerIsIndulgence = PlayerIsIndulgence;
            pkg.PlayerIsPhoneVerification = PlayerIsPhoneVerification;
            pkg.PlayerIP = PlayerIP;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlayerIDSignTime);
                oByteArray.WriteUTF(PlayerIDSignCode);
                oByteArray.WriteInt(PlayerIsIndulgence);
                oByteArray.WriteInt(PlayerIsPhoneVerification);
                oByteArray.WriteUTF(PlayerIP);
            }
            else
            {
                PlayerIDSignTime = oByteArray.ReadUInt();
                PlayerIDSignCode = oByteArray.ReadUTF();
                PlayerIsIndulgence = oByteArray.ReadInt();
                PlayerIsPhoneVerification = oByteArray.ReadInt();
                PlayerIP = oByteArray.ReadUTF();
            }
        }
		public ReqEnterGame001()
		{
			PacketID = 233;
		}
    }

    /// <summary>
    ///  [请求类] 第1步：客户端发送进入游戏数据包 创建者
    /// </summary>
    [Package(233)]
    public partial class ReqEnterGame001Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterGame001();
        }
    }


    /// <summary>
    ///  [响应类]第1步：客户端发送进入游戏数据包
    /// </summary>
    public partial class ResEnterGame001: Packet 
    {

        public override Packet Clone()
        {
            ResEnterGame001 pkg = new ResEnterGame001();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResEnterGame001()
		{
			PacketID = 234;
		}
    }

    /// <summary>
    ///  [响应类] 第1步：客户端发送进入游戏数据包 创建者
    /// </summary>
    [Package(234)]
    public partial class ResEnterGame001Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterGame001();
        }
    }


    /// <summary>
    ///  [请求类]第2步：通知登陆服更新玩家状态和世界服创建玩家对象
    /// </summary>
    public partial class ReqEnterGame002: Packet 
    {
        /// <summary>
        /// 0:未实名;1:已实名且已成年;2:已实名但未成年
        /// </summary>
        public uint PlayerIsIndulgence;
        /// <summary>
        /// 登陆ID
        /// </summary>
        public string LoginIP;
        /// <summary>
        /// 手机验证，0未验证，1已经验证，2已经领取
        /// </summary>
        public uint PlayerIsPhoneVerification;

        public override Packet Clone()
        {
            ReqEnterGame002 pkg = new ReqEnterGame002();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerIsIndulgence = PlayerIsIndulgence;
            pkg.LoginIP = LoginIP;
            pkg.PlayerIsPhoneVerification = PlayerIsPhoneVerification;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlayerIsIndulgence);
                oByteArray.WriteUTF(LoginIP);
                oByteArray.WriteUInt(PlayerIsPhoneVerification);
            }
            else
            {
                PlayerIsIndulgence = oByteArray.ReadUInt();
                LoginIP = oByteArray.ReadUTF();
                PlayerIsPhoneVerification = oByteArray.ReadUInt();
            }
        }
		public ReqEnterGame002()
		{
			PacketID = 235;
		}
    }

    /// <summary>
    ///  [请求类] 第2步：通知登陆服更新玩家状态和世界服创建玩家对象 创建者
    /// </summary>
    [Package(235)]
    public partial class ReqEnterGame002Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterGame002();
        }
    }


    /// <summary>
    ///  [响应类]第2步：通知登陆服更新玩家状态和世界服创建玩家对象
    /// </summary>
    public partial class ResEnterGame002: Packet 
    {

        public override Packet Clone()
        {
            ResEnterGame002 pkg = new ResEnterGame002();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResEnterGame002()
		{
			PacketID = 236;
		}
    }

    /// <summary>
    ///  [响应类] 第2步：通知登陆服更新玩家状态和世界服创建玩家对象 创建者
    /// </summary>
    [Package(236)]
    public partial class ResEnterGame002Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterGame002();
        }
    }


    /// <summary>
    ///  [请求类]第3步：开始从缓存服上获取玩家信息
    /// </summary>
    public partial class ReqEnterGame003: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterGame003 pkg = new ReqEnterGame003();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterGame003()
		{
			PacketID = 237;
		}
    }

    /// <summary>
    ///  [请求类] 第3步：开始从缓存服上获取玩家信息 创建者
    /// </summary>
    [Package(237)]
    public partial class ReqEnterGame003Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterGame003();
        }
    }


    /// <summary>
    ///  [响应类]第3步：开始从缓存服上获取玩家信息
    /// </summary>
    public partial class ResEnterGame003: Packet 
    {

        public override Packet Clone()
        {
            ResEnterGame003 pkg = new ResEnterGame003();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResEnterGame003()
		{
			PacketID = 238;
		}
    }

    /// <summary>
    ///  [响应类] 第3步：开始从缓存服上获取玩家信息 创建者
    /// </summary>
    [Package(238)]
    public partial class ResEnterGame003Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterGame003();
        }
    }


    /// <summary>
    ///  [请求类]第4步：从缓存服务器发送角色基本信息
    /// </summary>
    public partial class ReqEnterGame004: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterGame004 pkg = new ReqEnterGame004();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterGame004()
		{
			PacketID = 239;
		}
    }

    /// <summary>
    ///  [请求类] 第4步：从缓存服务器发送角色基本信息 创建者
    /// </summary>
    [Package(239)]
    public partial class ReqEnterGame004Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterGame004();
        }
    }


    /// <summary>
    ///  [响应类]第4步：从缓存服务器发送角色基本信息
    /// </summary>
    public partial class ResEnterGame004: Packet 
    {
        /// <summary>
        /// 上一次下线时间
        /// </summary>
        public uint LogoutTime;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 金币
        /// </summary>
        public uint GoldCoins;
        /// <summary>
        /// 绑定金币
        /// </summary>
        public uint SilverCoins;
        /// <summary>
        /// 元宝
        /// </summary>
        public uint Ingots;
        /// <summary>
        /// 礼券
        /// </summary>
        public uint Gifts;
        /// <summary>
        /// 王者币
        /// </summary>
        public uint KingCoins;
        /// <summary>
        /// VIP等级
        /// </summary>
        public byte VIPLv;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 经验
        /// </summary>
        public long Exp;
        /// <summary>
        /// 当前血量
        /// </summary>
        public uint CurHP;
        /// <summary>
        /// 当前魔法值
        /// </summary>
        public uint CurMP;
        /// <summary>
        /// 当前内力值
        /// </summary>
        public uint CurSP;
        /// <summary>
        /// 善恶(PK值)
        /// </summary>
        public uint PKValue;
        /// <summary>
        /// 当前所在地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 当前地图所在坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 当前地图所在坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 当前内功等级
        /// </summary>
        public uint SPLv;
        /// <summary>
        /// 当前内功经验
        /// </summary>
        public uint SPExp;
        /// <summary>
        /// 血符值
        /// </summary>
        public uint XuefuValue;
        /// <summary>
        /// 护盾值
        /// </summary>
        public uint ShieldValue;
        /// <summary>
        /// 神石值
        /// </summary>
        public uint JewelValue;
        /// <summary>
        /// 命珠值
        /// </summary>
        public uint LifeStoneValue;
        /// <summary>
        /// 7日签到标识
        /// </summary>
        public uint SevendaysSign;
        /// <summary>
        /// 累计签到标识
        /// </summary>
        public uint SignFlag;
        /// <summary>
        /// 累计签到次数
        /// </summary>
        public uint SignTimes;
        /// <summary>
        /// 累计签到奖励标识
        /// </summary>
        public uint SignAwards;
        /// <summary>
        /// 每月补签次数
        /// </summary>
        public uint RetroactiveTimes;
        /// <summary>
        /// 注册天数
        /// </summary>
        public uint LoginDays;
        /// <summary>
        /// 最后一次更新时间
        /// </summary>
        public uint LastRefreshTime;
        /// <summary>
        /// 武器ID
        /// </summary>
        public uint WeaponID;
        /// <summary>
        /// 衣服ID
        /// </summary>
        public uint ClothesID;
        /// <summary>
        /// 成就积分
        /// </summary>
        public uint AchievementScore;
        /// <summary>
        /// 翅膀等级
        /// </summary>
        public uint WingLevel;
        /// <summary>
        /// 玩家攻击状态
        /// </summary>
        public uint AttackState;
        /// <summary>
        /// 攻击模式，0-和平，1-全体，2-组队，3-工会，4-善恶，5-阵营
        /// </summary>
        public byte FightMode;
        /// <summary>
        /// 默认称号
        /// </summary>
        public uint DefaultTitle;
        /// <summary>
        /// 开服天数
        /// </summary>
        public uint OpenGameDays;
        /// <summary>
        /// 品阶
        /// </summary>
        public uint OfficialRank;
        /// <summary>
        /// 品阶经验
        /// </summary>
        public uint OfficialExp;
        /// <summary>
        /// 每日累计在线时间(用于领取在线奖励)
        /// </summary>
        public uint OnlineTimesDay;
        /// <summary>
        /// 累计充值
        /// </summary>
        public uint AllRecharge;
        /// <summary>
        /// 阵营
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 每日充值
        /// </summary>
        public uint DailyPayNum;
        /// <summary>
        /// 首充
        /// </summary>
        public uint FirstPayNum;
        /// <summary>
        /// 今日提建议剩余次数
        /// </summary>
        public uint AdviceNum;
        /// <summary>
        /// 每天可以转换境界经验的次数
        /// </summary>
        public uint ChangeStateExpTime;
        /// <summary>
        /// 是否自动组队1是开启0不开启
        /// </summary>
        public byte IsAutoTeam;
        /// <summary>
        /// 客户端类型 0-网页 1-微端
        /// </summary>
        public uint ClientType;
        /// <summary>
        /// 当前主线任务ID
        /// </summary>
        public uint CurTaskID;
        /// <summary>
        /// 石墓烧猪经验值
        /// </summary>
        public uint FirPigExp;
        /// <summary>
        /// 累计离线时间
        /// </summary>
        public uint AllOffineTime;
        /// <summary>
        /// 已经发了多少红包
        /// </summary>
        public uint AllSendRedBagTime;
        /// <summary>
        /// 最后一次领取全民红包时间
        /// </summary>
        public uint LastTakeRedBagTime;
        /// <summary>
        /// 最后一次领取的系统补偿ID
        /// </summary>
        public int LastGetSystemCompensate;
        /// <summary>
        /// 合区时间戳,为0时候表示没合区
        /// </summary>
        public uint UnionGameDays;
        /// <summary>
        /// GM用的扶持元宝,不可以与玩家交互
        /// </summary>
        public uint GMIngots;
        /// <summary>
        /// 翅膀祝福值
        /// </summary>
        public uint WingExp;
        /// <summary>
        /// 0是不禁言，1是禁言
        /// </summary>
        public uint IsForbiddenLanguage;
        /// <summary>
        /// 跨服战荣誉值
        /// </summary>
        public uint HonorValue;
        /// <summary>
        /// 时装ID
        /// </summary>
        public uint FashionClothesID;
        /// <summary>
        /// 时装武器ID
        /// </summary>
        public uint FashionWeaponID;
        /// <summary>
        /// 手机验证，0未验证，1已经验证，2已经领取
        /// </summary>
        public uint PhoneVerification;
        /// <summary>
        /// 平台VIP等级
        /// </summary>
        public string PlatformVIPInfo;
        /// <summary>
        /// 今日累计充值,用于领取七日连续充值
        /// </summary>
        public uint CurDayPayNum;
        /// <summary>
        /// 血符Lv
        /// </summary>
        public uint XuefuLv;
        /// <summary>
        /// 护盾Lv
        /// </summary>
        public uint ShieldLv;
        /// <summary>
        /// 神石Lv
        /// </summary>
        public uint JewelLv;
        /// <summary>
        /// 命珠Lv
        /// </summary>
        public uint LifeStoneLv;
        /// <summary>
        /// 成就勋章Lv
        /// </summary>
        public uint AchievementMedalLv;
        /// <summary>
        /// 累计充值天数
        /// </summary>
        public uint DailyPayTimes;
        /// <summary>
        /// 名字
        /// </summary>
        public string NickName;
        /// <summary>
        /// 账号
        /// </summary>
        public string Account;
        /// <summary>
        /// 登陆IP
        /// </summary>
        public string LogoutIP;
        /// <summary>
        /// 成就达成奖励标识
        /// </summary>
        public string AwardComplete;
        /// <summary>
        /// 已学技能表
        /// </summary>
        public string SkillListStr;
        /// <summary>
        /// 快捷键
        /// </summary>
        public string Hotkeys;
        /// <summary>
        /// 称号
        /// </summary>
        public string Title;
        /// <summary>
        /// 新手卡系列领取
        /// </summary>
        public string GetAwardCodeStr;
        /// <summary>
        /// 音效
        /// </summary>
        public string MusicSet;
        /// <summary>
        /// 降妖除魔
        /// </summary>
        public string DailyTaskInfo;
        /// <summary>
        /// 跨服战荣誉兑换物品信息
        /// </summary>
        public string ServiceWarTakeItemInfo;
        /// <summary>
        /// VIP奖励标识
        /// </summary>
        public string VIPAwardState;
        /// <summary>
        /// 物品组信息
        /// </summary>
        public string ItemGropDailyNum;
        /// <summary>
        /// 个人boss信息
        /// </summary>
        public string PersonBossInfo;
        /// <summary>
        /// 任务信息
        /// </summary>
        public string TaskInfo;
        /// <summary>
        /// 进入副本信息
        /// </summary>
        public string DungeonInfo;
        /// <summary>
        /// 每日充值领奖信息
        /// </summary>
        public string DailyPaySignInfo;
        /// <summary>
        /// 连续充值信息
        /// </summary>
        public string ContinuityRecharge;
        /// <summary>
        /// 传奇之魂
        /// </summary>
        public string LegendSoulInfo;
        /// <summary>
        /// 投资
        /// </summary>
        public string InvestmentStr;
        /// <summary>
        /// 签名
        /// </summary>
        public string Signature;
        /// <summary>
        /// 时装信息
        /// </summary>
        public string FashionInfo;
        /// <summary>
        /// 第一次系统
        /// </summary>
        public string FirstSystemInfo;
        /// <summary>
        /// 成长计划领奖信息
        /// </summary>
        public string GrowthPlanInfo;
        /// <summary>
        /// 特殊效果
        /// </summary>
        public string EffectInfo;
        /// <summary>
        /// GM权限等级0-没有，1-全部GM权限，2-只可以查看
        /// </summary>
        public int GMLv;
        /// <summary>
        /// 日常精英任务数据
        /// </summary>
        public string DailyEliteTaskInfo;
        /// <summary>
        /// 威望值
        /// </summary>
        public uint Fame;
        /// <summary>
        /// 宝藏任务字符串
        /// </summary>
        public int TreasureTaskInfo;
        /// <summary>
        /// 活跃度奖励信息
        /// </summary>
        public string LivenessAwardInfo;
        /// <summary>
        /// 今日双倍领取经验玉次数
        /// </summary>
        public uint DoubleTakeExpJadeTimes;
        /// <summary>
        /// 累计在线时间(用于防沉迷)
        /// </summary>
        public uint CumulativeOnLineTime;
        /// <summary>
        /// 防沉迷系统是否开启，0关闭，1开启
        /// </summary>
        public uint OpenAntiAddiction;
        /// <summary>
        /// 最近一次退出行会的时间戳
        /// </summary>
        public uint LastLExitGuildTime;
        /// <summary>
        /// 是否领取了首次加入帮派奖励
        /// </summary>
        public byte IsGetGuildAward;
        /// <summary>
        /// 限时任务开启时间
        /// </summary>
        public uint LimiteTaskStartTime;
        /// <summary>
        /// 限时任务字符串：TID|完成次数|是否领取(0:没领，1领取)
        /// </summary>
        public string LimiteTaskStr;
        /// <summary>
        /// 洗炼碎片值
        /// </summary>
        public uint BaptizeValue;
        /// <summary>
        /// 平台VIP TID
        /// </summary>
        public uint PlatfromVipTID;
        /// <summary>
        /// 微端每日领奖状态
        /// </summary>
        public uint MicroClientDailyAward;
        /// <summary>
        /// 微端等级领奖状态
        /// </summary>
        public string MicroClientLvAward;
        /// <summary>
        /// 引导信息
        /// </summary>
        public string GuideInfo;
        /// <summary>
        /// 资源找回信息
        /// </summary>
        public string GetBackInfo;
        /// <summary>
        /// 日常次数
        /// </summary>
        public string DailyNum;
        /// <summary>
        /// 祈福信息
        /// </summary>
        public string PrayInfo;
        /// <summary>
        /// 活跃度等级奖励信息
        /// </summary>
        public string LivenessLvAwardInfo;
        /// <summary>
        /// 灵气值
        /// </summary>
        public uint FixSoulValue;
        /// <summary>
        /// 巡城任务次数
        /// </summary>
        public string PatrolCityTaskInfo;
        /// <summary>
        /// 已双倍领取过的副本ID
        /// </summary>
        public string DoubleDungeonAward;
        /// <summary>
        /// 今日已捐献次数
        /// </summary>
        public int MagicDonateTimes;
        /// <summary>
        /// 声望
        /// </summary>
        public int Prestige;
        /// <summary>
        /// 通天塔等级
        /// </summary>
        public uint BabelLv;
        /// <summary>
        /// 通天塔领奖信息
        /// </summary>
        public string BabelAwardInfo;
        /// <summary>
        /// 传奇之魂最大值
        /// </summary>
        public uint LegendMaxSoul;
        /// <summary>
        /// 进入通天塔剩余次数
        /// </summary>
        public uint BabelTimes;
        /// <summary>
        /// 地图唯一ID
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 背包物品掉落概率
        /// </summary>
        public int BagItemDropProbability;
        /// <summary>
        /// 装备物品掉落概率
        /// </summary>
        public int EquipItemDropProbability;
        /// <summary>
        /// 功能开启引导
        /// </summary>
        public string OldGuideInfo;
        /// <summary>
        /// 连击技能信息
        /// </summary>
        public string ComboSkillInfo;
        /// <summary>
        /// 炼狱剩余时间（秒）
        /// </summary>
        public int LianYuTime;
        /// <summary>
        /// 今天回收装备获得的经验
        /// </summary>
        public string RecycleExpInfo;
        /// <summary>
        /// 今天产生的行会资金
        /// </summary>
        public int GuildMoney;
        /// <summary>
        /// 临时Vip1到期时间戳
        /// </summary>
        public uint VipTime;
        /// <summary>
        /// 总天赋点数(重置时候用)
        /// </summary>
        public uint MaxTalentPoint;
        /// <summary>
        /// 当前剩余天赋点数
        /// </summary>
        public uint CurTalentPoint;
        /// <summary>
        /// 天赋信息
        /// </summary>
        public string TalentInfo;
        /// <summary>
        /// 今天已经领取全民红包次数
        /// </summary>
        public uint CurDayTakeRedBagTimes;
        /// <summary>
        /// 帮派任务信息
        /// </summary>
        public string GuildTaskInfo;
        /// <summary>
        /// 通天塔排行榜奖励
        /// </summary>
        public string BabelRankAward;
        /// <summary>
        /// 心魔系统信息
        /// </summary>
        public string InnerDemonsInfo;
        /// <summary>
        /// 今日已使用免费增加最大强化等级的数量
        /// </summary>
        public byte FreeBuyMaxStrengthTimes;
        /// <summary>
        /// 国家宝藏信息
        /// </summary>
        public string NationalTreasure;
        /// <summary>
        /// 结义信息
        /// </summary>
        public string BrothersInfo;
        /// <summary>
        /// 免费剩余次数
        /// </summary>
        public int FreeShaiZiTimes;
        /// <summary>
        /// 不免费剩余次数
        /// </summary>
        public int ShaiZiTimes;
        /// <summary>
        /// 全民红包元宝
        /// </summary>
        public int RedBagMoney;
        /// <summary>
        /// 头像图片名字
        /// </summary>
        public string HeadSculpture;
        /// <summary>
        /// 是否上榜
        /// </summary>
        public int IsRank;
        /// <summary>
        /// 血符任务信息
        /// </summary>
        public string XueFuTaskInfo;
        /// <summary>
        /// 坐骑ID
        /// </summary>
        public uint MountsID;
        /// <summary>
        /// 通天塔完成时间
        /// </summary>
        public uint BabelFinishTime;
        /// <summary>
        /// 开服离线经验
        /// </summary>
        public uint OpenDayOffLineExp;
        /// <summary>
        /// 首冲时间
        /// </summary>
        public uint FirstPayTime;
        /// <summary>
        /// 可解锁背包起始格子
        /// </summary>
        public uint BagCanUnlockStartPos;
        /// <summary>
        /// 背包结束位置(不包括)
        /// </summary>
        public uint BagEndPos;
        /// <summary>
        /// 解锁背包时间
        /// </summary>
        public uint UnlockBagTime;
        /// <summary>
        /// 已时间解锁背包格子数量
        /// </summary>
        public uint BagPosTimeUnlockCount;
        /// <summary>
        /// 魔器洗炼碎片
        /// </summary>
        public uint GemEquipBaptizeValue;
        /// <summary>
        /// 魔器系统等级
        /// </summary>
        public int GemEquipLv;
        /// <summary>
        /// 魔器系统升级经验
        /// </summary>
        public int GemEquipExp;
        /// <summary>
        /// 剩余魔器经验兑换次数
        /// </summary>
        public int ExchangeGenExpTime;
        /// <summary>
        /// 每(日周月)购买商城限购物品
        /// </summary>
        public string DwmBuyShopItem;
        /// <summary>
        /// 屏蔽信息
        /// </summary>
        public string ScreenInfo;
        /// <summary>
        /// 今日已经获得魔煞值
        /// </summary>
        public uint CurDayMoShaValue;
        /// <summary>
        /// 心魔派遣
        /// </summary>
        public string XinMoPaiQian;
        /// <summary>
        /// 翅膀技能
        /// </summary>
        public string WingSkillInfo;
        /// <summary>
        /// 平台VIP奖励
        /// </summary>
        public string PlatformVIPAward;
        /// <summary>
        /// 实名验证奖励，0未领取，1已领取
        /// </summary>
        public uint RealNameAward;
        /// <summary>
        /// 后台设置平台VIP信息
        /// </summary>
        public string GMSetPlatformVIP;
        /// <summary>
        /// 回收任务信息
        /// </summary>
        public string RecycleTaskInfo;
        /// <summary>
        /// 猜拳玩家信息
        /// </summary>
        public string GuessInfo;
        /// <summary>
        /// 猜拳任务信息
        /// </summary>
        public string GuessTaskInfo;
        /// <summary>
        /// 突破等级
        /// </summary>
        public uint BreakLv;
        /// <summary>
        /// 突破值
        /// </summary>
        public uint BreakValue;
        /// <summary>
        /// 兑换突破值次数
        /// </summary>
        public uint ChangeBreakValueTime;
        /// <summary>
        /// 采集信息
        /// </summary>
        public string CollectInfo;
        /// <summary>
        /// 龙魄等级
        /// </summary>
        public uint LongPoLv;
        /// <summary>
        /// 龙魄值
        /// </summary>
        public uint LongPoValue;
        /// <summary>
        /// 卧龙山庄任务信息
        /// </summary>
        public string WolongTaskInfo;
        /// <summary>
        /// 奇遇副本信息
        /// </summary>
        public string AdventureInfo;
        /// <summary>
        /// 奇遇副本GUID
        /// </summary>
        public uint AdventureMapGuid;
        /// <summary>
        /// YY平台相关信息
        /// </summary>
        public string YYPlatformInfo;
        /// <summary>
        /// 后台设置YY平台信息
        /// </summary>
        public string GMSetYYPlatformInfo;
        /// <summary>
        /// 新元宝
        /// </summary>
        public uint NewGifts;
        /// <summary>
        /// 行会祭坛已献祭次数
        /// </summary>
        public string SacrificeInfo;
        /// <summary>
        /// 攻速
        /// </summary>
        public uint AttackSpeed;
        /// <summary>
        /// 当前泡点玉ID
        /// </summary>
        public int BubbleStoneId;
        /// <summary>
        /// 是否已领免费泡点
        /// </summary>
        public int FreeBubble;
        /// <summary>
        /// 是否已购买泡点效率提升卡
        /// </summary>
        public int BubbleUp;
        /// <summary>
        /// 是否泡点效率提升中
        /// </summary>
        public int IsBubbleUp;
        /// <summary>
        /// 多倍泡点剩余时长
        /// </summary>
        public int MulBubbleTime;
        /// <summary>
        /// 商城限时物品信息
        /// </summary>
        public string LimitTimeShopItem;
        /// <summary>
        /// 练功房累计时间
        /// </summary>
        public int LGFTime;
        /// <summary>
        /// 练功房剩余时间
        /// </summary>
        public uint LGFLeftTime;
        /// <summary>
        /// 日常活动补签刷新时间
        /// </summary>
        public int DASSRefreshTime;
        /// <summary>
        /// 日常活动补签信息
        /// </summary>
        public string DailyActivitySignInfo;
        /// <summary>
        /// 市场上次刷新时间[黑市、集市、比奇黑市、盟重黑市]
        /// </summary>
        public string MarketRefreshTime;
        /// <summary>
        /// 仓库解锁信息（第一页结束位置|第二页结束位置|......）
        /// </summary>
        public string StoreHouseInfo;
        /// <summary>
        /// 装备强化失败附加成功率
        /// </summary>
        public int StrengthFailExtraRate;
        /// <summary>
        /// 装备位强化信息
        /// </summary>
        public EquipPosStrengthenInfo EquipPosInfo = new EquipPosStrengthenInfo();
        /// <summary>
        /// 官印等级
        /// </summary>
        public uint OfficialSealLv;
        /// <summary>
        /// 官印经验
        /// </summary>
        public uint OfficialSealValue;
        /// <summary>
        /// 当前待召唤魂宠Group
        /// </summary>
        public int SoulPetGroup;
        /// <summary>
        /// 变身能量
        /// </summary>
        public uint ShapeShiftEnergy;
        /// <summary>
        /// 藏宝图幸运值
        /// </summary>
        public uint TreasureMapLucky;
        /// <summary>
        /// 当日藏宝图开启次数
        /// </summary>
        public uint OpenTMCount;
        /// <summary>
        /// 当前密文套装名号
        /// </summary>
        public uint CurCiphertext;
        /// <summary>
        /// 通天塔掉落层数
        /// </summary>
        public uint BabelDropLayer;
        /// <summary>
        /// 神器盒子等级
        /// </summary>
        public uint ArtifactBoxLv;
        /// <summary>
        /// 神器盒子经验值
        /// </summary>
        public uint ArtifactBoxValue;
        /// <summary>
        /// 转盘信息
        /// </summary>
        public List<TurntableInformation> TruntableInfos = new List<TurntableInformation>();
        /// <summary>
        /// 玩家境界信息
        /// </summary>
        public PlayerStateData StateData = new PlayerStateData();
        /// <summary>
        /// 打宝精灵信息
        /// </summary>
        public PlayerElvesData ElvesData = new PlayerElvesData();
        /// <summary>
        /// 玩家黑市刷新次数
        /// </summary>
        public uint BlackMarketTimes;
        /// <summary>
        /// 绑定钻石
        /// </summary>
        public uint BindIngots;
        /// <summary>
        /// 商店限购商品购买信息
        /// </summary>
        public string MarketBuyInfo;
        /// <summary>
        /// 帮会战旗等级
        /// </summary>
        public int GuildFlagLv;
        /// <summary>
        /// 兵骨养成信息
        /// </summary>
        public string SmelterBoneInfo;
        /// <summary>
        /// 剩余活跃值
        /// </summary>
        public uint Liveness;
        /// <summary>
        /// 签到轮次
        /// </summary>
        public uint SignInCircle;
        /// <summary>
        /// 总充值RMB数
        /// </summary>
        public uint AllRechargeRMB;
        /// <summary>
        /// 玩家五行系统信息
        /// </summary>
        public FiveElementsData FiveElementsInfo = new FiveElementsData();
        /// <summary>
        /// 当日充值RMB数
        /// </summary>
        public uint DailyRechargeRMB;
        /// <summary>
        /// 辅助设置
        /// </summary>
        public string AssistSetting;
        /// <summary>
        /// 回收设置
        /// </summary>
        public string RecycleSetting;
        /// <summary>
        /// 熔炉积分
        /// </summary>
        public uint SmelterIntegral;
        /// <summary>
        /// 
        /// </summary>
        public uint PlatformEntrance;
        /// <summary>
        /// 熔炼设置
        /// </summary>
        public string SmelterSetting;
        /// <summary>
        /// 图腾等级
        /// </summary>
        public uint TotemLv;
        /// <summary>
        /// 图腾经验
        /// </summary>
        public uint TotemExp;
        /// <summary>
        /// 是否已购买狂暴之力
        /// </summary>
        public bool RagePower;
        /// <summary>
        /// A类已触发TID
        /// </summary>
        public uint TimeLimitedATid;
        /// <summary>
        /// A类截至时间
        /// </summary>
        public uint TimeLimitedAEndTime;
        /// <summary>
        /// A已完成限时目标
        /// </summary>
        public uint TimeLimitedADone;
        /// <summary>
        /// B类已触发TID
        /// </summary>
        public uint TimeLimitedBTid;
        /// <summary>
        /// B类截至时间
        /// </summary>
        public uint TimeLimitedBEndTime;
        /// <summary>
        /// B已完成限时目标
        /// </summary>
        public uint TimeLimitedBDone;
        /// <summary>
        /// 十二宫当前通关层数
        /// </summary>
        public uint ZodiaceLayer;
        /// <summary>
        /// 圣十二宫当前通关层数
        /// </summary>
        public uint HolyZodiaceLayer;
        /// <summary>
        /// 沙城捐赠数量
        /// </summary>
        public uint ShachengDonationNum;
        /// <summary>
        /// 王者归来领取记录
        /// </summary>
        public string NewCompensateRecord;
        /// <summary>
        /// 经验炼制最后日期
        /// </summary>
        public uint ExpRefineDay;
        /// <summary>
        /// 经验炼制次数
        /// </summary>
        public uint ExpRefineNum;
        /// <summary>
        /// 被动技能开启记录
        /// </summary>
        public string OpenSkillStr;
        /// <summary>
        /// 押镖最后刷新日期
        /// </summary>
        public uint LastRefreshPatrolDate;
        /// <summary>
        /// 押镖最后刷新次数
        /// </summary>
        public uint LastRefreshPatrolNum;
        /// <summary>
        /// 签到下次重置时间
        /// </summary>
        public uint SignResetTime;
        /// <summary>
        /// 神石孔信息
        /// </summary>
        public string GemStoneHole;
        /// <summary>
        /// 宝玉装备位解锁
        /// </summary>
        public string JadeStoneUnlock;
        /// <summary>
        /// 注册时主区开服时间戳
        /// </summary>
        public uint ServerOpenSeconds;
        /// <summary>
        /// 时装信息
        /// </summary>
        public PlayerFashionData PlayerFashionInfo = new PlayerFashionData();
        /// <summary>
        /// 时装足迹ID
        /// </summary>
        public uint FashionFootMark;
        /// <summary>
        /// 头像框ID
        /// </summary>
        public uint HeadshotframeID;
        /// <summary>
        /// 头像框信息
        /// </summary>
        public string HeadshotframeInfo;
        /// <summary>
        /// 热血币
        /// </summary>
        public uint HotBlood;

        public override Packet Clone()
        {
            ResEnterGame004 pkg = new ResEnterGame004();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LogoutTime = LogoutTime;
            pkg.Career = Career;
            pkg.Sex = Sex;
            pkg.GoldCoins = GoldCoins;
            pkg.SilverCoins = SilverCoins;
            pkg.Ingots = Ingots;
            pkg.Gifts = Gifts;
            pkg.KingCoins = KingCoins;
            pkg.VIPLv = VIPLv;
            pkg.Lv = Lv;
            pkg.Exp = Exp;
            pkg.CurHP = CurHP;
            pkg.CurMP = CurMP;
            pkg.CurSP = CurSP;
            pkg.PKValue = PKValue;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.SPLv = SPLv;
            pkg.SPExp = SPExp;
            pkg.XuefuValue = XuefuValue;
            pkg.ShieldValue = ShieldValue;
            pkg.JewelValue = JewelValue;
            pkg.LifeStoneValue = LifeStoneValue;
            pkg.SevendaysSign = SevendaysSign;
            pkg.SignFlag = SignFlag;
            pkg.SignTimes = SignTimes;
            pkg.SignAwards = SignAwards;
            pkg.RetroactiveTimes = RetroactiveTimes;
            pkg.LoginDays = LoginDays;
            pkg.LastRefreshTime = LastRefreshTime;
            pkg.WeaponID = WeaponID;
            pkg.ClothesID = ClothesID;
            pkg.AchievementScore = AchievementScore;
            pkg.WingLevel = WingLevel;
            pkg.AttackState = AttackState;
            pkg.FightMode = FightMode;
            pkg.DefaultTitle = DefaultTitle;
            pkg.OpenGameDays = OpenGameDays;
            pkg.OfficialRank = OfficialRank;
            pkg.OfficialExp = OfficialExp;
            pkg.OnlineTimesDay = OnlineTimesDay;
            pkg.AllRecharge = AllRecharge;
            pkg.Camp = Camp;
            pkg.DailyPayNum = DailyPayNum;
            pkg.FirstPayNum = FirstPayNum;
            pkg.AdviceNum = AdviceNum;
            pkg.ChangeStateExpTime = ChangeStateExpTime;
            pkg.IsAutoTeam = IsAutoTeam;
            pkg.ClientType = ClientType;
            pkg.CurTaskID = CurTaskID;
            pkg.FirPigExp = FirPigExp;
            pkg.AllOffineTime = AllOffineTime;
            pkg.AllSendRedBagTime = AllSendRedBagTime;
            pkg.LastTakeRedBagTime = LastTakeRedBagTime;
            pkg.LastGetSystemCompensate = LastGetSystemCompensate;
            pkg.UnionGameDays = UnionGameDays;
            pkg.GMIngots = GMIngots;
            pkg.WingExp = WingExp;
            pkg.IsForbiddenLanguage = IsForbiddenLanguage;
            pkg.HonorValue = HonorValue;
            pkg.FashionClothesID = FashionClothesID;
            pkg.FashionWeaponID = FashionWeaponID;
            pkg.PhoneVerification = PhoneVerification;
            pkg.PlatformVIPInfo = PlatformVIPInfo;
            pkg.CurDayPayNum = CurDayPayNum;
            pkg.XuefuLv = XuefuLv;
            pkg.ShieldLv = ShieldLv;
            pkg.JewelLv = JewelLv;
            pkg.LifeStoneLv = LifeStoneLv;
            pkg.AchievementMedalLv = AchievementMedalLv;
            pkg.DailyPayTimes = DailyPayTimes;
            pkg.NickName = NickName;
            pkg.Account = Account;
            pkg.LogoutIP = LogoutIP;
            pkg.AwardComplete = AwardComplete;
            pkg.SkillListStr = SkillListStr;
            pkg.Hotkeys = Hotkeys;
            pkg.Title = Title;
            pkg.GetAwardCodeStr = GetAwardCodeStr;
            pkg.MusicSet = MusicSet;
            pkg.DailyTaskInfo = DailyTaskInfo;
            pkg.ServiceWarTakeItemInfo = ServiceWarTakeItemInfo;
            pkg.VIPAwardState = VIPAwardState;
            pkg.ItemGropDailyNum = ItemGropDailyNum;
            pkg.PersonBossInfo = PersonBossInfo;
            pkg.TaskInfo = TaskInfo;
            pkg.DungeonInfo = DungeonInfo;
            pkg.DailyPaySignInfo = DailyPaySignInfo;
            pkg.ContinuityRecharge = ContinuityRecharge;
            pkg.LegendSoulInfo = LegendSoulInfo;
            pkg.InvestmentStr = InvestmentStr;
            pkg.Signature = Signature;
            pkg.FashionInfo = FashionInfo;
            pkg.FirstSystemInfo = FirstSystemInfo;
            pkg.GrowthPlanInfo = GrowthPlanInfo;
            pkg.EffectInfo = EffectInfo;
            pkg.GMLv = GMLv;
            pkg.DailyEliteTaskInfo = DailyEliteTaskInfo;
            pkg.Fame = Fame;
            pkg.TreasureTaskInfo = TreasureTaskInfo;
            pkg.LivenessAwardInfo = LivenessAwardInfo;
            pkg.DoubleTakeExpJadeTimes = DoubleTakeExpJadeTimes;
            pkg.CumulativeOnLineTime = CumulativeOnLineTime;
            pkg.OpenAntiAddiction = OpenAntiAddiction;
            pkg.LastLExitGuildTime = LastLExitGuildTime;
            pkg.IsGetGuildAward = IsGetGuildAward;
            pkg.LimiteTaskStartTime = LimiteTaskStartTime;
            pkg.LimiteTaskStr = LimiteTaskStr;
            pkg.BaptizeValue = BaptizeValue;
            pkg.PlatfromVipTID = PlatfromVipTID;
            pkg.MicroClientDailyAward = MicroClientDailyAward;
            pkg.MicroClientLvAward = MicroClientLvAward;
            pkg.GuideInfo = GuideInfo;
            pkg.GetBackInfo = GetBackInfo;
            pkg.DailyNum = DailyNum;
            pkg.PrayInfo = PrayInfo;
            pkg.LivenessLvAwardInfo = LivenessLvAwardInfo;
            pkg.FixSoulValue = FixSoulValue;
            pkg.PatrolCityTaskInfo = PatrolCityTaskInfo;
            pkg.DoubleDungeonAward = DoubleDungeonAward;
            pkg.MagicDonateTimes = MagicDonateTimes;
            pkg.Prestige = Prestige;
            pkg.BabelLv = BabelLv;
            pkg.BabelAwardInfo = BabelAwardInfo;
            pkg.LegendMaxSoul = LegendMaxSoul;
            pkg.BabelTimes = BabelTimes;
            pkg.MapGuid = MapGuid;
            pkg.BagItemDropProbability = BagItemDropProbability;
            pkg.EquipItemDropProbability = EquipItemDropProbability;
            pkg.OldGuideInfo = OldGuideInfo;
            pkg.ComboSkillInfo = ComboSkillInfo;
            pkg.LianYuTime = LianYuTime;
            pkg.RecycleExpInfo = RecycleExpInfo;
            pkg.GuildMoney = GuildMoney;
            pkg.VipTime = VipTime;
            pkg.MaxTalentPoint = MaxTalentPoint;
            pkg.CurTalentPoint = CurTalentPoint;
            pkg.TalentInfo = TalentInfo;
            pkg.CurDayTakeRedBagTimes = CurDayTakeRedBagTimes;
            pkg.GuildTaskInfo = GuildTaskInfo;
            pkg.BabelRankAward = BabelRankAward;
            pkg.InnerDemonsInfo = InnerDemonsInfo;
            pkg.FreeBuyMaxStrengthTimes = FreeBuyMaxStrengthTimes;
            pkg.NationalTreasure = NationalTreasure;
            pkg.BrothersInfo = BrothersInfo;
            pkg.FreeShaiZiTimes = FreeShaiZiTimes;
            pkg.ShaiZiTimes = ShaiZiTimes;
            pkg.RedBagMoney = RedBagMoney;
            pkg.HeadSculpture = HeadSculpture;
            pkg.IsRank = IsRank;
            pkg.XueFuTaskInfo = XueFuTaskInfo;
            pkg.MountsID = MountsID;
            pkg.BabelFinishTime = BabelFinishTime;
            pkg.OpenDayOffLineExp = OpenDayOffLineExp;
            pkg.FirstPayTime = FirstPayTime;
            pkg.BagCanUnlockStartPos = BagCanUnlockStartPos;
            pkg.BagEndPos = BagEndPos;
            pkg.UnlockBagTime = UnlockBagTime;
            pkg.BagPosTimeUnlockCount = BagPosTimeUnlockCount;
            pkg.GemEquipBaptizeValue = GemEquipBaptizeValue;
            pkg.GemEquipLv = GemEquipLv;
            pkg.GemEquipExp = GemEquipExp;
            pkg.ExchangeGenExpTime = ExchangeGenExpTime;
            pkg.DwmBuyShopItem = DwmBuyShopItem;
            pkg.ScreenInfo = ScreenInfo;
            pkg.CurDayMoShaValue = CurDayMoShaValue;
            pkg.XinMoPaiQian = XinMoPaiQian;
            pkg.WingSkillInfo = WingSkillInfo;
            pkg.PlatformVIPAward = PlatformVIPAward;
            pkg.RealNameAward = RealNameAward;
            pkg.GMSetPlatformVIP = GMSetPlatformVIP;
            pkg.RecycleTaskInfo = RecycleTaskInfo;
            pkg.GuessInfo = GuessInfo;
            pkg.GuessTaskInfo = GuessTaskInfo;
            pkg.BreakLv = BreakLv;
            pkg.BreakValue = BreakValue;
            pkg.ChangeBreakValueTime = ChangeBreakValueTime;
            pkg.CollectInfo = CollectInfo;
            pkg.LongPoLv = LongPoLv;
            pkg.LongPoValue = LongPoValue;
            pkg.WolongTaskInfo = WolongTaskInfo;
            pkg.AdventureInfo = AdventureInfo;
            pkg.AdventureMapGuid = AdventureMapGuid;
            pkg.YYPlatformInfo = YYPlatformInfo;
            pkg.GMSetYYPlatformInfo = GMSetYYPlatformInfo;
            pkg.NewGifts = NewGifts;
            pkg.SacrificeInfo = SacrificeInfo;
            pkg.AttackSpeed = AttackSpeed;
            pkg.BubbleStoneId = BubbleStoneId;
            pkg.FreeBubble = FreeBubble;
            pkg.BubbleUp = BubbleUp;
            pkg.IsBubbleUp = IsBubbleUp;
            pkg.MulBubbleTime = MulBubbleTime;
            pkg.LimitTimeShopItem = LimitTimeShopItem;
            pkg.LGFTime = LGFTime;
            pkg.LGFLeftTime = LGFLeftTime;
            pkg.DASSRefreshTime = DASSRefreshTime;
            pkg.DailyActivitySignInfo = DailyActivitySignInfo;
            pkg.MarketRefreshTime = MarketRefreshTime;
            pkg.StoreHouseInfo = StoreHouseInfo;
            pkg.StrengthFailExtraRate = StrengthFailExtraRate;
            pkg.EquipPosInfo = EquipPosInfo.Clone() as EquipPosStrengthenInfo;
            pkg.OfficialSealLv = OfficialSealLv;
            pkg.OfficialSealValue = OfficialSealValue;
            pkg.SoulPetGroup = SoulPetGroup;
            pkg.ShapeShiftEnergy = ShapeShiftEnergy;
            pkg.TreasureMapLucky = TreasureMapLucky;
            pkg.OpenTMCount = OpenTMCount;
            pkg.CurCiphertext = CurCiphertext;
            pkg.BabelDropLayer = BabelDropLayer;
            pkg.ArtifactBoxLv = ArtifactBoxLv;
            pkg.ArtifactBoxValue = ArtifactBoxValue;
            foreach (TurntableInformation item in TruntableInfos)
            {
                pkg.TruntableInfos.Add(item.Clone() as TurntableInformation);
            }
            pkg.StateData = StateData.Clone() as PlayerStateData;
            pkg.ElvesData = ElvesData.Clone() as PlayerElvesData;
            pkg.BlackMarketTimes = BlackMarketTimes;
            pkg.BindIngots = BindIngots;
            pkg.MarketBuyInfo = MarketBuyInfo;
            pkg.GuildFlagLv = GuildFlagLv;
            pkg.SmelterBoneInfo = SmelterBoneInfo;
            pkg.Liveness = Liveness;
            pkg.SignInCircle = SignInCircle;
            pkg.AllRechargeRMB = AllRechargeRMB;
            pkg.FiveElementsInfo = FiveElementsInfo.Clone() as FiveElementsData;
            pkg.DailyRechargeRMB = DailyRechargeRMB;
            pkg.AssistSetting = AssistSetting;
            pkg.RecycleSetting = RecycleSetting;
            pkg.SmelterIntegral = SmelterIntegral;
            pkg.PlatformEntrance = PlatformEntrance;
            pkg.SmelterSetting = SmelterSetting;
            pkg.TotemLv = TotemLv;
            pkg.TotemExp = TotemExp;
            pkg.RagePower = RagePower;
            pkg.TimeLimitedATid = TimeLimitedATid;
            pkg.TimeLimitedAEndTime = TimeLimitedAEndTime;
            pkg.TimeLimitedADone = TimeLimitedADone;
            pkg.TimeLimitedBTid = TimeLimitedBTid;
            pkg.TimeLimitedBEndTime = TimeLimitedBEndTime;
            pkg.TimeLimitedBDone = TimeLimitedBDone;
            pkg.ZodiaceLayer = ZodiaceLayer;
            pkg.HolyZodiaceLayer = HolyZodiaceLayer;
            pkg.ShachengDonationNum = ShachengDonationNum;
            pkg.NewCompensateRecord = NewCompensateRecord;
            pkg.ExpRefineDay = ExpRefineDay;
            pkg.ExpRefineNum = ExpRefineNum;
            pkg.OpenSkillStr = OpenSkillStr;
            pkg.LastRefreshPatrolDate = LastRefreshPatrolDate;
            pkg.LastRefreshPatrolNum = LastRefreshPatrolNum;
            pkg.SignResetTime = SignResetTime;
            pkg.GemStoneHole = GemStoneHole;
            pkg.JadeStoneUnlock = JadeStoneUnlock;
            pkg.ServerOpenSeconds = ServerOpenSeconds;
            pkg.PlayerFashionInfo = PlayerFashionInfo.Clone() as PlayerFashionData;
            pkg.FashionFootMark = FashionFootMark;
            pkg.HeadshotframeID = HeadshotframeID;
            pkg.HeadshotframeInfo = HeadshotframeInfo;
            pkg.HotBlood = HotBlood;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(LogoutTime);
                oByteArray.WriteByte(Career);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteUInt(GoldCoins);
                oByteArray.WriteUInt(SilverCoins);
                oByteArray.WriteUInt(Ingots);
                oByteArray.WriteUInt(Gifts);
                oByteArray.WriteUInt(KingCoins);
                oByteArray.WriteByte(VIPLv);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteInt64(Exp);
                oByteArray.WriteUInt(CurHP);
                oByteArray.WriteUInt(CurMP);
                oByteArray.WriteUInt(CurSP);
                oByteArray.WriteUInt(PKValue);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(SPLv);
                oByteArray.WriteUInt(SPExp);
                oByteArray.WriteUInt(XuefuValue);
                oByteArray.WriteUInt(ShieldValue);
                oByteArray.WriteUInt(JewelValue);
                oByteArray.WriteUInt(LifeStoneValue);
                oByteArray.WriteUInt(SevendaysSign);
                oByteArray.WriteUInt(SignFlag);
                oByteArray.WriteUInt(SignTimes);
                oByteArray.WriteUInt(SignAwards);
                oByteArray.WriteUInt(RetroactiveTimes);
                oByteArray.WriteUInt(LoginDays);
                oByteArray.WriteUInt(LastRefreshTime);
                oByteArray.WriteUInt(WeaponID);
                oByteArray.WriteUInt(ClothesID);
                oByteArray.WriteUInt(AchievementScore);
                oByteArray.WriteUInt(WingLevel);
                oByteArray.WriteUInt(AttackState);
                oByteArray.WriteByte(FightMode);
                oByteArray.WriteUInt(DefaultTitle);
                oByteArray.WriteUInt(OpenGameDays);
                oByteArray.WriteUInt(OfficialRank);
                oByteArray.WriteUInt(OfficialExp);
                oByteArray.WriteUInt(OnlineTimesDay);
                oByteArray.WriteUInt(AllRecharge);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt(DailyPayNum);
                oByteArray.WriteUInt(FirstPayNum);
                oByteArray.WriteUInt(AdviceNum);
                oByteArray.WriteUInt(ChangeStateExpTime);
                oByteArray.WriteByte(IsAutoTeam);
                oByteArray.WriteUInt(ClientType);
                oByteArray.WriteUInt(CurTaskID);
                oByteArray.WriteUInt(FirPigExp);
                oByteArray.WriteUInt(AllOffineTime);
                oByteArray.WriteUInt(AllSendRedBagTime);
                oByteArray.WriteUInt(LastTakeRedBagTime);
                oByteArray.WriteInt(LastGetSystemCompensate);
                oByteArray.WriteUInt(UnionGameDays);
                oByteArray.WriteUInt(GMIngots);
                oByteArray.WriteUInt(WingExp);
                oByteArray.WriteUInt(IsForbiddenLanguage);
                oByteArray.WriteUInt(HonorValue);
                oByteArray.WriteUInt(FashionClothesID);
                oByteArray.WriteUInt(FashionWeaponID);
                oByteArray.WriteUInt(PhoneVerification);
                oByteArray.WriteUTF(PlatformVIPInfo);
                oByteArray.WriteUInt(CurDayPayNum);
                oByteArray.WriteUInt(XuefuLv);
                oByteArray.WriteUInt(ShieldLv);
                oByteArray.WriteUInt(JewelLv);
                oByteArray.WriteUInt(LifeStoneLv);
                oByteArray.WriteUInt(AchievementMedalLv);
                oByteArray.WriteUInt(DailyPayTimes);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUTF(Account);
                oByteArray.WriteUTF(LogoutIP);
                oByteArray.WriteUTF(AwardComplete);
                oByteArray.WriteUTF(SkillListStr);
                oByteArray.WriteUTF(Hotkeys);
                oByteArray.WriteUTF(Title);
                oByteArray.WriteUTF(GetAwardCodeStr);
                oByteArray.WriteUTF(MusicSet);
                oByteArray.WriteUTF(DailyTaskInfo);
                oByteArray.WriteUTF(ServiceWarTakeItemInfo);
                oByteArray.WriteUTF(VIPAwardState);
                oByteArray.WriteUTF(ItemGropDailyNum);
                oByteArray.WriteUTF(PersonBossInfo);
                oByteArray.WriteUTF(TaskInfo);
                oByteArray.WriteUTF(DungeonInfo);
                oByteArray.WriteUTF(DailyPaySignInfo);
                oByteArray.WriteUTF(ContinuityRecharge);
                oByteArray.WriteUTF(LegendSoulInfo);
                oByteArray.WriteUTF(InvestmentStr);
                oByteArray.WriteUTF(Signature);
                oByteArray.WriteUTF(FashionInfo);
                oByteArray.WriteUTF(FirstSystemInfo);
                oByteArray.WriteUTF(GrowthPlanInfo);
                oByteArray.WriteUTF(EffectInfo);
                oByteArray.WriteInt(GMLv);
                oByteArray.WriteUTF(DailyEliteTaskInfo);
                oByteArray.WriteUInt(Fame);
                oByteArray.WriteInt(TreasureTaskInfo);
                oByteArray.WriteUTF(LivenessAwardInfo);
                oByteArray.WriteUInt(DoubleTakeExpJadeTimes);
                oByteArray.WriteUInt(CumulativeOnLineTime);
                oByteArray.WriteUInt(OpenAntiAddiction);
                oByteArray.WriteUInt(LastLExitGuildTime);
                oByteArray.WriteByte(IsGetGuildAward);
                oByteArray.WriteUInt(LimiteTaskStartTime);
                oByteArray.WriteUTF(LimiteTaskStr);
                oByteArray.WriteUInt(BaptizeValue);
                oByteArray.WriteUInt(PlatfromVipTID);
                oByteArray.WriteUInt(MicroClientDailyAward);
                oByteArray.WriteUTF(MicroClientLvAward);
                oByteArray.WriteUTF(GuideInfo);
                oByteArray.WriteUTF(GetBackInfo);
                oByteArray.WriteUTF(DailyNum);
                oByteArray.WriteUTF(PrayInfo);
                oByteArray.WriteUTF(LivenessLvAwardInfo);
                oByteArray.WriteUInt(FixSoulValue);
                oByteArray.WriteUTF(PatrolCityTaskInfo);
                oByteArray.WriteUTF(DoubleDungeonAward);
                oByteArray.WriteInt(MagicDonateTimes);
                oByteArray.WriteInt(Prestige);
                oByteArray.WriteUInt(BabelLv);
                oByteArray.WriteUTF(BabelAwardInfo);
                oByteArray.WriteUInt(LegendMaxSoul);
                oByteArray.WriteUInt(BabelTimes);
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteInt(BagItemDropProbability);
                oByteArray.WriteInt(EquipItemDropProbability);
                oByteArray.WriteUTF(OldGuideInfo);
                oByteArray.WriteUTF(ComboSkillInfo);
                oByteArray.WriteInt(LianYuTime);
                oByteArray.WriteUTF(RecycleExpInfo);
                oByteArray.WriteInt(GuildMoney);
                oByteArray.WriteUInt(VipTime);
                oByteArray.WriteUInt(MaxTalentPoint);
                oByteArray.WriteUInt(CurTalentPoint);
                oByteArray.WriteUTF(TalentInfo);
                oByteArray.WriteUInt(CurDayTakeRedBagTimes);
                oByteArray.WriteUTF(GuildTaskInfo);
                oByteArray.WriteUTF(BabelRankAward);
                oByteArray.WriteUTF(InnerDemonsInfo);
                oByteArray.WriteByte(FreeBuyMaxStrengthTimes);
                oByteArray.WriteUTF(NationalTreasure);
                oByteArray.WriteUTF(BrothersInfo);
                oByteArray.WriteInt(FreeShaiZiTimes);
                oByteArray.WriteInt(ShaiZiTimes);
                oByteArray.WriteInt(RedBagMoney);
                oByteArray.WriteUTF(HeadSculpture);
                oByteArray.WriteInt(IsRank);
                oByteArray.WriteUTF(XueFuTaskInfo);
                oByteArray.WriteUInt(MountsID);
                oByteArray.WriteUInt(BabelFinishTime);
                oByteArray.WriteUInt(OpenDayOffLineExp);
                oByteArray.WriteUInt(FirstPayTime);
                oByteArray.WriteUInt(BagCanUnlockStartPos);
                oByteArray.WriteUInt(BagEndPos);
                oByteArray.WriteUInt(UnlockBagTime);
                oByteArray.WriteUInt(BagPosTimeUnlockCount);
                oByteArray.WriteUInt(GemEquipBaptizeValue);
                oByteArray.WriteInt(GemEquipLv);
                oByteArray.WriteInt(GemEquipExp);
                oByteArray.WriteInt(ExchangeGenExpTime);
                oByteArray.WriteUTF(DwmBuyShopItem);
                oByteArray.WriteUTF(ScreenInfo);
                oByteArray.WriteUInt(CurDayMoShaValue);
                oByteArray.WriteUTF(XinMoPaiQian);
                oByteArray.WriteUTF(WingSkillInfo);
                oByteArray.WriteUTF(PlatformVIPAward);
                oByteArray.WriteUInt(RealNameAward);
                oByteArray.WriteUTF(GMSetPlatformVIP);
                oByteArray.WriteUTF(RecycleTaskInfo);
                oByteArray.WriteUTF(GuessInfo);
                oByteArray.WriteUTF(GuessTaskInfo);
                oByteArray.WriteUInt(BreakLv);
                oByteArray.WriteUInt(BreakValue);
                oByteArray.WriteUInt(ChangeBreakValueTime);
                oByteArray.WriteUTF(CollectInfo);
                oByteArray.WriteUInt(LongPoLv);
                oByteArray.WriteUInt(LongPoValue);
                oByteArray.WriteUTF(WolongTaskInfo);
                oByteArray.WriteUTF(AdventureInfo);
                oByteArray.WriteUInt(AdventureMapGuid);
                oByteArray.WriteUTF(YYPlatformInfo);
                oByteArray.WriteUTF(GMSetYYPlatformInfo);
                oByteArray.WriteUInt(NewGifts);
                oByteArray.WriteUTF(SacrificeInfo);
                oByteArray.WriteUInt(AttackSpeed);
                oByteArray.WriteInt(BubbleStoneId);
                oByteArray.WriteInt(FreeBubble);
                oByteArray.WriteInt(BubbleUp);
                oByteArray.WriteInt(IsBubbleUp);
                oByteArray.WriteInt(MulBubbleTime);
                oByteArray.WriteUTF(LimitTimeShopItem);
                oByteArray.WriteInt(LGFTime);
                oByteArray.WriteUInt(LGFLeftTime);
                oByteArray.WriteInt(DASSRefreshTime);
                oByteArray.WriteUTF(DailyActivitySignInfo);
                oByteArray.WriteUTF(MarketRefreshTime);
                oByteArray.WriteUTF(StoreHouseInfo);
                oByteArray.WriteInt(StrengthFailExtraRate);
                EquipPosInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(OfficialSealLv);
                oByteArray.WriteUInt(OfficialSealValue);
                oByteArray.WriteInt(SoulPetGroup);
                oByteArray.WriteUInt(ShapeShiftEnergy);
                oByteArray.WriteUInt(TreasureMapLucky);
                oByteArray.WriteUInt(OpenTMCount);
                oByteArray.WriteUInt(CurCiphertext);
                oByteArray.WriteUInt(BabelDropLayer);
                oByteArray.WriteUInt(ArtifactBoxLv);
                oByteArray.WriteUInt(ArtifactBoxValue);
                oByteArray.WriteUShort((ushort)TruntableInfos.Count);
                for (int i = 0; i < TruntableInfos.Count; i++)
                {
                    TruntableInfos[i].Serializtion(oByteArray, bSerialize);
                }
                StateData.Serializtion(oByteArray, bSerialize);
                ElvesData.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(BlackMarketTimes);
                oByteArray.WriteUInt(BindIngots);
                oByteArray.WriteUTF(MarketBuyInfo);
                oByteArray.WriteInt(GuildFlagLv);
                oByteArray.WriteUTF(SmelterBoneInfo);
                oByteArray.WriteUInt(Liveness);
                oByteArray.WriteUInt(SignInCircle);
                oByteArray.WriteUInt(AllRechargeRMB);
                FiveElementsInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(DailyRechargeRMB);
                oByteArray.WriteUTF(AssistSetting);
                oByteArray.WriteUTF(RecycleSetting);
                oByteArray.WriteUInt(SmelterIntegral);
                oByteArray.WriteUInt(PlatformEntrance);
                oByteArray.WriteUTF(SmelterSetting);
                oByteArray.WriteUInt(TotemLv);
                oByteArray.WriteUInt(TotemExp);
                oByteArray.WriteBoolean(RagePower);
                oByteArray.WriteUInt(TimeLimitedATid);
                oByteArray.WriteUInt(TimeLimitedAEndTime);
                oByteArray.WriteUInt(TimeLimitedADone);
                oByteArray.WriteUInt(TimeLimitedBTid);
                oByteArray.WriteUInt(TimeLimitedBEndTime);
                oByteArray.WriteUInt(TimeLimitedBDone);
                oByteArray.WriteUInt(ZodiaceLayer);
                oByteArray.WriteUInt(HolyZodiaceLayer);
                oByteArray.WriteUInt(ShachengDonationNum);
                oByteArray.WriteUTF(NewCompensateRecord);
                oByteArray.WriteUInt(ExpRefineDay);
                oByteArray.WriteUInt(ExpRefineNum);
                oByteArray.WriteUTF(OpenSkillStr);
                oByteArray.WriteUInt(LastRefreshPatrolDate);
                oByteArray.WriteUInt(LastRefreshPatrolNum);
                oByteArray.WriteUInt(SignResetTime);
                oByteArray.WriteUTF(GemStoneHole);
                oByteArray.WriteUTF(JadeStoneUnlock);
                oByteArray.WriteUInt(ServerOpenSeconds);
                PlayerFashionInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(FashionFootMark);
                oByteArray.WriteUInt(HeadshotframeID);
                oByteArray.WriteUTF(HeadshotframeInfo);
                oByteArray.WriteUInt(HotBlood);
            }
            else
            {
                LogoutTime = oByteArray.ReadUInt();
                Career = oByteArray.ReadByte();
                Sex = oByteArray.ReadByte();
                GoldCoins = oByteArray.ReadUInt();
                SilverCoins = oByteArray.ReadUInt();
                Ingots = oByteArray.ReadUInt();
                Gifts = oByteArray.ReadUInt();
                KingCoins = oByteArray.ReadUInt();
                VIPLv = oByteArray.ReadByte();
                Lv = oByteArray.ReadUInt();
                Exp = oByteArray.ReadInt64();
                CurHP = oByteArray.ReadUInt();
                CurMP = oByteArray.ReadUInt();
                CurSP = oByteArray.ReadUInt();
                PKValue = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                SPLv = oByteArray.ReadUInt();
                SPExp = oByteArray.ReadUInt();
                XuefuValue = oByteArray.ReadUInt();
                ShieldValue = oByteArray.ReadUInt();
                JewelValue = oByteArray.ReadUInt();
                LifeStoneValue = oByteArray.ReadUInt();
                SevendaysSign = oByteArray.ReadUInt();
                SignFlag = oByteArray.ReadUInt();
                SignTimes = oByteArray.ReadUInt();
                SignAwards = oByteArray.ReadUInt();
                RetroactiveTimes = oByteArray.ReadUInt();
                LoginDays = oByteArray.ReadUInt();
                LastRefreshTime = oByteArray.ReadUInt();
                WeaponID = oByteArray.ReadUInt();
                ClothesID = oByteArray.ReadUInt();
                AchievementScore = oByteArray.ReadUInt();
                WingLevel = oByteArray.ReadUInt();
                AttackState = oByteArray.ReadUInt();
                FightMode = oByteArray.ReadByte();
                DefaultTitle = oByteArray.ReadUInt();
                OpenGameDays = oByteArray.ReadUInt();
                OfficialRank = oByteArray.ReadUInt();
                OfficialExp = oByteArray.ReadUInt();
                OnlineTimesDay = oByteArray.ReadUInt();
                AllRecharge = oByteArray.ReadUInt();
                Camp = oByteArray.ReadUInt();
                DailyPayNum = oByteArray.ReadUInt();
                FirstPayNum = oByteArray.ReadUInt();
                AdviceNum = oByteArray.ReadUInt();
                ChangeStateExpTime = oByteArray.ReadUInt();
                IsAutoTeam = oByteArray.ReadByte();
                ClientType = oByteArray.ReadUInt();
                CurTaskID = oByteArray.ReadUInt();
                FirPigExp = oByteArray.ReadUInt();
                AllOffineTime = oByteArray.ReadUInt();
                AllSendRedBagTime = oByteArray.ReadUInt();
                LastTakeRedBagTime = oByteArray.ReadUInt();
                LastGetSystemCompensate = oByteArray.ReadInt();
                UnionGameDays = oByteArray.ReadUInt();
                GMIngots = oByteArray.ReadUInt();
                WingExp = oByteArray.ReadUInt();
                IsForbiddenLanguage = oByteArray.ReadUInt();
                HonorValue = oByteArray.ReadUInt();
                FashionClothesID = oByteArray.ReadUInt();
                FashionWeaponID = oByteArray.ReadUInt();
                PhoneVerification = oByteArray.ReadUInt();
                PlatformVIPInfo = oByteArray.ReadUTF();
                CurDayPayNum = oByteArray.ReadUInt();
                XuefuLv = oByteArray.ReadUInt();
                ShieldLv = oByteArray.ReadUInt();
                JewelLv = oByteArray.ReadUInt();
                LifeStoneLv = oByteArray.ReadUInt();
                AchievementMedalLv = oByteArray.ReadUInt();
                DailyPayTimes = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                Account = oByteArray.ReadUTF();
                LogoutIP = oByteArray.ReadUTF();
                AwardComplete = oByteArray.ReadUTF();
                SkillListStr = oByteArray.ReadUTF();
                Hotkeys = oByteArray.ReadUTF();
                Title = oByteArray.ReadUTF();
                GetAwardCodeStr = oByteArray.ReadUTF();
                MusicSet = oByteArray.ReadUTF();
                DailyTaskInfo = oByteArray.ReadUTF();
                ServiceWarTakeItemInfo = oByteArray.ReadUTF();
                VIPAwardState = oByteArray.ReadUTF();
                ItemGropDailyNum = oByteArray.ReadUTF();
                PersonBossInfo = oByteArray.ReadUTF();
                TaskInfo = oByteArray.ReadUTF();
                DungeonInfo = oByteArray.ReadUTF();
                DailyPaySignInfo = oByteArray.ReadUTF();
                ContinuityRecharge = oByteArray.ReadUTF();
                LegendSoulInfo = oByteArray.ReadUTF();
                InvestmentStr = oByteArray.ReadUTF();
                Signature = oByteArray.ReadUTF();
                FashionInfo = oByteArray.ReadUTF();
                FirstSystemInfo = oByteArray.ReadUTF();
                GrowthPlanInfo = oByteArray.ReadUTF();
                EffectInfo = oByteArray.ReadUTF();
                GMLv = oByteArray.ReadInt();
                DailyEliteTaskInfo = oByteArray.ReadUTF();
                Fame = oByteArray.ReadUInt();
                TreasureTaskInfo = oByteArray.ReadInt();
                LivenessAwardInfo = oByteArray.ReadUTF();
                DoubleTakeExpJadeTimes = oByteArray.ReadUInt();
                CumulativeOnLineTime = oByteArray.ReadUInt();
                OpenAntiAddiction = oByteArray.ReadUInt();
                LastLExitGuildTime = oByteArray.ReadUInt();
                IsGetGuildAward = oByteArray.ReadByte();
                LimiteTaskStartTime = oByteArray.ReadUInt();
                LimiteTaskStr = oByteArray.ReadUTF();
                BaptizeValue = oByteArray.ReadUInt();
                PlatfromVipTID = oByteArray.ReadUInt();
                MicroClientDailyAward = oByteArray.ReadUInt();
                MicroClientLvAward = oByteArray.ReadUTF();
                GuideInfo = oByteArray.ReadUTF();
                GetBackInfo = oByteArray.ReadUTF();
                DailyNum = oByteArray.ReadUTF();
                PrayInfo = oByteArray.ReadUTF();
                LivenessLvAwardInfo = oByteArray.ReadUTF();
                FixSoulValue = oByteArray.ReadUInt();
                PatrolCityTaskInfo = oByteArray.ReadUTF();
                DoubleDungeonAward = oByteArray.ReadUTF();
                MagicDonateTimes = oByteArray.ReadInt();
                Prestige = oByteArray.ReadInt();
                BabelLv = oByteArray.ReadUInt();
                BabelAwardInfo = oByteArray.ReadUTF();
                LegendMaxSoul = oByteArray.ReadUInt();
                BabelTimes = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
                BagItemDropProbability = oByteArray.ReadInt();
                EquipItemDropProbability = oByteArray.ReadInt();
                OldGuideInfo = oByteArray.ReadUTF();
                ComboSkillInfo = oByteArray.ReadUTF();
                LianYuTime = oByteArray.ReadInt();
                RecycleExpInfo = oByteArray.ReadUTF();
                GuildMoney = oByteArray.ReadInt();
                VipTime = oByteArray.ReadUInt();
                MaxTalentPoint = oByteArray.ReadUInt();
                CurTalentPoint = oByteArray.ReadUInt();
                TalentInfo = oByteArray.ReadUTF();
                CurDayTakeRedBagTimes = oByteArray.ReadUInt();
                GuildTaskInfo = oByteArray.ReadUTF();
                BabelRankAward = oByteArray.ReadUTF();
                InnerDemonsInfo = oByteArray.ReadUTF();
                FreeBuyMaxStrengthTimes = oByteArray.ReadByte();
                NationalTreasure = oByteArray.ReadUTF();
                BrothersInfo = oByteArray.ReadUTF();
                FreeShaiZiTimes = oByteArray.ReadInt();
                ShaiZiTimes = oByteArray.ReadInt();
                RedBagMoney = oByteArray.ReadInt();
                HeadSculpture = oByteArray.ReadUTF();
                IsRank = oByteArray.ReadInt();
                XueFuTaskInfo = oByteArray.ReadUTF();
                MountsID = oByteArray.ReadUInt();
                BabelFinishTime = oByteArray.ReadUInt();
                OpenDayOffLineExp = oByteArray.ReadUInt();
                FirstPayTime = oByteArray.ReadUInt();
                BagCanUnlockStartPos = oByteArray.ReadUInt();
                BagEndPos = oByteArray.ReadUInt();
                UnlockBagTime = oByteArray.ReadUInt();
                BagPosTimeUnlockCount = oByteArray.ReadUInt();
                GemEquipBaptizeValue = oByteArray.ReadUInt();
                GemEquipLv = oByteArray.ReadInt();
                GemEquipExp = oByteArray.ReadInt();
                ExchangeGenExpTime = oByteArray.ReadInt();
                DwmBuyShopItem = oByteArray.ReadUTF();
                ScreenInfo = oByteArray.ReadUTF();
                CurDayMoShaValue = oByteArray.ReadUInt();
                XinMoPaiQian = oByteArray.ReadUTF();
                WingSkillInfo = oByteArray.ReadUTF();
                PlatformVIPAward = oByteArray.ReadUTF();
                RealNameAward = oByteArray.ReadUInt();
                GMSetPlatformVIP = oByteArray.ReadUTF();
                RecycleTaskInfo = oByteArray.ReadUTF();
                GuessInfo = oByteArray.ReadUTF();
                GuessTaskInfo = oByteArray.ReadUTF();
                BreakLv = oByteArray.ReadUInt();
                BreakValue = oByteArray.ReadUInt();
                ChangeBreakValueTime = oByteArray.ReadUInt();
                CollectInfo = oByteArray.ReadUTF();
                LongPoLv = oByteArray.ReadUInt();
                LongPoValue = oByteArray.ReadUInt();
                WolongTaskInfo = oByteArray.ReadUTF();
                AdventureInfo = oByteArray.ReadUTF();
                AdventureMapGuid = oByteArray.ReadUInt();
                YYPlatformInfo = oByteArray.ReadUTF();
                GMSetYYPlatformInfo = oByteArray.ReadUTF();
                NewGifts = oByteArray.ReadUInt();
                SacrificeInfo = oByteArray.ReadUTF();
                AttackSpeed = oByteArray.ReadUInt();
                BubbleStoneId = oByteArray.ReadInt();
                FreeBubble = oByteArray.ReadInt();
                BubbleUp = oByteArray.ReadInt();
                IsBubbleUp = oByteArray.ReadInt();
                MulBubbleTime = oByteArray.ReadInt();
                LimitTimeShopItem = oByteArray.ReadUTF();
                LGFTime = oByteArray.ReadInt();
                LGFLeftTime = oByteArray.ReadUInt();
                DASSRefreshTime = oByteArray.ReadInt();
                DailyActivitySignInfo = oByteArray.ReadUTF();
                MarketRefreshTime = oByteArray.ReadUTF();
                StoreHouseInfo = oByteArray.ReadUTF();
                StrengthFailExtraRate = oByteArray.ReadInt();
                EquipPosInfo.Serializtion(oByteArray, bSerialize);
                OfficialSealLv = oByteArray.ReadUInt();
                OfficialSealValue = oByteArray.ReadUInt();
                SoulPetGroup = oByteArray.ReadInt();
                ShapeShiftEnergy = oByteArray.ReadUInt();
                TreasureMapLucky = oByteArray.ReadUInt();
                OpenTMCount = oByteArray.ReadUInt();
                CurCiphertext = oByteArray.ReadUInt();
                BabelDropLayer = oByteArray.ReadUInt();
                ArtifactBoxLv = oByteArray.ReadUInt();
                ArtifactBoxValue = oByteArray.ReadUInt();
                int TruntableInfosCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TruntableInfosCount; i++)
                {
                    TurntableInformation obj = new TurntableInformation();
                    obj.Serializtion(oByteArray, bSerialize);
                    TruntableInfos.Add(obj);
                }
                StateData.Serializtion(oByteArray, bSerialize);
                ElvesData.Serializtion(oByteArray, bSerialize);
                BlackMarketTimes = oByteArray.ReadUInt();
                BindIngots = oByteArray.ReadUInt();
                MarketBuyInfo = oByteArray.ReadUTF();
                GuildFlagLv = oByteArray.ReadInt();
                SmelterBoneInfo = oByteArray.ReadUTF();
                Liveness = oByteArray.ReadUInt();
                SignInCircle = oByteArray.ReadUInt();
                AllRechargeRMB = oByteArray.ReadUInt();
                FiveElementsInfo.Serializtion(oByteArray, bSerialize);
                DailyRechargeRMB = oByteArray.ReadUInt();
                AssistSetting = oByteArray.ReadUTF();
                RecycleSetting = oByteArray.ReadUTF();
                SmelterIntegral = oByteArray.ReadUInt();
                PlatformEntrance = oByteArray.ReadUInt();
                SmelterSetting = oByteArray.ReadUTF();
                TotemLv = oByteArray.ReadUInt();
                TotemExp = oByteArray.ReadUInt();
                RagePower = oByteArray.ReadBoolean();
                TimeLimitedATid = oByteArray.ReadUInt();
                TimeLimitedAEndTime = oByteArray.ReadUInt();
                TimeLimitedADone = oByteArray.ReadUInt();
                TimeLimitedBTid = oByteArray.ReadUInt();
                TimeLimitedBEndTime = oByteArray.ReadUInt();
                TimeLimitedBDone = oByteArray.ReadUInt();
                ZodiaceLayer = oByteArray.ReadUInt();
                HolyZodiaceLayer = oByteArray.ReadUInt();
                ShachengDonationNum = oByteArray.ReadUInt();
                NewCompensateRecord = oByteArray.ReadUTF();
                ExpRefineDay = oByteArray.ReadUInt();
                ExpRefineNum = oByteArray.ReadUInt();
                OpenSkillStr = oByteArray.ReadUTF();
                LastRefreshPatrolDate = oByteArray.ReadUInt();
                LastRefreshPatrolNum = oByteArray.ReadUInt();
                SignResetTime = oByteArray.ReadUInt();
                GemStoneHole = oByteArray.ReadUTF();
                JadeStoneUnlock = oByteArray.ReadUTF();
                ServerOpenSeconds = oByteArray.ReadUInt();
                PlayerFashionInfo.Serializtion(oByteArray, bSerialize);
                FashionFootMark = oByteArray.ReadUInt();
                HeadshotframeID = oByteArray.ReadUInt();
                HeadshotframeInfo = oByteArray.ReadUTF();
                HotBlood = oByteArray.ReadUInt();
            }
        }
		public ResEnterGame004()
		{
			PacketID = 240;
		}
    }

    /// <summary>
    ///  [响应类] 第4步：从缓存服务器发送角色基本信息 创建者
    /// </summary>
    [Package(240)]
    public partial class ResEnterGame004Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterGame004();
        }
    }


    /// <summary>
    ///  [请求类]第6步：从缓存服发送玩家物品数据
    /// </summary>
    public partial class ReqEnterGame006: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterGame006 pkg = new ReqEnterGame006();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterGame006()
		{
			PacketID = 241;
		}
    }

    /// <summary>
    ///  [请求类] 第6步：从缓存服发送玩家物品数据 创建者
    /// </summary>
    [Package(241)]
    public partial class ReqEnterGame006Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterGame006();
        }
    }


    /// <summary>
    ///  [响应类]第6步：从缓存服发送玩家物品数据
    /// </summary>
    public partial class ResEnterGame006: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<GameItemInfo> ItemVec = new List<GameItemInfo>();

        public override Packet Clone()
        {
            ResEnterGame006 pkg = new ResEnterGame006();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GameItemInfo item in ItemVec)
            {
                pkg.ItemVec.Add(item.Clone() as GameItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ItemVec.Count);
                for (int i = 0; i < ItemVec.Count; i++)
                {
                    ItemVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ItemVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemVecCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemVec.Add(obj);
                }
            }
        }
		public ResEnterGame006()
		{
			PacketID = 242;
		}
    }

    /// <summary>
    ///  [响应类] 第6步：从缓存服发送玩家物品数据 创建者
    /// </summary>
    [Package(242)]
    public partial class ResEnterGame006Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterGame006();
        }
    }


    /// <summary>
    ///  [请求类]物品变更通知(客户端提示)
    /// </summary>
    public partial class ReqItemAlterNotify: Packet 
    {

        public override Packet Clone()
        {
            ReqItemAlterNotify pkg = new ReqItemAlterNotify();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqItemAlterNotify()
		{
			PacketID = 243;
		}
    }

    /// <summary>
    ///  [请求类] 物品变更通知(客户端提示) 创建者
    /// </summary>
    [Package(243)]
    public partial class ReqItemAlterNotifyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqItemAlterNotify();
        }
    }


    /// <summary>
    ///  [响应类]物品变更通知(客户端提示)
    /// </summary>
    public partial class ResItemAlterNotify: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 物品变更数量，>0增加物品，<0减少物品
        /// </summary>
        public int Num;

        public override Packet Clone()
        {
            ResItemAlterNotify pkg = new ResItemAlterNotify();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteInt(Num);
            }
            else
            {
                ItemID = oByteArray.ReadUInt();
                Num = oByteArray.ReadInt();
            }
        }
		public ResItemAlterNotify()
		{
			PacketID = 244;
		}
    }

    /// <summary>
    ///  [响应类] 物品变更通知(客户端提示) 创建者
    /// </summary>
    [Package(244)]
    public partial class ResItemAlterNotifyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResItemAlterNotify();
        }
    }


    /// <summary>
    ///  [请求类]第1步：通过网关发送进入地图数据包
    /// </summary>
    public partial class ReqEnterMap001: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 是否随机
        /// </summary>
        public bool Random;
        /// <summary>
        /// 坐标X
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 坐标Y
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 0普通传送;1任务传送;2副本传送;3登录传送;
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public uint WorldPort;
        /// <summary>
        /// 
        /// </summary>
        public uint MapGuid;

        public override Packet Clone()
        {
            ReqEnterMap001 pkg = new ReqEnterMap001();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.Random = Random;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Type = Type;
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteBoolean(Random);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
                oByteArray.WriteUInt(MapGuid);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                Random = oByteArray.ReadBoolean();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
            }
        }
		public ReqEnterMap001()
		{
			PacketID = 245;
		}
    }

    /// <summary>
    ///  [请求类] 第1步：通过网关发送进入地图数据包 创建者
    /// </summary>
    [Package(245)]
    public partial class ReqEnterMap001Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap001();
        }
    }


    /// <summary>
    ///  [响应类]第1步：通过网关发送进入地图数据包
    /// </summary>
    public partial class ResEnterMap001: Packet 
    {

        public override Packet Clone()
        {
            ResEnterMap001 pkg = new ResEnterMap001();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResEnterMap001()
		{
			PacketID = 246;
		}
    }

    /// <summary>
    ///  [响应类] 第1步：通过网关发送进入地图数据包 创建者
    /// </summary>
    [Package(246)]
    public partial class ResEnterMap001Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap001();
        }
    }


    /// <summary>
    ///  [请求类]第2步：通知地图服创建玩家对象
    /// </summary>
    public partial class ReqEnterMap002: Packet 
    {
        /// <summary>
        /// 随机传送
        /// </summary>
        public bool Random;
        /// <summary>
        /// 宠物模板ID
        /// </summary>
        public List<uint> PetTmlp = new List<uint>();
        /// <summary>
        /// 0普通传送;1任务传送;2副本传送;3登录传送;
        /// </summary>
        public byte Type;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 坐标X
        /// </summary>
        public int MapX;
        /// <summary>
        /// 坐标Y
        /// </summary>
        public int MapY;
        /// <summary>
        /// 世界服IP
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 世界服端口
        /// </summary>
        public uint WorldPort;
        /// <summary>
        /// 
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint NextSkillTime;
        /// <summary>
        /// 脱战时长
        /// </summary>
        public uint LeaveBattleTime;

        public override Packet Clone()
        {
            ReqEnterMap002 pkg = new ReqEnterMap002();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Random = Random;
            foreach (var item in PetTmlp)
            {
                pkg.PetTmlp.Add(item);
            }
            pkg.Type = Type;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            pkg.MapGuid = MapGuid;
            pkg.NextSkillTime = NextSkillTime;
            pkg.LeaveBattleTime = LeaveBattleTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Random);
                for (int i = 0; i < PetTmlp.Count; i++)
                {
                      oByteArray.WriteUInt(PetTmlp[i]);
                }
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteInt(MapX);
                oByteArray.WriteInt(MapY);
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteUInt(NextSkillTime);
                oByteArray.WriteUInt(LeaveBattleTime);
            }
            else
            {
                Random = oByteArray.ReadBoolean();
                int PetTmlpCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PetTmlpCount; i++)
                {
                    PetTmlp.Add(oByteArray.ReadUInt());
                }
                Type = oByteArray.ReadByte();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadInt();
                MapY = oByteArray.ReadInt();
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
                NextSkillTime = oByteArray.ReadUInt();
                LeaveBattleTime = oByteArray.ReadUInt();
            }
        }
		public ReqEnterMap002()
		{
			PacketID = 247;
		}
    }

    /// <summary>
    ///  [请求类] 第2步：通知地图服创建玩家对象 创建者
    /// </summary>
    [Package(247)]
    public partial class ReqEnterMap002Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap002();
        }
    }


    /// <summary>
    ///  [响应类]第2步：通知地图服创建玩家对象
    /// </summary>
    public partial class ResEnterMap002: Packet 
    {

        public override Packet Clone()
        {
            ResEnterMap002 pkg = new ResEnterMap002();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResEnterMap002()
		{
			PacketID = 248;
		}
    }

    /// <summary>
    ///  [响应类] 第2步：通知地图服创建玩家对象 创建者
    /// </summary>
    [Package(248)]
    public partial class ResEnterMap002Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap002();
        }
    }


    /// <summary>
    ///  [请求类]第3步：开始从世界服获取玩家数据
    /// </summary>
    public partial class ReqEnterMap003: Packet 
    {
        /// <summary>
        /// 0普通传送;1任务传送;2副本传送;3登录传送;
        /// </summary>
        public byte Type;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 坐标X
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 坐标Y
        /// </summary>
        public uint MapY;

        public override Packet Clone()
        {
            ReqEnterMap003 pkg = new ReqEnterMap003();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
            }
            else
            {
                Type = oByteArray.ReadByte();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
            }
        }
		public ReqEnterMap003()
		{
			PacketID = 249;
		}
    }

    /// <summary>
    ///  [请求类] 第3步：开始从世界服获取玩家数据 创建者
    /// </summary>
    [Package(249)]
    public partial class ReqEnterMap003Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap003();
        }
    }


    /// <summary>
    ///  [响应类]第3步：开始从世界服获取玩家数据
    /// </summary>
    public partial class ResEnterMap003: Packet 
    {

        public override Packet Clone()
        {
            ResEnterMap003 pkg = new ResEnterMap003();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResEnterMap003()
		{
			PacketID = 250;
		}
    }

    /// <summary>
    ///  [响应类] 第3步：开始从世界服获取玩家数据 创建者
    /// </summary>
    [Package(250)]
    public partial class ResEnterMap003Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap003();
        }
    }


    /// <summary>
    ///  [请求类]第4步：发送玩家基础数据到地图服
    /// </summary>
    public partial class ReqEnterMap004: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterMap004 pkg = new ReqEnterMap004();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterMap004()
		{
			PacketID = 251;
		}
    }

    /// <summary>
    ///  [请求类] 第4步：发送玩家基础数据到地图服 创建者
    /// </summary>
    [Package(251)]
    public partial class ReqEnterMap004Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap004();
        }
    }


    /// <summary>
    ///  [响应类]第4步：发送玩家基础数据到地图服
    /// </summary>
    public partial class ResEnterMap004: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图坐标
        /// </summary>
        public ushort MapX;
        /// <summary>
        /// 地图坐标
        /// </summary>
        public ushort MapY;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 武器模板ID
        /// </summary>
        public uint WeaponID;
        /// <summary>
        /// 衣服模板ID
        /// </summary>
        public uint ClothesID;
        /// <summary>
        /// 已学技能ID列表
        /// </summary>
        public List<ProtocolPair> SkillIDVec = new List<ProtocolPair>();
        /// <summary>
        /// 头衔ID
        /// </summary>
        public uint TitleID;
        /// <summary>
        /// 玩家朝向
        /// </summary>
        public uint Direct;
        /// <summary>
        /// 附加攻击技能ID
        /// </summary>
        public uint AppendAttackSkillID;
        /// <summary>
        /// 攻击模式
        /// </summary>
        public byte FightModle;
        /// <summary>
        /// PK值
        /// </summary>
        public uint PKValue;
        /// <summary>
        /// 翅膀等级
        /// </summary>
        public uint WingLevel;
        /// <summary>
        /// 队伍平台ID
        /// </summary>
        public uint GroupPlatformID;
        /// <summary>
        /// 队伍区服ID
        /// </summary>
        public uint GroupServerID;
        /// <summary>
        /// 队伍ID
        /// </summary>
        public uint GroupID;
        /// <summary>
        /// 是否是防沉迷(掉落装备专用)
        /// </summary>
        public bool IsIndulge;
        /// <summary>
        /// 阵营
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 时装ID
        /// </summary>
        public uint FashionClothesID;
        /// <summary>
        /// 时装武器ID
        /// </summary>
        public uint FashionWeaponID;
        /// <summary>
        /// 境界等级
        /// </summary>
        public uint StateLevel;
        /// <summary>
        /// 效果列表
        /// </summary>
        public List<EffectsInfo> EffectInfo = new List<EffectsInfo>();
        /// <summary>
        /// 平台VIP TID
        /// </summary>
        public uint PlatfromVipTID;
        /// <summary>
        /// 战斗属性
        /// </summary>
        public CombatAttribute CombatAttributeInfo = new CombatAttribute();
        /// <summary>
        /// 连击技能列表
        /// </summary>
        public uint ComboSkillID;
        /// <summary>
        /// 降妖除魔等级
        /// </summary>
        public uint OfficialRank;
        /// <summary>
        /// 传送类型
        /// </summary>
        public byte Type;
        /// <summary>
        /// 行会GUID
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 行会名字
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 文件名字
        /// </summary>
        public string FileName;
        /// <summary>
        /// 坐骑ID
        /// </summary>
        public uint MountsID;
        /// <summary>
        /// 魔煞ID
        /// </summary>
        public uint MoShaID;
        /// <summary>
        /// vip等级
        /// </summary>
        public byte VipLv;
        /// <summary>
        /// 是否是城主
        /// </summary>
        public bool IsShaBakeOwner;
        /// <summary>
        /// 行会职位
        /// </summary>
        public byte GuildPosition;
        /// <summary>
        /// 宠物信息
        /// </summary>
        public List<PlayerPetInfo> PetInfo = new List<PlayerPetInfo>();
        /// <summary>
        /// 当前待召唤魂宠Group
        /// </summary>
        public int SoulPetGroup;
        /// <summary>
        /// 当前密文套装名号
        /// </summary>
        public uint CurCiphertext;
        /// <summary>
        /// 通天塔掉落层数
        /// </summary>
        public uint BabelDropLayer;
        /// <summary>
        /// 所有打宝精灵等级
        /// </summary>
        public List<Elves> ElvesData = new List<Elves>();
        /// <summary>
        /// 神罚等级
        /// </summary>
        public uint PenaltyLv;
        /// <summary>
        /// 神御等级
        /// </summary>
        public uint ResistLv;
        /// <summary>
        /// 
        /// </summary>
        public uint PlatformEntrance;
        /// <summary>
        /// 玩家上线是否初始化完成
        /// </summary>
        public bool InitComplate;
        /// <summary>
        /// 时装足迹ID
        /// </summary>
        public uint FashionFootMark;
        /// <summary>
        /// 战区ID(弃用)
        /// </summary>
        public uint ZoneGroupID;

        public override Packet Clone()
        {
            ResEnterMap004 pkg = new ResEnterMap004();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Name = Name;
            pkg.Career = Career;
            pkg.Sex = Sex;
            pkg.Lv = Lv;
            pkg.WeaponID = WeaponID;
            pkg.ClothesID = ClothesID;
            foreach (ProtocolPair item in SkillIDVec)
            {
                pkg.SkillIDVec.Add(item.Clone() as ProtocolPair);
            }
            pkg.TitleID = TitleID;
            pkg.Direct = Direct;
            pkg.AppendAttackSkillID = AppendAttackSkillID;
            pkg.FightModle = FightModle;
            pkg.PKValue = PKValue;
            pkg.WingLevel = WingLevel;
            pkg.GroupPlatformID = GroupPlatformID;
            pkg.GroupServerID = GroupServerID;
            pkg.GroupID = GroupID;
            pkg.IsIndulge = IsIndulge;
            pkg.Camp = Camp;
            pkg.FashionClothesID = FashionClothesID;
            pkg.FashionWeaponID = FashionWeaponID;
            pkg.StateLevel = StateLevel;
            foreach (EffectsInfo item in EffectInfo)
            {
                pkg.EffectInfo.Add(item.Clone() as EffectsInfo);
            }
            pkg.PlatfromVipTID = PlatfromVipTID;
            pkg.CombatAttributeInfo = CombatAttributeInfo.Clone() as CombatAttribute;
            pkg.ComboSkillID = ComboSkillID;
            pkg.OfficialRank = OfficialRank;
            pkg.Type = Type;
            pkg.GuildGuid = GuildGuid;
            pkg.GuildName = GuildName;
            pkg.FileName = FileName;
            pkg.MountsID = MountsID;
            pkg.MoShaID = MoShaID;
            pkg.VipLv = VipLv;
            pkg.IsShaBakeOwner = IsShaBakeOwner;
            pkg.GuildPosition = GuildPosition;
            foreach (PlayerPetInfo item in PetInfo)
            {
                pkg.PetInfo.Add(item.Clone() as PlayerPetInfo);
            }
            pkg.SoulPetGroup = SoulPetGroup;
            pkg.CurCiphertext = CurCiphertext;
            pkg.BabelDropLayer = BabelDropLayer;
            foreach (Elves item in ElvesData)
            {
                pkg.ElvesData.Add(item.Clone() as Elves);
            }
            pkg.PenaltyLv = PenaltyLv;
            pkg.ResistLv = ResistLv;
            pkg.PlatformEntrance = PlatformEntrance;
            pkg.InitComplate = InitComplate;
            pkg.FashionFootMark = FashionFootMark;
            pkg.ZoneGroupID = ZoneGroupID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUShort(MapX);
                oByteArray.WriteUShort(MapY);
                oByteArray.WriteUTF(Name);
                oByteArray.WriteByte(Career);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUInt(WeaponID);
                oByteArray.WriteUInt(ClothesID);
                oByteArray.WriteUShort((ushort)SkillIDVec.Count);
                for (int i = 0; i < SkillIDVec.Count; i++)
                {
                    SkillIDVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(TitleID);
                oByteArray.WriteUInt(Direct);
                oByteArray.WriteUInt(AppendAttackSkillID);
                oByteArray.WriteByte(FightModle);
                oByteArray.WriteUInt(PKValue);
                oByteArray.WriteUInt(WingLevel);
                oByteArray.WriteUInt(GroupPlatformID);
                oByteArray.WriteUInt(GroupServerID);
                oByteArray.WriteUInt(GroupID);
                oByteArray.WriteBoolean(IsIndulge);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt(FashionClothesID);
                oByteArray.WriteUInt(FashionWeaponID);
                oByteArray.WriteUInt(StateLevel);
                oByteArray.WriteUShort((ushort)EffectInfo.Count);
                for (int i = 0; i < EffectInfo.Count; i++)
                {
                    EffectInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(PlatfromVipTID);
                CombatAttributeInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ComboSkillID);
                oByteArray.WriteUInt(OfficialRank);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUTF(FileName);
                oByteArray.WriteUInt(MountsID);
                oByteArray.WriteUInt(MoShaID);
                oByteArray.WriteByte(VipLv);
                oByteArray.WriteBoolean(IsShaBakeOwner);
                oByteArray.WriteByte(GuildPosition);
                oByteArray.WriteUShort((ushort)PetInfo.Count);
                for (int i = 0; i < PetInfo.Count; i++)
                {
                    PetInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteInt(SoulPetGroup);
                oByteArray.WriteUInt(CurCiphertext);
                oByteArray.WriteUInt(BabelDropLayer);
                oByteArray.WriteUShort((ushort)ElvesData.Count);
                for (int i = 0; i < ElvesData.Count; i++)
                {
                    ElvesData[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(PenaltyLv);
                oByteArray.WriteUInt(ResistLv);
                oByteArray.WriteUInt(PlatformEntrance);
                oByteArray.WriteBoolean(InitComplate);
                oByteArray.WriteUInt(FashionFootMark);
                oByteArray.WriteUInt(ZoneGroupID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUShort();
                MapY = oByteArray.ReadUShort();
                Name = oByteArray.ReadUTF();
                Career = oByteArray.ReadByte();
                Sex = oByteArray.ReadByte();
                Lv = oByteArray.ReadUInt();
                WeaponID = oByteArray.ReadUInt();
                ClothesID = oByteArray.ReadUInt();
                int SkillIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < SkillIDVecCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    SkillIDVec.Add(obj);
                }
                TitleID = oByteArray.ReadUInt();
                Direct = oByteArray.ReadUInt();
                AppendAttackSkillID = oByteArray.ReadUInt();
                FightModle = oByteArray.ReadByte();
                PKValue = oByteArray.ReadUInt();
                WingLevel = oByteArray.ReadUInt();
                GroupPlatformID = oByteArray.ReadUInt();
                GroupServerID = oByteArray.ReadUInt();
                GroupID = oByteArray.ReadUInt();
                IsIndulge = oByteArray.ReadBoolean();
                Camp = oByteArray.ReadUInt();
                FashionClothesID = oByteArray.ReadUInt();
                FashionWeaponID = oByteArray.ReadUInt();
                StateLevel = oByteArray.ReadUInt();
                int EffectInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < EffectInfoCount; i++)
                {
                    EffectsInfo obj = new EffectsInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    EffectInfo.Add(obj);
                }
                PlatfromVipTID = oByteArray.ReadUInt();
                CombatAttributeInfo.Serializtion(oByteArray, bSerialize);
                ComboSkillID = oByteArray.ReadUInt();
                OfficialRank = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                GuildGuid = oByteArray.ReadUInt64();
                GuildName = oByteArray.ReadUTF();
                FileName = oByteArray.ReadUTF();
                MountsID = oByteArray.ReadUInt();
                MoShaID = oByteArray.ReadUInt();
                VipLv = oByteArray.ReadByte();
                IsShaBakeOwner = oByteArray.ReadBoolean();
                GuildPosition = oByteArray.ReadByte();
                int PetInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PetInfoCount; i++)
                {
                    PlayerPetInfo obj = new PlayerPetInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    PetInfo.Add(obj);
                }
                SoulPetGroup = oByteArray.ReadInt();
                CurCiphertext = oByteArray.ReadUInt();
                BabelDropLayer = oByteArray.ReadUInt();
                int ElvesDataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ElvesDataCount; i++)
                {
                    Elves obj = new Elves();
                    obj.Serializtion(oByteArray, bSerialize);
                    ElvesData.Add(obj);
                }
                PenaltyLv = oByteArray.ReadUInt();
                ResistLv = oByteArray.ReadUInt();
                PlatformEntrance = oByteArray.ReadUInt();
                InitComplate = oByteArray.ReadBoolean();
                FashionFootMark = oByteArray.ReadUInt();
                ZoneGroupID = oByteArray.ReadUInt();
            }
        }
		public ResEnterMap004()
		{
			PacketID = 252;
		}
    }

    /// <summary>
    ///  [响应类] 第4步：发送玩家基础数据到地图服 创建者
    /// </summary>
    [Package(252)]
    public partial class ResEnterMap004Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap004();
        }
    }


    /// <summary>
    ///  [请求类]领取附件完成
    /// </summary>
    public partial class ReqGetMailAppendNotice: Packet 
    {
        /// <summary>
        /// 邮件ID
        /// </summary>
        public uint MailID;
        /// <summary>
        /// 0-物品附件 1-货币附件
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqGetMailAppendNotice pkg = new ReqGetMailAppendNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MailID = MailID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MailID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                MailID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqGetMailAppendNotice()
		{
			PacketID = 253;
		}
    }

    /// <summary>
    ///  [请求类] 领取附件完成 创建者
    /// </summary>
    [Package(253)]
    public partial class ReqGetMailAppendNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetMailAppendNotice();
        }
    }


    /// <summary>
    ///  [响应类]领取附件完成
    /// </summary>
    public partial class ResGetMailAppendNotice: Packet 
    {

        public override Packet Clone()
        {
            ResGetMailAppendNotice pkg = new ResGetMailAppendNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResGetMailAppendNotice()
		{
			PacketID = 254;
		}
    }

    /// <summary>
    ///  [响应类] 领取附件完成 创建者
    /// </summary>
    [Package(254)]
    public partial class ResGetMailAppendNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetMailAppendNotice();
        }
    }


    /// <summary>
    ///  [请求类]第7步：世界服发送给客户端进入地图
    /// </summary>
    public partial class ReqEnterMap007: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterMap007 pkg = new ReqEnterMap007();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterMap007()
		{
			PacketID = 255;
		}
    }

    /// <summary>
    ///  [请求类] 第7步：世界服发送给客户端进入地图 创建者
    /// </summary>
    [Package(255)]
    public partial class ReqEnterMap007Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap007();
        }
    }


    /// <summary>
    ///  [响应类]第7步：世界服发送给客户端进入地图
    /// </summary>
    public partial class ResEnterMap007: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 地图坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 玩家朝向
        /// </summary>
        public uint Direct;
        /// <summary>
        /// 0普通传送;1任务传送;2支线传送;3日常传送;4副本传送;5登录传送;6降魔传送7活动传送8传送到npc附近9随机传送
        /// </summary>
        public byte Type;
        /// <summary>
        /// 所在地图Guid
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 是否在安全区
        /// </summary>
        public bool IsSafePoint;

        public override Packet Clone()
        {
            ResEnterMap007 pkg = new ResEnterMap007();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Direct = Direct;
            pkg.Type = Type;
            pkg.MapGuid = MapGuid;
            pkg.IsSafePoint = IsSafePoint;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(Direct);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteBoolean(IsSafePoint);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                Direct = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                MapGuid = oByteArray.ReadUInt();
                IsSafePoint = oByteArray.ReadBoolean();
            }
        }
		public ResEnterMap007()
		{
			PacketID = 256;
		}
    }

    /// <summary>
    ///  [响应类] 第7步：世界服发送给客户端进入地图 创建者
    /// </summary>
    [Package(256)]
    public partial class ResEnterMap007Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap007();
        }
    }


    /// <summary>
    ///  [请求类]创建队伍(返回队伍信息)
    /// </summary>
    public partial class ReqCreateGroup: Packet 
    {

        public override Packet Clone()
        {
            ReqCreateGroup pkg = new ReqCreateGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCreateGroup()
		{
			PacketID = 257;
		}
    }

    /// <summary>
    ///  [请求类] 创建队伍(返回队伍信息) 创建者
    /// </summary>
    [Package(257)]
    public partial class ReqCreateGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateGroup();
        }
    }


    /// <summary>
    ///  [响应类]创建队伍(返回队伍信息)
    /// </summary>
    public partial class ResCreateGroup: Packet 
    {
        /// <summary>
        /// 0-成功，1-已在队伍中，2-等级不够30级开启
        /// </summary>
        public byte Result;
        /// <summary>
        /// 队长ID
        /// </summary>
        public ObjectGuidInfo LeaderPlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Career;
        /// <summary>
        /// 性别
        /// </summary>
        public uint Sex;
        /// <summary>
        /// 昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 队伍ID
        /// </summary>
        public string GroupIDStr;

        public override Packet Clone()
        {
            ResCreateGroup pkg = new ResCreateGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.LeaderPlayerID = LeaderPlayerID.Clone() as ObjectGuidInfo;
            pkg.Lv = Lv;
            pkg.Career = Career;
            pkg.Sex = Sex;
            pkg.NickName = NickName;
            pkg.GroupIDStr = GroupIDStr;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                LeaderPlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteUInt(Sex);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUTF(GroupIDStr);
            }
            else
            {
                Result = oByteArray.ReadByte();
                LeaderPlayerID.Serializtion(oByteArray, bSerialize);
                Lv = oByteArray.ReadUInt();
                Career = oByteArray.ReadUInt();
                Sex = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                GroupIDStr = oByteArray.ReadUTF();
            }
        }
		public ResCreateGroup()
		{
			PacketID = 258;
		}
    }

    /// <summary>
    ///  [响应类] 创建队伍(返回队伍信息) 创建者
    /// </summary>
    [Package(258)]
    public partial class ResCreateGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateGroup();
        }
    }


    /// <summary>
    ///  [请求类]邀请组队
    /// </summary>
    public partial class ReqInviteGroup: Packet 
    {
        /// <summary>
        /// 受邀玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqInviteGroup pkg = new ReqInviteGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqInviteGroup()
		{
			PacketID = 259;
		}
    }

    /// <summary>
    ///  [请求类] 邀请组队 创建者
    /// </summary>
    [Package(259)]
    public partial class ReqInviteGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInviteGroup();
        }
    }


    /// <summary>
    ///  [响应类]邀请组队
    /// </summary>
    public partial class ResInviteGroup: Packet 
    {
        /// <summary>
        /// 0-邀请成功，101-玩家已下线，2-对方已在队伍中，3-队伍成员已满，4-功能未开启
        /// </summary>
        public byte Result;
        /// <summary>
        /// 邀请者ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 邀请者昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Career;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 行会名字
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ResInviteGroup pkg = new ResInviteGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.NickName = NickName;
            pkg.Career = Career;
            pkg.Lv = Lv;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                Result = oByteArray.ReadByte();
                PlayerID.Serializtion(oByteArray, bSerialize);
                NickName = oByteArray.ReadUTF();
                Career = oByteArray.ReadUInt();
                Lv = oByteArray.ReadUInt();
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ResInviteGroup()
		{
			PacketID = 260;
		}
    }

    /// <summary>
    ///  [响应类] 邀请组队 创建者
    /// </summary>
    [Package(260)]
    public partial class ResInviteGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInviteGroup();
        }
    }


    /// <summary>
    ///  [请求类]邀请组队应答(客户端通知服务端)
    /// </summary>
    public partial class ReqInviteGroupReply: Packet 
    {
        /// <summary>
        /// 邀请者玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 0-接受邀请，1-拒绝邀请
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ReqInviteGroupReply pkg = new ReqInviteGroupReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Result);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Result = oByteArray.ReadByte();
            }
        }
		public ReqInviteGroupReply()
		{
			PacketID = 261;
		}
    }

    /// <summary>
    ///  [请求类] 邀请组队应答(客户端通知服务端) 创建者
    /// </summary>
    [Package(261)]
    public partial class ReqInviteGroupReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInviteGroupReply();
        }
    }


    /// <summary>
    ///  [响应类]邀请组队应答(客户端通知服务端)
    /// </summary>
    public partial class ResInviteGroupReply: Packet 
    {
        /// <summary>
        /// 0-接受邀请，1-拒绝邀请，101-邀请者已离线
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResInviteGroupReply pkg = new ResInviteGroupReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResInviteGroupReply()
		{
			PacketID = 262;
		}
    }

    /// <summary>
    ///  [响应类] 邀请组队应答(客户端通知服务端) 创建者
    /// </summary>
    [Package(262)]
    public partial class ResInviteGroupReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInviteGroupReply();
        }
    }


    /// <summary>
    ///  [请求类]组员变更通知
    /// </summary>
    public partial class ReqAlterGroupItem: Packet 
    {

        public override Packet Clone()
        {
            ReqAlterGroupItem pkg = new ReqAlterGroupItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAlterGroupItem()
		{
			PacketID = 263;
		}
    }

    /// <summary>
    ///  [请求类] 组员变更通知 创建者
    /// </summary>
    [Package(263)]
    public partial class ReqAlterGroupItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAlterGroupItem();
        }
    }


    /// <summary>
    ///  [响应类]组员变更通知
    /// </summary>
    public partial class ResAlterGroupItem: Packet 
    {
        /// <summary>
        /// 组员玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 1-增加队员，2-移除队员，
        /// </summary>
        public byte Type;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Career;
        /// <summary>
        /// 性别
        /// </summary>
        public uint Sex;
        /// <summary>
        /// 昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 结果
        /// </summary>
        public sbyte Result;

        public override Packet Clone()
        {
            ResAlterGroupItem pkg = new ResAlterGroupItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Type = Type;
            pkg.Lv = Lv;
            pkg.Career = Career;
            pkg.Sex = Sex;
            pkg.NickName = NickName;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteUInt(Sex);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteSByte(Result);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Type = oByteArray.ReadByte();
                Lv = oByteArray.ReadUInt();
                Career = oByteArray.ReadUInt();
                Sex = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                Result = oByteArray.ReadSByte();
            }
        }
		public ResAlterGroupItem()
		{
			PacketID = 264;
		}
    }

    /// <summary>
    ///  [响应类] 组员变更通知 创建者
    /// </summary>
    [Package(264)]
    public partial class ResAlterGroupItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAlterGroupItem();
        }
    }


    /// <summary>
    ///  [请求类]申请加入队伍
    /// </summary>
    public partial class ReqApplyJoinGroup: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqApplyJoinGroup pkg = new ReqApplyJoinGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqApplyJoinGroup()
		{
			PacketID = 265;
		}
    }

    /// <summary>
    ///  [请求类] 申请加入队伍 创建者
    /// </summary>
    [Package(265)]
    public partial class ReqApplyJoinGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqApplyJoinGroup();
        }
    }


    /// <summary>
    ///  [响应类]申请加入队伍
    /// </summary>
    public partial class ResApplyJoinGroup: Packet 
    {
        /// <summary>
        /// 0-申请成功，1-拒绝，2，队员已满，3-队伍不在附近或已解散，4-已在队伍中，5-功能未开启
        /// </summary>
        public byte Result;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Career;
        /// <summary>
        /// 昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 行会名称
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ResApplyJoinGroup pkg = new ResApplyJoinGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Lv = Lv;
            pkg.Career = Career;
            pkg.NickName = NickName;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                Result = oByteArray.ReadByte();
                PlayerID.Serializtion(oByteArray, bSerialize);
                Lv = oByteArray.ReadUInt();
                Career = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ResApplyJoinGroup()
		{
			PacketID = 266;
		}
    }

    /// <summary>
    ///  [响应类] 申请加入队伍 创建者
    /// </summary>
    [Package(266)]
    public partial class ResApplyJoinGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResApplyJoinGroup();
        }
    }


    /// <summary>
    ///  [请求类]离开队伍
    /// </summary>
    public partial class ReqLeaveGroup: Packet 
    {

        public override Packet Clone()
        {
            ReqLeaveGroup pkg = new ReqLeaveGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqLeaveGroup()
		{
			PacketID = 267;
		}
    }

    /// <summary>
    ///  [请求类] 离开队伍 创建者
    /// </summary>
    [Package(267)]
    public partial class ReqLeaveGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLeaveGroup();
        }
    }


    /// <summary>
    ///  [响应类]离开队伍
    /// </summary>
    public partial class ResLeaveGroup: Packet 
    {
        /// <summary>
        /// 0-成功
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResLeaveGroup pkg = new ResLeaveGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResLeaveGroup()
		{
			PacketID = 268;
		}
    }

    /// <summary>
    ///  [响应类] 离开队伍 创建者
    /// </summary>
    [Package(268)]
    public partial class ResLeaveGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLeaveGroup();
        }
    }


    /// <summary>
    ///  [请求类]周围队伍信息(返回队长信息)
    /// </summary>
    public partial class ReqGetNearbyGroup: Packet 
    {

        public override Packet Clone()
        {
            ReqGetNearbyGroup pkg = new ReqGetNearbyGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetNearbyGroup()
		{
			PacketID = 269;
		}
    }

    /// <summary>
    ///  [请求类] 周围队伍信息(返回队长信息) 创建者
    /// </summary>
    [Package(269)]
    public partial class ReqGetNearbyGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetNearbyGroup();
        }
    }


    /// <summary>
    ///  [响应类]周围队伍信息(返回队长信息)
    /// </summary>
    public partial class ResGetNearbyGroup: Packet 
    {
        /// <summary>
        /// 队伍信息
        /// </summary>
        public List<GroupInfo> GroupVec = new List<GroupInfo>();

        public override Packet Clone()
        {
            ResGetNearbyGroup pkg = new ResGetNearbyGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GroupInfo item in GroupVec)
            {
                pkg.GroupVec.Add(item.Clone() as GroupInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)GroupVec.Count);
                for (int i = 0; i < GroupVec.Count; i++)
                {
                    GroupVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int GroupVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < GroupVecCount; i++)
                {
                    GroupInfo obj = new GroupInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    GroupVec.Add(obj);
                }
            }
        }
		public ResGetNearbyGroup()
		{
			PacketID = 270;
		}
    }

    /// <summary>
    ///  [响应类] 周围队伍信息(返回队长信息) 创建者
    /// </summary>
    [Package(270)]
    public partial class ResGetNearbyGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetNearbyGroup();
        }
    }


    /// <summary>
    ///  [请求类]查看玩家装备
    /// </summary>
    public partial class ReqViewPlayerEquip: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqViewPlayerEquip pkg = new ReqViewPlayerEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqViewPlayerEquip()
		{
			PacketID = 271;
		}
    }

    /// <summary>
    ///  [请求类] 查看玩家装备 创建者
    /// </summary>
    [Package(271)]
    public partial class ReqViewPlayerEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqViewPlayerEquip();
        }
    }


    /// <summary>
    ///  [响应类]查看玩家装备
    /// </summary>
    public partial class ResViewPlayerEquip: Packet 
    {
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Career;
        /// <summary>
        /// 性别
        /// </summary>
        public uint Sex;
        /// <summary>
        /// 昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 101-玩家离线
        /// </summary>
        public byte Result;
        /// <summary>
        /// 称号ID
        /// </summary>
        public uint TitleID;
        /// <summary>
        /// 翅膀等级
        /// </summary>
        public uint WingLv;
        /// <summary>
        /// 公会名字
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 时装衣服ID
        /// </summary>
        public uint FashionClothesID;
        /// <summary>
        /// 时装信息
        /// </summary>
        public string FashionInfo;
        /// <summary>
        /// 时装武器ID
        /// </summary>
        public uint FashionWeaponID;
        /// <summary>
        /// 血符TID
        /// </summary>
        public uint XuefuTID;
        /// <summary>
        /// 护盾TID
        /// </summary>
        public uint ShieldTID;
        /// <summary>
        /// 神石TID
        /// </summary>
        public uint JewelTID;
        /// <summary>
        /// 命珠TID
        /// </summary>
        public uint LifeStoneTID;
        /// <summary>
        /// 效果信息
        /// </summary>
        public List<EffectsInfo> EffectInfo = new List<EffectsInfo>();
        /// <summary>
        /// 玩家平台VIP TID
        /// </summary>
        public uint PlatfromVipTID;
        /// <summary>
        /// 装备信息
        /// </summary>
        public List<GameItemInfo> ViewPlayerEquip = new List<GameItemInfo>();
        /// <summary>
        /// 勋章TID
        /// </summary>
        public uint AchievementMedalTID;
        /// <summary>
        /// 魔煞ID
        /// </summary>
        public uint MoShaID;
        /// <summary>
        /// 心魔等级
        /// </summary>
        public uint XinMoLv;
        /// <summary>
        /// 龙魄等级
        /// </summary>
        public uint LongPoLv;
        /// <summary>
        /// 魔契等级
        /// </summary>
        public uint GemEquipLv;
        /// <summary>
        /// 火龙之心等级
        /// </summary>
        public uint DragonHeartLevel;
        /// <summary>
        /// 装备位强化信息
        /// </summary>
        public EquipPosStrengthenInfo EquipPosInfo = new EquipPosStrengthenInfo();
        /// <summary>
        /// 身上宝玉穿戴信息
        /// </summary>
        public List<GameItemInfo> JadeStoneInfo = new List<GameItemInfo>();
        /// <summary>
        /// 附加等级
        /// </summary>
        public uint RoleAddLv;

        public override Packet Clone()
        {
            ResViewPlayerEquip pkg = new ResViewPlayerEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Lv = Lv;
            pkg.Career = Career;
            pkg.Sex = Sex;
            pkg.NickName = NickName;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Result = Result;
            pkg.TitleID = TitleID;
            pkg.WingLv = WingLv;
            pkg.GuildName = GuildName;
            pkg.FashionClothesID = FashionClothesID;
            pkg.FashionInfo = FashionInfo;
            pkg.FashionWeaponID = FashionWeaponID;
            pkg.XuefuTID = XuefuTID;
            pkg.ShieldTID = ShieldTID;
            pkg.JewelTID = JewelTID;
            pkg.LifeStoneTID = LifeStoneTID;
            foreach (EffectsInfo item in EffectInfo)
            {
                pkg.EffectInfo.Add(item.Clone() as EffectsInfo);
            }
            pkg.PlatfromVipTID = PlatfromVipTID;
            foreach (GameItemInfo item in ViewPlayerEquip)
            {
                pkg.ViewPlayerEquip.Add(item.Clone() as GameItemInfo);
            }
            pkg.AchievementMedalTID = AchievementMedalTID;
            pkg.MoShaID = MoShaID;
            pkg.XinMoLv = XinMoLv;
            pkg.LongPoLv = LongPoLv;
            pkg.GemEquipLv = GemEquipLv;
            pkg.DragonHeartLevel = DragonHeartLevel;
            pkg.EquipPosInfo = EquipPosInfo.Clone() as EquipPosStrengthenInfo;
            foreach (GameItemInfo item in JadeStoneInfo)
            {
                pkg.JadeStoneInfo.Add(item.Clone() as GameItemInfo);
            }
            pkg.RoleAddLv = RoleAddLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteUInt(Sex);
                oByteArray.WriteUTF(NickName);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TitleID);
                oByteArray.WriteUInt(WingLv);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUInt(FashionClothesID);
                oByteArray.WriteUTF(FashionInfo);
                oByteArray.WriteUInt(FashionWeaponID);
                oByteArray.WriteUInt(XuefuTID);
                oByteArray.WriteUInt(ShieldTID);
                oByteArray.WriteUInt(JewelTID);
                oByteArray.WriteUInt(LifeStoneTID);
                oByteArray.WriteUShort((ushort)EffectInfo.Count);
                for (int i = 0; i < EffectInfo.Count; i++)
                {
                    EffectInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(PlatfromVipTID);
                oByteArray.WriteUShort((ushort)ViewPlayerEquip.Count);
                for (int i = 0; i < ViewPlayerEquip.Count; i++)
                {
                    ViewPlayerEquip[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(AchievementMedalTID);
                oByteArray.WriteUInt(MoShaID);
                oByteArray.WriteUInt(XinMoLv);
                oByteArray.WriteUInt(LongPoLv);
                oByteArray.WriteUInt(GemEquipLv);
                oByteArray.WriteUInt(DragonHeartLevel);
                EquipPosInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUShort((ushort)JadeStoneInfo.Count);
                for (int i = 0; i < JadeStoneInfo.Count; i++)
                {
                    JadeStoneInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(RoleAddLv);
            }
            else
            {
                Lv = oByteArray.ReadUInt();
                Career = oByteArray.ReadUInt();
                Sex = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                PlayerID.Serializtion(oByteArray, bSerialize);
                Result = oByteArray.ReadByte();
                TitleID = oByteArray.ReadUInt();
                WingLv = oByteArray.ReadUInt();
                GuildName = oByteArray.ReadUTF();
                FashionClothesID = oByteArray.ReadUInt();
                FashionInfo = oByteArray.ReadUTF();
                FashionWeaponID = oByteArray.ReadUInt();
                XuefuTID = oByteArray.ReadUInt();
                ShieldTID = oByteArray.ReadUInt();
                JewelTID = oByteArray.ReadUInt();
                LifeStoneTID = oByteArray.ReadUInt();
                int EffectInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < EffectInfoCount; i++)
                {
                    EffectsInfo obj = new EffectsInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    EffectInfo.Add(obj);
                }
                PlatfromVipTID = oByteArray.ReadUInt();
                int ViewPlayerEquipCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ViewPlayerEquipCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ViewPlayerEquip.Add(obj);
                }
                AchievementMedalTID = oByteArray.ReadUInt();
                MoShaID = oByteArray.ReadUInt();
                XinMoLv = oByteArray.ReadUInt();
                LongPoLv = oByteArray.ReadUInt();
                GemEquipLv = oByteArray.ReadUInt();
                DragonHeartLevel = oByteArray.ReadUInt();
                EquipPosInfo.Serializtion(oByteArray, bSerialize);
                int JadeStoneInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < JadeStoneInfoCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    JadeStoneInfo.Add(obj);
                }
                RoleAddLv = oByteArray.ReadUInt();
            }
        }
		public ResViewPlayerEquip()
		{
			PacketID = 272;
		}
    }

    /// <summary>
    ///  [响应类] 查看玩家装备 创建者
    /// </summary>
    [Package(272)]
    public partial class ResViewPlayerEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResViewPlayerEquip();
        }
    }


    /// <summary>
    ///  [请求类]转移武器幸运与极品属性值
    /// </summary>
    public partial class ReqTransferEquipLucky: Packet 
    {
        /// <summary>
        /// 源装备位置
        /// </summary>
        public uint SrcItemPos;
        /// <summary>
        /// 目标装备位置
        /// </summary>
        public uint DestItemPos;
        /// <summary>
        /// 转移类型（1幸运）
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqTransferEquipLucky pkg = new ReqTransferEquipLucky();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SrcItemPos = SrcItemPos;
            pkg.DestItemPos = DestItemPos;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SrcItemPos);
                oByteArray.WriteUInt(DestItemPos);
                oByteArray.WriteByte(Type);
            }
            else
            {
                SrcItemPos = oByteArray.ReadUInt();
                DestItemPos = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqTransferEquipLucky()
		{
			PacketID = 273;
		}
    }

    /// <summary>
    ///  [请求类] 转移武器幸运与极品属性值 创建者
    /// </summary>
    [Package(273)]
    public partial class ReqTransferEquipLuckyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferEquipLucky();
        }
    }


    /// <summary>
    ///  [响应类]转移武器幸运与极品属性值
    /// </summary>
    public partial class ResTransferEquipLucky: Packet 
    {
        /// <summary>
        /// 0-成功，1-源装备幸运值为0，2-目标装备幸运值不为0，3-装备不在背包或身上,4-钱不够
        /// </summary>
        public byte Result;
        /// <summary>
        /// 源装备位置
        /// </summary>
        public uint SrcItemPos;
        /// <summary>
        /// 目标装备位置
        /// </summary>
        public uint DestItemPos;
        /// <summary>
        /// 转移类型（1幸运）
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResTransferEquipLucky pkg = new ResTransferEquipLucky();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.SrcItemPos = SrcItemPos;
            pkg.DestItemPos = DestItemPos;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(SrcItemPos);
                oByteArray.WriteUInt(DestItemPos);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                SrcItemPos = oByteArray.ReadUInt();
                DestItemPos = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResTransferEquipLucky()
		{
			PacketID = 274;
		}
    }

    /// <summary>
    ///  [响应类] 转移武器幸运与极品属性值 创建者
    /// </summary>
    [Package(274)]
    public partial class ResTransferEquipLuckyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferEquipLucky();
        }
    }


    /// <summary>
    ///  [请求类]附近玩家列表
    /// </summary>
    public partial class ReqGetNearbyPlayer: Packet 
    {

        public override Packet Clone()
        {
            ReqGetNearbyPlayer pkg = new ReqGetNearbyPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetNearbyPlayer()
		{
			PacketID = 275;
		}
    }

    /// <summary>
    ///  [请求类] 附近玩家列表 创建者
    /// </summary>
    [Package(275)]
    public partial class ReqGetNearbyPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetNearbyPlayer();
        }
    }


    /// <summary>
    ///  [响应类]附近玩家列表
    /// </summary>
    public partial class ResGetNearbyPlayer: Packet 
    {
        /// <summary>
        /// 周围玩家信息
        /// </summary>
        public List<NearPlayerInfo> AllNearPlayerInfo = new List<NearPlayerInfo>();
        /// <summary>
        /// dfdf
        /// </summary>
        public NearPlayerInfo Test1 = new NearPlayerInfo();

        public override Packet Clone()
        {
            ResGetNearbyPlayer pkg = new ResGetNearbyPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (NearPlayerInfo item in AllNearPlayerInfo)
            {
                pkg.AllNearPlayerInfo.Add(item.Clone() as NearPlayerInfo);
            }
            pkg.Test1 = Test1.Clone() as NearPlayerInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)AllNearPlayerInfo.Count);
                for (int i = 0; i < AllNearPlayerInfo.Count; i++)
                {
                    AllNearPlayerInfo[i].Serializtion(oByteArray, bSerialize);
                }
                Test1.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                int AllNearPlayerInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AllNearPlayerInfoCount; i++)
                {
                    NearPlayerInfo obj = new NearPlayerInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    AllNearPlayerInfo.Add(obj);
                }
                Test1.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResGetNearbyPlayer()
		{
			PacketID = 276;
		}
    }

    /// <summary>
    ///  [响应类] 附近玩家列表 创建者
    /// </summary>
    [Package(276)]
    public partial class ResGetNearbyPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetNearbyPlayer();
        }
    }


    /// <summary>
    ///  [请求类]武器幸运转移通知CacheServer
    /// </summary>
    public partial class ReqTransferLuckyNotice: Packet 
    {
        /// <summary>
        /// 源武器位置
        /// </summary>
        public uint SrcItemPos;
        /// <summary>
        /// 源武器模板ID
        /// </summary>
        public uint SrcTmplID;
        /// <summary>
        /// 目标武器位置
        /// </summary>
        public uint DestItemPos;
        /// <summary>
        /// 目标武器幸运值
        /// </summary>
        public uint DestItemLucky;
        /// <summary>
        /// 目标武器模板ID
        /// </summary>
        public uint DestTmplID;

        public override Packet Clone()
        {
            ReqTransferLuckyNotice pkg = new ReqTransferLuckyNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SrcItemPos = SrcItemPos;
            pkg.SrcTmplID = SrcTmplID;
            pkg.DestItemPos = DestItemPos;
            pkg.DestItemLucky = DestItemLucky;
            pkg.DestTmplID = DestTmplID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SrcItemPos);
                oByteArray.WriteUInt(SrcTmplID);
                oByteArray.WriteUInt(DestItemPos);
                oByteArray.WriteUInt(DestItemLucky);
                oByteArray.WriteUInt(DestTmplID);
            }
            else
            {
                SrcItemPos = oByteArray.ReadUInt();
                SrcTmplID = oByteArray.ReadUInt();
                DestItemPos = oByteArray.ReadUInt();
                DestItemLucky = oByteArray.ReadUInt();
                DestTmplID = oByteArray.ReadUInt();
            }
        }
		public ReqTransferLuckyNotice()
		{
			PacketID = 277;
		}
    }

    /// <summary>
    ///  [请求类] 武器幸运转移通知CacheServer 创建者
    /// </summary>
    [Package(277)]
    public partial class ReqTransferLuckyNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferLuckyNotice();
        }
    }


    /// <summary>
    ///  [响应类]武器幸运转移通知CacheServer
    /// </summary>
    public partial class ResTransferLuckyNotice: Packet 
    {

        public override Packet Clone()
        {
            ResTransferLuckyNotice pkg = new ResTransferLuckyNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResTransferLuckyNotice()
		{
			PacketID = 278;
		}
    }

    /// <summary>
    ///  [响应类] 武器幸运转移通知CacheServer 创建者
    /// </summary>
    [Package(278)]
    public partial class ResTransferLuckyNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferLuckyNotice();
        }
    }


    /// <summary>
    ///  [请求类]申请组队应答
    /// </summary>
    public partial class ReqApplyJoinGroupReply: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 0-同意入队，1-拒绝入队
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ReqApplyJoinGroupReply pkg = new ReqApplyJoinGroupReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Result);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Result = oByteArray.ReadByte();
            }
        }
		public ReqApplyJoinGroupReply()
		{
			PacketID = 279;
		}
    }

    /// <summary>
    ///  [请求类] 申请组队应答 创建者
    /// </summary>
    [Package(279)]
    public partial class ReqApplyJoinGroupReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqApplyJoinGroupReply();
        }
    }


    /// <summary>
    ///  [响应类]申请组队应答
    /// </summary>
    public partial class ResApplyJoinGroupReply: Packet 
    {
        /// <summary>
        /// 0-同意入队，1-拒绝入队，101-申请入队玩家已离线
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResApplyJoinGroupReply pkg = new ResApplyJoinGroupReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResApplyJoinGroupReply()
		{
			PacketID = 280;
		}
    }

    /// <summary>
    ///  [响应类] 申请组队应答 创建者
    /// </summary>
    [Package(280)]
    public partial class ResApplyJoinGroupReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResApplyJoinGroupReply();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服新增物品
    /// </summary>
    public partial class ReqNoticeAddItem: Packet 
    {
        /// <summary>
        /// 所有者ID
        /// </summary>
        public ulong OwnerID;
        /// <summary>
        /// 物品信息
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();

        public override Packet Clone()
        {
            ReqNoticeAddItem pkg = new ReqNoticeAddItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OwnerID = OwnerID;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(OwnerID);
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                OwnerID = oByteArray.ReadUInt64();
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeAddItem()
		{
			PacketID = 281;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服新增物品 创建者
    /// </summary>
    [Package(281)]
    public partial class ReqNoticeAddItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeAddItem();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服新增物品
    /// </summary>
    public partial class ResNoticeAddItem: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeAddItem pkg = new ResNoticeAddItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeAddItem()
		{
			PacketID = 282;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服新增物品 创建者
    /// </summary>
    [Package(282)]
    public partial class ResNoticeAddItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeAddItem();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新物品数量
    /// </summary>
    public partial class ReqNoticeUpdateItemNum: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 物品数量
        /// </summary>
        public uint ItemNum;

        public override Packet Clone()
        {
            ReqNoticeUpdateItemNum pkg = new ReqNoticeUpdateItemNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.ItemNum = ItemNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ItemNum);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                ItemNum = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeUpdateItemNum()
		{
			PacketID = 283;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新物品数量 创建者
    /// </summary>
    [Package(283)]
    public partial class ReqNoticeUpdateItemNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemNum();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新物品数量
    /// </summary>
    public partial class ResNoticeUpdateItemNum: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateItemNum pkg = new ResNoticeUpdateItemNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateItemNum()
		{
			PacketID = 284;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新物品数量 创建者
    /// </summary>
    [Package(284)]
    public partial class ResNoticeUpdateItemNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemNum();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服删除物品
    /// </summary>
    public partial class ReqNoticeDeleteItem: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqNoticeDeleteItem pkg = new ReqNoticeDeleteItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeDeleteItem()
		{
			PacketID = 285;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服删除物品 创建者
    /// </summary>
    [Package(285)]
    public partial class ReqNoticeDeleteItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDeleteItem();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服删除物品
    /// </summary>
    public partial class ResNoticeDeleteItem: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeDeleteItem pkg = new ResNoticeDeleteItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeDeleteItem()
		{
			PacketID = 286;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服删除物品 创建者
    /// </summary>
    [Package(286)]
    public partial class ResNoticeDeleteItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDeleteItem();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新物品存放位置
    /// </summary>
    public partial class ReqNoticeUpdateItemPos: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 索引位置
        /// </summary>
        public ushort ItemPos;

        public override Packet Clone()
        {
            ReqNoticeUpdateItemPos pkg = new ReqNoticeUpdateItemPos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUShort(ItemPos);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                ItemPos = oByteArray.ReadUShort();
            }
        }
		public ReqNoticeUpdateItemPos()
		{
			PacketID = 287;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新物品存放位置 创建者
    /// </summary>
    [Package(287)]
    public partial class ReqNoticeUpdateItemPosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemPos();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新物品存放位置
    /// </summary>
    public partial class ResNoticeUpdateItemPos: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateItemPos pkg = new ResNoticeUpdateItemPos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateItemPos()
		{
			PacketID = 288;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新物品存放位置 创建者
    /// </summary>
    [Package(288)]
    public partial class ResNoticeUpdateItemPosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemPos();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新物品强化属性
    /// </summary>
    public partial class ReqNoticeUpdateItemMaxStrength: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 最大强化等级
        /// </summary>
        public uint MaxStrength;

        public override Packet Clone()
        {
            ReqNoticeUpdateItemMaxStrength pkg = new ReqNoticeUpdateItemMaxStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.MaxStrength = MaxStrength;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MaxStrength);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                MaxStrength = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeUpdateItemMaxStrength()
		{
			PacketID = 289;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新物品强化属性 创建者
    /// </summary>
    [Package(289)]
    public partial class ReqNoticeUpdateItemMaxStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemMaxStrength();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新物品强化属性
    /// </summary>
    public partial class ResNoticeUpdateItemMaxStrength: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateItemMaxStrength pkg = new ResNoticeUpdateItemMaxStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateItemMaxStrength()
		{
			PacketID = 290;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新物品强化属性 创建者
    /// </summary>
    [Package(290)]
    public partial class ResNoticeUpdateItemMaxStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemMaxStrength();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新物品注灵属性
    /// </summary>
    public partial class ReqNoticeUpdateItemFixSoul: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 注灵等级
        /// </summary>
        public uint FixSoulLv;

        public override Packet Clone()
        {
            ReqNoticeUpdateItemFixSoul pkg = new ReqNoticeUpdateItemFixSoul();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.FixSoulLv = FixSoulLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(FixSoulLv);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                FixSoulLv = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeUpdateItemFixSoul()
		{
			PacketID = 291;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新物品注灵属性 创建者
    /// </summary>
    [Package(291)]
    public partial class ReqNoticeUpdateItemFixSoulCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemFixSoul();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新物品注灵属性
    /// </summary>
    public partial class ResNoticeUpdateItemFixSoul: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateItemFixSoul pkg = new ResNoticeUpdateItemFixSoul();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateItemFixSoul()
		{
			PacketID = 292;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新物品注灵属性 创建者
    /// </summary>
    [Package(292)]
    public partial class ResNoticeUpdateItemFixSoulCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemFixSoul();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新物品幸运值属性
    /// </summary>
    public partial class ReqNoticeUpdateItemLucky: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 幸运值
        /// </summary>
        public byte Lucky;

        public override Packet Clone()
        {
            ReqNoticeUpdateItemLucky pkg = new ReqNoticeUpdateItemLucky();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.Lucky = Lucky;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Lucky);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                Lucky = oByteArray.ReadByte();
            }
        }
		public ReqNoticeUpdateItemLucky()
		{
			PacketID = 293;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新物品幸运值属性 创建者
    /// </summary>
    [Package(293)]
    public partial class ReqNoticeUpdateItemLuckyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemLucky();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新物品幸运值属性
    /// </summary>
    public partial class ResNoticeUpdateItemLucky: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateItemLucky pkg = new ResNoticeUpdateItemLucky();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateItemLucky()
		{
			PacketID = 294;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新物品幸运值属性 创建者
    /// </summary>
    [Package(294)]
    public partial class ResNoticeUpdateItemLuckyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemLucky();
        }
    }


    /// <summary>
    ///  [请求类]移除队员
    /// </summary>
    public partial class ReqRemoveGroupMember: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqRemoveGroupMember pkg = new ReqRemoveGroupMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqRemoveGroupMember()
		{
			PacketID = 295;
		}
    }

    /// <summary>
    ///  [请求类] 移除队员 创建者
    /// </summary>
    [Package(295)]
    public partial class ReqRemoveGroupMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveGroupMember();
        }
    }


    /// <summary>
    ///  [响应类]移除队员
    /// </summary>
    public partial class ResRemoveGroupMember: Packet 
    {
        /// <summary>
        /// 0-移除成功，1-不是队长不能移除，2-不能移除自己，3-玩家已离线
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResRemoveGroupMember pkg = new ResRemoveGroupMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResRemoveGroupMember()
		{
			PacketID = 296;
		}
    }

    /// <summary>
    ///  [响应类] 移除队员 创建者
    /// </summary>
    [Package(296)]
    public partial class ResRemoveGroupMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveGroupMember();
        }
    }


    /// <summary>
    ///  [请求类]委任队长
    /// </summary>
    public partial class ReqEntrustGroupLeader: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqEntrustGroupLeader pkg = new ReqEntrustGroupLeader();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqEntrustGroupLeader()
		{
			PacketID = 297;
		}
    }

    /// <summary>
    ///  [请求类] 委任队长 创建者
    /// </summary>
    [Package(297)]
    public partial class ReqEntrustGroupLeaderCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEntrustGroupLeader();
        }
    }


    /// <summary>
    ///  [响应类]委任队长
    /// </summary>
    public partial class ResEntrustGroupLeader: Packet 
    {
        /// <summary>
        /// 0-成功，1-委任玩家不在线，2-自己不是队长,3-委任玩家不再队伍中，4-不能委任自己
        /// </summary>
        public byte Result;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResEntrustGroupLeader pkg = new ResEntrustGroupLeader();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadByte();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResEntrustGroupLeader()
		{
			PacketID = 298;
		}
    }

    /// <summary>
    ///  [响应类] 委任队长 创建者
    /// </summary>
    [Package(298)]
    public partial class ResEntrustGroupLeaderCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEntrustGroupLeader();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端物品数量改变
    /// </summary>
    public partial class ReqUpdateItemNum: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemNum pkg = new ReqUpdateItemNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemNum()
		{
			PacketID = 299;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端物品数量改变 创建者
    /// </summary>
    [Package(299)]
    public partial class ReqUpdateItemNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemNum();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端物品数量改变
    /// </summary>
    public partial class ResUpdateItemNum: Packet 
    {
        /// <summary>
        /// 索引位置
        /// </summary>
        public int ItemPos;
        /// <summary>
        /// 物品数量，0-删除物品，其他更新数量
        /// </summary>
        public uint ItemNum;
        /// <summary>
        /// 客户端提示
        /// </summary>
        public bool Notice;
        /// <summary>
        /// 改变类型
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResUpdateItemNum pkg = new ResUpdateItemNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            pkg.ItemNum = ItemNum;
            pkg.Notice = Notice;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(ItemPos);
                oByteArray.WriteUInt(ItemNum);
                oByteArray.WriteBoolean(Notice);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                ItemPos = oByteArray.ReadInt();
                ItemNum = oByteArray.ReadUInt();
                Notice = oByteArray.ReadBoolean();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResUpdateItemNum()
		{
			PacketID = 300;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端物品数量改变 创建者
    /// </summary>
    [Package(300)]
    public partial class ResUpdateItemNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemNum();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端新增物品
    /// </summary>
    public partial class ReqAddPlayerItem: Packet 
    {

        public override Packet Clone()
        {
            ReqAddPlayerItem pkg = new ReqAddPlayerItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddPlayerItem()
		{
			PacketID = 301;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端新增物品 创建者
    /// </summary>
    [Package(301)]
    public partial class ReqAddPlayerItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddPlayerItem();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端新增物品
    /// </summary>
    public partial class ResAddPlayerItem: Packet 
    {
        /// <summary>
        /// 客户端是否通知
        /// </summary>
        public bool Notice;
        /// <summary>
        /// 物品信息
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();
        /// <summary>
        /// 添加类型
        /// </summary>
        public uint LogType;

        public override Packet Clone()
        {
            ResAddPlayerItem pkg = new ResAddPlayerItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Notice = Notice;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            pkg.LogType = LogType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Notice);
                ItemInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(LogType);
            }
            else
            {
                Notice = oByteArray.ReadBoolean();
                ItemInfo.Serializtion(oByteArray, bSerialize);
                LogType = oByteArray.ReadUInt();
            }
        }
		public ResAddPlayerItem()
		{
			PacketID = 302;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端新增物品 创建者
    /// </summary>
    [Package(302)]
    public partial class ResAddPlayerItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddPlayerItem();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新物品强化属性
    /// </summary>
    public partial class ReqUpdateItemStrength: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemStrength pkg = new ReqUpdateItemStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemStrength()
		{
			PacketID = 303;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新物品强化属性 创建者
    /// </summary>
    [Package(303)]
    public partial class ReqUpdateItemStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemStrength();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新物品强化属性
    /// </summary>
    public partial class ResUpdateItemStrength: Packet 
    {
        /// <summary>
        /// 索引位置
        /// </summary>
        public uint ItemPos;
        /// <summary>
        /// 强化等级
        /// </summary>
        public uint StrengthLv;

        public override Packet Clone()
        {
            ResUpdateItemStrength pkg = new ResUpdateItemStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            pkg.StrengthLv = StrengthLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
                oByteArray.WriteUInt(StrengthLv);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
                StrengthLv = oByteArray.ReadUInt();
            }
        }
		public ResUpdateItemStrength()
		{
			PacketID = 304;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新物品强化属性 创建者
    /// </summary>
    [Package(304)]
    public partial class ResUpdateItemStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemStrength();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新物品存放位置
    /// </summary>
    public partial class ReqUpdateItemPos: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemPos pkg = new ReqUpdateItemPos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemPos()
		{
			PacketID = 305;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新物品存放位置 创建者
    /// </summary>
    [Package(305)]
    public partial class ReqUpdateItemPosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemPos();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新物品存放位置
    /// </summary>
    public partial class ResUpdateItemPos: Packet 
    {
        /// <summary>
        /// 索引位置1
        /// </summary>
        public ushort ItemPos1;
        /// <summary>
        /// 索引位置2
        /// </summary>
        public ushort ItemPos2;

        public override Packet Clone()
        {
            ResUpdateItemPos pkg = new ResUpdateItemPos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos1 = ItemPos1;
            pkg.ItemPos2 = ItemPos2;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(ItemPos1);
                oByteArray.WriteUShort(ItemPos2);
            }
            else
            {
                ItemPos1 = oByteArray.ReadUShort();
                ItemPos2 = oByteArray.ReadUShort();
            }
        }
		public ResUpdateItemPos()
		{
			PacketID = 306;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新物品存放位置 创建者
    /// </summary>
    [Package(306)]
    public partial class ResUpdateItemPosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemPos();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新物品注灵属性
    /// </summary>
    public partial class ReqUpdateItemFixSoul: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemFixSoul pkg = new ReqUpdateItemFixSoul();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemFixSoul()
		{
			PacketID = 307;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新物品注灵属性 创建者
    /// </summary>
    [Package(307)]
    public partial class ReqUpdateItemFixSoulCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemFixSoul();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新物品注灵属性
    /// </summary>
    public partial class ResUpdateItemFixSoul: Packet 
    {
        /// <summary>
        /// 物品索引
        /// </summary>
        public uint ItemPos;
        /// <summary>
        /// 注灵等级
        /// </summary>
        public uint FixSoulLv;

        public override Packet Clone()
        {
            ResUpdateItemFixSoul pkg = new ResUpdateItemFixSoul();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            pkg.FixSoulLv = FixSoulLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
                oByteArray.WriteUInt(FixSoulLv);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
                FixSoulLv = oByteArray.ReadUInt();
            }
        }
		public ResUpdateItemFixSoul()
		{
			PacketID = 308;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新物品注灵属性 创建者
    /// </summary>
    [Package(308)]
    public partial class ResUpdateItemFixSoulCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemFixSoul();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新物品幸运值属性
    /// </summary>
    public partial class ReqUpdateItemLucky: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemLucky pkg = new ReqUpdateItemLucky();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemLucky()
		{
			PacketID = 309;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新物品幸运值属性 创建者
    /// </summary>
    [Package(309)]
    public partial class ReqUpdateItemLuckyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemLucky();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新物品幸运值属性
    /// </summary>
    public partial class ResUpdateItemLucky: Packet 
    {
        /// <summary>
        /// 物品索引
        /// </summary>
        public uint ItemPos;
        /// <summary>
        /// 幸运值
        /// </summary>
        public byte Lucky;

        public override Packet Clone()
        {
            ResUpdateItemLucky pkg = new ResUpdateItemLucky();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            pkg.Lucky = Lucky;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
                oByteArray.WriteByte(Lucky);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
                Lucky = oByteArray.ReadByte();
            }
        }
		public ResUpdateItemLucky()
		{
			PacketID = 310;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新物品幸运值属性 创建者
    /// </summary>
    [Package(310)]
    public partial class ResUpdateItemLuckyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemLucky();
        }
    }


    /// <summary>
    ///  [请求类]更新模板ID
    /// </summary>
    public partial class ReqUpdateTmpID: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateTmpID pkg = new ReqUpdateTmpID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateTmpID()
		{
			PacketID = 311;
		}
    }

    /// <summary>
    ///  [请求类] 更新模板ID 创建者
    /// </summary>
    [Package(311)]
    public partial class ReqUpdateTmpIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTmpID();
        }
    }


    /// <summary>
    ///  [响应类]更新模板ID
    /// </summary>
    public partial class ResUpdateTmpID: Packet 
    {
        /// <summary>
        /// 物品位置
        /// </summary>
        public uint Pos;
        /// <summary>
        /// 新模板ID
        /// </summary>
        public uint TmpID;

        public override Packet Clone()
        {
            ResUpdateTmpID pkg = new ResUpdateTmpID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            pkg.TmpID = TmpID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Pos);
                oByteArray.WriteUInt(TmpID);
            }
            else
            {
                Pos = oByteArray.ReadUInt();
                TmpID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateTmpID()
		{
			PacketID = 312;
		}
    }

    /// <summary>
    ///  [响应类] 更新模板ID 创建者
    /// </summary>
    [Package(312)]
    public partial class ResUpdateTmpIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTmpID();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服务器玩家仍物品
    /// </summary>
    public partial class ReqNoticeDiscardItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();

        public override Packet Clone()
        {
            ReqNoticeDiscardItem pkg = new ReqNoticeDiscardItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapGuid = MapGuid;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapGuid = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeDiscardItem()
		{
			PacketID = 313;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服务器玩家仍物品 创建者
    /// </summary>
    [Package(313)]
    public partial class ReqNoticeDiscardItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDiscardItem();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服务器玩家仍物品
    /// </summary>
    public partial class ResNoticeDiscardItem: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeDiscardItem pkg = new ResNoticeDiscardItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeDiscardItem()
		{
			PacketID = 314;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服务器玩家仍物品 创建者
    /// </summary>
    [Package(314)]
    public partial class ResNoticeDiscardItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDiscardItem();
        }
    }


    /// <summary>
    ///  [请求类]初始化全局数据001：初始化排行榜信息
    /// </summary>
    public partial class ReqInitializeServer001: Packet 
    {

        public override Packet Clone()
        {
            ReqInitializeServer001 pkg = new ReqInitializeServer001();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitializeServer001()
		{
			PacketID = 315;
		}
    }

    /// <summary>
    ///  [请求类] 初始化全局数据001：初始化排行榜信息 创建者
    /// </summary>
    [Package(315)]
    public partial class ReqInitializeServer001Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitializeServer001();
        }
    }


    /// <summary>
    ///  [响应类]初始化全局数据001：初始化排行榜信息
    /// </summary>
    public partial class ResInitializeServer001: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Level;
        /// <summary>
        /// 充值数
        /// </summary>
        public uint PayNum;
        /// <summary>
        /// 境界等级
        /// </summary>
        public uint StateLv;
        /// <summary>
        /// 1-物理攻击力排行，2-魔法攻击力排行，3-道术攻击力排，4-充值排行榜，5-境界等级排行榜
        /// </summary>
        public byte Type;
        /// <summary>
        /// 1-物理攻击，2-魔法攻击，3-道术攻击
        /// </summary>
        public uint Attack;
        /// <summary>
        /// 翅膀等级
        /// </summary>
        public uint WingLv;
        /// <summary>
        /// 品阶
        /// </summary>
        public uint OfficiclRank;
        /// <summary>
        /// 玩家昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 登录IP
        /// </summary>
        public string LoginIP;
        /// <summary>
        /// 英雄等级(ID)
        /// </summary>
        public uint HeroID;
        /// <summary>
        /// 得到英雄时间戳
        /// </summary>
        public uint GetHeroTime;
        /// <summary>
        /// 排序主属性
        /// </summary>
        public uint RankMainValue;
        /// <summary>
        /// 用于排序的副属性
        /// </summary>
        public List<uint> RankSubValueVec = new List<uint>();
        /// <summary>
        /// 行会名字
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 平台VIP TID
        /// </summary>
        public uint PlatfromVipTID;
        /// <summary>
        /// 排序第二属性
        /// </summary>
        public uint uSecondValue;

        public override Packet Clone()
        {
            ResInitializeServer001 pkg = new ResInitializeServer001();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Sex = Sex;
            pkg.Career = Career;
            pkg.Level = Level;
            pkg.PayNum = PayNum;
            pkg.StateLv = StateLv;
            pkg.Type = Type;
            pkg.Attack = Attack;
            pkg.WingLv = WingLv;
            pkg.OfficiclRank = OfficiclRank;
            pkg.NickName = NickName;
            pkg.LoginIP = LoginIP;
            pkg.HeroID = HeroID;
            pkg.GetHeroTime = GetHeroTime;
            pkg.RankMainValue = RankMainValue;
            foreach (var item in RankSubValueVec)
            {
                pkg.RankSubValueVec.Add(item);
            }
            pkg.GuildName = GuildName;
            pkg.PlatfromVipTID = PlatfromVipTID;
            pkg.uSecondValue = uSecondValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteByte(Career);
                oByteArray.WriteUInt(Level);
                oByteArray.WriteUInt(PayNum);
                oByteArray.WriteUInt(StateLv);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(Attack);
                oByteArray.WriteUInt(WingLv);
                oByteArray.WriteUInt(OfficiclRank);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUTF(LoginIP);
                oByteArray.WriteUInt(HeroID);
                oByteArray.WriteUInt(GetHeroTime);
                oByteArray.WriteUInt(RankMainValue);
                oByteArray.WriteUShort((ushort)RankSubValueVec.Count);
                for (int i = 0; i < RankSubValueVec.Count; i++)
                {
                    oByteArray.WriteUInt(RankSubValueVec[i]);
                }
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUInt(PlatfromVipTID);
                oByteArray.WriteUInt(uSecondValue);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Sex = oByteArray.ReadByte();
                Career = oByteArray.ReadByte();
                Level = oByteArray.ReadUInt();
                PayNum = oByteArray.ReadUInt();
                StateLv = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                Attack = oByteArray.ReadUInt();
                WingLv = oByteArray.ReadUInt();
                OfficiclRank = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                LoginIP = oByteArray.ReadUTF();
                HeroID = oByteArray.ReadUInt();
                GetHeroTime = oByteArray.ReadUInt();
                RankMainValue = oByteArray.ReadUInt();
                int RankSubValueVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankSubValueVecCount; i++)
                {
                    RankSubValueVec.Add(oByteArray.ReadUInt());
                }
                GuildName = oByteArray.ReadUTF();
                PlatfromVipTID = oByteArray.ReadUInt();
                uSecondValue = oByteArray.ReadUInt();
            }
        }
		public ResInitializeServer001()
		{
			PacketID = 316;
		}
    }

    /// <summary>
    ///  [响应类] 初始化全局数据001：初始化排行榜信息 创建者
    /// </summary>
    [Package(316)]
    public partial class ResInitializeServer001Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitializeServer001();
        }
    }


    /// <summary>
    ///  [请求类]初始化全局数据002：加载行会列表信息
    /// </summary>
    public partial class ReqInitializeServer002: Packet 
    {

        public override Packet Clone()
        {
            ReqInitializeServer002 pkg = new ReqInitializeServer002();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitializeServer002()
		{
			PacketID = 317;
		}
    }

    /// <summary>
    ///  [请求类] 初始化全局数据002：加载行会列表信息 创建者
    /// </summary>
    [Package(317)]
    public partial class ReqInitializeServer002Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitializeServer002();
        }
    }


    /// <summary>
    ///  [响应类]初始化全局数据002：加载行会列表信息
    /// </summary>
    public partial class ResInitializeServer002: Packet 
    {
        /// <summary>
        /// 工会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 聚义堂等级
        /// </summary>
        public uint ButylGitoLv;
        /// <summary>
        /// 行会基金
        /// </summary>
        public uint GuildMoney;
        /// <summary>
        /// 工会名称
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 会长名称
        /// </summary>
        public string LeaderName;
        /// <summary>
        /// 1-随便加入 2-需要审核 3-拒绝加入
        /// </summary>
        public uint GuildJoinType;
        /// <summary>
        /// 是否是沙城公会
        /// </summary>
        public byte IsShaBaKeOwner;
        /// <summary>
        /// 是否是龙城工会
        /// </summary>
        public byte IsLongChengOwner;
        /// <summary>
        /// 行会公告
        /// </summary>
        public string Note;
        /// <summary>
        /// 行会战信息
        /// </summary>
        public string GuildWarInfo;
        /// <summary>
        /// 弹劾会长玩家Guid
        /// </summary>
        public ulong ImpeachmentPlayerGuid;
        /// <summary>
        /// 弹劾时间戳
        /// </summary>
        public uint ImpeachmentEndTime;
        /// <summary>
        /// 欠钱时间戳
        /// </summary>
        public uint LastOweMoneyTime;
        /// <summary>
        /// 行会充值元宝
        /// </summary>
        public uint RechargeIgnotNum;
        /// <summary>
        /// 物品兑换境界限制是否开启
        /// </summary>
        public byte StateSet;
        /// <summary>
        /// 物品兑换职业限制是否开启
        /// </summary>
        public byte CareerSet;
        /// <summary>
        /// 祭坛等级
        /// </summary>
        public int AltarLv;
        /// <summary>
        /// 祭坛当前经验
        /// </summary>
        public uint AltarExp;
        /// <summary>
        /// 圣兽储值
        /// </summary>
        public uint TherionSavings;
        /// <summary>
        /// 上次使用改名卡时间戳
        /// </summary>
        public int UseCardTime;

        public override Packet Clone()
        {
            ResInitializeServer002 pkg = new ResInitializeServer002();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.ButylGitoLv = ButylGitoLv;
            pkg.GuildMoney = GuildMoney;
            pkg.GuildName = GuildName;
            pkg.LeaderName = LeaderName;
            pkg.GuildJoinType = GuildJoinType;
            pkg.IsShaBaKeOwner = IsShaBaKeOwner;
            pkg.IsLongChengOwner = IsLongChengOwner;
            pkg.Note = Note;
            pkg.GuildWarInfo = GuildWarInfo;
            pkg.ImpeachmentPlayerGuid = ImpeachmentPlayerGuid;
            pkg.ImpeachmentEndTime = ImpeachmentEndTime;
            pkg.LastOweMoneyTime = LastOweMoneyTime;
            pkg.RechargeIgnotNum = RechargeIgnotNum;
            pkg.StateSet = StateSet;
            pkg.CareerSet = CareerSet;
            pkg.AltarLv = AltarLv;
            pkg.AltarExp = AltarExp;
            pkg.TherionSavings = TherionSavings;
            pkg.UseCardTime = UseCardTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ButylGitoLv);
                oByteArray.WriteUInt(GuildMoney);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUTF(LeaderName);
                oByteArray.WriteUInt(GuildJoinType);
                oByteArray.WriteByte(IsShaBaKeOwner);
                oByteArray.WriteByte(IsLongChengOwner);
                oByteArray.WriteUTF(Note);
                oByteArray.WriteUTF(GuildWarInfo);
                oByteArray.WriteUInt64(ImpeachmentPlayerGuid);
                oByteArray.WriteUInt(ImpeachmentEndTime);
                oByteArray.WriteUInt(LastOweMoneyTime);
                oByteArray.WriteUInt(RechargeIgnotNum);
                oByteArray.WriteByte(StateSet);
                oByteArray.WriteByte(CareerSet);
                oByteArray.WriteInt(AltarLv);
                oByteArray.WriteUInt(AltarExp);
                oByteArray.WriteUInt(TherionSavings);
                oByteArray.WriteInt(UseCardTime);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                ButylGitoLv = oByteArray.ReadUInt();
                GuildMoney = oByteArray.ReadUInt();
                GuildName = oByteArray.ReadUTF();
                LeaderName = oByteArray.ReadUTF();
                GuildJoinType = oByteArray.ReadUInt();
                IsShaBaKeOwner = oByteArray.ReadByte();
                IsLongChengOwner = oByteArray.ReadByte();
                Note = oByteArray.ReadUTF();
                GuildWarInfo = oByteArray.ReadUTF();
                ImpeachmentPlayerGuid = oByteArray.ReadUInt64();
                ImpeachmentEndTime = oByteArray.ReadUInt();
                LastOweMoneyTime = oByteArray.ReadUInt();
                RechargeIgnotNum = oByteArray.ReadUInt();
                StateSet = oByteArray.ReadByte();
                CareerSet = oByteArray.ReadByte();
                AltarLv = oByteArray.ReadInt();
                AltarExp = oByteArray.ReadUInt();
                TherionSavings = oByteArray.ReadUInt();
                UseCardTime = oByteArray.ReadInt();
            }
        }
		public ResInitializeServer002()
		{
			PacketID = 318;
		}
    }

    /// <summary>
    ///  [响应类] 初始化全局数据002：加载行会列表信息 创建者
    /// </summary>
    [Package(318)]
    public partial class ResInitializeServer002Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitializeServer002();
        }
    }


    /// <summary>
    ///  [请求类]角色捡起物品（请求协议M2W）
    /// </summary>
    public partial class ReqNoticePickUpItem: Packet 
    {
        /// <summary>
        /// 地图物品ID
        /// </summary>
        public uint MapItemID;
        /// <summary>
        /// 地图唯一ID
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 物品信息
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();
        /// <summary>
        /// 是否丢弃的物品
        /// </summary>
        public bool bDiscardItem;

        public override Packet Clone()
        {
            ReqNoticePickUpItem pkg = new ReqNoticePickUpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapItemID = MapItemID;
            pkg.MapGuid = MapGuid;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            pkg.bDiscardItem = bDiscardItem;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapItemID);
                oByteArray.WriteUInt64(MapGuid);
                ItemInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(bDiscardItem);
            }
            else
            {
                MapItemID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                ItemInfo.Serializtion(oByteArray, bSerialize);
                bDiscardItem = oByteArray.ReadBoolean();
            }
        }
		public ReqNoticePickUpItem()
		{
			PacketID = 319;
		}
    }

    /// <summary>
    ///  [请求类] 角色捡起物品（请求协议M2W） 创建者
    /// </summary>
    [Package(319)]
    public partial class ReqNoticePickUpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePickUpItem();
        }
    }


    /// <summary>
    ///  [响应类]角色捡起物品（请求协议M2W）
    /// </summary>
    public partial class ResNoticePickUpItem: Packet 
    {

        public override Packet Clone()
        {
            ResNoticePickUpItem pkg = new ResNoticePickUpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticePickUpItem()
		{
			PacketID = 320;
		}
    }

    /// <summary>
    ///  [响应类] 角色捡起物品（请求协议M2W） 创建者
    /// </summary>
    [Package(320)]
    public partial class ResNoticePickUpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePickUpItem();
        }
    }


    /// <summary>
    ///  [请求类]初始化全局数据003：加载行会成员列表
    /// </summary>
    public partial class ReqInitializeServer003: Packet 
    {

        public override Packet Clone()
        {
            ReqInitializeServer003 pkg = new ReqInitializeServer003();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitializeServer003()
		{
			PacketID = 321;
		}
    }

    /// <summary>
    ///  [请求类] 初始化全局数据003：加载行会成员列表 创建者
    /// </summary>
    [Package(321)]
    public partial class ReqInitializeServer003Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitializeServer003();
        }
    }


    /// <summary>
    ///  [响应类]初始化全局数据003：加载行会成员列表
    /// </summary>
    public partial class ResInitializeServer003: Packet 
    {
        /// <summary>
        /// 公会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 行会职位
        /// </summary>
        public byte GuildPosition;
        /// <summary>
        /// 贡献值
        /// </summary>
        public uint DonateValue;
        /// <summary>
        /// 加入时间
        /// </summary>
        public uint JoinTime;
        /// <summary>
        /// 
        /// </summary>
        public uint Career;
        /// <summary>
        /// 
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 
        /// </summary>
        public uint OfflineTime;
        /// <summary>
        /// 
        /// </summary>
        public uint VipLv;
        /// <summary>
        /// 
        /// </summary>
        public uint PlatfromVipTID;
        /// <summary>
        /// 
        /// </summary>
        public uint Sex;
        /// <summary>
        /// 
        /// </summary>
        public string AwardInfo;

        public override Packet Clone()
        {
            ResInitializeServer003 pkg = new ResInitializeServer003();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.NickName = NickName;
            pkg.GuildPosition = GuildPosition;
            pkg.DonateValue = DonateValue;
            pkg.JoinTime = JoinTime;
            pkg.Career = Career;
            pkg.Lv = Lv;
            pkg.OfflineTime = OfflineTime;
            pkg.VipLv = VipLv;
            pkg.PlatfromVipTID = PlatfromVipTID;
            pkg.Sex = Sex;
            pkg.AwardInfo = AwardInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteByte(GuildPosition);
                oByteArray.WriteUInt(DonateValue);
                oByteArray.WriteUInt(JoinTime);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUInt(OfflineTime);
                oByteArray.WriteUInt(VipLv);
                oByteArray.WriteUInt(PlatfromVipTID);
                oByteArray.WriteUInt(Sex);
                oByteArray.WriteUTF(AwardInfo);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
                NickName = oByteArray.ReadUTF();
                GuildPosition = oByteArray.ReadByte();
                DonateValue = oByteArray.ReadUInt();
                JoinTime = oByteArray.ReadUInt();
                Career = oByteArray.ReadUInt();
                Lv = oByteArray.ReadUInt();
                OfflineTime = oByteArray.ReadUInt();
                VipLv = oByteArray.ReadUInt();
                PlatfromVipTID = oByteArray.ReadUInt();
                Sex = oByteArray.ReadUInt();
                AwardInfo = oByteArray.ReadUTF();
            }
        }
		public ResInitializeServer003()
		{
			PacketID = 322;
		}
    }

    /// <summary>
    ///  [响应类] 初始化全局数据003：加载行会成员列表 创建者
    /// </summary>
    [Package(322)]
    public partial class ResInitializeServer003Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitializeServer003();
        }
    }


    /// <summary>
    ///  [请求类]通知拾取物品成功
    /// </summary>
    public partial class ReqNoticePickItemSuccess: Packet 
    {
        /// <summary>
        /// 地图物品ID
        /// </summary>
        public uint MapItemID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ulong Guid;
        /// <summary>
        /// 物品模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqNoticePickItemSuccess pkg = new ReqNoticePickItemSuccess();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapItemID = MapItemID;
            pkg.MapGuid = MapGuid;
            pkg.Guid = Guid;
            pkg.TmplID = TmplID;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapItemID);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt64(Guid);
                oByteArray.WriteUInt(TmplID);
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapItemID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                Guid = oByteArray.ReadUInt64();
                TmplID = oByteArray.ReadUInt();
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticePickItemSuccess()
		{
			PacketID = 323;
		}
    }

    /// <summary>
    ///  [请求类] 通知拾取物品成功 创建者
    /// </summary>
    [Package(323)]
    public partial class ReqNoticePickItemSuccessCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePickItemSuccess();
        }
    }


    /// <summary>
    ///  [响应类]通知拾取物品成功
    /// </summary>
    public partial class ResNoticePickItemSuccess: Packet 
    {
        /// <summary>
        /// 地图物品ID
        /// </summary>
        public uint MapItemID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public ulong MapGuid;

        public override Packet Clone()
        {
            ResNoticePickItemSuccess pkg = new ResNoticePickItemSuccess();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapItemID = MapItemID;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapItemID);
                oByteArray.WriteUInt64(MapGuid);
            }
            else
            {
                MapItemID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
            }
        }
		public ResNoticePickItemSuccess()
		{
			PacketID = 324;
		}
    }

    /// <summary>
    ///  [响应类] 通知拾取物品成功 创建者
    /// </summary>
    [Package(324)]
    public partial class ResNoticePickItemSuccessCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePickItemSuccess();
        }
    }


    /// <summary>
    ///  [请求类]客户端捡东西协议
    /// </summary>
    public partial class ReqPickUpItem: Packet 
    {
        /// <summary>
        /// 一键拾取[坐标]
        /// </summary>
        public List<ProtocolPair> OneKey = new List<ProtocolPair>();
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;

        public override Packet Clone()
        {
            ReqPickUpItem pkg = new ReqPickUpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ProtocolPair item in OneKey)
            {
                pkg.OneKey.Add(item.Clone() as ProtocolPair);
            }
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < OneKey.Count; i++)
                {
                      OneKey[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
            }
            else
            {
                int OneKeyCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < OneKeyCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    OneKey.Add(obj);
                }
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
            }
        }
		public ReqPickUpItem()
		{
			PacketID = 325;
		}
    }

    /// <summary>
    ///  [请求类] 客户端捡东西协议 创建者
    /// </summary>
    [Package(325)]
    public partial class ReqPickUpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPickUpItem();
        }
    }


    /// <summary>
    ///  [响应类]客户端捡东西协议
    /// </summary>
    public partial class ResPickUpItem: Packet 
    {
        /// <summary>
        /// 结果0成功,1物品在冻结时间内，2无拾取权限3背包满
        /// </summary>
        public ushort Result;
        /// <summary>
        /// 模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResPickUpItem pkg = new ResPickUpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TmplID = TmplID;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(Result);
                oByteArray.WriteUInt(TmplID);
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadUShort();
                TmplID = oByteArray.ReadUInt();
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResPickUpItem()
		{
			PacketID = 326;
		}
    }

    /// <summary>
    ///  [响应类] 客户端捡东西协议 创建者
    /// </summary>
    [Package(326)]
    public partial class ResPickUpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPickUpItem();
        }
    }


    /// <summary>
    ///  [请求类]刷新怪物,此协议产生的怪物无法重生(左边为系统刷怪，右边为玩家刷怪)
    /// </summary>
    public partial class ReqSpawnMonster: Packet 
    {
        /// <summary>
        /// 怪物模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// Y坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 武器ID
        /// </summary>
        public uint WeapenID;
        /// <summary>
        /// 衣服ID
        /// </summary>
        public uint ClothesID;
        /// <summary>
        /// 翅膀等级
        /// </summary>
        public uint WingLevel;
        /// <summary>
        /// 称号
        /// </summary>
        public uint Title;
        /// <summary>
        /// 工会名
        /// </summary>
        public string GuildTitle;
        /// <summary>
        /// 玩家名字
        /// </summary>
        public string PlayerName;
        /// <summary>
        /// 威名值
        /// </summary>
        public uint Fame;
        /// <summary>
        /// 重置时间 0-不重置  1-1小时后重置
        /// </summary>
        public uint ResetTime;
        /// <summary>
        /// 公会Guid(用于公会模式NPC)
        /// </summary>
        public ulong GuildGuild;
        /// <summary>
        /// 副本唯一ID
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 最大生命值
        /// </summary>
        public uint MaxHp;

        public override Packet Clone()
        {
            ReqSpawnMonster pkg = new ReqSpawnMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TmplID = TmplID;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.WeapenID = WeapenID;
            pkg.ClothesID = ClothesID;
            pkg.WingLevel = WingLevel;
            pkg.Title = Title;
            pkg.GuildTitle = GuildTitle;
            pkg.PlayerName = PlayerName;
            pkg.Fame = Fame;
            pkg.ResetTime = ResetTime;
            pkg.GuildGuild = GuildGuild;
            pkg.MapGuid = MapGuid;
            pkg.Sex = Sex;
            pkg.Career = Career;
            pkg.MaxHp = MaxHp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(WeapenID);
                oByteArray.WriteUInt(ClothesID);
                oByteArray.WriteUInt(WingLevel);
                oByteArray.WriteUInt(Title);
                oByteArray.WriteUTF(GuildTitle);
                oByteArray.WriteUTF(PlayerName);
                oByteArray.WriteUInt(Fame);
                oByteArray.WriteUInt(ResetTime);
                oByteArray.WriteUInt64(GuildGuild);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteByte(Career);
                oByteArray.WriteUInt(MaxHp);
            }
            else
            {
                TmplID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                WeapenID = oByteArray.ReadUInt();
                ClothesID = oByteArray.ReadUInt();
                WingLevel = oByteArray.ReadUInt();
                Title = oByteArray.ReadUInt();
                GuildTitle = oByteArray.ReadUTF();
                PlayerName = oByteArray.ReadUTF();
                Fame = oByteArray.ReadUInt();
                ResetTime = oByteArray.ReadUInt();
                GuildGuild = oByteArray.ReadUInt64();
                MapGuid = oByteArray.ReadUInt64();
                Sex = oByteArray.ReadByte();
                Career = oByteArray.ReadByte();
                MaxHp = oByteArray.ReadUInt();
            }
        }
		public ReqSpawnMonster()
		{
			PacketID = 327;
		}
    }

    /// <summary>
    ///  [请求类] 刷新怪物,此协议产生的怪物无法重生(左边为系统刷怪，右边为玩家刷怪) 创建者
    /// </summary>
    [Package(327)]
    public partial class ReqSpawnMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnMonster();
        }
    }


    /// <summary>
    ///  [响应类]刷新怪物,此协议产生的怪物无法重生(左边为系统刷怪，右边为玩家刷怪)
    /// </summary>
    public partial class ResSpawnMonster: Packet 
    {
        /// <summary>
        /// 怪物模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// Y坐标
        /// </summary>
        public uint MapY;

        public override Packet Clone()
        {
            ResSpawnMonster pkg = new ResSpawnMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TmplID = TmplID;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
            }
            else
            {
                TmplID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
            }
        }
		public ResSpawnMonster()
		{
			PacketID = 328;
		}
    }

    /// <summary>
    ///  [响应类] 刷新怪物,此协议产生的怪物无法重生(左边为系统刷怪，右边为玩家刷怪) 创建者
    /// </summary>
    [Package(328)]
    public partial class ResSpawnMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnMonster();
        }
    }


    /// <summary>
    ///  [请求类]进入副本协议
    /// </summary>
    public partial class ReqEnterDungeon: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 0是开启并进入副本，1是进入队伍已有副本
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqEnterDungeon pkg = new ReqEnterDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteByte(Type);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqEnterDungeon()
		{
			PacketID = 329;
		}
    }

    /// <summary>
    ///  [请求类] 进入副本协议 创建者
    /// </summary>
    [Package(329)]
    public partial class ReqEnterDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterDungeon();
        }
    }


    /// <summary>
    ///  [响应类]进入副本协议
    /// </summary>
    public partial class ResEnterDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ResEnterDungeon pkg = new ResEnterDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ResEnterDungeon()
		{
			PacketID = 330;
		}
    }

    /// <summary>
    ///  [响应类] 进入副本协议 创建者
    /// </summary>
    [Package(330)]
    public partial class ResEnterDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterDungeon();
        }
    }


    /// <summary>
    ///  [请求类]生成NPC,GM测试
    /// </summary>
    public partial class ReqSpawnNPC: Packet 
    {
        /// <summary>
        /// NPC模板ID
        /// </summary>
        public uint TmplID;

        public override Packet Clone()
        {
            ReqSpawnNPC pkg = new ReqSpawnNPC();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TmplID = TmplID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TmplID);
            }
            else
            {
                TmplID = oByteArray.ReadUInt();
            }
        }
		public ReqSpawnNPC()
		{
			PacketID = 331;
		}
    }

    /// <summary>
    ///  [请求类] 生成NPC,GM测试 创建者
    /// </summary>
    [Package(331)]
    public partial class ReqSpawnNPCCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnNPC();
        }
    }


    /// <summary>
    ///  [响应类]生成NPC,GM测试
    /// </summary>
    public partial class ResSpawnNPC: Packet 
    {

        public override Packet Clone()
        {
            ResSpawnNPC pkg = new ResSpawnNPC();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSpawnNPC()
		{
			PacketID = 332;
		}
    }

    /// <summary>
    ///  [响应类] 生成NPC,GM测试 创建者
    /// </summary>
    [Package(332)]
    public partial class ResSpawnNPCCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnNPC();
        }
    }


    /// <summary>
    ///  [请求类]创建行会
    /// </summary>
    public partial class ReqCreateGuild: Packet 
    {
        /// <summary>
        /// 行会名称
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ReqCreateGuild pkg = new ReqCreateGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ReqCreateGuild()
		{
			PacketID = 333;
		}
    }

    /// <summary>
    ///  [请求类] 创建行会 创建者
    /// </summary>
    [Package(333)]
    public partial class ReqCreateGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateGuild();
        }
    }


    /// <summary>
    ///  [响应类]创建行会
    /// </summary>
    public partial class ResCreateGuild: Packet 
    {
        /// <summary>
        /// 0-成功 1-已在行会中 2-行会名称太长 3-缺少创建行会所需道具 100-行会名重复 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ResCreateGuild pkg = new ResCreateGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                Result = oByteArray.ReadByte();
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ResCreateGuild()
		{
			PacketID = 334;
		}
    }

    /// <summary>
    ///  [响应类] 创建行会 创建者
    /// </summary>
    [Package(334)]
    public partial class ResCreateGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateGuild();
        }
    }


    /// <summary>
    ///  [请求类]获取行会列表
    /// </summary>
    public partial class ReqGetGuildList: Packet 
    {

        public override Packet Clone()
        {
            ReqGetGuildList pkg = new ReqGetGuildList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetGuildList()
		{
			PacketID = 335;
		}
    }

    /// <summary>
    ///  [请求类] 获取行会列表 创建者
    /// </summary>
    [Package(335)]
    public partial class ReqGetGuildListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetGuildList();
        }
    }


    /// <summary>
    ///  [响应类]获取行会列表
    /// </summary>
    public partial class ResGetGuildList: Packet 
    {
        /// <summary>
        /// 行会信息列表
        /// </summary>
        public List<GuildBaseInfo> GuidlList = new List<GuildBaseInfo>();

        public override Packet Clone()
        {
            ResGetGuildList pkg = new ResGetGuildList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GuildBaseInfo item in GuidlList)
            {
                pkg.GuidlList.Add(item.Clone() as GuildBaseInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)GuidlList.Count);
                for (int i = 0; i < GuidlList.Count; i++)
                {
                    GuidlList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int GuidlListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < GuidlListCount; i++)
                {
                    GuildBaseInfo obj = new GuildBaseInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    GuidlList.Add(obj);
                }
            }
        }
		public ResGetGuildList()
		{
			PacketID = 336;
		}
    }

    /// <summary>
    ///  [响应类] 获取行会列表 创建者
    /// </summary>
    [Package(336)]
    public partial class ResGetGuildListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetGuildList();
        }
    }


    /// <summary>
    ///  [请求类]加载行会申请列表
    /// </summary>
    public partial class ReqGetGuildApplyList: Packet 
    {

        public override Packet Clone()
        {
            ReqGetGuildApplyList pkg = new ReqGetGuildApplyList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetGuildApplyList()
		{
			PacketID = 337;
		}
    }

    /// <summary>
    ///  [请求类] 加载行会申请列表 创建者
    /// </summary>
    [Package(337)]
    public partial class ReqGetGuildApplyListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetGuildApplyList();
        }
    }


    /// <summary>
    ///  [响应类]加载行会申请列表
    /// </summary>
    public partial class ResGetGuildApplyList: Packet 
    {
        /// <summary>
        /// 报名玩家列表
        /// </summary>
        public List<GuildmemberInfo> ApplyMemberList = new List<GuildmemberInfo>();

        public override Packet Clone()
        {
            ResGetGuildApplyList pkg = new ResGetGuildApplyList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GuildmemberInfo item in ApplyMemberList)
            {
                pkg.ApplyMemberList.Add(item.Clone() as GuildmemberInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ApplyMemberList.Count);
                for (int i = 0; i < ApplyMemberList.Count; i++)
                {
                    ApplyMemberList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ApplyMemberListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ApplyMemberListCount; i++)
                {
                    GuildmemberInfo obj = new GuildmemberInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ApplyMemberList.Add(obj);
                }
            }
        }
		public ResGetGuildApplyList()
		{
			PacketID = 338;
		}
    }

    /// <summary>
    ///  [响应类] 加载行会申请列表 创建者
    /// </summary>
    [Package(338)]
    public partial class ResGetGuildApplyListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetGuildApplyList();
        }
    }


    /// <summary>
    ///  [请求类]初始化全局数据004：加载所有行会物品
    /// </summary>
    public partial class ReqInitializeServer004: Packet 
    {

        public override Packet Clone()
        {
            ReqInitializeServer004 pkg = new ReqInitializeServer004();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitializeServer004()
		{
			PacketID = 339;
		}
    }

    /// <summary>
    ///  [请求类] 初始化全局数据004：加载所有行会物品 创建者
    /// </summary>
    [Package(339)]
    public partial class ReqInitializeServer004Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitializeServer004();
        }
    }


    /// <summary>
    ///  [响应类]初始化全局数据004：加载所有行会物品
    /// </summary>
    public partial class ResInitializeServer004: Packet 
    {
        /// <summary>
        /// 工会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 物品信息
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();

        public override Packet Clone()
        {
            ResInitializeServer004 pkg = new ResInitializeServer004();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResInitializeServer004()
		{
			PacketID = 340;
		}
    }

    /// <summary>
    ///  [响应类] 初始化全局数据004：加载所有行会物品 创建者
    /// </summary>
    [Package(340)]
    public partial class ResInitializeServer004Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitializeServer004();
        }
    }


    /// <summary>
    ///  [请求类]请求登陆信息完成
    /// </summary>
    public partial class ReqEnterMap008: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqEnterMap008 pkg = new ReqEnterMap008();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqEnterMap008()
		{
			PacketID = 341;
		}
    }

    /// <summary>
    ///  [请求类] 请求登陆信息完成 创建者
    /// </summary>
    [Package(341)]
    public partial class ReqEnterMap008Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap008();
        }
    }


    /// <summary>
    ///  [响应类]请求登陆信息完成
    /// </summary>
    public partial class ResEnterMap008: Packet 
    {

        public override Packet Clone()
        {
            ResEnterMap008 pkg = new ResEnterMap008();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResEnterMap008()
		{
			PacketID = 342;
		}
    }

    /// <summary>
    ///  [响应类] 请求登陆信息完成 创建者
    /// </summary>
    [Package(342)]
    public partial class ResEnterMap008Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap008();
        }
    }


    /// <summary>
    ///  [请求类]申请加入公会
    /// </summary>
    public partial class ReqApplyJoinGuild: Packet 
    {
        /// <summary>
        /// 行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 是否是最弱的工会 1是0不是
        /// </summary>
        public byte IsLastGuild;

        public override Packet Clone()
        {
            ReqApplyJoinGuild pkg = new ReqApplyJoinGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.IsLastGuild = IsLastGuild;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(IsLastGuild);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                IsLastGuild = oByteArray.ReadByte();
            }
        }
		public ReqApplyJoinGuild()
		{
			PacketID = 343;
		}
    }

    /// <summary>
    ///  [请求类] 申请加入公会 创建者
    /// </summary>
    [Package(343)]
    public partial class ReqApplyJoinGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqApplyJoinGuild();
        }
    }


    /// <summary>
    ///  [响应类]申请加入公会
    /// </summary>
    public partial class ResApplyJoinGuild: Packet 
    {
        /// <summary>
        /// 0-成功没有直接加入行会 1-成功直接加入行会 2-申请加入行会不存在 3-模板表错误 100-已在行会中 101-申请次数达到上限 102-行会不加人 103-行会人数已满
        /// </summary>
        public byte Result;
        /// <summary>
        /// 行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResApplyJoinGuild pkg = new ResApplyJoinGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                GuildID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadByte();
                GuildID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResApplyJoinGuild()
		{
			PacketID = 344;
		}
    }

    /// <summary>
    ///  [响应类] 申请加入公会 创建者
    /// </summary>
    [Package(344)]
    public partial class ResApplyJoinGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResApplyJoinGuild();
        }
    }


    /// <summary>
    ///  [请求类]通知world增加经验
    /// </summary>
    public partial class ReqAddExp: Packet 
    {
        /// <summary>
        /// 怪物ID
        /// </summary>
        public uint MonID;
        /// <summary>
        /// 玩家Guid
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图唯一Guid
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 怪物坐标X
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 怪物坐标Y
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 行会ID
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 宠物TID
        /// </summary>
        public uint PetTID;
        /// <summary>
        /// MonsterRefreshTemplate[TID]
        /// </summary>
        public uint RefreshRule;

        public override Packet Clone()
        {
            ReqAddExp pkg = new ReqAddExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonID = MonID;
            pkg.PlayerGuid = PlayerGuid;
            pkg.MapID = MapID;
            pkg.MapGuid = MapGuid;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.GuildGuid = GuildGuid;
            pkg.PetTID = PetTID;
            pkg.RefreshRule = RefreshRule;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonID);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUInt(PetTID);
                oByteArray.WriteUInt(RefreshRule);
            }
            else
            {
                MonID = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
                MapID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
                PetTID = oByteArray.ReadUInt();
                RefreshRule = oByteArray.ReadUInt();
            }
        }
		public ReqAddExp()
		{
			PacketID = 345;
		}
    }

    /// <summary>
    ///  [请求类] 通知world增加经验 创建者
    /// </summary>
    [Package(345)]
    public partial class ReqAddExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddExp();
        }
    }


    /// <summary>
    ///  [响应类]通知world增加经验
    /// </summary>
    public partial class ResAddExp: Packet 
    {

        public override Packet Clone()
        {
            ResAddExp pkg = new ResAddExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResAddExp()
		{
			PacketID = 346;
		}
    }

    /// <summary>
    ///  [响应类] 通知world增加经验 创建者
    /// </summary>
    [Package(346)]
    public partial class ResAddExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddExp();
        }
    }


    /// <summary>
    ///  [请求类]申请加入公会应答
    /// </summary>
    public partial class ReqApplyJoinGuildReply: Packet 
    {
        /// <summary>
        /// 0-同意，1-拒绝
        /// </summary>
        public byte Reply;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqApplyJoinGuildReply pkg = new ReqApplyJoinGuildReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Reply = Reply;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Reply);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Reply = oByteArray.ReadByte();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqApplyJoinGuildReply()
		{
			PacketID = 347;
		}
    }

    /// <summary>
    ///  [请求类] 申请加入公会应答 创建者
    /// </summary>
    [Package(347)]
    public partial class ReqApplyJoinGuildReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqApplyJoinGuildReply();
        }
    }


    /// <summary>
    ///  [响应类]申请加入公会应答
    /// </summary>
    public partial class ResApplyJoinGuildReply: Packet 
    {
        /// <summary>
        /// 0-成功 1-模板表错误 100-行会人数已满 101-操作者不在行会中 102-申请者已在行会中  103-加入者不在申请列表里面 104-没有权限
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResApplyJoinGuildReply pkg = new ResApplyJoinGuildReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResApplyJoinGuildReply()
		{
			PacketID = 348;
		}
    }

    /// <summary>
    ///  [响应类] 申请加入公会应答 创建者
    /// </summary>
    [Package(348)]
    public partial class ResApplyJoinGuildReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResApplyJoinGuildReply();
        }
    }


    /// <summary>
    ///  [请求类]通知CacheServer移除申请成员
    /// </summary>
    public partial class ReqNoticeRemoveApplyMember: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeRemoveApplyMember pkg = new ReqNoticeRemoveApplyMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeRemoveApplyMember()
		{
			PacketID = 349;
		}
    }

    /// <summary>
    ///  [请求类] 通知CacheServer移除申请成员 创建者
    /// </summary>
    [Package(349)]
    public partial class ReqNoticeRemoveApplyMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeRemoveApplyMember();
        }
    }


    /// <summary>
    ///  [响应类]通知CacheServer移除申请成员
    /// </summary>
    public partial class ResNoticeRemoveApplyMember: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeRemoveApplyMember pkg = new ResNoticeRemoveApplyMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeRemoveApplyMember()
		{
			PacketID = 350;
		}
    }

    /// <summary>
    ///  [响应类] 通知CacheServer移除申请成员 创建者
    /// </summary>
    [Package(350)]
    public partial class ResNoticeRemoveApplyMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeRemoveApplyMember();
        }
    }


    /// <summary>
    ///  [请求类]通知CacheServer新增公会成员
    /// </summary>
    public partial class ReqNoticeAddGuildMember: Packet 
    {
        /// <summary>
        /// 公会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 成员信息
        /// </summary>
        public GuildmemberInfo MemberInfo = new GuildmemberInfo();

        public override Packet Clone()
        {
            ReqNoticeAddGuildMember pkg = new ReqNoticeAddGuildMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.MemberInfo = MemberInfo.Clone() as GuildmemberInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                MemberInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                MemberInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeAddGuildMember()
		{
			PacketID = 351;
		}
    }

    /// <summary>
    ///  [请求类] 通知CacheServer新增公会成员 创建者
    /// </summary>
    [Package(351)]
    public partial class ReqNoticeAddGuildMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeAddGuildMember();
        }
    }


    /// <summary>
    ///  [响应类]通知CacheServer新增公会成员
    /// </summary>
    public partial class ResNoticeAddGuildMember: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeAddGuildMember pkg = new ResNoticeAddGuildMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeAddGuildMember()
		{
			PacketID = 352;
		}
    }

    /// <summary>
    ///  [响应类] 通知CacheServer新增公会成员 创建者
    /// </summary>
    [Package(352)]
    public partial class ResNoticeAddGuildMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeAddGuildMember();
        }
    }


    /// <summary>
    ///  [请求类]修改行会公告
    /// </summary>
    public partial class ReqModifyGuildNote: Packet 
    {
        /// <summary>
        /// 备注
        /// </summary>
        public string Note;
        /// <summary>
        /// 1-默认公告
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqModifyGuildNote pkg = new ReqModifyGuildNote();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Note = Note;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Note);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Note = oByteArray.ReadUTF();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqModifyGuildNote()
		{
			PacketID = 353;
		}
    }

    /// <summary>
    ///  [请求类] 修改行会公告 创建者
    /// </summary>
    [Package(353)]
    public partial class ReqModifyGuildNoteCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqModifyGuildNote();
        }
    }


    /// <summary>
    ///  [响应类]修改行会公告
    /// </summary>
    public partial class ResModifyGuildNote: Packet 
    {
        /// <summary>
        /// 0-成功，100-没有权限，101-备注文字过长 102-默认公告
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResModifyGuildNote pkg = new ResModifyGuildNote();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResModifyGuildNote()
		{
			PacketID = 354;
		}
    }

    /// <summary>
    ///  [响应类] 修改行会公告 创建者
    /// </summary>
    [Package(354)]
    public partial class ResModifyGuildNoteCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResModifyGuildNote();
        }
    }


    /// <summary>
    ///  [请求类]加载行会日志信息
    /// </summary>
    public partial class ReqInitializeServer005: Packet 
    {

        public override Packet Clone()
        {
            ReqInitializeServer005 pkg = new ReqInitializeServer005();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitializeServer005()
		{
			PacketID = 355;
		}
    }

    /// <summary>
    ///  [请求类] 加载行会日志信息 创建者
    /// </summary>
    [Package(355)]
    public partial class ReqInitializeServer005Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitializeServer005();
        }
    }


    /// <summary>
    ///  [响应类]加载行会日志信息
    /// </summary>
    public partial class ResInitializeServer005: Packet 
    {
        /// <summary>
        /// 行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 日志类型
        /// </summary>
        public uint LogType;
        /// <summary>
        /// 日志时间
        /// </summary>
        public uint CreateTime;
        /// <summary>
        /// 
        /// </summary>
        public uint Data1;
        /// <summary>
        /// 
        /// </summary>
        public uint Data2;
        /// <summary>
        /// 
        /// </summary>
        public string String1;
        /// <summary>
        /// 
        /// </summary>
        public string String2;
        /// <summary>
        /// 
        /// </summary>
        public uint Data3;
        /// <summary>
        /// 
        /// </summary>
        public string String3;

        public override Packet Clone()
        {
            ResInitializeServer005 pkg = new ResInitializeServer005();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.LogType = LogType;
            pkg.CreateTime = CreateTime;
            pkg.Data1 = Data1;
            pkg.Data2 = Data2;
            pkg.String1 = String1;
            pkg.String2 = String2;
            pkg.Data3 = Data3;
            pkg.String3 = String3;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(LogType);
                oByteArray.WriteUInt(CreateTime);
                oByteArray.WriteUInt(Data1);
                oByteArray.WriteUInt(Data2);
                oByteArray.WriteUTF(String1);
                oByteArray.WriteUTF(String2);
                oByteArray.WriteUInt(Data3);
                oByteArray.WriteUTF(String3);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                LogType = oByteArray.ReadUInt();
                CreateTime = oByteArray.ReadUInt();
                Data1 = oByteArray.ReadUInt();
                Data2 = oByteArray.ReadUInt();
                String1 = oByteArray.ReadUTF();
                String2 = oByteArray.ReadUTF();
                Data3 = oByteArray.ReadUInt();
                String3 = oByteArray.ReadUTF();
            }
        }
		public ResInitializeServer005()
		{
			PacketID = 356;
		}
    }

    /// <summary>
    ///  [响应类] 加载行会日志信息 创建者
    /// </summary>
    [Package(356)]
    public partial class ResInitializeServer005Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitializeServer005();
        }
    }


    /// <summary>
    ///  [请求类]通知CacheServer创建公会
    /// </summary>
    public partial class ReqNoticeGreateGuild: Packet 
    {
        /// <summary>
        /// 行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 聚义堂等级
        /// </summary>
        public byte ButylGitoLv;
        /// <summary>
        /// 行会资金
        /// </summary>
        public uint GuildMoney;
        /// <summary>
        /// 会长昵称
        /// </summary>
        public string LeaderName;
        /// <summary>
        /// 行会名称
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 行会加入类型1-随便加入 2-需要审核 3-拒绝加入
        /// </summary>
        public uint GuildJoinType;
        /// <summary>
        /// 行会公告
        /// </summary>
        public string GuildNotice;

        public override Packet Clone()
        {
            ReqNoticeGreateGuild pkg = new ReqNoticeGreateGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.ButylGitoLv = ButylGitoLv;
            pkg.GuildMoney = GuildMoney;
            pkg.LeaderName = LeaderName;
            pkg.GuildName = GuildName;
            pkg.GuildJoinType = GuildJoinType;
            pkg.GuildNotice = GuildNotice;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(ButylGitoLv);
                oByteArray.WriteUInt(GuildMoney);
                oByteArray.WriteUTF(LeaderName);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUInt(GuildJoinType);
                oByteArray.WriteUTF(GuildNotice);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                ButylGitoLv = oByteArray.ReadByte();
                GuildMoney = oByteArray.ReadUInt();
                LeaderName = oByteArray.ReadUTF();
                GuildName = oByteArray.ReadUTF();
                GuildJoinType = oByteArray.ReadUInt();
                GuildNotice = oByteArray.ReadUTF();
            }
        }
		public ReqNoticeGreateGuild()
		{
			PacketID = 357;
		}
    }

    /// <summary>
    ///  [请求类] 通知CacheServer创建公会 创建者
    /// </summary>
    [Package(357)]
    public partial class ReqNoticeGreateGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeGreateGuild();
        }
    }


    /// <summary>
    ///  [响应类]通知CacheServer创建公会
    /// </summary>
    public partial class ResNoticeGreateGuild: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeGreateGuild pkg = new ResNoticeGreateGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeGreateGuild()
		{
			PacketID = 358;
		}
    }

    /// <summary>
    ///  [响应类] 通知CacheServer创建公会 创建者
    /// </summary>
    [Package(358)]
    public partial class ResNoticeGreateGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeGreateGuild();
        }
    }


    /// <summary>
    ///  [请求类]退出行会
    /// </summary>
    public partial class ReqLeaveGuild: Packet 
    {

        public override Packet Clone()
        {
            ReqLeaveGuild pkg = new ReqLeaveGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqLeaveGuild()
		{
			PacketID = 359;
		}
    }

    /// <summary>
    ///  [请求类] 退出行会 创建者
    /// </summary>
    [Package(359)]
    public partial class ReqLeaveGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLeaveGuild();
        }
    }


    /// <summary>
    ///  [响应类]退出行会
    /// </summary>
    public partial class ResLeaveGuild: Packet 
    {
        /// <summary>
        /// 0-成功 1-该玩家没有行会 100-玩家被踢出行会
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResLeaveGuild pkg = new ResLeaveGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResLeaveGuild()
		{
			PacketID = 360;
		}
    }

    /// <summary>
    ///  [响应类] 退出行会 创建者
    /// </summary>
    [Package(360)]
    public partial class ResLeaveGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLeaveGuild();
        }
    }


    /// <summary>
    ///  [请求类]获取行会基本信息
    /// </summary>
    public partial class ReqNoticeGuildInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeGuildInfo pkg = new ReqNoticeGuildInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeGuildInfo()
		{
			PacketID = 361;
		}
    }

    /// <summary>
    ///  [请求类] 获取行会基本信息 创建者
    /// </summary>
    [Package(361)]
    public partial class ReqNoticeGuildInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeGuildInfo();
        }
    }


    /// <summary>
    ///  [响应类]获取行会基本信息
    /// </summary>
    public partial class ResNoticeGuildInfo: Packet 
    {
        /// <summary>
        /// 会长昵称
        /// </summary>
        public string LeaderName;
        /// <summary>
        /// 行会说明
        /// </summary>
        public string Note;
        /// <summary>
        /// 聚义堂等级
        /// </summary>
        public uint ButylGitoLv;
        /// <summary>
        /// 行会基金
        /// </summary>
        public int GuildMoney;
        /// <summary>
        /// 行会名称
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 行会人数
        /// </summary>
        public uint GuildNum;
        /// <summary>
        /// 行会GUID
        /// </summary>
        public string GuildIDStr;
        /// <summary>
        /// 1-允许随时加入 2-需要批准加入 3-暂不收人
        /// </summary>
        public uint GuildJoinType;
        /// <summary>
        /// 是否是沙巴克主人
        /// </summary>
        public uint IsShabakOwner;
        /// <summary>
        /// 弹劾会长玩家ID
        /// </summary>
        public ObjectGuidInfo ImpeachmentPlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 弹劾时间戳，到点上面那个玩家成为会长，服务器会广播客户端处理倒计时之类的就好
        /// </summary>
        public uint ImpeachmentEndTime;
        /// <summary>
        /// 物品兑换境界限制是否开启
        /// </summary>
        public byte StateSet;
        /// <summary>
        /// 物品兑换职业限制是否开启
        /// </summary>
        public byte CareerSet;
        /// <summary>
        /// 祭坛等级
        /// </summary>
        public int AltarLv;
        /// <summary>
        /// 祭坛当前经验
        /// </summary>
        public uint AltarExp;
        /// <summary>
        /// 圣兽储值
        /// </summary>
        public uint TherionSavings;
        /// <summary>
        /// 上次使用改名卡时间戳
        /// </summary>
        public int UseCardTime;

        public override Packet Clone()
        {
            ResNoticeGuildInfo pkg = new ResNoticeGuildInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LeaderName = LeaderName;
            pkg.Note = Note;
            pkg.ButylGitoLv = ButylGitoLv;
            pkg.GuildMoney = GuildMoney;
            pkg.GuildName = GuildName;
            pkg.GuildNum = GuildNum;
            pkg.GuildIDStr = GuildIDStr;
            pkg.GuildJoinType = GuildJoinType;
            pkg.IsShabakOwner = IsShabakOwner;
            pkg.ImpeachmentPlayerID = ImpeachmentPlayerID.Clone() as ObjectGuidInfo;
            pkg.ImpeachmentEndTime = ImpeachmentEndTime;
            pkg.StateSet = StateSet;
            pkg.CareerSet = CareerSet;
            pkg.AltarLv = AltarLv;
            pkg.AltarExp = AltarExp;
            pkg.TherionSavings = TherionSavings;
            pkg.UseCardTime = UseCardTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(LeaderName);
                oByteArray.WriteUTF(Note);
                oByteArray.WriteUInt(ButylGitoLv);
                oByteArray.WriteInt(GuildMoney);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUInt(GuildNum);
                oByteArray.WriteUTF(GuildIDStr);
                oByteArray.WriteUInt(GuildJoinType);
                oByteArray.WriteUInt(IsShabakOwner);
                ImpeachmentPlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ImpeachmentEndTime);
                oByteArray.WriteByte(StateSet);
                oByteArray.WriteByte(CareerSet);
                oByteArray.WriteInt(AltarLv);
                oByteArray.WriteUInt(AltarExp);
                oByteArray.WriteUInt(TherionSavings);
                oByteArray.WriteInt(UseCardTime);
            }
            else
            {
                LeaderName = oByteArray.ReadUTF();
                Note = oByteArray.ReadUTF();
                ButylGitoLv = oByteArray.ReadUInt();
                GuildMoney = oByteArray.ReadInt();
                GuildName = oByteArray.ReadUTF();
                GuildNum = oByteArray.ReadUInt();
                GuildIDStr = oByteArray.ReadUTF();
                GuildJoinType = oByteArray.ReadUInt();
                IsShabakOwner = oByteArray.ReadUInt();
                ImpeachmentPlayerID.Serializtion(oByteArray, bSerialize);
                ImpeachmentEndTime = oByteArray.ReadUInt();
                StateSet = oByteArray.ReadByte();
                CareerSet = oByteArray.ReadByte();
                AltarLv = oByteArray.ReadInt();
                AltarExp = oByteArray.ReadUInt();
                TherionSavings = oByteArray.ReadUInt();
                UseCardTime = oByteArray.ReadInt();
            }
        }
		public ResNoticeGuildInfo()
		{
			PacketID = 362;
		}
    }

    /// <summary>
    ///  [响应类] 获取行会基本信息 创建者
    /// </summary>
    [Package(362)]
    public partial class ResNoticeGuildInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeGuildInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知CacheServer添加行会日志
    /// </summary>
    public partial class ReqNoticeAddGuildLog: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeAddGuildLog pkg = new ReqNoticeAddGuildLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeAddGuildLog()
		{
			PacketID = 363;
		}
    }

    /// <summary>
    ///  [请求类] 通知CacheServer添加行会日志 创建者
    /// </summary>
    [Package(363)]
    public partial class ReqNoticeAddGuildLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeAddGuildLog();
        }
    }


    /// <summary>
    ///  [响应类]通知CacheServer添加行会日志
    /// </summary>
    public partial class ResNoticeAddGuildLog: Packet 
    {
        /// <summary>
        /// 行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 日志信息
        /// </summary>
        public GuildLogInfo LogInfo = new GuildLogInfo();

        public override Packet Clone()
        {
            ResNoticeAddGuildLog pkg = new ResNoticeAddGuildLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.LogInfo = LogInfo.Clone() as GuildLogInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                LogInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                LogInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeAddGuildLog()
		{
			PacketID = 364;
		}
    }

    /// <summary>
    ///  [响应类] 通知CacheServer添加行会日志 创建者
    /// </summary>
    [Package(364)]
    public partial class ResNoticeAddGuildLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeAddGuildLog();
        }
    }


    /// <summary>
    ///  [请求类]变更行会职位
    /// </summary>
    public partial class ReqAlterGuildPosition: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 职位
        /// </summary>
        public uint Position;

        public override Packet Clone()
        {
            ReqAlterGuildPosition pkg = new ReqAlterGuildPosition();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Position = Position;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Position);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Position = oByteArray.ReadUInt();
            }
        }
		public ReqAlterGuildPosition()
		{
			PacketID = 365;
		}
    }

    /// <summary>
    ///  [请求类] 变更行会职位 创建者
    /// </summary>
    [Package(365)]
    public partial class ReqAlterGuildPositionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAlterGuildPosition();
        }
    }


    /// <summary>
    ///  [响应类]变更行会职位
    /// </summary>
    public partial class ResAlterGuildPosition: Packet 
    {
        /// <summary>
        /// 0-成功，1-操作者没有行会 2-操作者对应行会不存在 3-被操作者不是该行会成员 100-職位已滿 101-沒有權限
        /// </summary>
        public byte Result;
        /// <summary>
        /// 职位
        /// </summary>
        public uint Position;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResAlterGuildPosition pkg = new ResAlterGuildPosition();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Position = Position;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(Position);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Position = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAlterGuildPosition()
		{
			PacketID = 366;
		}
    }

    /// <summary>
    ///  [响应类] 变更行会职位 创建者
    /// </summary>
    [Package(366)]
    public partial class ResAlterGuildPositionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAlterGuildPosition();
        }
    }


    /// <summary>
    ///  [请求类]处理行会物品
    /// </summary>
    public partial class ReqTreatedGuildItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ObjectGuidInfo> ItemList = new List<ObjectGuidInfo>();
        /// <summary>
        /// 0是兑换1是捐献2是删除3是回收
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqTreatedGuildItem pkg = new ReqTreatedGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ObjectGuidInfo item in ItemList)
            {
                pkg.ItemList.Add(item.Clone() as ObjectGuidInfo);
            }
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < ItemList.Count; i++)
                {
                      ItemList[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteByte(Type);
            }
            else
            {
                int ItemListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemListCount; i++)
                {
                    ObjectGuidInfo obj = new ObjectGuidInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemList.Add(obj);
                }
                Type = oByteArray.ReadByte();
            }
        }
		public ReqTreatedGuildItem()
		{
			PacketID = 367;
		}
    }

    /// <summary>
    ///  [请求类] 处理行会物品 创建者
    /// </summary>
    [Package(367)]
    public partial class ReqTreatedGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTreatedGuildItem();
        }
    }


    /// <summary>
    ///  [响应类]处理行会物品
    /// </summary>
    public partial class ResTreatedGuildItem: Packet 
    {

        public override Packet Clone()
        {
            ResTreatedGuildItem pkg = new ResTreatedGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResTreatedGuildItem()
		{
			PacketID = 368;
		}
    }

    /// <summary>
    ///  [响应类] 处理行会物品 创建者
    /// </summary>
    [Package(368)]
    public partial class ResTreatedGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTreatedGuildItem();
        }
    }


    /// <summary>
    ///  [请求类]新增行会仓库物品
    /// </summary>
    public partial class ReqNoticeAddGuildItem: Packet 
    {
        /// <summary>
        /// 行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 物品信息
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();

        public override Packet Clone()
        {
            ReqNoticeAddGuildItem pkg = new ReqNoticeAddGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeAddGuildItem()
		{
			PacketID = 369;
		}
    }

    /// <summary>
    ///  [请求类] 新增行会仓库物品 创建者
    /// </summary>
    [Package(369)]
    public partial class ReqNoticeAddGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeAddGuildItem();
        }
    }


    /// <summary>
    ///  [响应类]新增行会仓库物品
    /// </summary>
    public partial class ResNoticeAddGuildItem: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeAddGuildItem pkg = new ResNoticeAddGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeAddGuildItem()
		{
			PacketID = 370;
		}
    }

    /// <summary>
    ///  [响应类] 新增行会仓库物品 创建者
    /// </summary>
    [Package(370)]
    public partial class ResNoticeAddGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeAddGuildItem();
        }
    }


    /// <summary>
    ///  [请求类]通知CacheServer删除行会仓库物品
    /// </summary>
    public partial class ReqNoticeDeleteGuildItem: Packet 
    {
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqNoticeDeleteGuildItem pkg = new ReqNoticeDeleteGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeDeleteGuildItem()
		{
			PacketID = 371;
		}
    }

    /// <summary>
    ///  [请求类] 通知CacheServer删除行会仓库物品 创建者
    /// </summary>
    [Package(371)]
    public partial class ReqNoticeDeleteGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDeleteGuildItem();
        }
    }


    /// <summary>
    ///  [响应类]通知CacheServer删除行会仓库物品
    /// </summary>
    public partial class ResNoticeDeleteGuildItem: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeDeleteGuildItem pkg = new ResNoticeDeleteGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeDeleteGuildItem()
		{
			PacketID = 372;
		}
    }

    /// <summary>
    ///  [响应类] 通知CacheServer删除行会仓库物品 创建者
    /// </summary>
    [Package(372)]
    public partial class ResNoticeDeleteGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDeleteGuildItem();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新血量蓝量内力最大值和当前值
    /// </summary>
    public partial class ReqUpdateObjectMaxHPMPSP: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateObjectMaxHPMPSP pkg = new ReqUpdateObjectMaxHPMPSP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateObjectMaxHPMPSP()
		{
			PacketID = 373;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新血量蓝量内力最大值和当前值 创建者
    /// </summary>
    [Package(373)]
    public partial class ReqUpdateObjectMaxHPMPSPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateObjectMaxHPMPSP();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新血量蓝量内力最大值和当前值
    /// </summary>
    public partial class ResUpdateObjectMaxHPMPSP: Packet 
    {
        /// <summary>
        /// 当前血量
        /// </summary>
        public long CurHP;
        /// <summary>
        /// 当前蓝量
        /// </summary>
        public long CurMP;
        /// <summary>
        /// 当前内力
        /// </summary>
        public long CurSP;
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 最大血量
        /// </summary>
        public long MaxHP;
        /// <summary>
        /// 最大蓝量
        /// </summary>
        public long MaxMP;
        /// <summary>
        /// 最大内力
        /// </summary>
        public long MaxSP;

        public override Packet Clone()
        {
            ResUpdateObjectMaxHPMPSP pkg = new ResUpdateObjectMaxHPMPSP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurHP = CurHP;
            pkg.CurMP = CurMP;
            pkg.CurSP = CurSP;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.MaxHP = MaxHP;
            pkg.MaxMP = MaxMP;
            pkg.MaxSP = MaxSP;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt64(CurHP);
                oByteArray.WriteInt64(CurMP);
                oByteArray.WriteInt64(CurSP);
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteInt64(MaxHP);
                oByteArray.WriteInt64(MaxMP);
                oByteArray.WriteInt64(MaxSP);
            }
            else
            {
                CurHP = oByteArray.ReadInt64();
                CurMP = oByteArray.ReadInt64();
                CurSP = oByteArray.ReadInt64();
                ObjectID.Serializtion(oByteArray, bSerialize);
                MaxHP = oByteArray.ReadInt64();
                MaxMP = oByteArray.ReadInt64();
                MaxSP = oByteArray.ReadInt64();
            }
        }
		public ResUpdateObjectMaxHPMPSP()
		{
			PacketID = 374;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新血量蓝量内力最大值和当前值 创建者
    /// </summary>
    [Package(374)]
    public partial class ResUpdateObjectMaxHPMPSPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateObjectMaxHPMPSP();
        }
    }


    /// <summary>
    ///  [请求类]取消申请加入公会
    /// </summary>
    public partial class ReqCancelApplyJoinGuild: Packet 
    {
        /// <summary>
        /// 行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqCancelApplyJoinGuild pkg = new ReqCancelApplyJoinGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqCancelApplyJoinGuild()
		{
			PacketID = 375;
		}
    }

    /// <summary>
    ///  [请求类] 取消申请加入公会 创建者
    /// </summary>
    [Package(375)]
    public partial class ReqCancelApplyJoinGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCancelApplyJoinGuild();
        }
    }


    /// <summary>
    ///  [响应类]取消申请加入公会
    /// </summary>
    public partial class ResCancelApplyJoinGuild: Packet 
    {
        /// <summary>
        /// 0-成功
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResCancelApplyJoinGuild pkg = new ResCancelApplyJoinGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResCancelApplyJoinGuild()
		{
			PacketID = 376;
		}
    }

    /// <summary>
    ///  [响应类] 取消申请加入公会 创建者
    /// </summary>
    [Package(376)]
    public partial class ResCancelApplyJoinGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCancelApplyJoinGuild();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端行会物品列表
    /// </summary>
    public partial class ReqNoticeGuildItemList: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeGuildItemList pkg = new ReqNoticeGuildItemList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeGuildItemList()
		{
			PacketID = 377;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端行会物品列表 创建者
    /// </summary>
    [Package(377)]
    public partial class ReqNoticeGuildItemListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeGuildItemList();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端行会物品列表
    /// </summary>
    public partial class ResNoticeGuildItemList: Packet 
    {
        /// <summary>
        /// 物品信息列表
        /// </summary>
        public List<GameItemInfo> ItemList = new List<GameItemInfo>();

        public override Packet Clone()
        {
            ResNoticeGuildItemList pkg = new ResNoticeGuildItemList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GameItemInfo item in ItemList)
            {
                pkg.ItemList.Add(item.Clone() as GameItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ItemList.Count);
                for (int i = 0; i < ItemList.Count; i++)
                {
                    ItemList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ItemListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemListCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemList.Add(obj);
                }
            }
        }
		public ResNoticeGuildItemList()
		{
			PacketID = 378;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端行会物品列表 创建者
    /// </summary>
    [Package(378)]
    public partial class ResNoticeGuildItemListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeGuildItemList();
        }
    }


    /// <summary>
    ///  [请求类]获取行会日志列表
    /// </summary>
    public partial class ReqGetGuildLogList: Packet 
    {

        public override Packet Clone()
        {
            ReqGetGuildLogList pkg = new ReqGetGuildLogList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetGuildLogList()
		{
			PacketID = 379;
		}
    }

    /// <summary>
    ///  [请求类] 获取行会日志列表 创建者
    /// </summary>
    [Package(379)]
    public partial class ReqGetGuildLogListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetGuildLogList();
        }
    }


    /// <summary>
    ///  [响应类]获取行会日志列表
    /// </summary>
    public partial class ResGetGuildLogList: Packet 
    {
        /// <summary>
        /// 行会日志
        /// </summary>
        public List<GuildLogInfo> LoginfoList = new List<GuildLogInfo>();

        public override Packet Clone()
        {
            ResGetGuildLogList pkg = new ResGetGuildLogList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GuildLogInfo item in LoginfoList)
            {
                pkg.LoginfoList.Add(item.Clone() as GuildLogInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)LoginfoList.Count);
                for (int i = 0; i < LoginfoList.Count; i++)
                {
                    LoginfoList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int LoginfoListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < LoginfoListCount; i++)
                {
                    GuildLogInfo obj = new GuildLogInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    LoginfoList.Add(obj);
                }
            }
        }
		public ResGetGuildLogList()
		{
			PacketID = 380;
		}
    }

    /// <summary>
    ///  [响应类] 获取行会日志列表 创建者
    /// </summary>
    [Package(380)]
    public partial class ResGetGuildLogListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetGuildLogList();
        }
    }


    /// <summary>
    ///  [请求类]增加公会物品
    /// </summary>
    public partial class ReqAddGuildItem: Packet 
    {

        public override Packet Clone()
        {
            ReqAddGuildItem pkg = new ReqAddGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddGuildItem()
		{
			PacketID = 381;
		}
    }

    /// <summary>
    ///  [请求类] 增加公会物品 创建者
    /// </summary>
    [Package(381)]
    public partial class ReqAddGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddGuildItem();
        }
    }


    /// <summary>
    ///  [响应类]增加公会物品
    /// </summary>
    public partial class ResAddGuildItem: Packet 
    {
        /// <summary>
        /// 物品列表
        /// </summary>
        public List<GameItemInfo> ItemList = new List<GameItemInfo>();
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResAddGuildItem pkg = new ResAddGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GameItemInfo item in ItemList)
            {
                pkg.ItemList.Add(item.Clone() as GameItemInfo);
            }
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ItemList.Count);
                for (int i = 0; i < ItemList.Count; i++)
                {
                    ItemList[i].Serializtion(oByteArray, bSerialize);
                }
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                int ItemListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemListCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemList.Add(obj);
                }
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddGuildItem()
		{
			PacketID = 382;
		}
    }

    /// <summary>
    ///  [响应类] 增加公会物品 创建者
    /// </summary>
    [Package(382)]
    public partial class ResAddGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddGuildItem();
        }
    }


    /// <summary>
    ///  [请求类]踢出行会
    /// </summary>
    public partial class ReqKickoutGuild: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqKickoutGuild pkg = new ReqKickoutGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqKickoutGuild()
		{
			PacketID = 383;
		}
    }

    /// <summary>
    ///  [请求类] 踢出行会 创建者
    /// </summary>
    [Package(383)]
    public partial class ReqKickoutGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKickoutGuild();
        }
    }


    /// <summary>
    ///  [响应类]踢出行会
    /// </summary>
    public partial class ResKickoutGuild: Packet 
    {
        /// <summary>
        /// 0-成功 1-操作者没有行会 2-行会不存在 100-没有权限 101-不是行会成员或已经被踢出行会 102-没有权限踢大于等于自己职位的成员
        /// </summary>
        public uint Result;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 玩家名字
        /// </summary>
        public string KickOutPlayerName;

        public override Packet Clone()
        {
            ResKickoutGuild pkg = new ResKickoutGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.KickOutPlayerName = KickOutPlayerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(KickOutPlayerName);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
                KickOutPlayerName = oByteArray.ReadUTF();
            }
        }
		public ResKickoutGuild()
		{
			PacketID = 384;
		}
    }

    /// <summary>
    ///  [响应类] 踢出行会 创建者
    /// </summary>
    [Package(384)]
    public partial class ResKickoutGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKickoutGuild();
        }
    }


    /// <summary>
    ///  [请求类]委任会长
    /// </summary>
    public partial class ReqDeputeGuildLeader: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqDeputeGuildLeader pkg = new ReqDeputeGuildLeader();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqDeputeGuildLeader()
		{
			PacketID = 385;
		}
    }

    /// <summary>
    ///  [请求类] 委任会长 创建者
    /// </summary>
    [Package(385)]
    public partial class ReqDeputeGuildLeaderCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDeputeGuildLeader();
        }
    }


    /// <summary>
    ///  [响应类]委任会长
    /// </summary>
    public partial class ResDeputeGuildLeader: Packet 
    {
        /// <summary>
        /// 0是成功，1是没行会，2是自己或者错误,没有权限;
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResDeputeGuildLeader pkg = new ResDeputeGuildLeader();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResDeputeGuildLeader()
		{
			PacketID = 386;
		}
    }

    /// <summary>
    ///  [响应类] 委任会长 创建者
    /// </summary>
    [Package(386)]
    public partial class ResDeputeGuildLeaderCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDeputeGuildLeader();
        }
    }


    /// <summary>
    ///  [请求类]新增行会成员
    /// </summary>
    public partial class ReqChangeGuildMember: Packet 
    {

        public override Packet Clone()
        {
            ReqChangeGuildMember pkg = new ReqChangeGuildMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqChangeGuildMember()
		{
			PacketID = 387;
		}
    }

    /// <summary>
    ///  [请求类] 新增行会成员 创建者
    /// </summary>
    [Package(387)]
    public partial class ReqChangeGuildMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeGuildMember();
        }
    }


    /// <summary>
    ///  [响应类]新增行会成员
    /// </summary>
    public partial class ResChangeGuildMember: Packet 
    {
        /// <summary>
        /// 成员信息
        /// </summary>
        public GuildmemberInfo MemberInfo = new GuildmemberInfo();
        /// <summary>
        /// 0是删除1是加入
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResChangeGuildMember pkg = new ResChangeGuildMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MemberInfo = MemberInfo.Clone() as GuildmemberInfo;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                MemberInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Type);
            }
            else
            {
                MemberInfo.Serializtion(oByteArray, bSerialize);
                Type = oByteArray.ReadByte();
            }
        }
		public ResChangeGuildMember()
		{
			PacketID = 388;
		}
    }

    /// <summary>
    ///  [响应类] 新增行会成员 创建者
    /// </summary>
    [Package(388)]
    public partial class ResChangeGuildMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeGuildMember();
        }
    }


    /// <summary>
    ///  [请求类]邀请交易
    /// </summary>
    public partial class ReqInviteTrade: Packet 
    {
        /// <summary>
        /// 受邀者玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqInviteTrade pkg = new ReqInviteTrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqInviteTrade()
		{
			PacketID = 389;
		}
    }

    /// <summary>
    ///  [请求类] 邀请交易 创建者
    /// </summary>
    [Package(389)]
    public partial class ReqInviteTradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInviteTrade();
        }
    }


    /// <summary>
    ///  [响应类]邀请交易
    /// </summary>
    public partial class ResInviteTrade: Packet 
    {
        /// <summary>
        /// 邀请者玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 0-成功，100-玩家不在线，101-玩家距离太远，102-对方玩家在交易中,103- 交易等级不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 邀请者昵称
        /// </summary>
        public string NickName;

        public override Packet Clone()
        {
            ResInviteTrade pkg = new ResInviteTrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Result = Result;
            pkg.NickName = NickName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUTF(NickName);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Result = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
            }
        }
		public ResInviteTrade()
		{
			PacketID = 390;
		}
    }

    /// <summary>
    ///  [响应类] 邀请交易 创建者
    /// </summary>
    [Package(390)]
    public partial class ResInviteTradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInviteTrade();
        }
    }


    /// <summary>
    ///  [请求类]邀请交易应答
    /// </summary>
    public partial class ReqInviteTradeReply: Packet 
    {
        /// <summary>
        /// 邀请者玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 0-同意交易，1-拒绝交易
        /// </summary>
        public uint Reply;

        public override Packet Clone()
        {
            ReqInviteTradeReply pkg = new ReqInviteTradeReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Reply = Reply;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Reply);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Reply = oByteArray.ReadUInt();
            }
        }
		public ReqInviteTradeReply()
		{
			PacketID = 391;
		}
    }

    /// <summary>
    ///  [请求类] 邀请交易应答 创建者
    /// </summary>
    [Package(391)]
    public partial class ReqInviteTradeReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInviteTradeReply();
        }
    }


    /// <summary>
    ///  [响应类]邀请交易应答
    /// </summary>
    public partial class ResInviteTradeReply: Packet 
    {
        /// <summary>
        /// 0-同意交易，1-拒绝交易
        /// </summary>
        public uint Reply;
        /// <summary>
        /// 邀请者昵称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 101-超出交易距离
        /// </summary>
        public uint Result;
        /// <summary>
        /// 邀请者玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResInviteTradeReply pkg = new ResInviteTradeReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Reply = Reply;
            pkg.NickName = NickName;
            pkg.Result = Result;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Reply);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUInt(Result);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Reply = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
                Result = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResInviteTradeReply()
		{
			PacketID = 392;
		}
    }

    /// <summary>
    ///  [响应类] 邀请交易应答 创建者
    /// </summary>
    [Package(392)]
    public partial class ResInviteTradeReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInviteTradeReply();
        }
    }


    /// <summary>
    ///  [请求类]地图触发事件
    /// </summary>
    public partial class ReqMapEvent: Packet 
    {
        /// <summary>
        /// 编号ID
        /// </summary>
        public uint EventDataID;

        public override Packet Clone()
        {
            ReqMapEvent pkg = new ReqMapEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EventDataID = EventDataID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EventDataID);
            }
            else
            {
                EventDataID = oByteArray.ReadUInt();
            }
        }
		public ReqMapEvent()
		{
			PacketID = 393;
		}
    }

    /// <summary>
    ///  [请求类] 地图触发事件 创建者
    /// </summary>
    [Package(393)]
    public partial class ReqMapEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMapEvent();
        }
    }


    /// <summary>
    ///  [响应类]地图触发事件
    /// </summary>
    public partial class ResMapEvent: Packet 
    {
        /// <summary>
        /// 事件ID
        /// </summary>
        public uint EventID;
        /// <summary>
        /// 时间参数
        /// </summary>
        public List<uint> EventParamsVec = new List<uint>();
        /// <summary>
        /// 事件类型
        /// </summary>
        public uint EventType;
        /// <summary>
        /// 0是成功，1是副本怪物没杀完，2是等级不足
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResMapEvent pkg = new ResMapEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EventID = EventID;
            foreach (var item in EventParamsVec)
            {
                pkg.EventParamsVec.Add(item);
            }
            pkg.EventType = EventType;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EventID);
                oByteArray.WriteUShort((ushort)EventParamsVec.Count);
                for (int i = 0; i < EventParamsVec.Count; i++)
                {
                    oByteArray.WriteUInt(EventParamsVec[i]);
                }
                oByteArray.WriteUInt(EventType);
                oByteArray.WriteByte(Result);
            }
            else
            {
                EventID = oByteArray.ReadUInt();
                int EventParamsVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < EventParamsVecCount; i++)
                {
                    EventParamsVec.Add(oByteArray.ReadUInt());
                }
                EventType = oByteArray.ReadUInt();
                Result = oByteArray.ReadByte();
            }
        }
		public ResMapEvent()
		{
			PacketID = 394;
		}
    }

    /// <summary>
    ///  [响应类] 地图触发事件 创建者
    /// </summary>
    [Package(394)]
    public partial class ResMapEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMapEvent();
        }
    }


    /// <summary>
    ///  [请求类]添加交易栏物品
    /// </summary>
    public partial class ReqAddTradeItem: Packet 
    {
        /// <summary>
        /// 背包物品格子
        /// </summary>
        public uint BagPos;

        public override Packet Clone()
        {
            ReqAddTradeItem pkg = new ReqAddTradeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BagPos = BagPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BagPos);
            }
            else
            {
                BagPos = oByteArray.ReadUInt();
            }
        }
		public ReqAddTradeItem()
		{
			PacketID = 395;
		}
    }

    /// <summary>
    ///  [请求类] 添加交易栏物品 创建者
    /// </summary>
    [Package(395)]
    public partial class ReqAddTradeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddTradeItem();
        }
    }


    /// <summary>
    ///  [响应类]添加交易栏物品
    /// </summary>
    public partial class ResAddTradeItem: Packet 
    {
        /// <summary>
        /// 0-成功，100-交易栏已满
        /// </summary>
        public uint Result;
        /// <summary>
        /// 交易栏位置
        /// </summary>
        public uint TradePos;
        /// <summary>
        /// 1-自己栏位，2-对方栏位
        /// </summary>
        public byte Place;
        /// <summary>
        /// 物品信息
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();

        public override Packet Clone()
        {
            ResAddTradeItem pkg = new ResAddTradeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TradePos = TradePos;
            pkg.Place = Place;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TradePos);
                oByteArray.WriteByte(Place);
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TradePos = oByteArray.ReadUInt();
                Place = oByteArray.ReadByte();
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddTradeItem()
		{
			PacketID = 396;
		}
    }

    /// <summary>
    ///  [响应类] 添加交易栏物品 创建者
    /// </summary>
    [Package(396)]
    public partial class ResAddTradeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddTradeItem();
        }
    }


    /// <summary>
    ///  [请求类]移除交易栏物品
    /// </summary>
    public partial class ReqRemoveTradeItem: Packet 
    {
        /// <summary>
        /// 交易栏物品
        /// </summary>
        public uint Pos;

        public override Packet Clone()
        {
            ReqRemoveTradeItem pkg = new ReqRemoveTradeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Pos);
            }
            else
            {
                Pos = oByteArray.ReadUInt();
            }
        }
		public ReqRemoveTradeItem()
		{
			PacketID = 397;
		}
    }

    /// <summary>
    ///  [请求类] 移除交易栏物品 创建者
    /// </summary>
    [Package(397)]
    public partial class ReqRemoveTradeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveTradeItem();
        }
    }


    /// <summary>
    ///  [响应类]移除交易栏物品
    /// </summary>
    public partial class ResRemoveTradeItem: Packet 
    {
        /// <summary>
        /// 0-成功
        /// </summary>
        public uint Result;
        /// <summary>
        /// 1-自己栏位，2-对方栏位
        /// </summary>
        public byte Place;
        /// <summary>
        /// 交易栏物品
        /// </summary>
        public uint Pos;

        public override Packet Clone()
        {
            ResRemoveTradeItem pkg = new ResRemoveTradeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Place = Place;
            pkg.Pos = Pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(Place);
                oByteArray.WriteUInt(Pos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Place = oByteArray.ReadByte();
                Pos = oByteArray.ReadUInt();
            }
        }
		public ResRemoveTradeItem()
		{
			PacketID = 398;
		}
    }

    /// <summary>
    ///  [响应类] 移除交易栏物品 创建者
    /// </summary>
    [Package(398)]
    public partial class ResRemoveTradeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveTradeItem();
        }
    }


    /// <summary>
    ///  [请求类]开始交易
    /// </summary>
    public partial class ReqStartTrade: Packet 
    {
        /// <summary>
        /// 目标玩家ID
        /// </summary>
        public ObjectGuidInfo TPlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqStartTrade pkg = new ReqStartTrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TPlayerID = TPlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TPlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                TPlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqStartTrade()
		{
			PacketID = 399;
		}
    }

    /// <summary>
    ///  [请求类] 开始交易 创建者
    /// </summary>
    [Package(399)]
    public partial class ReqStartTradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStartTrade();
        }
    }


    /// <summary>
    ///  [响应类]开始交易
    /// </summary>
    public partial class ResStartTrade: Packet 
    {
        /// <summary>
        /// 0-准备成功，100-对方不在线，101-距离太远，不能交易102-金币不足 103-我的背包满了 104-对方背包满了
        /// </summary>
        public uint Result;
        /// <summary>
        /// true-对方已准备，false-对方未准备
        /// </summary>
        public bool Ready;

        public override Packet Clone()
        {
            ResStartTrade pkg = new ResStartTrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Ready = Ready;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteBoolean(Ready);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Ready = oByteArray.ReadBoolean();
            }
        }
		public ResStartTrade()
		{
			PacketID = 400;
		}
    }

    /// <summary>
    ///  [响应类] 开始交易 创建者
    /// </summary>
    [Package(400)]
    public partial class ResStartTradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStartTrade();
        }
    }


    /// <summary>
    ///  [请求类]取消解散行会
    /// </summary>
    public partial class ReqCancelDisbandGuild: Packet 
    {

        public override Packet Clone()
        {
            ReqCancelDisbandGuild pkg = new ReqCancelDisbandGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCancelDisbandGuild()
		{
			PacketID = 401;
		}
    }

    /// <summary>
    ///  [请求类] 取消解散行会 创建者
    /// </summary>
    [Package(401)]
    public partial class ReqCancelDisbandGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCancelDisbandGuild();
        }
    }


    /// <summary>
    ///  [响应类]取消解散行会
    /// </summary>
    public partial class ResCancelDisbandGuild: Packet 
    {
        /// <summary>
        /// 0-成功
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResCancelDisbandGuild pkg = new ResCancelDisbandGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResCancelDisbandGuild()
		{
			PacketID = 402;
		}
    }

    /// <summary>
    ///  [响应类] 取消解散行会 创建者
    /// </summary>
    [Package(402)]
    public partial class ResCancelDisbandGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCancelDisbandGuild();
        }
    }


    /// <summary>
    ///  [请求类]交易完成
    /// </summary>
    public partial class ReqTradeComplete: Packet 
    {

        public override Packet Clone()
        {
            ReqTradeComplete pkg = new ReqTradeComplete();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTradeComplete()
		{
			PacketID = 403;
		}
    }

    /// <summary>
    ///  [请求类] 交易完成 创建者
    /// </summary>
    [Package(403)]
    public partial class ReqTradeCompleteCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTradeComplete();
        }
    }


    /// <summary>
    ///  [响应类]交易完成
    /// </summary>
    public partial class ResTradeComplete: Packet 
    {

        public override Packet Clone()
        {
            ResTradeComplete pkg = new ResTradeComplete();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResTradeComplete()
		{
			PacketID = 404;
		}
    }

    /// <summary>
    ///  [响应类] 交易完成 创建者
    /// </summary>
    [Package(404)]
    public partial class ResTradeCompleteCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTradeComplete();
        }
    }


    /// <summary>
    ///  [请求类]取消交易
    /// </summary>
    public partial class ReqCancelTrade: Packet 
    {

        public override Packet Clone()
        {
            ReqCancelTrade pkg = new ReqCancelTrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCancelTrade()
		{
			PacketID = 405;
		}
    }

    /// <summary>
    ///  [请求类] 取消交易 创建者
    /// </summary>
    [Package(405)]
    public partial class ReqCancelTradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCancelTrade();
        }
    }


    /// <summary>
    ///  [响应类]取消交易
    /// </summary>
    public partial class ResCancelTrade: Packet 
    {

        public override Packet Clone()
        {
            ResCancelTrade pkg = new ResCancelTrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResCancelTrade()
		{
			PacketID = 406;
		}
    }

    /// <summary>
    ///  [响应类] 取消交易 创建者
    /// </summary>
    [Package(406)]
    public partial class ResCancelTradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCancelTrade();
        }
    }


    /// <summary>
    ///  [请求类]开始摆摊
    /// </summary>
    public partial class ReqStartRetail: Packet 
    {
        /// <summary>
        /// 物品信息
        /// </summary>
        public List<RetailItemInfo> ItemInfoVec = new List<RetailItemInfo>();

        public override Packet Clone()
        {
            ReqStartRetail pkg = new ReqStartRetail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (RetailItemInfo item in ItemInfoVec)
            {
                pkg.ItemInfoVec.Add(item.Clone() as RetailItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < ItemInfoVec.Count; i++)
                {
                      ItemInfoVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ItemInfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemInfoVecCount; i++)
                {
                    RetailItemInfo obj = new RetailItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemInfoVec.Add(obj);
                }
            }
        }
		public ReqStartRetail()
		{
			PacketID = 407;
		}
    }

    /// <summary>
    ///  [请求类] 开始摆摊 创建者
    /// </summary>
    [Package(407)]
    public partial class ReqStartRetailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStartRetail();
        }
    }


    /// <summary>
    ///  [响应类]开始摆摊
    /// </summary>
    public partial class ResStartRetail: Packet 
    {
        /// <summary>
        /// 0-成功 1-正在摆摊 2-不在可摆摊地图和安全区 3-模板错误 4-附近有NPC 5-附近有其他玩家的摊位 6-物品非法 7-摆摊物品超过格子数
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResStartRetail pkg = new ResStartRetail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResStartRetail()
		{
			PacketID = 408;
		}
    }

    /// <summary>
    ///  [响应类] 开始摆摊 创建者
    /// </summary>
    [Package(408)]
    public partial class ResStartRetailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStartRetail();
        }
    }


    /// <summary>
    ///  [请求类]购买摊位物品
    /// </summary>
    public partial class ReqBuyRetailItem: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqBuyRetailItem pkg = new ReqBuyRetailItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqBuyRetailItem()
		{
			PacketID = 409;
		}
    }

    /// <summary>
    ///  [请求类] 购买摊位物品 创建者
    /// </summary>
    [Package(409)]
    public partial class ReqBuyRetailItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyRetailItem();
        }
    }


    /// <summary>
    ///  [响应类]购买摊位物品
    /// </summary>
    public partial class ResBuyRetailItem: Packet 
    {
        /// <summary>
        /// 100-货币不足，101-背包无空格，102-物品已出售
        /// </summary>
        public uint Result;
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResBuyRetailItem pkg = new ResBuyRetailItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResBuyRetailItem()
		{
			PacketID = 410;
		}
    }

    /// <summary>
    ///  [响应类] 购买摊位物品 创建者
    /// </summary>
    [Package(410)]
    public partial class ResBuyRetailItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyRetailItem();
        }
    }


    /// <summary>
    ///  [请求类]收摊
    /// </summary>
    public partial class ReqCloseRetail: Packet 
    {

        public override Packet Clone()
        {
            ReqCloseRetail pkg = new ReqCloseRetail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCloseRetail()
		{
			PacketID = 411;
		}
    }

    /// <summary>
    ///  [请求类] 收摊 创建者
    /// </summary>
    [Package(411)]
    public partial class ReqCloseRetailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCloseRetail();
        }
    }


    /// <summary>
    ///  [响应类]收摊
    /// </summary>
    public partial class ResCloseRetail: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResCloseRetail pkg = new ResCloseRetail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResCloseRetail()
		{
			PacketID = 412;
		}
    }

    /// <summary>
    ///  [响应类] 收摊 创建者
    /// </summary>
    [Package(412)]
    public partial class ResCloseRetailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCloseRetail();
        }
    }


    /// <summary>
    ///  [请求类]查看摊位信息
    /// </summary>
    public partial class ReqViewRetailInfo: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqViewRetailInfo pkg = new ReqViewRetailInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqViewRetailInfo()
		{
			PacketID = 413;
		}
    }

    /// <summary>
    ///  [请求类] 查看摊位信息 创建者
    /// </summary>
    [Package(413)]
    public partial class ReqViewRetailInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqViewRetailInfo();
        }
    }


    /// <summary>
    ///  [响应类]查看摊位信息
    /// </summary>
    public partial class ResViewRetailInfo: Packet 
    {
        /// <summary>
        /// 0-成功 1-自己处于摆摊状态 2;//找不到该玩家; 3;//对方不处于摆摊状态;
        /// </summary>
        public byte Result;
        /// <summary>
        /// 摊位物品Vec
        /// </summary>
        public List<RetailItemInfo> ItemInfoVec = new List<RetailItemInfo>();

        public override Packet Clone()
        {
            ResViewRetailInfo pkg = new ResViewRetailInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (RetailItemInfo item in ItemInfoVec)
            {
                pkg.ItemInfoVec.Add(item.Clone() as RetailItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUShort((ushort)ItemInfoVec.Count);
                for (int i = 0; i < ItemInfoVec.Count; i++)
                {
                    ItemInfoVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadByte();
                int ItemInfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemInfoVecCount; i++)
                {
                    RetailItemInfo obj = new RetailItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemInfoVec.Add(obj);
                }
            }
        }
		public ResViewRetailInfo()
		{
			PacketID = 414;
		}
    }

    /// <summary>
    ///  [响应类] 查看摊位信息 创建者
    /// </summary>
    [Package(414)]
    public partial class ResViewRetailInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResViewRetailInfo();
        }
    }


    /// <summary>
    ///  [请求类]修改交易金币
    /// </summary>
    public partial class ReqAlterTradeMoney: Packet 
    {
        /// <summary>
        /// 金币
        /// </summary>
        public uint GoldCoin;
        /// <summary>
        /// 元宝
        /// </summary>
        public uint Ingot;

        public override Packet Clone()
        {
            ReqAlterTradeMoney pkg = new ReqAlterTradeMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GoldCoin = GoldCoin;
            pkg.Ingot = Ingot;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(GoldCoin);
                oByteArray.WriteUInt(Ingot);
            }
            else
            {
                GoldCoin = oByteArray.ReadUInt();
                Ingot = oByteArray.ReadUInt();
            }
        }
		public ReqAlterTradeMoney()
		{
			PacketID = 415;
		}
    }

    /// <summary>
    ///  [请求类] 修改交易金币 创建者
    /// </summary>
    [Package(415)]
    public partial class ReqAlterTradeMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAlterTradeMoney();
        }
    }


    /// <summary>
    ///  [响应类]修改交易金币
    /// </summary>
    public partial class ResAlterTradeMoney: Packet 
    {
        /// <summary>
        /// 金币
        /// </summary>
        public uint GoldCoin;
        /// <summary>
        /// 元宝
        /// </summary>
        public uint Ingot;
        /// <summary>
        /// 100-交易方不在线，101-交易金币不足
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResAlterTradeMoney pkg = new ResAlterTradeMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GoldCoin = GoldCoin;
            pkg.Ingot = Ingot;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(GoldCoin);
                oByteArray.WriteUInt(Ingot);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                GoldCoin = oByteArray.ReadUInt();
                Ingot = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResAlterTradeMoney()
		{
			PacketID = 416;
		}
    }

    /// <summary>
    ///  [响应类] 修改交易金币 创建者
    /// </summary>
    [Package(416)]
    public partial class ResAlterTradeMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAlterTradeMoney();
        }
    }


    /// <summary>
    ///  [请求类]新增摆摊日志
    /// </summary>
    public partial class ReqAddRetailLog: Packet 
    {

        public override Packet Clone()
        {
            ReqAddRetailLog pkg = new ReqAddRetailLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddRetailLog()
		{
			PacketID = 417;
		}
    }

    /// <summary>
    ///  [请求类] 新增摆摊日志 创建者
    /// </summary>
    [Package(417)]
    public partial class ReqAddRetailLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddRetailLog();
        }
    }


    /// <summary>
    ///  [响应类]新增摆摊日志
    /// </summary>
    public partial class ResAddRetailLog: Packet 
    {
        /// <summary>
        /// 摆摊物品信息
        /// </summary>
        public RetailLogInfo RetailLogItem = new RetailLogInfo();

        public override Packet Clone()
        {
            ResAddRetailLog pkg = new ResAddRetailLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RetailLogItem = RetailLogItem.Clone() as RetailLogInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                RetailLogItem.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                RetailLogItem.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddRetailLog()
		{
			PacketID = 418;
		}
    }

    /// <summary>
    ///  [响应类] 新增摆摊日志 创建者
    /// </summary>
    [Package(418)]
    public partial class ResAddRetailLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddRetailLog();
        }
    }


    /// <summary>
    ///  [请求类]激活战神
    /// </summary>
    public partial class ReqActivePet: Packet 
    {
        /// <summary>
        /// 战神ID
        /// </summary>
        public uint PetID;

        public override Packet Clone()
        {
            ReqActivePet pkg = new ReqActivePet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PetID = PetID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PetID);
            }
            else
            {
                PetID = oByteArray.ReadUInt();
            }
        }
		public ReqActivePet()
		{
			PacketID = 419;
		}
    }

    /// <summary>
    ///  [请求类] 激活战神 创建者
    /// </summary>
    [Package(419)]
    public partial class ReqActivePetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqActivePet();
        }
    }


    /// <summary>
    ///  [响应类]激活战神
    /// </summary>
    public partial class ResActivePet: Packet 
    {
        /// <summary>
        /// 100-激活战神失败
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResActivePet pkg = new ResActivePet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResActivePet()
		{
			PacketID = 420;
		}
    }

    /// <summary>
    ///  [响应类] 激活战神 创建者
    /// </summary>
    [Package(420)]
    public partial class ResActivePetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResActivePet();
        }
    }


    /// <summary>
    ///  [请求类]设置出战战神
    /// </summary>
    public partial class ReqSummonPet: Packet 
    {
        /// <summary>
        /// 战神ID
        /// </summary>
        public uint PetID;

        public override Packet Clone()
        {
            ReqSummonPet pkg = new ReqSummonPet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PetID = PetID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PetID);
            }
            else
            {
                PetID = oByteArray.ReadUInt();
            }
        }
		public ReqSummonPet()
		{
			PacketID = 421;
		}
    }

    /// <summary>
    ///  [请求类] 设置出战战神 创建者
    /// </summary>
    [Package(421)]
    public partial class ReqSummonPetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSummonPet();
        }
    }


    /// <summary>
    ///  [响应类]设置出战战神
    /// </summary>
    public partial class ResSummonPet: Packet 
    {
        /// <summary>
        /// 0成功1没激活2没召唤次数3开服时间不够且vip等级不足 4该地图无法召唤战神 5-有相同战神
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResSummonPet pkg = new ResSummonPet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResSummonPet()
		{
			PacketID = 422;
		}
    }

    /// <summary>
    ///  [响应类] 设置出战战神 创建者
    /// </summary>
    [Package(422)]
    public partial class ResSummonPetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSummonPet();
        }
    }


    /// <summary>
    ///  [请求类]召唤战神
    /// </summary>
    public partial class ReqNoticeSummonPet: Packet 
    {
        /// <summary>
        /// 战神ID
        /// </summary>
        public uint PetID;
        /// <summary>
        /// true-现在可以地图上可以召唤了 false不能召唤
        /// </summary>
        public bool Result_True;

        public override Packet Clone()
        {
            ReqNoticeSummonPet pkg = new ReqNoticeSummonPet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PetID = PetID;
            pkg.Result_True = Result_True;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PetID);
                oByteArray.WriteBoolean(Result_True);
            }
            else
            {
                PetID = oByteArray.ReadUInt();
                Result_True = oByteArray.ReadBoolean();
            }
        }
		public ReqNoticeSummonPet()
		{
			PacketID = 423;
		}
    }

    /// <summary>
    ///  [请求类] 召唤战神 创建者
    /// </summary>
    [Package(423)]
    public partial class ReqNoticeSummonPetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSummonPet();
        }
    }


    /// <summary>
    ///  [响应类]召唤战神
    /// </summary>
    public partial class ResNoticeSummonPet: Packet 
    {
        /// <summary>
        /// 0-可以召唤 1-不能召唤
        /// </summary>
        public byte Result;
        /// <summary>
        /// 战神ID
        /// </summary>
        public uint PetID;

        public override Packet Clone()
        {
            ResNoticeSummonPet pkg = new ResNoticeSummonPet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PetID = PetID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(PetID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                PetID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeSummonPet()
		{
			PacketID = 424;
		}
    }

    /// <summary>
    ///  [响应类] 召唤战神 创建者
    /// </summary>
    [Package(424)]
    public partial class ResNoticeSummonPetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSummonPet();
        }
    }


    /// <summary>
    ///  [请求类]挂机辅助设置
    /// </summary>
    public partial class ReqSetAssist: Packet 
    {
        /// <summary>
        /// 生命值百分比1
        /// </summary>
        public uint HP1;
        /// <summary>
        /// 0 从小到大 1 从大到小
        /// </summary>
        public uint TMPLID1;
        /// <summary>
        /// 生命值百分比2
        /// </summary>
        public uint HP2;
        /// <summary>
        /// 0 从小到大 1 从大到小
        /// </summary>
        public uint TMPLID2;
        /// <summary>
        /// 生命值百分比3
        /// </summary>
        public uint HP3;
        /// <summary>
        /// 生命值百分比4
        /// </summary>
        public uint HP4;
        /// <summary>
        /// 选项1是否激活
        /// </summary>
        public bool IsActive1;
        /// <summary>
        /// 选项2是否激活
        /// </summary>
        public bool IsActive2;
        /// <summary>
        /// 选项3是否激活
        /// </summary>
        public bool IsActive3;
        /// <summary>
        /// 选项4是否激活
        /// </summary>
        public bool IsActive4;
        /// <summary>
        /// 选项5是否激活
        /// </summary>
        public bool IsActive5;
        /// <summary>
        /// 选项6是否激活
        /// </summary>
        public bool IsActive6;
        /// <summary>
        /// 技能1
        /// </summary>
        public bool Skill1;
        /// <summary>
        /// 技能2
        /// </summary>
        public bool Skill2;
        /// <summary>
        /// 技能3
        /// </summary>
        public bool Skill3;
        /// <summary>
        /// 自动连击
        /// </summary>
        public bool LianJi;
        /// <summary>
        /// 屏蔽震屏
        /// </summary>
        public bool ZhengPin;
        /// <summary>
        /// Tab锁敌
        /// </summary>
        public bool TabLock;
        /// <summary>
        /// 屏蔽红屏
        /// </summary>
        public bool LowBlood;
        /// <summary>
        /// 技能4
        /// </summary>
        public bool Skill4;
        /// <summary>
        /// 技能5
        /// </summary>
        public bool Skill5;
        /// <summary>
        /// 是否离线挂机
        /// </summary>
        public bool IsOffGuaJi;
        /// <summary>
        /// 微端操作
        /// </summary>
        public bool WeiDuanCaoZuo;
        /// <summary>
        /// 技能6
        /// </summary>
        public bool Skill6;

        public override Packet Clone()
        {
            ReqSetAssist pkg = new ReqSetAssist();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.HP1 = HP1;
            pkg.TMPLID1 = TMPLID1;
            pkg.HP2 = HP2;
            pkg.TMPLID2 = TMPLID2;
            pkg.HP3 = HP3;
            pkg.HP4 = HP4;
            pkg.IsActive1 = IsActive1;
            pkg.IsActive2 = IsActive2;
            pkg.IsActive3 = IsActive3;
            pkg.IsActive4 = IsActive4;
            pkg.IsActive5 = IsActive5;
            pkg.IsActive6 = IsActive6;
            pkg.Skill1 = Skill1;
            pkg.Skill2 = Skill2;
            pkg.Skill3 = Skill3;
            pkg.LianJi = LianJi;
            pkg.ZhengPin = ZhengPin;
            pkg.TabLock = TabLock;
            pkg.LowBlood = LowBlood;
            pkg.Skill4 = Skill4;
            pkg.Skill5 = Skill5;
            pkg.IsOffGuaJi = IsOffGuaJi;
            pkg.WeiDuanCaoZuo = WeiDuanCaoZuo;
            pkg.Skill6 = Skill6;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(HP1);
                oByteArray.WriteUInt(TMPLID1);
                oByteArray.WriteUInt(HP2);
                oByteArray.WriteUInt(TMPLID2);
                oByteArray.WriteUInt(HP3);
                oByteArray.WriteUInt(HP4);
                oByteArray.WriteBoolean(IsActive1);
                oByteArray.WriteBoolean(IsActive2);
                oByteArray.WriteBoolean(IsActive3);
                oByteArray.WriteBoolean(IsActive4);
                oByteArray.WriteBoolean(IsActive5);
                oByteArray.WriteBoolean(IsActive6);
                oByteArray.WriteBoolean(Skill1);
                oByteArray.WriteBoolean(Skill2);
                oByteArray.WriteBoolean(Skill3);
                oByteArray.WriteBoolean(LianJi);
                oByteArray.WriteBoolean(ZhengPin);
                oByteArray.WriteBoolean(TabLock);
                oByteArray.WriteBoolean(LowBlood);
                oByteArray.WriteBoolean(Skill4);
                oByteArray.WriteBoolean(Skill5);
                oByteArray.WriteBoolean(IsOffGuaJi);
                oByteArray.WriteBoolean(WeiDuanCaoZuo);
                oByteArray.WriteBoolean(Skill6);
            }
            else
            {
                HP1 = oByteArray.ReadUInt();
                TMPLID1 = oByteArray.ReadUInt();
                HP2 = oByteArray.ReadUInt();
                TMPLID2 = oByteArray.ReadUInt();
                HP3 = oByteArray.ReadUInt();
                HP4 = oByteArray.ReadUInt();
                IsActive1 = oByteArray.ReadBoolean();
                IsActive2 = oByteArray.ReadBoolean();
                IsActive3 = oByteArray.ReadBoolean();
                IsActive4 = oByteArray.ReadBoolean();
                IsActive5 = oByteArray.ReadBoolean();
                IsActive6 = oByteArray.ReadBoolean();
                Skill1 = oByteArray.ReadBoolean();
                Skill2 = oByteArray.ReadBoolean();
                Skill3 = oByteArray.ReadBoolean();
                LianJi = oByteArray.ReadBoolean();
                ZhengPin = oByteArray.ReadBoolean();
                TabLock = oByteArray.ReadBoolean();
                LowBlood = oByteArray.ReadBoolean();
                Skill4 = oByteArray.ReadBoolean();
                Skill5 = oByteArray.ReadBoolean();
                IsOffGuaJi = oByteArray.ReadBoolean();
                WeiDuanCaoZuo = oByteArray.ReadBoolean();
                Skill6 = oByteArray.ReadBoolean();
            }
        }
		public ReqSetAssist()
		{
			PacketID = 425;
		}
    }

    /// <summary>
    ///  [请求类] 挂机辅助设置 创建者
    /// </summary>
    [Package(425)]
    public partial class ReqSetAssistCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetAssist();
        }
    }


    /// <summary>
    ///  [响应类]挂机辅助设置
    /// </summary>
    public partial class ResSetAssist: Packet 
    {

        public override Packet Clone()
        {
            ResSetAssist pkg = new ResSetAssist();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSetAssist()
		{
			PacketID = 426;
		}
    }

    /// <summary>
    ///  [响应类] 挂机辅助设置 创建者
    /// </summary>
    [Package(426)]
    public partial class ResSetAssistCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetAssist();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端开始被击退
    /// </summary>
    public partial class ReqNoticeObjectBeginBeatBack: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeObjectBeginBeatBack pkg = new ReqNoticeObjectBeginBeatBack();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeObjectBeginBeatBack()
		{
			PacketID = 427;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端开始被击退 创建者
    /// </summary>
    [Package(427)]
    public partial class ReqNoticeObjectBeginBeatBackCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeObjectBeginBeatBack();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端开始被击退
    /// </summary>
    public partial class ResNoticeObjectBeginBeatBack: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 方向
        /// </summary>
        public uint Direct;
        /// <summary>
        /// 最大结束坐标X
        /// </summary>
        public int MaxEndX;
        /// <summary>
        /// 最大结束坐标Y
        /// </summary>
        public int MaxEndY;

        public override Packet Clone()
        {
            ResNoticeObjectBeginBeatBack pkg = new ResNoticeObjectBeginBeatBack();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.Direct = Direct;
            pkg.MaxEndX = MaxEndX;
            pkg.MaxEndY = MaxEndY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Direct);
                oByteArray.WriteInt(MaxEndX);
                oByteArray.WriteInt(MaxEndY);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                Direct = oByteArray.ReadUInt();
                MaxEndX = oByteArray.ReadInt();
                MaxEndY = oByteArray.ReadInt();
            }
        }
		public ResNoticeObjectBeginBeatBack()
		{
			PacketID = 428;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端开始被击退 创建者
    /// </summary>
    [Package(428)]
    public partial class ResNoticeObjectBeginBeatBackCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeObjectBeginBeatBack();
        }
    }


    /// <summary>
    ///  [请求类]加载辅助设置
    /// </summary>
    public partial class ReqEnterMap105: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterMap105 pkg = new ReqEnterMap105();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterMap105()
		{
			PacketID = 429;
		}
    }

    /// <summary>
    ///  [请求类] 加载辅助设置 创建者
    /// </summary>
    [Package(429)]
    public partial class ReqEnterMap105Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap105();
        }
    }


    /// <summary>
    ///  [响应类]加载辅助设置
    /// </summary>
    public partial class ResEnterMap105: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Index;
        /// <summary>
        /// 血量
        /// </summary>
        public uint HP;
        /// <summary>
        /// 物品模板ID
        /// </summary>
        public uint TMPLID;
        /// <summary>
        /// 间隔
        /// </summary>
        public uint Interval;

        public override Packet Clone()
        {
            ResEnterMap105 pkg = new ResEnterMap105();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Index = Index;
            pkg.HP = HP;
            pkg.TMPLID = TMPLID;
            pkg.Interval = Interval;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Index);
                oByteArray.WriteUInt(HP);
                oByteArray.WriteUInt(TMPLID);
                oByteArray.WriteUInt(Interval);
            }
            else
            {
                Index = oByteArray.ReadInt();
                HP = oByteArray.ReadUInt();
                TMPLID = oByteArray.ReadUInt();
                Interval = oByteArray.ReadUInt();
            }
        }
		public ResEnterMap105()
		{
			PacketID = 430;
		}
    }

    /// <summary>
    ///  [响应类] 加载辅助设置 创建者
    /// </summary>
    [Package(430)]
    public partial class ResEnterMap105Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap105();
        }
    }


    /// <summary>
    ///  [请求类]加载智能战斗设置和自动拾取
    /// </summary>
    public partial class ReqEnterMap205: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterMap205 pkg = new ReqEnterMap205();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterMap205()
		{
			PacketID = 431;
		}
    }

    /// <summary>
    ///  [请求类] 加载智能战斗设置和自动拾取 创建者
    /// </summary>
    [Package(431)]
    public partial class ReqEnterMap205Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap205();
        }
    }


    /// <summary>
    ///  [响应类]加载智能战斗设置和自动拾取
    /// </summary>
    public partial class ResEnterMap205: Packet 
    {
        /// <summary>
        /// 攻击免Shitf
        /// </summary>
        public bool ExemptShift;
        /// <summary>
        /// 自动召唤
        /// </summary>
        public bool AutoSummon;
        /// <summary>
        /// 自动烈火开天
        /// </summary>
        public bool AutoFire;
        /// <summary>
        /// 自动魔法盾
        /// </summary>
        public bool AutoMagicShield;
        /// <summary>
        /// 自动AOE
        /// </summary>
        public bool AutoAOE;
        /// <summary>
        /// 自动拾取药水
        /// </summary>
        public bool Drug;
        /// <summary>
        /// 自动拾取金币
        /// </summary>
        public bool Money;
        /// <summary>
        /// 自动拾取材料
        /// </summary>
        public bool Material;
        /// <summary>
        /// 自动拾取道具
        /// </summary>
        public bool Item;
        /// <summary>
        /// 自动拾取装备
        /// </summary>
        public bool Equip;
        /// <summary>
        /// 自动拾取装备
        /// </summary>
        public bool RedEquip;
        /// <summary>
        /// 拾取装备等级
        /// </summary>
        public uint EquipLv;

        public override Packet Clone()
        {
            ResEnterMap205 pkg = new ResEnterMap205();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ExemptShift = ExemptShift;
            pkg.AutoSummon = AutoSummon;
            pkg.AutoFire = AutoFire;
            pkg.AutoMagicShield = AutoMagicShield;
            pkg.AutoAOE = AutoAOE;
            pkg.Drug = Drug;
            pkg.Money = Money;
            pkg.Material = Material;
            pkg.Item = Item;
            pkg.Equip = Equip;
            pkg.RedEquip = RedEquip;
            pkg.EquipLv = EquipLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(ExemptShift);
                oByteArray.WriteBoolean(AutoSummon);
                oByteArray.WriteBoolean(AutoFire);
                oByteArray.WriteBoolean(AutoMagicShield);
                oByteArray.WriteBoolean(AutoAOE);
                oByteArray.WriteBoolean(Drug);
                oByteArray.WriteBoolean(Money);
                oByteArray.WriteBoolean(Material);
                oByteArray.WriteBoolean(Item);
                oByteArray.WriteBoolean(Equip);
                oByteArray.WriteBoolean(RedEquip);
                oByteArray.WriteUInt(EquipLv);
            }
            else
            {
                ExemptShift = oByteArray.ReadBoolean();
                AutoSummon = oByteArray.ReadBoolean();
                AutoFire = oByteArray.ReadBoolean();
                AutoMagicShield = oByteArray.ReadBoolean();
                AutoAOE = oByteArray.ReadBoolean();
                Drug = oByteArray.ReadBoolean();
                Money = oByteArray.ReadBoolean();
                Material = oByteArray.ReadBoolean();
                Item = oByteArray.ReadBoolean();
                Equip = oByteArray.ReadBoolean();
                RedEquip = oByteArray.ReadBoolean();
                EquipLv = oByteArray.ReadUInt();
            }
        }
		public ResEnterMap205()
		{
			PacketID = 432;
		}
    }

    /// <summary>
    ///  [响应类] 加载智能战斗设置和自动拾取 创建者
    /// </summary>
    [Package(432)]
    public partial class ResEnterMap205Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap205();
        }
    }


    /// <summary>
    ///  [请求类]发送聊天消息
    /// </summary>
    public partial class ReqChatMessage: Packet 
    {
        /// <summary>
        /// 聊天消息类型,1-综合,2-世界,3-队伍,4-私聊,5-附近,6-系统，12-SOS行会求救,13-玩家发送公告
        /// </summary>
        public byte Type;
        /// <summary>
        /// 消息内容
        /// </summary>
        public string Message;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 公告TID
        /// </summary>
        public uint NoticeTID;
        /// <summary>
        /// 替换内容
        /// </summary>
        public string SafeMessage;

        public override Packet Clone()
        {
            ReqChatMessage pkg = new ReqChatMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Message = Message;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.SubType = SubType;
            pkg.NoticeTID = NoticeTID;
            pkg.SafeMessage = SafeMessage;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUTF(Message);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(SubType);
                oByteArray.WriteUInt(NoticeTID);
                oByteArray.WriteUTF(SafeMessage);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Message = oByteArray.ReadUTF();
                PlayerID.Serializtion(oByteArray, bSerialize);
                SubType = oByteArray.ReadByte();
                NoticeTID = oByteArray.ReadUInt();
                SafeMessage = oByteArray.ReadUTF();
            }
        }
		public ReqChatMessage()
		{
			PacketID = 433;
		}
    }

    /// <summary>
    ///  [请求类] 发送聊天消息 创建者
    /// </summary>
    [Package(433)]
    public partial class ReqChatMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChatMessage();
        }
    }


    /// <summary>
    ///  [响应类]发送聊天消息
    /// </summary>
    public partial class ResChatMessage: Packet 
    {
        /// <summary>
        /// 聊天消息类型,1-综合,2-世界,3-队伍,4-私聊,5-附近,6-系统，12-SOS行会求救,13-玩家发送公告
        /// </summary>
        public byte Type;
        /// <summary>
        /// 消息内容
        /// </summary>
        public string Message;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 角色名称
        /// </summary>
        public string NickName;
        /// <summary>
        /// 物品模板ID
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// VIP等级
        /// </summary>
        public uint VIPLv;
        /// <summary>
        /// 0-成功 100-禁言 101-私聊玩家不在线 102-该地图无法使用SoS行会求救 103-没有行会救援令 104-没有行会
        /// </summary>
        public uint result;
        /// <summary>
        /// 1-发送者 2-接受者
        /// </summary>
        public uint ChatType;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;
        /// <summary>
        /// 签名
        /// </summary>
        public string Signature;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 性别
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 平台特权
        /// </summary>
        public uint PlatformVIP;
        /// <summary>
        /// 境界等级
        /// </summary>
        public uint StateLv;
        /// <summary>
        /// 公告TID
        /// </summary>
        public uint NoticeTID;
        /// <summary>
        /// 替换内容
        /// </summary>
        public string SafeMessage;

        public override Packet Clone()
        {
            ResChatMessage pkg = new ResChatMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Message = Message;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.NickName = NickName;
            pkg.ItemID = ItemID;
            pkg.VIPLv = VIPLv;
            pkg.result = result;
            pkg.ChatType = ChatType;
            pkg.Career = Career;
            pkg.Signature = Signature;
            pkg.Lv = Lv;
            pkg.Sex = Sex;
            pkg.PlatformVIP = PlatformVIP;
            pkg.StateLv = StateLv;
            pkg.NoticeTID = NoticeTID;
            pkg.SafeMessage = SafeMessage;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUTF(Message);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt(VIPLv);
                oByteArray.WriteUInt(result);
                oByteArray.WriteUInt(ChatType);
                oByteArray.WriteByte(Career);
                oByteArray.WriteUTF(Signature);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteUInt(PlatformVIP);
                oByteArray.WriteUInt(StateLv);
                oByteArray.WriteUInt(NoticeTID);
                oByteArray.WriteUTF(SafeMessage);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Message = oByteArray.ReadUTF();
                PlayerID.Serializtion(oByteArray, bSerialize);
                NickName = oByteArray.ReadUTF();
                ItemID = oByteArray.ReadUInt();
                VIPLv = oByteArray.ReadUInt();
                result = oByteArray.ReadUInt();
                ChatType = oByteArray.ReadUInt();
                Career = oByteArray.ReadByte();
                Signature = oByteArray.ReadUTF();
                Lv = oByteArray.ReadUInt();
                Sex = oByteArray.ReadByte();
                PlatformVIP = oByteArray.ReadUInt();
                StateLv = oByteArray.ReadUInt();
                NoticeTID = oByteArray.ReadUInt();
                SafeMessage = oByteArray.ReadUTF();
            }
        }
		public ResChatMessage()
		{
			PacketID = 434;
		}
    }

    /// <summary>
    ///  [响应类] 发送聊天消息 创建者
    /// </summary>
    [Package(434)]
    public partial class ResChatMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChatMessage();
        }
    }


    /// <summary>
    ///  [请求类]客户端请求领取任务奖励
    /// </summary>
    public partial class ReqGetTaskAward: Packet 
    {
        /// <summary>
        /// 任务ID
        /// </summary>
        public uint TaskID;
        /// <summary>
        /// 任务类型
        /// </summary>
        public uint TaskType;

        public override Packet Clone()
        {
            ReqGetTaskAward pkg = new ReqGetTaskAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskID = TaskID;
            pkg.TaskType = TaskType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskID);
                oByteArray.WriteUInt(TaskType);
            }
            else
            {
                TaskID = oByteArray.ReadUInt();
                TaskType = oByteArray.ReadUInt();
            }
        }
		public ReqGetTaskAward()
		{
			PacketID = 435;
		}
    }

    /// <summary>
    ///  [请求类] 客户端请求领取任务奖励 创建者
    /// </summary>
    [Package(435)]
    public partial class ReqGetTaskAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetTaskAward();
        }
    }


    /// <summary>
    ///  [响应类]客户端请求领取任务奖励
    /// </summary>
    public partial class ResGetTaskAward: Packet 
    {
        /// <summary>
        /// 0是成功，1是未完成，2离npc远，3是包满，4是策划配表错误
        /// </summary>
        public uint Result;
        /// <summary>
        /// 任务类型
        /// </summary>
        public byte TaskType;
        /// <summary>
        /// 任务ID
        /// </summary>
        public uint TaskID;

        public override Packet Clone()
        {
            ResGetTaskAward pkg = new ResGetTaskAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TaskType = TaskType;
            pkg.TaskID = TaskID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(TaskType);
                oByteArray.WriteUInt(TaskID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TaskType = oByteArray.ReadByte();
                TaskID = oByteArray.ReadUInt();
            }
        }
		public ResGetTaskAward()
		{
			PacketID = 436;
		}
    }

    /// <summary>
    ///  [响应类] 客户端请求领取任务奖励 创建者
    /// </summary>
    [Package(436)]
    public partial class ResGetTaskAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetTaskAward();
        }
    }


    /// <summary>
    ///  [请求类]客户端请求接受任务（返回协议为通知客户端任务变更）
    /// </summary>
    public partial class ReqTakeTask: Packet 
    {

        public override Packet Clone()
        {
            ReqTakeTask pkg = new ReqTakeTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTakeTask()
		{
			PacketID = 437;
		}
    }

    /// <summary>
    ///  [请求类] 客户端请求接受任务（返回协议为通知客户端任务变更） 创建者
    /// </summary>
    [Package(437)]
    public partial class ReqTakeTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeTask();
        }
    }


    /// <summary>
    ///  [响应类]客户端请求接受任务（返回协议为通知客户端任务变更）
    /// </summary>
    public partial class ResTakeTask: Packet 
    {
        /// <summary>
        /// 任务ID
        /// </summary>
        public uint TaskID;
        /// <summary>
        /// 任务类型｛1：主线，2：支线｝
        /// </summary>
        public ushort TaskType;
        /// <summary>
        /// 任务状态0:未完成 1:完成
        /// </summary>
        public sbyte TaskState;
        /// <summary>
        /// 任务数据
        /// </summary>
        public uint[] Data = new uint[4];

        public override Packet Clone()
        {
            ResTakeTask pkg = new ResTakeTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskID = TaskID;
            pkg.TaskType = TaskType;
            pkg.TaskState = TaskState;
            for (int i = 0; i < 4; i++)
            {
                pkg.Data[i] = Data[i];
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskID);
                oByteArray.WriteUShort(TaskType);
                oByteArray.WriteSByte(TaskState);
                for (int i = 0; i < 4; i++)
                {
                    oByteArray.WriteUInt(Data[i]);
                }
            }
            else
            {
                TaskID = oByteArray.ReadUInt();
                TaskType = oByteArray.ReadUShort();
                TaskState = oByteArray.ReadSByte();
                for (int i = 0; i < 4; i++)
                {
                    Data[i] = oByteArray.ReadUInt();
                }
            }
        }
		public ResTakeTask()
		{
			PacketID = 438;
		}
    }

    /// <summary>
    ///  [响应类] 客户端请求接受任务（返回协议为通知客户端任务变更） 创建者
    /// </summary>
    [Package(438)]
    public partial class ResTakeTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeTask();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新任务信息
    /// </summary>
    public partial class ReqUpdateTaskInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateTaskInfo pkg = new ReqUpdateTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateTaskInfo()
		{
			PacketID = 439;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新任务信息 创建者
    /// </summary>
    [Package(439)]
    public partial class ReqUpdateTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTaskInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新任务信息
    /// </summary>
    public partial class ResUpdateTaskInfo: Packet 
    {
        /// <summary>
        /// 任务ID
        /// </summary>
        public uint TaskID;
        /// <summary>
        /// 任务状态
        /// </summary>
        public sbyte TaskState;
        /// <summary>
        /// 任务数据
        /// </summary>
        public uint[] TaskData = new uint[4];
        /// <summary>
        /// 任务类型
        /// </summary>
        public byte TaskType;

        public override Packet Clone()
        {
            ResUpdateTaskInfo pkg = new ResUpdateTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskID = TaskID;
            pkg.TaskState = TaskState;
            for (int i = 0; i < 4; i++)
            {
                pkg.TaskData[i] = TaskData[i];
            }
            pkg.TaskType = TaskType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskID);
                oByteArray.WriteSByte(TaskState);
                for (int i = 0; i < 4; i++)
                {
                    oByteArray.WriteUInt(TaskData[i]);
                }
                oByteArray.WriteByte(TaskType);
            }
            else
            {
                TaskID = oByteArray.ReadUInt();
                TaskState = oByteArray.ReadSByte();
                for (int i = 0; i < 4; i++)
                {
                    TaskData[i] = oByteArray.ReadUInt();
                }
                TaskType = oByteArray.ReadByte();
            }
        }
		public ResUpdateTaskInfo()
		{
			PacketID = 440;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新任务信息 创建者
    /// </summary>
    [Package(440)]
    public partial class ResUpdateTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTaskInfo();
        }
    }


    /// <summary>
    ///  [请求类]任务传送
    /// </summary>
    public partial class ReqTaskTransfer: Packet 
    {
        /// <summary>
        /// 任务ID
        /// </summary>
        public uint TaskID;
        /// <summary>
        /// 类型1是主线2是降妖除魔
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqTaskTransfer pkg = new ReqTaskTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskID = TaskID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                TaskID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqTaskTransfer()
		{
			PacketID = 441;
		}
    }

    /// <summary>
    ///  [请求类] 任务传送 创建者
    /// </summary>
    [Package(441)]
    public partial class ReqTaskTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTaskTransfer();
        }
    }


    /// <summary>
    ///  [响应类]任务传送
    /// </summary>
    public partial class ResTaskTransfer: Packet 
    {
        /// <summary>
        /// 任务ID
        /// </summary>
        public uint TaskID;
        /// <summary>
        /// 类型1是主线2是降妖除魔
        /// </summary>
        public uint Type;
        /// <summary>
        /// 结果0成功1是没这个任务2是等级不足
        /// </summary>
        public sbyte Result;

        public override Packet Clone()
        {
            ResTaskTransfer pkg = new ResTaskTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskID = TaskID;
            pkg.Type = Type;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskID);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteSByte(Result);
            }
            else
            {
                TaskID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                Result = oByteArray.ReadSByte();
            }
        }
		public ResTaskTransfer()
		{
			PacketID = 442;
		}
    }

    /// <summary>
    ///  [响应类] 任务传送 创建者
    /// </summary>
    [Package(442)]
    public partial class ResTaskTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTaskTransfer();
        }
    }


    /// <summary>
    ///  [请求类]获取排行榜信息
    /// </summary>
    public partial class ReqGetRankingInfo: Packet 
    {
        /// <summary>
        /// 0-等级排行榜 1-战士榜 2-法师榜 3-道士榜 4-翅膀排行榜 5-品阶榜，7-品阶排行榜
        /// </summary>
        public uint Type;
        /// <summary>
        /// 页数
        /// </summary>
        public uint Page;
        /// <summary>
        /// 当前页数量
        /// </summary>
        public uint Num;

        public override Packet Clone()
        {
            ReqGetRankingInfo pkg = new ReqGetRankingInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Page = Page;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Page);
                oByteArray.WriteUInt(Num);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Page = oByteArray.ReadUInt();
                Num = oByteArray.ReadUInt();
            }
        }
		public ReqGetRankingInfo()
		{
			PacketID = 443;
		}
    }

    /// <summary>
    ///  [请求类] 获取排行榜信息 创建者
    /// </summary>
    [Package(443)]
    public partial class ReqGetRankingInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetRankingInfo();
        }
    }


    /// <summary>
    ///  [响应类]获取排行榜信息
    /// </summary>
    public partial class ResGetRankingInfo: Packet 
    {
        /// <summary>
        /// 排行榜信息
        /// </summary>
        public List<RankInfo> RankInfoVec = new List<RankInfo>();
        /// <summary>
        /// 0-战士榜，1-法师榜，2-道士榜，3-充值排行榜，4-境界排行榜，5-等级排行榜，6-翅膀排行榜，7-品阶排行榜 8-英雄排行;
        /// </summary>
        public uint Type;
        /// <summary>
        /// 页数
        /// </summary>
        public uint Page;
        /// <summary>
        /// 排行榜总页数
        /// </summary>
        public uint PageCount;
        /// <summary>
        /// 
        /// </summary>
        public uint Data1;

        public override Packet Clone()
        {
            ResGetRankingInfo pkg = new ResGetRankingInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (RankInfo item in RankInfoVec)
            {
                pkg.RankInfoVec.Add(item.Clone() as RankInfo);
            }
            pkg.Type = Type;
            pkg.Page = Page;
            pkg.PageCount = PageCount;
            pkg.Data1 = Data1;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RankInfoVec.Count);
                for (int i = 0; i < RankInfoVec.Count; i++)
                {
                    RankInfoVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Page);
                oByteArray.WriteUInt(PageCount);
                oByteArray.WriteUInt(Data1);
            }
            else
            {
                int RankInfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankInfoVecCount; i++)
                {
                    RankInfo obj = new RankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankInfoVec.Add(obj);
                }
                Type = oByteArray.ReadUInt();
                Page = oByteArray.ReadUInt();
                PageCount = oByteArray.ReadUInt();
                Data1 = oByteArray.ReadUInt();
            }
        }
		public ResGetRankingInfo()
		{
			PacketID = 444;
		}
    }

    /// <summary>
    ///  [响应类] 获取排行榜信息 创建者
    /// </summary>
    [Package(444)]
    public partial class ResGetRankingInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetRankingInfo();
        }
    }


    /// <summary>
    ///  [请求类]领取在线奖励
    /// </summary>
    public partial class ReqGetOnlineAward: Packet 
    {
        /// <summary>
        /// 奖励ID
        /// </summary>
        public uint AwardID;

        public override Packet Clone()
        {
            ReqGetOnlineAward pkg = new ReqGetOnlineAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AwardID = AwardID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AwardID);
            }
            else
            {
                AwardID = oByteArray.ReadUInt();
            }
        }
		public ReqGetOnlineAward()
		{
			PacketID = 445;
		}
    }

    /// <summary>
    ///  [请求类] 领取在线奖励 创建者
    /// </summary>
    [Package(445)]
    public partial class ReqGetOnlineAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetOnlineAward();
        }
    }


    /// <summary>
    ///  [响应类]领取在线奖励
    /// </summary>
    public partial class ResGetOnlineAward: Packet 
    {
        /// <summary>
        /// 0-成功，101-在线时间不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 本周已抽奖次数
        /// </summary>
        public uint WeeklyNum;
        /// <summary>
        /// 奖励物品列表 物品ID|数量
        /// </summary>
        public string AwardItems;
        /// <summary>
        /// 奖励ID
        /// </summary>
        public uint AwardID;

        public override Packet Clone()
        {
            ResGetOnlineAward pkg = new ResGetOnlineAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.WeeklyNum = WeeklyNum;
            pkg.AwardItems = AwardItems;
            pkg.AwardID = AwardID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(WeeklyNum);
                oByteArray.WriteUTF(AwardItems);
                oByteArray.WriteUInt(AwardID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                WeeklyNum = oByteArray.ReadUInt();
                AwardItems = oByteArray.ReadUTF();
                AwardID = oByteArray.ReadUInt();
            }
        }
		public ResGetOnlineAward()
		{
			PacketID = 446;
		}
    }

    /// <summary>
    ///  [响应类] 领取在线奖励 创建者
    /// </summary>
    [Package(446)]
    public partial class ResGetOnlineAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetOnlineAward();
        }
    }


    /// <summary>
    ///  [请求类]map通知world副本结束
    /// </summary>
    public partial class ReqFinishDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong DungeonGuid;

        public override Packet Clone()
        {
            ReqFinishDungeon pkg = new ReqFinishDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonGuid = DungeonGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(DungeonGuid);
            }
            else
            {
                DungeonGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqFinishDungeon()
		{
			PacketID = 447;
		}
    }

    /// <summary>
    ///  [请求类] map通知world副本结束 创建者
    /// </summary>
    [Package(447)]
    public partial class ReqFinishDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFinishDungeon();
        }
    }


    /// <summary>
    ///  [响应类]map通知world副本结束
    /// </summary>
    public partial class ResFinishDungeon: Packet 
    {
        /// <summary>
        /// 副本ID
        /// </summary>
        public uint DungeonID;
        /// <summary>
        /// 通关等级
        /// </summary>
        public uint FinishLevel;
        /// <summary>
        /// 玩家id（仅个人副本有效）
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResFinishDungeon pkg = new ResFinishDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonID = DungeonID;
            pkg.FinishLevel = FinishLevel;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DungeonID);
                oByteArray.WriteUInt(FinishLevel);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                DungeonID = oByteArray.ReadUInt();
                FinishLevel = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResFinishDungeon()
		{
			PacketID = 448;
		}
    }

    /// <summary>
    ///  [响应类] map通知world副本结束 创建者
    /// </summary>
    [Package(448)]
    public partial class ResFinishDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFinishDungeon();
        }
    }


    /// <summary>
    ///  [请求类]请求副本奖励
    /// </summary>
    public partial class ReqGetDungeonAward: Packet 
    {
        /// <summary>
        /// 倍数
        /// </summary>
        public byte multiple;
        /// <summary>
        /// 副本ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqGetDungeonAward pkg = new ReqGetDungeonAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.multiple = multiple;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(multiple);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                multiple = oByteArray.ReadByte();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqGetDungeonAward()
		{
			PacketID = 449;
		}
    }

    /// <summary>
    ///  [请求类] 请求副本奖励 创建者
    /// </summary>
    [Package(449)]
    public partial class ReqGetDungeonAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetDungeonAward();
        }
    }


    /// <summary>
    ///  [响应类]请求副本奖励
    /// </summary>
    public partial class ResGetDungeonAward: Packet 
    {
        /// <summary>
        /// 0成功，1是钱不足，2是包不足，3是非法请求
        /// </summary>
        public byte Result;
        /// <summary>
        /// 倍数
        /// </summary>
        public uint multiple;

        public override Packet Clone()
        {
            ResGetDungeonAward pkg = new ResGetDungeonAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.multiple = multiple;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(multiple);
            }
            else
            {
                Result = oByteArray.ReadByte();
                multiple = oByteArray.ReadUInt();
            }
        }
		public ResGetDungeonAward()
		{
			PacketID = 450;
		}
    }

    /// <summary>
    ///  [响应类] 请求副本奖励 创建者
    /// </summary>
    [Package(450)]
    public partial class ResGetDungeonAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetDungeonAward();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端副本可进入次数信息
    /// </summary>
    public partial class ReqUpdataDungeonInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdataDungeonInfo pkg = new ReqUpdataDungeonInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdataDungeonInfo()
		{
			PacketID = 451;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端副本可进入次数信息 创建者
    /// </summary>
    [Package(451)]
    public partial class ReqUpdataDungeonInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdataDungeonInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端副本可进入次数信息
    /// </summary>
    public partial class ResUpdataDungeonInfo: Packet 
    {
        /// <summary>
        /// 副本ID
        /// </summary>
        public ushort DungeonID;
        /// <summary>
        /// 已经进入次数
        /// </summary>
        public ushort Times;

        public override Packet Clone()
        {
            ResUpdataDungeonInfo pkg = new ResUpdataDungeonInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonID = DungeonID;
            pkg.Times = Times;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(DungeonID);
                oByteArray.WriteUShort(Times);
            }
            else
            {
                DungeonID = oByteArray.ReadUShort();
                Times = oByteArray.ReadUShort();
            }
        }
		public ResUpdataDungeonInfo()
		{
			PacketID = 452;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端副本可进入次数信息 创建者
    /// </summary>
    [Package(452)]
    public partial class ResUpdataDungeonInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdataDungeonInfo();
        }
    }


    /// <summary>
    ///  [请求类]客户端请求退出副本
    /// </summary>
    public partial class ReqExitDungeon: Packet 
    {

        public override Packet Clone()
        {
            ReqExitDungeon pkg = new ReqExitDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqExitDungeon()
		{
			PacketID = 453;
		}
    }

    /// <summary>
    ///  [请求类] 客户端请求退出副本 创建者
    /// </summary>
    [Package(453)]
    public partial class ReqExitDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqExitDungeon();
        }
    }


    /// <summary>
    ///  [响应类]客户端请求退出副本
    /// </summary>
    public partial class ResExitDungeon: Packet 
    {
        /// <summary>
        /// 副本ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ResExitDungeon pkg = new ResExitDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
            }
        }
		public ResExitDungeon()
		{
			PacketID = 454;
		}
    }

    /// <summary>
    ///  [响应类] 客户端请求退出副本 创建者
    /// </summary>
    [Package(454)]
    public partial class ResExitDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResExitDungeon();
        }
    }


    /// <summary>
    ///  [请求类]新增头衔
    /// </summary>
    public partial class ReqAddTitle: Packet 
    {

        public override Packet Clone()
        {
            ReqAddTitle pkg = new ReqAddTitle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddTitle()
		{
			PacketID = 455;
		}
    }

    /// <summary>
    ///  [请求类] 新增头衔 创建者
    /// </summary>
    [Package(455)]
    public partial class ReqAddTitleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddTitle();
        }
    }


    /// <summary>
    ///  [响应类]新增头衔
    /// </summary>
    public partial class ResAddTitle: Packet 
    {
        /// <summary>
        /// 头衔ID
        /// </summary>
        public uint TitleID;
        /// <summary>
        /// 过期时间戳，0为永久
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResAddTitle pkg = new ResAddTitle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TitleID = TitleID;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TitleID);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                TitleID = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResAddTitle()
		{
			PacketID = 456;
		}
    }

    /// <summary>
    ///  [响应类] 新增头衔 创建者
    /// </summary>
    [Package(456)]
    public partial class ResAddTitleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddTitle();
        }
    }


    /// <summary>
    ///  [请求类]移除头衔称号
    /// </summary>
    public partial class ReqRemoveTitle: Packet 
    {

        public override Packet Clone()
        {
            ReqRemoveTitle pkg = new ReqRemoveTitle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRemoveTitle()
		{
			PacketID = 457;
		}
    }

    /// <summary>
    ///  [请求类] 移除头衔称号 创建者
    /// </summary>
    [Package(457)]
    public partial class ReqRemoveTitleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveTitle();
        }
    }


    /// <summary>
    ///  [响应类]移除头衔称号
    /// </summary>
    public partial class ResRemoveTitle: Packet 
    {
        /// <summary>
        /// 头衔ID
        /// </summary>
        public uint TitleID;

        public override Packet Clone()
        {
            ResRemoveTitle pkg = new ResRemoveTitle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TitleID = TitleID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TitleID);
            }
            else
            {
                TitleID = oByteArray.ReadUInt();
            }
        }
		public ResRemoveTitle()
		{
			PacketID = 458;
		}
    }

    /// <summary>
    ///  [响应类] 移除头衔称号 创建者
    /// </summary>
    [Package(458)]
    public partial class ResRemoveTitleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveTitle();
        }
    }


    /// <summary>
    ///  [请求类]自己的排名信息
    /// </summary>
    public partial class ReqOwnerRankingInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqOwnerRankingInfo pkg = new ReqOwnerRankingInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOwnerRankingInfo()
		{
			PacketID = 459;
		}
    }

    /// <summary>
    ///  [请求类] 自己的排名信息 创建者
    /// </summary>
    [Package(459)]
    public partial class ReqOwnerRankingInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOwnerRankingInfo();
        }
    }


    /// <summary>
    ///  [响应类]自己的排名信息
    /// </summary>
    public partial class ResOwnerRankingInfo: Packet 
    {
        /// <summary>
        /// 排名类型
        /// </summary>
        public uint Type;
        /// <summary>
        /// 排名位置
        /// </summary>
        public uint Pos;

        public override Packet Clone()
        {
            ResOwnerRankingInfo pkg = new ResOwnerRankingInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Pos = Pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Pos);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Pos = oByteArray.ReadUInt();
            }
        }
		public ResOwnerRankingInfo()
		{
			PacketID = 460;
		}
    }

    /// <summary>
    ///  [响应类] 自己的排名信息 创建者
    /// </summary>
    [Package(460)]
    public partial class ResOwnerRankingInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOwnerRankingInfo();
        }
    }


    /// <summary>
    ///  [请求类]传送到指定位置
    /// </summary>
    public partial class ReqTransferToMap: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 坐标X
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 坐标Y
        /// </summary>
        public uint MapY;

        public override Packet Clone()
        {
            ReqTransferToMap pkg = new ReqTransferToMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
            }
        }
		public ReqTransferToMap()
		{
			PacketID = 461;
		}
    }

    /// <summary>
    ///  [请求类] 传送到指定位置 创建者
    /// </summary>
    [Package(461)]
    public partial class ReqTransferToMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferToMap();
        }
    }


    /// <summary>
    ///  [响应类]传送到指定位置
    /// </summary>
    public partial class ResTransferToMap: Packet 
    {
        /// <summary>
        /// 10-摆摊中
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTransferToMap pkg = new ResTransferToMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResTransferToMap()
		{
			PacketID = 462;
		}
    }

    /// <summary>
    ///  [响应类] 传送到指定位置 创建者
    /// </summary>
    [Package(462)]
    public partial class ResTransferToMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferToMap();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端有木有宠物
    /// </summary>
    public partial class ReqUpdateIsExistPet: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateIsExistPet pkg = new ReqUpdateIsExistPet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateIsExistPet()
		{
			PacketID = 463;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端有木有宠物 创建者
    /// </summary>
    [Package(463)]
    public partial class ReqUpdateIsExistPetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateIsExistPet();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端有木有宠物
    /// </summary>
    public partial class ResUpdateIsExistPet: Packet 
    {
        /// <summary>
        /// 技能类型
        /// </summary>
        public uint SkillType;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint PetType;

        public override Packet Clone()
        {
            ResUpdateIsExistPet pkg = new ResUpdateIsExistPet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillType = SkillType;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.PetType = PetType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillType);
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(PetType);
            }
            else
            {
                SkillType = oByteArray.ReadUInt();
                ObjectID.Serializtion(oByteArray, bSerialize);
                PetType = oByteArray.ReadUInt();
            }
        }
		public ResUpdateIsExistPet()
		{
			PacketID = 464;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端有木有宠物 创建者
    /// </summary>
    [Package(464)]
    public partial class ResUpdateIsExistPetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateIsExistPet();
        }
    }


    /// <summary>
    ///  [请求类]更新阵营
    /// </summary>
    public partial class ReqUpDateCamp: Packet 
    {

        public override Packet Clone()
        {
            ReqUpDateCamp pkg = new ReqUpDateCamp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpDateCamp()
		{
			PacketID = 465;
		}
    }

    /// <summary>
    ///  [请求类] 更新阵营 创建者
    /// </summary>
    [Package(465)]
    public partial class ReqUpDateCampCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpDateCamp();
        }
    }


    /// <summary>
    ///  [响应类]更新阵营
    /// </summary>
    public partial class ResUpDateCamp: Packet 
    {
        /// <summary>
        /// 0是阵营，1是队伍，2是工会
        /// </summary>
        public byte Type;
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 阵营
        /// </summary>
        public string Camp;

        public override Packet Clone()
        {
            ResUpDateCamp pkg = new ResUpDateCamp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.Camp = Camp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(Camp);
            }
            else
            {
                Type = oByteArray.ReadByte();
                ObjectID.Serializtion(oByteArray, bSerialize);
                Camp = oByteArray.ReadUTF();
            }
        }
		public ResUpDateCamp()
		{
			PacketID = 466;
		}
    }

    /// <summary>
    ///  [响应类] 更新阵营 创建者
    /// </summary>
    [Package(466)]
    public partial class ResUpDateCampCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpDateCamp();
        }
    }


    /// <summary>
    ///  [请求类]设置音效
    /// </summary>
    public partial class ReqSetMusicMode: Packet 
    {
        /// <summary>
        /// 背景音乐
        /// </summary>
        public uint Background;
        /// <summary>
        /// 游戏音效
        /// </summary>
        public uint Game;
        /// <summary>
        /// 
        /// </summary>
        public bool BackOpen;
        /// <summary>
        /// 
        /// </summary>
        public bool GameOpen;

        public override Packet Clone()
        {
            ReqSetMusicMode pkg = new ReqSetMusicMode();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Background = Background;
            pkg.Game = Game;
            pkg.BackOpen = BackOpen;
            pkg.GameOpen = GameOpen;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Background);
                oByteArray.WriteUInt(Game);
                oByteArray.WriteBoolean(BackOpen);
                oByteArray.WriteBoolean(GameOpen);
            }
            else
            {
                Background = oByteArray.ReadUInt();
                Game = oByteArray.ReadUInt();
                BackOpen = oByteArray.ReadBoolean();
                GameOpen = oByteArray.ReadBoolean();
            }
        }
		public ReqSetMusicMode()
		{
			PacketID = 467;
		}
    }

    /// <summary>
    ///  [请求类] 设置音效 创建者
    /// </summary>
    [Package(467)]
    public partial class ReqSetMusicModeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetMusicMode();
        }
    }


    /// <summary>
    ///  [响应类]设置音效
    /// </summary>
    public partial class ResSetMusicMode: Packet 
    {

        public override Packet Clone()
        {
            ResSetMusicMode pkg = new ResSetMusicMode();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSetMusicMode()
		{
			PacketID = 468;
		}
    }

    /// <summary>
    ///  [响应类] 设置音效 创建者
    /// </summary>
    [Package(468)]
    public partial class ResSetMusicModeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetMusicMode();
        }
    }


    /// <summary>
    ///  [请求类]怪物死亡
    /// </summary>
    public partial class ReqMonsterDie: Packet 
    {

        public override Packet Clone()
        {
            ReqMonsterDie pkg = new ReqMonsterDie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqMonsterDie()
		{
			PacketID = 469;
		}
    }

    /// <summary>
    ///  [请求类] 怪物死亡 创建者
    /// </summary>
    [Package(469)]
    public partial class ReqMonsterDieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMonsterDie();
        }
    }


    /// <summary>
    ///  [响应类]怪物死亡
    /// </summary>
    public partial class ResMonsterDie: Packet 
    {
        /// <summary>
        /// 1-全民BOSS，2-未知暗殿,3-触发刷怪
        /// </summary>
        public uint Type;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public uint MonsterID;

        public override Packet Clone()
        {
            ResMonsterDie pkg = new ResMonsterDie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.MonsterID = MonsterID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(MonsterID);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                MonsterID = oByteArray.ReadUInt();
            }
        }
		public ResMonsterDie()
		{
			PacketID = 470;
		}
    }

    /// <summary>
    ///  [响应类] 怪物死亡 创建者
    /// </summary>
    [Package(470)]
    public partial class ResMonsterDieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMonsterDie();
        }
    }


    /// <summary>
    ///  [请求类]Boss复活
    /// </summary>
    public partial class ReqMonsterRevive: Packet 
    {

        public override Packet Clone()
        {
            ReqMonsterRevive pkg = new ReqMonsterRevive();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqMonsterRevive()
		{
			PacketID = 471;
		}
    }

    /// <summary>
    ///  [请求类] Boss复活 创建者
    /// </summary>
    [Package(471)]
    public partial class ReqMonsterReviveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMonsterRevive();
        }
    }


    /// <summary>
    ///  [响应类]Boss复活
    /// </summary>
    public partial class ResMonsterRevive: Packet 
    {
        /// <summary>
        /// 2-未知暗殿
        /// </summary>
        public uint Type;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public uint MonsterID;

        public override Packet Clone()
        {
            ResMonsterRevive pkg = new ResMonsterRevive();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.MonsterID = MonsterID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(MonsterID);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                MonsterID = oByteArray.ReadUInt();
            }
        }
		public ResMonsterRevive()
		{
			PacketID = 472;
		}
    }

    /// <summary>
    ///  [响应类] Boss复活 创建者
    /// </summary>
    [Package(472)]
    public partial class ResMonsterReviveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMonsterRevive();
        }
    }


    /// <summary>
    ///  [请求类]地图Boss状态
    /// </summary>
    public partial class ReqMonsterState: Packet 
    {

        public override Packet Clone()
        {
            ReqMonsterState pkg = new ReqMonsterState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqMonsterState()
		{
			PacketID = 473;
		}
    }

    /// <summary>
    ///  [请求类] 地图Boss状态 创建者
    /// </summary>
    [Package(473)]
    public partial class ReqMonsterStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMonsterState();
        }
    }


    /// <summary>
    ///  [响应类]地图Boss状态
    /// </summary>
    public partial class ResMonsterState: Packet 
    {
        /// <summary>
        /// 怪物信息
        /// </summary>
        public List<MonsterState> MonsterStateInfo = new List<MonsterState>();

        public override Packet Clone()
        {
            ResMonsterState pkg = new ResMonsterState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (MonsterState item in MonsterStateInfo)
            {
                pkg.MonsterStateInfo.Add(item.Clone() as MonsterState);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)MonsterStateInfo.Count);
                for (int i = 0; i < MonsterStateInfo.Count; i++)
                {
                    MonsterStateInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int MonsterStateInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MonsterStateInfoCount; i++)
                {
                    MonsterState obj = new MonsterState();
                    obj.Serializtion(oByteArray, bSerialize);
                    MonsterStateInfo.Add(obj);
                }
            }
        }
		public ResMonsterState()
		{
			PacketID = 474;
		}
    }

    /// <summary>
    ///  [响应类] 地图Boss状态 创建者
    /// </summary>
    [Package(474)]
    public partial class ResMonsterStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMonsterState();
        }
    }


    /// <summary>
    ///  [请求类]刷新任务等级
    /// </summary>
    public partial class ReqRefreshTaskRank: Packet 
    {
        /// <summary>
        /// 1降妖2威望3帮派4藏宝图
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqRefreshTaskRank pkg = new ReqRefreshTaskRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqRefreshTaskRank()
		{
			PacketID = 475;
		}
    }

    /// <summary>
    ///  [请求类] 刷新任务等级 创建者
    /// </summary>
    [Package(475)]
    public partial class ReqRefreshTaskRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRefreshTaskRank();
        }
    }


    /// <summary>
    ///  [响应类]刷新任务等级
    /// </summary>
    public partial class ResRefreshTaskRank: Packet 
    {
        /// <summary>
        /// 0-刷新成功，1-金币不足 2-任务等级到顶无法刷新
        /// </summary>
        public uint Result;
        /// <summary>
        /// 1星星234任务ID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 1降妖2威望3帮派4藏宝图
        /// </summary>
        public byte Type;
        /// <summary>
        /// 威望任务有效
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 是否是玩家主动的刷新
        /// </summary>
        public bool IsRefresh;
        /// <summary>
        /// 当前未完成任务次数
        /// </summary>
        public uint TaskTimes;

        public override Packet Clone()
        {
            ResRefreshTaskRank pkg = new ResRefreshTaskRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.IsRefresh = IsRefresh;
            pkg.TaskTimes = TaskTimes;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
                oByteArray.WriteBoolean(IsRefresh);
                oByteArray.WriteUInt(TaskTimes);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
                IsRefresh = oByteArray.ReadBoolean();
                TaskTimes = oByteArray.ReadUInt();
            }
        }
		public ResRefreshTaskRank()
		{
			PacketID = 476;
		}
    }

    /// <summary>
    ///  [响应类] 刷新任务等级 创建者
    /// </summary>
    [Package(476)]
    public partial class ResRefreshTaskRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRefreshTaskRank();
        }
    }


    /// <summary>
    ///  [请求类]从传送员进入地图
    /// </summary>
    public partial class ReqNPCTransferToMap: Packet 
    {
        /// <summary>
        /// 传送地图
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 是否使用物品
        /// </summary>
        public bool IsUseItem;
        /// <summary>
        /// 是否花钱
        /// </summary>
        public bool IsUseMoney;

        public override Packet Clone()
        {
            ReqNPCTransferToMap pkg = new ReqNPCTransferToMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.IsUseItem = IsUseItem;
            pkg.IsUseMoney = IsUseMoney;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteBoolean(IsUseItem);
                oByteArray.WriteBoolean(IsUseMoney);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                IsUseItem = oByteArray.ReadBoolean();
                IsUseMoney = oByteArray.ReadBoolean();
            }
        }
		public ReqNPCTransferToMap()
		{
			PacketID = 477;
		}
    }

    /// <summary>
    ///  [请求类] 从传送员进入地图 创建者
    /// </summary>
    [Package(477)]
    public partial class ReqNPCTransferToMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNPCTransferToMap();
        }
    }


    /// <summary>
    ///  [响应类]从传送员进入地图
    /// </summary>
    public partial class ResNPCTransferToMap: Packet 
    {
        /// <summary>
        /// 0-成功，1-获取地图模板信息失败，2-等级不足，3-缺少道具，4-货币不足5该地图不能传送
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResNPCTransferToMap pkg = new ResNPCTransferToMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResNPCTransferToMap()
		{
			PacketID = 478;
		}
    }

    /// <summary>
    ///  [响应类] 从传送员进入地图 创建者
    /// </summary>
    [Package(478)]
    public partial class ResNPCTransferToMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNPCTransferToMap();
        }
    }


    /// <summary>
    ///  [请求类]领取每日任务
    /// </summary>
    public partial class ReqTakeDailyTask: Packet 
    {
        /// <summary>
        /// 1是降妖除魔2是威望任务3是帮派任务4是藏宝图任务
        /// </summary>
        public byte Type;
        /// <summary>
        /// 只有威望任务有效填表的TaskNeedType
        /// </summary>
        public byte SubType;

        public override Packet Clone()
        {
            ReqTakeDailyTask pkg = new ReqTakeDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
            }
        }
		public ReqTakeDailyTask()
		{
			PacketID = 479;
		}
    }

    /// <summary>
    ///  [请求类] 领取每日任务 创建者
    /// </summary>
    [Package(479)]
    public partial class ReqTakeDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeDailyTask();
        }
    }


    /// <summary>
    ///  [响应类]领取每日任务
    /// </summary>
    public partial class ResTakeDailyTask: Packet 
    {
        /// <summary>
        /// 0-成功，1-领取次数为0，2-有未完成的任务
        /// </summary>
        public uint Result;
        /// <summary>
        /// Type 1 任务序号 Type 2 任务ID Type3 任务ID  Type4 任务ID
        /// </summary>
        public uint TaskData;
        /// <summary>
        /// 1是降妖除魔2是威望任务3是帮派任务4是藏宝图任务
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResTakeDailyTask pkg = new ResTakeDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TaskData = TaskData;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TaskData);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TaskData = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResTakeDailyTask()
		{
			PacketID = 480;
		}
    }

    /// <summary>
    ///  [响应类] 领取每日任务 创建者
    /// </summary>
    [Package(480)]
    public partial class ResTakeDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeDailyTask();
        }
    }


    /// <summary>
    ///  [请求类]更新每日任务条件数量
    /// </summary>
    public partial class ReqUpdateDailyTaskConditonNum: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateDailyTaskConditonNum pkg = new ReqUpdateDailyTaskConditonNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateDailyTaskConditonNum()
		{
			PacketID = 481;
		}
    }

    /// <summary>
    ///  [请求类] 更新每日任务条件数量 创建者
    /// </summary>
    [Package(481)]
    public partial class ReqUpdateDailyTaskConditonNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateDailyTaskConditonNum();
        }
    }


    /// <summary>
    ///  [响应类]更新每日任务条件数量
    /// </summary>
    public partial class ResUpdateDailyTaskConditonNum: Packet 
    {
        /// <summary>
        /// 任务条件数量
        /// </summary>
        public uint TaskNum;
        /// <summary>
        /// 1是降妖除魔2是全民诛魔3是帮派任务4是藏宝任务
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResUpdateDailyTaskConditonNum pkg = new ResUpdateDailyTaskConditonNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskNum = TaskNum;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskNum);
                oByteArray.WriteByte(Type);
            }
            else
            {
                TaskNum = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResUpdateDailyTaskConditonNum()
		{
			PacketID = 482;
		}
    }

    /// <summary>
    ///  [响应类] 更新每日任务条件数量 创建者
    /// </summary>
    [Package(482)]
    public partial class ResUpdateDailyTaskConditonNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateDailyTaskConditonNum();
        }
    }


    /// <summary>
    ///  [请求类]领取每日任务奖励
    /// </summary>
    public partial class ReqTakeDailyTaskAward: Packet 
    {
        /// <summary>
        /// 倍率
        /// </summary>
        public uint Multi;
        /// <summary>
        /// 1降妖除魔2全民诛魔3帮派任务4宝图任务
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqTakeDailyTaskAward pkg = new ReqTakeDailyTaskAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Multi = Multi;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Multi);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Multi = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqTakeDailyTaskAward()
		{
			PacketID = 483;
		}
    }

    /// <summary>
    ///  [请求类] 领取每日任务奖励 创建者
    /// </summary>
    [Package(483)]
    public partial class ReqTakeDailyTaskAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeDailyTaskAward();
        }
    }


    /// <summary>
    ///  [响应类]领取每日任务奖励
    /// </summary>
    public partial class ResTakeDailyTaskAward: Packet 
    {
        /// <summary>
        /// 0-成功，1-任务未达成，2-货币不足，3-倍数有问题4-包满
        /// </summary>
        public byte Result;
        /// <summary>
        /// 1降妖除魔2全民诛魔3帮派任务4宝图任务
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResTakeDailyTaskAward pkg = new ResTakeDailyTaskAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
            }
        }
		public ResTakeDailyTaskAward()
		{
			PacketID = 484;
		}
    }

    /// <summary>
    ///  [响应类] 领取每日任务奖励 创建者
    /// </summary>
    [Package(484)]
    public partial class ResTakeDailyTaskAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeDailyTaskAward();
        }
    }


    /// <summary>
    ///  [请求类]升级品阶
    /// </summary>
    public partial class ReqUpgradeOfficialRank: Packet 
    {
        /// <summary>
        /// 认证装备列表
        /// </summary>
        public List<uint> ItemPosList = new List<uint>();

        public override Packet Clone()
        {
            ReqUpgradeOfficialRank pkg = new ReqUpgradeOfficialRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in ItemPosList)
            {
                pkg.ItemPosList.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < ItemPosList.Count; i++)
                {
                      oByteArray.WriteUInt(ItemPosList[i]);
                }
            }
            else
            {
                int ItemPosListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemPosListCount; i++)
                {
                    ItemPosList.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqUpgradeOfficialRank()
		{
			PacketID = 485;
		}
    }

    /// <summary>
    ///  [请求类] 升级品阶 创建者
    /// </summary>
    [Package(485)]
    public partial class ReqUpgradeOfficialRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeOfficialRank();
        }
    }


    /// <summary>
    ///  [响应类]升级品阶
    /// </summary>
    public partial class ResUpgradeOfficialRank: Packet 
    {
        /// <summary>
        /// 0-成功，1-经验不足，2-已到顶级，3-找不到品阶模板数据
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUpgradeOfficialRank pkg = new ResUpgradeOfficialRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeOfficialRank()
		{
			PacketID = 486;
		}
    }

    /// <summary>
    ///  [响应类] 升级品阶 创建者
    /// </summary>
    [Package(486)]
    public partial class ResUpgradeOfficialRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeOfficialRank();
        }
    }


    /// <summary>
    ///  [请求类]随机传送
    /// </summary>
    public partial class ReqNoticeRandomTransfer: Packet 
    {
        /// <summary>
        /// 指定X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 指定Y坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 传送类型
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqNoticeRandomTransfer pkg = new ReqNoticeRandomTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteByte(Type);
            }
            else
            {
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqNoticeRandomTransfer()
		{
			PacketID = 487;
		}
    }

    /// <summary>
    ///  [请求类] 随机传送 创建者
    /// </summary>
    [Package(487)]
    public partial class ReqNoticeRandomTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeRandomTransfer();
        }
    }


    /// <summary>
    ///  [响应类]随机传送
    /// </summary>
    public partial class ResNoticeRandomTransfer: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeRandomTransfer pkg = new ResNoticeRandomTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeRandomTransfer()
		{
			PacketID = 488;
		}
    }

    /// <summary>
    ///  [响应类] 随机传送 创建者
    /// </summary>
    [Package(488)]
    public partial class ResNoticeRandomTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeRandomTransfer();
        }
    }


    /// <summary>
    ///  [请求类]沙巴克之主召唤boss
    /// </summary>
    public partial class ReqSummerShabakBoss: Packet 
    {
        /// <summary>
        /// 怪物信息
        /// </summary>
        public string MonsterInfo;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqSummerShabakBoss pkg = new ReqSummerShabakBoss();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterInfo = MonsterInfo;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(MonsterInfo);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MonsterInfo = oByteArray.ReadUTF();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqSummerShabakBoss()
		{
			PacketID = 489;
		}
    }

    /// <summary>
    ///  [请求类] 沙巴克之主召唤boss 创建者
    /// </summary>
    [Package(489)]
    public partial class ReqSummerShabakBossCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSummerShabakBoss();
        }
    }


    /// <summary>
    ///  [响应类]沙巴克之主召唤boss
    /// </summary>
    public partial class ResSummerShabakBoss: Packet 
    {
        /// <summary>
        /// 0成功，1时间错误，2钱不足3没工会4不是会长5没次数了
        /// </summary>
        public byte Result;
        /// <summary>
        /// 已召唤次数
        /// </summary>
        public uint SummerTimes;

        public override Packet Clone()
        {
            ResSummerShabakBoss pkg = new ResSummerShabakBoss();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.SummerTimes = SummerTimes;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(SummerTimes);
            }
            else
            {
                Result = oByteArray.ReadByte();
                SummerTimes = oByteArray.ReadUInt();
            }
        }
		public ResSummerShabakBoss()
		{
			PacketID = 490;
		}
    }

    /// <summary>
    ///  [响应类] 沙巴克之主召唤boss 创建者
    /// </summary>
    [Package(490)]
    public partial class ResSummerShabakBossCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSummerShabakBoss();
        }
    }


    /// <summary>
    ///  [请求类]每日任务传送
    /// </summary>
    public partial class ReqDailyTaskTransfer: Packet 
    {
        /// <summary>
        /// 1降妖除魔2全民诛魔3帮派任务4藏宝图任务
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqDailyTaskTransfer pkg = new ReqDailyTaskTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqDailyTaskTransfer()
		{
			PacketID = 491;
		}
    }

    /// <summary>
    ///  [请求类] 每日任务传送 创建者
    /// </summary>
    [Package(491)]
    public partial class ReqDailyTaskTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDailyTaskTransfer();
        }
    }


    /// <summary>
    ///  [响应类]每日任务传送
    /// </summary>
    public partial class ResDailyTaskTransfer: Packet 
    {
        /// <summary>
        /// 0成功1没任务2任务状态不对
        /// </summary>
        public byte Result;
        /// <summary>
        /// 1降妖除魔2全民诛魔3帮派任务4藏宝图任务
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResDailyTaskTransfer pkg = new ResDailyTaskTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
            }
        }
		public ResDailyTaskTransfer()
		{
			PacketID = 492;
		}
    }

    /// <summary>
    ///  [响应类] 每日任务传送 创建者
    /// </summary>
    [Package(492)]
    public partial class ResDailyTaskTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDailyTaskTransfer();
        }
    }


    /// <summary>
    ///  [请求类]沙巴克信息
    /// </summary>
    public partial class ReqShabakInfo: Packet 
    {
        /// <summary>
        /// ID信息
        /// </summary>
        public string IDInfo;

        public override Packet Clone()
        {
            ReqShabakInfo pkg = new ReqShabakInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IDInfo = IDInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(IDInfo);
            }
            else
            {
                IDInfo = oByteArray.ReadUTF();
            }
        }
		public ReqShabakInfo()
		{
			PacketID = 493;
		}
    }

    /// <summary>
    ///  [请求类] 沙巴克信息 创建者
    /// </summary>
    [Package(493)]
    public partial class ReqShabakInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqShabakInfo();
        }
    }


    /// <summary>
    ///  [响应类]沙巴克信息
    /// </summary>
    public partial class ResShabakInfo: Packet 
    {
        /// <summary>
        /// 工会名字
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 主要成员信息
        /// </summary>
        public List<ShabakGuildInfo> GuildInfo = new List<ShabakGuildInfo>();

        public override Packet Clone()
        {
            ResShabakInfo pkg = new ResShabakInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildName = GuildName;
            foreach (ShabakGuildInfo item in GuildInfo)
            {
                pkg.GuildInfo.Add(item.Clone() as ShabakGuildInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUShort((ushort)GuildInfo.Count);
                for (int i = 0; i < GuildInfo.Count; i++)
                {
                    GuildInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                GuildName = oByteArray.ReadUTF();
                int GuildInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < GuildInfoCount; i++)
                {
                    ShabakGuildInfo obj = new ShabakGuildInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    GuildInfo.Add(obj);
                }
            }
        }
		public ResShabakInfo()
		{
			PacketID = 494;
		}
    }

    /// <summary>
    ///  [响应类] 沙巴克信息 创建者
    /// </summary>
    [Package(494)]
    public partial class ResShabakInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResShabakInfo();
        }
    }


    /// <summary>
    ///  [请求类]开启宝藏类物品
    /// </summary>
    public partial class ReqOpenTreasure: Packet 
    {

        public override Packet Clone()
        {
            ReqOpenTreasure pkg = new ReqOpenTreasure();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOpenTreasure()
		{
			PacketID = 495;
		}
    }

    /// <summary>
    ///  [请求类] 开启宝藏类物品 创建者
    /// </summary>
    [Package(495)]
    public partial class ReqOpenTreasureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOpenTreasure();
        }
    }


    /// <summary>
    ///  [响应类]开启宝藏类物品
    /// </summary>
    public partial class ResOpenTreasure: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图X
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 地图Y
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public uint MonsterID;
        /// <summary>
        /// 延迟时间，毫秒
        /// </summary>
        public uint Time;
        /// <summary>
        /// 物品模板ID
        /// </summary>
        public uint TmplID;

        public override Packet Clone()
        {
            ResOpenTreasure pkg = new ResOpenTreasure();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.MonsterID = MonsterID;
            pkg.Time = Time;
            pkg.TmplID = TmplID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(MonsterID);
                oByteArray.WriteUInt(Time);
                oByteArray.WriteUInt(TmplID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                MonsterID = oByteArray.ReadUInt();
                Time = oByteArray.ReadUInt();
                TmplID = oByteArray.ReadUInt();
            }
        }
		public ResOpenTreasure()
		{
			PacketID = 496;
		}
    }

    /// <summary>
    ///  [响应类] 开启宝藏类物品 创建者
    /// </summary>
    [Package(496)]
    public partial class ResOpenTreasureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOpenTreasure();
        }
    }


    /// <summary>
    ///  [请求类]设置队伍ID
    /// </summary>
    public partial class ReqNoticeSetGroup: Packet 
    {
        /// <summary>
        /// 队伍Guid
        /// </summary>
        public ulong GroupGuid;

        public override Packet Clone()
        {
            ReqNoticeSetGroup pkg = new ReqNoticeSetGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GroupGuid = GroupGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(GroupGuid);
            }
            else
            {
                GroupGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqNoticeSetGroup()
		{
			PacketID = 497;
		}
    }

    /// <summary>
    ///  [请求类] 设置队伍ID 创建者
    /// </summary>
    [Package(497)]
    public partial class ReqNoticeSetGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSetGroup();
        }
    }


    /// <summary>
    ///  [响应类]设置队伍ID
    /// </summary>
    public partial class ResNoticeSetGroup: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeSetGroup pkg = new ResNoticeSetGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeSetGroup()
		{
			PacketID = 498;
		}
    }

    /// <summary>
    ///  [响应类] 设置队伍ID 创建者
    /// </summary>
    [Package(498)]
    public partial class ResNoticeSetGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSetGroup();
        }
    }


    /// <summary>
    ///  [请求类]更新挑战Boss列表
    /// </summary>
    public partial class ReqGetBossList: Packet 
    {

        public override Packet Clone()
        {
            ReqGetBossList pkg = new ReqGetBossList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetBossList()
		{
			PacketID = 499;
		}
    }

    /// <summary>
    ///  [请求类] 更新挑战Boss列表 创建者
    /// </summary>
    [Package(499)]
    public partial class ReqGetBossListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetBossList();
        }
    }


    /// <summary>
    ///  [响应类]更新挑战Boss列表
    /// </summary>
    public partial class ResGetBossList: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ChallengeBossInfo> BossList = new List<ChallengeBossInfo>();

        public override Packet Clone()
        {
            ResGetBossList pkg = new ResGetBossList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ChallengeBossInfo item in BossList)
            {
                pkg.BossList.Add(item.Clone() as ChallengeBossInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)BossList.Count);
                for (int i = 0; i < BossList.Count; i++)
                {
                    BossList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int BossListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BossListCount; i++)
                {
                    ChallengeBossInfo obj = new ChallengeBossInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    BossList.Add(obj);
                }
            }
        }
		public ResGetBossList()
		{
			PacketID = 500;
		}
    }

    /// <summary>
    ///  [响应类] 更新挑战Boss列表 创建者
    /// </summary>
    [Package(500)]
    public partial class ResGetBossListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetBossList();
        }
    }


    /// <summary>
    ///  [请求类]击杀Boss传送
    /// </summary>
    public partial class ReqBossTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 传送ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqBossTransfer pkg = new ReqBossTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqBossTransfer()
		{
			PacketID = 501;
		}
    }

    /// <summary>
    ///  [请求类] 击杀Boss传送 创建者
    /// </summary>
    [Package(501)]
    public partial class ReqBossTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBossTransfer();
        }
    }


    /// <summary>
    ///  [响应类]击杀Boss传送
    /// </summary>
    public partial class ResBossTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBossTransfer pkg = new ResBossTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBossTransfer()
		{
			PacketID = 502;
		}
    }

    /// <summary>
    ///  [响应类] 击杀Boss传送 创建者
    /// </summary>
    [Package(502)]
    public partial class ResBossTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBossTransfer();
        }
    }


    /// <summary>
    ///  [请求类]开始波数类型副本战斗
    /// </summary>
    public partial class ReqStartDungoen: Packet 
    {

        public override Packet Clone()
        {
            ReqStartDungoen pkg = new ReqStartDungoen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqStartDungoen()
		{
			PacketID = 503;
		}
    }

    /// <summary>
    ///  [请求类] 开始波数类型副本战斗 创建者
    /// </summary>
    [Package(503)]
    public partial class ReqStartDungoenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStartDungoen();
        }
    }


    /// <summary>
    ///  [响应类]开始波数类型副本战斗
    /// </summary>
    public partial class ResStartDungoen: Packet 
    {

        public override Packet Clone()
        {
            ResStartDungoen pkg = new ResStartDungoen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResStartDungoen()
		{
			PacketID = 504;
		}
    }

    /// <summary>
    ///  [响应类] 开始波数类型副本战斗 创建者
    /// </summary>
    [Package(504)]
    public partial class ResStartDungoenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStartDungoen();
        }
    }


    /// <summary>
    ///  [请求类]系统提示
    /// </summary>
    public partial class ReqSystemMessage: Packet 
    {

        public override Packet Clone()
        {
            ReqSystemMessage pkg = new ReqSystemMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSystemMessage()
		{
			PacketID = 505;
		}
    }

    /// <summary>
    ///  [请求类] 系统提示 创建者
    /// </summary>
    [Package(505)]
    public partial class ReqSystemMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSystemMessage();
        }
    }


    /// <summary>
    ///  [响应类]系统提示
    /// </summary>
    public partial class ResSystemMessage: Packet 
    {
        /// <summary>
        /// 系统提示TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public string Param1;
        /// <summary>
        /// 
        /// </summary>
        public string Param2;
        /// <summary>
        /// 
        /// </summary>
        public string Param3;
        /// <summary>
        /// 
        /// </summary>
        public string Param4;
        /// <summary>
        /// 
        /// </summary>
        public string Param5;
        /// <summary>
        /// 
        /// </summary>
        public string Param6;
        /// <summary>
        /// 客户端自己发起
        /// </summary>
        public bool IsClient;

        public override Packet Clone()
        {
            ResSystemMessage pkg = new ResSystemMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Param1 = Param1;
            pkg.Param2 = Param2;
            pkg.Param3 = Param3;
            pkg.Param4 = Param4;
            pkg.Param5 = Param5;
            pkg.Param6 = Param6;
            pkg.IsClient = IsClient;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUTF(Param1);
                oByteArray.WriteUTF(Param2);
                oByteArray.WriteUTF(Param3);
                oByteArray.WriteUTF(Param4);
                oByteArray.WriteUTF(Param5);
                oByteArray.WriteUTF(Param6);
                oByteArray.WriteBoolean(IsClient);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Param1 = oByteArray.ReadUTF();
                Param2 = oByteArray.ReadUTF();
                Param3 = oByteArray.ReadUTF();
                Param4 = oByteArray.ReadUTF();
                Param5 = oByteArray.ReadUTF();
                Param6 = oByteArray.ReadUTF();
                IsClient = oByteArray.ReadBoolean();
            }
        }
		public ResSystemMessage()
		{
			PacketID = 506;
		}
    }

    /// <summary>
    ///  [响应类] 系统提示 创建者
    /// </summary>
    [Package(506)]
    public partial class ResSystemMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSystemMessage();
        }
    }


    /// <summary>
    ///  [请求类]领取VIP奖励
    /// </summary>
    public partial class ReqGetVIPAward: Packet 
    {
        /// <summary>
        /// VIP等级
        /// </summary>
        public uint VIPLv;

        public override Packet Clone()
        {
            ReqGetVIPAward pkg = new ReqGetVIPAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.VIPLv = VIPLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(VIPLv);
            }
            else
            {
                VIPLv = oByteArray.ReadUInt();
            }
        }
		public ReqGetVIPAward()
		{
			PacketID = 507;
		}
    }

    /// <summary>
    ///  [请求类] 领取VIP奖励 创建者
    /// </summary>
    [Package(507)]
    public partial class ReqGetVIPAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetVIPAward();
        }
    }


    /// <summary>
    ///  [响应类]领取VIP奖励
    /// </summary>
    public partial class ResGetVIPAward: Packet 
    {
        /// <summary>
        /// 0-成功 1-奖励已领取，2-背包格子不足 3-该玩家不是VIP
        /// </summary>
        public uint Result;
        /// <summary>
        /// 领取的Vip奖励等级
        /// </summary>
        public uint VIPLv;

        public override Packet Clone()
        {
            ResGetVIPAward pkg = new ResGetVIPAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.VIPLv = VIPLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(VIPLv);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                VIPLv = oByteArray.ReadUInt();
            }
        }
		public ResGetVIPAward()
		{
			PacketID = 508;
		}
    }

    /// <summary>
    ///  [响应类] 领取VIP奖励 创建者
    /// </summary>
    [Package(508)]
    public partial class ResGetVIPAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetVIPAward();
        }
    }


    /// <summary>
    ///  [请求类]获取VIPbuff
    /// </summary>
    public partial class ReqGetVIPBuff: Packet 
    {
        /// <summary>
        /// 1-经验buff
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqGetVIPBuff pkg = new ReqGetVIPBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqGetVIPBuff()
		{
			PacketID = 509;
		}
    }

    /// <summary>
    ///  [请求类] 获取VIPbuff 创建者
    /// </summary>
    [Package(509)]
    public partial class ReqGetVIPBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetVIPBuff();
        }
    }


    /// <summary>
    ///  [响应类]获取VIPbuff
    /// </summary>
    public partial class ResGetVIPBuff: Packet 
    {
        /// <summary>
        /// 0-成功，1-今日的buff已使用过，2-不是VIP玩家
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResGetVIPBuff pkg = new ResGetVIPBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResGetVIPBuff()
		{
			PacketID = 510;
		}
    }

    /// <summary>
    ///  [响应类] 获取VIPbuff 创建者
    /// </summary>
    [Package(510)]
    public partial class ResGetVIPBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetVIPBuff();
        }
    }


    /// <summary>
    ///  [请求类]获取VIP人数
    /// </summary>
    public partial class ReqGetVipNum: Packet 
    {

        public override Packet Clone()
        {
            ReqGetVipNum pkg = new ReqGetVipNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetVipNum()
		{
			PacketID = 511;
		}
    }

    /// <summary>
    ///  [请求类] 获取VIP人数 创建者
    /// </summary>
    [Package(511)]
    public partial class ReqGetVipNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetVipNum();
        }
    }


    /// <summary>
    ///  [响应类]获取VIP人数
    /// </summary>
    public partial class ResGetVipNum: Packet 
    {
        /// <summary>
        /// VIP人数
        /// </summary>
        public uint Num;

        public override Packet Clone()
        {
            ResGetVipNum pkg = new ResGetVipNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Num);
            }
            else
            {
                Num = oByteArray.ReadUInt();
            }
        }
		public ResGetVipNum()
		{
			PacketID = 512;
		}
    }

    /// <summary>
    ///  [响应类] 获取VIP人数 创建者
    /// </summary>
    [Package(512)]
    public partial class ResGetVipNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetVipNum();
        }
    }


    /// <summary>
    ///  [请求类]获取全服VIP人数
    /// </summary>
    public partial class ReqInitializeServer007: Packet 
    {

        public override Packet Clone()
        {
            ReqInitializeServer007 pkg = new ReqInitializeServer007();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitializeServer007()
		{
			PacketID = 513;
		}
    }

    /// <summary>
    ///  [请求类] 获取全服VIP人数 创建者
    /// </summary>
    [Package(513)]
    public partial class ReqInitializeServer007Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitializeServer007();
        }
    }


    /// <summary>
    ///  [响应类]获取全服VIP人数
    /// </summary>
    public partial class ResInitializeServer007: Packet 
    {
        /// <summary>
        /// 人数
        /// </summary>
        public uint Num;

        public override Packet Clone()
        {
            ResInitializeServer007 pkg = new ResInitializeServer007();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Num);
            }
            else
            {
                Num = oByteArray.ReadUInt();
            }
        }
		public ResInitializeServer007()
		{
			PacketID = 514;
		}
    }

    /// <summary>
    ///  [响应类] 获取全服VIP人数 创建者
    /// </summary>
    [Package(514)]
    public partial class ResInitializeServer007Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitializeServer007();
        }
    }


    /// <summary>
    ///  [请求类]领取在线周奖励
    /// </summary>
    public partial class ReqGetOnlineWeeklyAward: Packet 
    {

        public override Packet Clone()
        {
            ReqGetOnlineWeeklyAward pkg = new ReqGetOnlineWeeklyAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetOnlineWeeklyAward()
		{
			PacketID = 515;
		}
    }

    /// <summary>
    ///  [请求类] 领取在线周奖励 创建者
    /// </summary>
    [Package(515)]
    public partial class ReqGetOnlineWeeklyAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetOnlineWeeklyAward();
        }
    }


    /// <summary>
    ///  [响应类]领取在线周奖励
    /// </summary>
    public partial class ResGetOnlineWeeklyAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResGetOnlineWeeklyAward pkg = new ResGetOnlineWeeklyAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResGetOnlineWeeklyAward()
		{
			PacketID = 516;
		}
    }

    /// <summary>
    ///  [响应类] 领取在线周奖励 创建者
    /// </summary>
    [Package(516)]
    public partial class ResGetOnlineWeeklyAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetOnlineWeeklyAward();
        }
    }


    /// <summary>
    ///  [请求类]在线奖励可领取
    /// </summary>
    public partial class ReqComplateOnlineAward: Packet 
    {

        public override Packet Clone()
        {
            ReqComplateOnlineAward pkg = new ReqComplateOnlineAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqComplateOnlineAward()
		{
			PacketID = 517;
		}
    }

    /// <summary>
    ///  [请求类] 在线奖励可领取 创建者
    /// </summary>
    [Package(517)]
    public partial class ReqComplateOnlineAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqComplateOnlineAward();
        }
    }


    /// <summary>
    ///  [响应类]在线奖励可领取
    /// </summary>
    public partial class ResComplateOnlineAward: Packet 
    {
        /// <summary>
        /// 奖励大厅的TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 在线时间
        /// </summary>
        public uint OnlineTimes;

        public override Packet Clone()
        {
            ResComplateOnlineAward pkg = new ResComplateOnlineAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.OnlineTimes = OnlineTimes;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(OnlineTimes);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                OnlineTimes = oByteArray.ReadUInt();
            }
        }
		public ResComplateOnlineAward()
		{
			PacketID = 518;
		}
    }

    /// <summary>
    ///  [响应类] 在线奖励可领取 创建者
    /// </summary>
    [Package(518)]
    public partial class ResComplateOnlineAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResComplateOnlineAward();
        }
    }


    /// <summary>
    ///  [请求类]通知WorldServer广播消息
    /// </summary>
    public partial class ReqNoticeSystemMessage: Packet 
    {
        /// <summary>
        /// 广播TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public string Param1;
        /// <summary>
        /// 
        /// </summary>
        public string Param2;
        /// <summary>
        /// 
        /// </summary>
        public string Param3;
        /// <summary>
        /// 
        /// </summary>
        public string Param4;
        /// <summary>
        /// 
        /// </summary>
        public string Param5;

        public override Packet Clone()
        {
            ReqNoticeSystemMessage pkg = new ReqNoticeSystemMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Param1 = Param1;
            pkg.Param2 = Param2;
            pkg.Param3 = Param3;
            pkg.Param4 = Param4;
            pkg.Param5 = Param5;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUTF(Param1);
                oByteArray.WriteUTF(Param2);
                oByteArray.WriteUTF(Param3);
                oByteArray.WriteUTF(Param4);
                oByteArray.WriteUTF(Param5);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Param1 = oByteArray.ReadUTF();
                Param2 = oByteArray.ReadUTF();
                Param3 = oByteArray.ReadUTF();
                Param4 = oByteArray.ReadUTF();
                Param5 = oByteArray.ReadUTF();
            }
        }
		public ReqNoticeSystemMessage()
		{
			PacketID = 519;
		}
    }

    /// <summary>
    ///  [请求类] 通知WorldServer广播消息 创建者
    /// </summary>
    [Package(519)]
    public partial class ReqNoticeSystemMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSystemMessage();
        }
    }


    /// <summary>
    ///  [响应类]通知WorldServer广播消息
    /// </summary>
    public partial class ResNoticeSystemMessage: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeSystemMessage pkg = new ResNoticeSystemMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeSystemMessage()
		{
			PacketID = 520;
		}
    }

    /// <summary>
    ///  [响应类] 通知WorldServer广播消息 创建者
    /// </summary>
    [Package(520)]
    public partial class ResNoticeSystemMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSystemMessage();
        }
    }


    /// <summary>
    ///  [请求类]GM测试更新在线时间
    /// </summary>
    public partial class ReqGMUpdateOnlineTimes: Packet 
    {

        public override Packet Clone()
        {
            ReqGMUpdateOnlineTimes pkg = new ReqGMUpdateOnlineTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGMUpdateOnlineTimes()
		{
			PacketID = 521;
		}
    }

    /// <summary>
    ///  [请求类] GM测试更新在线时间 创建者
    /// </summary>
    [Package(521)]
    public partial class ReqGMUpdateOnlineTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGMUpdateOnlineTimes();
        }
    }


    /// <summary>
    ///  [响应类]GM测试更新在线时间
    /// </summary>
    public partial class ResGMUpdateOnlineTimes: Packet 
    {
        /// <summary>
        /// 在线时间
        /// </summary>
        public uint OnlineTimes;

        public override Packet Clone()
        {
            ResGMUpdateOnlineTimes pkg = new ResGMUpdateOnlineTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OnlineTimes = OnlineTimes;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(OnlineTimes);
            }
            else
            {
                OnlineTimes = oByteArray.ReadUInt();
            }
        }
		public ResGMUpdateOnlineTimes()
		{
			PacketID = 522;
		}
    }

    /// <summary>
    ///  [响应类] GM测试更新在线时间 创建者
    /// </summary>
    [Package(522)]
    public partial class ResGMUpdateOnlineTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGMUpdateOnlineTimes();
        }
    }


    /// <summary>
    ///  [请求类]通知活动改变状态
    /// </summary>
    public partial class ReqChangeActivityState: Packet 
    {

        public override Packet Clone()
        {
            ReqChangeActivityState pkg = new ReqChangeActivityState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqChangeActivityState()
		{
			PacketID = 523;
		}
    }

    /// <summary>
    ///  [请求类] 通知活动改变状态 创建者
    /// </summary>
    [Package(523)]
    public partial class ReqChangeActivityStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeActivityState();
        }
    }


    /// <summary>
    ///  [响应类]通知活动改变状态
    /// </summary>
    public partial class ResChangeActivityState: Packet 
    {
        /// <summary>
        /// 活动ID
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// True是开启False关闭
        /// </summary>
        public bool Open;

        public override Packet Clone()
        {
            ResChangeActivityState pkg = new ResChangeActivityState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.Open = Open;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteBoolean(Open);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                Open = oByteArray.ReadBoolean();
            }
        }
		public ResChangeActivityState()
		{
			PacketID = 524;
		}
    }

    /// <summary>
    ///  [响应类] 通知活动改变状态 创建者
    /// </summary>
    [Package(524)]
    public partial class ResChangeActivityStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeActivityState();
        }
    }


    /// <summary>
    ///  [请求类]活动传送
    /// </summary>
    public partial class ReqActivityTransfer: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 传送类型
        /// </summary>
        public uint SubType;

        public override Packet Clone()
        {
            ReqActivityTransfer pkg = new ReqActivityTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityType = ActivityType;
            pkg.SubType = SubType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityType);
                oByteArray.WriteUInt(SubType);
            }
            else
            {
                ActivityType = oByteArray.ReadUInt();
                SubType = oByteArray.ReadUInt();
            }
        }
		public ReqActivityTransfer()
		{
			PacketID = 525;
		}
    }

    /// <summary>
    ///  [请求类] 活动传送 创建者
    /// </summary>
    [Package(525)]
    public partial class ReqActivityTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqActivityTransfer();
        }
    }


    /// <summary>
    ///  [响应类]活动传送
    /// </summary>
    public partial class ResActivityTransfer: Packet 
    {
        /// <summary>
        /// 0是成功，1是传送时间过了，2是等级不足3是活动已关闭，4是需要物品数量不足，5是背包空间不足
        /// </summary>
        public byte Result;
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint ActivityType;

        public override Packet Clone()
        {
            ResActivityTransfer pkg = new ResActivityTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ActivityType = ActivityType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(ActivityType);
            }
            else
            {
                Result = oByteArray.ReadByte();
                ActivityType = oByteArray.ReadUInt();
            }
        }
		public ResActivityTransfer()
		{
			PacketID = 526;
		}
    }

    /// <summary>
    ///  [响应类] 活动传送 创建者
    /// </summary>
    [Package(526)]
    public partial class ResActivityTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResActivityTransfer();
        }
    }


    /// <summary>
    ///  [请求类]战神信息
    /// </summary>
    public partial class ReqGetPetInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqGetPetInfo pkg = new ReqGetPetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetPetInfo()
		{
			PacketID = 527;
		}
    }

    /// <summary>
    ///  [请求类] 战神信息 创建者
    /// </summary>
    [Package(527)]
    public partial class ReqGetPetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetPetInfo();
        }
    }


    /// <summary>
    ///  [响应类]战神信息
    /// </summary>
    public partial class ResGetPetInfo: Packet 
    {
        /// <summary>
        /// 战神召唤次数
        /// </summary>
        public uint CallPetCount;
        /// <summary>
        /// 倒计时时间
        /// </summary>
        public uint ResetTime;

        public override Packet Clone()
        {
            ResGetPetInfo pkg = new ResGetPetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CallPetCount = CallPetCount;
            pkg.ResetTime = ResetTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CallPetCount);
                oByteArray.WriteUInt(ResetTime);
            }
            else
            {
                CallPetCount = oByteArray.ReadUInt();
                ResetTime = oByteArray.ReadUInt();
            }
        }
		public ResGetPetInfo()
		{
			PacketID = 528;
		}
    }

    /// <summary>
    ///  [响应类] 战神信息 创建者
    /// </summary>
    [Package(528)]
    public partial class ResGetPetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetPetInfo();
        }
    }


    /// <summary>
    ///  [请求类]角色死亡
    /// </summary>
    public partial class ReqNoticePlayerDead: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticePlayerDead pkg = new ReqNoticePlayerDead();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticePlayerDead()
		{
			PacketID = 529;
		}
    }

    /// <summary>
    ///  [请求类] 角色死亡 创建者
    /// </summary>
    [Package(529)]
    public partial class ReqNoticePlayerDeadCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePlayerDead();
        }
    }


    /// <summary>
    ///  [响应类]角色死亡
    /// </summary>
    public partial class ResNoticePlayerDead: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 诅咒值
        /// </summary>
        public uint Curse;
        /// <summary>
        /// 昵称
        /// </summary>
        public string NickName;

        public override Packet Clone()
        {
            ResNoticePlayerDead pkg = new ResNoticePlayerDead();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Curse = Curse;
            pkg.NickName = NickName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Curse);
                oByteArray.WriteUTF(NickName);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Curse = oByteArray.ReadUInt();
                NickName = oByteArray.ReadUTF();
            }
        }
		public ResNoticePlayerDead()
		{
			PacketID = 530;
		}
    }

    /// <summary>
    ///  [响应类] 角色死亡 创建者
    /// </summary>
    [Package(530)]
    public partial class ResNoticePlayerDeadCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePlayerDead();
        }
    }


    /// <summary>
    ///  [请求类]死亡掉落物品
    /// </summary>
    public partial class ReqNoticeDeadDropItems: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeDeadDropItems pkg = new ReqNoticeDeadDropItems();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeDeadDropItems()
		{
			PacketID = 531;
		}
    }

    /// <summary>
    ///  [请求类] 死亡掉落物品 创建者
    /// </summary>
    [Package(531)]
    public partial class ReqNoticeDeadDropItemsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDeadDropItems();
        }
    }


    /// <summary>
    ///  [响应类]死亡掉落物品
    /// </summary>
    public partial class ResNoticeDeadDropItems: Packet 
    {
        /// <summary>
        /// 掉落物品列表
        /// </summary>
        public string ItemList;

        public override Packet Clone()
        {
            ResNoticeDeadDropItems pkg = new ResNoticeDeadDropItems();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemList = ItemList;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ItemList);
            }
            else
            {
                ItemList = oByteArray.ReadUTF();
            }
        }
		public ResNoticeDeadDropItems()
		{
			PacketID = 532;
		}
    }

    /// <summary>
    ///  [响应类] 死亡掉落物品 创建者
    /// </summary>
    [Package(532)]
    public partial class ResNoticeDeadDropItemsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDeadDropItems();
        }
    }


    /// <summary>
    ///  [请求类]通知初始化活动地图
    /// </summary>
    public partial class ReqNoticeInitActivityMap: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeInitActivityMap pkg = new ReqNoticeInitActivityMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeInitActivityMap()
		{
			PacketID = 533;
		}
    }

    /// <summary>
    ///  [请求类] 通知初始化活动地图 创建者
    /// </summary>
    [Package(533)]
    public partial class ReqNoticeInitActivityMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeInitActivityMap();
        }
    }


    /// <summary>
    ///  [响应类]通知初始化活动地图
    /// </summary>
    public partial class ResNoticeInitActivityMap: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public List<uint> MapIDVec = new List<uint>();

        public override Packet Clone()
        {
            ResNoticeInitActivityMap pkg = new ResNoticeInitActivityMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in MapIDVec)
            {
                pkg.MapIDVec.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)MapIDVec.Count);
                for (int i = 0; i < MapIDVec.Count; i++)
                {
                    oByteArray.WriteUInt(MapIDVec[i]);
                }
            }
            else
            {
                int MapIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapIDVecCount; i++)
                {
                    MapIDVec.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResNoticeInitActivityMap()
		{
			PacketID = 534;
		}
    }

    /// <summary>
    ///  [响应类] 通知初始化活动地图 创建者
    /// </summary>
    [Package(534)]
    public partial class ResNoticeInitActivityMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeInitActivityMap();
        }
    }


    /// <summary>
    ///  [请求类]领取经验领奖者红包奖励
    /// </summary>
    public partial class ReqLinghongbao: Packet 
    {
        /// <summary>
        /// 红包口令
        /// </summary>
        public string Code;
        /// <summary>
        /// 
        /// </summary>
        public uint RedBagID;

        public override Packet Clone()
        {
            ReqLinghongbao pkg = new ReqLinghongbao();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Code = Code;
            pkg.RedBagID = RedBagID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Code);
                oByteArray.WriteUInt(RedBagID);
            }
            else
            {
                Code = oByteArray.ReadUTF();
                RedBagID = oByteArray.ReadUInt();
            }
        }
		public ReqLinghongbao()
		{
			PacketID = 535;
		}
    }

    /// <summary>
    ///  [请求类] 领取经验领奖者红包奖励 创建者
    /// </summary>
    [Package(535)]
    public partial class ReqLinghongbaoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLinghongbao();
        }
    }


    /// <summary>
    ///  [响应类]领取经验领奖者红包奖励
    /// </summary>
    public partial class ResLinghongbao: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint RedBagID;

        public override Packet Clone()
        {
            ResLinghongbao pkg = new ResLinghongbao();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.RedBagID = RedBagID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(RedBagID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                RedBagID = oByteArray.ReadUInt();
            }
        }
		public ResLinghongbao()
		{
			PacketID = 536;
		}
    }

    /// <summary>
    ///  [响应类] 领取经验领奖者红包奖励 创建者
    /// </summary>
    [Package(536)]
    public partial class ResLinghongbaoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLinghongbao();
        }
    }


    /// <summary>
    ///  [请求类]发红包
    /// </summary>
    public partial class ReqFahongbao: Packet 
    {

        public override Packet Clone()
        {
            ReqFahongbao pkg = new ReqFahongbao();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFahongbao()
		{
			PacketID = 537;
		}
    }

    /// <summary>
    ///  [请求类] 发红包 创建者
    /// </summary>
    [Package(537)]
    public partial class ReqFahongbaoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFahongbao();
        }
    }


    /// <summary>
    ///  [响应类]发红包
    /// </summary>
    public partial class ResFahongbao: Packet 
    {
        /// <summary>
        /// 0-成功 1-元宝不足 2-玩家等级超过限制 3-功能未开启 4-没有红包类型 5-没有限制使用等级 6-超过开服天数7-红包次数不足 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResFahongbao pkg = new ResFahongbao();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResFahongbao()
		{
			PacketID = 538;
		}
    }

    /// <summary>
    ///  [响应类] 发红包 创建者
    /// </summary>
    [Package(538)]
    public partial class ResFahongbaoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFahongbao();
        }
    }


    /// <summary>
    ///  [请求类]传送到Npc旁边
    /// </summary>
    public partial class ReqTransferToNpc: Packet 
    {
        /// <summary>
        /// Npc的模板ID
        /// </summary>
        public uint NpcID;
        /// <summary>
        /// 是否使用道具
        /// </summary>
        public bool IsUseItem;

        public override Packet Clone()
        {
            ReqTransferToNpc pkg = new ReqTransferToNpc();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NpcID = NpcID;
            pkg.IsUseItem = IsUseItem;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(NpcID);
                oByteArray.WriteBoolean(IsUseItem);
            }
            else
            {
                NpcID = oByteArray.ReadUInt();
                IsUseItem = oByteArray.ReadBoolean();
            }
        }
		public ReqTransferToNpc()
		{
			PacketID = 539;
		}
    }

    /// <summary>
    ///  [请求类] 传送到Npc旁边 创建者
    /// </summary>
    [Package(539)]
    public partial class ReqTransferToNpcCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferToNpc();
        }
    }


    /// <summary>
    ///  [响应类]传送到Npc旁边
    /// </summary>
    public partial class ResTransferToNpc: Packet 
    {
        /// <summary>
        /// 0成功，1不能传送，2级别不够
        /// </summary>
        public byte Result;
        /// <summary>
        /// Npc的模板ID
        /// </summary>
        public uint NpcID;

        public override Packet Clone()
        {
            ResTransferToNpc pkg = new ResTransferToNpc();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.NpcID = NpcID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(NpcID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                NpcID = oByteArray.ReadUInt();
            }
        }
		public ResTransferToNpc()
		{
			PacketID = 540;
		}
    }

    /// <summary>
    ///  [响应类] 传送到Npc旁边 创建者
    /// </summary>
    [Package(540)]
    public partial class ResTransferToNpcCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferToNpc();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服是否禁言
    /// </summary>
    public partial class ReqNoticeForbiddenLanguage: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeForbiddenLanguage pkg = new ReqNoticeForbiddenLanguage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeForbiddenLanguage()
		{
			PacketID = 541;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服是否禁言 创建者
    /// </summary>
    [Package(541)]
    public partial class ReqNoticeForbiddenLanguageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeForbiddenLanguage();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服是否禁言
    /// </summary>
    public partial class ResNoticeForbiddenLanguage: Packet 
    {
        /// <summary>
        /// 0-不禁言 1-禁言
        /// </summary>
        public uint IsForbiddenLanguage;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeForbiddenLanguage pkg = new ResNoticeForbiddenLanguage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsForbiddenLanguage = IsForbiddenLanguage;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(IsForbiddenLanguage);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                IsForbiddenLanguage = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeForbiddenLanguage()
		{
			PacketID = 542;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服是否禁言 创建者
    /// </summary>
    [Package(542)]
    public partial class ResNoticeForbiddenLanguageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeForbiddenLanguage();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服封账号
    /// </summary>
    public partial class ReqNoticeFreezeAccount: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 是否封号1-封号 0-不封号
        /// </summary>
        public uint IsFreezeAccount;
        /// <summary>
        /// 封号结束时间
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ReqNoticeFreezeAccount pkg = new ReqNoticeFreezeAccount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.IsFreezeAccount = IsFreezeAccount;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(IsFreezeAccount);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                IsFreezeAccount = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeFreezeAccount()
		{
			PacketID = 543;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服封账号 创建者
    /// </summary>
    [Package(543)]
    public partial class ReqNoticeFreezeAccountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeFreezeAccount();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服封账号
    /// </summary>
    public partial class ResNoticeFreezeAccount: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeFreezeAccount pkg = new ResNoticeFreezeAccount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeFreezeAccount()
		{
			PacketID = 544;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服封账号 创建者
    /// </summary>
    [Package(544)]
    public partial class ResNoticeFreezeAccountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeFreezeAccount();
        }
    }


    /// <summary>
    ///  [请求类]是否封IP
    /// </summary>
    public partial class ReqNoticeFreezeIP: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 不空为封IP
        /// </summary>
        public string IsFreezeIP;
        /// <summary>
        /// 封禁结束时间
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ReqNoticeFreezeIP pkg = new ReqNoticeFreezeIP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.IsFreezeIP = IsFreezeIP;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(IsFreezeIP);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                IsFreezeIP = oByteArray.ReadUTF();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeFreezeIP()
		{
			PacketID = 545;
		}
    }

    /// <summary>
    ///  [请求类] 是否封IP 创建者
    /// </summary>
    [Package(545)]
    public partial class ReqNoticeFreezeIPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeFreezeIP();
        }
    }


    /// <summary>
    ///  [响应类]是否封IP
    /// </summary>
    public partial class ResNoticeFreezeIP: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeFreezeIP pkg = new ResNoticeFreezeIP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeFreezeIP()
		{
			PacketID = 546;
		}
    }

    /// <summary>
    ///  [响应类] 是否封IP 创建者
    /// </summary>
    [Package(546)]
    public partial class ResNoticeFreezeIPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeFreezeIP();
        }
    }


    /// <summary>
    ///  [请求类]使用强化卷
    /// </summary>
    public partial class ReqUseStrengthItem: Packet 
    {
        /// <summary>
        /// 强化卷位置
        /// </summary>
        public uint StrengthItemPos;
        /// <summary>
        /// 装备位置
        /// </summary>
        public uint EquipItemPos;

        public override Packet Clone()
        {
            ReqUseStrengthItem pkg = new ReqUseStrengthItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.StrengthItemPos = StrengthItemPos;
            pkg.EquipItemPos = EquipItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(StrengthItemPos);
                oByteArray.WriteUInt(EquipItemPos);
            }
            else
            {
                StrengthItemPos = oByteArray.ReadUInt();
                EquipItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqUseStrengthItem()
		{
			PacketID = 547;
		}
    }

    /// <summary>
    ///  [请求类] 使用强化卷 创建者
    /// </summary>
    [Package(547)]
    public partial class ReqUseStrengthItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseStrengthItem();
        }
    }


    /// <summary>
    ///  [响应类]使用强化卷
    /// </summary>
    public partial class ResUseStrengthItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResUseStrengthItem pkg = new ResUseStrengthItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResUseStrengthItem()
		{
			PacketID = 548;
		}
    }

    /// <summary>
    ///  [响应类] 使用强化卷 创建者
    /// </summary>
    [Package(548)]
    public partial class ResUseStrengthItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseStrengthItem();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端对象在保护级别内
    /// </summary>
    public partial class ReqObjectInProtect: Packet 
    {

        public override Packet Clone()
        {
            ReqObjectInProtect pkg = new ReqObjectInProtect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqObjectInProtect()
		{
			PacketID = 549;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端对象在保护级别内 创建者
    /// </summary>
    [Package(549)]
    public partial class ReqObjectInProtectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqObjectInProtect();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端对象在保护级别内
    /// </summary>
    public partial class ResObjectInProtect: Packet 
    {
        /// <summary>
        /// 0是攻击者级别不足，1是被攻击者级别不足
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResObjectInProtect pkg = new ResObjectInProtect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ResObjectInProtect()
		{
			PacketID = 550;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端对象在保护级别内 创建者
    /// </summary>
    [Package(550)]
    public partial class ResObjectInProtectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResObjectInProtect();
        }
    }


    /// <summary>
    ///  [请求类]获得神炉物品
    /// </summary>
    public partial class ReqGetGodFurnace: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqGetGodFurnace pkg = new ReqGetGodFurnace();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqGetGodFurnace()
		{
			PacketID = 551;
		}
    }

    /// <summary>
    ///  [请求类] 获得神炉物品 创建者
    /// </summary>
    [Package(551)]
    public partial class ReqGetGodFurnaceCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetGodFurnace();
        }
    }


    /// <summary>
    ///  [响应类]获得神炉物品
    /// </summary>
    public partial class ResGetGodFurnace: Packet 
    {
        /// <summary>
        /// 0-成功 1-等级不够 2-领取过了 3-模板错误
        /// </summary>
        public byte result;

        public override Packet Clone()
        {
            ResGetGodFurnace pkg = new ResGetGodFurnace();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.result = result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(result);
            }
            else
            {
                result = oByteArray.ReadByte();
            }
        }
		public ResGetGodFurnace()
		{
			PacketID = 552;
		}
    }

    /// <summary>
    ///  [响应类] 获得神炉物品 创建者
    /// </summary>
    [Package(552)]
    public partial class ResGetGodFurnaceCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetGodFurnace();
        }
    }


    /// <summary>
    ///  [请求类]心跳包
    /// </summary>
    public partial class ReqHeartBeat: Packet 
    {
        /// <summary>
        /// 心跳ID
        /// </summary>
        public uint Id;
        /// <summary>
        /// 
        /// </summary>
        public double SendMsgTime;

        public override Packet Clone()
        {
            ReqHeartBeat pkg = new ReqHeartBeat();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Id = Id;
            pkg.SendMsgTime = SendMsgTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Id);
                oByteArray.WriteDouble(SendMsgTime);
            }
            else
            {
                Id = oByteArray.ReadUInt();
                SendMsgTime = oByteArray.ReadDouble();
            }
        }
		public ReqHeartBeat()
		{
			PacketID = 553;
		}
    }

    /// <summary>
    ///  [请求类] 心跳包 创建者
    /// </summary>
    [Package(553)]
    public partial class ReqHeartBeatCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHeartBeat();
        }
    }


    /// <summary>
    ///  [响应类]心跳包
    /// </summary>
    public partial class ResHeartBeat: Packet 
    {
        /// <summary>
        /// 心跳ID
        /// </summary>
        public uint Id;
        /// <summary>
        /// 
        /// </summary>
        public double SendMsgTime;

        public override Packet Clone()
        {
            ResHeartBeat pkg = new ResHeartBeat();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Id = Id;
            pkg.SendMsgTime = SendMsgTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Id);
                oByteArray.WriteDouble(SendMsgTime);
            }
            else
            {
                Id = oByteArray.ReadUInt();
                SendMsgTime = oByteArray.ReadDouble();
            }
        }
		public ResHeartBeat()
		{
			PacketID = 554;
		}
    }

    /// <summary>
    ///  [响应类] 心跳包 创建者
    /// </summary>
    [Package(554)]
    public partial class ResHeartBeatCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHeartBeat();
        }
    }


    /// <summary>
    ///  [请求类]通知活动开启或关闭时间倒计时
    /// </summary>
    public partial class ReqNoticeActiveTime: Packet 
    {
        /// <summary>
        /// 活动TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqNoticeActiveTime pkg = new ReqNoticeActiveTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeActiveTime()
		{
			PacketID = 555;
		}
    }

    /// <summary>
    ///  [请求类] 通知活动开启或关闭时间倒计时 创建者
    /// </summary>
    [Package(555)]
    public partial class ReqNoticeActiveTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeActiveTime();
        }
    }


    /// <summary>
    ///  [响应类]通知活动开启或关闭时间倒计时
    /// </summary>
    public partial class ResNoticeActiveTime: Packet 
    {
        /// <summary>
        /// 1-活动即将开启剩余时间 2-活动入口关闭剩余时间 3-活动结束剩余时间
        /// </summary>
        public uint Type;
        /// <summary>
        /// 时间（秒数）
        /// </summary>
        public uint Time;
        /// <summary>
        /// 活动TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// DailyActivityShowTemplate[TID]
        /// </summary>
        public uint Pos;

        public override Packet Clone()
        {
            ResNoticeActiveTime pkg = new ResNoticeActiveTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Time = Time;
            pkg.TID = TID;
            pkg.Pos = Pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Time);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Pos);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Time = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                Pos = oByteArray.ReadUInt();
            }
        }
		public ResNoticeActiveTime()
		{
			PacketID = 556;
		}
    }

    /// <summary>
    ///  [响应类] 通知活动开启或关闭时间倒计时 创建者
    /// </summary>
    [Package(556)]
    public partial class ResNoticeActiveTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeActiveTime();
        }
    }


    /// <summary>
    ///  [请求类]玩家退出活动
    /// </summary>
    public partial class ReqPlayerExitActivity: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqPlayerExitActivity pkg = new ReqPlayerExitActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqPlayerExitActivity()
		{
			PacketID = 557;
		}
    }

    /// <summary>
    ///  [请求类] 玩家退出活动 创建者
    /// </summary>
    [Package(557)]
    public partial class ReqPlayerExitActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerExitActivity();
        }
    }


    /// <summary>
    ///  [响应类]玩家退出活动
    /// </summary>
    public partial class ResPlayerExitActivity: Packet 
    {
        /// <summary>
        /// 0-成功 1-无效类型
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResPlayerExitActivity pkg = new ResPlayerExitActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResPlayerExitActivity()
		{
			PacketID = 558;
		}
    }

    /// <summary>
    ///  [响应类] 玩家退出活动 创建者
    /// </summary>
    [Package(558)]
    public partial class ResPlayerExitActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerExitActivity();
        }
    }


    /// <summary>
    ///  [请求类]通知活动地图boss信息
    /// </summary>
    public partial class ReqUpdateActivityBossInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateActivityBossInfo pkg = new ReqUpdateActivityBossInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateActivityBossInfo()
		{
			PacketID = 559;
		}
    }

    /// <summary>
    ///  [请求类] 通知活动地图boss信息 创建者
    /// </summary>
    [Package(559)]
    public partial class ReqUpdateActivityBossInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateActivityBossInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知活动地图boss信息
    /// </summary>
    public partial class ResUpdateActivityBossInfo: Packet 
    {
        /// <summary>
        /// 当前数量
        /// </summary>
        public uint CurCount;
        /// <summary>
        /// 
        /// </summary>
        public uint MaxCount;

        public override Packet Clone()
        {
            ResUpdateActivityBossInfo pkg = new ResUpdateActivityBossInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurCount = CurCount;
            pkg.MaxCount = MaxCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurCount);
                oByteArray.WriteUInt(MaxCount);
            }
            else
            {
                CurCount = oByteArray.ReadUInt();
                MaxCount = oByteArray.ReadUInt();
            }
        }
		public ResUpdateActivityBossInfo()
		{
			PacketID = 560;
		}
    }

    /// <summary>
    ///  [响应类] 通知活动地图boss信息 创建者
    /// </summary>
    [Package(560)]
    public partial class ResUpdateActivityBossInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateActivityBossInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新死战到底玩家排行
    /// </summary>
    public partial class ReqUpdateSZDDPlayerRank: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateSZDDPlayerRank pkg = new ReqUpdateSZDDPlayerRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateSZDDPlayerRank()
		{
			PacketID = 561;
		}
    }

    /// <summary>
    ///  [请求类] 更新死战到底玩家排行 创建者
    /// </summary>
    [Package(561)]
    public partial class ReqUpdateSZDDPlayerRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateSZDDPlayerRank();
        }
    }


    /// <summary>
    ///  [响应类]更新死战到底玩家排行
    /// </summary>
    public partial class ResUpdateSZDDPlayerRank: Packet 
    {
        /// <summary>
        /// 玩家名字
        /// </summary>
        public string[] NickName = new string[5];
        /// <summary>
        /// 连杀次数
        /// </summary>
        public uint[] ContinityKillNum = new uint[5];

        public override Packet Clone()
        {
            ResUpdateSZDDPlayerRank pkg = new ResUpdateSZDDPlayerRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            for (int i = 0; i < 5; i++)
            {
                pkg.NickName[i] = NickName[i];
            }
            for (int i = 0; i < 5; i++)
            {
                pkg.ContinityKillNum[i] = ContinityKillNum[i];
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < 5; i++)
                {
                    oByteArray.WriteUTF(NickName[i]);
                }
                for (int i = 0; i < 5; i++)
                {
                    oByteArray.WriteUInt(ContinityKillNum[i]);
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    NickName[i] = oByteArray.ReadUTF();
                }
                for (int i = 0; i < 5; i++)
                {
                    ContinityKillNum[i] = oByteArray.ReadUInt();
                }
            }
        }
		public ResUpdateSZDDPlayerRank()
		{
			PacketID = 562;
		}
    }

    /// <summary>
    ///  [响应类] 更新死战到底玩家排行 创建者
    /// </summary>
    [Package(562)]
    public partial class ResUpdateSZDDPlayerRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateSZDDPlayerRank();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家杀人数量
    /// </summary>
    public partial class ReqUpdatePlayerKillNum: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerKillNum pkg = new ReqUpdatePlayerKillNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerKillNum()
		{
			PacketID = 563;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家杀人数量 创建者
    /// </summary>
    [Package(563)]
    public partial class ReqUpdatePlayerKillNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerKillNum();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家杀人数量
    /// </summary>
    public partial class ResUpdatePlayerKillNum: Packet 
    {
        /// <summary>
        /// 玩家连杀数量
        /// </summary>
        public uint PlayerContinuityKillNum;
        /// <summary>
        /// 玩家名次
        /// </summary>
        public uint PlayerRank;
        /// <summary>
        /// 玩家当前积分
        /// </summary>
        public uint CurPoint;

        public override Packet Clone()
        {
            ResUpdatePlayerKillNum pkg = new ResUpdatePlayerKillNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerContinuityKillNum = PlayerContinuityKillNum;
            pkg.PlayerRank = PlayerRank;
            pkg.CurPoint = CurPoint;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlayerContinuityKillNum);
                oByteArray.WriteUInt(PlayerRank);
                oByteArray.WriteUInt(CurPoint);
            }
            else
            {
                PlayerContinuityKillNum = oByteArray.ReadUInt();
                PlayerRank = oByteArray.ReadUInt();
                CurPoint = oByteArray.ReadUInt();
            }
        }
		public ResUpdatePlayerKillNum()
		{
			PacketID = 564;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家杀人数量 创建者
    /// </summary>
    [Package(564)]
    public partial class ResUpdatePlayerKillNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerKillNum();
        }
    }


    /// <summary>
    ///  [请求类]更新当前活动玩家数量
    /// </summary>
    public partial class ReqUpdatePlayerNowNum: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerNowNum pkg = new ReqUpdatePlayerNowNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerNowNum()
		{
			PacketID = 565;
		}
    }

    /// <summary>
    ///  [请求类] 更新当前活动玩家数量 创建者
    /// </summary>
    [Package(565)]
    public partial class ReqUpdatePlayerNowNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerNowNum();
        }
    }


    /// <summary>
    ///  [响应类]更新当前活动玩家数量
    /// </summary>
    public partial class ResUpdatePlayerNowNum: Packet 
    {
        /// <summary>
        /// 玩家数量
        /// </summary>
        public uint PlayerNum;

        public override Packet Clone()
        {
            ResUpdatePlayerNowNum pkg = new ResUpdatePlayerNowNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerNum = PlayerNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlayerNum);
            }
            else
            {
                PlayerNum = oByteArray.ReadUInt();
            }
        }
		public ResUpdatePlayerNowNum()
		{
			PacketID = 566;
		}
    }

    /// <summary>
    ///  [响应类] 更新当前活动玩家数量 创建者
    /// </summary>
    [Package(566)]
    public partial class ResUpdatePlayerNowNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerNowNum();
        }
    }


    /// <summary>
    ///  [请求类]领取每日充值奖励
    /// </summary>
    public partial class ReqGetDailyPayAward: Packet 
    {
        /// <summary>
        /// 每日充值金额
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqGetDailyPayAward pkg = new ReqGetDailyPayAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqGetDailyPayAward()
		{
			PacketID = 567;
		}
    }

    /// <summary>
    ///  [请求类] 领取每日充值奖励 创建者
    /// </summary>
    [Package(567)]
    public partial class ReqGetDailyPayAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetDailyPayAward();
        }
    }


    /// <summary>
    ///  [响应类]领取每日充值奖励
    /// </summary>
    public partial class ResGetDailyPayAward: Packet 
    {
        /// <summary>
        /// 0-成功 1-充值金额不够 2-背包格子不足 3-已经领取过了 4-模板表错误
        /// </summary>
        public byte Result;
        /// <summary>
        /// 每日充值金额
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResGetDailyPayAward pkg = new ResGetDailyPayAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResGetDailyPayAward()
		{
			PacketID = 568;
		}
    }

    /// <summary>
    ///  [响应类] 领取每日充值奖励 创建者
    /// </summary>
    [Package(568)]
    public partial class ResGetDailyPayAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetDailyPayAward();
        }
    }


    /// <summary>
    ///  [请求类]有人申请行会
    /// </summary>
    public partial class ReqUpdateApplyGuild: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateApplyGuild pkg = new ReqUpdateApplyGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateApplyGuild()
		{
			PacketID = 569;
		}
    }

    /// <summary>
    ///  [请求类] 有人申请行会 创建者
    /// </summary>
    [Package(569)]
    public partial class ReqUpdateApplyGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateApplyGuild();
        }
    }


    /// <summary>
    ///  [响应类]有人申请行会
    /// </summary>
    public partial class ResUpdateApplyGuild: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public GuildmemberInfo MemberInfo = new GuildmemberInfo();

        public override Packet Clone()
        {
            ResUpdateApplyGuild pkg = new ResUpdateApplyGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MemberInfo = MemberInfo.Clone() as GuildmemberInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                MemberInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MemberInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateApplyGuild()
		{
			PacketID = 570;
		}
    }

    /// <summary>
    ///  [响应类] 有人申请行会 创建者
    /// </summary>
    [Package(570)]
    public partial class ResUpdateApplyGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateApplyGuild();
        }
    }


    /// <summary>
    ///  [请求类]通知服务器正常退出
    /// </summary>
    public partial class ReqNoticeShutdown: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeShutdown pkg = new ReqNoticeShutdown();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeShutdown()
		{
			PacketID = 571;
		}
    }

    /// <summary>
    ///  [请求类] 通知服务器正常退出 创建者
    /// </summary>
    [Package(571)]
    public partial class ReqNoticeShutdownCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeShutdown();
        }
    }


    /// <summary>
    ///  [响应类]通知服务器正常退出
    /// </summary>
    public partial class ResNoticeShutdown: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeShutdown pkg = new ResNoticeShutdown();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeShutdown()
		{
			PacketID = 572;
		}
    }

    /// <summary>
    ///  [响应类] 通知服务器正常退出 创建者
    /// </summary>
    [Package(572)]
    public partial class ResNoticeShutdownCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeShutdown();
        }
    }


    /// <summary>
    ///  [请求类]玩家提建议
    /// </summary>
    public partial class ReqGiveAdvice: Packet 
    {
        /// <summary>
        /// 玩家qq号
        /// </summary>
        public string QQAccount;
        /// <summary>
        /// 玩家邮箱
        /// </summary>
        public string Mail;
        /// <summary>
        /// 建议
        /// </summary>
        public string Advice;

        public override Packet Clone()
        {
            ReqGiveAdvice pkg = new ReqGiveAdvice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.QQAccount = QQAccount;
            pkg.Mail = Mail;
            pkg.Advice = Advice;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(QQAccount);
                oByteArray.WriteUTF(Mail);
                oByteArray.WriteUTF(Advice);
            }
            else
            {
                QQAccount = oByteArray.ReadUTF();
                Mail = oByteArray.ReadUTF();
                Advice = oByteArray.ReadUTF();
            }
        }
		public ReqGiveAdvice()
		{
			PacketID = 573;
		}
    }

    /// <summary>
    ///  [请求类] 玩家提建议 创建者
    /// </summary>
    [Package(573)]
    public partial class ReqGiveAdviceCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGiveAdvice();
        }
    }


    /// <summary>
    ///  [响应类]玩家提建议
    /// </summary>
    public partial class ResGiveAdvice: Packet 
    {
        /// <summary>
        /// 结果0成功，1没次数了2是内容或者QQ号和邮箱都是空
        /// </summary>
        public byte uResult;
        /// <summary>
        /// 剩余提建议次数
        /// </summary>
        public ushort AdviceNum;

        public override Packet Clone()
        {
            ResGiveAdvice pkg = new ResGiveAdvice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.uResult = uResult;
            pkg.AdviceNum = AdviceNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(uResult);
                oByteArray.WriteUShort(AdviceNum);
            }
            else
            {
                uResult = oByteArray.ReadByte();
                AdviceNum = oByteArray.ReadUShort();
            }
        }
		public ResGiveAdvice()
		{
			PacketID = 574;
		}
    }

    /// <summary>
    ///  [响应类] 玩家提建议 创建者
    /// </summary>
    [Package(574)]
    public partial class ResGiveAdviceCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGiveAdvice();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服玩家充值
    /// </summary>
    public partial class ReqNoticePayMoney: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 充值元宝
        /// </summary>
        public uint PayIngot;
        /// <summary>
        /// 充值RMB
        /// </summary>
        public uint PayMoney;
        /// <summary>
        /// 账号
        /// </summary>
        public string Account;
        /// <summary>
        /// 订单号ID
        /// </summary>
        public string OrderID;
        /// <summary>
        /// 是否是扶持元宝
        /// </summary>
        public bool IsGMPay;
        /// <summary>
        /// 玩家是否离线，true表示离线充值
        /// </summary>
        public bool IsOffLine;

        public override Packet Clone()
        {
            ReqNoticePayMoney pkg = new ReqNoticePayMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.PayIngot = PayIngot;
            pkg.PayMoney = PayMoney;
            pkg.Account = Account;
            pkg.OrderID = OrderID;
            pkg.IsGMPay = IsGMPay;
            pkg.IsOffLine = IsOffLine;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(PayIngot);
                oByteArray.WriteUInt(PayMoney);
                oByteArray.WriteUTF(Account);
                oByteArray.WriteUTF(OrderID);
                oByteArray.WriteBoolean(IsGMPay);
                oByteArray.WriteBoolean(IsOffLine);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                PayIngot = oByteArray.ReadUInt();
                PayMoney = oByteArray.ReadUInt();
                Account = oByteArray.ReadUTF();
                OrderID = oByteArray.ReadUTF();
                IsGMPay = oByteArray.ReadBoolean();
                IsOffLine = oByteArray.ReadBoolean();
            }
        }
		public ReqNoticePayMoney()
		{
			PacketID = 575;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服玩家充值 创建者
    /// </summary>
    [Package(575)]
    public partial class ReqNoticePayMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePayMoney();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服玩家充值
    /// </summary>
    public partial class ResNoticePayMoney: Packet 
    {

        public override Packet Clone()
        {
            ResNoticePayMoney pkg = new ResNoticePayMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticePayMoney()
		{
			PacketID = 576;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服玩家充值 创建者
    /// </summary>
    [Package(576)]
    public partial class ResNoticePayMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePayMoney();
        }
    }


    /// <summary>
    ///  [请求类]加入行会设置
    /// </summary>
    public partial class ReqJoinGuildSet: Packet 
    {
        /// <summary>
        /// 1-允许随时加入 2-需要批准加入 3-暂不收人
        /// </summary>
        public int Type;

        public override Packet Clone()
        {
            ReqJoinGuildSet pkg = new ReqJoinGuildSet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Type);
            }
            else
            {
                Type = oByteArray.ReadInt();
            }
        }
		public ReqJoinGuildSet()
		{
			PacketID = 577;
		}
    }

    /// <summary>
    ///  [请求类] 加入行会设置 创建者
    /// </summary>
    [Package(577)]
    public partial class ReqJoinGuildSetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqJoinGuildSet();
        }
    }


    /// <summary>
    ///  [响应类]加入行会设置
    /// </summary>
    public partial class ResJoinGuildSet: Packet 
    {
        /// <summary>
        /// 0-成功 100-没有权限 101-类型错误;
        /// </summary>
        public byte Result;
        /// <summary>
        /// 1-允许随时加入 2-需要批准加入 3-暂不收人
        /// </summary>
        public uint GuildJoinType;

        public override Packet Clone()
        {
            ResJoinGuildSet pkg = new ResJoinGuildSet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.GuildJoinType = GuildJoinType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(GuildJoinType);
            }
            else
            {
                Result = oByteArray.ReadByte();
                GuildJoinType = oByteArray.ReadUInt();
            }
        }
		public ResJoinGuildSet()
		{
			PacketID = 578;
		}
    }

    /// <summary>
    ///  [响应类] 加入行会设置 创建者
    /// </summary>
    [Package(578)]
    public partial class ResJoinGuildSetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResJoinGuildSet();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服boss死亡状态
    /// </summary>
    public partial class ReqNoticeBossState: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeBossState pkg = new ReqNoticeBossState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeBossState()
		{
			PacketID = 579;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服boss死亡状态 创建者
    /// </summary>
    [Package(579)]
    public partial class ReqNoticeBossStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeBossState();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服boss死亡状态
    /// </summary>
    public partial class ResNoticeBossState: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// Boss复活时间 活着为0
        /// </summary>
        public uint ReviveTime;

        public override Packet Clone()
        {
            ResNoticeBossState pkg = new ResNoticeBossState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.MapID = MapID;
            pkg.ReviveTime = ReviveTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(ReviveTime);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                ReviveTime = oByteArray.ReadUInt();
            }
        }
		public ResNoticeBossState()
		{
			PacketID = 580;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服boss死亡状态 创建者
    /// </summary>
    [Package(580)]
    public partial class ResNoticeBossStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeBossState();
        }
    }


    /// <summary>
    ///  [请求类]设置自动组队
    /// </summary>
    public partial class ReqSetAutoTeam: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public sbyte IsAutoTeam;

        public override Packet Clone()
        {
            ReqSetAutoTeam pkg = new ReqSetAutoTeam();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsAutoTeam = IsAutoTeam;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteSByte(IsAutoTeam);
            }
            else
            {
                IsAutoTeam = oByteArray.ReadSByte();
            }
        }
		public ReqSetAutoTeam()
		{
			PacketID = 581;
		}
    }

    /// <summary>
    ///  [请求类] 设置自动组队 创建者
    /// </summary>
    [Package(581)]
    public partial class ReqSetAutoTeamCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetAutoTeam();
        }
    }


    /// <summary>
    ///  [响应类]设置自动组队
    /// </summary>
    public partial class ResSetAutoTeam: Packet 
    {

        public override Packet Clone()
        {
            ResSetAutoTeam pkg = new ResSetAutoTeam();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSetAutoTeam()
		{
			PacketID = 582;
		}
    }

    /// <summary>
    ///  [响应类] 设置自动组队 创建者
    /// </summary>
    [Package(582)]
    public partial class ResSetAutoTeamCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetAutoTeam();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新数据统计
    /// </summary>
    public partial class ReqNoticeDataStatistics: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 记录日期
        /// </summary>
        public uint LogDate;
        /// <summary>
        /// 记录信息类型
        /// </summary>
        public uint Type;
        /// <summary>
        /// 记录信息参数
        /// </summary>
        public uint Value;
        /// <summary>
        /// 是否需要立刻储存
        /// </summary>
        public uint NeedSave;

        public override Packet Clone()
        {
            ReqNoticeDataStatistics pkg = new ReqNoticeDataStatistics();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.LogDate = LogDate;
            pkg.Type = Type;
            pkg.Value = Value;
            pkg.NeedSave = NeedSave;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(LogDate);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Value);
                oByteArray.WriteUInt(NeedSave);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                LogDate = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                Value = oByteArray.ReadUInt();
                NeedSave = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeDataStatistics()
		{
			PacketID = 583;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新数据统计 创建者
    /// </summary>
    [Package(583)]
    public partial class ReqNoticeDataStatisticsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDataStatistics();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新数据统计
    /// </summary>
    public partial class ResNoticeDataStatistics: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeDataStatistics pkg = new ResNoticeDataStatistics();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeDataStatistics()
		{
			PacketID = 584;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新数据统计 创建者
    /// </summary>
    [Package(584)]
    public partial class ResNoticeDataStatisticsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDataStatistics();
        }
    }


    /// <summary>
    ///  [请求类]通知map服更新行会Guid
    /// </summary>
    public partial class ReqNoticeMapGuildGuid: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqNoticeMapGuildGuid pkg = new ReqNoticeMapGuildGuid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeMapGuildGuid()
		{
			PacketID = 585;
		}
    }

    /// <summary>
    ///  [请求类] 通知map服更新行会Guid 创建者
    /// </summary>
    [Package(585)]
    public partial class ReqNoticeMapGuildGuidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeMapGuildGuid();
        }
    }


    /// <summary>
    ///  [响应类]通知map服更新行会Guid
    /// </summary>
    public partial class ResNoticeMapGuildGuid: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeMapGuildGuid pkg = new ResNoticeMapGuildGuid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeMapGuildGuid()
		{
			PacketID = 586;
		}
    }

    /// <summary>
    ///  [响应类] 通知map服更新行会Guid 创建者
    /// </summary>
    [Package(586)]
    public partial class ResNoticeMapGuildGuidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeMapGuildGuid();
        }
    }


    /// <summary>
    ///  [请求类]测试服务器通讯时间
    /// </summary>
    public partial class ReqTestSerMsgTime: Packet 
    {
        /// <summary>
        /// 测试信息发送时间
        /// </summary>
        public ulong SendTime;

        public override Packet Clone()
        {
            ReqTestSerMsgTime pkg = new ReqTestSerMsgTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SendTime = SendTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(SendTime);
            }
            else
            {
                SendTime = oByteArray.ReadUInt64();
            }
        }
		public ReqTestSerMsgTime()
		{
			PacketID = 587;
		}
    }

    /// <summary>
    ///  [请求类] 测试服务器通讯时间 创建者
    /// </summary>
    [Package(587)]
    public partial class ReqTestSerMsgTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTestSerMsgTime();
        }
    }


    /// <summary>
    ///  [响应类]测试服务器通讯时间
    /// </summary>
    public partial class ResTestSerMsgTime: Packet 
    {
        /// <summary>
        /// 测试信息发送时间
        /// </summary>
        public ulong SendTime;
        /// <summary>
        /// 发送服务器类型
        /// </summary>
        public byte HandServer;

        public override Packet Clone()
        {
            ResTestSerMsgTime pkg = new ResTestSerMsgTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SendTime = SendTime;
            pkg.HandServer = HandServer;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(SendTime);
                oByteArray.WriteByte(HandServer);
            }
            else
            {
                SendTime = oByteArray.ReadUInt64();
                HandServer = oByteArray.ReadByte();
            }
        }
		public ResTestSerMsgTime()
		{
			PacketID = 588;
		}
    }

    /// <summary>
    ///  [响应类] 测试服务器通讯时间 创建者
    /// </summary>
    [Package(588)]
    public partial class ResTestSerMsgTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTestSerMsgTime();
        }
    }


    /// <summary>
    ///  [请求类]得到队伍信息
    /// </summary>
    public partial class ReqGetTeamInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqGetTeamInfo pkg = new ReqGetTeamInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetTeamInfo()
		{
			PacketID = 589;
		}
    }

    /// <summary>
    ///  [请求类] 得到队伍信息 创建者
    /// </summary>
    [Package(589)]
    public partial class ReqGetTeamInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetTeamInfo();
        }
    }


    /// <summary>
    ///  [响应类]得到队伍信息
    /// </summary>
    public partial class ResGetTeamInfo: Packet 
    {
        /// <summary>
        /// 0-成功 1-没有队伍
        /// </summary>
        public byte Result;
        /// <summary>
        /// 队伍信息
        /// </summary>
        public List<TeamMemberInfo> TeamInfoVec = new List<TeamMemberInfo>();

        public override Packet Clone()
        {
            ResGetTeamInfo pkg = new ResGetTeamInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (TeamMemberInfo item in TeamInfoVec)
            {
                pkg.TeamInfoVec.Add(item.Clone() as TeamMemberInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUShort((ushort)TeamInfoVec.Count);
                for (int i = 0; i < TeamInfoVec.Count; i++)
                {
                    TeamInfoVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadByte();
                int TeamInfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TeamInfoVecCount; i++)
                {
                    TeamMemberInfo obj = new TeamMemberInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    TeamInfoVec.Add(obj);
                }
            }
        }
		public ResGetTeamInfo()
		{
			PacketID = 590;
		}
    }

    /// <summary>
    ///  [响应类] 得到队伍信息 创建者
    /// </summary>
    [Package(590)]
    public partial class ResGetTeamInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetTeamInfo();
        }
    }


    /// <summary>
    ///  [请求类]领取微端奖励
    /// </summary>
    public partial class ReqGetMicroendAward: Packet 
    {
        /// <summary>
        /// 0-首次领奖,1每日领奖,2等级奖励
        /// </summary>
        public uint Type;
        /// <summary>
        /// 等级奖励参数,第几个Index
        /// </summary>
        public uint Data;

        public override Packet Clone()
        {
            ReqGetMicroendAward pkg = new ReqGetMicroendAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Data = Data;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Data);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Data = oByteArray.ReadUInt();
            }
        }
		public ReqGetMicroendAward()
		{
			PacketID = 591;
		}
    }

    /// <summary>
    ///  [请求类] 领取微端奖励 创建者
    /// </summary>
    [Package(591)]
    public partial class ReqGetMicroendAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetMicroendAward();
        }
    }


    /// <summary>
    ///  [响应类]领取微端奖励
    /// </summary>
    public partial class ResGetMicroendAward: Packet 
    {
        /// <summary>
        /// 0-成功 1-不是微端登录 2-领取过了 3-背包满了
        /// </summary>
        public byte Result;
        /// <summary>
        /// 0-首次领奖,1每日领奖,2等级奖励
        /// </summary>
        public uint Type;
        /// <summary>
        /// 等级奖励参数,第几个Index
        /// </summary>
        public uint Data;

        public override Packet Clone()
        {
            ResGetMicroendAward pkg = new ResGetMicroendAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.Data = Data;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Data);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadUInt();
                Data = oByteArray.ReadUInt();
            }
        }
		public ResGetMicroendAward()
		{
			PacketID = 592;
		}
    }

    /// <summary>
    ///  [响应类] 领取微端奖励 创建者
    /// </summary>
    [Package(592)]
    public partial class ResGetMicroendAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetMicroendAward();
        }
    }


    /// <summary>
    ///  [请求类]行会发红包
    /// </summary>
    public partial class ReqSendGuildRedBag: Packet 
    {
        /// <summary>
        /// 元宝
        /// </summary>
        public uint Ingot;
        /// <summary>
        /// 数量
        /// </summary>
        public uint Num;
        /// <summary>
        /// 红包类型 0：元宝红包 1：道具红包
        /// </summary>
        public uint RedBagType;
        /// <summary>
        /// 道具红包配置id
        /// </summary>
        public uint RedBagTmplID;

        public override Packet Clone()
        {
            ReqSendGuildRedBag pkg = new ReqSendGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Ingot = Ingot;
            pkg.Num = Num;
            pkg.RedBagType = RedBagType;
            pkg.RedBagTmplID = RedBagTmplID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Ingot);
                oByteArray.WriteUInt(Num);
                oByteArray.WriteUInt(RedBagType);
                oByteArray.WriteUInt(RedBagTmplID);
            }
            else
            {
                Ingot = oByteArray.ReadUInt();
                Num = oByteArray.ReadUInt();
                RedBagType = oByteArray.ReadUInt();
                RedBagTmplID = oByteArray.ReadUInt();
            }
        }
		public ReqSendGuildRedBag()
		{
			PacketID = 593;
		}
    }

    /// <summary>
    ///  [请求类] 行会发红包 创建者
    /// </summary>
    [Package(593)]
    public partial class ReqSendGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSendGuildRedBag();
        }
    }


    /// <summary>
    ///  [响应类]行会发红包
    /// </summary>
    public partial class ResSendGuildRedBag: Packet 
    {
        /// <summary>
        /// 0-成功 1-没有行会 100-元宝不足 101-红包数量不能等于0或者不能大于等于在线人数,在线人数1个人的时候除外 102-元宝数除以红包数太小
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResSendGuildRedBag pkg = new ResSendGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResSendGuildRedBag()
		{
			PacketID = 594;
		}
    }

    /// <summary>
    ///  [响应类] 行会发红包 创建者
    /// </summary>
    [Package(594)]
    public partial class ResSendGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSendGuildRedBag();
        }
    }


    /// <summary>
    ///  [请求类]行会抢红包
    /// </summary>
    public partial class ReqGrabGuildRedBag: Packet 
    {
        /// <summary>
        /// 红包ID
        /// </summary>
        public uint RedBagID;

        public override Packet Clone()
        {
            ReqGrabGuildRedBag pkg = new ReqGrabGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RedBagID = RedBagID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(RedBagID);
            }
            else
            {
                RedBagID = oByteArray.ReadUInt();
            }
        }
		public ReqGrabGuildRedBag()
		{
			PacketID = 595;
		}
    }

    /// <summary>
    ///  [请求类] 行会抢红包 创建者
    /// </summary>
    [Package(595)]
    public partial class ReqGrabGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGrabGuildRedBag();
        }
    }


    /// <summary>
    ///  [响应类]行会抢红包
    /// </summary>
    public partial class ResGrabGuildRedBag: Packet 
    {
        /// <summary>
        /// 0-成功 100-您已经抢过该红包 101-红包领取完了 102-红包不存在
        /// </summary>
        public byte Result;
        /// <summary>
        /// 红包ID
        /// </summary>
        public uint RedBagID;

        public override Packet Clone()
        {
            ResGrabGuildRedBag pkg = new ResGrabGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.RedBagID = RedBagID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(RedBagID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                RedBagID = oByteArray.ReadUInt();
            }
        }
		public ResGrabGuildRedBag()
		{
			PacketID = 596;
		}
    }

    /// <summary>
    ///  [响应类] 行会抢红包 创建者
    /// </summary>
    [Package(596)]
    public partial class ResGrabGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGrabGuildRedBag();
        }
    }


    /// <summary>
    ///  [请求类]单条增加行会红包
    /// </summary>
    public partial class ReqAddGuildRedBag: Packet 
    {

        public override Packet Clone()
        {
            ReqAddGuildRedBag pkg = new ReqAddGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddGuildRedBag()
		{
			PacketID = 597;
		}
    }

    /// <summary>
    ///  [请求类] 单条增加行会红包 创建者
    /// </summary>
    [Package(597)]
    public partial class ReqAddGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddGuildRedBag();
        }
    }


    /// <summary>
    ///  [响应类]单条增加行会红包
    /// </summary>
    public partial class ResAddGuildRedBag: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public GuildRedBagInfo RedBag = new GuildRedBagInfo();

        public override Packet Clone()
        {
            ResAddGuildRedBag pkg = new ResAddGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RedBag = RedBag.Clone() as GuildRedBagInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                RedBag.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                RedBag.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddGuildRedBag()
		{
			PacketID = 598;
		}
    }

    /// <summary>
    ///  [响应类] 单条增加行会红包 创建者
    /// </summary>
    [Package(598)]
    public partial class ResAddGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddGuildRedBag();
        }
    }


    /// <summary>
    ///  [请求类]初始化全局数据：行会红包
    /// </summary>
    public partial class ReqInitializeServer008: Packet 
    {

        public override Packet Clone()
        {
            ReqInitializeServer008 pkg = new ReqInitializeServer008();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitializeServer008()
		{
			PacketID = 599;
		}
    }

    /// <summary>
    ///  [请求类] 初始化全局数据：行会红包 创建者
    /// </summary>
    [Package(599)]
    public partial class ReqInitializeServer008Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitializeServer008();
        }
    }


    /// <summary>
    ///  [响应类]初始化全局数据：行会红包
    /// </summary>
    public partial class ResInitializeServer008: Packet 
    {
        /// <summary>
        /// 行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 行会红包ID
        /// </summary>
        public uint RedBagID;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo MPlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 红包剩余元宝数
        /// </summary>
        public uint Ingot;
        /// <summary>
        /// 红包剩余数量
        /// </summary>
        public uint Num;
        /// <summary>
        /// 红包是否领取完
        /// </summary>
        public uint IsGetAll;
        /// <summary>
        /// 所有者名字
        /// </summary>
        public string OwnerName;
        /// <summary>
        /// 领取红包钱和标识
        /// </summary>
        public string GetRedBagSign;
        /// <summary>
        /// 红包类型 0-元宝红包 1-道具红包
        /// </summary>
        public uint RedBagType;
        /// <summary>
        /// 道具红包配置id
        /// </summary>
        public uint RedBagTmplID;
        /// <summary>
        /// 道具红包 发放道具配置id
        /// </summary>
        public uint ItemTmplID;
        /// <summary>
        /// 失效时间
        /// </summary>
        public int ExpireTime;

        public override Packet Clone()
        {
            ResInitializeServer008 pkg = new ResInitializeServer008();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.RedBagID = RedBagID;
            pkg.MPlayerID = MPlayerID.Clone() as ObjectGuidInfo;
            pkg.Ingot = Ingot;
            pkg.Num = Num;
            pkg.IsGetAll = IsGetAll;
            pkg.OwnerName = OwnerName;
            pkg.GetRedBagSign = GetRedBagSign;
            pkg.RedBagType = RedBagType;
            pkg.RedBagTmplID = RedBagTmplID;
            pkg.ItemTmplID = ItemTmplID;
            pkg.ExpireTime = ExpireTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(RedBagID);
                MPlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Ingot);
                oByteArray.WriteUInt(Num);
                oByteArray.WriteUInt(IsGetAll);
                oByteArray.WriteUTF(OwnerName);
                oByteArray.WriteUTF(GetRedBagSign);
                oByteArray.WriteUInt(RedBagType);
                oByteArray.WriteUInt(RedBagTmplID);
                oByteArray.WriteUInt(ItemTmplID);
                oByteArray.WriteInt(ExpireTime);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                RedBagID = oByteArray.ReadUInt();
                MPlayerID.Serializtion(oByteArray, bSerialize);
                Ingot = oByteArray.ReadUInt();
                Num = oByteArray.ReadUInt();
                IsGetAll = oByteArray.ReadUInt();
                OwnerName = oByteArray.ReadUTF();
                GetRedBagSign = oByteArray.ReadUTF();
                RedBagType = oByteArray.ReadUInt();
                RedBagTmplID = oByteArray.ReadUInt();
                ItemTmplID = oByteArray.ReadUInt();
                ExpireTime = oByteArray.ReadInt();
            }
        }
		public ResInitializeServer008()
		{
			PacketID = 600;
		}
    }

    /// <summary>
    ///  [响应类] 初始化全局数据：行会红包 创建者
    /// </summary>
    [Package(600)]
    public partial class ResInitializeServer008Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitializeServer008();
        }
    }


    /// <summary>
    ///  [请求类]通知更新行会红包
    /// </summary>
    public partial class ReqNoticeUpdataGuildRedBag: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint RedBagID;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo MPlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public string OwnerName;
        /// <summary>
        /// 
        /// </summary>
        public uint Ingot;
        /// <summary>
        /// 
        /// </summary>
        public uint Num;
        /// <summary>
        /// 
        /// </summary>
        public uint IsGetAll;
        /// <summary>
        /// 
        /// </summary>
        public uint IsDel;
        /// <summary>
        /// 
        /// </summary>
        public string GetRedBagSign;
        /// <summary>
        /// 红包类型 0:元宝红包 1:道具红包
        /// </summary>
        public uint RedBagType;
        /// <summary>
        /// 道具红包配置id
        /// </summary>
        public uint RedBagTmplID;
        /// <summary>
        /// 道具红包道具配置id
        /// </summary>
        public uint ItemTmplID;
        /// <summary>
        /// 失效时间
        /// </summary>
        public int ExpireTime;

        public override Packet Clone()
        {
            ReqNoticeUpdataGuildRedBag pkg = new ReqNoticeUpdataGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            pkg.RedBagID = RedBagID;
            pkg.MPlayerID = MPlayerID.Clone() as ObjectGuidInfo;
            pkg.OwnerName = OwnerName;
            pkg.Ingot = Ingot;
            pkg.Num = Num;
            pkg.IsGetAll = IsGetAll;
            pkg.IsDel = IsDel;
            pkg.GetRedBagSign = GetRedBagSign;
            pkg.RedBagType = RedBagType;
            pkg.RedBagTmplID = RedBagTmplID;
            pkg.ItemTmplID = ItemTmplID;
            pkg.ExpireTime = ExpireTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(RedBagID);
                MPlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(OwnerName);
                oByteArray.WriteUInt(Ingot);
                oByteArray.WriteUInt(Num);
                oByteArray.WriteUInt(IsGetAll);
                oByteArray.WriteUInt(IsDel);
                oByteArray.WriteUTF(GetRedBagSign);
                oByteArray.WriteUInt(RedBagType);
                oByteArray.WriteUInt(RedBagTmplID);
                oByteArray.WriteUInt(ItemTmplID);
                oByteArray.WriteInt(ExpireTime);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
                RedBagID = oByteArray.ReadUInt();
                MPlayerID.Serializtion(oByteArray, bSerialize);
                OwnerName = oByteArray.ReadUTF();
                Ingot = oByteArray.ReadUInt();
                Num = oByteArray.ReadUInt();
                IsGetAll = oByteArray.ReadUInt();
                IsDel = oByteArray.ReadUInt();
                GetRedBagSign = oByteArray.ReadUTF();
                RedBagType = oByteArray.ReadUInt();
                RedBagTmplID = oByteArray.ReadUInt();
                ItemTmplID = oByteArray.ReadUInt();
                ExpireTime = oByteArray.ReadInt();
            }
        }
		public ReqNoticeUpdataGuildRedBag()
		{
			PacketID = 601;
		}
    }

    /// <summary>
    ///  [请求类] 通知更新行会红包 创建者
    /// </summary>
    [Package(601)]
    public partial class ReqNoticeUpdataGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdataGuildRedBag();
        }
    }


    /// <summary>
    ///  [响应类]通知更新行会红包
    /// </summary>
    public partial class ResNoticeUpdataGuildRedBag: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdataGuildRedBag pkg = new ResNoticeUpdataGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdataGuildRedBag()
		{
			PacketID = 602;
		}
    }

    /// <summary>
    ///  [响应类] 通知更新行会红包 创建者
    /// </summary>
    [Package(602)]
    public partial class ResNoticeUpdataGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdataGuildRedBag();
        }
    }


    /// <summary>
    ///  [请求类]更新沙巴克行会GUID
    /// </summary>
    public partial class ReqUpDateShaBaKeGuildGuid: Packet 
    {

        public override Packet Clone()
        {
            ReqUpDateShaBaKeGuildGuid pkg = new ReqUpDateShaBaKeGuildGuid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpDateShaBaKeGuildGuid()
		{
			PacketID = 603;
		}
    }

    /// <summary>
    ///  [请求类] 更新沙巴克行会GUID 创建者
    /// </summary>
    [Package(603)]
    public partial class ReqUpDateShaBaKeGuildGuidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpDateShaBaKeGuildGuid();
        }
    }


    /// <summary>
    ///  [响应类]更新沙巴克行会GUID
    /// </summary>
    public partial class ResUpDateShaBaKeGuildGuid: Packet 
    {
        /// <summary>
        /// 新沙巴克公会guid
        /// </summary>
        public string GuildGuid;

        public override Packet Clone()
        {
            ResUpDateShaBaKeGuildGuid pkg = new ResUpDateShaBaKeGuildGuid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildGuid = GuildGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(GuildGuid);
            }
            else
            {
                GuildGuid = oByteArray.ReadUTF();
            }
        }
		public ResUpDateShaBaKeGuildGuid()
		{
			PacketID = 604;
		}
    }

    /// <summary>
    ///  [响应类] 更新沙巴克行会GUID 创建者
    /// </summary>
    [Package(604)]
    public partial class ResUpDateShaBaKeGuildGuidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpDateShaBaKeGuildGuid();
        }
    }


    /// <summary>
    ///  [请求类]登陆地图第9步
    /// </summary>
    public partial class ReqEnterMap009: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterMap009 pkg = new ReqEnterMap009();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterMap009()
		{
			PacketID = 605;
		}
    }

    /// <summary>
    ///  [请求类] 登陆地图第9步 创建者
    /// </summary>
    [Package(605)]
    public partial class ReqEnterMap009Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMap009();
        }
    }


    /// <summary>
    ///  [响应类]登陆地图第9步
    /// </summary>
    public partial class ResEnterMap009: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 传送类型
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResEnterMap009 pkg = new ResEnterMap009();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteByte(Type);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResEnterMap009()
		{
			PacketID = 606;
		}
    }

    /// <summary>
    ///  [响应类] 登陆地图第9步 创建者
    /// </summary>
    [Package(606)]
    public partial class ResEnterMap009Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMap009();
        }
    }


    /// <summary>
    ///  [请求类]特殊物品信息统计
    /// </summary>
    public partial class ReqNoticeItemLog: Packet 
    {
        /// <summary>
        /// 物品TID
        /// </summary>
        public uint ItemTid;
        /// <summary>
        /// 物品Guid
        /// </summary>
        public ulong ItemGuid;
        /// <summary>
        /// 记录类型
        /// </summary>
        public uint LogType;
        /// <summary>
        /// 物品数量
        /// </summary>
        public uint ItemNum;
        /// <summary>
        /// 物品名称
        /// </summary>
        public string ItemName;
        /// <summary>
        /// 物品额外字符串
        /// </summary>
        public string AdditionalAttributes;
        /// <summary>
        /// 物品品质
        /// </summary>
        public uint ItemQuality;
        /// <summary>
        /// 物品来源信息
        /// </summary>
        public SourceInfo ItemSourceInfo = new SourceInfo();

        public override Packet Clone()
        {
            ReqNoticeItemLog pkg = new ReqNoticeItemLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemTid = ItemTid;
            pkg.ItemGuid = ItemGuid;
            pkg.LogType = LogType;
            pkg.ItemNum = ItemNum;
            pkg.ItemName = ItemName;
            pkg.AdditionalAttributes = AdditionalAttributes;
            pkg.ItemQuality = ItemQuality;
            pkg.ItemSourceInfo = ItemSourceInfo.Clone() as SourceInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemTid);
                oByteArray.WriteUInt64(ItemGuid);
                oByteArray.WriteUInt(LogType);
                oByteArray.WriteUInt(ItemNum);
                oByteArray.WriteUTF(ItemName);
                oByteArray.WriteUTF(AdditionalAttributes);
                oByteArray.WriteUInt(ItemQuality);
                ItemSourceInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ItemTid = oByteArray.ReadUInt();
                ItemGuid = oByteArray.ReadUInt64();
                LogType = oByteArray.ReadUInt();
                ItemNum = oByteArray.ReadUInt();
                ItemName = oByteArray.ReadUTF();
                AdditionalAttributes = oByteArray.ReadUTF();
                ItemQuality = oByteArray.ReadUInt();
                ItemSourceInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeItemLog()
		{
			PacketID = 607;
		}
    }

    /// <summary>
    ///  [请求类] 特殊物品信息统计 创建者
    /// </summary>
    [Package(607)]
    public partial class ReqNoticeItemLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeItemLog();
        }
    }


    /// <summary>
    ///  [响应类]特殊物品信息统计
    /// </summary>
    public partial class ResNoticeItemLog: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeItemLog pkg = new ResNoticeItemLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeItemLog()
		{
			PacketID = 608;
		}
    }

    /// <summary>
    ///  [响应类] 特殊物品信息统计 创建者
    /// </summary>
    [Package(608)]
    public partial class ResNoticeItemLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeItemLog();
        }
    }


    /// <summary>
    ///  [请求类]怪物爆出物品统计
    /// </summary>
    public partial class ReqMonsterDropItemLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MonsterTID;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemTID;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemNum;
        /// <summary>
        /// 
        /// </summary>
        public uint LogType;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo OwnerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqMonsterDropItemLog pkg = new ReqMonsterDropItemLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterTID = MonsterTID;
            pkg.ItemTID = ItemTID;
            pkg.ItemGuid = ItemGuid;
            pkg.ItemNum = ItemNum;
            pkg.LogType = LogType;
            pkg.OwnerID = OwnerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonsterTID);
                oByteArray.WriteUInt(ItemTID);
                oByteArray.WriteUInt(ItemGuid);
                oByteArray.WriteUInt(ItemNum);
                oByteArray.WriteUInt(LogType);
                OwnerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MonsterTID = oByteArray.ReadUInt();
                ItemTID = oByteArray.ReadUInt();
                ItemGuid = oByteArray.ReadUInt();
                ItemNum = oByteArray.ReadUInt();
                LogType = oByteArray.ReadUInt();
                OwnerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqMonsterDropItemLog()
		{
			PacketID = 609;
		}
    }

    /// <summary>
    ///  [请求类] 怪物爆出物品统计 创建者
    /// </summary>
    [Package(609)]
    public partial class ReqMonsterDropItemLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMonsterDropItemLog();
        }
    }


    /// <summary>
    ///  [响应类]怪物爆出物品统计
    /// </summary>
    public partial class ResMonsterDropItemLog: Packet 
    {

        public override Packet Clone()
        {
            ResMonsterDropItemLog pkg = new ResMonsterDropItemLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResMonsterDropItemLog()
		{
			PacketID = 610;
		}
    }

    /// <summary>
    ///  [响应类] 怪物爆出物品统计 创建者
    /// </summary>
    [Package(610)]
    public partial class ResMonsterDropItemLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMonsterDropItemLog();
        }
    }


    /// <summary>
    ///  [请求类]改变玩家地图ID和地图坐标
    /// </summary>
    public partial class ReqChangeMapXY: Packet 
    {

        public override Packet Clone()
        {
            ReqChangeMapXY pkg = new ReqChangeMapXY();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqChangeMapXY()
		{
			PacketID = 611;
		}
    }

    /// <summary>
    ///  [请求类] 改变玩家地图ID和地图坐标 创建者
    /// </summary>
    [Package(611)]
    public partial class ReqChangeMapXYCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeMapXY();
        }
    }


    /// <summary>
    ///  [响应类]改变玩家地图ID和地图坐标
    /// </summary>
    public partial class ResChangeMapXY: Packet 
    {
        /// <summary>
        /// 玩家
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 地图Y坐标
        /// </summary>
        public uint MapY;

        public override Packet Clone()
        {
            ResChangeMapXY pkg = new ResChangeMapXY();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
            }
        }
		public ResChangeMapXY()
		{
			PacketID = 612;
		}
    }

    /// <summary>
    ///  [响应类] 改变玩家地图ID和地图坐标 创建者
    /// </summary>
    [Package(612)]
    public partial class ResChangeMapXYCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeMapXY();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服在线人数
    /// </summary>
    public partial class ReqUpDateOnlinePlayerCount: Packet 
    {

        public override Packet Clone()
        {
            ReqUpDateOnlinePlayerCount pkg = new ReqUpDateOnlinePlayerCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpDateOnlinePlayerCount()
		{
			PacketID = 613;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服在线人数 创建者
    /// </summary>
    [Package(613)]
    public partial class ReqUpDateOnlinePlayerCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpDateOnlinePlayerCount();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服在线人数
    /// </summary>
    public partial class ResUpDateOnlinePlayerCount: Packet 
    {
        /// <summary>
        /// 在线人数
        /// </summary>
        public uint Count;
        /// <summary>
        /// 当前时间
        /// </summary>
        public uint Time;
        /// <summary>
        /// VIP人数
        /// </summary>
        public uint VipCount;
        /// <summary>
        /// 独立IP人数
        /// </summary>
        public uint OnlyIPCount;
        /// <summary>
        /// 平台ID
        /// </summary>
        public uint PlatformID;

        public override Packet Clone()
        {
            ResUpDateOnlinePlayerCount pkg = new ResUpDateOnlinePlayerCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Count = Count;
            pkg.Time = Time;
            pkg.VipCount = VipCount;
            pkg.OnlyIPCount = OnlyIPCount;
            pkg.PlatformID = PlatformID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Count);
                oByteArray.WriteUInt(Time);
                oByteArray.WriteUInt(VipCount);
                oByteArray.WriteUInt(OnlyIPCount);
                oByteArray.WriteUInt(PlatformID);
            }
            else
            {
                Count = oByteArray.ReadUInt();
                Time = oByteArray.ReadUInt();
                VipCount = oByteArray.ReadUInt();
                OnlyIPCount = oByteArray.ReadUInt();
                PlatformID = oByteArray.ReadUInt();
            }
        }
		public ResUpDateOnlinePlayerCount()
		{
			PacketID = 614;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服在线人数 创建者
    /// </summary>
    [Package(614)]
    public partial class ResUpDateOnlinePlayerCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpDateOnlinePlayerCount();
        }
    }


    /// <summary>
    ///  [请求类]游戏货币统计协议
    /// </summary>
    public partial class ReqNoticeMoneyLog: Packet 
    {
        /// <summary>
        /// 货币类型,1元宝,2礼券,3绑定金币,4金币
        /// </summary>
        public uint MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public uint MoneyValue;
        /// <summary>
        /// 获取,使用途径
        /// </summary>
        public uint LogType;
        /// <summary>
        /// 参数1
        /// </summary>
        public ulong Date1;
        /// <summary>
        /// 参数2
        /// </summary>
        public ulong Date2;
        /// <summary>
        /// 参数3
        /// </summary>
        public ulong Date3;
        /// <summary>
        /// 
        /// </summary>
        public uint Ingots;
        /// <summary>
        /// 
        /// </summary>
        public uint Gift;
        /// <summary>
        /// 
        /// </summary>
        public uint GoldCoin;
        /// <summary>
        /// 
        /// </summary>
        public uint BindCoin;
        /// <summary>
        /// 
        /// </summary>
        public uint GMIngots;
        /// <summary>
        /// 
        /// </summary>
        public uint NewGift;
        /// <summary>
        /// 
        /// </summary>
        public uint BindIngots;
        /// <summary>
        /// 王者币（跨服龙币）
        /// </summary>
        public uint KingCoin;
        /// <summary>
        /// 帮会贡献
        /// </summary>
        public uint GuildDonate;
        /// <summary>
        /// 热血币
        /// </summary>
        public uint HotBloodCoins;
        /// <summary>
        /// 变化后货币数量
        /// </summary>
        public uint CurValue;

        public override Packet Clone()
        {
            ReqNoticeMoneyLog pkg = new ReqNoticeMoneyLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MoneyType = MoneyType;
            pkg.MoneyValue = MoneyValue;
            pkg.LogType = LogType;
            pkg.Date1 = Date1;
            pkg.Date2 = Date2;
            pkg.Date3 = Date3;
            pkg.Ingots = Ingots;
            pkg.Gift = Gift;
            pkg.GoldCoin = GoldCoin;
            pkg.BindCoin = BindCoin;
            pkg.GMIngots = GMIngots;
            pkg.NewGift = NewGift;
            pkg.BindIngots = BindIngots;
            pkg.KingCoin = KingCoin;
            pkg.GuildDonate = GuildDonate;
            pkg.HotBloodCoins = HotBloodCoins;
            pkg.CurValue = CurValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MoneyType);
                oByteArray.WriteUInt(MoneyValue);
                oByteArray.WriteUInt(LogType);
                oByteArray.WriteUInt64(Date1);
                oByteArray.WriteUInt64(Date2);
                oByteArray.WriteUInt64(Date3);
                oByteArray.WriteUInt(Ingots);
                oByteArray.WriteUInt(Gift);
                oByteArray.WriteUInt(GoldCoin);
                oByteArray.WriteUInt(BindCoin);
                oByteArray.WriteUInt(GMIngots);
                oByteArray.WriteUInt(NewGift);
                oByteArray.WriteUInt(BindIngots);
                oByteArray.WriteUInt(KingCoin);
                oByteArray.WriteUInt(GuildDonate);
                oByteArray.WriteUInt(HotBloodCoins);
                oByteArray.WriteUInt(CurValue);
            }
            else
            {
                MoneyType = oByteArray.ReadUInt();
                MoneyValue = oByteArray.ReadUInt();
                LogType = oByteArray.ReadUInt();
                Date1 = oByteArray.ReadUInt64();
                Date2 = oByteArray.ReadUInt64();
                Date3 = oByteArray.ReadUInt64();
                Ingots = oByteArray.ReadUInt();
                Gift = oByteArray.ReadUInt();
                GoldCoin = oByteArray.ReadUInt();
                BindCoin = oByteArray.ReadUInt();
                GMIngots = oByteArray.ReadUInt();
                NewGift = oByteArray.ReadUInt();
                BindIngots = oByteArray.ReadUInt();
                KingCoin = oByteArray.ReadUInt();
                GuildDonate = oByteArray.ReadUInt();
                HotBloodCoins = oByteArray.ReadUInt();
                CurValue = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeMoneyLog()
		{
			PacketID = 615;
		}
    }

    /// <summary>
    ///  [请求类] 游戏货币统计协议 创建者
    /// </summary>
    [Package(615)]
    public partial class ReqNoticeMoneyLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeMoneyLog();
        }
    }


    /// <summary>
    ///  [响应类]游戏货币统计协议
    /// </summary>
    public partial class ResNoticeMoneyLog: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeMoneyLog pkg = new ResNoticeMoneyLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeMoneyLog()
		{
			PacketID = 616;
		}
    }

    /// <summary>
    ///  [响应类] 游戏货币统计协议 创建者
    /// </summary>
    [Package(616)]
    public partial class ResNoticeMoneyLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeMoneyLog();
        }
    }


    /// <summary>
    ///  [请求类]请求附近最近的怪物
    /// </summary>
    public partial class ReqNearMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte uMonsterType;

        public override Packet Clone()
        {
            ReqNearMonster pkg = new ReqNearMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.uMonsterType = uMonsterType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(uMonsterType);
            }
            else
            {
                uMonsterType = oByteArray.ReadByte();
            }
        }
		public ReqNearMonster()
		{
			PacketID = 617;
		}
    }

    /// <summary>
    ///  [请求类] 请求附近最近的怪物 创建者
    /// </summary>
    [Package(617)]
    public partial class ReqNearMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNearMonster();
        }
    }


    /// <summary>
    ///  [响应类]请求附近最近的怪物
    /// </summary>
    public partial class ResNearMonster: Packet 
    {
        /// <summary>
        /// 怪物X坐标
        /// </summary>
        public uint monsterX;
        /// <summary>
        /// 怪物Y坐标
        /// </summary>
        public uint monsterY;
        /// <summary>
        /// 怪物地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 怪物类型
        /// </summary>
        public byte uMonsterType;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public ObjectGuidInfo MonsterID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNearMonster pkg = new ResNearMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.monsterX = monsterX;
            pkg.monsterY = monsterY;
            pkg.MapID = MapID;
            pkg.uMonsterType = uMonsterType;
            pkg.MonsterID = MonsterID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(monsterX);
                oByteArray.WriteUInt(monsterY);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteByte(uMonsterType);
                MonsterID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                monsterX = oByteArray.ReadUInt();
                monsterY = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                uMonsterType = oByteArray.ReadByte();
                MonsterID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNearMonster()
		{
			PacketID = 618;
		}
    }

    /// <summary>
    ///  [响应类] 请求附近最近的怪物 创建者
    /// </summary>
    [Package(618)]
    public partial class ResNearMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNearMonster();
        }
    }


    /// <summary>
    ///  [请求类]更新服务器时间
    /// </summary>
    public partial class ReqChangeDay: Packet 
    {

        public override Packet Clone()
        {
            ReqChangeDay pkg = new ReqChangeDay();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqChangeDay()
		{
			PacketID = 619;
		}
    }

    /// <summary>
    ///  [请求类] 更新服务器时间 创建者
    /// </summary>
    [Package(619)]
    public partial class ReqChangeDayCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeDay();
        }
    }


    /// <summary>
    ///  [响应类]更新服务器时间
    /// </summary>
    public partial class ResChangeDay: Packet 
    {
        /// <summary>
        /// 当前服务器时间戳
        /// </summary>
        public uint Time;

        public override Packet Clone()
        {
            ResChangeDay pkg = new ResChangeDay();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Time = Time;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Time);
            }
            else
            {
                Time = oByteArray.ReadUInt();
            }
        }
		public ResChangeDay()
		{
			PacketID = 620;
		}
    }

    /// <summary>
    ///  [响应类] 更新服务器时间 创建者
    /// </summary>
    [Package(620)]
    public partial class ResChangeDayCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeDay();
        }
    }


    /// <summary>
    ///  [请求类]完成主线任务（新手一段间隔时间没动，自动完成主线任务）
    /// </summary>
    public partial class ReqFinishCurTask: Packet 
    {

        public override Packet Clone()
        {
            ReqFinishCurTask pkg = new ReqFinishCurTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFinishCurTask()
		{
			PacketID = 621;
		}
    }

    /// <summary>
    ///  [请求类] 完成主线任务（新手一段间隔时间没动，自动完成主线任务） 创建者
    /// </summary>
    [Package(621)]
    public partial class ReqFinishCurTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFinishCurTask();
        }
    }


    /// <summary>
    ///  [响应类]完成主线任务（新手一段间隔时间没动，自动完成主线任务）
    /// </summary>
    public partial class ResFinishCurTask: Packet 
    {

        public override Packet Clone()
        {
            ResFinishCurTask pkg = new ResFinishCurTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResFinishCurTask()
		{
			PacketID = 622;
		}
    }

    /// <summary>
    ///  [响应类] 完成主线任务（新手一段间隔时间没动，自动完成主线任务） 创建者
    /// </summary>
    [Package(622)]
    public partial class ResFinishCurTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFinishCurTask();
        }
    }


    /// <summary>
    ///  [请求类]发送领奖码
    /// </summary>
    public partial class ReqAwardCode: Packet 
    {
        /// <summary>
        /// 领奖码
        /// </summary>
        public string Code;

        public override Packet Clone()
        {
            ReqAwardCode pkg = new ReqAwardCode();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Code = Code;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Code);
            }
            else
            {
                Code = oByteArray.ReadUTF();
            }
        }
		public ReqAwardCode()
		{
			PacketID = 623;
		}
    }

    /// <summary>
    ///  [请求类] 发送领奖码 创建者
    /// </summary>
    [Package(623)]
    public partial class ReqAwardCodeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAwardCode();
        }
    }


    /// <summary>
    ///  [响应类]发送领奖码
    /// </summary>
    public partial class ResAwardCode: Packet 
    {
        /// <summary>
        /// 返回结果,0成功，1激活码已经被使用，2激活码过期，3激活码不正确，4暂时无法领取此激活码，5背包格子不够，6已经领取过类型该礼包，7兄弟别点太快
        /// </summary>
        public byte Result;
        /// <summary>
        /// 激活码类型
        /// </summary>
        public uint GiftType;

        public override Packet Clone()
        {
            ResAwardCode pkg = new ResAwardCode();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.GiftType = GiftType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(GiftType);
            }
            else
            {
                Result = oByteArray.ReadByte();
                GiftType = oByteArray.ReadUInt();
            }
        }
		public ResAwardCode()
		{
			PacketID = 624;
		}
    }

    /// <summary>
    ///  [响应类] 发送领奖码 创建者
    /// </summary>
    [Package(624)]
    public partial class ResAwardCodeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAwardCode();
        }
    }


    /// <summary>
    ///  [请求类]活动奖励
    /// </summary>
    public partial class ReqActivityAward: Packet 
    {
        /// <summary>
        /// 兑换的TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqActivityAward pkg = new ReqActivityAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqActivityAward()
		{
			PacketID = 625;
		}
    }

    /// <summary>
    ///  [请求类] 活动奖励 创建者
    /// </summary>
    [Package(625)]
    public partial class ReqActivityAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqActivityAward();
        }
    }


    /// <summary>
    ///  [响应类]活动奖励
    /// </summary>
    public partial class ResActivityAward: Packet 
    {
        /// <summary>
        /// 0-成功 1-已领取 2-活动关闭 3-英雄ID不够 4-总消费不足 5-总积分不足 6-背白空间不足 7-活动不存在
        /// </summary>
        public byte Result;
        /// <summary>
        /// 兑换的TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResActivityAward pkg = new ResActivityAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResActivityAward()
		{
			PacketID = 626;
		}
    }

    /// <summary>
    ///  [响应类] 活动奖励 创建者
    /// </summary>
    [Package(626)]
    public partial class ResActivityAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResActivityAward();
        }
    }


    /// <summary>
    ///  [请求类]活动购买物品
    /// </summary>
    public partial class ReqActivityBuyItem: Packet 
    {
        /// <summary>
        /// 物品所在TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqActivityBuyItem pkg = new ReqActivityBuyItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqActivityBuyItem()
		{
			PacketID = 627;
		}
    }

    /// <summary>
    ///  [请求类] 活动购买物品 创建者
    /// </summary>
    [Package(627)]
    public partial class ReqActivityBuyItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqActivityBuyItem();
        }
    }


    /// <summary>
    ///  [响应类]活动购买物品
    /// </summary>
    public partial class ResActivityBuyItem: Packet 
    {
        /// <summary>
        /// 0-成功 1-购买次数不足 2-元宝或者积分不足 3-活动结束 4-总消费不足 5-总积分不足 6-背白空间不足 7-功能未开启;8活动不存在
        /// </summary>
        public byte Result;
        /// <summary>
        /// 物品所在TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResActivityBuyItem pkg = new ResActivityBuyItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResActivityBuyItem()
		{
			PacketID = 628;
		}
    }

    /// <summary>
    ///  [响应类] 活动购买物品 创建者
    /// </summary>
    [Package(628)]
    public partial class ResActivityBuyItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResActivityBuyItem();
        }
    }


    /// <summary>
    ///  [请求类]暗殿内请求找到boss
    /// </summary>
    public partial class ReqAnDianFindBoss: Packet 
    {

        public override Packet Clone()
        {
            ReqAnDianFindBoss pkg = new ReqAnDianFindBoss();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAnDianFindBoss()
		{
			PacketID = 629;
		}
    }

    /// <summary>
    ///  [请求类] 暗殿内请求找到boss 创建者
    /// </summary>
    [Package(629)]
    public partial class ReqAnDianFindBossCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAnDianFindBoss();
        }
    }


    /// <summary>
    ///  [响应类]暗殿内请求找到boss
    /// </summary>
    public partial class ResAnDianFindBoss: Packet 
    {
        /// <summary>
        /// 0,成功;1,失败;2,没有boss了别传了!
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResAnDianFindBoss pkg = new ResAnDianFindBoss();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResAnDianFindBoss()
		{
			PacketID = 630;
		}
    }

    /// <summary>
    ///  [响应类] 暗殿内请求找到boss 创建者
    /// </summary>
    [Package(630)]
    public partial class ResAnDianFindBossCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAnDianFindBoss();
        }
    }


    /// <summary>
    ///  [请求类]回城
    /// </summary>
    public partial class ReqBackToCity: Packet 
    {

        public override Packet Clone()
        {
            ReqBackToCity pkg = new ReqBackToCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBackToCity()
		{
			PacketID = 631;
		}
    }

    /// <summary>
    ///  [请求类] 回城 创建者
    /// </summary>
    [Package(631)]
    public partial class ReqBackToCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBackToCity();
        }
    }


    /// <summary>
    ///  [响应类]回城
    /// </summary>
    public partial class ResBackToCity: Packet 
    {
        /// <summary>
        /// 0成功,1失败
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResBackToCity pkg = new ResBackToCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResBackToCity()
		{
			PacketID = 632;
		}
    }

    /// <summary>
    ///  [响应类] 回城 创建者
    /// </summary>
    [Package(632)]
    public partial class ResBackToCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBackToCity();
        }
    }


    /// <summary>
    ///  [请求类]删除所有日常任务
    /// </summary>
    public partial class ReqDeleteDailyTask: Packet 
    {

        public override Packet Clone()
        {
            ReqDeleteDailyTask pkg = new ReqDeleteDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDeleteDailyTask()
		{
			PacketID = 633;
		}
    }

    /// <summary>
    ///  [请求类] 删除所有日常任务 创建者
    /// </summary>
    [Package(633)]
    public partial class ReqDeleteDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDeleteDailyTask();
        }
    }


    /// <summary>
    ///  [响应类]删除所有日常任务
    /// </summary>
    public partial class ResDeleteDailyTask: Packet 
    {

        public override Packet Clone()
        {
            ResDeleteDailyTask pkg = new ResDeleteDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResDeleteDailyTask()
		{
			PacketID = 634;
		}
    }

    /// <summary>
    ///  [响应类] 删除所有日常任务 创建者
    /// </summary>
    [Package(634)]
    public partial class ResDeleteDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDeleteDailyTask();
        }
    }


    /// <summary>
    ///  [请求类]请求离线经验
    /// </summary>
    public partial class ReqGetOfftimeExp: Packet 
    {
        /// <summary>
        /// 倍数
        /// </summary>
        public byte multiple;

        public override Packet Clone()
        {
            ReqGetOfftimeExp pkg = new ReqGetOfftimeExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.multiple = multiple;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(multiple);
            }
            else
            {
                multiple = oByteArray.ReadByte();
            }
        }
		public ReqGetOfftimeExp()
		{
			PacketID = 635;
		}
    }

    /// <summary>
    ///  [请求类] 请求离线经验 创建者
    /// </summary>
    [Package(635)]
    public partial class ReqGetOfftimeExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetOfftimeExp();
        }
    }


    /// <summary>
    ///  [响应类]请求离线经验
    /// </summary>
    public partial class ResGetOfftimeExp: Packet 
    {
        /// <summary>
        /// 0成功1是钱不足
        /// </summary>
        public byte Result;
        /// <summary>
        /// 当前离线时间，Result为0有效
        /// </summary>
        public uint AllOffineTime;

        public override Packet Clone()
        {
            ResGetOfftimeExp pkg = new ResGetOfftimeExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.AllOffineTime = AllOffineTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(AllOffineTime);
            }
            else
            {
                Result = oByteArray.ReadByte();
                AllOffineTime = oByteArray.ReadUInt();
            }
        }
		public ResGetOfftimeExp()
		{
			PacketID = 636;
		}
    }

    /// <summary>
    ///  [响应类] 请求离线经验 创建者
    /// </summary>
    [Package(636)]
    public partial class ResGetOfftimeExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetOfftimeExp();
        }
    }


    /// <summary>
    ///  [请求类]英雄免费次数和时间
    /// </summary>
    public partial class ReqUpdateHeroTimesInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateHeroTimesInfo pkg = new ReqUpdateHeroTimesInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateHeroTimesInfo()
		{
			PacketID = 637;
		}
    }

    /// <summary>
    ///  [请求类] 英雄免费次数和时间 创建者
    /// </summary>
    [Package(637)]
    public partial class ReqUpdateHeroTimesInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateHeroTimesInfo();
        }
    }


    /// <summary>
    ///  [响应类]英雄免费次数和时间
    /// </summary>
    public partial class ResUpdateHeroTimesInfo: Packet 
    {
        /// <summary>
        /// 当前次数
        /// </summary>
        public uint Times;
        /// <summary>
        /// 下次增加还需要多少时间(秒)
        /// </summary>
        public uint Time;
        /// <summary>
        /// 英雄TID
        /// </summary>
        public uint HeroTID;

        public override Packet Clone()
        {
            ResUpdateHeroTimesInfo pkg = new ResUpdateHeroTimesInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Times = Times;
            pkg.Time = Time;
            pkg.HeroTID = HeroTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Times);
                oByteArray.WriteUInt(Time);
                oByteArray.WriteUInt(HeroTID);
            }
            else
            {
                Times = oByteArray.ReadUInt();
                Time = oByteArray.ReadUInt();
                HeroTID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateHeroTimesInfo()
		{
			PacketID = 638;
		}
    }

    /// <summary>
    ///  [响应类] 英雄免费次数和时间 创建者
    /// </summary>
    [Package(638)]
    public partial class ResUpdateHeroTimesInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateHeroTimesInfo();
        }
    }


    /// <summary>
    ///  [请求类]采集物品协议
    /// </summary>
    public partial class ReqCollectionItem: Packet 
    {
        /// <summary>
        /// 目标ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqCollectionItem pkg = new ReqCollectionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqCollectionItem()
		{
			PacketID = 639;
		}
    }

    /// <summary>
    ///  [请求类] 采集物品协议 创建者
    /// </summary>
    [Package(639)]
    public partial class ReqCollectionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCollectionItem();
        }
    }


    /// <summary>
    ///  [响应类]采集物品协议
    /// </summary>
    public partial class ResCollectionItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 采集获得物品TID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 被采集物品ID
        /// </summary>
        public uint CollectItemID;

        public override Packet Clone()
        {
            ResCollectionItem pkg = new ResCollectionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TmplID = TmplID;
            pkg.CollectItemID = CollectItemID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(CollectItemID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TmplID = oByteArray.ReadUInt();
                CollectItemID = oByteArray.ReadUInt();
            }
        }
		public ResCollectionItem()
		{
			PacketID = 640;
		}
    }

    /// <summary>
    ///  [响应类] 采集物品协议 创建者
    /// </summary>
    [Package(640)]
    public partial class ResCollectionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCollectionItem();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端触发被动技能
    /// </summary>
    public partial class ReqNoticeObjectTriggerSkill: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeObjectTriggerSkill pkg = new ReqNoticeObjectTriggerSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeObjectTriggerSkill()
		{
			PacketID = 641;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端触发被动技能 创建者
    /// </summary>
    [Package(641)]
    public partial class ReqNoticeObjectTriggerSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeObjectTriggerSkill();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端触发被动技能
    /// </summary>
    public partial class ResNoticeObjectTriggerSkill: Packet 
    {
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 攻击方向
        /// </summary>
        public byte Direct;
        /// <summary>
        /// 攻击目标点X
        /// </summary>
        public ushort TargetX;
        /// <summary>
        /// 攻击目标点Y
        /// </summary>
        public ushort TargetY;
        /// <summary>
        /// 使用的技能
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 目标的对象ID
        /// </summary>
        public ObjectGuidInfo TargetObjectID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeObjectTriggerSkill pkg = new ResNoticeObjectTriggerSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.Direct = Direct;
            pkg.TargetX = TargetX;
            pkg.TargetY = TargetY;
            pkg.SkillID = SkillID;
            pkg.TargetObjectID = TargetObjectID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Direct);
                oByteArray.WriteUShort(TargetX);
                oByteArray.WriteUShort(TargetY);
                oByteArray.WriteUInt(SkillID);
                TargetObjectID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                Direct = oByteArray.ReadByte();
                TargetX = oByteArray.ReadUShort();
                TargetY = oByteArray.ReadUShort();
                SkillID = oByteArray.ReadUInt();
                TargetObjectID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeObjectTriggerSkill()
		{
			PacketID = 642;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端触发被动技能 创建者
    /// </summary>
    [Package(642)]
    public partial class ResNoticeObjectTriggerSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeObjectTriggerSkill();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服重新加载玩家信息
    /// </summary>
    public partial class ReqNoticeReloadPlayer: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeReloadPlayer pkg = new ReqNoticeReloadPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeReloadPlayer()
		{
			PacketID = 643;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服重新加载玩家信息 创建者
    /// </summary>
    [Package(643)]
    public partial class ReqNoticeReloadPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeReloadPlayer();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服重新加载玩家信息
    /// </summary>
    public partial class ResNoticeReloadPlayer: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeReloadPlayer pkg = new ResNoticeReloadPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeReloadPlayer()
		{
			PacketID = 644;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服重新加载玩家信息 创建者
    /// </summary>
    [Package(644)]
    public partial class ResNoticeReloadPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeReloadPlayer();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新物品Data1属性
    /// </summary>
    public partial class ReqNoticeUpdateItemData1: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdateItemData1 pkg = new ReqNoticeUpdateItemData1();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdateItemData1()
		{
			PacketID = 645;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新物品Data1属性 创建者
    /// </summary>
    [Package(645)]
    public partial class ReqNoticeUpdateItemData1Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemData1();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新物品Data1属性
    /// </summary>
    public partial class ResNoticeUpdateItemData1: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 值
        /// </summary>
        public uint Value;

        public override Packet Clone()
        {
            ResNoticeUpdateItemData1 pkg = new ResNoticeUpdateItemData1();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.Value = Value;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Value);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                Value = oByteArray.ReadUInt();
            }
        }
		public ResNoticeUpdateItemData1()
		{
			PacketID = 646;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新物品Data1属性 创建者
    /// </summary>
    [Package(646)]
    public partial class ResNoticeUpdateItemData1Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemData1();
        }
    }


    /// <summary>
    ///  [请求类]通知world摆摊信息
    /// </summary>
    public partial class ReqNoticeWorldRetail: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeWorldRetail pkg = new ReqNoticeWorldRetail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeWorldRetail()
		{
			PacketID = 647;
		}
    }

    /// <summary>
    ///  [请求类] 通知world摆摊信息 创建者
    /// </summary>
    [Package(647)]
    public partial class ReqNoticeWorldRetailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeWorldRetail();
        }
    }


    /// <summary>
    ///  [响应类]通知world摆摊信息
    /// </summary>
    public partial class ResNoticeWorldRetail: Packet 
    {
        /// <summary>
        /// 摆摊物品信息
        /// </summary>
        public List<RetailItemInfo> ItemInfoVec = new List<RetailItemInfo>();

        public override Packet Clone()
        {
            ResNoticeWorldRetail pkg = new ResNoticeWorldRetail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (RetailItemInfo item in ItemInfoVec)
            {
                pkg.ItemInfoVec.Add(item.Clone() as RetailItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ItemInfoVec.Count);
                for (int i = 0; i < ItemInfoVec.Count; i++)
                {
                    ItemInfoVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ItemInfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemInfoVecCount; i++)
                {
                    RetailItemInfo obj = new RetailItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemInfoVec.Add(obj);
                }
            }
        }
		public ResNoticeWorldRetail()
		{
			PacketID = 648;
		}
    }

    /// <summary>
    ///  [响应类] 通知world摆摊信息 创建者
    /// </summary>
    [Package(648)]
    public partial class ResNoticeWorldRetailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeWorldRetail();
        }
    }


    /// <summary>
    ///  [请求类]通知前端开传送阵
    /// </summary>
    public partial class ReqSetTrasferArrayState: Packet 
    {

        public override Packet Clone()
        {
            ReqSetTrasferArrayState pkg = new ReqSetTrasferArrayState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSetTrasferArrayState()
		{
			PacketID = 649;
		}
    }

    /// <summary>
    ///  [请求类] 通知前端开传送阵 创建者
    /// </summary>
    [Package(649)]
    public partial class ReqSetTrasferArrayStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetTrasferArrayState();
        }
    }


    /// <summary>
    ///  [响应类]通知前端开传送阵
    /// </summary>
    public partial class ResSetTrasferArrayState: Packet 
    {
        /// <summary>
        /// True是开 false是关
        /// </summary>
        public bool IsOpen;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 唯一ID
        /// </summary>
        public ulong MapGuid;

        public override Packet Clone()
        {
            ResSetTrasferArrayState pkg = new ResSetTrasferArrayState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsOpen = IsOpen;
            pkg.MapID = MapID;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(IsOpen);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(MapGuid);
            }
            else
            {
                IsOpen = oByteArray.ReadBoolean();
                MapID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
            }
        }
		public ResSetTrasferArrayState()
		{
			PacketID = 650;
		}
    }

    /// <summary>
    ///  [响应类] 通知前端开传送阵 创建者
    /// </summary>
    [Package(650)]
    public partial class ResSetTrasferArrayStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetTrasferArrayState();
        }
    }


    /// <summary>
    ///  [请求类]出售所有矿石
    /// </summary>
    public partial class ReqSellAllMineral: Packet 
    {
        /// <summary>
        /// true:自动卖矿石，false：手动卖
        /// </summary>
        public bool AutoSell;
        /// <summary>
        /// 0:普通背包,1:矿工仓库
        /// </summary>
        public byte BagType;

        public override Packet Clone()
        {
            ReqSellAllMineral pkg = new ReqSellAllMineral();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AutoSell = AutoSell;
            pkg.BagType = BagType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(AutoSell);
                oByteArray.WriteByte(BagType);
            }
            else
            {
                AutoSell = oByteArray.ReadBoolean();
                BagType = oByteArray.ReadByte();
            }
        }
		public ReqSellAllMineral()
		{
			PacketID = 651;
		}
    }

    /// <summary>
    ///  [请求类] 出售所有矿石 创建者
    /// </summary>
    [Package(651)]
    public partial class ReqSellAllMineralCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSellAllMineral();
        }
    }


    /// <summary>
    ///  [响应类]出售所有矿石
    /// </summary>
    public partial class ResSellAllMineral: Packet 
    {
        /// <summary>
        /// 0-成功
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResSellAllMineral pkg = new ResSellAllMineral();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResSellAllMineral()
		{
			PacketID = 652;
		}
    }

    /// <summary>
    ///  [响应类] 出售所有矿石 创建者
    /// </summary>
    [Package(652)]
    public partial class ResSellAllMineralCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSellAllMineral();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服给所有玩家发邮件
    /// </summary>
    public partial class ReqSendMailToAllPlayer: Packet 
    {

        public override Packet Clone()
        {
            ReqSendMailToAllPlayer pkg = new ReqSendMailToAllPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSendMailToAllPlayer()
		{
			PacketID = 653;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服给所有玩家发邮件 创建者
    /// </summary>
    [Package(653)]
    public partial class ReqSendMailToAllPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSendMailToAllPlayer();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服给所有玩家发邮件
    /// </summary>
    public partial class ResSendMailToAllPlayer: Packet 
    {
        /// <summary>
        /// 邮件标题
        /// </summary>
        public string MailTitle;
        /// <summary>
        /// 邮件内容
        /// </summary>
        public string MailText;
        /// <summary>
        /// 邮件物品
        /// </summary>
        public string MailItem;

        public override Packet Clone()
        {
            ResSendMailToAllPlayer pkg = new ResSendMailToAllPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MailTitle = MailTitle;
            pkg.MailText = MailText;
            pkg.MailItem = MailItem;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(MailTitle);
                oByteArray.WriteUTF(MailText);
                oByteArray.WriteUTF(MailItem);
            }
            else
            {
                MailTitle = oByteArray.ReadUTF();
                MailText = oByteArray.ReadUTF();
                MailItem = oByteArray.ReadUTF();
            }
        }
		public ResSendMailToAllPlayer()
		{
			PacketID = 654;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服给所有玩家发邮件 创建者
    /// </summary>
    [Package(654)]
    public partial class ResSendMailToAllPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSendMailToAllPlayer();
        }
    }


    /// <summary>
    ///  [请求类]更新烧猪信息
    /// </summary>
    public partial class ReqUpdataFirPigInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdataFirPigInfo pkg = new ReqUpdataFirPigInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdataFirPigInfo()
		{
			PacketID = 655;
		}
    }

    /// <summary>
    ///  [请求类] 更新烧猪信息 创建者
    /// </summary>
    [Package(655)]
    public partial class ReqUpdataFirPigInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdataFirPigInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新烧猪信息
    /// </summary>
    public partial class ResUpdataFirPigInfo: Packet 
    {
        /// <summary>
        /// 可以获取多少经验
        /// </summary>
        public uint Exp;
        /// <summary>
        /// 当前波数
        /// </summary>
        public uint CurWave;
        /// <summary>
        /// 丢失经验
        /// </summary>
        public uint LoseExp;
        /// <summary>
        /// 已击杀数量
        /// </summary>
        public uint KillMonsterCount;
        /// <summary>
        /// 结束时间
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResUpdataFirPigInfo pkg = new ResUpdataFirPigInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Exp = Exp;
            pkg.CurWave = CurWave;
            pkg.LoseExp = LoseExp;
            pkg.KillMonsterCount = KillMonsterCount;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Exp);
                oByteArray.WriteUInt(CurWave);
                oByteArray.WriteUInt(LoseExp);
                oByteArray.WriteUInt(KillMonsterCount);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                Exp = oByteArray.ReadUInt();
                CurWave = oByteArray.ReadUInt();
                LoseExp = oByteArray.ReadUInt();
                KillMonsterCount = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResUpdataFirPigInfo()
		{
			PacketID = 656;
		}
    }

    /// <summary>
    ///  [响应类] 更新烧猪信息 创建者
    /// </summary>
    [Package(656)]
    public partial class ResUpdataFirPigInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdataFirPigInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新暗殿门票过期时间
    /// </summary>
    public partial class ReqUpdateAnDianExpireTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAnDianExpireTime pkg = new ReqUpdateAnDianExpireTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAnDianExpireTime()
		{
			PacketID = 657;
		}
    }

    /// <summary>
    ///  [请求类] 更新暗殿门票过期时间 创建者
    /// </summary>
    [Package(657)]
    public partial class ReqUpdateAnDianExpireTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAnDianExpireTime();
        }
    }


    /// <summary>
    ///  [响应类]更新暗殿门票过期时间
    /// </summary>
    public partial class ResUpdateAnDianExpireTime: Packet 
    {
        /// <summary>
        /// 0,未知暗殿;1,神之暗殿
        /// </summary>
        public byte Type;
        /// <summary>
        /// 门票过期时间
        /// </summary>
        public uint ExpireTime;

        public override Packet Clone()
        {
            ResUpdateAnDianExpireTime pkg = new ResUpdateAnDianExpireTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.ExpireTime = ExpireTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(ExpireTime);
            }
            else
            {
                Type = oByteArray.ReadByte();
                ExpireTime = oByteArray.ReadUInt();
            }
        }
		public ResUpdateAnDianExpireTime()
		{
			PacketID = 658;
		}
    }

    /// <summary>
    ///  [响应类] 更新暗殿门票过期时间 创建者
    /// </summary>
    [Package(658)]
    public partial class ResUpdateAnDianExpireTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAnDianExpireTime();
        }
    }


    /// <summary>
    ///  [请求类]更改物品Data1属性
    /// </summary>
    public partial class ReqUpDateItemData1: Packet 
    {

        public override Packet Clone()
        {
            ReqUpDateItemData1 pkg = new ReqUpDateItemData1();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpDateItemData1()
		{
			PacketID = 659;
		}
    }

    /// <summary>
    ///  [请求类] 更改物品Data1属性 创建者
    /// </summary>
    [Package(659)]
    public partial class ReqUpDateItemData1Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpDateItemData1();
        }
    }


    /// <summary>
    ///  [响应类]更改物品Data1属性
    /// </summary>
    public partial class ResUpDateItemData1: Packet 
    {
        /// <summary>
        /// 物品位置
        /// </summary>
        public ushort ItemPos;
        /// <summary>
        /// 值
        /// </summary>
        public uint Value;

        public override Packet Clone()
        {
            ResUpDateItemData1 pkg = new ResUpDateItemData1();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            pkg.Value = Value;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(ItemPos);
                oByteArray.WriteUInt(Value);
            }
            else
            {
                ItemPos = oByteArray.ReadUShort();
                Value = oByteArray.ReadUInt();
            }
        }
		public ResUpDateItemData1()
		{
			PacketID = 660;
		}
    }

    /// <summary>
    ///  [响应类] 更改物品Data1属性 创建者
    /// </summary>
    [Package(660)]
    public partial class ResUpDateItemData1Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpDateItemData1();
        }
    }


    /// <summary>
    ///  [请求类]更新战神属性
    /// </summary>
    public partial class ReqUpdateMarsProperty: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMarsProperty pkg = new ReqUpdateMarsProperty();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMarsProperty()
		{
			PacketID = 661;
		}
    }

    /// <summary>
    ///  [请求类] 更新战神属性 创建者
    /// </summary>
    [Package(661)]
    public partial class ReqUpdateMarsPropertyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMarsProperty();
        }
    }


    /// <summary>
    ///  [响应类]更新战神属性
    /// </summary>
    public partial class ResUpdateMarsProperty: Packet 
    {
        /// <summary>
        /// 属性列表
        /// </summary>
        public List<Property> PropertyVec = new List<Property>();

        public override Packet Clone()
        {
            ResUpdateMarsProperty pkg = new ResUpdateMarsProperty();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (Property item in PropertyVec)
            {
                pkg.PropertyVec.Add(item.Clone() as Property);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)PropertyVec.Count);
                for (int i = 0; i < PropertyVec.Count; i++)
                {
                    PropertyVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int PropertyVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PropertyVecCount; i++)
                {
                    Property obj = new Property();
                    obj.Serializtion(oByteArray, bSerialize);
                    PropertyVec.Add(obj);
                }
            }
        }
		public ResUpdateMarsProperty()
		{
			PacketID = 662;
		}
    }

    /// <summary>
    ///  [响应类] 更新战神属性 创建者
    /// </summary>
    [Package(662)]
    public partial class ResUpdateMarsPropertyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMarsProperty();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新挑战boss剩余次数
    /// </summary>
    public partial class ReqUpdatePersonBossTimes: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePersonBossTimes pkg = new ReqUpdatePersonBossTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePersonBossTimes()
		{
			PacketID = 663;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新挑战boss剩余次数 创建者
    /// </summary>
    [Package(663)]
    public partial class ReqUpdatePersonBossTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePersonBossTimes();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新挑战boss剩余次数
    /// </summary>
    public partial class ResUpdatePersonBossTimes: Packet 
    {
        /// <summary>
        /// 剩余挑战次数
        /// </summary>
        public byte PersonTimes;
        /// <summary>
        /// 剩余刷新次数
        /// </summary>
        public byte ResfreshTime;
        /// <summary>
        /// 下次刷新倒计时
        /// </summary>
        public uint NextAddTimes;

        public override Packet Clone()
        {
            ResUpdatePersonBossTimes pkg = new ResUpdatePersonBossTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PersonTimes = PersonTimes;
            pkg.ResfreshTime = ResfreshTime;
            pkg.NextAddTimes = NextAddTimes;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(PersonTimes);
                oByteArray.WriteByte(ResfreshTime);
                oByteArray.WriteUInt(NextAddTimes);
            }
            else
            {
                PersonTimes = oByteArray.ReadByte();
                ResfreshTime = oByteArray.ReadByte();
                NextAddTimes = oByteArray.ReadUInt();
            }
        }
		public ResUpdatePersonBossTimes()
		{
			PacketID = 664;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新挑战boss剩余次数 创建者
    /// </summary>
    [Package(664)]
    public partial class ResUpdatePersonBossTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePersonBossTimes();
        }
    }


    /// <summary>
    ///  [请求类]活动地图是否领取奖励标识
    /// </summary>
    public partial class ReqActivityMapAwardFlag: Packet 
    {

        public override Packet Clone()
        {
            ReqActivityMapAwardFlag pkg = new ReqActivityMapAwardFlag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqActivityMapAwardFlag()
		{
			PacketID = 665;
		}
    }

    /// <summary>
    ///  [请求类] 活动地图是否领取奖励标识 创建者
    /// </summary>
    [Package(665)]
    public partial class ReqActivityMapAwardFlagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqActivityMapAwardFlag();
        }
    }


    /// <summary>
    ///  [响应类]活动地图是否领取奖励标识
    /// </summary>
    public partial class ResActivityMapAwardFlag: Packet 
    {
        /// <summary>
        /// 是否领取
        /// </summary>
        public bool IsGet;

        public override Packet Clone()
        {
            ResActivityMapAwardFlag pkg = new ResActivityMapAwardFlag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsGet = IsGet;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(IsGet);
            }
            else
            {
                IsGet = oByteArray.ReadBoolean();
            }
        }
		public ResActivityMapAwardFlag()
		{
			PacketID = 666;
		}
    }

    /// <summary>
    ///  [响应类] 活动地图是否领取奖励标识 创建者
    /// </summary>
    [Package(666)]
    public partial class ResActivityMapAwardFlagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResActivityMapAwardFlag();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端刷新
    /// </summary>
    public partial class ReqClientRefresh: Packet 
    {

        public override Packet Clone()
        {
            ReqClientRefresh pkg = new ReqClientRefresh();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqClientRefresh()
		{
			PacketID = 667;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端刷新 创建者
    /// </summary>
    [Package(667)]
    public partial class ReqClientRefreshCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqClientRefresh();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端刷新
    /// </summary>
    public partial class ResClientRefresh: Packet 
    {
        /// <summary>
        /// 字符串
        /// </summary>
        public string ParamStr;

        public override Packet Clone()
        {
            ResClientRefresh pkg = new ResClientRefresh();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ParamStr = ParamStr;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ParamStr);
            }
            else
            {
                ParamStr = oByteArray.ReadUTF();
            }
        }
		public ResClientRefresh()
		{
			PacketID = 668;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端刷新 创建者
    /// </summary>
    [Package(668)]
    public partial class ResClientRefreshCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResClientRefresh();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家属性
    /// </summary>
    public partial class ReqUpdatePlayerProperty: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerProperty pkg = new ReqUpdatePlayerProperty();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerProperty()
		{
			PacketID = 669;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家属性 创建者
    /// </summary>
    [Package(669)]
    public partial class ReqUpdatePlayerPropertyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerProperty();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家属性
    /// </summary>
    public partial class ResUpdatePlayerProperty: Packet 
    {
        /// <summary>
        /// 更新属性列表
        /// </summary>
        public List<Property> PropertyVec = new List<Property>();

        public override Packet Clone()
        {
            ResUpdatePlayerProperty pkg = new ResUpdatePlayerProperty();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (Property item in PropertyVec)
            {
                pkg.PropertyVec.Add(item.Clone() as Property);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)PropertyVec.Count);
                for (int i = 0; i < PropertyVec.Count; i++)
                {
                    PropertyVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int PropertyVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PropertyVecCount; i++)
                {
                    Property obj = new Property();
                    obj.Serializtion(oByteArray, bSerialize);
                    PropertyVec.Add(obj);
                }
            }
        }
		public ResUpdatePlayerProperty()
		{
			PacketID = 670;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家属性 创建者
    /// </summary>
    [Package(670)]
    public partial class ResUpdatePlayerPropertyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerProperty();
        }
    }


    /// <summary>
    ///  [请求类]请求开启行会战
    /// </summary>
    public partial class ReqStartGuildWar: Packet 
    {
        /// <summary>
        /// 对方行会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqStartGuildWar pkg = new ReqStartGuildWar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqStartGuildWar()
		{
			PacketID = 671;
		}
    }

    /// <summary>
    ///  [请求类] 请求开启行会战 创建者
    /// </summary>
    [Package(671)]
    public partial class ReqStartGuildWarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStartGuildWar();
        }
    }


    /// <summary>
    ///  [响应类]请求开启行会战
    /// </summary>
    public partial class ResStartGuildWar: Packet 
    {
        /// <summary>
        /// 0成功1没权限2没钱
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResStartGuildWar pkg = new ResStartGuildWar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResStartGuildWar()
		{
			PacketID = 672;
		}
    }

    /// <summary>
    ///  [响应类] 请求开启行会战 创建者
    /// </summary>
    [Package(672)]
    public partial class ResStartGuildWarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStartGuildWar();
        }
    }


    /// <summary>
    ///  [请求类]合成物品
    /// </summary>
    public partial class ReqComposeItem: Packet 
    {
        /// <summary>
        /// 合成分解表TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 合成类型(1合成公式一:AdvanceCostItemID;2合成公式二:AdvanceCostItemID2)
        /// </summary>
        public byte Type;
        /// <summary>
        /// 自选合成材料TID
        /// </summary>
        public List<uint> OptionalID = new List<uint>();
        /// <summary>
        /// 合成次数
        /// </summary>
        public uint Count;
        /// <summary>
        /// 0.普通合成 1.特殊合成
        /// </summary>
        public uint Special;

        public override Packet Clone()
        {
            ReqComposeItem pkg = new ReqComposeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Type = Type;
            foreach (var item in OptionalID)
            {
                pkg.OptionalID.Add(item);
            }
            pkg.Count = Count;
            pkg.Special = Special;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteByte(Type);
                for (int i = 0; i < OptionalID.Count; i++)
                {
                      oByteArray.WriteUInt(OptionalID[i]);
                }
                oByteArray.WriteUInt(Count);
                oByteArray.WriteUInt(Special);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                int OptionalIDCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < OptionalIDCount; i++)
                {
                    OptionalID.Add(oByteArray.ReadUInt());
                }
                Count = oByteArray.ReadUInt();
                Special = oByteArray.ReadUInt();
            }
        }
		public ReqComposeItem()
		{
			PacketID = 673;
		}
    }

    /// <summary>
    ///  [请求类] 合成物品 创建者
    /// </summary>
    [Package(673)]
    public partial class ReqComposeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqComposeItem();
        }
    }


    /// <summary>
    ///  [响应类]合成物品
    /// </summary>
    public partial class ResComposeItem: Packet 
    {
        /// <summary>
        /// 0成功,1TID错误,2材料不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ResComposeItem pkg = new ResComposeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ResComposeItem()
		{
			PacketID = 674;
		}
    }

    /// <summary>
    ///  [响应类] 合成物品 创建者
    /// </summary>
    [Package(674)]
    public partial class ResComposeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResComposeItem();
        }
    }


    /// <summary>
    ///  [请求类]开启一个系统补偿
    /// </summary>
    public partial class ReqOpenOneSystemCompensate: Packet 
    {

        public override Packet Clone()
        {
            ReqOpenOneSystemCompensate pkg = new ReqOpenOneSystemCompensate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOpenOneSystemCompensate()
		{
			PacketID = 675;
		}
    }

    /// <summary>
    ///  [请求类] 开启一个系统补偿 创建者
    /// </summary>
    [Package(675)]
    public partial class ReqOpenOneSystemCompensateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOpenOneSystemCompensate();
        }
    }


    /// <summary>
    ///  [响应类]开启一个系统补偿
    /// </summary>
    public partial class ResOpenOneSystemCompensate: Packet 
    {
        /// <summary>
        /// 开启时间
        /// </summary>
        public uint BeginTime;
        /// <summary>
        /// 结束时间
        /// </summary>
        public uint EndTime;
        /// <summary>
        /// 领取需要等级
        /// </summary>
        public uint NeedLv;
        /// <summary>
        /// 物品列表
        /// </summary>
        public string ItemList;
        /// <summary>
        /// 显示补偿信息
        /// </summary>
        public string ShowInfo;

        public override Packet Clone()
        {
            ResOpenOneSystemCompensate pkg = new ResOpenOneSystemCompensate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BeginTime = BeginTime;
            pkg.EndTime = EndTime;
            pkg.NeedLv = NeedLv;
            pkg.ItemList = ItemList;
            pkg.ShowInfo = ShowInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BeginTime);
                oByteArray.WriteUInt(EndTime);
                oByteArray.WriteUInt(NeedLv);
                oByteArray.WriteUTF(ItemList);
                oByteArray.WriteUTF(ShowInfo);
            }
            else
            {
                BeginTime = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
                NeedLv = oByteArray.ReadUInt();
                ItemList = oByteArray.ReadUTF();
                ShowInfo = oByteArray.ReadUTF();
            }
        }
		public ResOpenOneSystemCompensate()
		{
			PacketID = 676;
		}
    }

    /// <summary>
    ///  [响应类] 开启一个系统补偿 创建者
    /// </summary>
    [Package(676)]
    public partial class ResOpenOneSystemCompensateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOpenOneSystemCompensate();
        }
    }


    /// <summary>
    ///  [请求类]请求领取系统补偿
    /// </summary>
    public partial class ReqReceiveSystemCompensate: Packet 
    {
        /// <summary>
        /// 0:打开面板请求数据,1:请求领取奖励
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqReceiveSystemCompensate pkg = new ReqReceiveSystemCompensate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqReceiveSystemCompensate()
		{
			PacketID = 677;
		}
    }

    /// <summary>
    ///  [请求类] 请求领取系统补偿 创建者
    /// </summary>
    [Package(677)]
    public partial class ReqReceiveSystemCompensateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReceiveSystemCompensate();
        }
    }


    /// <summary>
    ///  [响应类]请求领取系统补偿
    /// </summary>
    public partial class ResReceiveSystemCompensate: Packet 
    {
        /// <summary>
        /// 0:成功领取,1:可以领取,2:已经领取,3:等级不足,4:暂时没有补偿信息，5:背包空间不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 需要玩家等级
        /// </summary>
        public uint NeedLv;
        /// <summary>
        /// 补偿结束时间
        /// </summary>
        public uint EndTime;
        /// <summary>
        /// 补偿物品列表
        /// </summary>
        public string ItemList;
        /// <summary>
        /// 显示补偿信息
        /// </summary>
        public string ShowInfo;

        public override Packet Clone()
        {
            ResReceiveSystemCompensate pkg = new ResReceiveSystemCompensate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.NeedLv = NeedLv;
            pkg.EndTime = EndTime;
            pkg.ItemList = ItemList;
            pkg.ShowInfo = ShowInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(NeedLv);
                oByteArray.WriteUInt(EndTime);
                oByteArray.WriteUTF(ItemList);
                oByteArray.WriteUTF(ShowInfo);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                NeedLv = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
                ItemList = oByteArray.ReadUTF();
                ShowInfo = oByteArray.ReadUTF();
            }
        }
		public ResReceiveSystemCompensate()
		{
			PacketID = 678;
		}
    }

    /// <summary>
    ///  [响应类] 请求领取系统补偿 创建者
    /// </summary>
    [Package(678)]
    public partial class ResReceiveSystemCompensateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReceiveSystemCompensate();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新公告
    /// </summary>
    public partial class ReqNoticeUpdateBroadcast: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdateBroadcast pkg = new ReqNoticeUpdateBroadcast();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdateBroadcast()
		{
			PacketID = 679;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新公告 创建者
    /// </summary>
    [Package(679)]
    public partial class ReqNoticeUpdateBroadcastCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateBroadcast();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新公告
    /// </summary>
    public partial class ResNoticeUpdateBroadcast: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateBroadcast pkg = new ResNoticeUpdateBroadcast();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateBroadcast()
		{
			PacketID = 680;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新公告 创建者
    /// </summary>
    [Package(680)]
    public partial class ResNoticeUpdateBroadcastCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateBroadcast();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服记录聊天
    /// </summary>
    public partial class ReqChatLog: Packet 
    {

        public override Packet Clone()
        {
            ReqChatLog pkg = new ReqChatLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqChatLog()
		{
			PacketID = 681;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服记录聊天 创建者
    /// </summary>
    [Package(681)]
    public partial class ReqChatLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChatLog();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服记录聊天
    /// </summary>
    public partial class ResChatLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string SNickName;
        /// <summary>
        /// 
        /// </summary>
        public string RNickName;
        /// <summary>
        /// 
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 
        /// </summary>
        public ulong TeamID;
        /// <summary>
        /// 
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public string Message;
        /// <summary>
        /// 
        /// </summary>
        public long PlayerGuid;

        public override Packet Clone()
        {
            ResChatLog pkg = new ResChatLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SNickName = SNickName;
            pkg.RNickName = RNickName;
            pkg.GuildName = GuildName;
            pkg.TeamID = TeamID;
            pkg.Type = Type;
            pkg.Message = Message;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(SNickName);
                oByteArray.WriteUTF(RNickName);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUInt64(TeamID);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUTF(Message);
                oByteArray.WriteInt64(PlayerGuid);
            }
            else
            {
                SNickName = oByteArray.ReadUTF();
                RNickName = oByteArray.ReadUTF();
                GuildName = oByteArray.ReadUTF();
                TeamID = oByteArray.ReadUInt64();
                Type = oByteArray.ReadUInt();
                Message = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadInt64();
            }
        }
		public ResChatLog()
		{
			PacketID = 682;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服记录聊天 创建者
    /// </summary>
    [Package(682)]
    public partial class ResChatLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChatLog();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端该账号是否为GM账号
    /// </summary>
    public partial class ReqNoticeGMAccount: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeGMAccount pkg = new ReqNoticeGMAccount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeGMAccount()
		{
			PacketID = 683;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端该账号是否为GM账号 创建者
    /// </summary>
    [Package(683)]
    public partial class ReqNoticeGMAccountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeGMAccount();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端该账号是否为GM账号
    /// </summary>
    public partial class ResNoticeGMAccount: Packet 
    {
        /// <summary>
        /// 0-没有权限,1-全部权限,2-仅可以查看
        /// </summary>
        public uint IsGMAccount;

        public override Packet Clone()
        {
            ResNoticeGMAccount pkg = new ResNoticeGMAccount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsGMAccount = IsGMAccount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(IsGMAccount);
            }
            else
            {
                IsGMAccount = oByteArray.ReadUInt();
            }
        }
		public ResNoticeGMAccount()
		{
			PacketID = 684;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端该账号是否为GM账号 创建者
    /// </summary>
    [Package(684)]
    public partial class ResNoticeGMAccountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeGMAccount();
        }
    }


    /// <summary>
    ///  [请求类]
    /// </summary>
    public partial class ReqPlayerMove: Packet 
    {
        /// <summary>
        /// 坐标位置
        /// </summary>
        public ushort TargetX;
        /// <summary>
        /// 坐标位置
        /// </summary>
        public ushort TargetY;
        /// <summary>
        /// 行走类型
        /// </summary>
        public byte WalkType;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 放向
        /// </summary>
        public byte Direct;
        /// <summary>
        /// 当前位置X
        /// </summary>
        public ushort MapX;
        /// <summary>
        /// 当前位置Y
        /// </summary>
        public ushort MapY;

        public override Packet Clone()
        {
            ReqPlayerMove pkg = new ReqPlayerMove();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetX = TargetX;
            pkg.TargetY = TargetY;
            pkg.WalkType = WalkType;
            pkg.MapID = MapID;
            pkg.Direct = Direct;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(TargetX);
                oByteArray.WriteUShort(TargetY);
                oByteArray.WriteByte(WalkType);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteByte(Direct);
                oByteArray.WriteUShort(MapX);
                oByteArray.WriteUShort(MapY);
            }
            else
            {
                TargetX = oByteArray.ReadUShort();
                TargetY = oByteArray.ReadUShort();
                WalkType = oByteArray.ReadByte();
                MapID = oByteArray.ReadUInt();
                Direct = oByteArray.ReadByte();
                MapX = oByteArray.ReadUShort();
                MapY = oByteArray.ReadUShort();
            }
        }
		public ReqPlayerMove()
		{
			PacketID = 685;
		}
    }

    /// <summary>
    ///  [请求类]  创建者
    /// </summary>
    [Package(685)]
    public partial class ReqPlayerMoveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerMove();
        }
    }


    /// <summary>
    ///  [响应类]
    /// </summary>
    public partial class ResPlayerMove: Packet 
    {
        /// <summary>
        /// 坐标位置
        /// </summary>
        public ushort TargetX;
        /// <summary>
        /// 坐标位置
        /// </summary>
        public ushort TargetY;
        /// <summary>
        /// 对象ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 1目标点不能进
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResPlayerMove pkg = new ResPlayerMove();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetX = TargetX;
            pkg.TargetY = TargetY;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(TargetX);
                oByteArray.WriteUShort(TargetY);
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Type);
            }
            else
            {
                TargetX = oByteArray.ReadUShort();
                TargetY = oByteArray.ReadUShort();
                ObjectID.Serializtion(oByteArray, bSerialize);
                Type = oByteArray.ReadByte();
            }
        }
		public ResPlayerMove()
		{
			PacketID = 686;
		}
    }

    /// <summary>
    ///  [响应类]  创建者
    /// </summary>
    [Package(686)]
    public partial class ResPlayerMoveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerMove();
        }
    }


    /// <summary>
    ///  [请求类]升级传奇之魂系统
    /// </summary>
    public partial class ReqUpgradeLegendSoul: Packet 
    {
        /// <summary>
        /// 请求升级的Type,9 是升级传奇之魂整体等级上限，0生命，1攻击力，2内力，3物理防御力，4魔法防御力，5暴击率
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqUpgradeLegendSoul pkg = new ReqUpgradeLegendSoul();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqUpgradeLegendSoul()
		{
			PacketID = 687;
		}
    }

    /// <summary>
    ///  [请求类] 升级传奇之魂系统 创建者
    /// </summary>
    [Package(687)]
    public partial class ReqUpgradeLegendSoulCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeLegendSoul();
        }
    }


    /// <summary>
    ///  [响应类]升级传奇之魂系统
    /// </summary>
    public partial class ResUpgradeLegendSoul: Packet 
    {
        /// <summary>
        /// 请求升级的Type,9 是升级传奇之魂整体等级上限，0生命，1攻击力，2内力，3物理防御力，4魔法防御力，5暴击率
        /// </summary>
        public uint Type;
        /// <summary>
        /// 升级后的TID
        /// </summary>
        public uint CurTID;
        /// <summary>
        /// 0,成功.1传奇之魂不足,2货币不足,3等级已达上限,4TID错误.
        /// </summary>
        public uint Result;
        /// <summary>
        /// 传奇之魂数量
        /// </summary>
        public uint LegendSoulValue;

        public override Packet Clone()
        {
            ResUpgradeLegendSoul pkg = new ResUpgradeLegendSoul();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.CurTID = CurTID;
            pkg.Result = Result;
            pkg.LegendSoulValue = LegendSoulValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(CurTID);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(LegendSoulValue);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                CurTID = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                LegendSoulValue = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeLegendSoul()
		{
			PacketID = 688;
		}
    }

    /// <summary>
    ///  [响应类] 升级传奇之魂系统 创建者
    /// </summary>
    [Package(688)]
    public partial class ResUpgradeLegendSoulCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeLegendSoul();
        }
    }


    /// <summary>
    ///  [请求类]更新传奇之魂信息
    /// </summary>
    public partial class ReqUpdateLegendSoulInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLegendSoulInfo pkg = new ReqUpdateLegendSoulInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLegendSoulInfo()
		{
			PacketID = 689;
		}
    }

    /// <summary>
    ///  [请求类] 更新传奇之魂信息 创建者
    /// </summary>
    [Package(689)]
    public partial class ReqUpdateLegendSoulInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLegendSoulInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新传奇之魂信息
    /// </summary>
    public partial class ResUpdateLegendSoulInfo: Packet 
    {
        /// <summary>
        /// 传奇之魂数量
        /// </summary>
        public uint LegendSoulValue;

        public override Packet Clone()
        {
            ResUpdateLegendSoulInfo pkg = new ResUpdateLegendSoulInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LegendSoulValue = LegendSoulValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(LegendSoulValue);
            }
            else
            {
                LegendSoulValue = oByteArray.ReadUInt();
            }
        }
		public ResUpdateLegendSoulInfo()
		{
			PacketID = 690;
		}
    }

    /// <summary>
    ///  [响应类] 更新传奇之魂信息 创建者
    /// </summary>
    [Package(690)]
    public partial class ResUpdateLegendSoulInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLegendSoulInfo();
        }
    }


    /// <summary>
    ///  [请求类]当怪物死亡
    /// </summary>
    public partial class ReqOnMonsterDie: Packet 
    {

        public override Packet Clone()
        {
            ReqOnMonsterDie pkg = new ReqOnMonsterDie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOnMonsterDie()
		{
			PacketID = 691;
		}
    }

    /// <summary>
    ///  [请求类] 当怪物死亡 创建者
    /// </summary>
    [Package(691)]
    public partial class ReqOnMonsterDieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOnMonsterDie();
        }
    }


    /// <summary>
    ///  [响应类]当怪物死亡
    /// </summary>
    public partial class ResOnMonsterDie: Packet 
    {
        /// <summary>
        /// 怪物TID
        /// </summary>
        public uint MonsterTID;

        public override Packet Clone()
        {
            ResOnMonsterDie pkg = new ResOnMonsterDie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterTID = MonsterTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonsterTID);
            }
            else
            {
                MonsterTID = oByteArray.ReadUInt();
            }
        }
		public ResOnMonsterDie()
		{
			PacketID = 692;
		}
    }

    /// <summary>
    ///  [响应类] 当怪物死亡 创建者
    /// </summary>
    [Package(692)]
    public partial class ResOnMonsterDieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOnMonsterDie();
        }
    }


    /// <summary>
    ///  [请求类]更新服务器时间
    /// </summary>
    public partial class ReqUpdateServerTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateServerTime pkg = new ReqUpdateServerTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateServerTime()
		{
			PacketID = 693;
		}
    }

    /// <summary>
    ///  [请求类] 更新服务器时间 创建者
    /// </summary>
    [Package(693)]
    public partial class ReqUpdateServerTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateServerTime();
        }
    }


    /// <summary>
    ///  [响应类]更新服务器时间
    /// </summary>
    public partial class ResUpdateServerTime: Packet 
    {
        /// <summary>
        /// 服务器运行时间
        /// </summary>
        public ulong ServerRunTime;
        /// <summary>
        /// 服务器当前时间戳
        /// </summary>
        public ulong ServerSysTime;

        public override Packet Clone()
        {
            ResUpdateServerTime pkg = new ResUpdateServerTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ServerRunTime = ServerRunTime;
            pkg.ServerSysTime = ServerSysTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(ServerRunTime);
                oByteArray.WriteUInt64(ServerSysTime);
            }
            else
            {
                ServerRunTime = oByteArray.ReadUInt64();
                ServerSysTime = oByteArray.ReadUInt64();
            }
        }
		public ResUpdateServerTime()
		{
			PacketID = 694;
		}
    }

    /// <summary>
    ///  [响应类] 更新服务器时间 创建者
    /// </summary>
    [Package(694)]
    public partial class ResUpdateServerTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateServerTime();
        }
    }


    /// <summary>
    ///  [请求类]请求领奖
    /// </summary>
    public partial class ReqSYMYTakeAward: Packet 
    {
        /// <summary>
        /// 0是单倍领取,1是双倍领取
        /// </summary>
        public uint IsDouble;

        public override Packet Clone()
        {
            ReqSYMYTakeAward pkg = new ReqSYMYTakeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsDouble = IsDouble;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(IsDouble);
            }
            else
            {
                IsDouble = oByteArray.ReadUInt();
            }
        }
		public ReqSYMYTakeAward()
		{
			PacketID = 695;
		}
    }

    /// <summary>
    ///  [请求类] 请求领奖 创建者
    /// </summary>
    [Package(695)]
    public partial class ReqSYMYTakeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSYMYTakeAward();
        }
    }


    /// <summary>
    ///  [响应类]请求领奖
    /// </summary>
    public partial class ResSYMYTakeAward: Packet 
    {
        /// <summary>
        /// 0成功,1失败,2钱不够,3非法请求
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResSYMYTakeAward pkg = new ResSYMYTakeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResSYMYTakeAward()
		{
			PacketID = 696;
		}
    }

    /// <summary>
    ///  [响应类] 请求领奖 创建者
    /// </summary>
    [Package(696)]
    public partial class ResSYMYTakeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSYMYTakeAward();
        }
    }


    /// <summary>
    ///  [请求类]更新任务
    /// </summary>
    public partial class ReqSYMYUpdateTask: Packet 
    {

        public override Packet Clone()
        {
            ReqSYMYUpdateTask pkg = new ReqSYMYUpdateTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSYMYUpdateTask()
		{
			PacketID = 697;
		}
    }

    /// <summary>
    ///  [请求类] 更新任务 创建者
    /// </summary>
    [Package(697)]
    public partial class ReqSYMYUpdateTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSYMYUpdateTask();
        }
    }


    /// <summary>
    ///  [响应类]更新任务
    /// </summary>
    public partial class ResSYMYUpdateTask: Packet 
    {
        /// <summary>
        /// 当前任务ID
        /// </summary>
        public uint TaskTID;
        /// <summary>
        /// 任务怪1TID
        /// </summary>
        public uint TaskMonster1TID;
        /// <summary>
        /// 任务怪1已击杀数量
        /// </summary>
        public uint TaskMonster1Num;
        /// <summary>
        /// 任务怪2TID
        /// </summary>
        public uint TaskMonster2TID;
        /// <summary>
        /// 任务怪2已击杀数量
        /// </summary>
        public uint TaskMonster2Num;

        public override Packet Clone()
        {
            ResSYMYUpdateTask pkg = new ResSYMYUpdateTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskTID = TaskTID;
            pkg.TaskMonster1TID = TaskMonster1TID;
            pkg.TaskMonster1Num = TaskMonster1Num;
            pkg.TaskMonster2TID = TaskMonster2TID;
            pkg.TaskMonster2Num = TaskMonster2Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskTID);
                oByteArray.WriteUInt(TaskMonster1TID);
                oByteArray.WriteUInt(TaskMonster1Num);
                oByteArray.WriteUInt(TaskMonster2TID);
                oByteArray.WriteUInt(TaskMonster2Num);
            }
            else
            {
                TaskTID = oByteArray.ReadUInt();
                TaskMonster1TID = oByteArray.ReadUInt();
                TaskMonster1Num = oByteArray.ReadUInt();
                TaskMonster2TID = oByteArray.ReadUInt();
                TaskMonster2Num = oByteArray.ReadUInt();
            }
        }
		public ResSYMYUpdateTask()
		{
			PacketID = 698;
		}
    }

    /// <summary>
    ///  [响应类] 更新任务 创建者
    /// </summary>
    [Package(698)]
    public partial class ResSYMYUpdateTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSYMYUpdateTask();
        }
    }


    /// <summary>
    ///  [请求类]深渊魔域召唤boss
    /// </summary>
    public partial class ReqSYMYCCallBoss: Packet 
    {
        /// <summary>
        /// 召唤TID（不是boss的TID）
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqSYMYCCallBoss pkg = new ReqSYMYCCallBoss();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqSYMYCCallBoss()
		{
			PacketID = 699;
		}
    }

    /// <summary>
    ///  [请求类] 深渊魔域召唤boss 创建者
    /// </summary>
    [Package(699)]
    public partial class ReqSYMYCCallBossCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSYMYCCallBoss();
        }
    }


    /// <summary>
    ///  [响应类]深渊魔域召唤boss
    /// </summary>
    public partial class ResSYMYCCallBoss: Packet 
    {
        /// <summary>
        /// 0成功,1失败,2召唤物品不够,3坐标位置非法.
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResSYMYCCallBoss pkg = new ResSYMYCCallBoss();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResSYMYCCallBoss()
		{
			PacketID = 700;
		}
    }

    /// <summary>
    ///  [响应类] 深渊魔域召唤boss 创建者
    /// </summary>
    [Package(700)]
    public partial class ResSYMYCCallBossCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSYMYCCallBoss();
        }
    }


    /// <summary>
    ///  [请求类]更新行会成员信息
    /// </summary>
    public partial class ReqNoticeUpdateGuildMemberInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdateGuildMemberInfo pkg = new ReqNoticeUpdateGuildMemberInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdateGuildMemberInfo()
		{
			PacketID = 701;
		}
    }

    /// <summary>
    ///  [请求类] 更新行会成员信息 创建者
    /// </summary>
    [Package(701)]
    public partial class ReqNoticeUpdateGuildMemberInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateGuildMemberInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新行会成员信息
    /// </summary>
    public partial class ResNoticeUpdateGuildMemberInfo: Packet 
    {
        /// <summary>
        /// 更新行会成员信息
        /// </summary>
        public GuildmemberInfo MemberInfo = new GuildmemberInfo();
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeUpdateGuildMemberInfo pkg = new ResNoticeUpdateGuildMemberInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MemberInfo = MemberInfo.Clone() as GuildmemberInfo;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                MemberInfo.Serializtion(oByteArray, bSerialize);
                GuildID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MemberInfo.Serializtion(oByteArray, bSerialize);
                GuildID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeUpdateGuildMemberInfo()
		{
			PacketID = 702;
		}
    }

    /// <summary>
    ///  [响应类] 更新行会成员信息 创建者
    /// </summary>
    [Package(702)]
    public partial class ResNoticeUpdateGuildMemberInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateGuildMemberInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服战系统兑换物品
    /// </summary>
    public partial class ReqServiceWarTakeItem: Packet 
    {
        /// <summary>
        /// 请求兑换的TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqServiceWarTakeItem pkg = new ReqServiceWarTakeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqServiceWarTakeItem()
		{
			PacketID = 703;
		}
    }

    /// <summary>
    ///  [请求类] 跨服战系统兑换物品 创建者
    /// </summary>
    [Package(703)]
    public partial class ReqServiceWarTakeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqServiceWarTakeItem();
        }
    }


    /// <summary>
    ///  [响应类]跨服战系统兑换物品
    /// </summary>
    public partial class ResServiceWarTakeItem: Packet 
    {
        /// <summary>
        /// 0.成功，1.失败，2.货币不足，3.兑换次数已达上线，4.背包不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 成功兑换更新荣誉值
        /// </summary>
        public uint HonorValue;
        /// <summary>
        /// 请求兑换的TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 今天已兑换次数
        /// </summary>
        public uint Times;

        public override Packet Clone()
        {
            ResServiceWarTakeItem pkg = new ResServiceWarTakeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.HonorValue = HonorValue;
            pkg.TID = TID;
            pkg.Times = Times;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(HonorValue);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Times);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                HonorValue = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                Times = oByteArray.ReadUInt();
            }
        }
		public ResServiceWarTakeItem()
		{
			PacketID = 704;
		}
    }

    /// <summary>
    ///  [响应类] 跨服战系统兑换物品 创建者
    /// </summary>
    [Package(704)]
    public partial class ResServiceWarTakeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResServiceWarTakeItem();
        }
    }


    /// <summary>
    ///  [请求类]更新跨服战荣誉值
    /// </summary>
    public partial class ReqUpdateHonorValue: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateHonorValue pkg = new ReqUpdateHonorValue();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateHonorValue()
		{
			PacketID = 705;
		}
    }

    /// <summary>
    ///  [请求类] 更新跨服战荣誉值 创建者
    /// </summary>
    [Package(705)]
    public partial class ReqUpdateHonorValueCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateHonorValue();
        }
    }


    /// <summary>
    ///  [响应类]更新跨服战荣誉值
    /// </summary>
    public partial class ResUpdateHonorValue: Packet 
    {
        /// <summary>
        /// 荣誉值
        /// </summary>
        public uint HonorValue;

        public override Packet Clone()
        {
            ResUpdateHonorValue pkg = new ResUpdateHonorValue();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.HonorValue = HonorValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(HonorValue);
            }
            else
            {
                HonorValue = oByteArray.ReadUInt();
            }
        }
		public ResUpdateHonorValue()
		{
			PacketID = 706;
		}
    }

    /// <summary>
    ///  [响应类] 更新跨服战荣誉值 创建者
    /// </summary>
    [Package(706)]
    public partial class ResUpdateHonorValueCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateHonorValue();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服战服务器匹配结果
    /// </summary>
    public partial class ReqNoticeServiceWarServerInfo: Packet 
    {
        /// <summary>
        /// 活动ID
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 服务器阵营
        /// </summary>
        public byte Camp;
        /// <summary>
        /// 跨服分组
        /// </summary>
        public uint GroupID;

        public override Packet Clone()
        {
            ReqNoticeServiceWarServerInfo pkg = new ReqNoticeServiceWarServerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.Camp = Camp;
            pkg.GroupID = GroupID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteByte(Camp);
                oByteArray.WriteUInt(GroupID);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                Camp = oByteArray.ReadByte();
                GroupID = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeServiceWarServerInfo()
		{
			PacketID = 707;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服战服务器匹配结果 创建者
    /// </summary>
    [Package(707)]
    public partial class ReqNoticeServiceWarServerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeServiceWarServerInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服战服务器匹配结果
    /// </summary>
    public partial class ResNoticeServiceWarServerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ServiceWarServerInfo> ServiceWarServerInfoVec = new List<ServiceWarServerInfo>();

        public override Packet Clone()
        {
            ResNoticeServiceWarServerInfo pkg = new ResNoticeServiceWarServerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ServiceWarServerInfo item in ServiceWarServerInfoVec)
            {
                pkg.ServiceWarServerInfoVec.Add(item.Clone() as ServiceWarServerInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ServiceWarServerInfoVec.Count);
                for (int i = 0; i < ServiceWarServerInfoVec.Count; i++)
                {
                    ServiceWarServerInfoVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ServiceWarServerInfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ServiceWarServerInfoVecCount; i++)
                {
                    ServiceWarServerInfo obj = new ServiceWarServerInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ServiceWarServerInfoVec.Add(obj);
                }
            }
        }
		public ResNoticeServiceWarServerInfo()
		{
			PacketID = 708;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服战服务器匹配结果 创建者
    /// </summary>
    [Package(708)]
    public partial class ResNoticeServiceWarServerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeServiceWarServerInfo();
        }
    }


    /// <summary>
    ///  [请求类]进入跨服战场
    /// </summary>
    public partial class ReqEnterServiceWar: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ReqEnterServiceWar pkg = new ReqEnterServiceWar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ReqEnterServiceWar()
		{
			PacketID = 709;
		}
    }

    /// <summary>
    ///  [请求类] 进入跨服战场 创建者
    /// </summary>
    [Package(709)]
    public partial class ReqEnterServiceWarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterServiceWar();
        }
    }


    /// <summary>
    ///  [响应类]进入跨服战场
    /// </summary>
    public partial class ResEnterServiceWar: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ResEnterServiceWar pkg = new ResEnterServiceWar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ResEnterServiceWar()
		{
			PacketID = 710;
		}
    }

    /// <summary>
    ///  [响应类] 进入跨服战场 创建者
    /// </summary>
    [Package(710)]
    public partial class ResEnterServiceWarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterServiceWar();
        }
    }


    /// <summary>
    ///  [请求类]通知服务器跨服战玩家信息
    /// </summary>
    public partial class ReqNoticeServiceWarPlayerInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeServiceWarPlayerInfo pkg = new ReqNoticeServiceWarPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeServiceWarPlayerInfo()
		{
			PacketID = 711;
		}
    }

    /// <summary>
    ///  [请求类] 通知服务器跨服战玩家信息 创建者
    /// </summary>
    [Package(711)]
    public partial class ReqNoticeServiceWarPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeServiceWarPlayerInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知服务器跨服战玩家信息
    /// </summary>
    public partial class ResNoticeServiceWarPlayerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> AttackValue = new List<uint>();
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public uint Port;

        public override Packet Clone()
        {
            ResNoticeServiceWarPlayerInfo pkg = new ResNoticeServiceWarPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in AttackValue)
            {
                pkg.AttackValue.Add(item);
            }
            pkg.ActivityID = ActivityID;
            pkg.WorldIP = WorldIP;
            pkg.Port = Port;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)AttackValue.Count);
                for (int i = 0; i < AttackValue.Count; i++)
                {
                    oByteArray.WriteUInt(AttackValue[i]);
                }
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(Port);
            }
            else
            {
                int AttackValueCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AttackValueCount; i++)
                {
                    AttackValue.Add(oByteArray.ReadUInt());
                }
                ActivityID = oByteArray.ReadUInt();
                WorldIP = oByteArray.ReadUTF();
                Port = oByteArray.ReadUInt();
            }
        }
		public ResNoticeServiceWarPlayerInfo()
		{
			PacketID = 712;
		}
    }

    /// <summary>
    ///  [响应类] 通知服务器跨服战玩家信息 创建者
    /// </summary>
    [Package(712)]
    public partial class ResNoticeServiceWarPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeServiceWarPlayerInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服战活动状态切换
    /// </summary>
    public partial class ReqNoticeSWActivityChangeState: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint State;
        /// <summary>
        /// 
        /// </summary>
        public uint OldState;

        public override Packet Clone()
        {
            ReqNoticeSWActivityChangeState pkg = new ReqNoticeSWActivityChangeState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.State = State;
            pkg.OldState = OldState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(State);
                oByteArray.WriteUInt(OldState);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
                OldState = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeSWActivityChangeState()
		{
			PacketID = 713;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服战活动状态切换 创建者
    /// </summary>
    [Package(713)]
    public partial class ReqNoticeSWActivityChangeStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSWActivityChangeState();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服战活动状态切换
    /// </summary>
    public partial class ResNoticeSWActivityChangeState: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 当前状态0关闭1报名2等待3进行中4休息阶段
        /// </summary>
        public int State;
        /// <summary>
        /// 
        /// </summary>
        public int OldState;
        /// <summary>
        /// 
        /// </summary>
        public int BeginTime;

        public override Packet Clone()
        {
            ResNoticeSWActivityChangeState pkg = new ResNoticeSWActivityChangeState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.State = State;
            pkg.OldState = OldState;
            pkg.BeginTime = BeginTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteInt(State);
                oByteArray.WriteInt(OldState);
                oByteArray.WriteInt(BeginTime);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                State = oByteArray.ReadInt();
                OldState = oByteArray.ReadInt();
                BeginTime = oByteArray.ReadInt();
            }
        }
		public ResNoticeSWActivityChangeState()
		{
			PacketID = 714;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服战活动状态切换 创建者
    /// </summary>
    [Package(714)]
    public partial class ResNoticeSWActivityChangeStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSWActivityChangeState();
        }
    }


    /// <summary>
    ///  [请求类]跨服战积分排行榜
    /// </summary>
    public partial class ReqNoticeSWActivityPointRankInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 0:总积分排行 1：当天积分排行
        /// </summary>
        public uint RankType;

        public override Packet Clone()
        {
            ReqNoticeSWActivityPointRankInfo pkg = new ReqNoticeSWActivityPointRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.RankType = RankType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(RankType);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                RankType = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeSWActivityPointRankInfo()
		{
			PacketID = 715;
		}
    }

    /// <summary>
    ///  [请求类] 跨服战积分排行榜 创建者
    /// </summary>
    [Package(715)]
    public partial class ReqNoticeSWActivityPointRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSWActivityPointRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]跨服战积分排行榜
    /// </summary>
    public partial class ResNoticeSWActivityPointRankInfo: Packet 
    {
        /// <summary>
        /// 玩家排行榜信息
        /// </summary>
        public List<ServiceWarRankInfo> RankInfo = new List<ServiceWarRankInfo>();
        /// <summary>
        /// 荣誉值
        /// </summary>
        public uint Value;
        /// <summary>
        /// 自己的名次
        /// </summary>
        public uint Rank;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 其他信息
        /// </summary>
        public List<int> PlayerData = new List<int>();
        /// <summary>
        /// 0:总积分排行 1：当天积分排行
        /// </summary>
        public uint RankType;

        public override Packet Clone()
        {
            ResNoticeSWActivityPointRankInfo pkg = new ResNoticeSWActivityPointRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ServiceWarRankInfo item in RankInfo)
            {
                pkg.RankInfo.Add(item.Clone() as ServiceWarRankInfo);
            }
            pkg.Value = Value;
            pkg.Rank = Rank;
            pkg.ActivityID = ActivityID;
            foreach (var item in PlayerData)
            {
                pkg.PlayerData.Add(item);
            }
            pkg.RankType = RankType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RankInfo.Count);
                for (int i = 0; i < RankInfo.Count; i++)
                {
                    RankInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(Value);
                oByteArray.WriteUInt(Rank);
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUShort((ushort)PlayerData.Count);
                for (int i = 0; i < PlayerData.Count; i++)
                {
                    oByteArray.WriteInt(PlayerData[i]);
                }
                oByteArray.WriteUInt(RankType);
            }
            else
            {
                int RankInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankInfoCount; i++)
                {
                    ServiceWarRankInfo obj = new ServiceWarRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankInfo.Add(obj);
                }
                Value = oByteArray.ReadUInt();
                Rank = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
                int PlayerDataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerDataCount; i++)
                {
                    PlayerData.Add(oByteArray.ReadInt());
                }
                RankType = oByteArray.ReadUInt();
            }
        }
		public ResNoticeSWActivityPointRankInfo()
		{
			PacketID = 716;
		}
    }

    /// <summary>
    ///  [响应类] 跨服战积分排行榜 创建者
    /// </summary>
    [Package(716)]
    public partial class ResNoticeSWActivityPointRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSWActivityPointRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服战系统增加玩家奖励（经验，积分，排行数据值，物品组）
    /// </summary>
    public partial class ReqUpdatePlayerActivityData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerActivityData pkg = new ReqUpdatePlayerActivityData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerActivityData()
		{
			PacketID = 717;
		}
    }

    /// <summary>
    ///  [请求类] 跨服战系统增加玩家奖励（经验，积分，排行数据值，物品组） 创建者
    /// </summary>
    [Package(717)]
    public partial class ReqUpdatePlayerActivityDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerActivityData();
        }
    }


    /// <summary>
    ///  [响应类]跨服战系统增加玩家奖励（经验，积分，排行数据值，物品组）
    /// </summary>
    public partial class ResUpdatePlayerActivityData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Point;
        /// <summary>
        /// 
        /// </summary>
        public List<int> PlayerData = new List<int>();
        /// <summary>
        /// 
        /// </summary>
        public int ActivityID;

        public override Packet Clone()
        {
            ResUpdatePlayerActivityData pkg = new ResUpdatePlayerActivityData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Point = Point;
            foreach (var item in PlayerData)
            {
                pkg.PlayerData.Add(item);
            }
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Point);
                oByteArray.WriteUShort((ushort)PlayerData.Count);
                for (int i = 0; i < PlayerData.Count; i++)
                {
                    oByteArray.WriteInt(PlayerData[i]);
                }
                oByteArray.WriteInt(ActivityID);
            }
            else
            {
                Point = oByteArray.ReadInt();
                int PlayerDataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerDataCount; i++)
                {
                    PlayerData.Add(oByteArray.ReadInt());
                }
                ActivityID = oByteArray.ReadInt();
            }
        }
		public ResUpdatePlayerActivityData()
		{
			PacketID = 718;
		}
    }

    /// <summary>
    ///  [响应类] 跨服战系统增加玩家奖励（经验，积分，排行数据值，物品组） 创建者
    /// </summary>
    [Package(718)]
    public partial class ResUpdatePlayerActivityDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerActivityData();
        }
    }


    /// <summary>
    ///  [请求类]当背包满了跨服战挨雷劈没给物品时给提示
    /// </summary>
    public partial class ReqOnBagFull: Packet 
    {

        public override Packet Clone()
        {
            ReqOnBagFull pkg = new ReqOnBagFull();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOnBagFull()
		{
			PacketID = 719;
		}
    }

    /// <summary>
    ///  [请求类] 当背包满了跨服战挨雷劈没给物品时给提示 创建者
    /// </summary>
    [Package(719)]
    public partial class ReqOnBagFullCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOnBagFull();
        }
    }


    /// <summary>
    ///  [响应类]当背包满了跨服战挨雷劈没给物品时给提示
    /// </summary>
    public partial class ResOnBagFull: Packet 
    {

        public override Packet Clone()
        {
            ResOnBagFull pkg = new ResOnBagFull();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResOnBagFull()
		{
			PacketID = 720;
		}
    }

    /// <summary>
    ///  [响应类] 当背包满了跨服战挨雷劈没给物品时给提示 创建者
    /// </summary>
    [Package(720)]
    public partial class ResOnBagFullCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOnBagFull();
        }
    }


    /// <summary>
    ///  [请求类]请求社交信息
    /// </summary>
    public partial class ReqGetSocietyInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqGetSocietyInfo pkg = new ReqGetSocietyInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetSocietyInfo()
		{
			PacketID = 721;
		}
    }

    /// <summary>
    ///  [请求类] 请求社交信息 创建者
    /// </summary>
    [Package(721)]
    public partial class ReqGetSocietyInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetSocietyInfo();
        }
    }


    /// <summary>
    ///  [响应类]请求社交信息
    /// </summary>
    public partial class ResGetSocietyInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<SocietyRelation> SocietyInfo = new List<SocietyRelation>();

        public override Packet Clone()
        {
            ResGetSocietyInfo pkg = new ResGetSocietyInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (SocietyRelation item in SocietyInfo)
            {
                pkg.SocietyInfo.Add(item.Clone() as SocietyRelation);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)SocietyInfo.Count);
                for (int i = 0; i < SocietyInfo.Count; i++)
                {
                    SocietyInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int SocietyInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < SocietyInfoCount; i++)
                {
                    SocietyRelation obj = new SocietyRelation();
                    obj.Serializtion(oByteArray, bSerialize);
                    SocietyInfo.Add(obj);
                }
            }
        }
		public ResGetSocietyInfo()
		{
			PacketID = 722;
		}
    }

    /// <summary>
    ///  [响应类] 请求社交信息 创建者
    /// </summary>
    [Package(722)]
    public partial class ResGetSocietyInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetSocietyInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新社交关系信息
    /// </summary>
    public partial class ReqUpDateSocietyInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpDateSocietyInfo pkg = new ReqUpDateSocietyInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpDateSocietyInfo()
		{
			PacketID = 723;
		}
    }

    /// <summary>
    ///  [请求类] 更新社交关系信息 创建者
    /// </summary>
    [Package(723)]
    public partial class ReqUpDateSocietyInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpDateSocietyInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新社交关系信息
    /// </summary>
    public partial class ResUpDateSocietyInfo: Packet 
    {
        /// <summary>
        /// 关系结构
        /// </summary>
        public SocietyRelation SocietyInfo = new SocietyRelation();
        /// <summary>
        /// 我的Guid，客户端不需要
        /// </summary>
        public ulong MyGuid;
        /// <summary>
        /// 1是inster2是update3是delete
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResUpDateSocietyInfo pkg = new ResUpDateSocietyInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SocietyInfo = SocietyInfo.Clone() as SocietyRelation;
            pkg.MyGuid = MyGuid;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                SocietyInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt64(MyGuid);
                oByteArray.WriteByte(Type);
            }
            else
            {
                SocietyInfo.Serializtion(oByteArray, bSerialize);
                MyGuid = oByteArray.ReadUInt64();
                Type = oByteArray.ReadByte();
            }
        }
		public ResUpDateSocietyInfo()
		{
			PacketID = 724;
		}
    }

    /// <summary>
    ///  [响应类] 更新社交关系信息 创建者
    /// </summary>
    [Package(724)]
    public partial class ResUpDateSocietyInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpDateSocietyInfo();
        }
    }


    /// <summary>
    ///  [请求类]添加社交关系
    /// </summary>
    public partial class ReqAddSocietyRelation: Packet 
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 关系
        /// </summary>
        public ushort Relation;

        public override Packet Clone()
        {
            ReqAddSocietyRelation pkg = new ReqAddSocietyRelation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Name = Name;
            pkg.Relation = Relation;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Name);
                oByteArray.WriteUShort(Relation);
            }
            else
            {
                Name = oByteArray.ReadUTF();
                Relation = oByteArray.ReadUShort();
            }
        }
		public ReqAddSocietyRelation()
		{
			PacketID = 725;
		}
    }

    /// <summary>
    ///  [请求类] 添加社交关系 创建者
    /// </summary>
    [Package(725)]
    public partial class ReqAddSocietyRelationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddSocietyRelation();
        }
    }


    /// <summary>
    ///  [响应类]添加社交关系
    /// </summary>
    public partial class ResAddSocietyRelation: Packet 
    {
        /// <summary>
        /// 1不在线或者没有2已经有这个关系了3名额已满4夫妻不能结义5结义的不能结婚
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public ushort Relation;

        public override Packet Clone()
        {
            ResAddSocietyRelation pkg = new ResAddSocietyRelation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Relation = Relation;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUShort(Relation);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Relation = oByteArray.ReadUShort();
            }
        }
		public ResAddSocietyRelation()
		{
			PacketID = 726;
		}
    }

    /// <summary>
    ///  [响应类] 添加社交关系 创建者
    /// </summary>
    [Package(726)]
    public partial class ResAddSocietyRelationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddSocietyRelation();
        }
    }


    /// <summary>
    ///  [请求类]退出行会
    /// </summary>
    public partial class ReqNoticeRemoveGuildMember: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqNoticeRemoveGuildMember pkg = new ReqNoticeRemoveGuildMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeRemoveGuildMember()
		{
			PacketID = 727;
		}
    }

    /// <summary>
    ///  [请求类] 退出行会 创建者
    /// </summary>
    [Package(727)]
    public partial class ReqNoticeRemoveGuildMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeRemoveGuildMember();
        }
    }


    /// <summary>
    ///  [响应类]退出行会
    /// </summary>
    public partial class ResNoticeRemoveGuildMember: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeRemoveGuildMember pkg = new ResNoticeRemoveGuildMember();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeRemoveGuildMember()
		{
			PacketID = 728;
		}
    }

    /// <summary>
    ///  [响应类] 退出行会 创建者
    /// </summary>
    [Package(728)]
    public partial class ResNoticeRemoveGuildMemberCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeRemoveGuildMember();
        }
    }


    /// <summary>
    ///  [请求类]删除关系
    /// </summary>
    public partial class ReqRemoveSocietyRelation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public ushort Relation;

        public override Packet Clone()
        {
            ReqRemoveSocietyRelation pkg = new ReqRemoveSocietyRelation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Relation = Relation;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUShort(Relation);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Relation = oByteArray.ReadUShort();
            }
        }
		public ReqRemoveSocietyRelation()
		{
			PacketID = 729;
		}
    }

    /// <summary>
    ///  [请求类] 删除关系 创建者
    /// </summary>
    [Package(729)]
    public partial class ReqRemoveSocietyRelationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveSocietyRelation();
        }
    }


    /// <summary>
    ///  [响应类]删除关系
    /// </summary>
    public partial class ResRemoveSocietyRelation: Packet 
    {
        /// <summary>
        /// 1不存在这个关系2夫妻不能删除好友3结义不能删除好友
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public ushort Relation;

        public override Packet Clone()
        {
            ResRemoveSocietyRelation pkg = new ResRemoveSocietyRelation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Relation = Relation;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUShort(Relation);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Relation = oByteArray.ReadUShort();
            }
        }
		public ResRemoveSocietyRelation()
		{
			PacketID = 730;
		}
    }

    /// <summary>
    ///  [响应类] 删除关系 创建者
    /// </summary>
    [Package(730)]
    public partial class ResRemoveSocietyRelationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveSocietyRelation();
        }
    }


    /// <summary>
    ///  [请求类]更新拾取者名字
    /// </summary>
    public partial class ReqUpdatePickUpObjectName: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePickUpObjectName pkg = new ReqUpdatePickUpObjectName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePickUpObjectName()
		{
			PacketID = 731;
		}
    }

    /// <summary>
    ///  [请求类] 更新拾取者名字 创建者
    /// </summary>
    [Package(731)]
    public partial class ReqUpdatePickUpObjectNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePickUpObjectName();
        }
    }


    /// <summary>
    ///  [响应类]更新拾取者名字
    /// </summary>
    public partial class ResUpdatePickUpObjectName: Packet 
    {
        /// <summary>
        /// 当前boss拾取者名字
        /// </summary>
        public string PickObjectName;
        /// <summary>
        /// bossGuid
        /// </summary>
        public ObjectGuidInfo MonsterObjectID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResUpdatePickUpObjectName pkg = new ResUpdatePickUpObjectName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PickObjectName = PickObjectName;
            pkg.MonsterObjectID = MonsterObjectID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(PickObjectName);
                MonsterObjectID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PickObjectName = oByteArray.ReadUTF();
                MonsterObjectID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdatePickUpObjectName()
		{
			PacketID = 732;
		}
    }

    /// <summary>
    ///  [响应类] 更新拾取者名字 创建者
    /// </summary>
    [Package(732)]
    public partial class ResUpdatePickUpObjectNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePickUpObjectName();
        }
    }


    /// <summary>
    ///  [请求类]追踪仇人
    /// </summary>
    public partial class ReqTrackEnemy: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqTrackEnemy pkg = new ReqTrackEnemy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqTrackEnemy()
		{
			PacketID = 733;
		}
    }

    /// <summary>
    ///  [请求类] 追踪仇人 创建者
    /// </summary>
    [Package(733)]
    public partial class ReqTrackEnemyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTrackEnemy();
        }
    }


    /// <summary>
    ///  [响应类]追踪仇人
    /// </summary>
    public partial class ResTrackEnemy: Packet 
    {
        /// <summary>
        /// 1不在线2不是仇人3钱不足
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResTrackEnemy pkg = new ResTrackEnemy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadByte();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResTrackEnemy()
		{
			PacketID = 734;
		}
    }

    /// <summary>
    ///  [响应类] 追踪仇人 创建者
    /// </summary>
    [Package(734)]
    public partial class ResTrackEnemyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTrackEnemy();
        }
    }


    /// <summary>
    ///  [请求类]推荐好友
    /// </summary>
    public partial class ReqRecommendFriends: Packet 
    {

        public override Packet Clone()
        {
            ReqRecommendFriends pkg = new ReqRecommendFriends();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRecommendFriends()
		{
			PacketID = 735;
		}
    }

    /// <summary>
    ///  [请求类] 推荐好友 创建者
    /// </summary>
    [Package(735)]
    public partial class ReqRecommendFriendsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRecommendFriends();
        }
    }


    /// <summary>
    ///  [响应类]推荐好友
    /// </summary>
    public partial class ResRecommendFriends: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<SocietyRelation> FriendInfo = new List<SocietyRelation>();

        public override Packet Clone()
        {
            ResRecommendFriends pkg = new ResRecommendFriends();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (SocietyRelation item in FriendInfo)
            {
                pkg.FriendInfo.Add(item.Clone() as SocietyRelation);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)FriendInfo.Count);
                for (int i = 0; i < FriendInfo.Count; i++)
                {
                    FriendInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int FriendInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < FriendInfoCount; i++)
                {
                    SocietyRelation obj = new SocietyRelation();
                    obj.Serializtion(oByteArray, bSerialize);
                    FriendInfo.Add(obj);
                }
            }
        }
		public ResRecommendFriends()
		{
			PacketID = 736;
		}
    }

    /// <summary>
    ///  [响应类] 推荐好友 创建者
    /// </summary>
    [Package(736)]
    public partial class ResRecommendFriendsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRecommendFriends();
        }
    }


    /// <summary>
    ///  [请求类]传送复仇
    /// </summary>
    public partial class ReqTransferRevenge: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqTransferRevenge pkg = new ReqTransferRevenge();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqTransferRevenge()
		{
			PacketID = 737;
		}
    }

    /// <summary>
    ///  [请求类] 传送复仇 创建者
    /// </summary>
    [Package(737)]
    public partial class ReqTransferRevengeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferRevenge();
        }
    }


    /// <summary>
    ///  [响应类]传送复仇
    /// </summary>
    public partial class ResTransferRevenge: Packet 
    {
        /// <summary>
        /// 1玩家不在线2不是仇人3地图不能传送4钱不足
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTransferRevenge pkg = new ResTransferRevenge();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResTransferRevenge()
		{
			PacketID = 738;
		}
    }

    /// <summary>
    ///  [响应类] 传送复仇 创建者
    /// </summary>
    [Package(738)]
    public partial class ResTransferRevengeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferRevenge();
        }
    }


    /// <summary>
    ///  [请求类]修改签名
    /// </summary>
    public partial class ReqModifySignature: Packet 
    {
        /// <summary>
        /// 签名
        /// </summary>
        public string Signature;

        public override Packet Clone()
        {
            ReqModifySignature pkg = new ReqModifySignature();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Signature = Signature;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Signature);
            }
            else
            {
                Signature = oByteArray.ReadUTF();
            }
        }
		public ReqModifySignature()
		{
			PacketID = 739;
		}
    }

    /// <summary>
    ///  [请求类] 修改签名 创建者
    /// </summary>
    [Package(739)]
    public partial class ReqModifySignatureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqModifySignature();
        }
    }


    /// <summary>
    ///  [响应类]修改签名
    /// </summary>
    public partial class ResModifySignature: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public string Signature;

        public override Packet Clone()
        {
            ResModifySignature pkg = new ResModifySignature();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Signature = Signature;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUTF(Signature);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Signature = oByteArray.ReadUTF();
            }
        }
		public ResModifySignature()
		{
			PacketID = 740;
		}
    }

    /// <summary>
    ///  [响应类] 修改签名 创建者
    /// </summary>
    [Package(740)]
    public partial class ResModifySignatureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResModifySignature();
        }
    }


    /// <summary>
    ///  [请求类]购买投资
    /// </summary>
    public partial class ReqBuyInvestment: Packet 
    {
        /// <summary>
        /// 购买的投资类型
        /// </summary>
        public uint InvestmentTID;

        public override Packet Clone()
        {
            ReqBuyInvestment pkg = new ReqBuyInvestment();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.InvestmentTID = InvestmentTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(InvestmentTID);
            }
            else
            {
                InvestmentTID = oByteArray.ReadUInt();
            }
        }
		public ReqBuyInvestment()
		{
			PacketID = 741;
		}
    }

    /// <summary>
    ///  [请求类] 购买投资 创建者
    /// </summary>
    [Package(741)]
    public partial class ReqBuyInvestmentCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyInvestment();
        }
    }


    /// <summary>
    ///  [响应类]购买投资
    /// </summary>
    public partial class ResBuyInvestment: Packet 
    {
        /// <summary>
        /// 0成功，1失败
        /// </summary>
        public uint Result;
        /// <summary>
        /// 购买的投资类型
        /// </summary>
        public uint InvestmentTID;

        public override Packet Clone()
        {
            ResBuyInvestment pkg = new ResBuyInvestment();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.InvestmentTID = InvestmentTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(InvestmentTID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                InvestmentTID = oByteArray.ReadUInt();
            }
        }
		public ResBuyInvestment()
		{
			PacketID = 742;
		}
    }

    /// <summary>
    ///  [响应类] 购买投资 创建者
    /// </summary>
    [Package(742)]
    public partial class ResBuyInvestmentCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyInvestment();
        }
    }


    /// <summary>
    ///  [请求类]领取投资奖励
    /// </summary>
    public partial class ReqTakeInvestmentAward: Packet 
    {
        /// <summary>
        /// 投资的类型
        /// </summary>
        public uint InvestmentTID;
        /// <summary>
        /// 第几天的奖励
        /// </summary>
        public uint Day;

        public override Packet Clone()
        {
            ReqTakeInvestmentAward pkg = new ReqTakeInvestmentAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.InvestmentTID = InvestmentTID;
            pkg.Day = Day;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(InvestmentTID);
                oByteArray.WriteUInt(Day);
            }
            else
            {
                InvestmentTID = oByteArray.ReadUInt();
                Day = oByteArray.ReadUInt();
            }
        }
		public ReqTakeInvestmentAward()
		{
			PacketID = 743;
		}
    }

    /// <summary>
    ///  [请求类] 领取投资奖励 创建者
    /// </summary>
    [Package(743)]
    public partial class ReqTakeInvestmentAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeInvestmentAward();
        }
    }


    /// <summary>
    ///  [响应类]领取投资奖励
    /// </summary>
    public partial class ResTakeInvestmentAward: Packet 
    {
        /// <summary>
        /// 0成功,1失败
        /// </summary>
        public uint Result;
        /// <summary>
        /// 投资的类型
        /// </summary>
        public uint InvestmentTID;
        /// <summary>
        /// 第几天的奖励
        /// </summary>
        public uint Day;

        public override Packet Clone()
        {
            ResTakeInvestmentAward pkg = new ResTakeInvestmentAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.InvestmentTID = InvestmentTID;
            pkg.Day = Day;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(InvestmentTID);
                oByteArray.WriteUInt(Day);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                InvestmentTID = oByteArray.ReadUInt();
                Day = oByteArray.ReadUInt();
            }
        }
		public ResTakeInvestmentAward()
		{
			PacketID = 744;
		}
    }

    /// <summary>
    ///  [响应类] 领取投资奖励 创建者
    /// </summary>
    [Package(744)]
    public partial class ResTakeInvestmentAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeInvestmentAward();
        }
    }


    /// <summary>
    ///  [请求类]分解物品
    /// </summary>
    public partial class ReqDecomposeItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqDecomposeItem pkg = new ReqDecomposeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqDecomposeItem()
		{
			PacketID = 745;
		}
    }

    /// <summary>
    ///  [请求类] 分解物品 创建者
    /// </summary>
    [Package(745)]
    public partial class ReqDecomposeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDecomposeItem();
        }
    }


    /// <summary>
    ///  [响应类]分解物品
    /// </summary>
    public partial class ResDecomposeItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResDecomposeItem pkg = new ResDecomposeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResDecomposeItem()
		{
			PacketID = 746;
		}
    }

    /// <summary>
    ///  [响应类] 分解物品 创建者
    /// </summary>
    [Package(746)]
    public partial class ResDecomposeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDecomposeItem();
        }
    }


    /// <summary>
    ///  [请求类]玩家行为记录
    /// </summary>
    public partial class ReqNoticeBehaviorLog: Packet 
    {
        /// <summary>
        /// 行为类型
        /// </summary>
        public uint LogType;
        /// <summary>
        /// 所在地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 所在地图坐标X
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 所在地图坐标Y
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 参数1
        /// </summary>
        public uint Date1;
        /// <summary>
        /// 参数2
        /// </summary>
        public uint Date2;
        /// <summary>
        /// 参数3
        /// </summary>
        public uint Date3;
        /// <summary>
        /// 参数4
        /// </summary>
        public string Date4;
        /// <summary>
        /// 参数5
        /// </summary>
        public string Date5;

        public override Packet Clone()
        {
            ReqNoticeBehaviorLog pkg = new ReqNoticeBehaviorLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LogType = LogType;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Date1 = Date1;
            pkg.Date2 = Date2;
            pkg.Date3 = Date3;
            pkg.Date4 = Date4;
            pkg.Date5 = Date5;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(LogType);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(Date1);
                oByteArray.WriteUInt(Date2);
                oByteArray.WriteUInt(Date3);
                oByteArray.WriteUTF(Date4);
                oByteArray.WriteUTF(Date5);
            }
            else
            {
                LogType = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                Date1 = oByteArray.ReadUInt();
                Date2 = oByteArray.ReadUInt();
                Date3 = oByteArray.ReadUInt();
                Date4 = oByteArray.ReadUTF();
                Date5 = oByteArray.ReadUTF();
            }
        }
		public ReqNoticeBehaviorLog()
		{
			PacketID = 747;
		}
    }

    /// <summary>
    ///  [请求类] 玩家行为记录 创建者
    /// </summary>
    [Package(747)]
    public partial class ReqNoticeBehaviorLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeBehaviorLog();
        }
    }


    /// <summary>
    ///  [响应类]玩家行为记录
    /// </summary>
    public partial class ResNoticeBehaviorLog: Packet 
    {
        /// <summary>
        /// 行为类型（用于未验证宏接收）
        /// </summary>
        public uint LogType;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public uint Date1;
        /// <summary>
        /// 
        /// </summary>
        public uint Date2;
        /// <summary>
        /// 
        /// </summary>
        public uint Date3;
        /// <summary>
        /// 
        /// </summary>
        public string Date4;
        /// <summary>
        /// 
        /// </summary>
        public string Date5;
        /// <summary>
        /// 玩家Guid
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResNoticeBehaviorLog pkg = new ResNoticeBehaviorLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LogType = LogType;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Date1 = Date1;
            pkg.Date2 = Date2;
            pkg.Date3 = Date3;
            pkg.Date4 = Date4;
            pkg.Date5 = Date5;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(LogType);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(Date1);
                oByteArray.WriteUInt(Date2);
                oByteArray.WriteUInt(Date3);
                oByteArray.WriteUTF(Date4);
                oByteArray.WriteUTF(Date5);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                LogType = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                Date1 = oByteArray.ReadUInt();
                Date2 = oByteArray.ReadUInt();
                Date3 = oByteArray.ReadUInt();
                Date4 = oByteArray.ReadUTF();
                Date5 = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResNoticeBehaviorLog()
		{
			PacketID = 748;
		}
    }

    /// <summary>
    ///  [响应类] 玩家行为记录 创建者
    /// </summary>
    [Package(748)]
    public partial class ResNoticeBehaviorLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeBehaviorLog();
        }
    }


    /// <summary>
    ///  [请求类]领取至尊贵族奖励（每日奖励，首次奖励）
    /// </summary>
    public partial class ReqTakeSuperVIPAward: Packet 
    {
        /// <summary>
        /// 至尊类型
        /// </summary>
        public uint SuperVIPType;

        public override Packet Clone()
        {
            ReqTakeSuperVIPAward pkg = new ReqTakeSuperVIPAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SuperVIPType = SuperVIPType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SuperVIPType);
            }
            else
            {
                SuperVIPType = oByteArray.ReadUInt();
            }
        }
		public ReqTakeSuperVIPAward()
		{
			PacketID = 749;
		}
    }

    /// <summary>
    ///  [请求类] 领取至尊贵族奖励（每日奖励，首次奖励） 创建者
    /// </summary>
    [Package(749)]
    public partial class ReqTakeSuperVIPAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeSuperVIPAward();
        }
    }


    /// <summary>
    ///  [响应类]领取至尊贵族奖励（每日奖励，首次奖励）
    /// </summary>
    public partial class ResTakeSuperVIPAward: Packet 
    {
        /// <summary>
        /// 0成功，1失败，2已经领取,3背包已满,4体验卡无法领取
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint SuperVIPType;

        public override Packet Clone()
        {
            ResTakeSuperVIPAward pkg = new ResTakeSuperVIPAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.SuperVIPType = SuperVIPType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(SuperVIPType);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                SuperVIPType = oByteArray.ReadUInt();
            }
        }
		public ResTakeSuperVIPAward()
		{
			PacketID = 750;
		}
    }

    /// <summary>
    ///  [响应类] 领取至尊贵族奖励（每日奖励，首次奖励） 创建者
    /// </summary>
    [Package(750)]
    public partial class ResTakeSuperVIPAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeSuperVIPAward();
        }
    }


    /// <summary>
    ///  [请求类]购买至尊贵族
    /// </summary>
    public partial class ReqBuySuperVip: Packet 
    {
        /// <summary>
        /// 购买的贵族TID
        /// </summary>
        public uint SuperVIPLv;

        public override Packet Clone()
        {
            ReqBuySuperVip pkg = new ReqBuySuperVip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SuperVIPLv = SuperVIPLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SuperVIPLv);
            }
            else
            {
                SuperVIPLv = oByteArray.ReadUInt();
            }
        }
		public ReqBuySuperVip()
		{
			PacketID = 751;
		}
    }

    /// <summary>
    ///  [请求类] 购买至尊贵族 创建者
    /// </summary>
    [Package(751)]
    public partial class ReqBuySuperVipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuySuperVip();
        }
    }


    /// <summary>
    ///  [响应类]购买至尊贵族
    /// </summary>
    public partial class ResBuySuperVip: Packet 
    {
        /// <summary>
        /// 购买的贵族TID
        /// </summary>
        public uint SuperVIPLv;
        /// <summary>
        /// 0成功,1失败,2钱不足
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBuySuperVip pkg = new ResBuySuperVip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SuperVIPLv = SuperVIPLv;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SuperVIPLv);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                SuperVIPLv = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBuySuperVip()
		{
			PacketID = 752;
		}
    }

    /// <summary>
    ///  [响应类] 购买至尊贵族 创建者
    /// </summary>
    [Package(752)]
    public partial class ResBuySuperVipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuySuperVip();
        }
    }


    /// <summary>
    ///  [请求类]更新至尊VIP信息
    /// </summary>
    public partial class ReqUpdateSuperVipInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateSuperVipInfo pkg = new ReqUpdateSuperVipInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateSuperVipInfo()
		{
			PacketID = 753;
		}
    }

    /// <summary>
    ///  [请求类] 更新至尊VIP信息 创建者
    /// </summary>
    [Package(753)]
    public partial class ReqUpdateSuperVipInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateSuperVipInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新至尊VIP信息
    /// </summary>
    public partial class ResUpdateSuperVipInfo: Packet 
    {
        /// <summary>
        /// 至尊VIP类型
        /// </summary>
        public uint SuperVIPType;
        /// <summary>
        /// 过期时间
        /// </summary>
        public uint EndTime;
        /// <summary>
        /// 领取状态(0 未领取,1 已领取)
        /// </summary>
        public uint Status;

        public override Packet Clone()
        {
            ResUpdateSuperVipInfo pkg = new ResUpdateSuperVipInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SuperVIPType = SuperVIPType;
            pkg.EndTime = EndTime;
            pkg.Status = Status;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SuperVIPType);
                oByteArray.WriteUInt(EndTime);
                oByteArray.WriteUInt(Status);
            }
            else
            {
                SuperVIPType = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
                Status = oByteArray.ReadUInt();
            }
        }
		public ResUpdateSuperVipInfo()
		{
			PacketID = 754;
		}
    }

    /// <summary>
    ///  [响应类] 更新至尊VIP信息 创建者
    /// </summary>
    [Package(754)]
    public partial class ResUpdateSuperVipInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateSuperVipInfo();
        }
    }


    /// <summary>
    ///  [请求类]快速完成副本（扫荡）
    /// </summary>
    public partial class ReqQuicklyFinishDungeon: Packet 
    {
        /// <summary>
        /// 副本TID
        /// </summary>
        public uint DungeonID;
        /// <summary>
        /// 扫荡次数
        /// </summary>
        public uint Times;
        /// <summary>
        /// 领取倍数
        /// </summary>
        public uint Mulitiple;
        /// <summary>
        /// 0是普通扫荡1是满经验扫荡
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqQuicklyFinishDungeon pkg = new ReqQuicklyFinishDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonID = DungeonID;
            pkg.Times = Times;
            pkg.Mulitiple = Mulitiple;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DungeonID);
                oByteArray.WriteUInt(Times);
                oByteArray.WriteUInt(Mulitiple);
                oByteArray.WriteByte(Type);
            }
            else
            {
                DungeonID = oByteArray.ReadUInt();
                Times = oByteArray.ReadUInt();
                Mulitiple = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqQuicklyFinishDungeon()
		{
			PacketID = 755;
		}
    }

    /// <summary>
    ///  [请求类] 快速完成副本（扫荡） 创建者
    /// </summary>
    [Package(755)]
    public partial class ReqQuicklyFinishDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqQuicklyFinishDungeon();
        }
    }


    /// <summary>
    ///  [响应类]快速完成副本（扫荡）
    /// </summary>
    public partial class ResQuicklyFinishDungeon: Packet 
    {
        /// <summary>
        /// 0成功,1次数不足,2需要物品不足,3钱不足,4背包没有格子,5等级不足,6非单人副本无法扫荡,7副本TID非法
        /// </summary>
        public uint Result;
        /// <summary>
        /// 副本TID
        /// </summary>
        public uint DungeonID;
        /// <summary>
        /// 扫荡次数
        /// </summary>
        public uint Times;
        /// <summary>
        /// 领取倍数
        /// </summary>
        public uint Mulitiple;
        /// <summary>
        /// 0是普通扫荡1是满经验扫荡
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResQuicklyFinishDungeon pkg = new ResQuicklyFinishDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.DungeonID = DungeonID;
            pkg.Times = Times;
            pkg.Mulitiple = Mulitiple;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(DungeonID);
                oByteArray.WriteUInt(Times);
                oByteArray.WriteUInt(Mulitiple);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                DungeonID = oByteArray.ReadUInt();
                Times = oByteArray.ReadUInt();
                Mulitiple = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResQuicklyFinishDungeon()
		{
			PacketID = 756;
		}
    }

    /// <summary>
    ///  [响应类] 快速完成副本（扫荡） 创建者
    /// </summary>
    [Package(756)]
    public partial class ResQuicklyFinishDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResQuicklyFinishDungeon();
        }
    }


    /// <summary>
    ///  [请求类]快速完成日常任务（降妖除魔）
    /// </summary>
    public partial class ReqQuicklyFinishDailyTask: Packet 
    {
        /// <summary>
        /// 1降妖2全民3帮派4藏宝图
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqQuicklyFinishDailyTask pkg = new ReqQuicklyFinishDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqQuicklyFinishDailyTask()
		{
			PacketID = 757;
		}
    }

    /// <summary>
    ///  [请求类] 快速完成日常任务（降妖除魔） 创建者
    /// </summary>
    [Package(757)]
    public partial class ReqQuicklyFinishDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqQuicklyFinishDailyTask();
        }
    }


    /// <summary>
    ///  [响应类]快速完成日常任务（降妖除魔）
    /// </summary>
    public partial class ResQuicklyFinishDailyTask: Packet 
    {
        /// <summary>
        /// 0成功,1失败,2多倍领取错误,3钱不足,4次数不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 1降妖2全民3帮派4藏宝图
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResQuicklyFinishDailyTask pkg = new ResQuicklyFinishDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResQuicklyFinishDailyTask()
		{
			PacketID = 758;
		}
    }

    /// <summary>
    ///  [响应类] 快速完成日常任务（降妖除魔） 创建者
    /// </summary>
    [Package(758)]
    public partial class ResQuicklyFinishDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResQuicklyFinishDailyTask();
        }
    }


    /// <summary>
    ///  [请求类]展示奖励物品
    /// </summary>
    public partial class ReqShowAwardItem: Packet 
    {

        public override Packet Clone()
        {
            ReqShowAwardItem pkg = new ReqShowAwardItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqShowAwardItem()
		{
			PacketID = 759;
		}
    }

    /// <summary>
    ///  [请求类] 展示奖励物品 创建者
    /// </summary>
    [Package(759)]
    public partial class ReqShowAwardItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqShowAwardItem();
        }
    }


    /// <summary>
    ///  [响应类]展示奖励物品
    /// </summary>
    public partial class ResShowAwardItem: Packet 
    {
        /// <summary>
        /// 物品列表
        /// </summary>
        public List<ItemInfo> ItemVec = new List<ItemInfo>();
        /// <summary>
        /// 增加经验
        /// </summary>
        public uint AddExp;
        /// <summary>
        /// 增加金币
        /// </summary>
        public uint AddCoin;
        /// <summary>
        /// 增加绑定元宝
        /// </summary>
        public uint AddGlod;
        /// <summary>
        /// 增加元宝
        /// </summary>
        public uint AddIgnots;
        /// <summary>
        /// 增加绑定金币
        /// </summary>
        public uint AddBingCoin;

        public override Packet Clone()
        {
            ResShowAwardItem pkg = new ResShowAwardItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ItemInfo item in ItemVec)
            {
                pkg.ItemVec.Add(item.Clone() as ItemInfo);
            }
            pkg.AddExp = AddExp;
            pkg.AddCoin = AddCoin;
            pkg.AddGlod = AddGlod;
            pkg.AddIgnots = AddIgnots;
            pkg.AddBingCoin = AddBingCoin;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ItemVec.Count);
                for (int i = 0; i < ItemVec.Count; i++)
                {
                    ItemVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(AddExp);
                oByteArray.WriteUInt(AddCoin);
                oByteArray.WriteUInt(AddGlod);
                oByteArray.WriteUInt(AddIgnots);
                oByteArray.WriteUInt(AddBingCoin);
            }
            else
            {
                int ItemVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemVecCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemVec.Add(obj);
                }
                AddExp = oByteArray.ReadUInt();
                AddCoin = oByteArray.ReadUInt();
                AddGlod = oByteArray.ReadUInt();
                AddIgnots = oByteArray.ReadUInt();
                AddBingCoin = oByteArray.ReadUInt();
            }
        }
		public ResShowAwardItem()
		{
			PacketID = 760;
		}
    }

    /// <summary>
    ///  [响应类] 展示奖励物品 创建者
    /// </summary>
    [Package(760)]
    public partial class ResShowAwardItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResShowAwardItem();
        }
    }


    /// <summary>
    ///  [请求类]穿戴时装
    /// </summary>
    public partial class ReqDressFashion: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint FashionID;
        /// <summary>
        /// 0是脱下1是穿上
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqDressFashion pkg = new ReqDressFashion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FashionID = FashionID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(FashionID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                FashionID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqDressFashion()
		{
			PacketID = 761;
		}
    }

    /// <summary>
    ///  [请求类] 穿戴时装 创建者
    /// </summary>
    [Package(761)]
    public partial class ReqDressFashionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDressFashion();
        }
    }


    /// <summary>
    ///  [响应类]穿戴时装
    /// </summary>
    public partial class ResDressFashion: Packet 
    {
        /// <summary>
        /// 1没有该时装
        /// </summary>
        public byte Result;
        /// <summary>
        /// 时装ID
        /// </summary>
        public uint FashionID;

        public override Packet Clone()
        {
            ResDressFashion pkg = new ResDressFashion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.FashionID = FashionID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(FashionID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                FashionID = oByteArray.ReadUInt();
            }
        }
		public ResDressFashion()
		{
			PacketID = 762;
		}
    }

    /// <summary>
    ///  [响应类] 穿戴时装 创建者
    /// </summary>
    [Package(762)]
    public partial class ResDressFashionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDressFashion();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服拍卖开启
    /// </summary>
    public partial class ReqNoticeSWAuctionOpen: Packet 
    {
        /// <summary>
        /// 拍卖物品
        /// </summary>
        public List<ItemInfo> Items = new List<ItemInfo>();
        /// <summary>
        /// 
        /// </summary>
        public uint State;
        /// <summary>
        /// 
        /// </summary>
        public int ActivityID;

        public override Packet Clone()
        {
            ReqNoticeSWAuctionOpen pkg = new ReqNoticeSWAuctionOpen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ItemInfo item in Items)
            {
                pkg.Items.Add(item.Clone() as ItemInfo);
            }
            pkg.State = State;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < Items.Count; i++)
                {
                      Items[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(State);
                oByteArray.WriteInt(ActivityID);
            }
            else
            {
                int ItemsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemsCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Items.Add(obj);
                }
                State = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadInt();
            }
        }
		public ReqNoticeSWAuctionOpen()
		{
			PacketID = 763;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服拍卖开启 创建者
    /// </summary>
    [Package(763)]
    public partial class ReqNoticeSWAuctionOpenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSWAuctionOpen();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服拍卖开启
    /// </summary>
    public partial class ResNoticeSWAuctionOpen: Packet 
    {
        /// <summary>
        /// 拍卖物品
        /// </summary>
        public List<ItemInfo> Items = new List<ItemInfo>();
        /// <summary>
        /// 
        /// </summary>
        public int ActivityID;

        public override Packet Clone()
        {
            ResNoticeSWAuctionOpen pkg = new ResNoticeSWAuctionOpen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ItemInfo item in Items)
            {
                pkg.Items.Add(item.Clone() as ItemInfo);
            }
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Items.Count);
                for (int i = 0; i < Items.Count; i++)
                {
                    Items[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteInt(ActivityID);
            }
            else
            {
                int ItemsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemsCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Items.Add(obj);
                }
                ActivityID = oByteArray.ReadInt();
            }
        }
		public ResNoticeSWAuctionOpen()
		{
			PacketID = 764;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服拍卖开启 创建者
    /// </summary>
    [Package(764)]
    public partial class ResNoticeSWAuctionOpenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSWAuctionOpen();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服拍卖出价信息
    /// </summary>
    public partial class ReqNoticeSWAuctionBidInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string NickName;
        /// <summary>
        /// 
        /// </summary>
        public uint Value;
        /// <summary>
        /// 
        /// </summary>
        public ulong Guid;

        public override Packet Clone()
        {
            ReqNoticeSWAuctionBidInfo pkg = new ReqNoticeSWAuctionBidInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NickName = NickName;
            pkg.Value = Value;
            pkg.Guid = Guid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUInt(Value);
                oByteArray.WriteUInt64(Guid);
            }
            else
            {
                NickName = oByteArray.ReadUTF();
                Value = oByteArray.ReadUInt();
                Guid = oByteArray.ReadUInt64();
            }
        }
		public ReqNoticeSWAuctionBidInfo()
		{
			PacketID = 765;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服拍卖出价信息 创建者
    /// </summary>
    [Package(765)]
    public partial class ReqNoticeSWAuctionBidInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSWAuctionBidInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服拍卖出价信息
    /// </summary>
    public partial class ResNoticeSWAuctionBidInfo: Packet 
    {
        /// <summary>
        /// 出价玩家名字
        /// </summary>
        public string NickName;
        /// <summary>
        /// 出价数值
        /// </summary>
        public uint Value;

        public override Packet Clone()
        {
            ResNoticeSWAuctionBidInfo pkg = new ResNoticeSWAuctionBidInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NickName = NickName;
            pkg.Value = Value;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUInt(Value);
            }
            else
            {
                NickName = oByteArray.ReadUTF();
                Value = oByteArray.ReadUInt();
            }
        }
		public ResNoticeSWAuctionBidInfo()
		{
			PacketID = 766;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服拍卖出价信息 创建者
    /// </summary>
    [Package(766)]
    public partial class ResNoticeSWAuctionBidInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSWAuctionBidInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服拍卖出价
    /// </summary>
    public partial class ReqSeviceWarAuctionBid: Packet 
    {
        /// <summary>
        /// 玩家出价数
        /// </summary>
        public uint BidMoney;

        public override Packet Clone()
        {
            ReqSeviceWarAuctionBid pkg = new ReqSeviceWarAuctionBid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BidMoney = BidMoney;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BidMoney);
            }
            else
            {
                BidMoney = oByteArray.ReadUInt();
            }
        }
		public ReqSeviceWarAuctionBid()
		{
			PacketID = 767;
		}
    }

    /// <summary>
    ///  [请求类] 跨服拍卖出价 创建者
    /// </summary>
    [Package(767)]
    public partial class ReqSeviceWarAuctionBidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSeviceWarAuctionBid();
        }
    }


    /// <summary>
    ///  [响应类]跨服拍卖出价
    /// </summary>
    public partial class ResSeviceWarAuctionBid: Packet 
    {
        /// <summary>
        /// 1钱不足2低于最高价3出价最高的是自己
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint BidMoney;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResSeviceWarAuctionBid pkg = new ResSeviceWarAuctionBid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.BidMoney = BidMoney;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(BidMoney);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                Result = oByteArray.ReadByte();
                BidMoney = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResSeviceWarAuctionBid()
		{
			PacketID = 768;
		}
    }

    /// <summary>
    ///  [响应类] 跨服拍卖出价 创建者
    /// </summary>
    [Package(768)]
    public partial class ResSeviceWarAuctionBidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSeviceWarAuctionBid();
        }
    }


    /// <summary>
    ///  [请求类]地图服通知世界服务更新机器人状态
    /// </summary>
    public partial class ReqUpdateRobotInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateRobotInfo pkg = new ReqUpdateRobotInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateRobotInfo()
		{
			PacketID = 769;
		}
    }

    /// <summary>
    ///  [请求类] 地图服通知世界服务更新机器人状态 创建者
    /// </summary>
    [Package(769)]
    public partial class ReqUpdateRobotInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRobotInfo();
        }
    }


    /// <summary>
    ///  [响应类]地图服通知世界服务更新机器人状态
    /// </summary>
    public partial class ResUpdateRobotInfo: Packet 
    {
        /// <summary>
        /// 机器人Guid
        /// </summary>
        public ulong RobotGuid;
        /// <summary>
        /// 机器人名字
        /// </summary>
        public string RobotName;
        /// <summary>
        /// 0增加机器人，1自然销毁机器人，2机器人死亡
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResUpdateRobotInfo pkg = new ResUpdateRobotInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RobotGuid = RobotGuid;
            pkg.RobotName = RobotName;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(RobotGuid);
                oByteArray.WriteUTF(RobotName);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                RobotGuid = oByteArray.ReadUInt64();
                RobotName = oByteArray.ReadUTF();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResUpdateRobotInfo()
		{
			PacketID = 770;
		}
    }

    /// <summary>
    ///  [响应类] 地图服通知世界服务更新机器人状态 创建者
    /// </summary>
    [Package(770)]
    public partial class ResUpdateRobotInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRobotInfo();
        }
    }


    /// <summary>
    ///  [请求类]领取手机验证奖励
    /// </summary>
    public partial class ReqTakePhoneVerificationAward: Packet 
    {
        /// <summary>
        /// 0手机验证,1实名验证
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqTakePhoneVerificationAward pkg = new ReqTakePhoneVerificationAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqTakePhoneVerificationAward()
		{
			PacketID = 771;
		}
    }

    /// <summary>
    ///  [请求类] 领取手机验证奖励 创建者
    /// </summary>
    [Package(771)]
    public partial class ReqTakePhoneVerificationAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakePhoneVerificationAward();
        }
    }


    /// <summary>
    ///  [响应类]领取手机验证奖励
    /// </summary>
    public partial class ResTakePhoneVerificationAward: Packet 
    {
        /// <summary>
        /// 0成功,1失败,2未验证,3已经领
        /// </summary>
        public uint Result;
        /// <summary>
        /// 0未验证,1已验证可以领取,2已领取
        /// </summary>
        public uint CurStatus;
        /// <summary>
        /// 0手机验证,1实名验证
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResTakePhoneVerificationAward pkg = new ResTakePhoneVerificationAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CurStatus = CurStatus;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(CurStatus);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                CurStatus = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResTakePhoneVerificationAward()
		{
			PacketID = 772;
		}
    }

    /// <summary>
    ///  [响应类] 领取手机验证奖励 创建者
    /// </summary>
    [Package(772)]
    public partial class ResTakePhoneVerificationAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakePhoneVerificationAward();
        }
    }


    /// <summary>
    ///  [请求类]请求开服时间
    /// </summary>
    public partial class ReqGetOpenDays: Packet 
    {

        public override Packet Clone()
        {
            ReqGetOpenDays pkg = new ReqGetOpenDays();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetOpenDays()
		{
			PacketID = 773;
		}
    }

    /// <summary>
    ///  [请求类] 请求开服时间 创建者
    /// </summary>
    [Package(773)]
    public partial class ReqGetOpenDaysCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetOpenDays();
        }
    }


    /// <summary>
    ///  [响应类]请求开服时间
    /// </summary>
    public partial class ResGetOpenDays: Packet 
    {
        /// <summary>
        /// 开服天数
        /// </summary>
        public uint OpenDays;

        public override Packet Clone()
        {
            ResGetOpenDays pkg = new ResGetOpenDays();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OpenDays = OpenDays;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(OpenDays);
            }
            else
            {
                OpenDays = oByteArray.ReadUInt();
            }
        }
		public ResGetOpenDays()
		{
			PacketID = 774;
		}
    }

    /// <summary>
    ///  [响应类] 请求开服时间 创建者
    /// </summary>
    [Package(774)]
    public partial class ResGetOpenDaysCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetOpenDays();
        }
    }


    /// <summary>
    ///  [请求类]活动排行榜信息
    /// </summary>
    public partial class ReqUpdateActivityRankInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityType;

        public override Packet Clone()
        {
            ReqUpdateActivityRankInfo pkg = new ReqUpdateActivityRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityType = ActivityType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityType);
            }
            else
            {
                ActivityType = oByteArray.ReadUInt();
            }
        }
		public ReqUpdateActivityRankInfo()
		{
			PacketID = 775;
		}
    }

    /// <summary>
    ///  [请求类] 活动排行榜信息 创建者
    /// </summary>
    [Package(775)]
    public partial class ReqUpdateActivityRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateActivityRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]活动排行榜信息
    /// </summary>
    public partial class ResUpdateActivityRankInfo: Packet 
    {
        /// <summary>
        /// 排行榜信息,按顺序
        /// </summary>
        public List<YYRankInfo> RankVec = new List<YYRankInfo>();
        /// <summary>
        /// 玩家积分
        /// </summary>
        public long PlayerPoint;
        /// <summary>
        /// 玩家排名
        /// </summary>
        public uint PlayerRank;
        /// <summary>
        /// 其他数据
        /// </summary>
        public List<uint> PlayerData = new List<uint>();
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint ActivityType;

        public override Packet Clone()
        {
            ResUpdateActivityRankInfo pkg = new ResUpdateActivityRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (YYRankInfo item in RankVec)
            {
                pkg.RankVec.Add(item.Clone() as YYRankInfo);
            }
            pkg.PlayerPoint = PlayerPoint;
            pkg.PlayerRank = PlayerRank;
            foreach (var item in PlayerData)
            {
                pkg.PlayerData.Add(item);
            }
            pkg.ActivityType = ActivityType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RankVec.Count);
                for (int i = 0; i < RankVec.Count; i++)
                {
                    RankVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteInt64(PlayerPoint);
                oByteArray.WriteUInt(PlayerRank);
                oByteArray.WriteUShort((ushort)PlayerData.Count);
                for (int i = 0; i < PlayerData.Count; i++)
                {
                    oByteArray.WriteUInt(PlayerData[i]);
                }
                oByteArray.WriteUInt(ActivityType);
            }
            else
            {
                int RankVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankVecCount; i++)
                {
                    YYRankInfo obj = new YYRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankVec.Add(obj);
                }
                PlayerPoint = oByteArray.ReadInt64();
                PlayerRank = oByteArray.ReadUInt();
                int PlayerDataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerDataCount; i++)
                {
                    PlayerData.Add(oByteArray.ReadUInt());
                }
                ActivityType = oByteArray.ReadUInt();
            }
        }
		public ResUpdateActivityRankInfo()
		{
			PacketID = 776;
		}
    }

    /// <summary>
    ///  [响应类] 活动排行榜信息 创建者
    /// </summary>
    [Package(776)]
    public partial class ResUpdateActivityRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateActivityRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知前端完成第一次系统
    /// </summary>
    public partial class ReqFinishFirstSystem: Packet 
    {

        public override Packet Clone()
        {
            ReqFinishFirstSystem pkg = new ReqFinishFirstSystem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFinishFirstSystem()
		{
			PacketID = 777;
		}
    }

    /// <summary>
    ///  [请求类] 通知前端完成第一次系统 创建者
    /// </summary>
    [Package(777)]
    public partial class ReqFinishFirstSystemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFinishFirstSystem();
        }
    }


    /// <summary>
    ///  [响应类]通知前端完成第一次系统
    /// </summary>
    public partial class ResFinishFirstSystem: Packet 
    {
        /// <summary>
        /// 系统ID
        /// </summary>
        public byte TID;

        public override Packet Clone()
        {
            ResFinishFirstSystem pkg = new ResFinishFirstSystem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(TID);
            }
            else
            {
                TID = oByteArray.ReadByte();
            }
        }
		public ResFinishFirstSystem()
		{
			PacketID = 778;
		}
    }

    /// <summary>
    ///  [响应类] 通知前端完成第一次系统 创建者
    /// </summary>
    [Package(778)]
    public partial class ResFinishFirstSystemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFinishFirstSystem();
        }
    }


    /// <summary>
    ///  [请求类]领取七日连续充值奖励
    /// </summary>
    public partial class ReqGetContinuityPayAward: Packet 
    {
        /// <summary>
        /// 领奖的TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqGetContinuityPayAward pkg = new ReqGetContinuityPayAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqGetContinuityPayAward()
		{
			PacketID = 779;
		}
    }

    /// <summary>
    ///  [请求类] 领取七日连续充值奖励 创建者
    /// </summary>
    [Package(779)]
    public partial class ReqGetContinuityPayAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetContinuityPayAward();
        }
    }


    /// <summary>
    ///  [响应类]领取七日连续充值奖励
    /// </summary>
    public partial class ResGetContinuityPayAward: Packet 
    {
        /// <summary>
        /// 领奖的TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 0-成功，1-TID不存在，2-充值的钱不够，3-开服时间未到，4-活动已经结束或未开启，5-已经领取过，6-前七天没有全部达成
        /// </summary>
        public uint Result;
        /// <summary>
        /// 今日可用于领奖的充值数
        /// </summary>
        public uint CurDayPayNum;

        public override Packet Clone()
        {
            ResGetContinuityPayAward pkg = new ResGetContinuityPayAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Result = Result;
            pkg.CurDayPayNum = CurDayPayNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(CurDayPayNum);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                CurDayPayNum = oByteArray.ReadUInt();
            }
        }
		public ResGetContinuityPayAward()
		{
			PacketID = 780;
		}
    }

    /// <summary>
    ///  [响应类] 领取七日连续充值奖励 创建者
    /// </summary>
    [Package(780)]
    public partial class ResGetContinuityPayAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetContinuityPayAward();
        }
    }


    /// <summary>
    ///  [请求类]服务端重新读取Template表
    /// </summary>
    public partial class ReqReloadTemplate: Packet 
    {

        public override Packet Clone()
        {
            ReqReloadTemplate pkg = new ReqReloadTemplate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqReloadTemplate()
		{
			PacketID = 781;
		}
    }

    /// <summary>
    ///  [请求类] 服务端重新读取Template表 创建者
    /// </summary>
    [Package(781)]
    public partial class ReqReloadTemplateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReloadTemplate();
        }
    }


    /// <summary>
    ///  [响应类]服务端重新读取Template表
    /// </summary>
    public partial class ResReloadTemplate: Packet 
    {

        public override Packet Clone()
        {
            ResReloadTemplate pkg = new ResReloadTemplate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResReloadTemplate()
		{
			PacketID = 782;
		}
    }

    /// <summary>
    ///  [响应类] 服务端重新读取Template表 创建者
    /// </summary>
    [Package(782)]
    public partial class ResReloadTemplateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReloadTemplate();
        }
    }


    /// <summary>
    ///  [请求类]更新物品组信息
    /// </summary>
    public partial class ReqUpdateItemGropInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemGropInfo pkg = new ReqUpdateItemGropInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemGropInfo()
		{
			PacketID = 783;
		}
    }

    /// <summary>
    ///  [请求类] 更新物品组信息 创建者
    /// </summary>
    [Package(783)]
    public partial class ReqUpdateItemGropInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemGropInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新物品组信息
    /// </summary>
    public partial class ResUpdateItemGropInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string ItemGropInfo;

        public override Packet Clone()
        {
            ResUpdateItemGropInfo pkg = new ResUpdateItemGropInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemGropInfo = ItemGropInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ItemGropInfo);
            }
            else
            {
                ItemGropInfo = oByteArray.ReadUTF();
            }
        }
		public ResUpdateItemGropInfo()
		{
			PacketID = 784;
		}
    }

    /// <summary>
    ///  [响应类] 更新物品组信息 创建者
    /// </summary>
    [Package(784)]
    public partial class ResUpdateItemGropInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemGropInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新投资信息
    /// </summary>
    public partial class ReqUpdateInvestmentInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateInvestmentInfo pkg = new ReqUpdateInvestmentInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateInvestmentInfo()
		{
			PacketID = 785;
		}
    }

    /// <summary>
    ///  [请求类] 更新投资信息 创建者
    /// </summary>
    [Package(785)]
    public partial class ReqUpdateInvestmentInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateInvestmentInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新投资信息
    /// </summary>
    public partial class ResUpdateInvestmentInfo: Packet 
    {
        /// <summary>
        /// 投资信息
        /// </summary>
        public string InvestmentInfo;

        public override Packet Clone()
        {
            ResUpdateInvestmentInfo pkg = new ResUpdateInvestmentInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.InvestmentInfo = InvestmentInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(InvestmentInfo);
            }
            else
            {
                InvestmentInfo = oByteArray.ReadUTF();
            }
        }
		public ResUpdateInvestmentInfo()
		{
			PacketID = 786;
		}
    }

    /// <summary>
    ///  [响应类] 更新投资信息 创建者
    /// </summary>
    [Package(786)]
    public partial class ResUpdateInvestmentInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateInvestmentInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新日常次数
    /// </summary>
    public partial class ReqUpdateDailyNum: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateDailyNum pkg = new ReqUpdateDailyNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateDailyNum()
		{
			PacketID = 787;
		}
    }

    /// <summary>
    ///  [请求类] 更新日常次数 创建者
    /// </summary>
    [Package(787)]
    public partial class ReqUpdateDailyNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateDailyNum();
        }
    }


    /// <summary>
    ///  [响应类]更新日常次数
    /// </summary>
    public partial class ResUpdateDailyNum: Packet 
    {
        /// <summary>
        /// 日常次数信息
        /// </summary>
        public string DailyNumInfo;
        /// <summary>
        /// 是否是跨天
        /// </summary>
        public bool IsChangeDay;

        public override Packet Clone()
        {
            ResUpdateDailyNum pkg = new ResUpdateDailyNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DailyNumInfo = DailyNumInfo;
            pkg.IsChangeDay = IsChangeDay;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(DailyNumInfo);
                oByteArray.WriteBoolean(IsChangeDay);
            }
            else
            {
                DailyNumInfo = oByteArray.ReadUTF();
                IsChangeDay = oByteArray.ReadBoolean();
            }
        }
		public ResUpdateDailyNum()
		{
			PacketID = 788;
		}
    }

    /// <summary>
    ///  [响应类] 更新日常次数 创建者
    /// </summary>
    [Package(788)]
    public partial class ResUpdateDailyNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateDailyNum();
        }
    }


    /// <summary>
    ///  [请求类]更新每日充值和七日充值信息
    /// </summary>
    public partial class ReqUpdatePayInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePayInfo pkg = new ReqUpdatePayInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePayInfo()
		{
			PacketID = 789;
		}
    }

    /// <summary>
    ///  [请求类] 更新每日充值和七日充值信息 创建者
    /// </summary>
    [Package(789)]
    public partial class ReqUpdatePayInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePayInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新每日充值和七日充值信息
    /// </summary>
    public partial class ResUpdatePayInfo: Packet 
    {
        /// <summary>
        /// 每日充值
        /// </summary>
        public string PayAwardInfo;
        /// <summary>
        /// 七日充值
        /// </summary>
        public string ContinuityRecharge;

        public override Packet Clone()
        {
            ResUpdatePayInfo pkg = new ResUpdatePayInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PayAwardInfo = PayAwardInfo;
            pkg.ContinuityRecharge = ContinuityRecharge;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(PayAwardInfo);
                oByteArray.WriteUTF(ContinuityRecharge);
            }
            else
            {
                PayAwardInfo = oByteArray.ReadUTF();
                ContinuityRecharge = oByteArray.ReadUTF();
            }
        }
		public ResUpdatePayInfo()
		{
			PacketID = 790;
		}
    }

    /// <summary>
    ///  [响应类] 更新每日充值和七日充值信息 创建者
    /// </summary>
    [Package(790)]
    public partial class ResUpdatePayInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePayInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新五气朝元面板信息
    /// </summary>
    public partial class ReqWQCYPlayerInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqWQCYPlayerInfo pkg = new ReqWQCYPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqWQCYPlayerInfo()
		{
			PacketID = 791;
		}
    }

    /// <summary>
    ///  [请求类] 更新五气朝元面板信息 创建者
    /// </summary>
    [Package(791)]
    public partial class ReqWQCYPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqWQCYPlayerInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新五气朝元面板信息
    /// </summary>
    public partial class ResWQCYPlayerInfo: Packet 
    {
        /// <summary>
        /// 活动中增加的经验
        /// </summary>
        public uint CurExp;
        /// <summary>
        /// 活动中增加的内功经验
        /// </summary>
        public uint CurSPExp;
        /// <summary>
        /// 活动中增加的绑定金币
        /// </summary>
        public uint CurBindCoin;
        /// <summary>
        /// 活动中增加的绑定元宝
        /// </summary>
        public uint CurBindGold;
        /// <summary>
        /// true是双倍，false不是双倍
        /// </summary>
        public bool IsDouble;

        public override Packet Clone()
        {
            ResWQCYPlayerInfo pkg = new ResWQCYPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurExp = CurExp;
            pkg.CurSPExp = CurSPExp;
            pkg.CurBindCoin = CurBindCoin;
            pkg.CurBindGold = CurBindGold;
            pkg.IsDouble = IsDouble;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurExp);
                oByteArray.WriteUInt(CurSPExp);
                oByteArray.WriteUInt(CurBindCoin);
                oByteArray.WriteUInt(CurBindGold);
                oByteArray.WriteBoolean(IsDouble);
            }
            else
            {
                CurExp = oByteArray.ReadUInt();
                CurSPExp = oByteArray.ReadUInt();
                CurBindCoin = oByteArray.ReadUInt();
                CurBindGold = oByteArray.ReadUInt();
                IsDouble = oByteArray.ReadBoolean();
            }
        }
		public ResWQCYPlayerInfo()
		{
			PacketID = 792;
		}
    }

    /// <summary>
    ///  [响应类] 更新五气朝元面板信息 创建者
    /// </summary>
    [Package(792)]
    public partial class ResWQCYPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResWQCYPlayerInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新五气朝元雕像公会信息
    /// </summary>
    public partial class ReqWQCYGuildInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqWQCYGuildInfo pkg = new ReqWQCYGuildInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqWQCYGuildInfo()
		{
			PacketID = 793;
		}
    }

    /// <summary>
    ///  [请求类] 更新五气朝元雕像公会信息 创建者
    /// </summary>
    [Package(793)]
    public partial class ReqWQCYGuildInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqWQCYGuildInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新五气朝元雕像公会信息
    /// </summary>
    public partial class ResWQCYGuildInfo: Packet 
    {
        /// <summary>
        /// 双倍雕像公会名
        /// </summary>
        public string DoubleGuildName;
        /// <summary>
        /// 经验雕像公会名
        /// </summary>
        public string ExpGuildName;
        /// <summary>
        /// 内功经验雕像公会名
        /// </summary>
        public string SpExpGuildName;
        /// <summary>
        /// 绑定金币公会名
        /// </summary>
        public string BindCoinGuildName;
        /// <summary>
        /// 绑定元宝公会名
        /// </summary>
        public string BindGoldGuildName;

        public override Packet Clone()
        {
            ResWQCYGuildInfo pkg = new ResWQCYGuildInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DoubleGuildName = DoubleGuildName;
            pkg.ExpGuildName = ExpGuildName;
            pkg.SpExpGuildName = SpExpGuildName;
            pkg.BindCoinGuildName = BindCoinGuildName;
            pkg.BindGoldGuildName = BindGoldGuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(DoubleGuildName);
                oByteArray.WriteUTF(ExpGuildName);
                oByteArray.WriteUTF(SpExpGuildName);
                oByteArray.WriteUTF(BindCoinGuildName);
                oByteArray.WriteUTF(BindGoldGuildName);
            }
            else
            {
                DoubleGuildName = oByteArray.ReadUTF();
                ExpGuildName = oByteArray.ReadUTF();
                SpExpGuildName = oByteArray.ReadUTF();
                BindCoinGuildName = oByteArray.ReadUTF();
                BindGoldGuildName = oByteArray.ReadUTF();
            }
        }
		public ResWQCYGuildInfo()
		{
			PacketID = 794;
		}
    }

    /// <summary>
    ///  [响应类] 更新五气朝元雕像公会信息 创建者
    /// </summary>
    [Package(794)]
    public partial class ResWQCYGuildInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResWQCYGuildInfo();
        }
    }


    /// <summary>
    ///  [请求类]改名字
    /// </summary>
    public partial class ReqChangeName: Packet 
    {
        /// <summary>
        /// 新名字
        /// </summary>
        public string NewName;
        /// <summary>
        /// 改名卡位置
        /// </summary>
        public uint ItemPos;
        /// <summary>
        /// 是否GM操作
        /// </summary>
        public bool IsGMOperate;

        public override Packet Clone()
        {
            ReqChangeName pkg = new ReqChangeName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NewName = NewName;
            pkg.ItemPos = ItemPos;
            pkg.IsGMOperate = IsGMOperate;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(NewName);
                oByteArray.WriteUInt(ItemPos);
                oByteArray.WriteBoolean(IsGMOperate);
            }
            else
            {
                NewName = oByteArray.ReadUTF();
                ItemPos = oByteArray.ReadUInt();
                IsGMOperate = oByteArray.ReadBoolean();
            }
        }
		public ReqChangeName()
		{
			PacketID = 795;
		}
    }

    /// <summary>
    ///  [请求类] 改名字 创建者
    /// </summary>
    [Package(795)]
    public partial class ReqChangeNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeName();
        }
    }


    /// <summary>
    ///  [响应类]改名字
    /// </summary>
    public partial class ResChangeName: Packet 
    {
        /// <summary>
        /// 0成功1名字重复2没物品3CD4太长
        /// </summary>
        public byte Result;
        /// <summary>
        /// 新名字
        /// </summary>
        public string NewName;
        /// <summary>
        /// 改名卡位置
        /// </summary>
        public uint ItemPos;
        /// <summary>
        /// 是否GM操作
        /// </summary>
        public bool IsGMOperate;

        public override Packet Clone()
        {
            ResChangeName pkg = new ResChangeName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.NewName = NewName;
            pkg.ItemPos = ItemPos;
            pkg.IsGMOperate = IsGMOperate;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUTF(NewName);
                oByteArray.WriteUInt(ItemPos);
                oByteArray.WriteBoolean(IsGMOperate);
            }
            else
            {
                Result = oByteArray.ReadByte();
                NewName = oByteArray.ReadUTF();
                ItemPos = oByteArray.ReadUInt();
                IsGMOperate = oByteArray.ReadBoolean();
            }
        }
		public ResChangeName()
		{
			PacketID = 796;
		}
    }

    /// <summary>
    ///  [响应类] 改名字 创建者
    /// </summary>
    [Package(796)]
    public partial class ResChangeNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeName();
        }
    }


    /// <summary>
    ///  [请求类]成长计划购买和领奖
    /// </summary>
    public partial class ReqGrowthPlan: Packet 
    {
        /// <summary>
        /// 0是购买,1是领取
        /// </summary>
        public uint Type;
        /// <summary>
        /// 想要领奖的TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqGrowthPlan pkg = new ReqGrowthPlan();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqGrowthPlan()
		{
			PacketID = 797;
		}
    }

    /// <summary>
    ///  [请求类] 成长计划购买和领奖 创建者
    /// </summary>
    [Package(797)]
    public partial class ReqGrowthPlanCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGrowthPlan();
        }
    }


    /// <summary>
    ///  [响应类]成长计划购买和领奖
    /// </summary>
    public partial class ResGrowthPlan: Packet 
    {
        /// <summary>
        /// 0购买,1领奖
        /// </summary>
        public uint Type;
        /// <summary>
        /// 0-成功,1-条件未达成,2-已经领取过,3-未购买,4-钱不足(购买的时候使用) 5-时间过了
        /// </summary>
        public uint Result;
        /// <summary>
        /// 领奖的TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResGrowthPlan pkg = new ResGrowthPlan();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResGrowthPlan()
		{
			PacketID = 798;
		}
    }

    /// <summary>
    ///  [响应类] 成长计划购买和领奖 创建者
    /// </summary>
    [Package(798)]
    public partial class ResGrowthPlanCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGrowthPlan();
        }
    }


    /// <summary>
    ///  [请求类]满血
    /// </summary>
    public partial class ReqFullHp: Packet 
    {

        public override Packet Clone()
        {
            ReqFullHp pkg = new ReqFullHp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFullHp()
		{
			PacketID = 799;
		}
    }

    /// <summary>
    ///  [请求类] 满血 创建者
    /// </summary>
    [Package(799)]
    public partial class ReqFullHpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFullHp();
        }
    }


    /// <summary>
    ///  [响应类]满血
    /// </summary>
    public partial class ResFullHp: Packet 
    {
        /// <summary>
        /// 0成功1地图不对2已经死了，给你退钱3已经死了不退钱4钱不足;
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResFullHp pkg = new ResFullHp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResFullHp()
		{
			PacketID = 800;
		}
    }

    /// <summary>
    ///  [响应类] 满血 创建者
    /// </summary>
    [Package(800)]
    public partial class ResFullHpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFullHp();
        }
    }


    /// <summary>
    ///  [请求类]更新限制物品使用次数
    /// </summary>
    public partial class ReqUpdateItemGroupTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemGroupTime pkg = new ReqUpdateItemGroupTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemGroupTime()
		{
			PacketID = 801;
		}
    }

    /// <summary>
    ///  [请求类] 更新限制物品使用次数 创建者
    /// </summary>
    [Package(801)]
    public partial class ReqUpdateItemGroupTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemGroupTime();
        }
    }


    /// <summary>
    ///  [响应类]更新限制物品使用次数
    /// </summary>
    public partial class ResUpdateItemGroupTime: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 
        /// </summary>
        public uint UseTime;

        public override Packet Clone()
        {
            ResUpdateItemGroupTime pkg = new ResUpdateItemGroupTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TmplID = TmplID;
            pkg.UseTime = UseTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(UseTime);
            }
            else
            {
                TmplID = oByteArray.ReadUInt();
                UseTime = oByteArray.ReadUInt();
            }
        }
		public ResUpdateItemGroupTime()
		{
			PacketID = 802;
		}
    }

    /// <summary>
    ///  [响应类] 更新限制物品使用次数 创建者
    /// </summary>
    [Package(802)]
    public partial class ResUpdateItemGroupTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemGroupTime();
        }
    }


    /// <summary>
    ///  [请求类]当怪物受伤时,服务端用与DPS统计
    /// </summary>
    public partial class ReqOnHurtMonster: Packet 
    {

        public override Packet Clone()
        {
            ReqOnHurtMonster pkg = new ReqOnHurtMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOnHurtMonster()
		{
			PacketID = 803;
		}
    }

    /// <summary>
    ///  [请求类] 当怪物受伤时,服务端用与DPS统计 创建者
    /// </summary>
    [Package(803)]
    public partial class ReqOnHurtMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOnHurtMonster();
        }
    }


    /// <summary>
    ///  [响应类]当怪物受伤时,服务端用与DPS统计
    /// </summary>
    public partial class ResOnHurtMonster: Packet 
    {
        /// <summary>
        /// 玩家Guid
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 伤害值
        /// </summary>
        public uint Hurt;
        /// <summary>
        /// 被打的怪物TID
        /// </summary>
        public uint MonsterTID;
        /// <summary>
        /// 剩余血量比率
        /// </summary>
        public float HPRatio;

        public override Packet Clone()
        {
            ResOnHurtMonster pkg = new ResOnHurtMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.Hurt = Hurt;
            pkg.MonsterTID = MonsterTID;
            pkg.HPRatio = HPRatio;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(Hurt);
                oByteArray.WriteUInt(MonsterTID);
                oByteArray.WriteFloat(HPRatio);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                Hurt = oByteArray.ReadUInt();
                MonsterTID = oByteArray.ReadUInt();
                HPRatio = oByteArray.ReadFloat();
            }
        }
		public ResOnHurtMonster()
		{
			PacketID = 804;
		}
    }

    /// <summary>
    ///  [响应类] 当怪物受伤时,服务端用与DPS统计 创建者
    /// </summary>
    [Package(804)]
    public partial class ResOnHurtMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOnHurtMonster();
        }
    }


    /// <summary>
    ///  [请求类]删除行会物品
    /// </summary>
    public partial class ReqDeleteGuildItem: Packet 
    {

        public override Packet Clone()
        {
            ReqDeleteGuildItem pkg = new ReqDeleteGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDeleteGuildItem()
		{
			PacketID = 805;
		}
    }

    /// <summary>
    ///  [请求类] 删除行会物品 创建者
    /// </summary>
    [Package(805)]
    public partial class ReqDeleteGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDeleteGuildItem();
        }
    }


    /// <summary>
    ///  [响应类]删除行会物品
    /// </summary>
    public partial class ResDeleteGuildItem: Packet 
    {
        /// <summary>
        /// 删除列表
        /// </summary>
        public List<ObjectGuidInfo> ItemList = new List<ObjectGuidInfo>();
        /// <summary>
        /// 0直接删除1是兑换2是回收删除
        /// </summary>
        public byte Type;
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResDeleteGuildItem pkg = new ResDeleteGuildItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ObjectGuidInfo item in ItemList)
            {
                pkg.ItemList.Add(item.Clone() as ObjectGuidInfo);
            }
            pkg.Type = Type;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ItemList.Count);
                for (int i = 0; i < ItemList.Count; i++)
                {
                    ItemList[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteByte(Type);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                int ItemListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemListCount; i++)
                {
                    ObjectGuidInfo obj = new ObjectGuidInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemList.Add(obj);
                }
                Type = oByteArray.ReadByte();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResDeleteGuildItem()
		{
			PacketID = 806;
		}
    }

    /// <summary>
    ///  [响应类] 删除行会物品 创建者
    /// </summary>
    [Package(806)]
    public partial class ResDeleteGuildItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDeleteGuildItem();
        }
    }


    /// <summary>
    ///  [请求类]添加或者更新特殊
    /// </summary>
    public partial class ReqAddSpecialEffect: Packet 
    {

        public override Packet Clone()
        {
            ReqAddSpecialEffect pkg = new ReqAddSpecialEffect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddSpecialEffect()
		{
			PacketID = 807;
		}
    }

    /// <summary>
    ///  [请求类] 添加或者更新特殊 创建者
    /// </summary>
    [Package(807)]
    public partial class ReqAddSpecialEffectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddSpecialEffect();
        }
    }


    /// <summary>
    ///  [响应类]添加或者更新特殊
    /// </summary>
    public partial class ResAddSpecialEffect: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo TargetPlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public EffectsInfo EffectInfo = new EffectsInfo();
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo SourcePlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResAddSpecialEffect pkg = new ResAddSpecialEffect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetPlayerID = TargetPlayerID.Clone() as ObjectGuidInfo;
            pkg.EffectInfo = EffectInfo.Clone() as EffectsInfo;
            pkg.SourcePlayerID = SourcePlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TargetPlayerID.Serializtion(oByteArray, bSerialize);
                EffectInfo.Serializtion(oByteArray, bSerialize);
                SourcePlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                TargetPlayerID.Serializtion(oByteArray, bSerialize);
                EffectInfo.Serializtion(oByteArray, bSerialize);
                SourcePlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddSpecialEffect()
		{
			PacketID = 808;
		}
    }

    /// <summary>
    ///  [响应类] 添加或者更新特殊 创建者
    /// </summary>
    [Package(808)]
    public partial class ResAddSpecialEffectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddSpecialEffect();
        }
    }


    /// <summary>
    ///  [请求类]移除特殊效果
    /// </summary>
    public partial class ReqRemoveSpecialEffects: Packet 
    {

        public override Packet Clone()
        {
            ReqRemoveSpecialEffects pkg = new ReqRemoveSpecialEffects();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRemoveSpecialEffects()
		{
			PacketID = 809;
		}
    }

    /// <summary>
    ///  [请求类] 移除特殊效果 创建者
    /// </summary>
    [Package(809)]
    public partial class ReqRemoveSpecialEffectsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveSpecialEffects();
        }
    }


    /// <summary>
    ///  [响应类]移除特殊效果
    /// </summary>
    public partial class ResRemoveSpecialEffects: Packet 
    {
        /// <summary>
        /// 玩家三个ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 特效ID
        /// </summary>
        public uint EffectsID;

        public override Packet Clone()
        {
            ResRemoveSpecialEffects pkg = new ResRemoveSpecialEffects();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.EffectsID = EffectsID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(EffectsID);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                EffectsID = oByteArray.ReadUInt();
            }
        }
		public ResRemoveSpecialEffects()
		{
			PacketID = 810;
		}
    }

    /// <summary>
    ///  [响应类] 移除特殊效果 创建者
    /// </summary>
    [Package(810)]
    public partial class ResRemoveSpecialEffectsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveSpecialEffects();
        }
    }


    /// <summary>
    ///  [请求类]修改特殊效果CD时间
    /// </summary>
    public partial class ReqUpdateSpecialEffectsCD: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateSpecialEffectsCD pkg = new ReqUpdateSpecialEffectsCD();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateSpecialEffectsCD()
		{
			PacketID = 811;
		}
    }

    /// <summary>
    ///  [请求类] 修改特殊效果CD时间 创建者
    /// </summary>
    [Package(811)]
    public partial class ReqUpdateSpecialEffectsCDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateSpecialEffectsCD();
        }
    }


    /// <summary>
    ///  [响应类]修改特殊效果CD时间
    /// </summary>
    public partial class ResUpdateSpecialEffectsCD: Packet 
    {
        /// <summary>
        /// 特效ID
        /// </summary>
        public uint EffectsID;
        /// <summary>
        /// CD时间
        /// </summary>
        public uint CDTime;

        public override Packet Clone()
        {
            ResUpdateSpecialEffectsCD pkg = new ResUpdateSpecialEffectsCD();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EffectsID = EffectsID;
            pkg.CDTime = CDTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EffectsID);
                oByteArray.WriteUInt(CDTime);
            }
            else
            {
                EffectsID = oByteArray.ReadUInt();
                CDTime = oByteArray.ReadUInt();
            }
        }
		public ResUpdateSpecialEffectsCD()
		{
			PacketID = 812;
		}
    }

    /// <summary>
    ///  [响应类] 修改特殊效果CD时间 创建者
    /// </summary>
    [Package(812)]
    public partial class ResUpdateSpecialEffectsCDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateSpecialEffectsCD();
        }
    }


    /// <summary>
    ///  [请求类]服务端查找怪物位置
    /// </summary>
    public partial class ReqServerFindMonster: Packet 
    {

        public override Packet Clone()
        {
            ReqServerFindMonster pkg = new ReqServerFindMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqServerFindMonster()
		{
			PacketID = 813;
		}
    }

    /// <summary>
    ///  [请求类] 服务端查找怪物位置 创建者
    /// </summary>
    [Package(813)]
    public partial class ReqServerFindMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqServerFindMonster();
        }
    }


    /// <summary>
    ///  [响应类]服务端查找怪物位置
    /// </summary>
    public partial class ResServerFindMonster: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public uint MonsterID;

        public override Packet Clone()
        {
            ResServerFindMonster pkg = new ResServerFindMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MonsterID = MonsterID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MonsterID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MonsterID = oByteArray.ReadUInt();
            }
        }
		public ResServerFindMonster()
		{
			PacketID = 814;
		}
    }

    /// <summary>
    ///  [响应类] 服务端查找怪物位置 创建者
    /// </summary>
    [Package(814)]
    public partial class ResServerFindMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResServerFindMonster();
        }
    }


    /// <summary>
    ///  [请求类]获取威望前三玩家的装备外观
    /// </summary>
    public partial class ReqGetFamePlayerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ulong> PlayerInfo = new List<ulong>();

        public override Packet Clone()
        {
            ReqGetFamePlayerInfo pkg = new ReqGetFamePlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in PlayerInfo)
            {
                pkg.PlayerInfo.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < PlayerInfo.Count; i++)
                {
                      oByteArray.WriteUInt64(PlayerInfo[i]);
                }
            }
            else
            {
                int PlayerInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerInfoCount; i++)
                {
                    PlayerInfo.Add(oByteArray.ReadUInt64());
                }
            }
        }
		public ReqGetFamePlayerInfo()
		{
			PacketID = 815;
		}
    }

    /// <summary>
    ///  [请求类] 获取威望前三玩家的装备外观 创建者
    /// </summary>
    [Package(815)]
    public partial class ReqGetFamePlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetFamePlayerInfo();
        }
    }


    /// <summary>
    ///  [响应类]获取威望前三玩家的装备外观
    /// </summary>
    public partial class ResGetFamePlayerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ShabakGuildInfo> Info = new List<ShabakGuildInfo>();

        public override Packet Clone()
        {
            ResGetFamePlayerInfo pkg = new ResGetFamePlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ShabakGuildInfo item in Info)
            {
                pkg.Info.Add(item.Clone() as ShabakGuildInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Info.Count);
                for (int i = 0; i < Info.Count; i++)
                {
                    Info[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    ShabakGuildInfo obj = new ShabakGuildInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Info.Add(obj);
                }
            }
        }
		public ResGetFamePlayerInfo()
		{
			PacketID = 816;
		}
    }

    /// <summary>
    ///  [响应类] 获取威望前三玩家的装备外观 创建者
    /// </summary>
    [Package(816)]
    public partial class ResGetFamePlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetFamePlayerInfo();
        }
    }


    /// <summary>
    ///  [请求类]创建一个物品
    /// </summary>
    public partial class ReqSpawnItem: Packet 
    {

        public override Packet Clone()
        {
            ReqSpawnItem pkg = new ReqSpawnItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSpawnItem()
		{
			PacketID = 817;
		}
    }

    /// <summary>
    ///  [请求类] 创建一个物品 创建者
    /// </summary>
    [Package(817)]
    public partial class ReqSpawnItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnItem();
        }
    }


    /// <summary>
    ///  [响应类]创建一个物品
    /// </summary>
    public partial class ResSpawnItem: Packet 
    {
        /// <summary>
        /// 模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// Y坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 回收时间
        /// </summary>
        public uint Time;
        /// <summary>
        /// 数量(限可堆叠道具)
        /// </summary>
        public uint Num;
        /// <summary>
        /// 
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 冻结时间
        /// </summary>
        public uint FreezeTime;

        public override Packet Clone()
        {
            ResSpawnItem pkg = new ResSpawnItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TmplID = TmplID;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Time = Time;
            pkg.Num = Num;
            pkg.MapGuid = MapGuid;
            pkg.FreezeTime = FreezeTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(Time);
                oByteArray.WriteUInt(Num);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(FreezeTime);
            }
            else
            {
                TmplID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                Time = oByteArray.ReadUInt();
                Num = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                FreezeTime = oByteArray.ReadUInt();
            }
        }
		public ResSpawnItem()
		{
			PacketID = 818;
		}
    }

    /// <summary>
    ///  [响应类] 创建一个物品 创建者
    /// </summary>
    [Package(818)]
    public partial class ResSpawnItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnItem();
        }
    }


    /// <summary>
    ///  [请求类]更新活跃度数据
    /// </summary>
    public partial class ReqUpdateLivenessData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLivenessData pkg = new ReqUpdateLivenessData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLivenessData()
		{
			PacketID = 819;
		}
    }

    /// <summary>
    ///  [请求类] 更新活跃度数据 创建者
    /// </summary>
    [Package(819)]
    public partial class ReqUpdateLivenessDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLivenessData();
        }
    }


    /// <summary>
    ///  [响应类]更新活跃度数据
    /// </summary>
    public partial class ResUpdateLivenessData: Packet 
    {
        /// <summary>
        /// 活跃信息
        /// </summary>
        public LivenessInfo Info = new LivenessInfo();

        public override Packet Clone()
        {
            ResUpdateLivenessData pkg = new ResUpdateLivenessData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Info = Info.Clone() as LivenessInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Info.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Info.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateLivenessData()
		{
			PacketID = 820;
		}
    }

    /// <summary>
    ///  [响应类] 更新活跃度数据 创建者
    /// </summary>
    [Package(820)]
    public partial class ResUpdateLivenessDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLivenessData();
        }
    }


    /// <summary>
    ///  [请求类]领取活跃度奖励
    /// </summary>
    public partial class ReqTakeLivenessAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqTakeLivenessAward pkg = new ReqTakeLivenessAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqTakeLivenessAward()
		{
			PacketID = 821;
		}
    }

    /// <summary>
    ///  [请求类] 领取活跃度奖励 创建者
    /// </summary>
    [Package(821)]
    public partial class ReqTakeLivenessAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeLivenessAward();
        }
    }


    /// <summary>
    ///  [响应类]领取活跃度奖励
    /// </summary>
    public partial class ResTakeLivenessAward: Packet 
    {
        /// <summary>
        /// 0成功1活跃度不足2包满3领取过了
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResTakeLivenessAward pkg = new ResTakeLivenessAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResTakeLivenessAward()
		{
			PacketID = 822;
		}
    }

    /// <summary>
    ///  [响应类] 领取活跃度奖励 创建者
    /// </summary>
    [Package(822)]
    public partial class ResTakeLivenessAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeLivenessAward();
        }
    }


    /// <summary>
    ///  [请求类]领取经验玉经验
    /// </summary>
    public partial class ReqTakeExpJadeExp: Packet 
    {
        /// <summary>
        /// 领取的物品位置
        /// </summary>
        public uint ItemPos;
        /// <summary>
        /// 领取的倍数类型
        /// </summary>
        public uint TakeExpType;

        public override Packet Clone()
        {
            ReqTakeExpJadeExp pkg = new ReqTakeExpJadeExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            pkg.TakeExpType = TakeExpType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
                oByteArray.WriteUInt(TakeExpType);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
                TakeExpType = oByteArray.ReadUInt();
            }
        }
		public ReqTakeExpJadeExp()
		{
			PacketID = 823;
		}
    }

    /// <summary>
    ///  [请求类] 领取经验玉经验 创建者
    /// </summary>
    [Package(823)]
    public partial class ReqTakeExpJadeExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeExpJadeExp();
        }
    }


    /// <summary>
    ///  [响应类]领取经验玉经验
    /// </summary>
    public partial class ResTakeExpJadeExp: Packet 
    {
        /// <summary>
        /// 第二条免费领取的次数
        /// </summary>
        public uint DoubleTakeExpJadeTimes;
        /// <summary>
        /// 0-成功,1-没有经验玉,2-钱不足
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResTakeExpJadeExp pkg = new ResTakeExpJadeExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DoubleTakeExpJadeTimes = DoubleTakeExpJadeTimes;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DoubleTakeExpJadeTimes);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                DoubleTakeExpJadeTimes = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResTakeExpJadeExp()
		{
			PacketID = 824;
		}
    }

    /// <summary>
    ///  [响应类] 领取经验玉经验 创建者
    /// </summary>
    [Package(824)]
    public partial class ResTakeExpJadeExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeExpJadeExp();
        }
    }


    /// <summary>
    ///  [请求类]升级行会等级
    /// </summary>
    public partial class ReqUpGradeGuildLv: Packet 
    {

        public override Packet Clone()
        {
            ReqUpGradeGuildLv pkg = new ReqUpGradeGuildLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpGradeGuildLv()
		{
			PacketID = 825;
		}
    }

    /// <summary>
    ///  [请求类] 升级行会等级 创建者
    /// </summary>
    [Package(825)]
    public partial class ReqUpGradeGuildLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpGradeGuildLv();
        }
    }


    /// <summary>
    ///  [响应类]升级行会等级
    /// </summary>
    public partial class ResUpGradeGuildLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResUpGradeGuildLv pkg = new ResUpGradeGuildLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResUpGradeGuildLv()
		{
			PacketID = 826;
		}
    }

    /// <summary>
    ///  [响应类] 升级行会等级 创建者
    /// </summary>
    [Package(826)]
    public partial class ResUpGradeGuildLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpGradeGuildLv();
        }
    }


    /// <summary>
    ///  [请求类]弹劾会长
    /// </summary>
    public partial class ReqImpeachmentGuildLeader: Packet 
    {

        public override Packet Clone()
        {
            ReqImpeachmentGuildLeader pkg = new ReqImpeachmentGuildLeader();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqImpeachmentGuildLeader()
		{
			PacketID = 827;
		}
    }

    /// <summary>
    ///  [请求类] 弹劾会长 创建者
    /// </summary>
    [Package(827)]
    public partial class ReqImpeachmentGuildLeaderCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqImpeachmentGuildLeader();
        }
    }


    /// <summary>
    ///  [响应类]弹劾会长
    /// </summary>
    public partial class ResImpeachmentGuildLeader: Packet 
    {
        /// <summary>
        /// 0成功1时间不足2别人弹劾了
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResImpeachmentGuildLeader pkg = new ResImpeachmentGuildLeader();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResImpeachmentGuildLeader()
		{
			PacketID = 828;
		}
    }

    /// <summary>
    ///  [响应类] 弹劾会长 创建者
    /// </summary>
    [Package(828)]
    public partial class ResImpeachmentGuildLeaderCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResImpeachmentGuildLeader();
        }
    }


    /// <summary>
    ///  [请求类]防沉迷系统通知
    /// </summary>
    public partial class ReqAntiAddiction: Packet 
    {

        public override Packet Clone()
        {
            ReqAntiAddiction pkg = new ReqAntiAddiction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAntiAddiction()
		{
			PacketID = 829;
		}
    }

    /// <summary>
    ///  [请求类] 防沉迷系统通知 创建者
    /// </summary>
    [Package(829)]
    public partial class ReqAntiAddictionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAntiAddiction();
        }
    }


    /// <summary>
    ///  [响应类]防沉迷系统通知
    /// </summary>
    public partial class ResAntiAddiction: Packet 
    {
        /// <summary>
        /// 当前状态，0-正常，1-半收益，2-0收益
        /// </summary>
        public uint CurState;
        /// <summary>
        /// 目前累计在线时间
        /// </summary>
        public uint CumulativeOnLineTime;

        public override Packet Clone()
        {
            ResAntiAddiction pkg = new ResAntiAddiction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurState = CurState;
            pkg.CumulativeOnLineTime = CumulativeOnLineTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurState);
                oByteArray.WriteUInt(CumulativeOnLineTime);
            }
            else
            {
                CurState = oByteArray.ReadUInt();
                CumulativeOnLineTime = oByteArray.ReadUInt();
            }
        }
		public ResAntiAddiction()
		{
			PacketID = 830;
		}
    }

    /// <summary>
    ///  [响应类] 防沉迷系统通知 创建者
    /// </summary>
    [Package(830)]
    public partial class ResAntiAddictionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAntiAddiction();
        }
    }


    /// <summary>
    ///  [请求类]更新防沉迷系统开启状态
    /// </summary>
    public partial class ReqUpdateAntiAddiction: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAntiAddiction pkg = new ReqUpdateAntiAddiction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAntiAddiction()
		{
			PacketID = 831;
		}
    }

    /// <summary>
    ///  [请求类] 更新防沉迷系统开启状态 创建者
    /// </summary>
    [Package(831)]
    public partial class ReqUpdateAntiAddictionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAntiAddiction();
        }
    }


    /// <summary>
    ///  [响应类]更新防沉迷系统开启状态
    /// </summary>
    public partial class ResUpdateAntiAddiction: Packet 
    {
        /// <summary>
        /// 服务器防沉迷系统开启状态，0关闭，1开启
        /// </summary>
        public byte AntiAddiction;
        /// <summary>
        /// 0-1-2
        /// </summary>
        public byte Indulgence;

        public override Packet Clone()
        {
            ResUpdateAntiAddiction pkg = new ResUpdateAntiAddiction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AntiAddiction = AntiAddiction;
            pkg.Indulgence = Indulgence;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(AntiAddiction);
                oByteArray.WriteByte(Indulgence);
            }
            else
            {
                AntiAddiction = oByteArray.ReadByte();
                Indulgence = oByteArray.ReadByte();
            }
        }
		public ResUpdateAntiAddiction()
		{
			PacketID = 832;
		}
    }

    /// <summary>
    ///  [响应类] 更新防沉迷系统开启状态 创建者
    /// </summary>
    [Package(832)]
    public partial class ResUpdateAntiAddictionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAntiAddiction();
        }
    }


    /// <summary>
    ///  [请求类]通知行会成员列表
    /// </summary>
    public partial class ReqNoticeGuildMemberList: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeGuildMemberList pkg = new ReqNoticeGuildMemberList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeGuildMemberList()
		{
			PacketID = 833;
		}
    }

    /// <summary>
    ///  [请求类] 通知行会成员列表 创建者
    /// </summary>
    [Package(833)]
    public partial class ReqNoticeGuildMemberListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeGuildMemberList();
        }
    }


    /// <summary>
    ///  [响应类]通知行会成员列表
    /// </summary>
    public partial class ResNoticeGuildMemberList: Packet 
    {
        /// <summary>
        /// 行会成员列表
        /// </summary>
        public List<GuildmemberInfo> GuildmemberList = new List<GuildmemberInfo>();

        public override Packet Clone()
        {
            ResNoticeGuildMemberList pkg = new ResNoticeGuildMemberList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GuildmemberInfo item in GuildmemberList)
            {
                pkg.GuildmemberList.Add(item.Clone() as GuildmemberInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)GuildmemberList.Count);
                for (int i = 0; i < GuildmemberList.Count; i++)
                {
                    GuildmemberList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int GuildmemberListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < GuildmemberListCount; i++)
                {
                    GuildmemberInfo obj = new GuildmemberInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    GuildmemberList.Add(obj);
                }
            }
        }
		public ResNoticeGuildMemberList()
		{
			PacketID = 834;
		}
    }

    /// <summary>
    ///  [响应类] 通知行会成员列表 创建者
    /// </summary>
    [Package(834)]
    public partial class ResNoticeGuildMemberListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeGuildMemberList();
        }
    }


    /// <summary>
    ///  [请求类]增加技能熟练度(返回值也用于更新技能熟练度)
    /// </summary>
    public partial class ReqAddSkillExp: Packet 
    {
        /// <summary>
        /// 想要学习的技能ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 0:普通技能，1：怒气技能
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqAddSkillExp pkg = new ReqAddSkillExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillID = SkillID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                SkillID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqAddSkillExp()
		{
			PacketID = 835;
		}
    }

    /// <summary>
    ///  [请求类] 增加技能熟练度(返回值也用于更新技能熟练度) 创建者
    /// </summary>
    [Package(835)]
    public partial class ReqAddSkillExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddSkillExp();
        }
    }


    /// <summary>
    ///  [响应类]增加技能熟练度(返回值也用于更新技能熟练度)
    /// </summary>
    public partial class ResAddSkillExp: Packet 
    {
        /// <summary>
        /// 技能ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 当前经验值
        /// </summary>
        public uint CurExp;
        /// <summary>
        /// 0-成功,1-技能不存在,2-已经满级,5-没钱,6-道具不足
        /// </summary>
        public uint Result;
        /// <summary>
        /// 0:普通技能，1：怒气技能
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResAddSkillExp pkg = new ResAddSkillExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillID = SkillID;
            pkg.CurExp = CurExp;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteUInt(CurExp);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                SkillID = oByteArray.ReadUInt();
                CurExp = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResAddSkillExp()
		{
			PacketID = 836;
		}
    }

    /// <summary>
    ///  [响应类] 增加技能熟练度(返回值也用于更新技能熟练度) 创建者
    /// </summary>
    [Package(836)]
    public partial class ResAddSkillExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddSkillExp();
        }
    }


    /// <summary>
    ///  [请求类]行会捐钱
    /// </summary>
    public partial class ReqGuildDonateMoney: Packet 
    {
        /// <summary>
        /// 1是大2是小
        /// </summary>
        public byte Type;
        /// <summary>
        /// 数量
        /// </summary>
        public uint Value;

        public override Packet Clone()
        {
            ReqGuildDonateMoney pkg = new ReqGuildDonateMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Value = Value;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(Value);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Value = oByteArray.ReadUInt();
            }
        }
		public ReqGuildDonateMoney()
		{
			PacketID = 837;
		}
    }

    /// <summary>
    ///  [请求类] 行会捐钱 创建者
    /// </summary>
    [Package(837)]
    public partial class ReqGuildDonateMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGuildDonateMoney();
        }
    }


    /// <summary>
    ///  [响应类]行会捐钱
    /// </summary>
    public partial class ResGuildDonateMoney: Packet 
    {
        /// <summary>
        /// 0成功1钱不足
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResGuildDonateMoney pkg = new ResGuildDonateMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResGuildDonateMoney()
		{
			PacketID = 838;
		}
    }

    /// <summary>
    ///  [响应类] 行会捐钱 创建者
    /// </summary>
    [Package(838)]
    public partial class ResGuildDonateMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGuildDonateMoney();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服行会战信息
    /// </summary>
    public partial class ReqNoticeGuildWarInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeGuildWarInfo pkg = new ReqNoticeGuildWarInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeGuildWarInfo()
		{
			PacketID = 839;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服行会战信息 创建者
    /// </summary>
    [Package(839)]
    public partial class ReqNoticeGuildWarInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeGuildWarInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服行会战信息
    /// </summary>
    public partial class ResNoticeGuildWarInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<string> GuildList = new List<string>();
        /// <summary>
        /// 
        /// </summary>
        public List<uint> Time = new List<uint>();
        /// <summary>
        /// 
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public string GuildGuidstr;

        public override Packet Clone()
        {
            ResNoticeGuildWarInfo pkg = new ResNoticeGuildWarInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in GuildList)
            {
                pkg.GuildList.Add(item);
            }
            foreach (var item in Time)
            {
                pkg.Time.Add(item);
            }
            pkg.Type = Type;
            pkg.GuildGuidstr = GuildGuidstr;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)GuildList.Count);
                for (int i = 0; i < GuildList.Count; i++)
                {
                    oByteArray.WriteUTF(GuildList[i]);
                }
                oByteArray.WriteUShort((ushort)Time.Count);
                for (int i = 0; i < Time.Count; i++)
                {
                    oByteArray.WriteUInt(Time[i]);
                }
                oByteArray.WriteByte(Type);
                oByteArray.WriteUTF(GuildGuidstr);
            }
            else
            {
                int GuildListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < GuildListCount; i++)
                {
                    GuildList.Add(oByteArray.ReadUTF());
                }
                int TimeCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TimeCount; i++)
                {
                    Time.Add(oByteArray.ReadUInt());
                }
                Type = oByteArray.ReadByte();
                GuildGuidstr = oByteArray.ReadUTF();
            }
        }
		public ResNoticeGuildWarInfo()
		{
			PacketID = 840;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服行会战信息 创建者
    /// </summary>
    [Package(840)]
    public partial class ResNoticeGuildWarInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeGuildWarInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新行会申请玩家信息
    /// </summary>
    public partial class ReqUpdateGuildApplyPlayerInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateGuildApplyPlayerInfo pkg = new ReqUpdateGuildApplyPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateGuildApplyPlayerInfo()
		{
			PacketID = 841;
		}
    }

    /// <summary>
    ///  [请求类] 更新行会申请玩家信息 创建者
    /// </summary>
    [Package(841)]
    public partial class ReqUpdateGuildApplyPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateGuildApplyPlayerInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新行会申请玩家信息
    /// </summary>
    public partial class ResUpdateGuildApplyPlayerInfo: Packet 
    {
        /// <summary>
        /// 玩家信息
        /// </summary>
        public GuildmemberInfo ApplayPlayerInfo = new GuildmemberInfo();

        public override Packet Clone()
        {
            ResUpdateGuildApplyPlayerInfo pkg = new ResUpdateGuildApplyPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ApplayPlayerInfo = ApplayPlayerInfo.Clone() as GuildmemberInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ApplayPlayerInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ApplayPlayerInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateGuildApplyPlayerInfo()
		{
			PacketID = 842;
		}
    }

    /// <summary>
    ///  [响应类] 更新行会申请玩家信息 创建者
    /// </summary>
    [Package(842)]
    public partial class ResUpdateGuildApplyPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateGuildApplyPlayerInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家行会红包列表
    /// </summary>
    public partial class ReqGetGuildRedBagList: Packet 
    {

        public override Packet Clone()
        {
            ReqGetGuildRedBagList pkg = new ReqGetGuildRedBagList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetGuildRedBagList()
		{
			PacketID = 843;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家行会红包列表 创建者
    /// </summary>
    [Package(843)]
    public partial class ReqGetGuildRedBagListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetGuildRedBagList();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家行会红包列表
    /// </summary>
    public partial class ResGetGuildRedBagList: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<GuildRedBagInfo> RedBagList = new List<GuildRedBagInfo>();

        public override Packet Clone()
        {
            ResGetGuildRedBagList pkg = new ResGetGuildRedBagList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GuildRedBagInfo item in RedBagList)
            {
                pkg.RedBagList.Add(item.Clone() as GuildRedBagInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RedBagList.Count);
                for (int i = 0; i < RedBagList.Count; i++)
                {
                    RedBagList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int RedBagListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RedBagListCount; i++)
                {
                    GuildRedBagInfo obj = new GuildRedBagInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    RedBagList.Add(obj);
                }
            }
        }
		public ResGetGuildRedBagList()
		{
			PacketID = 844;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家行会红包列表 创建者
    /// </summary>
    [Package(844)]
    public partial class ResGetGuildRedBagListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetGuildRedBagList();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家移除红包
    /// </summary>
    public partial class ReqRemoveRedBag: Packet 
    {

        public override Packet Clone()
        {
            ReqRemoveRedBag pkg = new ReqRemoveRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRemoveRedBag()
		{
			PacketID = 845;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家移除红包 创建者
    /// </summary>
    [Package(845)]
    public partial class ReqRemoveRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveRedBag();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家移除红包
    /// </summary>
    public partial class ResRemoveRedBag: Packet 
    {
        /// <summary>
        /// 红包ID
        /// </summary>
        public uint RedBagID;

        public override Packet Clone()
        {
            ResRemoveRedBag pkg = new ResRemoveRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RedBagID = RedBagID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(RedBagID);
            }
            else
            {
                RedBagID = oByteArray.ReadUInt();
            }
        }
		public ResRemoveRedBag()
		{
			PacketID = 846;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家移除红包 创建者
    /// </summary>
    [Package(846)]
    public partial class ResRemoveRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveRedBag();
        }
    }


    /// <summary>
    ///  [请求类]更新限时任务状态
    /// </summary>
    public partial class ReqUpdateLimiteTask: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLimiteTask pkg = new ReqUpdateLimiteTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLimiteTask()
		{
			PacketID = 847;
		}
    }

    /// <summary>
    ///  [请求类] 更新限时任务状态 创建者
    /// </summary>
    [Package(847)]
    public partial class ReqUpdateLimiteTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLimiteTask();
        }
    }


    /// <summary>
    ///  [响应类]更新限时任务状态
    /// </summary>
    public partial class ResUpdateLimiteTask: Packet 
    {
        /// <summary>
        /// 任务ID
        /// </summary>
        public uint TaskTID;
        /// <summary>
        /// 已完成次数
        /// </summary>
        public uint Times;

        public override Packet Clone()
        {
            ResUpdateLimiteTask pkg = new ResUpdateLimiteTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskTID = TaskTID;
            pkg.Times = Times;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskTID);
                oByteArray.WriteUInt(Times);
            }
            else
            {
                TaskTID = oByteArray.ReadUInt();
                Times = oByteArray.ReadUInt();
            }
        }
		public ResUpdateLimiteTask()
		{
			PacketID = 848;
		}
    }

    /// <summary>
    ///  [响应类] 更新限时任务状态 创建者
    /// </summary>
    [Package(848)]
    public partial class ResUpdateLimiteTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLimiteTask();
        }
    }


    /// <summary>
    ///  [请求类]领取限时任务奖励
    /// </summary>
    public partial class ReqTakeLimiteTaskAward: Packet 
    {
        /// <summary>
        /// 限时任务ID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqTakeLimiteTaskAward pkg = new ReqTakeLimiteTaskAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqTakeLimiteTaskAward()
		{
			PacketID = 849;
		}
    }

    /// <summary>
    ///  [请求类] 领取限时任务奖励 创建者
    /// </summary>
    [Package(849)]
    public partial class ReqTakeLimiteTaskAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeLimiteTaskAward();
        }
    }


    /// <summary>
    ///  [响应类]领取限时任务奖励
    /// </summary>
    public partial class ResTakeLimiteTaskAward: Packet 
    {
        /// <summary>
        /// 限时任务ID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 结果0-成功,1-失败,2-TID不存在,3-次数未达成,4-已经领取,5-已经超时
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResTakeLimiteTaskAward pkg = new ResTakeLimiteTaskAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResTakeLimiteTaskAward()
		{
			PacketID = 850;
		}
    }

    /// <summary>
    ///  [响应类] 领取限时任务奖励 创建者
    /// </summary>
    [Package(850)]
    public partial class ResTakeLimiteTaskAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeLimiteTaskAward();
        }
    }


    /// <summary>
    ///  [请求类]解散行会
    /// </summary>
    public partial class ReqDeleteGuild: Packet 
    {

        public override Packet Clone()
        {
            ReqDeleteGuild pkg = new ReqDeleteGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDeleteGuild()
		{
			PacketID = 851;
		}
    }

    /// <summary>
    ///  [请求类] 解散行会 创建者
    /// </summary>
    [Package(851)]
    public partial class ReqDeleteGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDeleteGuild();
        }
    }


    /// <summary>
    ///  [响应类]解散行会
    /// </summary>
    public partial class ResDeleteGuild: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResDeleteGuild pkg = new ResDeleteGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResDeleteGuild()
		{
			PacketID = 852;
		}
    }

    /// <summary>
    ///  [响应类] 解散行会 创建者
    /// </summary>
    [Package(852)]
    public partial class ResDeleteGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDeleteGuild();
        }
    }


    /// <summary>
    ///  [请求类]更新限时任务开启时间
    /// </summary>
    public partial class ReqUpdateLimiteTaskStartTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLimiteTaskStartTime pkg = new ReqUpdateLimiteTaskStartTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLimiteTaskStartTime()
		{
			PacketID = 853;
		}
    }

    /// <summary>
    ///  [请求类] 更新限时任务开启时间 创建者
    /// </summary>
    [Package(853)]
    public partial class ReqUpdateLimiteTaskStartTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLimiteTaskStartTime();
        }
    }


    /// <summary>
    ///  [响应类]更新限时任务开启时间
    /// </summary>
    public partial class ResUpdateLimiteTaskStartTime: Packet 
    {
        /// <summary>
        /// 限时任务开启时间
        /// </summary>
        public uint LimiteTaskStartTime;

        public override Packet Clone()
        {
            ResUpdateLimiteTaskStartTime pkg = new ResUpdateLimiteTaskStartTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LimiteTaskStartTime = LimiteTaskStartTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(LimiteTaskStartTime);
            }
            else
            {
                LimiteTaskStartTime = oByteArray.ReadUInt();
            }
        }
		public ResUpdateLimiteTaskStartTime()
		{
			PacketID = 854;
		}
    }

    /// <summary>
    ///  [响应类] 更新限时任务开启时间 创建者
    /// </summary>
    [Package(854)]
    public partial class ResUpdateLimiteTaskStartTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLimiteTaskStartTime();
        }
    }


    /// <summary>
    ///  [请求类]放弃当前挖宝
    /// </summary>
    public partial class ReqGiveUpDailyTask: Packet 
    {
        /// <summary>
        /// 1降妖2威望3行会4藏宝图5挖宝
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqGiveUpDailyTask pkg = new ReqGiveUpDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqGiveUpDailyTask()
		{
			PacketID = 855;
		}
    }

    /// <summary>
    ///  [请求类] 放弃当前挖宝 创建者
    /// </summary>
    [Package(855)]
    public partial class ReqGiveUpDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGiveUpDailyTask();
        }
    }


    /// <summary>
    ///  [响应类]放弃当前挖宝
    /// </summary>
    public partial class ResGiveUpDailyTask: Packet 
    {
        /// <summary>
        /// 0成功
        /// </summary>
        public byte Result;
        /// <summary>
        /// 1降妖2威望3行会4藏宝图5挖宝
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResGiveUpDailyTask pkg = new ResGiveUpDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
            }
        }
		public ResGiveUpDailyTask()
		{
			PacketID = 856;
		}
    }

    /// <summary>
    ///  [响应类] 放弃当前挖宝 创建者
    /// </summary>
    [Package(856)]
    public partial class ResGiveUpDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGiveUpDailyTask();
        }
    }


    /// <summary>
    ///  [请求类]播放剧情
    /// </summary>
    public partial class ReqTriggerStory: Packet 
    {
        /// <summary>
        /// 剧情ID
        /// </summary>
        public uint StoryID;

        public override Packet Clone()
        {
            ReqTriggerStory pkg = new ReqTriggerStory();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.StoryID = StoryID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(StoryID);
            }
            else
            {
                StoryID = oByteArray.ReadUInt();
            }
        }
		public ReqTriggerStory()
		{
			PacketID = 857;
		}
    }

    /// <summary>
    ///  [请求类] 播放剧情 创建者
    /// </summary>
    [Package(857)]
    public partial class ReqTriggerStoryCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTriggerStory();
        }
    }


    /// <summary>
    ///  [响应类]播放剧情
    /// </summary>
    public partial class ResTriggerStory: Packet 
    {
        /// <summary>
        /// 剧情ID
        /// </summary>
        public uint StoryID;

        public override Packet Clone()
        {
            ResTriggerStory pkg = new ResTriggerStory();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.StoryID = StoryID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(StoryID);
            }
            else
            {
                StoryID = oByteArray.ReadUInt();
            }
        }
		public ResTriggerStory()
		{
			PacketID = 858;
		}
    }

    /// <summary>
    ///  [响应类] 播放剧情 创建者
    /// </summary>
    [Package(858)]
    public partial class ResTriggerStoryCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTriggerStory();
        }
    }


    /// <summary>
    ///  [请求类]一键使用背包物品
    /// </summary>
    public partial class ReqOneKeyUseBagItem: Packet 
    {

        public override Packet Clone()
        {
            ReqOneKeyUseBagItem pkg = new ReqOneKeyUseBagItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOneKeyUseBagItem()
		{
			PacketID = 859;
		}
    }

    /// <summary>
    ///  [请求类] 一键使用背包物品 创建者
    /// </summary>
    [Package(859)]
    public partial class ReqOneKeyUseBagItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOneKeyUseBagItem();
        }
    }


    /// <summary>
    ///  [响应类]一键使用背包物品
    /// </summary>
    public partial class ResOneKeyUseBagItem: Packet 
    {

        public override Packet Clone()
        {
            ResOneKeyUseBagItem pkg = new ResOneKeyUseBagItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResOneKeyUseBagItem()
		{
			PacketID = 860;
		}
    }

    /// <summary>
    ///  [响应类] 一键使用背包物品 创建者
    /// </summary>
    [Package(860)]
    public partial class ResOneKeyUseBagItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOneKeyUseBagItem();
        }
    }


    /// <summary>
    ///  [请求类]更新物品洗炼属性
    /// </summary>
    public partial class ReqUpdateBaptizeEquipAttributes: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateBaptizeEquipAttributes pkg = new ReqUpdateBaptizeEquipAttributes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateBaptizeEquipAttributes()
		{
			PacketID = 861;
		}
    }

    /// <summary>
    ///  [请求类] 更新物品洗炼属性 创建者
    /// </summary>
    [Package(861)]
    public partial class ReqUpdateBaptizeEquipAttributesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateBaptizeEquipAttributes();
        }
    }


    /// <summary>
    ///  [响应类]更新物品洗炼属性
    /// </summary>
    public partial class ResUpdateBaptizeEquipAttributes: Packet 
    {
        /// <summary>
        /// 新属性
        /// </summary>
        public string NewAttributes;
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResUpdateBaptizeEquipAttributes pkg = new ResUpdateBaptizeEquipAttributes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NewAttributes = NewAttributes;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(NewAttributes);
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                NewAttributes = oByteArray.ReadUTF();
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateBaptizeEquipAttributes()
		{
			PacketID = 862;
		}
    }

    /// <summary>
    ///  [响应类] 更新物品洗炼属性 创建者
    /// </summary>
    [Package(862)]
    public partial class ResUpdateBaptizeEquipAttributesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateBaptizeEquipAttributes();
        }
    }


    /// <summary>
    ///  [请求类]通知周期活动列表
    /// </summary>
    public partial class ReqAssembleActivityList: Packet 
    {

        public override Packet Clone()
        {
            ReqAssembleActivityList pkg = new ReqAssembleActivityList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAssembleActivityList()
		{
			PacketID = 863;
		}
    }

    /// <summary>
    ///  [请求类] 通知周期活动列表 创建者
    /// </summary>
    [Package(863)]
    public partial class ReqAssembleActivityListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAssembleActivityList();
        }
    }


    /// <summary>
    ///  [响应类]通知周期活动列表
    /// </summary>
    public partial class ResAssembleActivityList: Packet 
    {
        /// <summary>
        /// 活动列表
        /// </summary>
        public List<AssembleActivityInfo> ActivityInfo = new List<AssembleActivityInfo>();
        /// <summary>
        /// 开始时间
        /// </summary>
        public uint StartActivityTime;
        /// <summary>
        /// 结束时间
        /// </summary>
        public uint EndActivityTime;
        /// <summary>
        /// 标题TID
        /// </summary>
        public uint TitleTID;
        /// <summary>
        /// 活动类型1开服活动2公测活动3合服活动4节日活动5周期活动
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResAssembleActivityList pkg = new ResAssembleActivityList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (AssembleActivityInfo item in ActivityInfo)
            {
                pkg.ActivityInfo.Add(item.Clone() as AssembleActivityInfo);
            }
            pkg.StartActivityTime = StartActivityTime;
            pkg.EndActivityTime = EndActivityTime;
            pkg.TitleTID = TitleTID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ActivityInfo.Count);
                for (int i = 0; i < ActivityInfo.Count; i++)
                {
                    ActivityInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(StartActivityTime);
                oByteArray.WriteUInt(EndActivityTime);
                oByteArray.WriteUInt(TitleTID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                int ActivityInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ActivityInfoCount; i++)
                {
                    AssembleActivityInfo obj = new AssembleActivityInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ActivityInfo.Add(obj);
                }
                StartActivityTime = oByteArray.ReadUInt();
                EndActivityTime = oByteArray.ReadUInt();
                TitleTID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResAssembleActivityList()
		{
			PacketID = 864;
		}
    }

    /// <summary>
    ///  [响应类] 通知周期活动列表 创建者
    /// </summary>
    [Package(864)]
    public partial class ResAssembleActivityListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAssembleActivityList();
        }
    }


    /// <summary>
    ///  [请求类]更新组装活动信息
    /// </summary>
    public partial class ReqUpdateAssembleActivityData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAssembleActivityData pkg = new ReqUpdateAssembleActivityData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAssembleActivityData()
		{
			PacketID = 865;
		}
    }

    /// <summary>
    ///  [请求类] 更新组装活动信息 创建者
    /// </summary>
    [Package(865)]
    public partial class ReqUpdateAssembleActivityDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAssembleActivityData();
        }
    }


    /// <summary>
    ///  [响应类]更新组装活动信息
    /// </summary>
    public partial class ResUpdateAssembleActivityData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string Data1;
        /// <summary>
        /// 
        /// </summary>
        public string Data2;
        /// <summary>
        /// 
        /// </summary>
        public string Data3;
        /// <summary>
        /// 
        /// </summary>
        public string Data4;
        /// <summary>
        /// 
        /// </summary>
        public string Data5;
        /// <summary>
        /// 
        /// </summary>
        public string Data6;
        /// <summary>
        /// 
        /// </summary>
        public string Data7;
        /// <summary>
        /// 
        /// </summary>
        public string Data8;
        /// <summary>
        /// 
        /// </summary>
        public string Data9;
        /// <summary>
        /// 
        /// </summary>
        public string Data10;
        /// <summary>
        /// 
        /// </summary>
        public string Data11;
        /// <summary>
        /// 
        /// </summary>
        public string Data12;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public string NickName;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 
        /// </summary>
        public uint Sex;
        /// <summary>
        /// 
        /// </summary>
        public uint Career;
        /// <summary>
        /// 
        /// </summary>
        public bool IsInsert;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;
        /// <summary>
        /// 
        /// </summary>
        public string Data13;
        /// <summary>
        /// 
        /// </summary>
        public string Data14;
        /// <summary>
        /// 
        /// </summary>
        public string Data15;
        /// <summary>
        /// 
        /// </summary>
        public string Data16;
        /// <summary>
        /// 
        /// </summary>
        public string Data17;
        /// <summary>
        /// 
        /// </summary>
        public string Data18;
        /// <summary>
        /// 
        /// </summary>
        public string Data19;
        /// <summary>
        /// 
        /// </summary>
        public string Data20;

        public override Packet Clone()
        {
            ResUpdateAssembleActivityData pkg = new ResUpdateAssembleActivityData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data1 = Data1;
            pkg.Data2 = Data2;
            pkg.Data3 = Data3;
            pkg.Data4 = Data4;
            pkg.Data5 = Data5;
            pkg.Data6 = Data6;
            pkg.Data7 = Data7;
            pkg.Data8 = Data8;
            pkg.Data9 = Data9;
            pkg.Data10 = Data10;
            pkg.Data11 = Data11;
            pkg.Data12 = Data12;
            pkg.PlayerGuid = PlayerGuid;
            pkg.NickName = NickName;
            pkg.ActivityType = ActivityType;
            pkg.Sex = Sex;
            pkg.Career = Career;
            pkg.IsInsert = IsInsert;
            pkg.TitleTID = TitleTID;
            pkg.Data13 = Data13;
            pkg.Data14 = Data14;
            pkg.Data15 = Data15;
            pkg.Data16 = Data16;
            pkg.Data17 = Data17;
            pkg.Data18 = Data18;
            pkg.Data19 = Data19;
            pkg.Data20 = Data20;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Data1);
                oByteArray.WriteUTF(Data2);
                oByteArray.WriteUTF(Data3);
                oByteArray.WriteUTF(Data4);
                oByteArray.WriteUTF(Data5);
                oByteArray.WriteUTF(Data6);
                oByteArray.WriteUTF(Data7);
                oByteArray.WriteUTF(Data8);
                oByteArray.WriteUTF(Data9);
                oByteArray.WriteUTF(Data10);
                oByteArray.WriteUTF(Data11);
                oByteArray.WriteUTF(Data12);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUInt(ActivityType);
                oByteArray.WriteUInt(Sex);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteBoolean(IsInsert);
                oByteArray.WriteUInt(TitleTID);
                oByteArray.WriteUTF(Data13);
                oByteArray.WriteUTF(Data14);
                oByteArray.WriteUTF(Data15);
                oByteArray.WriteUTF(Data16);
                oByteArray.WriteUTF(Data17);
                oByteArray.WriteUTF(Data18);
                oByteArray.WriteUTF(Data19);
                oByteArray.WriteUTF(Data20);
            }
            else
            {
                Data1 = oByteArray.ReadUTF();
                Data2 = oByteArray.ReadUTF();
                Data3 = oByteArray.ReadUTF();
                Data4 = oByteArray.ReadUTF();
                Data5 = oByteArray.ReadUTF();
                Data6 = oByteArray.ReadUTF();
                Data7 = oByteArray.ReadUTF();
                Data8 = oByteArray.ReadUTF();
                Data9 = oByteArray.ReadUTF();
                Data10 = oByteArray.ReadUTF();
                Data11 = oByteArray.ReadUTF();
                Data12 = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadUInt64();
                NickName = oByteArray.ReadUTF();
                ActivityType = oByteArray.ReadUInt();
                Sex = oByteArray.ReadUInt();
                Career = oByteArray.ReadUInt();
                IsInsert = oByteArray.ReadBoolean();
                TitleTID = oByteArray.ReadUInt();
                Data13 = oByteArray.ReadUTF();
                Data14 = oByteArray.ReadUTF();
                Data15 = oByteArray.ReadUTF();
                Data16 = oByteArray.ReadUTF();
                Data17 = oByteArray.ReadUTF();
                Data18 = oByteArray.ReadUTF();
                Data19 = oByteArray.ReadUTF();
                Data20 = oByteArray.ReadUTF();
            }
        }
		public ResUpdateAssembleActivityData()
		{
			PacketID = 866;
		}
    }

    /// <summary>
    ///  [响应类] 更新组装活动信息 创建者
    /// </summary>
    [Package(866)]
    public partial class ResUpdateAssembleActivityDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAssembleActivityData();
        }
    }


    /// <summary>
    ///  [请求类]领取组装活动奖励
    /// </summary>
    public partial class ReqTakeAssembleActivityAward: Packet 
    {
        /// <summary>
        /// 活动类型1开服活动2公测活动3合服活动4节日活动5周期活动
        /// </summary>
        public byte Type;
        /// <summary>
        /// 活动子类型
        /// </summary>
        public uint SubType;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;
        /// <summary>
        /// 奖励TID,没有写0
        /// </summary>
        public uint TID;
        /// <summary>
        /// 奖励发放通知
        /// </summary>
        public uint Notice;
        /// <summary>
        /// 批量购买次数
        /// </summary>
        public uint BatchNum;

        public override Packet Clone()
        {
            ReqTakeAssembleActivityAward pkg = new ReqTakeAssembleActivityAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.TitleTID = TitleTID;
            pkg.TID = TID;
            pkg.Notice = Notice;
            pkg.BatchNum = BatchNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(SubType);
                oByteArray.WriteUInt(TitleTID);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Notice);
                oByteArray.WriteUInt(BatchNum);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadUInt();
                TitleTID = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                Notice = oByteArray.ReadUInt();
                BatchNum = oByteArray.ReadUInt();
            }
        }
		public ReqTakeAssembleActivityAward()
		{
			PacketID = 867;
		}
    }

    /// <summary>
    ///  [请求类] 领取组装活动奖励 创建者
    /// </summary>
    [Package(867)]
    public partial class ReqTakeAssembleActivityAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeAssembleActivityAward();
        }
    }


    /// <summary>
    ///  [响应类]领取组装活动奖励
    /// </summary>
    public partial class ResTakeAssembleActivityAward: Packet 
    {
        /// <summary>
        /// 0成功
        /// </summary>
        public byte Result;
        /// <summary>
        /// 活动类型1开服活动2公测活动3合服活动4节日活动5周期活动
        /// </summary>
        public byte Type;
        /// <summary>
        /// 活动子类型
        /// </summary>
        public uint SubType;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;
        /// <summary>
        /// 奖励TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 奖励发放通知
        /// </summary>
        public uint Notice;
        /// <summary>
        /// 批量购买次数
        /// </summary>
        public uint BatchNum;

        public override Packet Clone()
        {
            ResTakeAssembleActivityAward pkg = new ResTakeAssembleActivityAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.TitleTID = TitleTID;
            pkg.TID = TID;
            pkg.Notice = Notice;
            pkg.BatchNum = BatchNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(SubType);
                oByteArray.WriteUInt(TitleTID);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Notice);
                oByteArray.WriteUInt(BatchNum);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadUInt();
                TitleTID = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                Notice = oByteArray.ReadUInt();
                BatchNum = oByteArray.ReadUInt();
            }
        }
		public ResTakeAssembleActivityAward()
		{
			PacketID = 868;
		}
    }

    /// <summary>
    ///  [响应类] 领取组装活动奖励 创建者
    /// </summary>
    [Package(868)]
    public partial class ResTakeAssembleActivityAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeAssembleActivityAward();
        }
    }


    /// <summary>
    ///  [请求类]更新组装活动信息
    /// </summary>
    public partial class ReqUpdateAssembleActivityInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAssembleActivityInfo pkg = new ReqUpdateAssembleActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAssembleActivityInfo()
		{
			PacketID = 869;
		}
    }

    /// <summary>
    ///  [请求类] 更新组装活动信息 创建者
    /// </summary>
    [Package(869)]
    public partial class ReqUpdateAssembleActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAssembleActivityInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新组装活动信息
    /// </summary>
    public partial class ResUpdateAssembleActivityInfo: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public byte Type;
        /// <summary>
        /// 活动子类型
        /// </summary>
        public uint SubType;
        /// <summary>
        /// 数据1
        /// </summary>
        public uint Data1;
        /// <summary>
        /// 数据2
        /// </summary>
        public uint Data2;
        /// <summary>
        /// 数据3
        /// </summary>
        public uint Data3;
        /// <summary>
        /// 数据4
        /// </summary>
        public string Data4;
        /// <summary>
        /// 数据5
        /// </summary>
        public string Data5;
        /// <summary>
        /// 
        /// </summary>
        public string Info;
        /// <summary>
        /// 
        /// </summary>
        public string Info2;
        /// <summary>
        /// Type:8-TID
        /// </summary>
        public uint TitleTID;

        public override Packet Clone()
        {
            ResUpdateAssembleActivityInfo pkg = new ResUpdateAssembleActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.Data1 = Data1;
            pkg.Data2 = Data2;
            pkg.Data3 = Data3;
            pkg.Data4 = Data4;
            pkg.Data5 = Data5;
            pkg.Info = Info;
            pkg.Info2 = Info2;
            pkg.TitleTID = TitleTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(SubType);
                oByteArray.WriteUInt(Data1);
                oByteArray.WriteUInt(Data2);
                oByteArray.WriteUInt(Data3);
                oByteArray.WriteUTF(Data4);
                oByteArray.WriteUTF(Data5);
                oByteArray.WriteUTF(Info);
                oByteArray.WriteUTF(Info2);
                oByteArray.WriteUInt(TitleTID);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadUInt();
                Data1 = oByteArray.ReadUInt();
                Data2 = oByteArray.ReadUInt();
                Data3 = oByteArray.ReadUInt();
                Data4 = oByteArray.ReadUTF();
                Data5 = oByteArray.ReadUTF();
                Info = oByteArray.ReadUTF();
                Info2 = oByteArray.ReadUTF();
                TitleTID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateAssembleActivityInfo()
		{
			PacketID = 870;
		}
    }

    /// <summary>
    ///  [响应类] 更新组装活动信息 创建者
    /// </summary>
    [Package(870)]
    public partial class ResUpdateAssembleActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAssembleActivityInfo();
        }
    }


    /// <summary>
    ///  [请求类]清空组装活动信息
    /// </summary>
    public partial class ReqClearAssembleActivityData: Packet 
    {

        public override Packet Clone()
        {
            ReqClearAssembleActivityData pkg = new ReqClearAssembleActivityData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqClearAssembleActivityData()
		{
			PacketID = 871;
		}
    }

    /// <summary>
    ///  [请求类] 清空组装活动信息 创建者
    /// </summary>
    [Package(871)]
    public partial class ReqClearAssembleActivityDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqClearAssembleActivityData();
        }
    }


    /// <summary>
    ///  [响应类]清空组装活动信息
    /// </summary>
    public partial class ResClearAssembleActivityData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public bool IsBegin;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;

        public override Packet Clone()
        {
            ResClearAssembleActivityData pkg = new ResClearAssembleActivityData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.IsBegin = IsBegin;
            pkg.TitleTID = TitleTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteBoolean(IsBegin);
                oByteArray.WriteUInt(TitleTID);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                IsBegin = oByteArray.ReadBoolean();
                TitleTID = oByteArray.ReadUInt();
            }
        }
		public ResClearAssembleActivityData()
		{
			PacketID = 872;
		}
    }

    /// <summary>
    ///  [响应类] 清空组装活动信息 创建者
    /// </summary>
    [Package(872)]
    public partial class ResClearAssembleActivityDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResClearAssembleActivityData();
        }
    }


    /// <summary>
    ///  [请求类]清空幸运转盘日志
    /// </summary>
    public partial class ReqClearLuckDiscLog: Packet 
    {

        public override Packet Clone()
        {
            ReqClearLuckDiscLog pkg = new ReqClearLuckDiscLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqClearLuckDiscLog()
		{
			PacketID = 873;
		}
    }

    /// <summary>
    ///  [请求类] 清空幸运转盘日志 创建者
    /// </summary>
    [Package(873)]
    public partial class ReqClearLuckDiscLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqClearLuckDiscLog();
        }
    }


    /// <summary>
    ///  [响应类]清空幸运转盘日志
    /// </summary>
    public partial class ResClearLuckDiscLog: Packet 
    {

        public override Packet Clone()
        {
            ResClearLuckDiscLog pkg = new ResClearLuckDiscLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResClearLuckDiscLog()
		{
			PacketID = 874;
		}
    }

    /// <summary>
    ///  [响应类] 清空幸运转盘日志 创建者
    /// </summary>
    [Package(874)]
    public partial class ResClearLuckDiscLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResClearLuckDiscLog();
        }
    }


    /// <summary>
    ///  [请求类]强化装备位置
    /// </summary>
    public partial class ReqStrengthenEquip: Packet 
    {
        /// <summary>
        /// 装备位置
        /// </summary>
        public byte EquipPos;
        /// <summary>
        /// 成功率材料ID
        /// </summary>
        public uint ItemID;

        public override Packet Clone()
        {
            ReqStrengthenEquip pkg = new ReqStrengthenEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EquipPos = EquipPos;
            pkg.ItemID = ItemID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(EquipPos);
                oByteArray.WriteUInt(ItemID);
            }
            else
            {
                EquipPos = oByteArray.ReadByte();
                ItemID = oByteArray.ReadUInt();
            }
        }
		public ReqStrengthenEquip()
		{
			PacketID = 875;
		}
    }

    /// <summary>
    ///  [请求类] 强化装备位置 创建者
    /// </summary>
    [Package(875)]
    public partial class ReqStrengthenEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStrengthenEquip();
        }
    }


    /// <summary>
    ///  [响应类]强化装备位置
    /// </summary>
    public partial class ResStrengthenEquip: Packet 
    {
        /// <summary>
        /// 0成功1材料不足2强化失败
        /// </summary>
        public byte Result;
        /// <summary>
        /// 装备位置
        /// </summary>
        public uint EquipPos;

        public override Packet Clone()
        {
            ResStrengthenEquip pkg = new ResStrengthenEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.EquipPos = EquipPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(EquipPos);
            }
            else
            {
                Result = oByteArray.ReadByte();
                EquipPos = oByteArray.ReadUInt();
            }
        }
		public ResStrengthenEquip()
		{
			PacketID = 876;
		}
    }

    /// <summary>
    ///  [响应类] 强化装备位置 创建者
    /// </summary>
    [Package(876)]
    public partial class ResStrengthenEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStrengthenEquip();
        }
    }


    /// <summary>
    ///  [请求类]重置传奇之魂
    /// </summary>
    public partial class ReqRestLegendSoul: Packet 
    {

        public override Packet Clone()
        {
            ReqRestLegendSoul pkg = new ReqRestLegendSoul();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRestLegendSoul()
		{
			PacketID = 877;
		}
    }

    /// <summary>
    ///  [请求类] 重置传奇之魂 创建者
    /// </summary>
    [Package(877)]
    public partial class ReqRestLegendSoulCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRestLegendSoul();
        }
    }


    /// <summary>
    ///  [响应类]重置传奇之魂
    /// </summary>
    public partial class ResRestLegendSoul: Packet 
    {
        /// <summary>
        /// 0成功,1失败,2元宝不足
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResRestLegendSoul pkg = new ResRestLegendSoul();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResRestLegendSoul()
		{
			PacketID = 878;
		}
    }

    /// <summary>
    ///  [响应类] 重置传奇之魂 创建者
    /// </summary>
    [Package(878)]
    public partial class ResRestLegendSoulCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRestLegendSoul();
        }
    }


    /// <summary>
    ///  [请求类]领取通天塔奖励
    /// </summary>
    public partial class ReqTakeBabelAward: Packet 
    {
        /// <summary>
        /// 想要领取的TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 通天塔类型
        /// </summary>
        public uint BabelType;

        public override Packet Clone()
        {
            ReqTakeBabelAward pkg = new ReqTakeBabelAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.BabelType = BabelType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(BabelType);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                BabelType = oByteArray.ReadUInt();
            }
        }
		public ReqTakeBabelAward()
		{
			PacketID = 879;
		}
    }

    /// <summary>
    ///  [请求类] 领取通天塔奖励 创建者
    /// </summary>
    [Package(879)]
    public partial class ReqTakeBabelAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeBabelAward();
        }
    }


    /// <summary>
    ///  [响应类]领取通天塔奖励
    /// </summary>
    public partial class ResTakeBabelAward: Packet 
    {
        /// <summary>
        /// 想要领取的TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 结果0-成功，1-失败，2已经领取，3未完成
        /// </summary>
        public uint Result;
        /// <summary>
        /// 通天塔类型
        /// </summary>
        public uint BabelType;

        public override Packet Clone()
        {
            ResTakeBabelAward pkg = new ResTakeBabelAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Result = Result;
            pkg.BabelType = BabelType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(BabelType);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                BabelType = oByteArray.ReadUInt();
            }
        }
		public ResTakeBabelAward()
		{
			PacketID = 880;
		}
    }

    /// <summary>
    ///  [响应类] 领取通天塔奖励 创建者
    /// </summary>
    [Package(880)]
    public partial class ResTakeBabelAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeBabelAward();
        }
    }


    /// <summary>
    ///  [请求类]平台VIP领奖
    /// </summary>
    public partial class ReqPlatformVIPTakeAward: Packet 
    {
        /// <summary>
        /// 平台VIP
        /// </summary>
        public uint PlatformVIPTID;
        /// <summary>
        /// 类型0-首次领奖,1-每日礼包,2-等级礼包
        /// </summary>
        public uint Type;
        /// <summary>
        /// 等级索引
        /// </summary>
        public uint Data;

        public override Packet Clone()
        {
            ReqPlatformVIPTakeAward pkg = new ReqPlatformVIPTakeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlatformVIPTID = PlatformVIPTID;
            pkg.Type = Type;
            pkg.Data = Data;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlatformVIPTID);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Data);
            }
            else
            {
                PlatformVIPTID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                Data = oByteArray.ReadUInt();
            }
        }
		public ReqPlatformVIPTakeAward()
		{
			PacketID = 881;
		}
    }

    /// <summary>
    ///  [请求类] 平台VIP领奖 创建者
    /// </summary>
    [Package(881)]
    public partial class ReqPlatformVIPTakeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlatformVIPTakeAward();
        }
    }


    /// <summary>
    ///  [响应类]平台VIP领奖
    /// </summary>
    public partial class ResPlatformVIPTakeAward: Packet 
    {
        /// <summary>
        /// 平台VIP
        /// </summary>
        public uint PlatformVIP;
        /// <summary>
        /// 类型0-首次领奖,1-每日礼包,2-等级礼包
        /// </summary>
        public uint Type;
        /// <summary>
        /// 等级索引
        /// </summary>
        public uint Data;
        /// <summary>
        /// 0-成功,1失败,2-未购买,3-已经领取,4等级不足
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResPlatformVIPTakeAward pkg = new ResPlatformVIPTakeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlatformVIP = PlatformVIP;
            pkg.Type = Type;
            pkg.Data = Data;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlatformVIP);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Data);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                PlatformVIP = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                Data = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResPlatformVIPTakeAward()
		{
			PacketID = 882;
		}
    }

    /// <summary>
    ///  [响应类] 平台VIP领奖 创建者
    /// </summary>
    [Package(882)]
    public partial class ResPlatformVIPTakeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlatformVIPTakeAward();
        }
    }


    /// <summary>
    ///  [请求类]玩家点击Icon用于数据统计
    /// </summary>
    public partial class ReqPlayerClickIcon: Packet 
    {
        /// <summary>
        /// 日志类型
        /// </summary>
        public uint LogType;
        /// <summary>
        /// 文字描述
        /// </summary>
        public string LogText;

        public override Packet Clone()
        {
            ReqPlayerClickIcon pkg = new ReqPlayerClickIcon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LogType = LogType;
            pkg.LogText = LogText;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(LogType);
                oByteArray.WriteUTF(LogText);
            }
            else
            {
                LogType = oByteArray.ReadUInt();
                LogText = oByteArray.ReadUTF();
            }
        }
		public ReqPlayerClickIcon()
		{
			PacketID = 883;
		}
    }

    /// <summary>
    ///  [请求类] 玩家点击Icon用于数据统计 创建者
    /// </summary>
    [Package(883)]
    public partial class ReqPlayerClickIconCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerClickIcon();
        }
    }


    /// <summary>
    ///  [响应类]玩家点击Icon用于数据统计
    /// </summary>
    public partial class ResPlayerClickIcon: Packet 
    {

        public override Packet Clone()
        {
            ResPlayerClickIcon pkg = new ResPlayerClickIcon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResPlayerClickIcon()
		{
			PacketID = 884;
		}
    }

    /// <summary>
    ///  [响应类] 玩家点击Icon用于数据统计 创建者
    /// </summary>
    [Package(884)]
    public partial class ResPlayerClickIconCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerClickIcon();
        }
    }


    /// <summary>
    ///  [请求类]物品提升品质（注灵）
    /// </summary>
    public partial class ReqUpgradeItemFixLv: Packet 
    {
        /// <summary>
        /// 物品所在位置
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqUpgradeItemFixLv pkg = new ReqUpgradeItemFixLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqUpgradeItemFixLv()
		{
			PacketID = 885;
		}
    }

    /// <summary>
    ///  [请求类] 物品提升品质（注灵） 创建者
    /// </summary>
    [Package(885)]
    public partial class ReqUpgradeItemFixLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeItemFixLv();
        }
    }


    /// <summary>
    ///  [响应类]物品提升品质（注灵）
    /// </summary>
    public partial class ResUpgradeItemFixLv: Packet 
    {
        /// <summary>
        /// 0-成功,1-失败,2-材料不足,3-等级错误,4-玩家境界不足,5-职业不符,6-性别不符
        /// </summary>
        public uint Result;
        /// <summary>
        /// 物品所在位置
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ResUpgradeItemFixLv pkg = new ResUpgradeItemFixLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeItemFixLv()
		{
			PacketID = 886;
		}
    }

    /// <summary>
    ///  [响应类] 物品提升品质（注灵） 创建者
    /// </summary>
    [Package(886)]
    public partial class ResUpgradeItemFixLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeItemFixLv();
        }
    }


    /// <summary>
    ///  [请求类]更新功能引导的完成信息
    /// </summary>
    public partial class ReqUpdateFunctionGuide: Packet 
    {
        /// <summary>
        /// 完成的TID
        /// </summary>
        public int TID;

        public override Packet Clone()
        {
            ReqUpdateFunctionGuide pkg = new ReqUpdateFunctionGuide();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(TID);
            }
            else
            {
                TID = oByteArray.ReadInt();
            }
        }
		public ReqUpdateFunctionGuide()
		{
			PacketID = 887;
		}
    }

    /// <summary>
    ///  [请求类] 更新功能引导的完成信息 创建者
    /// </summary>
    [Package(887)]
    public partial class ReqUpdateFunctionGuideCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateFunctionGuide();
        }
    }


    /// <summary>
    ///  [响应类]更新功能引导的完成信息
    /// </summary>
    public partial class ResUpdateFunctionGuide: Packet 
    {
        /// <summary>
        /// 完成的功能引导
        /// </summary>
        public int TID;

        public override Packet Clone()
        {
            ResUpdateFunctionGuide pkg = new ResUpdateFunctionGuide();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(TID);
            }
            else
            {
                TID = oByteArray.ReadInt();
            }
        }
		public ResUpdateFunctionGuide()
		{
			PacketID = 888;
		}
    }

    /// <summary>
    ///  [响应类] 更新功能引导的完成信息 创建者
    /// </summary>
    [Package(888)]
    public partial class ResUpdateFunctionGuideCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateFunctionGuide();
        }
    }


    /// <summary>
    ///  [请求类]购买每日任务次数
    /// </summary>
    public partial class ReqBuyDailyTaskTime: Packet 
    {
        /// <summary>
        /// 1降妖2威望3帮派4宝藏
        /// </summary>
        public byte Type;
        /// <summary>
        /// 1-击杀怪物 2-NPC对话 3-收集物品 4-击杀等级Boss 5-膜拜雕像 6-击杀精英怪物
        /// </summary>
        public byte SubType;

        public override Packet Clone()
        {
            ReqBuyDailyTaskTime pkg = new ReqBuyDailyTaskTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
            }
        }
		public ReqBuyDailyTaskTime()
		{
			PacketID = 889;
		}
    }

    /// <summary>
    ///  [请求类] 购买每日任务次数 创建者
    /// </summary>
    [Package(889)]
    public partial class ReqBuyDailyTaskTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyDailyTaskTime();
        }
    }


    /// <summary>
    ///  [响应类]购买每日任务次数
    /// </summary>
    public partial class ResBuyDailyTaskTime: Packet 
    {
        /// <summary>
        /// 0成功1没可购买次数2没钱
        /// </summary>
        public byte Result;
        /// <summary>
        /// 1降妖2威望3帮派4宝藏
        /// </summary>
        public byte Type;
        /// <summary>
        /// 1-击杀怪物 2-NPC对话 3-收集物品 4-击杀等级Boss 5-膜拜雕像 6-击杀精英怪物
        /// </summary>
        public byte SubType;

        public override Packet Clone()
        {
            ResBuyDailyTaskTime pkg = new ResBuyDailyTaskTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.SubType = SubType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
            }
        }
		public ResBuyDailyTaskTime()
		{
			PacketID = 890;
		}
    }

    /// <summary>
    ///  [响应类] 购买每日任务次数 创建者
    /// </summary>
    [Package(890)]
    public partial class ResBuyDailyTaskTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyDailyTaskTime();
        }
    }


    /// <summary>
    ///  [请求类]领取威望积分奖励
    /// </summary>
    public partial class ReqTakeDailyTaskPointAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Point;

        public override Packet Clone()
        {
            ReqTakeDailyTaskPointAward pkg = new ReqTakeDailyTaskPointAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Point = Point;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Point);
            }
            else
            {
                Point = oByteArray.ReadUInt();
            }
        }
		public ReqTakeDailyTaskPointAward()
		{
			PacketID = 891;
		}
    }

    /// <summary>
    ///  [请求类] 领取威望积分奖励 创建者
    /// </summary>
    [Package(891)]
    public partial class ReqTakeDailyTaskPointAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeDailyTaskPointAward();
        }
    }


    /// <summary>
    ///  [响应类]领取威望积分奖励
    /// </summary>
    public partial class ResTakeDailyTaskPointAward: Packet 
    {
        /// <summary>
        /// 0成功1积分不足2包满
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint Point;

        public override Packet Clone()
        {
            ResTakeDailyTaskPointAward pkg = new ResTakeDailyTaskPointAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Point = Point;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(Point);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Point = oByteArray.ReadUInt();
            }
        }
		public ResTakeDailyTaskPointAward()
		{
			PacketID = 892;
		}
    }

    /// <summary>
    ///  [响应类] 领取威望积分奖励 创建者
    /// </summary>
    [Package(892)]
    public partial class ResTakeDailyTaskPointAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeDailyTaskPointAward();
        }
    }


    /// <summary>
    ///  [请求类]膜拜
    /// </summary>
    public partial class ReqWorshipNPC: Packet 
    {
        /// <summary>
        /// Npc
        /// </summary>
        public ObjectGuidInfo NpcID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqWorshipNPC pkg = new ReqWorshipNPC();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NpcID = NpcID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                NpcID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                NpcID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqWorshipNPC()
		{
			PacketID = 893;
		}
    }

    /// <summary>
    ///  [请求类] 膜拜 创建者
    /// </summary>
    [Package(893)]
    public partial class ReqWorshipNPCCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqWorshipNPC();
        }
    }


    /// <summary>
    ///  [响应类]膜拜
    /// </summary>
    public partial class ResWorshipNPC: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 当前膜拜的玩家
        /// </summary>
        public string Name;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo NpcID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResWorshipNPC pkg = new ResWorshipNPC();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Name = Name;
            pkg.NpcID = NpcID.Clone() as ObjectGuidInfo;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUTF(Name);
                NpcID.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Name = oByteArray.ReadUTF();
                NpcID.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResWorshipNPC()
		{
			PacketID = 894;
		}
    }

    /// <summary>
    ///  [响应类] 膜拜 创建者
    /// </summary>
    [Package(894)]
    public partial class ResWorshipNPCCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResWorshipNPC();
        }
    }


    /// <summary>
    ///  [请求类]更新雕像可膜拜时间
    /// </summary>
    public partial class ReqUpdateNextWorshipTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateNextWorshipTime pkg = new ReqUpdateNextWorshipTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateNextWorshipTime()
		{
			PacketID = 895;
		}
    }

    /// <summary>
    ///  [请求类] 更新雕像可膜拜时间 创建者
    /// </summary>
    [Package(895)]
    public partial class ReqUpdateNextWorshipTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateNextWorshipTime();
        }
    }


    /// <summary>
    ///  [响应类]更新雕像可膜拜时间
    /// </summary>
    public partial class ResUpdateNextWorshipTime: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Time;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint NpcID;

        public override Packet Clone()
        {
            ResUpdateNextWorshipTime pkg = new ResUpdateNextWorshipTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Time = Time;
            pkg.MapID = MapID;
            pkg.NpcID = NpcID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Time);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(NpcID);
            }
            else
            {
                Time = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                NpcID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateNextWorshipTime()
		{
			PacketID = 896;
		}
    }

    /// <summary>
    ///  [响应类] 更新雕像可膜拜时间 创建者
    /// </summary>
    [Package(896)]
    public partial class ResUpdateNextWorshipTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateNextWorshipTime();
        }
    }


    /// <summary>
    ///  [请求类]领取引导奖励
    /// </summary>
    public partial class ReqTakeGuideAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 1是老引导2是新功能开启
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqTakeGuideAward pkg = new ReqTakeGuideAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteByte(Type);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqTakeGuideAward()
		{
			PacketID = 897;
		}
    }

    /// <summary>
    ///  [请求类] 领取引导奖励 创建者
    /// </summary>
    [Package(897)]
    public partial class ReqTakeGuideAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeGuideAward();
        }
    }


    /// <summary>
    ///  [响应类]领取引导奖励
    /// </summary>
    public partial class ResTakeGuideAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 1已经领取过2包不足
        /// </summary>
        public byte Result;
        /// <summary>
        /// 1是老引导2是新功能开启
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResTakeGuideAward pkg = new ResTakeGuideAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
            }
        }
		public ResTakeGuideAward()
		{
			PacketID = 898;
		}
    }

    /// <summary>
    ///  [响应类] 领取引导奖励 创建者
    /// </summary>
    [Package(898)]
    public partial class ResTakeGuideAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeGuideAward();
        }
    }


    /// <summary>
    ///  [请求类]更新手动开启的活动信息
    /// </summary>
    public partial class ReqUpdateActivityInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateActivityInfo pkg = new ReqUpdateActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateActivityInfo()
		{
			PacketID = 899;
		}
    }

    /// <summary>
    ///  [请求类] 更新手动开启的活动信息 创建者
    /// </summary>
    [Package(899)]
    public partial class ReqUpdateActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateActivityInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新手动开启的活动信息
    /// </summary>
    public partial class ResUpdateActivityInfo: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 活动结束时间戳
        /// </summary>
        public uint EndTime;
        /// <summary>
        /// 是否已经完成
        /// </summary>
        public uint IsEnd;

        public override Packet Clone()
        {
            ResUpdateActivityInfo pkg = new ResUpdateActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityType = ActivityType;
            pkg.EndTime = EndTime;
            pkg.IsEnd = IsEnd;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityType);
                oByteArray.WriteUInt(EndTime);
                oByteArray.WriteUInt(IsEnd);
            }
            else
            {
                ActivityType = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
                IsEnd = oByteArray.ReadUInt();
            }
        }
		public ResUpdateActivityInfo()
		{
			PacketID = 900;
		}
    }

    /// <summary>
    ///  [响应类] 更新手动开启的活动信息 创建者
    /// </summary>
    [Package(900)]
    public partial class ResUpdateActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateActivityInfo();
        }
    }


    /// <summary>
    ///  [请求类]行会保卫战更新信息
    /// </summary>
    public partial class ReqHHBWZUpdateInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqHHBWZUpdateInfo pkg = new ReqHHBWZUpdateInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqHHBWZUpdateInfo()
		{
			PacketID = 901;
		}
    }

    /// <summary>
    ///  [请求类] 行会保卫战更新信息 创建者
    /// </summary>
    [Package(901)]
    public partial class ReqHHBWZUpdateInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHHBWZUpdateInfo();
        }
    }


    /// <summary>
    ///  [响应类]行会保卫战更新信息
    /// </summary>
    public partial class ResHHBWZUpdateInfo: Packet 
    {
        /// <summary>
        /// 雕像当前血量
        /// </summary>
        public uint CurHP;
        /// <summary>
        /// 当前波数
        /// </summary>
        public uint CurWaveNum;
        /// <summary>
        /// 小怪数量
        /// </summary>
        public uint MonsterNum;
        /// <summary>
        /// 小怪下一波刷新时间戳
        /// </summary>
        public uint MonsterTime;
        /// <summary>
        /// Boss下一波刷新时间戳
        /// </summary>
        public uint BossTime;
        /// <summary>
        /// Boss数量
        /// </summary>
        public uint BossNum;

        public override Packet Clone()
        {
            ResHHBWZUpdateInfo pkg = new ResHHBWZUpdateInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurHP = CurHP;
            pkg.CurWaveNum = CurWaveNum;
            pkg.MonsterNum = MonsterNum;
            pkg.MonsterTime = MonsterTime;
            pkg.BossTime = BossTime;
            pkg.BossNum = BossNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurHP);
                oByteArray.WriteUInt(CurWaveNum);
                oByteArray.WriteUInt(MonsterNum);
                oByteArray.WriteUInt(MonsterTime);
                oByteArray.WriteUInt(BossTime);
                oByteArray.WriteUInt(BossNum);
            }
            else
            {
                CurHP = oByteArray.ReadUInt();
                CurWaveNum = oByteArray.ReadUInt();
                MonsterNum = oByteArray.ReadUInt();
                MonsterTime = oByteArray.ReadUInt();
                BossTime = oByteArray.ReadUInt();
                BossNum = oByteArray.ReadUInt();
            }
        }
		public ResHHBWZUpdateInfo()
		{
			PacketID = 902;
		}
    }

    /// <summary>
    ///  [响应类] 行会保卫战更新信息 创建者
    /// </summary>
    [Package(902)]
    public partial class ResHHBWZUpdateInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHHBWZUpdateInfo();
        }
    }


    /// <summary>
    ///  [请求类]开启活动
    /// </summary>
    public partial class ReqOpenActivity: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public int Type;

        public override Packet Clone()
        {
            ReqOpenActivity pkg = new ReqOpenActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Type);
            }
            else
            {
                Type = oByteArray.ReadInt();
            }
        }
		public ReqOpenActivity()
		{
			PacketID = 903;
		}
    }

    /// <summary>
    ///  [请求类] 开启活动 创建者
    /// </summary>
    [Package(903)]
    public partial class ReqOpenActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOpenActivity();
        }
    }


    /// <summary>
    ///  [响应类]开启活动
    /// </summary>
    public partial class ResOpenActivity: Packet 
    {
        /// <summary>
        /// 0成功1活动错误2权限不足3没钱
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResOpenActivity pkg = new ResOpenActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResOpenActivity()
		{
			PacketID = 904;
		}
    }

    /// <summary>
    ///  [响应类] 开启活动 创建者
    /// </summary>
    [Package(904)]
    public partial class ResOpenActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOpenActivity();
        }
    }


    /// <summary>
    ///  [请求类]通知删除副本
    /// </summary>
    public partial class ReqNoticeDeleteDungeon: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeDeleteDungeon pkg = new ReqNoticeDeleteDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeDeleteDungeon()
		{
			PacketID = 905;
		}
    }

    /// <summary>
    ///  [请求类] 通知删除副本 创建者
    /// </summary>
    [Package(905)]
    public partial class ReqNoticeDeleteDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDeleteDungeon();
        }
    }


    /// <summary>
    ///  [响应类]通知删除副本
    /// </summary>
    public partial class ResNoticeDeleteDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ulong> MapList = new List<ulong>();

        public override Packet Clone()
        {
            ResNoticeDeleteDungeon pkg = new ResNoticeDeleteDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in MapList)
            {
                pkg.MapList.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)MapList.Count);
                for (int i = 0; i < MapList.Count; i++)
                {
                    oByteArray.WriteUInt64(MapList[i]);
                }
            }
            else
            {
                int MapListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapListCount; i++)
                {
                    MapList.Add(oByteArray.ReadUInt64());
                }
            }
        }
		public ResNoticeDeleteDungeon()
		{
			PacketID = 906;
		}
    }

    /// <summary>
    ///  [响应类] 通知删除副本 创建者
    /// </summary>
    [Package(906)]
    public partial class ResNoticeDeleteDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDeleteDungeon();
        }
    }


    /// <summary>
    ///  [请求类]击杀本地图所有敌对怪物
    /// </summary>
    public partial class ReqKillAllMonster: Packet 
    {

        public override Packet Clone()
        {
            ReqKillAllMonster pkg = new ReqKillAllMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqKillAllMonster()
		{
			PacketID = 907;
		}
    }

    /// <summary>
    ///  [请求类] 击杀本地图所有敌对怪物 创建者
    /// </summary>
    [Package(907)]
    public partial class ReqKillAllMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKillAllMonster();
        }
    }


    /// <summary>
    ///  [响应类]击杀本地图所有敌对怪物
    /// </summary>
    public partial class ResKillAllMonster: Packet 
    {

        public override Packet Clone()
        {
            ResKillAllMonster pkg = new ResKillAllMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResKillAllMonster()
		{
			PacketID = 908;
		}
    }

    /// <summary>
    ///  [响应类] 击杀本地图所有敌对怪物 创建者
    /// </summary>
    [Package(908)]
    public partial class ResKillAllMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKillAllMonster();
        }
    }


    /// <summary>
    ///  [请求类]更新行会保卫战会长雕像血量
    /// </summary>
    public partial class ReqUpdateGuildBossHp: Packet 
    {
        /// <summary>
        /// 地图唯一Guid
        /// </summary>
        public ulong MapGuild;
        /// <summary>
        /// 怪物TID
        /// </summary>
        public uint MonsterTID;
        /// <summary>
        /// 增加的BuffID
        /// </summary>
        public uint AddHp;

        public override Packet Clone()
        {
            ReqUpdateGuildBossHp pkg = new ReqUpdateGuildBossHp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapGuild = MapGuild;
            pkg.MonsterTID = MonsterTID;
            pkg.AddHp = AddHp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(MapGuild);
                oByteArray.WriteUInt(MonsterTID);
                oByteArray.WriteUInt(AddHp);
            }
            else
            {
                MapGuild = oByteArray.ReadUInt64();
                MonsterTID = oByteArray.ReadUInt();
                AddHp = oByteArray.ReadUInt();
            }
        }
		public ReqUpdateGuildBossHp()
		{
			PacketID = 909;
		}
    }

    /// <summary>
    ///  [请求类] 更新行会保卫战会长雕像血量 创建者
    /// </summary>
    [Package(909)]
    public partial class ReqUpdateGuildBossHpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateGuildBossHp();
        }
    }


    /// <summary>
    ///  [响应类]更新行会保卫战会长雕像血量
    /// </summary>
    public partial class ResUpdateGuildBossHp: Packet 
    {
        /// <summary>
        /// 公会Guid
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 当前血量
        /// </summary>
        public uint CurHp;

        public override Packet Clone()
        {
            ResUpdateGuildBossHp pkg = new ResUpdateGuildBossHp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildGuid = GuildGuid;
            pkg.CurHp = CurHp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUInt(CurHp);
            }
            else
            {
                GuildGuid = oByteArray.ReadUInt64();
                CurHp = oByteArray.ReadUInt();
            }
        }
		public ResUpdateGuildBossHp()
		{
			PacketID = 910;
		}
    }

    /// <summary>
    ///  [响应类] 更新行会保卫战会长雕像血量 创建者
    /// </summary>
    [Package(910)]
    public partial class ResUpdateGuildBossHpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateGuildBossHp();
        }
    }


    /// <summary>
    ///  [请求类]给某个地图上所有对象加buff
    /// </summary>
    public partial class ReqMapAllObjectAddBuff: Packet 
    {

        public override Packet Clone()
        {
            ReqMapAllObjectAddBuff pkg = new ReqMapAllObjectAddBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqMapAllObjectAddBuff()
		{
			PacketID = 911;
		}
    }

    /// <summary>
    ///  [请求类] 给某个地图上所有对象加buff 创建者
    /// </summary>
    [Package(911)]
    public partial class ReqMapAllObjectAddBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMapAllObjectAddBuff();
        }
    }


    /// <summary>
    ///  [响应类]给某个地图上所有对象加buff
    /// </summary>
    public partial class ResMapAllObjectAddBuff: Packet 
    {
        /// <summary>
        /// 地图Guid
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 能够获得buff的对象类型
        /// </summary>
        public uint ObjectType;
        /// <summary>
        /// BuffID
        /// </summary>
        public uint BuffID;

        public override Packet Clone()
        {
            ResMapAllObjectAddBuff pkg = new ResMapAllObjectAddBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapGuid = MapGuid;
            pkg.ObjectType = ObjectType;
            pkg.BuffID = BuffID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(ObjectType);
                oByteArray.WriteUInt(BuffID);
            }
            else
            {
                MapGuid = oByteArray.ReadUInt64();
                ObjectType = oByteArray.ReadUInt();
                BuffID = oByteArray.ReadUInt();
            }
        }
		public ResMapAllObjectAddBuff()
		{
			PacketID = 912;
		}
    }

    /// <summary>
    ///  [响应类] 给某个地图上所有对象加buff 创建者
    /// </summary>
    [Package(912)]
    public partial class ResMapAllObjectAddBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMapAllObjectAddBuff();
        }
    }


    /// <summary>
    ///  [请求类]领取资源找回奖励
    /// </summary>
    public partial class ReqTakeGetBackAward: Packet 
    {
        /// <summary>
        /// 请求领取的TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 请求领取次数
        /// </summary>
        public uint Times;
        /// <summary>
        /// 0是元宝找回1是绑元找回
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqTakeGetBackAward pkg = new ReqTakeGetBackAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Times = Times;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Times);
                oByteArray.WriteByte(Type);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Times = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ReqTakeGetBackAward()
		{
			PacketID = 913;
		}
    }

    /// <summary>
    ///  [请求类] 领取资源找回奖励 创建者
    /// </summary>
    [Package(913)]
    public partial class ReqTakeGetBackAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeGetBackAward();
        }
    }


    /// <summary>
    ///  [响应类]领取资源找回奖励
    /// </summary>
    public partial class ResTakeGetBackAward: Packet 
    {
        /// <summary>
        /// 请求领取的TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 剩余次数
        /// </summary>
        public uint Times;
        /// <summary>
        /// 结果0-成功，1-失败，2-次数不足，3-钱不够，4-需要的道具不足
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResTakeGetBackAward pkg = new ResTakeGetBackAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Times = Times;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Times);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Times = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResTakeGetBackAward()
		{
			PacketID = 914;
		}
    }

    /// <summary>
    ///  [响应类] 领取资源找回奖励 创建者
    /// </summary>
    [Package(914)]
    public partial class ResTakeGetBackAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeGetBackAward();
        }
    }


    /// <summary>
    ///  [请求类]刷新某个周期活动
    /// </summary>
    public partial class ReqRefreshAssembleActivity: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public byte SubType;

        public override Packet Clone()
        {
            ReqRefreshAssembleActivity pkg = new ReqRefreshAssembleActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
            }
        }
		public ReqRefreshAssembleActivity()
		{
			PacketID = 915;
		}
    }

    /// <summary>
    ///  [请求类] 刷新某个周期活动 创建者
    /// </summary>
    [Package(915)]
    public partial class ReqRefreshAssembleActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRefreshAssembleActivity();
        }
    }


    /// <summary>
    ///  [响应类]刷新某个周期活动
    /// </summary>
    public partial class ResRefreshAssembleActivity: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 
        /// </summary>
        public string Info;

        public override Packet Clone()
        {
            ResRefreshAssembleActivity pkg = new ResRefreshAssembleActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.Info = Info;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
                oByteArray.WriteUTF(Info);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
                Info = oByteArray.ReadUTF();
            }
        }
		public ResRefreshAssembleActivity()
		{
			PacketID = 916;
		}
    }

    /// <summary>
    ///  [响应类] 刷新某个周期活动 创建者
    /// </summary>
    [Package(916)]
    public partial class ResRefreshAssembleActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRefreshAssembleActivity();
        }
    }


    /// <summary>
    ///  [请求类]更新组装活动排行信息
    /// </summary>
    public partial class ReqUpdateAssembleActivityRankInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAssembleActivityRankInfo pkg = new ReqUpdateAssembleActivityRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAssembleActivityRankInfo()
		{
			PacketID = 917;
		}
    }

    /// <summary>
    ///  [请求类] 更新组装活动排行信息 创建者
    /// </summary>
    [Package(917)]
    public partial class ReqUpdateAssembleActivityRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAssembleActivityRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新组装活动排行信息
    /// </summary>
    public partial class ResUpdateAssembleActivityRankInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 
        /// </summary>
        public List<YYRankInfo> RankInfo = new List<YYRankInfo>();
        /// <summary>
        /// Type:8-TID
        /// </summary>
        public uint TitleTID;

        public override Packet Clone()
        {
            ResUpdateAssembleActivityRankInfo pkg = new ResUpdateAssembleActivityRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            foreach (YYRankInfo item in RankInfo)
            {
                pkg.RankInfo.Add(item.Clone() as YYRankInfo);
            }
            pkg.TitleTID = TitleTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
                oByteArray.WriteUShort((ushort)RankInfo.Count);
                for (int i = 0; i < RankInfo.Count; i++)
                {
                    RankInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(TitleTID);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
                int RankInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankInfoCount; i++)
                {
                    YYRankInfo obj = new YYRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankInfo.Add(obj);
                }
                TitleTID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateAssembleActivityRankInfo()
		{
			PacketID = 918;
		}
    }

    /// <summary>
    ///  [响应类] 更新组装活动排行信息 创建者
    /// </summary>
    [Package(918)]
    public partial class ResUpdateAssembleActivityRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAssembleActivityRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]组装活动信息
    /// </summary>
    public partial class ReqInitAssembleActivityInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqInitAssembleActivityInfo pkg = new ReqInitAssembleActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitAssembleActivityInfo()
		{
			PacketID = 919;
		}
    }

    /// <summary>
    ///  [请求类] 组装活动信息 创建者
    /// </summary>
    [Package(919)]
    public partial class ReqInitAssembleActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitAssembleActivityInfo();
        }
    }


    /// <summary>
    ///  [响应类]组装活动信息
    /// </summary>
    public partial class ResInitAssembleActivityInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte ActivityType;
        /// <summary>
        /// 
        /// </summary>
        public uint BeginTime;
        /// <summary>
        /// 
        /// </summary>
        public uint EndTime;
        /// <summary>
        /// 
        /// </summary>
        public string ActivityIDList;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;
        /// <summary>
        /// 
        /// </summary>
        public string ActivityData;

        public override Packet Clone()
        {
            ResInitAssembleActivityInfo pkg = new ResInitAssembleActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityType = ActivityType;
            pkg.BeginTime = BeginTime;
            pkg.EndTime = EndTime;
            pkg.ActivityIDList = ActivityIDList;
            pkg.TitleTID = TitleTID;
            pkg.ActivityData = ActivityData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(ActivityType);
                oByteArray.WriteUInt(BeginTime);
                oByteArray.WriteUInt(EndTime);
                oByteArray.WriteUTF(ActivityIDList);
                oByteArray.WriteUInt(TitleTID);
                oByteArray.WriteUTF(ActivityData);
            }
            else
            {
                ActivityType = oByteArray.ReadByte();
                BeginTime = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
                ActivityIDList = oByteArray.ReadUTF();
                TitleTID = oByteArray.ReadUInt();
                ActivityData = oByteArray.ReadUTF();
            }
        }
		public ResInitAssembleActivityInfo()
		{
			PacketID = 920;
		}
    }

    /// <summary>
    ///  [响应类] 组装活动信息 创建者
    /// </summary>
    [Package(920)]
    public partial class ResInitAssembleActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitAssembleActivityInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端全服奖励剩余次数
    /// </summary>
    public partial class ReqUpdateAssembleActivityAwardTimes: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAssembleActivityAwardTimes pkg = new ReqUpdateAssembleActivityAwardTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAssembleActivityAwardTimes()
		{
			PacketID = 921;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端全服奖励剩余次数 创建者
    /// </summary>
    [Package(921)]
    public partial class ReqUpdateAssembleActivityAwardTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAssembleActivityAwardTimes();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端全服奖励剩余次数
    /// </summary>
    public partial class ResUpdateAssembleActivityAwardTimes: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 
        /// </summary>
        public List<ItemInfo> AwardInfo = new List<ItemInfo>();

        public override Packet Clone()
        {
            ResUpdateAssembleActivityAwardTimes pkg = new ResUpdateAssembleActivityAwardTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            foreach (ItemInfo item in AwardInfo)
            {
                pkg.AwardInfo.Add(item.Clone() as ItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
                oByteArray.WriteUShort((ushort)AwardInfo.Count);
                for (int i = 0; i < AwardInfo.Count; i++)
                {
                    AwardInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
                int AwardInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AwardInfoCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    AwardInfo.Add(obj);
                }
            }
        }
		public ResUpdateAssembleActivityAwardTimes()
		{
			PacketID = 922;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端全服奖励剩余次数 创建者
    /// </summary>
    [Package(922)]
    public partial class ResUpdateAssembleActivityAwardTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAssembleActivityAwardTimes();
        }
    }


    /// <summary>
    ///  [请求类]装备噬魂
    /// </summary>
    public partial class ReqSoulEater: Packet 
    {
        /// <summary>
        /// 主装备ID
        /// </summary>
        public ObjectGuidInfo MainItemID = new ObjectGuidInfo();
        /// <summary>
        /// 使用装备ID
        /// </summary>
        public ObjectGuidInfo UseItemID = new ObjectGuidInfo();
        /// <summary>
        /// 0-噬魂(主吃用),1-转移(用转到主)
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqSoulEater pkg = new ReqSoulEater();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MainItemID = MainItemID.Clone() as ObjectGuidInfo;
            pkg.UseItemID = UseItemID.Clone() as ObjectGuidInfo;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                MainItemID.Serializtion(oByteArray, bSerialize);
                UseItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                MainItemID.Serializtion(oByteArray, bSerialize);
                UseItemID.Serializtion(oByteArray, bSerialize);
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqSoulEater()
		{
			PacketID = 923;
		}
    }

    /// <summary>
    ///  [请求类] 装备噬魂 创建者
    /// </summary>
    [Package(923)]
    public partial class ReqSoulEaterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSoulEater();
        }
    }


    /// <summary>
    ///  [响应类]装备噬魂
    /// </summary>
    public partial class ResSoulEater: Packet 
    {
        /// <summary>
        /// 0-成功,1-失败
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo MainItemID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo UseItemID = new ObjectGuidInfo();
        /// <summary>
        /// 主装备当前噬魂值
        /// </summary>
        public uint MainItemSoulValue;
        /// <summary>
        /// 使用装备当前噬魂值
        /// </summary>
        public uint UseItemSoulValue;
        /// <summary>
        /// 0-噬魂,1-噬魂转移
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResSoulEater pkg = new ResSoulEater();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MainItemID = MainItemID.Clone() as ObjectGuidInfo;
            pkg.UseItemID = UseItemID.Clone() as ObjectGuidInfo;
            pkg.MainItemSoulValue = MainItemSoulValue;
            pkg.UseItemSoulValue = UseItemSoulValue;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                MainItemID.Serializtion(oByteArray, bSerialize);
                UseItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MainItemSoulValue);
                oByteArray.WriteUInt(UseItemSoulValue);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                MainItemID.Serializtion(oByteArray, bSerialize);
                UseItemID.Serializtion(oByteArray, bSerialize);
                MainItemSoulValue = oByteArray.ReadUInt();
                UseItemSoulValue = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResSoulEater()
		{
			PacketID = 924;
		}
    }

    /// <summary>
    ///  [响应类] 装备噬魂 创建者
    /// </summary>
    [Package(924)]
    public partial class ResSoulEaterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSoulEater();
        }
    }


    /// <summary>
    ///  [请求类]通知增加活动日志
    /// </summary>
    public partial class ReqAddAssembleActivityLog: Packet 
    {

        public override Packet Clone()
        {
            ReqAddAssembleActivityLog pkg = new ReqAddAssembleActivityLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddAssembleActivityLog()
		{
			PacketID = 925;
		}
    }

    /// <summary>
    ///  [请求类] 通知增加活动日志 创建者
    /// </summary>
    [Package(925)]
    public partial class ReqAddAssembleActivityLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddAssembleActivityLog();
        }
    }


    /// <summary>
    ///  [响应类]通知增加活动日志
    /// </summary>
    public partial class ResAddAssembleActivityLog: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public byte Type;
        /// <summary>
        /// 子类型
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 
        /// </summary>
        public AssembleActivityLog Log = new AssembleActivityLog();

        public override Packet Clone()
        {
            ResAddAssembleActivityLog pkg = new ResAddAssembleActivityLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.Log = Log.Clone() as AssembleActivityLog;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
                Log.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
                Log.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddAssembleActivityLog()
		{
			PacketID = 926;
		}
    }

    /// <summary>
    ///  [响应类] 通知增加活动日志 创建者
    /// </summary>
    [Package(926)]
    public partial class ResAddAssembleActivityLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddAssembleActivityLog();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端日志列表
    /// </summary>
    public partial class ReqNoticeAssembleActivityList: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeAssembleActivityList pkg = new ReqNoticeAssembleActivityList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeAssembleActivityList()
		{
			PacketID = 927;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端日志列表 创建者
    /// </summary>
    [Package(927)]
    public partial class ReqNoticeAssembleActivityListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeAssembleActivityList();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端日志列表
    /// </summary>
    public partial class ResNoticeAssembleActivityList: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public byte Type;
        /// <summary>
        /// 子类型
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 日志列表
        /// </summary>
        public List<AssembleActivityLog> LogList = new List<AssembleActivityLog>();

        public override Packet Clone()
        {
            ResNoticeAssembleActivityList pkg = new ResNoticeAssembleActivityList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            foreach (AssembleActivityLog item in LogList)
            {
                pkg.LogList.Add(item.Clone() as AssembleActivityLog);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
                oByteArray.WriteUShort((ushort)LogList.Count);
                for (int i = 0; i < LogList.Count; i++)
                {
                    LogList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
                int LogListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < LogListCount; i++)
                {
                    AssembleActivityLog obj = new AssembleActivityLog();
                    obj.Serializtion(oByteArray, bSerialize);
                    LogList.Add(obj);
                }
            }
        }
		public ResNoticeAssembleActivityList()
		{
			PacketID = 928;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端日志列表 创建者
    /// </summary>
    [Package(928)]
    public partial class ResNoticeAssembleActivityListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeAssembleActivityList();
        }
    }


    /// <summary>
    ///  [请求类]领取首充奖励
    /// </summary>
    public partial class ReqTakeFirstPayAward: Packet 
    {
        /// <summary>
        /// 第几天
        /// </summary>
        public uint Index;

        public override Packet Clone()
        {
            ReqTakeFirstPayAward pkg = new ReqTakeFirstPayAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Index = Index;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Index);
            }
            else
            {
                Index = oByteArray.ReadUInt();
            }
        }
		public ReqTakeFirstPayAward()
		{
			PacketID = 929;
		}
    }

    /// <summary>
    ///  [请求类] 领取首充奖励 创建者
    /// </summary>
    [Package(929)]
    public partial class ReqTakeFirstPayAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeFirstPayAward();
        }
    }


    /// <summary>
    ///  [响应类]领取首充奖励
    /// </summary>
    public partial class ResTakeFirstPayAward: Packet 
    {
        /// <summary>
        /// 0成功1没充钱2领过了3包满
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTakeFirstPayAward pkg = new ResTakeFirstPayAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResTakeFirstPayAward()
		{
			PacketID = 930;
		}
    }

    /// <summary>
    ///  [响应类] 领取首充奖励 创建者
    /// </summary>
    [Package(930)]
    public partial class ResTakeFirstPayAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeFirstPayAward();
        }
    }


    /// <summary>
    ///  [请求类]更新装备强化等级
    /// </summary>
    public partial class ReqNoticeUpdateItemStrength: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint Strength;

        public override Packet Clone()
        {
            ReqNoticeUpdateItemStrength pkg = new ReqNoticeUpdateItemStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.Strength = Strength;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Strength);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                Strength = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeUpdateItemStrength()
		{
			PacketID = 931;
		}
    }

    /// <summary>
    ///  [请求类] 更新装备强化等级 创建者
    /// </summary>
    [Package(931)]
    public partial class ReqNoticeUpdateItemStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemStrength();
        }
    }


    /// <summary>
    ///  [响应类]更新装备强化等级
    /// </summary>
    public partial class ResNoticeUpdateItemStrength: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateItemStrength pkg = new ResNoticeUpdateItemStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateItemStrength()
		{
			PacketID = 932;
		}
    }

    /// <summary>
    ///  [响应类] 更新装备强化等级 创建者
    /// </summary>
    [Package(932)]
    public partial class ResNoticeUpdateItemStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemStrength();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端增加或者删除活动
    /// </summary>
    public partial class ReqAddAssembleActivity: Packet 
    {

        public override Packet Clone()
        {
            ReqAddAssembleActivity pkg = new ReqAddAssembleActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddAssembleActivity()
		{
			PacketID = 933;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端增加或者删除活动 创建者
    /// </summary>
    [Package(933)]
    public partial class ReqAddAssembleActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddAssembleActivity();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端增加或者删除活动
    /// </summary>
    public partial class ResAddAssembleActivity: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public byte Type;
        /// <summary>
        /// 子类型
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 玩家信息
        /// </summary>
        public AssembleActivityInfo ActivityInfo = new AssembleActivityInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;

        public override Packet Clone()
        {
            ResAddAssembleActivity pkg = new ResAddAssembleActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.ActivityInfo = ActivityInfo.Clone() as AssembleActivityInfo;
            pkg.TitleTID = TitleTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
                ActivityInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(TitleTID);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
                ActivityInfo.Serializtion(oByteArray, bSerialize);
                TitleTID = oByteArray.ReadUInt();
            }
        }
		public ResAddAssembleActivity()
		{
			PacketID = 934;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端增加或者删除活动 创建者
    /// </summary>
    [Package(934)]
    public partial class ResAddAssembleActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddAssembleActivity();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端删除一个组装活动
    /// </summary>
    public partial class ReqDelAssembleActivity: Packet 
    {

        public override Packet Clone()
        {
            ReqDelAssembleActivity pkg = new ReqDelAssembleActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDelAssembleActivity()
		{
			PacketID = 935;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端删除一个组装活动 创建者
    /// </summary>
    [Package(935)]
    public partial class ReqDelAssembleActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDelAssembleActivity();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端删除一个组装活动
    /// </summary>
    public partial class ResDelAssembleActivity: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public byte Type;
        /// <summary>
        /// 子类型
        /// </summary>
        public byte SubType;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;

        public override Packet Clone()
        {
            ResDelAssembleActivity pkg = new ResDelAssembleActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.TitleTID = TitleTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(SubType);
                oByteArray.WriteUInt(TitleTID);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadByte();
                TitleTID = oByteArray.ReadUInt();
            }
        }
		public ResDelAssembleActivity()
		{
			PacketID = 936;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端删除一个组装活动 创建者
    /// </summary>
    [Package(936)]
    public partial class ResDelAssembleActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDelAssembleActivity();
        }
    }


    /// <summary>
    ///  [请求类]发送行会救援令
    /// </summary>
    public partial class ReqGuildSOS: Packet 
    {

        public override Packet Clone()
        {
            ReqGuildSOS pkg = new ReqGuildSOS();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGuildSOS()
		{
			PacketID = 937;
		}
    }

    /// <summary>
    ///  [请求类] 发送行会救援令 创建者
    /// </summary>
    [Package(937)]
    public partial class ReqGuildSOSCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGuildSOS();
        }
    }


    /// <summary>
    ///  [响应类]发送行会救援令
    /// </summary>
    public partial class ResGuildSOS: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 发送玩家名字
        /// </summary>
        public string PlayerName;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 0是行会求救1是押镖求救
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResGuildSOS pkg = new ResGuildSOS();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PlayerName = PlayerName;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUTF(PlayerName);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                PlayerName = oByteArray.ReadUTF();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
            }
        }
		public ResGuildSOS()
		{
			PacketID = 938;
		}
    }

    /// <summary>
    ///  [响应类] 发送行会救援令 创建者
    /// </summary>
    [Package(938)]
    public partial class ResGuildSOSCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGuildSOS();
        }
    }


    /// <summary>
    ///  [请求类]请求祈福
    /// </summary>
    public partial class ReqPray: Packet 
    {
        /// <summary>
        /// 0是绑金1是绑元
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqPray pkg = new ReqPray();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqPray()
		{
			PacketID = 939;
		}
    }

    /// <summary>
    ///  [请求类] 请求祈福 创建者
    /// </summary>
    [Package(939)]
    public partial class ReqPrayCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPray();
        }
    }


    /// <summary>
    ///  [响应类]请求祈福
    /// </summary>
    public partial class ResPray: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 0是绑金1是绑元
        /// </summary>
        public byte Type;
        /// <summary>
        /// 货币总额
        /// </summary>
        public uint MoneyNum;

        public override Packet Clone()
        {
            ResPray pkg = new ResPray();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.MoneyNum = MoneyNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(MoneyNum);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
                MoneyNum = oByteArray.ReadUInt();
            }
        }
		public ResPray()
		{
			PacketID = 940;
		}
    }

    /// <summary>
    ///  [响应类] 请求祈福 创建者
    /// </summary>
    [Package(940)]
    public partial class ResPrayCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPray();
        }
    }


    /// <summary>
    ///  [请求类]升级内功
    /// </summary>
    public partial class ReqUpGradeInternalWork: Packet 
    {

        public override Packet Clone()
        {
            ReqUpGradeInternalWork pkg = new ReqUpGradeInternalWork();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpGradeInternalWork()
		{
			PacketID = 941;
		}
    }

    /// <summary>
    ///  [请求类] 升级内功 创建者
    /// </summary>
    [Package(941)]
    public partial class ReqUpGradeInternalWorkCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpGradeInternalWork();
        }
    }


    /// <summary>
    ///  [响应类]升级内功
    /// </summary>
    public partial class ResUpGradeInternalWork: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResUpGradeInternalWork pkg = new ResUpGradeInternalWork();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResUpGradeInternalWork()
		{
			PacketID = 942;
		}
    }

    /// <summary>
    ///  [响应类] 升级内功 创建者
    /// </summary>
    [Package(942)]
    public partial class ResUpGradeInternalWorkCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpGradeInternalWork();
        }
    }


    /// <summary>
    ///  [请求类]更新成就信息
    /// </summary>
    public partial class ReqUpdateAchievementInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAchievementInfo pkg = new ReqUpdateAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAchievementInfo()
		{
			PacketID = 943;
		}
    }

    /// <summary>
    ///  [请求类] 更新成就信息 创建者
    /// </summary>
    [Package(943)]
    public partial class ReqUpdateAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAchievementInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新成就信息
    /// </summary>
    public partial class ResUpdateAchievementInfo: Packet 
    {
        /// <summary>
        /// 类型
        /// </summary>
        public byte Type;
        /// <summary>
        /// 当前值
        /// </summary>
        public uint Value;

        public override Packet Clone()
        {
            ResUpdateAchievementInfo pkg = new ResUpdateAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Value = Value;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(Value);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Value = oByteArray.ReadUInt();
            }
        }
		public ResUpdateAchievementInfo()
		{
			PacketID = 944;
		}
    }

    /// <summary>
    ///  [响应类] 更新成就信息 创建者
    /// </summary>
    [Package(944)]
    public partial class ResUpdateAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAchievementInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服怪物坐标
    /// </summary>
    public partial class ReqUpdateMonsterPoint: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMonsterPoint pkg = new ReqUpdateMonsterPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMonsterPoint()
		{
			PacketID = 945;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服怪物坐标 创建者
    /// </summary>
    [Package(945)]
    public partial class ReqUpdateMonsterPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMonsterPoint();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服怪物坐标
    /// </summary>
    public partial class ResUpdateMonsterPoint: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public uint MonsterID;
        /// <summary>
        /// 
        /// </summary>
        public ulong GuildGuid;

        public override Packet Clone()
        {
            ResUpdateMonsterPoint pkg = new ResUpdateMonsterPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.MonsterID = MonsterID;
            pkg.GuildGuid = GuildGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(MonsterID);
                oByteArray.WriteUInt64(GuildGuid);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                MonsterID = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
            }
        }
		public ResUpdateMonsterPoint()
		{
			PacketID = 946;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服怪物坐标 创建者
    /// </summary>
    [Package(946)]
    public partial class ResUpdateMonsterPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMonsterPoint();
        }
    }


    /// <summary>
    ///  [请求类]使用活动技能
    /// </summary>
    public partial class ReqUseActivitySkill: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo TargetID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqUseActivitySkill pkg = new ReqUseActivitySkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillID = SkillID;
            pkg.TargetID = TargetID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillID);
                TargetID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                SkillID = oByteArray.ReadUInt();
                TargetID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqUseActivitySkill()
		{
			PacketID = 947;
		}
    }

    /// <summary>
    ///  [请求类] 使用活动技能 创建者
    /// </summary>
    [Package(947)]
    public partial class ReqUseActivitySkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseActivitySkill();
        }
    }


    /// <summary>
    ///  [响应类]使用活动技能
    /// </summary>
    public partial class ResUseActivitySkill: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 
        /// </summary>
        public ulong TargetGuid;

        public override Packet Clone()
        {
            ResUseActivitySkill pkg = new ResUseActivitySkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.SkillID = SkillID;
            pkg.TargetGuid = TargetGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteUInt64(TargetGuid);
            }
            else
            {
                Result = oByteArray.ReadByte();
                SkillID = oByteArray.ReadUInt();
                TargetGuid = oByteArray.ReadUInt64();
            }
        }
		public ResUseActivitySkill()
		{
			PacketID = 948;
		}
    }

    /// <summary>
    ///  [响应类] 使用活动技能 创建者
    /// </summary>
    [Package(948)]
    public partial class ResUseActivitySkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseActivitySkill();
        }
    }


    /// <summary>
    ///  [请求类]回收注灵等级
    /// </summary>
    public partial class ReqRecycleItemFixLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqRecycleItemFixLv pkg = new ReqRecycleItemFixLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqRecycleItemFixLv()
		{
			PacketID = 949;
		}
    }

    /// <summary>
    ///  [请求类] 回收注灵等级 创建者
    /// </summary>
    [Package(949)]
    public partial class ReqRecycleItemFixLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRecycleItemFixLv();
        }
    }


    /// <summary>
    ///  [响应类]回收注灵等级
    /// </summary>
    public partial class ResRecycleItemFixLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ResRecycleItemFixLv pkg = new ResRecycleItemFixLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                Result = oByteArray.ReadByte();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ResRecycleItemFixLv()
		{
			PacketID = 950;
		}
    }

    /// <summary>
    ///  [响应类] 回收注灵等级 创建者
    /// </summary>
    [Package(950)]
    public partial class ResRecycleItemFixLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRecycleItemFixLv();
        }
    }


    /// <summary>
    ///  [请求类]擒龙手更新目标位置和自身朝向
    /// </summary>
    public partial class ReqQinLongShouSkill: Packet 
    {

        public override Packet Clone()
        {
            ReqQinLongShouSkill pkg = new ReqQinLongShouSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqQinLongShouSkill()
		{
			PacketID = 951;
		}
    }

    /// <summary>
    ///  [请求类] 擒龙手更新目标位置和自身朝向 创建者
    /// </summary>
    [Package(951)]
    public partial class ReqQinLongShouSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqQinLongShouSkill();
        }
    }


    /// <summary>
    ///  [响应类]擒龙手更新目标位置和自身朝向
    /// </summary>
    public partial class ResQinLongShouSkill: Packet 
    {
        /// <summary>
        /// 目标GUID
        /// </summary>
        public ObjectGuidInfo TargetGuid = new ObjectGuidInfo();
        /// <summary>
        /// 目标的新位置X
        /// </summary>
        public uint TargetX;
        /// <summary>
        /// 目标的新位置Y
        /// </summary>
        public uint TargetY;
        /// <summary>
        /// 目标的新朝向
        /// </summary>
        public uint TargetDirect;
        /// <summary>
        /// 攻击者的GUID
        /// </summary>
        public ObjectGuidInfo AttackGuid = new ObjectGuidInfo();
        /// <summary>
        /// 攻击者的新朝向
        /// </summary>
        public uint AttackDirect;

        public override Packet Clone()
        {
            ResQinLongShouSkill pkg = new ResQinLongShouSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetGuid = TargetGuid.Clone() as ObjectGuidInfo;
            pkg.TargetX = TargetX;
            pkg.TargetY = TargetY;
            pkg.TargetDirect = TargetDirect;
            pkg.AttackGuid = AttackGuid.Clone() as ObjectGuidInfo;
            pkg.AttackDirect = AttackDirect;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TargetGuid.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(TargetX);
                oByteArray.WriteUInt(TargetY);
                oByteArray.WriteUInt(TargetDirect);
                AttackGuid.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(AttackDirect);
            }
            else
            {
                TargetGuid.Serializtion(oByteArray, bSerialize);
                TargetX = oByteArray.ReadUInt();
                TargetY = oByteArray.ReadUInt();
                TargetDirect = oByteArray.ReadUInt();
                AttackGuid.Serializtion(oByteArray, bSerialize);
                AttackDirect = oByteArray.ReadUInt();
            }
        }
		public ResQinLongShouSkill()
		{
			PacketID = 952;
		}
    }

    /// <summary>
    ///  [响应类] 擒龙手更新目标位置和自身朝向 创建者
    /// </summary>
    [Package(952)]
    public partial class ResQinLongShouSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResQinLongShouSkill();
        }
    }


    /// <summary>
    ///  [请求类]更新巡城任务状态
    /// </summary>
    public partial class ReqNoticePatrolCityTaskState: Packet 
    {
        /// <summary>
        /// 当前任务状态 0未接受，1正在进行中，2已失败，3已完成 
        /// </summary>
        public uint TaskState;

        public override Packet Clone()
        {
            ReqNoticePatrolCityTaskState pkg = new ReqNoticePatrolCityTaskState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskState = TaskState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskState);
            }
            else
            {
                TaskState = oByteArray.ReadUInt();
            }
        }
		public ReqNoticePatrolCityTaskState()
		{
			PacketID = 953;
		}
    }

    /// <summary>
    ///  [请求类] 更新巡城任务状态 创建者
    /// </summary>
    [Package(953)]
    public partial class ReqNoticePatrolCityTaskStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePatrolCityTaskState();
        }
    }


    /// <summary>
    ///  [响应类]更新巡城任务状态
    /// </summary>
    public partial class ResNoticePatrolCityTaskState: Packet 
    {
        /// <summary>
        /// 当前任务状态 0未接受，1正在进行中，2已失败，3已完成 
        /// </summary>
        public uint TaskState;

        public override Packet Clone()
        {
            ResNoticePatrolCityTaskState pkg = new ResNoticePatrolCityTaskState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskState = TaskState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskState);
            }
            else
            {
                TaskState = oByteArray.ReadUInt();
            }
        }
		public ResNoticePatrolCityTaskState()
		{
			PacketID = 954;
		}
    }

    /// <summary>
    ///  [响应类] 更新巡城任务状态 创建者
    /// </summary>
    [Package(954)]
    public partial class ResNoticePatrolCityTaskStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePatrolCityTaskState();
        }
    }


    /// <summary>
    ///  [请求类]圣器副本的boss顺序
    /// </summary>
    public partial class ReqMaterialBossInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqMaterialBossInfo pkg = new ReqMaterialBossInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqMaterialBossInfo()
		{
			PacketID = 955;
		}
    }

    /// <summary>
    ///  [请求类] 圣器副本的boss顺序 创建者
    /// </summary>
    [Package(955)]
    public partial class ReqMaterialBossInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMaterialBossInfo();
        }
    }


    /// <summary>
    ///  [响应类]圣器副本的boss顺序
    /// </summary>
    public partial class ResMaterialBossInfo: Packet 
    {
        /// <summary>
        /// Boss的ID顺序
        /// </summary>
        public List<uint> BossList = new List<uint>();
        /// <summary>
        /// 当前的死亡顺序
        /// </summary>
        public List<uint> DieList = new List<uint>();
        /// <summary>
        /// 当前旷工死亡数量
        /// </summary>
        public uint CurDieCount;
        /// <summary>
        /// 副本结束时间戳
        /// </summary>
        public uint EndTime;
        /// <summary>
        /// 剩余怪物数量
        /// </summary>
        public uint MonsterCount;

        public override Packet Clone()
        {
            ResMaterialBossInfo pkg = new ResMaterialBossInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in BossList)
            {
                pkg.BossList.Add(item);
            }
            foreach (var item in DieList)
            {
                pkg.DieList.Add(item);
            }
            pkg.CurDieCount = CurDieCount;
            pkg.EndTime = EndTime;
            pkg.MonsterCount = MonsterCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)BossList.Count);
                for (int i = 0; i < BossList.Count; i++)
                {
                    oByteArray.WriteUInt(BossList[i]);
                }
                oByteArray.WriteUShort((ushort)DieList.Count);
                for (int i = 0; i < DieList.Count; i++)
                {
                    oByteArray.WriteUInt(DieList[i]);
                }
                oByteArray.WriteUInt(CurDieCount);
                oByteArray.WriteUInt(EndTime);
                oByteArray.WriteUInt(MonsterCount);
            }
            else
            {
                int BossListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BossListCount; i++)
                {
                    BossList.Add(oByteArray.ReadUInt());
                }
                int DieListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DieListCount; i++)
                {
                    DieList.Add(oByteArray.ReadUInt());
                }
                CurDieCount = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
                MonsterCount = oByteArray.ReadUInt();
            }
        }
		public ResMaterialBossInfo()
		{
			PacketID = 956;
		}
    }

    /// <summary>
    ///  [响应类] 圣器副本的boss顺序 创建者
    /// </summary>
    [Package(956)]
    public partial class ResMaterialBossInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMaterialBossInfo();
        }
    }


    /// <summary>
    ///  [请求类]当巡城怪被击杀
    /// </summary>
    public partial class ReqOnPlayerMonsterDie: Packet 
    {
        /// <summary>
        /// 巡城怪主人
        /// </summary>
        public ObjectGuidInfo MonsterOwnerID = new ObjectGuidInfo();
        /// <summary>
        /// 击杀巡城怪玩家ID
        /// </summary>
        public ObjectGuidInfo AttackerGuid = new ObjectGuidInfo();
        /// <summary>
        /// 参照怪物表type
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqOnPlayerMonsterDie pkg = new ReqOnPlayerMonsterDie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterOwnerID = MonsterOwnerID.Clone() as ObjectGuidInfo;
            pkg.AttackerGuid = AttackerGuid.Clone() as ObjectGuidInfo;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                MonsterOwnerID.Serializtion(oByteArray, bSerialize);
                AttackerGuid.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Type);
            }
            else
            {
                MonsterOwnerID.Serializtion(oByteArray, bSerialize);
                AttackerGuid.Serializtion(oByteArray, bSerialize);
                Type = oByteArray.ReadByte();
            }
        }
		public ReqOnPlayerMonsterDie()
		{
			PacketID = 957;
		}
    }

    /// <summary>
    ///  [请求类] 当巡城怪被击杀 创建者
    /// </summary>
    [Package(957)]
    public partial class ReqOnPlayerMonsterDieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOnPlayerMonsterDie();
        }
    }


    /// <summary>
    ///  [响应类]当巡城怪被击杀
    /// </summary>
    public partial class ResOnPlayerMonsterDie: Packet 
    {
        /// <summary>
        /// 巡城怪主人
        /// </summary>
        public ObjectGuidInfo MonsterOwnerID = new ObjectGuidInfo();
        /// <summary>
        /// 击杀巡城怪玩家ID
        /// </summary>
        public ObjectGuidInfo AttackerGuid = new ObjectGuidInfo();
        /// <summary>
        /// 任务模板ID
        /// </summary>
        public uint TaskTID;

        public override Packet Clone()
        {
            ResOnPlayerMonsterDie pkg = new ResOnPlayerMonsterDie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterOwnerID = MonsterOwnerID.Clone() as ObjectGuidInfo;
            pkg.AttackerGuid = AttackerGuid.Clone() as ObjectGuidInfo;
            pkg.TaskTID = TaskTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                MonsterOwnerID.Serializtion(oByteArray, bSerialize);
                AttackerGuid.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(TaskTID);
            }
            else
            {
                MonsterOwnerID.Serializtion(oByteArray, bSerialize);
                AttackerGuid.Serializtion(oByteArray, bSerialize);
                TaskTID = oByteArray.ReadUInt();
            }
        }
		public ResOnPlayerMonsterDie()
		{
			PacketID = 958;
		}
    }

    /// <summary>
    ///  [响应类] 当巡城怪被击杀 创建者
    /// </summary>
    [Package(958)]
    public partial class ResOnPlayerMonsterDieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOnPlayerMonsterDie();
        }
    }


    /// <summary>
    ///  [请求类]角色等级兑换其他系统经验
    /// </summary>
    public partial class ReqLevelExchangeSysExp: Packet 
    {
        /// <summary>
        /// 0是兑换境界值1是兑换魔器经验
        /// </summary>
        public byte Type;
        /// <summary>
        /// 是否一键兑换
        /// </summary>
        public bool Onekey;

        public override Packet Clone()
        {
            ReqLevelExchangeSysExp pkg = new ReqLevelExchangeSysExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Onekey = Onekey;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteBoolean(Onekey);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Onekey = oByteArray.ReadBoolean();
            }
        }
		public ReqLevelExchangeSysExp()
		{
			PacketID = 959;
		}
    }

    /// <summary>
    ///  [请求类] 角色等级兑换其他系统经验 创建者
    /// </summary>
    [Package(959)]
    public partial class ReqLevelExchangeSysExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLevelExchangeSysExp();
        }
    }


    /// <summary>
    ///  [响应类]角色等级兑换其他系统经验
    /// </summary>
    public partial class ResLevelExchangeSysExp: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 0是兑换境界值1是兑换魔器经验2兑换突破值
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResLevelExchangeSysExp pkg = new ResLevelExchangeSysExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
            }
        }
		public ResLevelExchangeSysExp()
		{
			PacketID = 960;
		}
    }

    /// <summary>
    ///  [响应类] 角色等级兑换其他系统经验 创建者
    /// </summary>
    [Package(960)]
    public partial class ResLevelExchangeSysExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLevelExchangeSysExp();
        }
    }


    /// <summary>
    ///  [请求类]请求自己的巡城怪位置
    /// </summary>
    public partial class ReqFindMyPatrolCityMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqFindMyPatrolCityMonster pkg = new ReqFindMyPatrolCityMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqFindMyPatrolCityMonster()
		{
			PacketID = 961;
		}
    }

    /// <summary>
    ///  [请求类] 请求自己的巡城怪位置 创建者
    /// </summary>
    [Package(961)]
    public partial class ReqFindMyPatrolCityMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFindMyPatrolCityMonster();
        }
    }


    /// <summary>
    ///  [响应类]请求自己的巡城怪位置
    /// </summary>
    public partial class ResFindMyPatrolCityMonster: Packet 
    {
        /// <summary>
        /// 坐标X
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 坐标Y
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 巡城怪GUID
        /// </summary>
        public ObjectGuidInfo MonsterGuid = new ObjectGuidInfo();
        /// <summary>
        /// 返回结果
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResFindMyPatrolCityMonster pkg = new ResFindMyPatrolCityMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.MonsterGuid = MonsterGuid.Clone() as ObjectGuidInfo;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                MonsterGuid.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                MonsterGuid.Serializtion(oByteArray, bSerialize);
                Result = oByteArray.ReadUInt();
            }
        }
		public ResFindMyPatrolCityMonster()
		{
			PacketID = 962;
		}
    }

    /// <summary>
    ///  [响应类] 请求自己的巡城怪位置 创建者
    /// </summary>
    [Package(962)]
    public partial class ResFindMyPatrolCityMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFindMyPatrolCityMonster();
        }
    }


    /// <summary>
    ///  [请求类]玩家下线需要删除特殊怪
    /// </summary>
    public partial class ReqDelPlayerMonster: Packet 
    {

        public override Packet Clone()
        {
            ReqDelPlayerMonster pkg = new ReqDelPlayerMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDelPlayerMonster()
		{
			PacketID = 963;
		}
    }

    /// <summary>
    ///  [请求类] 玩家下线需要删除特殊怪 创建者
    /// </summary>
    [Package(963)]
    public partial class ReqDelPlayerMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDelPlayerMonster();
        }
    }


    /// <summary>
    ///  [响应类]玩家下线需要删除特殊怪
    /// </summary>
    public partial class ResDelPlayerMonster: Packet 
    {
        /// <summary>
        /// 放弃的玩家GUID
        /// </summary>
        public ulong OwnerGuid;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ResDelPlayerMonster pkg = new ResDelPlayerMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OwnerGuid = OwnerGuid;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(OwnerGuid);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                OwnerGuid = oByteArray.ReadUInt64();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ResDelPlayerMonster()
		{
			PacketID = 964;
		}
    }

    /// <summary>
    ///  [响应类] 玩家下线需要删除特殊怪 创建者
    /// </summary>
    [Package(964)]
    public partial class ResDelPlayerMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDelPlayerMonster();
        }
    }


    /// <summary>
    ///  [请求类]更新魔法阵信息
    /// </summary>
    public partial class ReqUpdateMagicCircleInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMagicCircleInfo pkg = new ReqUpdateMagicCircleInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMagicCircleInfo()
		{
			PacketID = 965;
		}
    }

    /// <summary>
    ///  [请求类] 更新魔法阵信息 创建者
    /// </summary>
    [Package(965)]
    public partial class ReqUpdateMagicCircleInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMagicCircleInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新魔法阵信息
    /// </summary>
    public partial class ResUpdateMagicCircleInfo: Packet 
    {
        /// <summary>
        /// 当前活动结束时间
        /// </summary>
        public uint EndTime;
        /// <summary>
        /// 当前数量
        /// </summary>
        public uint CurNum;

        public override Packet Clone()
        {
            ResUpdateMagicCircleInfo pkg = new ResUpdateMagicCircleInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EndTime = EndTime;
            pkg.CurNum = CurNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EndTime);
                oByteArray.WriteUInt(CurNum);
            }
            else
            {
                EndTime = oByteArray.ReadUInt();
                CurNum = oByteArray.ReadUInt();
            }
        }
		public ResUpdateMagicCircleInfo()
		{
			PacketID = 966;
		}
    }

    /// <summary>
    ///  [响应类] 更新魔法阵信息 创建者
    /// </summary>
    [Package(966)]
    public partial class ResUpdateMagicCircleInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMagicCircleInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新魔法阵数量
    /// </summary>
    public partial class ReqUpdateMagicCount: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMagicCount pkg = new ReqUpdateMagicCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMagicCount()
		{
			PacketID = 967;
		}
    }

    /// <summary>
    ///  [请求类] 更新魔法阵数量 创建者
    /// </summary>
    [Package(967)]
    public partial class ReqUpdateMagicCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMagicCount();
        }
    }


    /// <summary>
    ///  [响应类]更新魔法阵数量
    /// </summary>
    public partial class ResUpdateMagicCount: Packet 
    {
        /// <summary>
        /// 当前数量
        /// </summary>
        public uint CurCount;

        public override Packet Clone()
        {
            ResUpdateMagicCount pkg = new ResUpdateMagicCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurCount = CurCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurCount);
            }
            else
            {
                CurCount = oByteArray.ReadUInt();
            }
        }
		public ResUpdateMagicCount()
		{
			PacketID = 968;
		}
    }

    /// <summary>
    ///  [响应类] 更新魔法阵数量 创建者
    /// </summary>
    [Package(968)]
    public partial class ResUpdateMagicCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMagicCount();
        }
    }


    /// <summary>
    ///  [请求类]更新服务器数值
    /// </summary>
    public partial class ReqUpdateWorldData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateWorldData pkg = new ReqUpdateWorldData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateWorldData()
		{
			PacketID = 969;
		}
    }

    /// <summary>
    ///  [请求类] 更新服务器数值 创建者
    /// </summary>
    [Package(969)]
    public partial class ReqUpdateWorldDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateWorldData();
        }
    }


    /// <summary>
    ///  [响应类]更新服务器数值
    /// </summary>
    public partial class ResUpdateWorldData: Packet 
    {
        /// <summary>
        /// 当前魔法值数量
        /// </summary>
        public uint uCount;
        /// <summary>
        /// Boss死亡掉落信息
        /// </summary>
        public string BossDropInfo;
        /// <summary>
        /// 聊天信息
        /// </summary>
        public string ChatInfo;
        /// <summary>
        /// 奖池元宝
        /// </summary>
        public int Money;
        /// <summary>
        /// 限时任务完成玩家数量
        /// </summary>
        public int LimiteTaskPassPlayer;
        /// <summary>
        /// 猜拳奖池
        /// </summary>
        public uint GuessMoneyPool;
        /// <summary>
        /// 日常活动刷新记录
        /// </summary>
        public string DailyActivity;
        /// <summary>
        /// 每周日常活动刷新时间
        /// </summary>
        public int DASSRefreshTime;
        /// <summary>
        /// 市场上次刷新时间[黑市、集市、比奇黑市、盟重黑市]
        /// </summary>
        public string MarketRefreshTime;
        /// <summary>
        /// 短时活动记录[当前活动TID|结束时间]
        /// </summary>
        public string LeisureActivity;
        /// <summary>
        /// 藏宝图地图等级
        /// </summary>
        public int TreasureMapLv;
        /// <summary>
        /// 世界境界等级
        /// </summary>
        public int StateMeanLv;
        /// <summary>
        /// 沙城捐赠当前奖池
        /// </summary>
        public uint ShachengDonationPool;
        /// <summary>
        /// gm封禁庆典活动开始时间
        /// </summary>
        public uint ForBidCelActBrginTime;
        /// <summary>
        /// gm封禁庆典活动结束时间
        /// </summary>
        public uint ForBidCelActEndTime;
        /// <summary>
        /// 奖励大厅开启过的活动id
        /// </summary>
        public string OpenedOpenedActivityIDs;
        /// <summary>
        /// 国战当前赛季世界境界等级
        /// </summary>
        public uint NationalCurrSeasonWdJJLv;

        public override Packet Clone()
        {
            ResUpdateWorldData pkg = new ResUpdateWorldData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.uCount = uCount;
            pkg.BossDropInfo = BossDropInfo;
            pkg.ChatInfo = ChatInfo;
            pkg.Money = Money;
            pkg.LimiteTaskPassPlayer = LimiteTaskPassPlayer;
            pkg.GuessMoneyPool = GuessMoneyPool;
            pkg.DailyActivity = DailyActivity;
            pkg.DASSRefreshTime = DASSRefreshTime;
            pkg.MarketRefreshTime = MarketRefreshTime;
            pkg.LeisureActivity = LeisureActivity;
            pkg.TreasureMapLv = TreasureMapLv;
            pkg.StateMeanLv = StateMeanLv;
            pkg.ShachengDonationPool = ShachengDonationPool;
            pkg.ForBidCelActBrginTime = ForBidCelActBrginTime;
            pkg.ForBidCelActEndTime = ForBidCelActEndTime;
            pkg.OpenedOpenedActivityIDs = OpenedOpenedActivityIDs;
            pkg.NationalCurrSeasonWdJJLv = NationalCurrSeasonWdJJLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(uCount);
                oByteArray.WriteUTF(BossDropInfo);
                oByteArray.WriteUTF(ChatInfo);
                oByteArray.WriteInt(Money);
                oByteArray.WriteInt(LimiteTaskPassPlayer);
                oByteArray.WriteUInt(GuessMoneyPool);
                oByteArray.WriteUTF(DailyActivity);
                oByteArray.WriteInt(DASSRefreshTime);
                oByteArray.WriteUTF(MarketRefreshTime);
                oByteArray.WriteUTF(LeisureActivity);
                oByteArray.WriteInt(TreasureMapLv);
                oByteArray.WriteInt(StateMeanLv);
                oByteArray.WriteUInt(ShachengDonationPool);
                oByteArray.WriteUInt(ForBidCelActBrginTime);
                oByteArray.WriteUInt(ForBidCelActEndTime);
                oByteArray.WriteUTF(OpenedOpenedActivityIDs);
                oByteArray.WriteUInt(NationalCurrSeasonWdJJLv);
            }
            else
            {
                uCount = oByteArray.ReadUInt();
                BossDropInfo = oByteArray.ReadUTF();
                ChatInfo = oByteArray.ReadUTF();
                Money = oByteArray.ReadInt();
                LimiteTaskPassPlayer = oByteArray.ReadInt();
                GuessMoneyPool = oByteArray.ReadUInt();
                DailyActivity = oByteArray.ReadUTF();
                DASSRefreshTime = oByteArray.ReadInt();
                MarketRefreshTime = oByteArray.ReadUTF();
                LeisureActivity = oByteArray.ReadUTF();
                TreasureMapLv = oByteArray.ReadInt();
                StateMeanLv = oByteArray.ReadInt();
                ShachengDonationPool = oByteArray.ReadUInt();
                ForBidCelActBrginTime = oByteArray.ReadUInt();
                ForBidCelActEndTime = oByteArray.ReadUInt();
                OpenedOpenedActivityIDs = oByteArray.ReadUTF();
                NationalCurrSeasonWdJJLv = oByteArray.ReadUInt();
            }
        }
		public ResUpdateWorldData()
		{
			PacketID = 970;
		}
    }

    /// <summary>
    ///  [响应类] 更新服务器数值 创建者
    /// </summary>
    [Package(970)]
    public partial class ResUpdateWorldDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateWorldData();
        }
    }


    /// <summary>
    ///  [请求类]删除活动日志
    /// </summary>
    public partial class ReqDelAssembleActivityLog: Packet 
    {

        public override Packet Clone()
        {
            ReqDelAssembleActivityLog pkg = new ReqDelAssembleActivityLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDelAssembleActivityLog()
		{
			PacketID = 971;
		}
    }

    /// <summary>
    ///  [请求类] 删除活动日志 创建者
    /// </summary>
    [Package(971)]
    public partial class ReqDelAssembleActivityLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDelAssembleActivityLog();
        }
    }


    /// <summary>
    ///  [响应类]删除活动日志
    /// </summary>
    public partial class ResDelAssembleActivityLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public uint SubType;

        public override Packet Clone()
        {
            ResDelAssembleActivityLog pkg = new ResDelAssembleActivityLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(SubType);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                SubType = oByteArray.ReadUInt();
            }
        }
		public ResDelAssembleActivityLog()
		{
			PacketID = 972;
		}
    }

    /// <summary>
    ///  [响应类] 删除活动日志 创建者
    /// </summary>
    [Package(972)]
    public partial class ResDelAssembleActivityLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDelAssembleActivityLog();
        }
    }


    /// <summary>
    ///  [请求类]请求签到
    /// </summary>
    public partial class ReqSignIn: Packet 
    {

        public override Packet Clone()
        {
            ReqSignIn pkg = new ReqSignIn();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSignIn()
		{
			PacketID = 973;
		}
    }

    /// <summary>
    ///  [请求类] 请求签到 创建者
    /// </summary>
    [Package(973)]
    public partial class ReqSignInCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSignIn();
        }
    }


    /// <summary>
    ///  [响应类]请求签到
    /// </summary>
    public partial class ResSignIn: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 是否有额外奖励
        /// </summary>
        public bool IsExtra;

        public override Packet Clone()
        {
            ResSignIn pkg = new ResSignIn();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.IsExtra = IsExtra;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteBoolean(IsExtra);
            }
            else
            {
                Result = oByteArray.ReadByte();
                IsExtra = oByteArray.ReadBoolean();
            }
        }
		public ResSignIn()
		{
			PacketID = 974;
		}
    }

    /// <summary>
    ///  [响应类] 请求签到 创建者
    /// </summary>
    [Package(974)]
    public partial class ResSignInCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSignIn();
        }
    }


    /// <summary>
    ///  [请求类]请求补签
    /// </summary>
    public partial class ReqRegistrationSign: Packet 
    {

        public override Packet Clone()
        {
            ReqRegistrationSign pkg = new ReqRegistrationSign();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRegistrationSign()
		{
			PacketID = 975;
		}
    }

    /// <summary>
    ///  [请求类] 请求补签 创建者
    /// </summary>
    [Package(975)]
    public partial class ReqRegistrationSignCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRegistrationSign();
        }
    }


    /// <summary>
    ///  [响应类]请求补签
    /// </summary>
    public partial class ResRegistrationSign: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 是否有额外奖励
        /// </summary>
        public bool IsExtra;

        public override Packet Clone()
        {
            ResRegistrationSign pkg = new ResRegistrationSign();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.IsExtra = IsExtra;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteBoolean(IsExtra);
            }
            else
            {
                Result = oByteArray.ReadByte();
                IsExtra = oByteArray.ReadBoolean();
            }
        }
		public ResRegistrationSign()
		{
			PacketID = 976;
		}
    }

    /// <summary>
    ///  [响应类] 请求补签 创建者
    /// </summary>
    [Package(976)]
    public partial class ResRegistrationSignCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRegistrationSign();
        }
    }


    /// <summary>
    ///  [请求类]请求七日登陆奖励
    /// </summary>
    public partial class ReqTakeSevenDayLoginAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqTakeSevenDayLoginAward pkg = new ReqTakeSevenDayLoginAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqTakeSevenDayLoginAward()
		{
			PacketID = 977;
		}
    }

    /// <summary>
    ///  [请求类] 请求七日登陆奖励 创建者
    /// </summary>
    [Package(977)]
    public partial class ReqTakeSevenDayLoginAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeSevenDayLoginAward();
        }
    }


    /// <summary>
    ///  [响应类]请求七日登陆奖励
    /// </summary>
    public partial class ResTakeSevenDayLoginAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTakeSevenDayLoginAward pkg = new ResTakeSevenDayLoginAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteByte(Result);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Result = oByteArray.ReadByte();
            }
        }
		public ResTakeSevenDayLoginAward()
		{
			PacketID = 978;
		}
    }

    /// <summary>
    ///  [响应类] 请求七日登陆奖励 创建者
    /// </summary>
    [Package(978)]
    public partial class ResTakeSevenDayLoginAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeSevenDayLoginAward();
        }
    }


    /// <summary>
    ///  [请求类]幻境传送
    /// </summary>
    public partial class ReqDreamlandTransfer: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqDreamlandTransfer pkg = new ReqDreamlandTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqDreamlandTransfer()
		{
			PacketID = 979;
		}
    }

    /// <summary>
    ///  [请求类] 幻境传送 创建者
    /// </summary>
    [Package(979)]
    public partial class ReqDreamlandTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDreamlandTransfer();
        }
    }


    /// <summary>
    ///  [响应类]幻境传送
    /// </summary>
    public partial class ResDreamlandTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResDreamlandTransfer pkg = new ResDreamlandTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResDreamlandTransfer()
		{
			PacketID = 980;
		}
    }

    /// <summary>
    ///  [响应类] 幻境传送 创建者
    /// </summary>
    [Package(980)]
    public partial class ResDreamlandTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDreamlandTransfer();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新沙巴克所属行会
    /// </summary>
    public partial class ReqNoticeBattleShabakWiner: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeBattleShabakWiner pkg = new ReqNoticeBattleShabakWiner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeBattleShabakWiner()
		{
			PacketID = 981;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新沙巴克所属行会 创建者
    /// </summary>
    [Package(981)]
    public partial class ReqNoticeBattleShabakWinerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeBattleShabakWiner();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新沙巴克所属行会
    /// </summary>
    public partial class ResNoticeBattleShabakWiner: Packet 
    {
        /// <summary>
        /// 公会ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeBattleShabakWiner pkg = new ResNoticeBattleShabakWiner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeBattleShabakWiner()
		{
			PacketID = 982;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新沙巴克所属行会 创建者
    /// </summary>
    [Package(982)]
    public partial class ResNoticeBattleShabakWinerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeBattleShabakWiner();
        }
    }


    /// <summary>
    ///  [请求类]沙城活动信息
    /// </summary>
    public partial class ReqUpdateShabakActivityInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateShabakActivityInfo pkg = new ReqUpdateShabakActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateShabakActivityInfo()
		{
			PacketID = 983;
		}
    }

    /// <summary>
    ///  [请求类] 沙城活动信息 创建者
    /// </summary>
    [Package(983)]
    public partial class ReqUpdateShabakActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateShabakActivityInfo();
        }
    }


    /// <summary>
    ///  [响应类]沙城活动信息
    /// </summary>
    public partial class ResUpdateShabakActivityInfo: Packet 
    {
        /// <summary>
        /// 占领沙巴克行会名字
        /// </summary>
        public string ShabakGuildName;
        /// <summary>
        /// 占领旗子行会名字
        /// </summary>
        public string BannerGuildName;
        /// <summary>
        /// 门是不是开的
        /// </summary>
        public bool IsCellarOpen;
        /// <summary>
        /// 是否归属变更
        /// </summary>
        public bool IsChange;

        public override Packet Clone()
        {
            ResUpdateShabakActivityInfo pkg = new ResUpdateShabakActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ShabakGuildName = ShabakGuildName;
            pkg.BannerGuildName = BannerGuildName;
            pkg.IsCellarOpen = IsCellarOpen;
            pkg.IsChange = IsChange;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ShabakGuildName);
                oByteArray.WriteUTF(BannerGuildName);
                oByteArray.WriteBoolean(IsCellarOpen);
                oByteArray.WriteBoolean(IsChange);
            }
            else
            {
                ShabakGuildName = oByteArray.ReadUTF();
                BannerGuildName = oByteArray.ReadUTF();
                IsCellarOpen = oByteArray.ReadBoolean();
                IsChange = oByteArray.ReadBoolean();
            }
        }
		public ResUpdateShabakActivityInfo()
		{
			PacketID = 984;
		}
    }

    /// <summary>
    ///  [响应类] 沙城活动信息 创建者
    /// </summary>
    [Package(984)]
    public partial class ResUpdateShabakActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateShabakActivityInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新地图Flag
    /// </summary>
    public partial class ReqUpdateMapCellFlag: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMapCellFlag pkg = new ReqUpdateMapCellFlag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMapCellFlag()
		{
			PacketID = 985;
		}
    }

    /// <summary>
    ///  [请求类] 更新地图Flag 创建者
    /// </summary>
    [Package(985)]
    public partial class ReqUpdateMapCellFlagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMapCellFlag();
        }
    }


    /// <summary>
    ///  [响应类]更新地图Flag
    /// </summary>
    public partial class ResUpdateMapCellFlag: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 格子
        /// </summary>
        public List<ItemInfo> MapCellVec = new List<ItemInfo>();
        /// <summary>
        /// 1是添加0是删除
        /// </summary>
        public byte Type;
        /// <summary>
        /// 标记
        /// </summary>
        public byte Flag;

        public override Packet Clone()
        {
            ResUpdateMapCellFlag pkg = new ResUpdateMapCellFlag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            foreach (ItemInfo item in MapCellVec)
            {
                pkg.MapCellVec.Add(item.Clone() as ItemInfo);
            }
            pkg.Type = Type;
            pkg.Flag = Flag;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUShort((ushort)MapCellVec.Count);
                for (int i = 0; i < MapCellVec.Count; i++)
                {
                    MapCellVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(Flag);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                int MapCellVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapCellVecCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    MapCellVec.Add(obj);
                }
                Type = oByteArray.ReadByte();
                Flag = oByteArray.ReadByte();
            }
        }
		public ResUpdateMapCellFlag()
		{
			PacketID = 986;
		}
    }

    /// <summary>
    ///  [响应类] 更新地图Flag 创建者
    /// </summary>
    [Package(986)]
    public partial class ResUpdateMapCellFlagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMapCellFlag();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服膜拜事件
    /// </summary>
    public partial class ReqNoticePlayerWorship: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticePlayerWorship pkg = new ReqNoticePlayerWorship();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticePlayerWorship()
		{
			PacketID = 987;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服膜拜事件 创建者
    /// </summary>
    [Package(987)]
    public partial class ReqNoticePlayerWorshipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePlayerWorship();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服膜拜事件
    /// </summary>
    public partial class ResNoticePlayerWorship: Packet 
    {
        /// <summary>
        /// 玩家Guid
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 膜拜ID
        /// </summary>
        public uint Worship;

        public override Packet Clone()
        {
            ResNoticePlayerWorship pkg = new ResNoticePlayerWorship();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.Worship = Worship;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(Worship);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                Worship = oByteArray.ReadUInt();
            }
        }
		public ResNoticePlayerWorship()
		{
			PacketID = 988;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服膜拜事件 创建者
    /// </summary>
    [Package(988)]
    public partial class ResNoticePlayerWorshipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePlayerWorship();
        }
    }


    /// <summary>
    ///  [请求类]设置自动拾取
    /// </summary>
    public partial class ReqSetAutoPickup: Packet 
    {
        /// <summary>
        /// 自动拾取药品
        /// </summary>
        public bool Drug;
        /// <summary>
        /// 自动拾取金币
        /// </summary>
        public bool Money;
        /// <summary>
        /// 自动拾取材料
        /// </summary>
        public bool Material;
        /// <summary>
        /// 自动拾取其他道具
        /// </summary>
        public bool ItemOther;
        /// <summary>
        /// 自动拾取装备
        /// </summary>
        public bool Equipment;
        /// <summary>
        /// 编号(自动拾取装备)
        /// </summary>
        public uint EquipIndex;
        /// <summary>
        /// 挂机范围
        /// </summary>
        public int GuaJiFanWei;
        /// <summary>
        /// 自动回收类型
        /// </summary>
        public int RecoverType;
        /// <summary>
        /// 自动使用龙元
        /// </summary>
        public bool AutoUseLongYuan;
        /// <summary>
        /// 自动使用龙鳞
        /// </summary>
        public bool AutoUseLongLin;
        /// <summary>
        /// 自动采集Boss
        /// </summary>
        public bool AutoBossCollect;
        /// <summary>
        /// 自动回收宠物蛋
        /// </summary>
        public int RecoverFPType;
        /// <summary>
        /// 自动拾取经验道具
        /// </summary>
        public bool ExpItem;
        /// <summary>
        /// 编号(自动拾取经验道具)
        /// </summary>
        public uint ExpItemIndex;

        public override Packet Clone()
        {
            ReqSetAutoPickup pkg = new ReqSetAutoPickup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Drug = Drug;
            pkg.Money = Money;
            pkg.Material = Material;
            pkg.ItemOther = ItemOther;
            pkg.Equipment = Equipment;
            pkg.EquipIndex = EquipIndex;
            pkg.GuaJiFanWei = GuaJiFanWei;
            pkg.RecoverType = RecoverType;
            pkg.AutoUseLongYuan = AutoUseLongYuan;
            pkg.AutoUseLongLin = AutoUseLongLin;
            pkg.AutoBossCollect = AutoBossCollect;
            pkg.RecoverFPType = RecoverFPType;
            pkg.ExpItem = ExpItem;
            pkg.ExpItemIndex = ExpItemIndex;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Drug);
                oByteArray.WriteBoolean(Money);
                oByteArray.WriteBoolean(Material);
                oByteArray.WriteBoolean(ItemOther);
                oByteArray.WriteBoolean(Equipment);
                oByteArray.WriteUInt(EquipIndex);
                oByteArray.WriteInt(GuaJiFanWei);
                oByteArray.WriteInt(RecoverType);
                oByteArray.WriteBoolean(AutoUseLongYuan);
                oByteArray.WriteBoolean(AutoUseLongLin);
                oByteArray.WriteBoolean(AutoBossCollect);
                oByteArray.WriteInt(RecoverFPType);
                oByteArray.WriteBoolean(ExpItem);
                oByteArray.WriteUInt(ExpItemIndex);
            }
            else
            {
                Drug = oByteArray.ReadBoolean();
                Money = oByteArray.ReadBoolean();
                Material = oByteArray.ReadBoolean();
                ItemOther = oByteArray.ReadBoolean();
                Equipment = oByteArray.ReadBoolean();
                EquipIndex = oByteArray.ReadUInt();
                GuaJiFanWei = oByteArray.ReadInt();
                RecoverType = oByteArray.ReadInt();
                AutoUseLongYuan = oByteArray.ReadBoolean();
                AutoUseLongLin = oByteArray.ReadBoolean();
                AutoBossCollect = oByteArray.ReadBoolean();
                RecoverFPType = oByteArray.ReadInt();
                ExpItem = oByteArray.ReadBoolean();
                ExpItemIndex = oByteArray.ReadUInt();
            }
        }
		public ReqSetAutoPickup()
		{
			PacketID = 989;
		}
    }

    /// <summary>
    ///  [请求类] 设置自动拾取 创建者
    /// </summary>
    [Package(989)]
    public partial class ReqSetAutoPickupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetAutoPickup();
        }
    }


    /// <summary>
    ///  [响应类]设置自动拾取
    /// </summary>
    public partial class ResSetAutoPickup: Packet 
    {

        public override Packet Clone()
        {
            ResSetAutoPickup pkg = new ResSetAutoPickup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSetAutoPickup()
		{
			PacketID = 990;
		}
    }

    /// <summary>
    ///  [响应类] 设置自动拾取 创建者
    /// </summary>
    [Package(990)]
    public partial class ResSetAutoPickupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetAutoPickup();
        }
    }


    /// <summary>
    ///  [请求类]悟道排行榜
    /// </summary>
    public partial class ReqNoticeSWActivityWuDaoRankInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeSWActivityWuDaoRankInfo pkg = new ReqNoticeSWActivityWuDaoRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeSWActivityWuDaoRankInfo()
		{
			PacketID = 991;
		}
    }

    /// <summary>
    ///  [请求类] 悟道排行榜 创建者
    /// </summary>
    [Package(991)]
    public partial class ReqNoticeSWActivityWuDaoRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSWActivityWuDaoRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]悟道排行榜
    /// </summary>
    public partial class ResNoticeSWActivityWuDaoRankInfo: Packet 
    {
        /// <summary>
        /// 排行榜信息
        /// </summary>
        public List<ServiceWarRankInfo> ActivityRankInfo = new List<ServiceWarRankInfo>();
        /// <summary>
        /// 悟道时间
        /// </summary>
        public int Value;
        /// <summary>
        /// 自己的排名
        /// </summary>
        public int Rank;
        /// <summary>
        /// Exp
        /// </summary>
        public int Exp;
        /// <summary>
        /// 活动ID
        /// </summary>
        public int ActivityID;

        public override Packet Clone()
        {
            ResNoticeSWActivityWuDaoRankInfo pkg = new ResNoticeSWActivityWuDaoRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ServiceWarRankInfo item in ActivityRankInfo)
            {
                pkg.ActivityRankInfo.Add(item.Clone() as ServiceWarRankInfo);
            }
            pkg.Value = Value;
            pkg.Rank = Rank;
            pkg.Exp = Exp;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ActivityRankInfo.Count);
                for (int i = 0; i < ActivityRankInfo.Count; i++)
                {
                    ActivityRankInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteInt(Value);
                oByteArray.WriteInt(Rank);
                oByteArray.WriteInt(Exp);
                oByteArray.WriteInt(ActivityID);
            }
            else
            {
                int ActivityRankInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ActivityRankInfoCount; i++)
                {
                    ServiceWarRankInfo obj = new ServiceWarRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ActivityRankInfo.Add(obj);
                }
                Value = oByteArray.ReadInt();
                Rank = oByteArray.ReadInt();
                Exp = oByteArray.ReadInt();
                ActivityID = oByteArray.ReadInt();
            }
        }
		public ResNoticeSWActivityWuDaoRankInfo()
		{
			PacketID = 992;
		}
    }

    /// <summary>
    ///  [响应类] 悟道排行榜 创建者
    /// </summary>
    [Package(992)]
    public partial class ResNoticeSWActivityWuDaoRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSWActivityWuDaoRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新buff信息
    /// </summary>
    public partial class ReqUpdateEffectInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateEffectInfo pkg = new ReqUpdateEffectInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateEffectInfo()
		{
			PacketID = 993;
		}
    }

    /// <summary>
    ///  [请求类] 更新buff信息 创建者
    /// </summary>
    [Package(993)]
    public partial class ReqUpdateEffectInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateEffectInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新buff信息
    /// </summary>
    public partial class ResUpdateEffectInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Data1;
        /// <summary>
        /// 
        /// </summary>
        public int Data2;
        /// <summary>
        /// 
        /// </summary>
        public int Data3;
        /// <summary>
        /// 
        /// </summary>
        public int Data4;
        /// <summary>
        /// BuffID
        /// </summary>
        public int BuffID;

        public override Packet Clone()
        {
            ResUpdateEffectInfo pkg = new ResUpdateEffectInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data1 = Data1;
            pkg.Data2 = Data2;
            pkg.Data3 = Data3;
            pkg.Data4 = Data4;
            pkg.BuffID = BuffID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Data1);
                oByteArray.WriteInt(Data2);
                oByteArray.WriteInt(Data3);
                oByteArray.WriteInt(Data4);
                oByteArray.WriteInt(BuffID);
            }
            else
            {
                Data1 = oByteArray.ReadInt();
                Data2 = oByteArray.ReadInt();
                Data3 = oByteArray.ReadInt();
                Data4 = oByteArray.ReadInt();
                BuffID = oByteArray.ReadInt();
            }
        }
		public ResUpdateEffectInfo()
		{
			PacketID = 994;
		}
    }

    /// <summary>
    ///  [响应类] 更新buff信息 创建者
    /// </summary>
    [Package(994)]
    public partial class ResUpdateEffectInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateEffectInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新引导信息
    /// </summary>
    public partial class ReqUpdateGuideInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateGuideInfo pkg = new ReqUpdateGuideInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateGuideInfo()
		{
			PacketID = 995;
		}
    }

    /// <summary>
    ///  [请求类] 更新引导信息 创建者
    /// </summary>
    [Package(995)]
    public partial class ReqUpdateGuideInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateGuideInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新引导信息
    /// </summary>
    public partial class ResUpdateGuideInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte TID;
        /// <summary>
        /// 0是未完成1是已完成2是已领奖;
        /// </summary>
        public byte State;

        public override Packet Clone()
        {
            ResUpdateGuideInfo pkg = new ResUpdateGuideInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(TID);
                oByteArray.WriteByte(State);
            }
            else
            {
                TID = oByteArray.ReadByte();
                State = oByteArray.ReadByte();
            }
        }
		public ResUpdateGuideInfo()
		{
			PacketID = 996;
		}
    }

    /// <summary>
    ///  [响应类] 更新引导信息 创建者
    /// </summary>
    [Package(996)]
    public partial class ResUpdateGuideInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateGuideInfo();
        }
    }


    /// <summary>
    ///  [请求类]增加时装
    /// </summary>
    public partial class ReqAddFashion: Packet 
    {

        public override Packet Clone()
        {
            ReqAddFashion pkg = new ReqAddFashion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddFashion()
		{
			PacketID = 997;
		}
    }

    /// <summary>
    ///  [请求类] 增加时装 创建者
    /// </summary>
    [Package(997)]
    public partial class ReqAddFashionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddFashion();
        }
    }


    /// <summary>
    ///  [响应类]增加时装
    /// </summary>
    public partial class ResAddFashion: Packet 
    {
        /// <summary>
        /// 时装TID
        /// </summary>
        public uint FashionID;
        /// <summary>
        /// 到期时间戳0为永久
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResAddFashion pkg = new ResAddFashion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FashionID = FashionID;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(FashionID);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                FashionID = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResAddFashion()
		{
			PacketID = 998;
		}
    }

    /// <summary>
    ///  [响应类] 增加时装 创建者
    /// </summary>
    [Package(998)]
    public partial class ResAddFashionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddFashion();
        }
    }


    /// <summary>
    ///  [请求类]移除时装
    /// </summary>
    public partial class ReqRemoveFashion: Packet 
    {

        public override Packet Clone()
        {
            ReqRemoveFashion pkg = new ReqRemoveFashion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRemoveFashion()
		{
			PacketID = 999;
		}
    }

    /// <summary>
    ///  [请求类] 移除时装 创建者
    /// </summary>
    [Package(999)]
    public partial class ReqRemoveFashionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveFashion();
        }
    }


    /// <summary>
    ///  [响应类]移除时装
    /// </summary>
    public partial class ResRemoveFashion: Packet 
    {
        /// <summary>
        /// 时装ID
        /// </summary>
        public uint FashionID;

        public override Packet Clone()
        {
            ResRemoveFashion pkg = new ResRemoveFashion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FashionID = FashionID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(FashionID);
            }
            else
            {
                FashionID = oByteArray.ReadUInt();
            }
        }
		public ResRemoveFashion()
		{
			PacketID = 1000;
		}
    }

    /// <summary>
    ///  [响应类] 移除时装 创建者
    /// </summary>
    [Package(1000)]
    public partial class ResRemoveFashionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveFashion();
        }
    }


    /// <summary>
    ///  [请求类]三圣步武三倍点信息
    /// </summary>
    public partial class ReqUpdateSSBWPointInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateSSBWPointInfo pkg = new ReqUpdateSSBWPointInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateSSBWPointInfo()
		{
			PacketID = 1001;
		}
    }

    /// <summary>
    ///  [请求类] 三圣步武三倍点信息 创建者
    /// </summary>
    [Package(1001)]
    public partial class ReqUpdateSSBWPointInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateSSBWPointInfo();
        }
    }


    /// <summary>
    ///  [响应类]三圣步武三倍点信息
    /// </summary>
    public partial class ResUpdateSSBWPointInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ItemInfo> PointVec = new List<ItemInfo>();

        public override Packet Clone()
        {
            ResUpdateSSBWPointInfo pkg = new ResUpdateSSBWPointInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ItemInfo item in PointVec)
            {
                pkg.PointVec.Add(item.Clone() as ItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)PointVec.Count);
                for (int i = 0; i < PointVec.Count; i++)
                {
                    PointVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int PointVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PointVecCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    PointVec.Add(obj);
                }
            }
        }
		public ResUpdateSSBWPointInfo()
		{
			PacketID = 1002;
		}
    }

    /// <summary>
    ///  [响应类] 三圣步武三倍点信息 创建者
    /// </summary>
    [Package(1002)]
    public partial class ResUpdateSSBWPointInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateSSBWPointInfo();
        }
    }


    /// <summary>
    ///  [请求类]修改连击技能组合
    /// </summary>
    public partial class ReqChangeComboSkill: Packet 
    {
        /// <summary>
        /// 第几组连击技能0 1 2
        /// </summary>
        public byte Pos;
        /// <summary>
        /// 
        /// </summary>
        public uint SkillGroup;
        /// <summary>
        /// 第几个技能0 1 2
        /// </summary>
        public byte Pos2;

        public override Packet Clone()
        {
            ReqChangeComboSkill pkg = new ReqChangeComboSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            pkg.SkillGroup = SkillGroup;
            pkg.Pos2 = Pos2;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Pos);
                oByteArray.WriteUInt(SkillGroup);
                oByteArray.WriteByte(Pos2);
            }
            else
            {
                Pos = oByteArray.ReadByte();
                SkillGroup = oByteArray.ReadUInt();
                Pos2 = oByteArray.ReadByte();
            }
        }
		public ReqChangeComboSkill()
		{
			PacketID = 1003;
		}
    }

    /// <summary>
    ///  [请求类] 修改连击技能组合 创建者
    /// </summary>
    [Package(1003)]
    public partial class ReqChangeComboSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeComboSkill();
        }
    }


    /// <summary>
    ///  [响应类]修改连击技能组合
    /// </summary>
    public partial class ResChangeComboSkill: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public byte Pos;
        /// <summary>
        /// 
        /// </summary>
        public uint SkillGroup;
        /// <summary>
        /// 
        /// </summary>
        public byte Pos2;

        public override Packet Clone()
        {
            ResChangeComboSkill pkg = new ResChangeComboSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Pos = Pos;
            pkg.SkillGroup = SkillGroup;
            pkg.Pos2 = Pos2;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Pos);
                oByteArray.WriteUInt(SkillGroup);
                oByteArray.WriteByte(Pos2);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Pos = oByteArray.ReadByte();
                SkillGroup = oByteArray.ReadUInt();
                Pos2 = oByteArray.ReadByte();
            }
        }
		public ResChangeComboSkill()
		{
			PacketID = 1004;
		}
    }

    /// <summary>
    ///  [响应类] 修改连击技能组合 创建者
    /// </summary>
    [Package(1004)]
    public partial class ResChangeComboSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeComboSkill();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服更新连击技能列表
    /// </summary>
    public partial class ReqUpdateComboSkilInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateComboSkilInfo pkg = new ReqUpdateComboSkilInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateComboSkilInfo()
		{
			PacketID = 1005;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服更新连击技能列表 创建者
    /// </summary>
    [Package(1005)]
    public partial class ReqUpdateComboSkilInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateComboSkilInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服更新连击技能列表
    /// </summary>
    public partial class ResUpdateComboSkilInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint SkillID;

        public override Packet Clone()
        {
            ResUpdateComboSkilInfo pkg = new ResUpdateComboSkilInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillID = SkillID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillID);
            }
            else
            {
                SkillID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateComboSkilInfo()
		{
			PacketID = 1006;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服更新连击技能列表 创建者
    /// </summary>
    [Package(1006)]
    public partial class ResUpdateComboSkilInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateComboSkilInfo();
        }
    }


    /// <summary>
    ///  [请求类]请求修改当前激活的连击技能
    /// </summary>
    public partial class ReqChangeActiveComboSkill: Packet 
    {
        /// <summary>
        /// 0-1-2
        /// </summary>
        public byte CurPos;

        public override Packet Clone()
        {
            ReqChangeActiveComboSkill pkg = new ReqChangeActiveComboSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurPos = CurPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(CurPos);
            }
            else
            {
                CurPos = oByteArray.ReadByte();
            }
        }
		public ReqChangeActiveComboSkill()
		{
			PacketID = 1007;
		}
    }

    /// <summary>
    ///  [请求类] 请求修改当前激活的连击技能 创建者
    /// </summary>
    [Package(1007)]
    public partial class ReqChangeActiveComboSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeActiveComboSkill();
        }
    }


    /// <summary>
    ///  [响应类]请求修改当前激活的连击技能
    /// </summary>
    public partial class ResChangeActiveComboSkill: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public byte CurPos;

        public override Packet Clone()
        {
            ResChangeActiveComboSkill pkg = new ResChangeActiveComboSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CurPos = CurPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(CurPos);
            }
            else
            {
                Result = oByteArray.ReadByte();
                CurPos = oByteArray.ReadByte();
            }
        }
		public ResChangeActiveComboSkill()
		{
			PacketID = 1008;
		}
    }

    /// <summary>
    ///  [响应类] 请求修改当前激活的连击技能 创建者
    /// </summary>
    [Package(1008)]
    public partial class ResChangeActiveComboSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeActiveComboSkill();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端播放吸血特效
    /// </summary>
    public partial class ReqPlayAddHpEffect: Packet 
    {

        public override Packet Clone()
        {
            ReqPlayAddHpEffect pkg = new ReqPlayAddHpEffect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPlayAddHpEffect()
		{
			PacketID = 1009;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端播放吸血特效 创建者
    /// </summary>
    [Package(1009)]
    public partial class ReqPlayAddHpEffectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayAddHpEffect();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端播放吸血特效
    /// </summary>
    public partial class ResPlayAddHpEffect: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo Guid = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResPlayAddHpEffect pkg = new ResPlayAddHpEffect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Guid = Guid.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Guid.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Guid.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResPlayAddHpEffect()
		{
			PacketID = 1010;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端播放吸血特效 创建者
    /// </summary>
    [Package(1010)]
    public partial class ResPlayAddHpEffectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayAddHpEffect();
        }
    }


    /// <summary>
    ///  [请求类]更新炼狱剩余时间
    /// </summary>
    public partial class ReqUpdateLianYuTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLianYuTime pkg = new ReqUpdateLianYuTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLianYuTime()
		{
			PacketID = 1011;
		}
    }

    /// <summary>
    ///  [请求类] 更新炼狱剩余时间 创建者
    /// </summary>
    [Package(1011)]
    public partial class ReqUpdateLianYuTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLianYuTime();
        }
    }


    /// <summary>
    ///  [响应类]更新炼狱剩余时间
    /// </summary>
    public partial class ResUpdateLianYuTime: Packet 
    {
        /// <summary>
        /// 秒
        /// </summary>
        public uint Time;

        public override Packet Clone()
        {
            ResUpdateLianYuTime pkg = new ResUpdateLianYuTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Time = Time;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Time);
            }
            else
            {
                Time = oByteArray.ReadUInt();
            }
        }
		public ResUpdateLianYuTime()
		{
			PacketID = 1012;
		}
    }

    /// <summary>
    ///  [响应类] 更新炼狱剩余时间 创建者
    /// </summary>
    [Package(1012)]
    public partial class ResUpdateLianYuTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLianYuTime();
        }
    }


    /// <summary>
    ///  [请求类]转移强化等级
    /// </summary>
    public partial class ReqMoveEquipStrengthen: Packet 
    {
        /// <summary>
        /// 原装备位置
        /// </summary>
        public int OldEquipPos;
        /// <summary>
        /// 新装包位置
        /// </summary>
        public int NewEquipPos;

        public override Packet Clone()
        {
            ReqMoveEquipStrengthen pkg = new ReqMoveEquipStrengthen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OldEquipPos = OldEquipPos;
            pkg.NewEquipPos = NewEquipPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(OldEquipPos);
                oByteArray.WriteInt(NewEquipPos);
            }
            else
            {
                OldEquipPos = oByteArray.ReadInt();
                NewEquipPos = oByteArray.ReadInt();
            }
        }
		public ReqMoveEquipStrengthen()
		{
			PacketID = 1013;
		}
    }

    /// <summary>
    ///  [请求类] 转移强化等级 创建者
    /// </summary>
    [Package(1013)]
    public partial class ReqMoveEquipStrengthenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMoveEquipStrengthen();
        }
    }


    /// <summary>
    ///  [响应类]转移强化等级
    /// </summary>
    public partial class ResMoveEquipStrengthen: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResMoveEquipStrengthen pkg = new ResMoveEquipStrengthen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResMoveEquipStrengthen()
		{
			PacketID = 1014;
		}
    }

    /// <summary>
    ///  [响应类] 转移强化等级 创建者
    /// </summary>
    [Package(1014)]
    public partial class ResMoveEquipStrengthenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMoveEquipStrengthen();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服玩家使用技能
    /// </summary>
    public partial class ReqNoticeUseSkill: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUseSkill pkg = new ReqNoticeUseSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUseSkill()
		{
			PacketID = 1015;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服玩家使用技能 创建者
    /// </summary>
    [Package(1015)]
    public partial class ReqNoticeUseSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUseSkill();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服玩家使用技能
    /// </summary>
    public partial class ResNoticeUseSkill: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint SkillGroup;
        /// <summary>
        /// 
        /// </summary>
        public uint AppendSkillGroup;

        public override Packet Clone()
        {
            ResNoticeUseSkill pkg = new ResNoticeUseSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillGroup = SkillGroup;
            pkg.AppendSkillGroup = AppendSkillGroup;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillGroup);
                oByteArray.WriteUInt(AppendSkillGroup);
            }
            else
            {
                SkillGroup = oByteArray.ReadUInt();
                AppendSkillGroup = oByteArray.ReadUInt();
            }
        }
		public ResNoticeUseSkill()
		{
			PacketID = 1016;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服玩家使用技能 创建者
    /// </summary>
    [Package(1016)]
    public partial class ResNoticeUseSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUseSkill();
        }
    }


    /// <summary>
    ///  [请求类]
    /// </summary>
    public partial class ReqServerValidate: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string ServerIP;
        /// <summary>
        /// 
        /// </summary>
        public uint ServerPort;
        /// <summary>
        /// 
        /// </summary>
        public int ServerType;
        /// <summary>
        /// 
        /// </summary>
        public uint ServerTime;
        /// <summary>
        /// 
        /// </summary>
        public string SignCode;
        /// <summary>
        /// 
        /// </summary>
        public string ServerName;
        /// <summary>
        /// 
        /// </summary>
        public int MapServerGroup;
        /// <summary>
        /// 区服编号
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 区服列表
        /// </summary>
        public List<uint> ServerList = new List<uint>();

        public override Packet Clone()
        {
            ReqServerValidate pkg = new ReqServerValidate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ServerIP = ServerIP;
            pkg.ServerPort = ServerPort;
            pkg.ServerType = ServerType;
            pkg.ServerTime = ServerTime;
            pkg.SignCode = SignCode;
            pkg.ServerName = ServerName;
            pkg.MapServerGroup = MapServerGroup;
            pkg.ServerID = ServerID;
            foreach (var item in ServerList)
            {
                pkg.ServerList.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ServerIP);
                oByteArray.WriteUInt(ServerPort);
                oByteArray.WriteInt(ServerType);
                oByteArray.WriteUInt(ServerTime);
                oByteArray.WriteUTF(SignCode);
                oByteArray.WriteUTF(ServerName);
                oByteArray.WriteInt(MapServerGroup);
                oByteArray.WriteUInt(ServerID);
                for (int i = 0; i < ServerList.Count; i++)
                {
                      oByteArray.WriteUInt(ServerList[i]);
                }
            }
            else
            {
                ServerIP = oByteArray.ReadUTF();
                ServerPort = oByteArray.ReadUInt();
                ServerType = oByteArray.ReadInt();
                ServerTime = oByteArray.ReadUInt();
                SignCode = oByteArray.ReadUTF();
                ServerName = oByteArray.ReadUTF();
                MapServerGroup = oByteArray.ReadInt();
                ServerID = oByteArray.ReadUInt();
                int ServerListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ServerListCount; i++)
                {
                    ServerList.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqServerValidate()
		{
			PacketID = 1017;
		}
    }

    /// <summary>
    ///  [请求类]  创建者
    /// </summary>
    [Package(1017)]
    public partial class ReqServerValidateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqServerValidate();
        }
    }


    /// <summary>
    ///  [响应类]
    /// </summary>
    public partial class ResServerValidate: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResServerValidate pkg = new ResServerValidate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResServerValidate()
		{
			PacketID = 1018;
		}
    }

    /// <summary>
    ///  [响应类]  创建者
    /// </summary>
    [Package(1018)]
    public partial class ResServerValidateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResServerValidate();
        }
    }


    /// <summary>
    ///  [请求类]领取日常活动奖励
    /// </summary>
    public partial class ReqTakeDayActivityAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityType;

        public override Packet Clone()
        {
            ReqTakeDayActivityAward pkg = new ReqTakeDayActivityAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.ActivityType = ActivityType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(ActivityType);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                ActivityType = oByteArray.ReadUInt();
            }
        }
		public ReqTakeDayActivityAward()
		{
			PacketID = 1019;
		}
    }

    /// <summary>
    ///  [请求类] 领取日常活动奖励 创建者
    /// </summary>
    [Package(1019)]
    public partial class ReqTakeDayActivityAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeDayActivityAward();
        }
    }


    /// <summary>
    ///  [响应类]领取日常活动奖励
    /// </summary>
    public partial class ResTakeDayActivityAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 
        /// </summary>
        public uint AwardID;

        public override Packet Clone()
        {
            ResTakeDayActivityAward pkg = new ResTakeDayActivityAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            pkg.ActivityType = ActivityType;
            pkg.AwardID = AwardID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(ActivityType);
                oByteArray.WriteUInt(AwardID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
                ActivityType = oByteArray.ReadUInt();
                AwardID = oByteArray.ReadUInt();
            }
        }
		public ResTakeDayActivityAward()
		{
			PacketID = 1020;
		}
    }

    /// <summary>
    ///  [响应类] 领取日常活动奖励 创建者
    /// </summary>
    [Package(1020)]
    public partial class ResTakeDayActivityAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeDayActivityAward();
        }
    }


    /// <summary>
    ///  [请求类]刷新日常活动
    /// </summary>
    public partial class ReqRefreshDayActivity: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqRefreshDayActivity pkg = new ReqRefreshDayActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityType = ActivityType;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityType);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                ActivityType = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqRefreshDayActivity()
		{
			PacketID = 1021;
		}
    }

    /// <summary>
    ///  [请求类] 刷新日常活动 创建者
    /// </summary>
    [Package(1021)]
    public partial class ReqRefreshDayActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRefreshDayActivity();
        }
    }


    /// <summary>
    ///  [响应类]刷新日常活动
    /// </summary>
    public partial class ResRefreshDayActivity: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 
        /// </summary>
        public uint Data;
        /// <summary>
        /// 
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResRefreshDayActivity pkg = new ResRefreshDayActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ActivityType = ActivityType;
            pkg.Data = Data;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(ActivityType);
                oByteArray.WriteUInt(Data);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                ActivityType = oByteArray.ReadUInt();
                Data = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResRefreshDayActivity()
		{
			PacketID = 1022;
		}
    }

    /// <summary>
    ///  [响应类] 刷新日常活动 创建者
    /// </summary>
    [Package(1022)]
    public partial class ResRefreshDayActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRefreshDayActivity();
        }
    }


    /// <summary>
    ///  [请求类]领取行会福利
    /// </summary>
    public partial class ReqTakeGuildWelfare: Packet 
    {

        public override Packet Clone()
        {
            ReqTakeGuildWelfare pkg = new ReqTakeGuildWelfare();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTakeGuildWelfare()
		{
			PacketID = 1023;
		}
    }

    /// <summary>
    ///  [请求类] 领取行会福利 创建者
    /// </summary>
    [Package(1023)]
    public partial class ReqTakeGuildWelfareCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeGuildWelfare();
        }
    }


    /// <summary>
    ///  [响应类]领取行会福利
    /// </summary>
    public partial class ResTakeGuildWelfare: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTakeGuildWelfare pkg = new ResTakeGuildWelfare();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResTakeGuildWelfare()
		{
			PacketID = 1024;
		}
    }

    /// <summary>
    ///  [响应类] 领取行会福利 创建者
    /// </summary>
    [Package(1024)]
    public partial class ResTakeGuildWelfareCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeGuildWelfare();
        }
    }


    /// <summary>
    ///  [请求类]进入魔法阵副本
    /// </summary>
    public partial class ReqEnterMagicDungeon: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterMagicDungeon pkg = new ReqEnterMagicDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterMagicDungeon()
		{
			PacketID = 1025;
		}
    }

    /// <summary>
    ///  [请求类] 进入魔法阵副本 创建者
    /// </summary>
    [Package(1025)]
    public partial class ReqEnterMagicDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterMagicDungeon();
        }
    }


    /// <summary>
    ///  [响应类]进入魔法阵副本
    /// </summary>
    public partial class ResEnterMagicDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResEnterMagicDungeon pkg = new ResEnterMagicDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResEnterMagicDungeon()
		{
			PacketID = 1026;
		}
    }

    /// <summary>
    ///  [响应类] 进入魔法阵副本 创建者
    /// </summary>
    [Package(1026)]
    public partial class ResEnterMagicDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterMagicDungeon();
        }
    }


    /// <summary>
    ///  [请求类]更新临时Vip等级
    /// </summary>
    public partial class ReqUpdateVipTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateVipTime pkg = new ReqUpdateVipTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateVipTime()
		{
			PacketID = 1027;
		}
    }

    /// <summary>
    ///  [请求类] 更新临时Vip等级 创建者
    /// </summary>
    [Package(1027)]
    public partial class ReqUpdateVipTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateVipTime();
        }
    }


    /// <summary>
    ///  [响应类]更新临时Vip等级
    /// </summary>
    public partial class ResUpdateVipTime: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint VipTime;

        public override Packet Clone()
        {
            ResUpdateVipTime pkg = new ResUpdateVipTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.VipTime = VipTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(VipTime);
            }
            else
            {
                VipTime = oByteArray.ReadUInt();
            }
        }
		public ResUpdateVipTime()
		{
			PacketID = 1028;
		}
    }

    /// <summary>
    ///  [响应类] 更新临时Vip等级 创建者
    /// </summary>
    [Package(1028)]
    public partial class ResUpdateVipTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateVipTime();
        }
    }


    /// <summary>
    ///  [请求类]播放地雷的特效
    /// </summary>
    public partial class ReqPlaySkillEffect: Packet 
    {

        public override Packet Clone()
        {
            ReqPlaySkillEffect pkg = new ReqPlaySkillEffect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPlaySkillEffect()
		{
			PacketID = 1029;
		}
    }

    /// <summary>
    ///  [请求类] 播放地雷的特效 创建者
    /// </summary>
    [Package(1029)]
    public partial class ReqPlaySkillEffectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlaySkillEffect();
        }
    }


    /// <summary>
    ///  [响应类]播放地雷的特效
    /// </summary>
    public partial class ResPlaySkillEffect: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public uint EffectID;
        /// <summary>
        /// 0为特效时间，非零为此时间
        /// </summary>
        public uint Time;

        public override Packet Clone()
        {
            ResPlaySkillEffect pkg = new ResPlaySkillEffect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.EffectID = EffectID;
            pkg.Time = Time;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(EffectID);
                oByteArray.WriteUInt(Time);
            }
            else
            {
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                EffectID = oByteArray.ReadUInt();
                Time = oByteArray.ReadUInt();
            }
        }
		public ResPlaySkillEffect()
		{
			PacketID = 1030;
		}
    }

    /// <summary>
    ///  [响应类] 播放地雷的特效 创建者
    /// </summary>
    [Package(1030)]
    public partial class ResPlaySkillEffectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlaySkillEffect();
        }
    }


    /// <summary>
    ///  [请求类]和NPC对话
    /// </summary>
    public partial class ReqTalkWithNPC: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint NpcID;

        public override Packet Clone()
        {
            ReqTalkWithNPC pkg = new ReqTalkWithNPC();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NpcID = NpcID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(NpcID);
            }
            else
            {
                NpcID = oByteArray.ReadUInt();
            }
        }
		public ReqTalkWithNPC()
		{
			PacketID = 1031;
		}
    }

    /// <summary>
    ///  [请求类] 和NPC对话 创建者
    /// </summary>
    [Package(1031)]
    public partial class ReqTalkWithNPCCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTalkWithNPC();
        }
    }


    /// <summary>
    ///  [响应类]和NPC对话
    /// </summary>
    public partial class ResTalkWithNPC: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTalkWithNPC pkg = new ResTalkWithNPC();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResTalkWithNPC()
		{
			PacketID = 1032;
		}
    }

    /// <summary>
    ///  [响应类] 和NPC对话 创建者
    /// </summary>
    [Package(1032)]
    public partial class ResTalkWithNPCCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTalkWithNPC();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家变蝙蝠
    /// </summary>
    public partial class ReqNoticePlayerFly: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticePlayerFly pkg = new ReqNoticePlayerFly();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticePlayerFly()
		{
			PacketID = 1033;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家变蝙蝠 创建者
    /// </summary>
    [Package(1033)]
    public partial class ReqNoticePlayerFlyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePlayerFly();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家变蝙蝠
    /// </summary>
    public partial class ResNoticePlayerFly: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint EndX;
        /// <summary>
        /// 
        /// </summary>
        public uint EndY;
        /// <summary>
        /// 
        /// </summary>
        public uint SkillID;

        public override Packet Clone()
        {
            ResNoticePlayerFly pkg = new ResNoticePlayerFly();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.EndX = EndX;
            pkg.EndY = EndY;
            pkg.SkillID = SkillID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(EndX);
                oByteArray.WriteUInt(EndY);
                oByteArray.WriteUInt(SkillID);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                EndX = oByteArray.ReadUInt();
                EndY = oByteArray.ReadUInt();
                SkillID = oByteArray.ReadUInt();
            }
        }
		public ResNoticePlayerFly()
		{
			PacketID = 1034;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家变蝙蝠 创建者
    /// </summary>
    [Package(1034)]
    public partial class ResNoticePlayerFlyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePlayerFly();
        }
    }


    /// <summary>
    ///  [请求类]升级天赋
    /// </summary>
    public partial class ReqUpgradeTalent: Packet 
    {
        /// <summary>
        /// 位置
        /// </summary>
        public byte Pos;
        /// <summary>
        /// 天赋线类型
        /// </summary>
        public uint TalentType;

        public override Packet Clone()
        {
            ReqUpgradeTalent pkg = new ReqUpgradeTalent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            pkg.TalentType = TalentType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Pos);
                oByteArray.WriteUInt(TalentType);
            }
            else
            {
                Pos = oByteArray.ReadByte();
                TalentType = oByteArray.ReadUInt();
            }
        }
		public ReqUpgradeTalent()
		{
			PacketID = 1035;
		}
    }

    /// <summary>
    ///  [请求类] 升级天赋 创建者
    /// </summary>
    [Package(1035)]
    public partial class ReqUpgradeTalentCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeTalent();
        }
    }


    /// <summary>
    ///  [响应类]升级天赋
    /// </summary>
    public partial class ResUpgradeTalent: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 位置
        /// </summary>
        public byte Pos;
        /// <summary>
        /// 天赋线类型
        /// </summary>
        public uint TalentType;

        public override Packet Clone()
        {
            ResUpgradeTalent pkg = new ResUpgradeTalent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Pos = Pos;
            pkg.TalentType = TalentType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Pos);
                oByteArray.WriteUInt(TalentType);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Pos = oByteArray.ReadByte();
                TalentType = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeTalent()
		{
			PacketID = 1036;
		}
    }

    /// <summary>
    ///  [响应类] 升级天赋 创建者
    /// </summary>
    [Package(1036)]
    public partial class ResUpgradeTalentCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeTalent();
        }
    }


    /// <summary>
    ///  [请求类]重置天赋
    /// </summary>
    public partial class ReqResetTalent: Packet 
    {

        public override Packet Clone()
        {
            ReqResetTalent pkg = new ReqResetTalent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqResetTalent()
		{
			PacketID = 1037;
		}
    }

    /// <summary>
    ///  [请求类] 重置天赋 创建者
    /// </summary>
    [Package(1037)]
    public partial class ReqResetTalentCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqResetTalent();
        }
    }


    /// <summary>
    ///  [响应类]重置天赋
    /// </summary>
    public partial class ResResetTalent: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint Point;

        public override Packet Clone()
        {
            ResResetTalent pkg = new ResResetTalent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Point = Point;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(Point);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Point = oByteArray.ReadUInt();
            }
        }
		public ResResetTalent()
		{
			PacketID = 1038;
		}
    }

    /// <summary>
    ///  [响应类] 重置天赋 创建者
    /// </summary>
    [Package(1038)]
    public partial class ResResetTalentCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResResetTalent();
        }
    }


    /// <summary>
    ///  [请求类]开始挖矿
    /// </summary>
    public partial class ReqStartMineral: Packet 
    {
        /// <summary>
        /// 0-开始挖矿1-结束挖矿
        /// </summary>
        public int Type;

        public override Packet Clone()
        {
            ReqStartMineral pkg = new ReqStartMineral();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Type);
            }
            else
            {
                Type = oByteArray.ReadInt();
            }
        }
		public ReqStartMineral()
		{
			PacketID = 1039;
		}
    }

    /// <summary>
    ///  [请求类] 开始挖矿 创建者
    /// </summary>
    [Package(1039)]
    public partial class ReqStartMineralCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStartMineral();
        }
    }


    /// <summary>
    ///  [响应类]开始挖矿
    /// </summary>
    public partial class ResStartMineral: Packet 
    {

        public override Packet Clone()
        {
            ResStartMineral pkg = new ResStartMineral();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResStartMineral()
		{
			PacketID = 1040;
		}
    }

    /// <summary>
    ///  [响应类] 开始挖矿 创建者
    /// </summary>
    [Package(1040)]
    public partial class ResStartMineralCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStartMineral();
        }
    }


    /// <summary>
    ///  [请求类]更新物品最大星级
    /// </summary>
    public partial class ReqUpdateItemMaxStrength: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemMaxStrength pkg = new ReqUpdateItemMaxStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemMaxStrength()
		{
			PacketID = 1041;
		}
    }

    /// <summary>
    ///  [请求类] 更新物品最大星级 创建者
    /// </summary>
    [Package(1041)]
    public partial class ReqUpdateItemMaxStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemMaxStrength();
        }
    }


    /// <summary>
    ///  [响应类]更新物品最大星级
    /// </summary>
    public partial class ResUpdateItemMaxStrength: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MaxStrengthLv;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ResUpdateItemMaxStrength pkg = new ResUpdateItemMaxStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MaxStrengthLv = MaxStrengthLv;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MaxStrengthLv);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                MaxStrengthLv = oByteArray.ReadUInt();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ResUpdateItemMaxStrength()
		{
			PacketID = 1042;
		}
    }

    /// <summary>
    ///  [响应类] 更新物品最大星级 创建者
    /// </summary>
    [Package(1042)]
    public partial class ResUpdateItemMaxStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemMaxStrength();
        }
    }


    /// <summary>
    ///  [请求类]增加装备最大强化等级
    /// </summary>
    public partial class ReqAddEquipMaxStrength: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint EquipPos;

        public override Packet Clone()
        {
            ReqAddEquipMaxStrength pkg = new ReqAddEquipMaxStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EquipPos = EquipPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EquipPos);
            }
            else
            {
                EquipPos = oByteArray.ReadUInt();
            }
        }
		public ReqAddEquipMaxStrength()
		{
			PacketID = 1043;
		}
    }

    /// <summary>
    ///  [请求类] 增加装备最大强化等级 创建者
    /// </summary>
    [Package(1043)]
    public partial class ReqAddEquipMaxStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddEquipMaxStrength();
        }
    }


    /// <summary>
    ///  [响应类]增加装备最大强化等级
    /// </summary>
    public partial class ResAddEquipMaxStrength: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint EquipPos;

        public override Packet Clone()
        {
            ResAddEquipMaxStrength pkg = new ResAddEquipMaxStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.EquipPos = EquipPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(EquipPos);
            }
            else
            {
                Result = oByteArray.ReadByte();
                EquipPos = oByteArray.ReadUInt();
            }
        }
		public ResAddEquipMaxStrength()
		{
			PacketID = 1044;
		}
    }

    /// <summary>
    ///  [响应类] 增加装备最大强化等级 创建者
    /// </summary>
    [Package(1044)]
    public partial class ResAddEquipMaxStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddEquipMaxStrength();
        }
    }


    /// <summary>
    ///  [请求类]设置快捷键
    /// </summary>
    public partial class ReqSetHotKey: Packet 
    {
        /// <summary>
        /// 0-9
        /// </summary>
        public int Pos;
        /// <summary>
        /// 1物品2技能
        /// </summary>
        public int Type;
        /// <summary>
        /// 技能或者物品ID
        /// </summary>
        public int ActionID;

        public override Packet Clone()
        {
            ReqSetHotKey pkg = new ReqSetHotKey();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            pkg.Type = Type;
            pkg.ActionID = ActionID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Pos);
                oByteArray.WriteInt(Type);
                oByteArray.WriteInt(ActionID);
            }
            else
            {
                Pos = oByteArray.ReadInt();
                Type = oByteArray.ReadInt();
                ActionID = oByteArray.ReadInt();
            }
        }
		public ReqSetHotKey()
		{
			PacketID = 1045;
		}
    }

    /// <summary>
    ///  [请求类] 设置快捷键 创建者
    /// </summary>
    [Package(1045)]
    public partial class ReqSetHotKeyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetHotKey();
        }
    }


    /// <summary>
    ///  [响应类]设置快捷键
    /// </summary>
    public partial class ResSetHotKey: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 0-9
        /// </summary>
        public int Pos;
        /// <summary>
        /// 1物品2技能
        /// </summary>
        public int Type;
        /// <summary>
        /// 技能或者物品ID
        /// </summary>
        public int ActionID;
        /// <summary>
        /// 是否是新技能
        /// </summary>
        public bool NewSkill;

        public override Packet Clone()
        {
            ResSetHotKey pkg = new ResSetHotKey();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Pos = Pos;
            pkg.Type = Type;
            pkg.ActionID = ActionID;
            pkg.NewSkill = NewSkill;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteInt(Pos);
                oByteArray.WriteInt(Type);
                oByteArray.WriteInt(ActionID);
                oByteArray.WriteBoolean(NewSkill);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Pos = oByteArray.ReadInt();
                Type = oByteArray.ReadInt();
                ActionID = oByteArray.ReadInt();
                NewSkill = oByteArray.ReadBoolean();
            }
        }
		public ResSetHotKey()
		{
			PacketID = 1046;
		}
    }

    /// <summary>
    ///  [响应类] 设置快捷键 创建者
    /// </summary>
    [Package(1046)]
    public partial class ResSetHotKeyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetHotKey();
        }
    }


    /// <summary>
    ///  [请求类]添加红包
    /// </summary>
    public partial class ReqAddRedBagInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqAddRedBagInfo pkg = new ReqAddRedBagInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddRedBagInfo()
		{
			PacketID = 1047;
		}
    }

    /// <summary>
    ///  [请求类] 添加红包 创建者
    /// </summary>
    [Package(1047)]
    public partial class ReqAddRedBagInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddRedBagInfo();
        }
    }


    /// <summary>
    ///  [响应类]添加红包
    /// </summary>
    public partial class ResAddRedBagInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint RedBagID;
        /// <summary>
        /// 
        /// </summary>
        public uint Money;
        /// <summary>
        /// 
        /// </summary>
        public string SenderName;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResAddRedBagInfo pkg = new ResAddRedBagInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RedBagID = RedBagID;
            pkg.Money = Money;
            pkg.SenderName = SenderName;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(RedBagID);
                oByteArray.WriteUInt(Money);
                oByteArray.WriteUTF(SenderName);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                RedBagID = oByteArray.ReadUInt();
                Money = oByteArray.ReadUInt();
                SenderName = oByteArray.ReadUTF();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResAddRedBagInfo()
		{
			PacketID = 1048;
		}
    }

    /// <summary>
    ///  [响应类] 添加红包 创建者
    /// </summary>
    [Package(1048)]
    public partial class ResAddRedBagInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddRedBagInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新全民红包信息
    /// </summary>
    public partial class ReqUpdateRedBagInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateRedBagInfo pkg = new ReqUpdateRedBagInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateRedBagInfo()
		{
			PacketID = 1049;
		}
    }

    /// <summary>
    ///  [请求类] 更新全民红包信息 创建者
    /// </summary>
    [Package(1049)]
    public partial class ReqUpdateRedBagInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRedBagInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新全民红包信息
    /// </summary>
    public partial class ResUpdateRedBagInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public YYRankInfo Info = new YYRankInfo();
        /// <summary>
        /// 
        /// </summary>
        public bool IsNew;

        public override Packet Clone()
        {
            ResUpdateRedBagInfo pkg = new ResUpdateRedBagInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.PlayerGuid = PlayerGuid;
            pkg.Info = Info.Clone() as YYRankInfo;
            pkg.IsNew = IsNew;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt64(PlayerGuid);
                Info.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(IsNew);
            }
            else
            {
                Type = oByteArray.ReadByte();
                PlayerGuid = oByteArray.ReadUInt64();
                Info.Serializtion(oByteArray, bSerialize);
                IsNew = oByteArray.ReadBoolean();
            }
        }
		public ResUpdateRedBagInfo()
		{
			PacketID = 1050;
		}
    }

    /// <summary>
    ///  [响应类] 更新全民红包信息 创建者
    /// </summary>
    [Package(1050)]
    public partial class ResUpdateRedBagInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRedBagInfo();
        }
    }


    /// <summary>
    ///  [请求类]请求全民红包基本信息
    /// </summary>
    public partial class ReqGetPlayerRedBagInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqGetPlayerRedBagInfo pkg = new ReqGetPlayerRedBagInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetPlayerRedBagInfo()
		{
			PacketID = 1051;
		}
    }

    /// <summary>
    ///  [请求类] 请求全民红包基本信息 创建者
    /// </summary>
    [Package(1051)]
    public partial class ReqGetPlayerRedBagInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetPlayerRedBagInfo();
        }
    }


    /// <summary>
    ///  [响应类]请求全民红包基本信息
    /// </summary>
    public partial class ResGetPlayerRedBagInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<YYRankInfo> Info = new List<YYRankInfo>();
        /// <summary>
        /// 自己捐的钱
        /// </summary>
        public uint Number;
        /// <summary>
        /// 自己的名次
        /// </summary>
        public uint Rank;
        /// <summary>
        /// 奖池元宝
        /// </summary>
        public uint CurMoney;

        public override Packet Clone()
        {
            ResGetPlayerRedBagInfo pkg = new ResGetPlayerRedBagInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (YYRankInfo item in Info)
            {
                pkg.Info.Add(item.Clone() as YYRankInfo);
            }
            pkg.Number = Number;
            pkg.Rank = Rank;
            pkg.CurMoney = CurMoney;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Info.Count);
                for (int i = 0; i < Info.Count; i++)
                {
                    Info[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(Number);
                oByteArray.WriteUInt(Rank);
                oByteArray.WriteUInt(CurMoney);
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    YYRankInfo obj = new YYRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Info.Add(obj);
                }
                Number = oByteArray.ReadUInt();
                Rank = oByteArray.ReadUInt();
                CurMoney = oByteArray.ReadUInt();
            }
        }
		public ResGetPlayerRedBagInfo()
		{
			PacketID = 1052;
		}
    }

    /// <summary>
    ///  [响应类] 请求全民红包基本信息 创建者
    /// </summary>
    [Package(1052)]
    public partial class ResGetPlayerRedBagInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetPlayerRedBagInfo();
        }
    }


    /// <summary>
    ///  [请求类]增加全民红包日志
    /// </summary>
    public partial class ReqAddRedBagLog: Packet 
    {

        public override Packet Clone()
        {
            ReqAddRedBagLog pkg = new ReqAddRedBagLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddRedBagLog()
		{
			PacketID = 1053;
		}
    }

    /// <summary>
    ///  [请求类] 增加全民红包日志 创建者
    /// </summary>
    [Package(1053)]
    public partial class ReqAddRedBagLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddRedBagLog();
        }
    }


    /// <summary>
    ///  [响应类]增加全民红包日志
    /// </summary>
    public partial class ResAddRedBagLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public YYRankInfo Info = new YYRankInfo();

        public override Packet Clone()
        {
            ResAddRedBagLog pkg = new ResAddRedBagLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Info = Info.Clone() as YYRankInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Info.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Info.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddRedBagLog()
		{
			PacketID = 1054;
		}
    }

    /// <summary>
    ///  [响应类] 增加全民红包日志 创建者
    /// </summary>
    [Package(1054)]
    public partial class ResAddRedBagLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddRedBagLog();
        }
    }


    /// <summary>
    ///  [请求类]领取全民红包
    /// </summary>
    public partial class ReqTakePlayerRedBag: Packet 
    {

        public override Packet Clone()
        {
            ReqTakePlayerRedBag pkg = new ReqTakePlayerRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTakePlayerRedBag()
		{
			PacketID = 1055;
		}
    }

    /// <summary>
    ///  [请求类] 领取全民红包 创建者
    /// </summary>
    [Package(1055)]
    public partial class ReqTakePlayerRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakePlayerRedBag();
        }
    }


    /// <summary>
    ///  [响应类]领取全民红包
    /// </summary>
    public partial class ResTakePlayerRedBag: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 当前奖池元宝数量
        /// </summary>
        public uint CurMoneyNum;
        /// <summary>
        /// 增加元宝
        /// </summary>
        public uint AddMoney;

        public override Packet Clone()
        {
            ResTakePlayerRedBag pkg = new ResTakePlayerRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CurMoneyNum = CurMoneyNum;
            pkg.AddMoney = AddMoney;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(CurMoneyNum);
                oByteArray.WriteUInt(AddMoney);
            }
            else
            {
                Result = oByteArray.ReadByte();
                CurMoneyNum = oByteArray.ReadUInt();
                AddMoney = oByteArray.ReadUInt();
            }
        }
		public ResTakePlayerRedBag()
		{
			PacketID = 1056;
		}
    }

    /// <summary>
    ///  [响应类] 领取全民红包 创建者
    /// </summary>
    [Package(1056)]
    public partial class ResTakePlayerRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakePlayerRedBag();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端全民红包日志
    /// </summary>
    public partial class ReqUpdateRedBagLog: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateRedBagLog pkg = new ReqUpdateRedBagLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateRedBagLog()
		{
			PacketID = 1057;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端全民红包日志 创建者
    /// </summary>
    [Package(1057)]
    public partial class ReqUpdateRedBagLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRedBagLog();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端全民红包日志
    /// </summary>
    public partial class ResUpdateRedBagLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<YYRankInfo> Info = new List<YYRankInfo>();

        public override Packet Clone()
        {
            ResUpdateRedBagLog pkg = new ResUpdateRedBagLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (YYRankInfo item in Info)
            {
                pkg.Info.Add(item.Clone() as YYRankInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Info.Count);
                for (int i = 0; i < Info.Count; i++)
                {
                    Info[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    YYRankInfo obj = new YYRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Info.Add(obj);
                }
            }
        }
		public ResUpdateRedBagLog()
		{
			PacketID = 1058;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端全民红包日志 创建者
    /// </summary>
    [Package(1058)]
    public partial class ResUpdateRedBagLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRedBagLog();
        }
    }


    /// <summary>
    ///  [请求类]给红包容器加钱
    /// </summary>
    public partial class ReqAddMoneyToRedBagVec: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ReqAddMoneyToRedBagVec pkg = new ReqAddMoneyToRedBagVec();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Count);
            }
            else
            {
                Count = oByteArray.ReadUInt();
            }
        }
		public ReqAddMoneyToRedBagVec()
		{
			PacketID = 1059;
		}
    }

    /// <summary>
    ///  [请求类] 给红包容器加钱 创建者
    /// </summary>
    [Package(1059)]
    public partial class ReqAddMoneyToRedBagVecCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddMoneyToRedBagVec();
        }
    }


    /// <summary>
    ///  [响应类]给红包容器加钱
    /// </summary>
    public partial class ResAddMoneyToRedBagVec: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResAddMoneyToRedBagVec pkg = new ResAddMoneyToRedBagVec();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResAddMoneyToRedBagVec()
		{
			PacketID = 1060;
		}
    }

    /// <summary>
    ///  [响应类] 给红包容器加钱 创建者
    /// </summary>
    [Package(1060)]
    public partial class ResAddMoneyToRedBagVecCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddMoneyToRedBagVec();
        }
    }


    /// <summary>
    ///  [请求类]更新红包口令
    /// </summary>
    public partial class ReqUpdateRedBagCode: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateRedBagCode pkg = new ReqUpdateRedBagCode();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateRedBagCode()
		{
			PacketID = 1061;
		}
    }

    /// <summary>
    ///  [请求类] 更新红包口令 创建者
    /// </summary>
    [Package(1061)]
    public partial class ReqUpdateRedBagCodeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRedBagCode();
        }
    }


    /// <summary>
    ///  [响应类]更新红包口令
    /// </summary>
    public partial class ResUpdateRedBagCode: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string Code;

        public override Packet Clone()
        {
            ResUpdateRedBagCode pkg = new ResUpdateRedBagCode();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Code = Code;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Code);
            }
            else
            {
                Code = oByteArray.ReadUTF();
            }
        }
		public ResUpdateRedBagCode()
		{
			PacketID = 1062;
		}
    }

    /// <summary>
    ///  [响应类] 更新红包口令 创建者
    /// </summary>
    [Package(1062)]
    public partial class ResUpdateRedBagCodeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRedBagCode();
        }
    }


    /// <summary>
    ///  [请求类]删除行会红包
    /// </summary>
    public partial class ReqRemoveGuildRedBag: Packet 
    {

        public override Packet Clone()
        {
            ReqRemoveGuildRedBag pkg = new ReqRemoveGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRemoveGuildRedBag()
		{
			PacketID = 1063;
		}
    }

    /// <summary>
    ///  [请求类] 删除行会红包 创建者
    /// </summary>
    [Package(1063)]
    public partial class ReqRemoveGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveGuildRedBag();
        }
    }


    /// <summary>
    ///  [响应类]删除行会红包
    /// </summary>
    public partial class ResRemoveGuildRedBag: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint RedBagID;

        public override Packet Clone()
        {
            ResRemoveGuildRedBag pkg = new ResRemoveGuildRedBag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RedBagID = RedBagID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(RedBagID);
            }
            else
            {
                RedBagID = oByteArray.ReadUInt();
            }
        }
		public ResRemoveGuildRedBag()
		{
			PacketID = 1064;
		}
    }

    /// <summary>
    ///  [响应类] 删除行会红包 创建者
    /// </summary>
    [Package(1064)]
    public partial class ResRemoveGuildRedBagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveGuildRedBag();
        }
    }


    /// <summary>
    ///  [请求类]领取排行榜奖励
    /// </summary>
    public partial class ReqTakeRankAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqTakeRankAward pkg = new ReqTakeRankAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqTakeRankAward()
		{
			PacketID = 1065;
		}
    }

    /// <summary>
    ///  [请求类] 领取排行榜奖励 创建者
    /// </summary>
    [Package(1065)]
    public partial class ReqTakeRankAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeRankAward();
        }
    }


    /// <summary>
    ///  [响应类]领取排行榜奖励
    /// </summary>
    public partial class ResTakeRankAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResTakeRankAward pkg = new ResTakeRankAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
            }
        }
		public ResTakeRankAward()
		{
			PacketID = 1066;
		}
    }

    /// <summary>
    ///  [响应类] 领取排行榜奖励 创建者
    /// </summary>
    [Package(1066)]
    public partial class ResTakeRankAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeRankAward();
        }
    }


    /// <summary>
    ///  [请求类]更新排行榜领奖信息
    /// </summary>
    public partial class ReqUpdateRankAwardInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<string> Info = new List<string>();
        /// <summary>
        /// 
        /// </summary>
        public List<ulong> ObjectID = new List<ulong>();
        /// <summary>
        /// 
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqUpdateRankAwardInfo pkg = new ReqUpdateRankAwardInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in Info)
            {
                pkg.Info.Add(item);
            }
            foreach (var item in ObjectID)
            {
                pkg.ObjectID.Add(item);
            }
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < Info.Count; i++)
                {
                      oByteArray.WriteUTF(Info[i]);
                }
                for (int i = 0; i < ObjectID.Count; i++)
                {
                      oByteArray.WriteUInt64(ObjectID[i]);
                }
                oByteArray.WriteByte(Type);
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    Info.Add(oByteArray.ReadUTF());
                }
                int ObjectIDCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ObjectIDCount; i++)
                {
                    ObjectID.Add(oByteArray.ReadUInt64());
                }
                Type = oByteArray.ReadByte();
            }
        }
		public ReqUpdateRankAwardInfo()
		{
			PacketID = 1067;
		}
    }

    /// <summary>
    ///  [请求类] 更新排行榜领奖信息 创建者
    /// </summary>
    [Package(1067)]
    public partial class ReqUpdateRankAwardInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRankAwardInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新排行榜领奖信息
    /// </summary>
    public partial class ResUpdateRankAwardInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public string Info;

        public override Packet Clone()
        {
            ResUpdateRankAwardInfo pkg = new ResUpdateRankAwardInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Info = Info;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUTF(Info);
            }
            else
            {
                Type = oByteArray.ReadByte();
                Info = oByteArray.ReadUTF();
            }
        }
		public ResUpdateRankAwardInfo()
		{
			PacketID = 1068;
		}
    }

    /// <summary>
    ///  [响应类] 更新排行榜领奖信息 创建者
    /// </summary>
    [Package(1068)]
    public partial class ResUpdateRankAwardInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRankAwardInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端开始倒计时
    /// </summary>
    public partial class ReqNotcieCountDown: Packet 
    {

        public override Packet Clone()
        {
            ReqNotcieCountDown pkg = new ReqNotcieCountDown();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNotcieCountDown()
		{
			PacketID = 1069;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端开始倒计时 创建者
    /// </summary>
    [Package(1069)]
    public partial class ReqNotcieCountDownCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNotcieCountDown();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端开始倒计时
    /// </summary>
    public partial class ResNotcieCountDown: Packet 
    {
        /// <summary>
        /// 倒计时
        /// </summary>
        public byte Count;

        public override Packet Clone()
        {
            ResNotcieCountDown pkg = new ResNotcieCountDown();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Count);
            }
            else
            {
                Count = oByteArray.ReadByte();
            }
        }
		public ResNotcieCountDown()
		{
			PacketID = 1070;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端开始倒计时 创建者
    /// </summary>
    [Package(1070)]
    public partial class ResNotcieCountDownCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNotcieCountDown();
        }
    }


    /// <summary>
    ///  [请求类]收购物品
    /// </summary>
    public partial class ReqPurchaseItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 收购数量
        /// </summary>
        public uint Count;
        /// <summary>
        /// 单价
        /// </summary>
        public uint Univalent;

        public override Packet Clone()
        {
            ReqPurchaseItem pkg = new ReqPurchaseItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Count = Count;
            pkg.Univalent = Univalent;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
                oByteArray.WriteUInt(Univalent);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
                Univalent = oByteArray.ReadUInt();
            }
        }
		public ReqPurchaseItem()
		{
			PacketID = 1071;
		}
    }

    /// <summary>
    ///  [请求类] 收购物品 创建者
    /// </summary>
    [Package(1071)]
    public partial class ReqPurchaseItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPurchaseItem();
        }
    }


    /// <summary>
    ///  [响应类]收购物品
    /// </summary>
    public partial class ResPurchaseItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResPurchaseItem pkg = new ResPurchaseItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResPurchaseItem()
		{
			PacketID = 1072;
		}
    }

    /// <summary>
    ///  [响应类] 收购物品 创建者
    /// </summary>
    [Package(1072)]
    public partial class ResPurchaseItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPurchaseItem();
        }
    }


    /// <summary>
    ///  [请求类]出售物品
    /// </summary>
    public partial class ReqSellItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ObjectGuidInfo> ObjectIDVec = new List<ObjectGuidInfo>();
        /// <summary>
        /// 商店ID
        /// </summary>
        public ObjectGuidInfo ShopID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqSellItem pkg = new ReqSellItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ObjectGuidInfo item in ObjectIDVec)
            {
                pkg.ObjectIDVec.Add(item.Clone() as ObjectGuidInfo);
            }
            pkg.ShopID = ShopID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < ObjectIDVec.Count; i++)
                {
                      ObjectIDVec[i].Serializtion(oByteArray, bSerialize);
                }
                ShopID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                int ObjectIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ObjectIDVecCount; i++)
                {
                    ObjectGuidInfo obj = new ObjectGuidInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ObjectIDVec.Add(obj);
                }
                ShopID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqSellItem()
		{
			PacketID = 1073;
		}
    }

    /// <summary>
    ///  [请求类] 出售物品 创建者
    /// </summary>
    [Package(1073)]
    public partial class ReqSellItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSellItem();
        }
    }


    /// <summary>
    ///  [响应类]出售物品
    /// </summary>
    public partial class ResSellItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResSellItem pkg = new ResSellItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResSellItem()
		{
			PacketID = 1074;
		}
    }

    /// <summary>
    ///  [响应类] 出售物品 创建者
    /// </summary>
    [Package(1074)]
    public partial class ResSellItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSellItem();
        }
    }


    /// <summary>
    ///  [请求类]取消收购
    /// </summary>
    public partial class ReqCancelPurchase: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ShopID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqCancelPurchase pkg = new ReqCancelPurchase();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ShopID = ShopID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ShopID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ShopID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqCancelPurchase()
		{
			PacketID = 1075;
		}
    }

    /// <summary>
    ///  [请求类] 取消收购 创建者
    /// </summary>
    [Package(1075)]
    public partial class ReqCancelPurchaseCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCancelPurchase();
        }
    }


    /// <summary>
    ///  [响应类]取消收购
    /// </summary>
    public partial class ResCancelPurchase: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResCancelPurchase pkg = new ResCancelPurchase();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResCancelPurchase()
		{
			PacketID = 1076;
		}
    }

    /// <summary>
    ///  [响应类] 取消收购 创建者
    /// </summary>
    [Package(1076)]
    public partial class ResCancelPurchaseCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCancelPurchase();
        }
    }


    /// <summary>
    ///  [请求类]添加收购信息
    /// </summary>
    public partial class ReqAddPurchaseInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqAddPurchaseInfo pkg = new ReqAddPurchaseInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddPurchaseInfo()
		{
			PacketID = 1077;
		}
    }

    /// <summary>
    ///  [请求类] 添加收购信息 创建者
    /// </summary>
    [Package(1077)]
    public partial class ReqAddPurchaseInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddPurchaseInfo();
        }
    }


    /// <summary>
    ///  [响应类]添加收购信息
    /// </summary>
    public partial class ResAddPurchaseInfo: Packet 
    {
        /// <summary>
        /// 收购信息
        /// </summary>
        public PurchaseInfo ShopInfo = new PurchaseInfo();

        public override Packet Clone()
        {
            ResAddPurchaseInfo pkg = new ResAddPurchaseInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ShopInfo = ShopInfo.Clone() as PurchaseInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ShopInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ShopInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddPurchaseInfo()
		{
			PacketID = 1078;
		}
    }

    /// <summary>
    ///  [响应类] 添加收购信息 创建者
    /// </summary>
    [Package(1078)]
    public partial class ResAddPurchaseInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddPurchaseInfo();
        }
    }


    /// <summary>
    ///  [请求类]删除收购信息
    /// </summary>
    public partial class ReqRemovePurchaseInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqRemovePurchaseInfo pkg = new ReqRemovePurchaseInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRemovePurchaseInfo()
		{
			PacketID = 1079;
		}
    }

    /// <summary>
    ///  [请求类] 删除收购信息 创建者
    /// </summary>
    [Package(1079)]
    public partial class ReqRemovePurchaseInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemovePurchaseInfo();
        }
    }


    /// <summary>
    ///  [响应类]删除收购信息
    /// </summary>
    public partial class ResRemovePurchaseInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ShopID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResRemovePurchaseInfo pkg = new ResRemovePurchaseInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ShopID = ShopID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ShopID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ShopID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResRemovePurchaseInfo()
		{
			PacketID = 1080;
		}
    }

    /// <summary>
    ///  [响应类] 删除收购信息 创建者
    /// </summary>
    [Package(1080)]
    public partial class ResRemovePurchaseInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemovePurchaseInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新商店信息
    /// </summary>
    public partial class ReqUpdatePurchaseInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePurchaseInfo pkg = new ReqUpdatePurchaseInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePurchaseInfo()
		{
			PacketID = 1081;
		}
    }

    /// <summary>
    ///  [请求类] 更新商店信息 创建者
    /// </summary>
    [Package(1081)]
    public partial class ReqUpdatePurchaseInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePurchaseInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新商店信息
    /// </summary>
    public partial class ResUpdatePurchaseInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ShopID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint CurCount;

        public override Packet Clone()
        {
            ResUpdatePurchaseInfo pkg = new ResUpdatePurchaseInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ShopID = ShopID.Clone() as ObjectGuidInfo;
            pkg.CurCount = CurCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ShopID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(CurCount);
            }
            else
            {
                ShopID.Serializtion(oByteArray, bSerialize);
                CurCount = oByteArray.ReadUInt();
            }
        }
		public ResUpdatePurchaseInfo()
		{
			PacketID = 1082;
		}
    }

    /// <summary>
    ///  [响应类] 更新商店信息 创建者
    /// </summary>
    [Package(1082)]
    public partial class ResUpdatePurchaseInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePurchaseInfo();
        }
    }


    /// <summary>
    ///  [请求类]收购列表
    /// </summary>
    public partial class ReqPurchaseInfoList: Packet 
    {

        public override Packet Clone()
        {
            ReqPurchaseInfoList pkg = new ReqPurchaseInfoList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPurchaseInfoList()
		{
			PacketID = 1083;
		}
    }

    /// <summary>
    ///  [请求类] 收购列表 创建者
    /// </summary>
    [Package(1083)]
    public partial class ReqPurchaseInfoListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPurchaseInfoList();
        }
    }


    /// <summary>
    ///  [响应类]收购列表
    /// </summary>
    public partial class ResPurchaseInfoList: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<PurchaseInfo> InfoVec = new List<PurchaseInfo>();

        public override Packet Clone()
        {
            ResPurchaseInfoList pkg = new ResPurchaseInfoList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (PurchaseInfo item in InfoVec)
            {
                pkg.InfoVec.Add(item.Clone() as PurchaseInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)InfoVec.Count);
                for (int i = 0; i < InfoVec.Count; i++)
                {
                    InfoVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int InfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoVecCount; i++)
                {
                    PurchaseInfo obj = new PurchaseInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    InfoVec.Add(obj);
                }
            }
        }
		public ResPurchaseInfoList()
		{
			PacketID = 1084;
		}
    }

    /// <summary>
    ///  [响应类] 收购列表 创建者
    /// </summary>
    [Package(1084)]
    public partial class ResPurchaseInfoListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPurchaseInfoList();
        }
    }


    /// <summary>
    ///  [请求类]通知前端怪物播放出场动画
    /// </summary>
    public partial class ReqPlayDrilledAction: Packet 
    {

        public override Packet Clone()
        {
            ReqPlayDrilledAction pkg = new ReqPlayDrilledAction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPlayDrilledAction()
		{
			PacketID = 1085;
		}
    }

    /// <summary>
    ///  [请求类] 通知前端怪物播放出场动画 创建者
    /// </summary>
    [Package(1085)]
    public partial class ReqPlayDrilledActionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayDrilledAction();
        }
    }


    /// <summary>
    ///  [响应类]通知前端怪物播放出场动画
    /// </summary>
    public partial class ResPlayDrilledAction: Packet 
    {
        /// <summary>
        /// 怪物ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResPlayDrilledAction pkg = new ResPlayDrilledAction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResPlayDrilledAction()
		{
			PacketID = 1086;
		}
    }

    /// <summary>
    ///  [响应类] 通知前端怪物播放出场动画 创建者
    /// </summary>
    [Package(1086)]
    public partial class ResPlayDrilledActionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayDrilledAction();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服肉身添加BUFF
    /// </summary>
    public partial class ReqAddBuffToRouShen: Packet 
    {

        public override Packet Clone()
        {
            ReqAddBuffToRouShen pkg = new ReqAddBuffToRouShen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddBuffToRouShen()
		{
			PacketID = 1087;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服肉身添加BUFF 创建者
    /// </summary>
    [Package(1087)]
    public partial class ReqAddBuffToRouShenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddBuffToRouShen();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服肉身添加BUFF
    /// </summary>
    public partial class ResAddBuffToRouShen: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint BuffID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ResAddBuffToRouShen pkg = new ResAddBuffToRouShen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BuffID = BuffID;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BuffID);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                BuffID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ResAddBuffToRouShen()
		{
			PacketID = 1088;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服肉身添加BUFF 创建者
    /// </summary>
    [Package(1088)]
    public partial class ResAddBuffToRouShenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddBuffToRouShen();
        }
    }


    /// <summary>
    ///  [请求类]刷新玩家功能怪（镖车，心魔）
    /// </summary>
    public partial class ReqSpawnPlayerMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MonsterID;
        /// <summary>
        /// 是否购买保险
        /// </summary>
        public bool IsMoney;

        public override Packet Clone()
        {
            ReqSpawnPlayerMonster pkg = new ReqSpawnPlayerMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterID = MonsterID;
            pkg.IsMoney = IsMoney;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonsterID);
                oByteArray.WriteBoolean(IsMoney);
            }
            else
            {
                MonsterID = oByteArray.ReadUInt();
                IsMoney = oByteArray.ReadBoolean();
            }
        }
		public ReqSpawnPlayerMonster()
		{
			PacketID = 1089;
		}
    }

    /// <summary>
    ///  [请求类] 刷新玩家功能怪（镖车，心魔） 创建者
    /// </summary>
    [Package(1089)]
    public partial class ReqSpawnPlayerMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnPlayerMonster();
        }
    }


    /// <summary>
    ///  [响应类]刷新玩家功能怪（镖车，心魔）
    /// </summary>
    public partial class ResSpawnPlayerMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint CurHp;
        /// <summary>
        /// 
        /// </summary>
        public byte Type;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerID;

        public override Packet Clone()
        {
            ResSpawnPlayerMonster pkg = new ResSpawnPlayerMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurHp = CurHp;
            pkg.Type = Type;
            pkg.PlayerID = PlayerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurHp);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt64(PlayerID);
            }
            else
            {
                CurHp = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                PlayerID = oByteArray.ReadUInt64();
            }
        }
		public ResSpawnPlayerMonster()
		{
			PacketID = 1090;
		}
    }

    /// <summary>
    ///  [响应类] 刷新玩家功能怪（镖车，心魔） 创建者
    /// </summary>
    [Package(1090)]
    public partial class ResSpawnPlayerMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnPlayerMonster();
        }
    }


    /// <summary>
    ///  [请求类]升级心魔等级
    /// </summary>
    public partial class ReqUpgradeInnerDemonsLv: Packet 
    {

        public override Packet Clone()
        {
            ReqUpgradeInnerDemonsLv pkg = new ReqUpgradeInnerDemonsLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpgradeInnerDemonsLv()
		{
			PacketID = 1091;
		}
    }

    /// <summary>
    ///  [请求类] 升级心魔等级 创建者
    /// </summary>
    [Package(1091)]
    public partial class ReqUpgradeInnerDemonsLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeInnerDemonsLv();
        }
    }


    /// <summary>
    ///  [响应类]升级心魔等级
    /// </summary>
    public partial class ResUpgradeInnerDemonsLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResUpgradeInnerDemonsLv pkg = new ResUpgradeInnerDemonsLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResUpgradeInnerDemonsLv()
		{
			PacketID = 1092;
		}
    }

    /// <summary>
    ///  [响应类] 升级心魔等级 创建者
    /// </summary>
    [Package(1092)]
    public partial class ResUpgradeInnerDemonsLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeInnerDemonsLv();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服因boss掉落添加心魔经验
    /// </summary>
    public partial class ReqAddInnerDemonsExp: Packet 
    {

        public override Packet Clone()
        {
            ReqAddInnerDemonsExp pkg = new ReqAddInnerDemonsExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddInnerDemonsExp()
		{
			PacketID = 1093;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服因boss掉落添加心魔经验 创建者
    /// </summary>
    [Package(1093)]
    public partial class ReqAddInnerDemonsExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddInnerDemonsExp();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服因boss掉落添加心魔经验
    /// </summary>
    public partial class ResAddInnerDemonsExp: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MonsterLv;

        public override Packet Clone()
        {
            ResAddInnerDemonsExp pkg = new ResAddInnerDemonsExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterLv = MonsterLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonsterLv);
            }
            else
            {
                MonsterLv = oByteArray.ReadUInt();
            }
        }
		public ResAddInnerDemonsExp()
		{
			PacketID = 1094;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服因boss掉落添加心魔经验 创建者
    /// </summary>
    [Package(1094)]
    public partial class ResAddInnerDemonsExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddInnerDemonsExp();
        }
    }


    /// <summary>
    ///  [请求类]激活心魔buff
    /// </summary>
    public partial class ReqActiveInnerDemonsBuff: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqActiveInnerDemonsBuff pkg = new ReqActiveInnerDemonsBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqActiveInnerDemonsBuff()
		{
			PacketID = 1095;
		}
    }

    /// <summary>
    ///  [请求类] 激活心魔buff 创建者
    /// </summary>
    [Package(1095)]
    public partial class ReqActiveInnerDemonsBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqActiveInnerDemonsBuff();
        }
    }


    /// <summary>
    ///  [响应类]激活心魔buff
    /// </summary>
    public partial class ResActiveInnerDemonsBuff: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResActiveInnerDemonsBuff pkg = new ResActiveInnerDemonsBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResActiveInnerDemonsBuff()
		{
			PacketID = 1096;
		}
    }

    /// <summary>
    ///  [响应类] 激活心魔buff 创建者
    /// </summary>
    [Package(1096)]
    public partial class ResActiveInnerDemonsBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResActiveInnerDemonsBuff();
        }
    }


    /// <summary>
    ///  [请求类]变身心魔
    /// </summary>
    public partial class ReqShapeshiftInnerDemons: Packet 
    {
        /// <summary>
        /// true是变身false是取消
        /// </summary>
        public bool Type;

        public override Packet Clone()
        {
            ReqShapeshiftInnerDemons pkg = new ReqShapeshiftInnerDemons();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Type);
            }
            else
            {
                Type = oByteArray.ReadBoolean();
            }
        }
		public ReqShapeshiftInnerDemons()
		{
			PacketID = 1097;
		}
    }

    /// <summary>
    ///  [请求类] 变身心魔 创建者
    /// </summary>
    [Package(1097)]
    public partial class ReqShapeshiftInnerDemonsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqShapeshiftInnerDemons();
        }
    }


    /// <summary>
    ///  [响应类]变身心魔
    /// </summary>
    public partial class ResShapeshiftInnerDemons: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public bool Type;

        public override Packet Clone()
        {
            ResShapeshiftInnerDemons pkg = new ResShapeshiftInnerDemons();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteBoolean(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadBoolean();
            }
        }
		public ResShapeshiftInnerDemons()
		{
			PacketID = 1098;
		}
    }

    /// <summary>
    ///  [响应类] 变身心魔 创建者
    /// </summary>
    [Package(1098)]
    public partial class ResShapeshiftInnerDemonsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResShapeshiftInnerDemons();
        }
    }


    /// <summary>
    ///  [请求类]更新副本波数信息
    /// </summary>
    public partial class ReqUpdateWaveInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateWaveInfo pkg = new ReqUpdateWaveInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateWaveInfo()
		{
			PacketID = 1099;
		}
    }

    /// <summary>
    ///  [请求类] 更新副本波数信息 创建者
    /// </summary>
    [Package(1099)]
    public partial class ReqUpdateWaveInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateWaveInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新副本波数信息
    /// </summary>
    public partial class ResUpdateWaveInfo: Packet 
    {
        /// <summary>
        /// 当前波数
        /// </summary>
        public byte CurWave;
        /// <summary>
        /// 下一波刷新时间戳
        /// </summary>
        public uint NextWaveTime;
        /// <summary>
        /// 最大波数
        /// </summary>
        public byte MaxWave;
        /// <summary>
        /// 当前剩余怪物数量
        /// </summary>
        public uint CurMonsterCount;

        public override Packet Clone()
        {
            ResUpdateWaveInfo pkg = new ResUpdateWaveInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurWave = CurWave;
            pkg.NextWaveTime = NextWaveTime;
            pkg.MaxWave = MaxWave;
            pkg.CurMonsterCount = CurMonsterCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(CurWave);
                oByteArray.WriteUInt(NextWaveTime);
                oByteArray.WriteByte(MaxWave);
                oByteArray.WriteUInt(CurMonsterCount);
            }
            else
            {
                CurWave = oByteArray.ReadByte();
                NextWaveTime = oByteArray.ReadUInt();
                MaxWave = oByteArray.ReadByte();
                CurMonsterCount = oByteArray.ReadUInt();
            }
        }
		public ResUpdateWaveInfo()
		{
			PacketID = 1100;
		}
    }

    /// <summary>
    ///  [响应类] 更新副本波数信息 创建者
    /// </summary>
    [Package(1100)]
    public partial class ResUpdateWaveInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateWaveInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知前端尸体被玩家采集
    /// </summary>
    public partial class ReqUpdateCollectTimes: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateCollectTimes pkg = new ReqUpdateCollectTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateCollectTimes()
		{
			PacketID = 1101;
		}
    }

    /// <summary>
    ///  [请求类] 通知前端尸体被玩家采集 创建者
    /// </summary>
    [Package(1101)]
    public partial class ReqUpdateCollectTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateCollectTimes();
        }
    }


    /// <summary>
    ///  [响应类]通知前端尸体被玩家采集
    /// </summary>
    public partial class ResUpdateCollectTimes: Packet 
    {
        /// <summary>
        /// 新采集玩家ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 尸体ID
        /// </summary>
        public ObjectGuidInfo MonsterID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResUpdateCollectTimes pkg = new ResUpdateCollectTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.MonsterID = MonsterID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                MonsterID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                MonsterID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateCollectTimes()
		{
			PacketID = 1102;
		}
    }

    /// <summary>
    ///  [响应类] 通知前端尸体被玩家采集 创建者
    /// </summary>
    [Package(1102)]
    public partial class ResUpdateCollectTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateCollectTimes();
        }
    }


    /// <summary>
    ///  [请求类]获取心魔地图密码
    /// </summary>
    public partial class ReqGetInnerDDemonsMapInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqGetInnerDDemonsMapInfo pkg = new ReqGetInnerDDemonsMapInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqGetInnerDDemonsMapInfo()
		{
			PacketID = 1103;
		}
    }

    /// <summary>
    ///  [请求类] 获取心魔地图密码 创建者
    /// </summary>
    [Package(1103)]
    public partial class ReqGetInnerDDemonsMapInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetInnerDDemonsMapInfo();
        }
    }


    /// <summary>
    ///  [响应类]获取心魔地图密码
    /// </summary>
    public partial class ResGetInnerDDemonsMapInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public List<byte> InfoVec = new List<byte>();
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ResGetInnerDDemonsMapInfo pkg = new ResGetInnerDDemonsMapInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (var item in InfoVec)
            {
                pkg.InfoVec.Add(item);
            }
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUShort((ushort)InfoVec.Count);
                for (int i = 0; i < InfoVec.Count; i++)
                {
                    oByteArray.WriteByte(InfoVec[i]);
                }
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                int InfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoVecCount; i++)
                {
                    InfoVec.Add(oByteArray.ReadByte());
                }
                MapID = oByteArray.ReadUInt();
            }
        }
		public ResGetInnerDDemonsMapInfo()
		{
			PacketID = 1104;
		}
    }

    /// <summary>
    ///  [响应类] 获取心魔地图密码 创建者
    /// </summary>
    [Package(1104)]
    public partial class ResGetInnerDDemonsMapInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetInnerDDemonsMapInfo();
        }
    }


    /// <summary>
    ///  [请求类]心魔传送
    /// </summary>
    public partial class ReqInnerDemonsTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<byte> Info = new List<byte>();
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqInnerDemonsTransfer pkg = new ReqInnerDemonsTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in Info)
            {
                pkg.Info.Add(item);
            }
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < Info.Count; i++)
                {
                      oByteArray.WriteByte(Info[i]);
                }
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    Info.Add(oByteArray.ReadByte());
                }
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqInnerDemonsTransfer()
		{
			PacketID = 1105;
		}
    }

    /// <summary>
    ///  [请求类] 心魔传送 创建者
    /// </summary>
    [Package(1105)]
    public partial class ReqInnerDemonsTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInnerDemonsTransfer();
        }
    }


    /// <summary>
    ///  [响应类]心魔传送
    /// </summary>
    public partial class ResInnerDemonsTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResInnerDemonsTransfer pkg = new ResInnerDemonsTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResInnerDemonsTransfer()
		{
			PacketID = 1106;
		}
    }

    /// <summary>
    ///  [响应类] 心魔传送 创建者
    /// </summary>
    [Package(1106)]
    public partial class ResInnerDemonsTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInnerDemonsTransfer();
        }
    }


    /// <summary>
    ///  [请求类]后台更新聊天等级信息
    /// </summary>
    public partial class ReqUpdateChatLvInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateChatLvInfo pkg = new ReqUpdateChatLvInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateChatLvInfo()
		{
			PacketID = 1107;
		}
    }

    /// <summary>
    ///  [请求类] 后台更新聊天等级信息 创建者
    /// </summary>
    [Package(1107)]
    public partial class ReqUpdateChatLvInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateChatLvInfo();
        }
    }


    /// <summary>
    ///  [响应类]后台更新聊天等级信息
    /// </summary>
    public partial class ResUpdateChatLvInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<Property> Info = new List<Property>();

        public override Packet Clone()
        {
            ResUpdateChatLvInfo pkg = new ResUpdateChatLvInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (Property item in Info)
            {
                pkg.Info.Add(item.Clone() as Property);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Info.Count);
                for (int i = 0; i < Info.Count; i++)
                {
                    Info[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    Property obj = new Property();
                    obj.Serializtion(oByteArray, bSerialize);
                    Info.Add(obj);
                }
            }
        }
		public ResUpdateChatLvInfo()
		{
			PacketID = 1108;
		}
    }

    /// <summary>
    ///  [响应类] 后台更新聊天等级信息 创建者
    /// </summary>
    [Package(1108)]
    public partial class ResUpdateChatLvInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateChatLvInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服添加新的boss活动掉落
    /// </summary>
    public partial class ReqAddDropInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqAddDropInfo pkg = new ReqAddDropInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddDropInfo()
		{
			PacketID = 1109;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服添加新的boss活动掉落 创建者
    /// </summary>
    [Package(1109)]
    public partial class ReqAddDropInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddDropInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服添加新的boss活动掉落
    /// </summary>
    public partial class ResAddDropInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public List<AssembleActivityDropInfo> DropInfo = new List<AssembleActivityDropInfo>();

        public override Packet Clone()
        {
            ResAddDropInfo pkg = new ResAddDropInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            foreach (AssembleActivityDropInfo item in DropInfo)
            {
                pkg.DropInfo.Add(item.Clone() as AssembleActivityDropInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUShort((ushort)DropInfo.Count);
                for (int i = 0; i < DropInfo.Count; i++)
                {
                    DropInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                int DropInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DropInfoCount; i++)
                {
                    AssembleActivityDropInfo obj = new AssembleActivityDropInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    DropInfo.Add(obj);
                }
            }
        }
		public ResAddDropInfo()
		{
			PacketID = 1110;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服添加新的boss活动掉落 创建者
    /// </summary>
    [Package(1110)]
    public partial class ResAddDropInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddDropInfo();
        }
    }


    /// <summary>
    ///  [请求类]移除活动掉落
    /// </summary>
    public partial class ReqRemoveDropInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqRemoveDropInfo pkg = new ReqRemoveDropInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRemoveDropInfo()
		{
			PacketID = 1111;
		}
    }

    /// <summary>
    ///  [请求类] 移除活动掉落 创建者
    /// </summary>
    [Package(1111)]
    public partial class ReqRemoveDropInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveDropInfo();
        }
    }


    /// <summary>
    ///  [响应类]移除活动掉落
    /// </summary>
    public partial class ResRemoveDropInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ResRemoveDropInfo pkg = new ResRemoveDropInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ResRemoveDropInfo()
		{
			PacketID = 1112;
		}
    }

    /// <summary>
    ///  [响应类] 移除活动掉落 创建者
    /// </summary>
    [Package(1112)]
    public partial class ResRemoveDropInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveDropInfo();
        }
    }


    /// <summary>
    ///  [请求类]申请添加关系确认
    /// </summary>
    public partial class ReqAddSocietyRelationReply: Packet 
    {
        /// <summary>
        /// 申请玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 关系
        /// </summary>
        public byte Relation;
        /// <summary>
        /// 0是拒绝1是同意2是申请
        /// </summary>
        public byte Reply;

        public override Packet Clone()
        {
            ReqAddSocietyRelationReply pkg = new ReqAddSocietyRelationReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Relation = Relation;
            pkg.Reply = Reply;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Relation);
                oByteArray.WriteByte(Reply);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Relation = oByteArray.ReadByte();
                Reply = oByteArray.ReadByte();
            }
        }
		public ReqAddSocietyRelationReply()
		{
			PacketID = 1113;
		}
    }

    /// <summary>
    ///  [请求类] 申请添加关系确认 创建者
    /// </summary>
    [Package(1113)]
    public partial class ReqAddSocietyRelationReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddSocietyRelationReply();
        }
    }


    /// <summary>
    ///  [响应类]申请添加关系确认
    /// </summary>
    public partial class ResAddSocietyRelationReply: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 关系
        /// </summary>
        public byte Relation;
        /// <summary>
        /// 0是拒绝1是同意2是申请
        /// </summary>
        public byte Reply;
        /// <summary>
        /// 名字
        /// </summary>
        public string NickName;
        /// <summary>
        /// 等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 职业
        /// </summary>
        public byte Career;

        public override Packet Clone()
        {
            ResAddSocietyRelationReply pkg = new ResAddSocietyRelationReply();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Relation = Relation;
            pkg.Reply = Reply;
            pkg.NickName = NickName;
            pkg.Lv = Lv;
            pkg.Career = Career;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Relation);
                oByteArray.WriteByte(Reply);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteInt(Lv);
                oByteArray.WriteByte(Career);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                Relation = oByteArray.ReadByte();
                Reply = oByteArray.ReadByte();
                NickName = oByteArray.ReadUTF();
                Lv = oByteArray.ReadInt();
                Career = oByteArray.ReadByte();
            }
        }
		public ResAddSocietyRelationReply()
		{
			PacketID = 1114;
		}
    }

    /// <summary>
    ///  [响应类] 申请添加关系确认 创建者
    /// </summary>
    [Package(1114)]
    public partial class ResAddSocietyRelationReplyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddSocietyRelationReply();
        }
    }


    /// <summary>
    ///  [请求类]升级国家宝藏
    /// </summary>
    public partial class ReqDropCollectUpgrade: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public uint Subtype;

        public override Packet Clone()
        {
            ReqDropCollectUpgrade pkg = new ReqDropCollectUpgrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Subtype = Subtype;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Subtype);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Subtype = oByteArray.ReadUInt();
            }
        }
		public ReqDropCollectUpgrade()
		{
			PacketID = 1115;
		}
    }

    /// <summary>
    ///  [请求类] 升级国家宝藏 创建者
    /// </summary>
    [Package(1115)]
    public partial class ReqDropCollectUpgradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDropCollectUpgrade();
        }
    }


    /// <summary>
    ///  [响应类]升级国家宝藏
    /// </summary>
    public partial class ResDropCollectUpgrade: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public uint Subtype;

        public override Packet Clone()
        {
            ResDropCollectUpgrade pkg = new ResDropCollectUpgrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.Subtype = Subtype;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Subtype);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadUInt();
                Subtype = oByteArray.ReadUInt();
            }
        }
		public ResDropCollectUpgrade()
		{
			PacketID = 1116;
		}
    }

    /// <summary>
    ///  [响应类] 升级国家宝藏 创建者
    /// </summary>
    [Package(1116)]
    public partial class ResDropCollectUpgradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDropCollectUpgrade();
        }
    }


    /// <summary>
    ///  [请求类]兑换国家宝藏宝箱
    /// </summary>
    public partial class ReqExchangeDropCollectArr: Packet 
    {

        public override Packet Clone()
        {
            ReqExchangeDropCollectArr pkg = new ReqExchangeDropCollectArr();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqExchangeDropCollectArr()
		{
			PacketID = 1117;
		}
    }

    /// <summary>
    ///  [请求类] 兑换国家宝藏宝箱 创建者
    /// </summary>
    [Package(1117)]
    public partial class ReqExchangeDropCollectArrCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqExchangeDropCollectArr();
        }
    }


    /// <summary>
    ///  [响应类]兑换国家宝藏宝箱
    /// </summary>
    public partial class ResExchangeDropCollectArr: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResExchangeDropCollectArr pkg = new ResExchangeDropCollectArr();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResExchangeDropCollectArr()
		{
			PacketID = 1118;
		}
    }

    /// <summary>
    ///  [响应类] 兑换国家宝藏宝箱 创建者
    /// </summary>
    [Package(1118)]
    public partial class ResExchangeDropCollectArrCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResExchangeDropCollectArr();
        }
    }


    /// <summary>
    ///  [请求类]领取在线关系亲密度
    /// </summary>
    public partial class ReqTakeBrotherRelationValue: Packet 
    {
        /// <summary>
        /// 关系
        /// </summary>
        public byte Relation;

        public override Packet Clone()
        {
            ReqTakeBrotherRelationValue pkg = new ReqTakeBrotherRelationValue();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Relation = Relation;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Relation);
            }
            else
            {
                Relation = oByteArray.ReadByte();
            }
        }
		public ReqTakeBrotherRelationValue()
		{
			PacketID = 1119;
		}
    }

    /// <summary>
    ///  [请求类] 领取在线关系亲密度 创建者
    /// </summary>
    [Package(1119)]
    public partial class ReqTakeBrotherRelationValueCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeBrotherRelationValue();
        }
    }


    /// <summary>
    ///  [响应类]领取在线关系亲密度
    /// </summary>
    public partial class ResTakeBrotherRelationValue: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public int Relation;

        public override Packet Clone()
        {
            ResTakeBrotherRelationValue pkg = new ResTakeBrotherRelationValue();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Relation = Relation;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteInt(Relation);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Relation = oByteArray.ReadInt();
            }
        }
		public ResTakeBrotherRelationValue()
		{
			PacketID = 1120;
		}
    }

    /// <summary>
    ///  [响应类] 领取在线关系亲密度 创建者
    /// </summary>
    [Package(1120)]
    public partial class ResTakeBrotherRelationValueCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeBrotherRelationValue();
        }
    }


    /// <summary>
    ///  [请求类]赠送鲜花
    /// </summary>
    public partial class ReqSendFlower: Packet 
    {
        /// <summary>
        /// 数量
        /// </summary>
        public int Num;
        /// <summary>
        /// 接受者ID
        /// </summary>
        public ObjectGuidInfo ReceiverID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqSendFlower pkg = new ReqSendFlower();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Num = Num;
            pkg.ReceiverID = ReceiverID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Num);
                ReceiverID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Num = oByteArray.ReadInt();
                ReceiverID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqSendFlower()
		{
			PacketID = 1121;
		}
    }

    /// <summary>
    ///  [请求类] 赠送鲜花 创建者
    /// </summary>
    [Package(1121)]
    public partial class ReqSendFlowerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSendFlower();
        }
    }


    /// <summary>
    ///  [响应类]赠送鲜花
    /// </summary>
    public partial class ResSendFlower: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 数量
        /// </summary>
        public int Num;
        /// <summary>
        /// 发送者ID
        /// </summary>
        public ObjectGuidInfo SenderID = new ObjectGuidInfo();
        /// <summary>
        /// 接收者ID
        /// </summary>
        public ObjectGuidInfo ReceiverID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResSendFlower pkg = new ResSendFlower();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Num = Num;
            pkg.SenderID = SenderID.Clone() as ObjectGuidInfo;
            pkg.ReceiverID = ReceiverID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteInt(Num);
                SenderID.Serializtion(oByteArray, bSerialize);
                ReceiverID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Num = oByteArray.ReadInt();
                SenderID.Serializtion(oByteArray, bSerialize);
                ReceiverID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResSendFlower()
		{
			PacketID = 1122;
		}
    }

    /// <summary>
    ///  [响应类] 赠送鲜花 创建者
    /// </summary>
    [Package(1122)]
    public partial class ResSendFlowerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSendFlower();
        }
    }


    /// <summary>
    ///  [请求类]升级金兰帖
    /// </summary>
    public partial class ReqUpgradeJinLanTie: Packet 
    {

        public override Packet Clone()
        {
            ReqUpgradeJinLanTie pkg = new ReqUpgradeJinLanTie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpgradeJinLanTie()
		{
			PacketID = 1123;
		}
    }

    /// <summary>
    ///  [请求类] 升级金兰帖 创建者
    /// </summary>
    [Package(1123)]
    public partial class ReqUpgradeJinLanTieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeJinLanTie();
        }
    }


    /// <summary>
    ///  [响应类]升级金兰帖
    /// </summary>
    public partial class ResUpgradeJinLanTie: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResUpgradeJinLanTie pkg = new ResUpgradeJinLanTie();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResUpgradeJinLanTie()
		{
			PacketID = 1124;
		}
    }

    /// <summary>
    ///  [响应类] 升级金兰帖 创建者
    /// </summary>
    [Package(1124)]
    public partial class ResUpgradeJinLanTieCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeJinLanTie();
        }
    }


    /// <summary>
    ///  [请求类]通知杀怪增加的好友度
    /// </summary>
    public partial class ReqNoticeKillMonsterAddRelationValue: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeKillMonsterAddRelationValue pkg = new ReqNoticeKillMonsterAddRelationValue();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeKillMonsterAddRelationValue()
		{
			PacketID = 1125;
		}
    }

    /// <summary>
    ///  [请求类] 通知杀怪增加的好友度 创建者
    /// </summary>
    [Package(1125)]
    public partial class ReqNoticeKillMonsterAddRelationValueCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeKillMonsterAddRelationValue();
        }
    }


    /// <summary>
    ///  [响应类]通知杀怪增加的好友度
    /// </summary>
    public partial class ResNoticeKillMonsterAddRelationValue: Packet 
    {
        /// <summary>
        /// 已增加的值
        /// </summary>
        public int Value;

        public override Packet Clone()
        {
            ResNoticeKillMonsterAddRelationValue pkg = new ResNoticeKillMonsterAddRelationValue();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Value = Value;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Value);
            }
            else
            {
                Value = oByteArray.ReadInt();
            }
        }
		public ResNoticeKillMonsterAddRelationValue()
		{
			PacketID = 1126;
		}
    }

    /// <summary>
    ///  [响应类] 通知杀怪增加的好友度 创建者
    /// </summary>
    [Package(1126)]
    public partial class ResNoticeKillMonsterAddRelationValueCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeKillMonsterAddRelationValue();
        }
    }


    /// <summary>
    ///  [请求类]请求传奇骰子
    /// </summary>
    public partial class ReqChuanQiShaiZi: Packet 
    {

        public override Packet Clone()
        {
            ReqChuanQiShaiZi pkg = new ReqChuanQiShaiZi();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqChuanQiShaiZi()
		{
			PacketID = 1127;
		}
    }

    /// <summary>
    ///  [请求类] 请求传奇骰子 创建者
    /// </summary>
    [Package(1127)]
    public partial class ReqChuanQiShaiZiCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChuanQiShaiZi();
        }
    }


    /// <summary>
    ///  [响应类]请求传奇骰子
    /// </summary>
    public partial class ResChuanQiShaiZi: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 点数
        /// </summary>
        public int Point1;
        /// <summary>
        /// 点数
        /// </summary>
        public int Point2;
        /// <summary>
        /// 点数
        /// </summary>
        public int Point3;
        /// <summary>
        /// 
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 
        /// </summary>
        public int Money;

        public override Packet Clone()
        {
            ResChuanQiShaiZi pkg = new ResChuanQiShaiZi();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Point1 = Point1;
            pkg.Point2 = Point2;
            pkg.Point3 = Point3;
            pkg.MoneyType = MoneyType;
            pkg.Money = Money;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteInt(Point1);
                oByteArray.WriteInt(Point2);
                oByteArray.WriteInt(Point3);
                oByteArray.WriteInt(MoneyType);
                oByteArray.WriteInt(Money);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Point1 = oByteArray.ReadInt();
                Point2 = oByteArray.ReadInt();
                Point3 = oByteArray.ReadInt();
                MoneyType = oByteArray.ReadInt();
                Money = oByteArray.ReadInt();
            }
        }
		public ResChuanQiShaiZi()
		{
			PacketID = 1128;
		}
    }

    /// <summary>
    ///  [响应类] 请求传奇骰子 创建者
    /// </summary>
    [Package(1128)]
    public partial class ResChuanQiShaiZiCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChuanQiShaiZi();
        }
    }


    /// <summary>
    ///  [请求类]更新服务器点数
    /// </summary>
    public partial class ReqUpdateServerShaiZiPoint: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateServerShaiZiPoint pkg = new ReqUpdateServerShaiZiPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateServerShaiZiPoint()
		{
			PacketID = 1129;
		}
    }

    /// <summary>
    ///  [请求类] 更新服务器点数 创建者
    /// </summary>
    [Package(1129)]
    public partial class ReqUpdateServerShaiZiPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateServerShaiZiPoint();
        }
    }


    /// <summary>
    ///  [响应类]更新服务器点数
    /// </summary>
    public partial class ResUpdateServerShaiZiPoint: Packet 
    {
        /// <summary>
        /// 服务器点数
        /// </summary>
        public int Point;
        /// <summary>
        /// 服务器点数2
        /// </summary>
        public int Point2;
        /// <summary>
        /// 服务器点数3
        /// </summary>
        public int Point3;

        public override Packet Clone()
        {
            ResUpdateServerShaiZiPoint pkg = new ResUpdateServerShaiZiPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Point = Point;
            pkg.Point2 = Point2;
            pkg.Point3 = Point3;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Point);
                oByteArray.WriteInt(Point2);
                oByteArray.WriteInt(Point3);
            }
            else
            {
                Point = oByteArray.ReadInt();
                Point2 = oByteArray.ReadInt();
                Point3 = oByteArray.ReadInt();
            }
        }
		public ResUpdateServerShaiZiPoint()
		{
			PacketID = 1130;
		}
    }

    /// <summary>
    ///  [响应类] 更新服务器点数 创建者
    /// </summary>
    [Package(1130)]
    public partial class ResUpdateServerShaiZiPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateServerShaiZiPoint();
        }
    }


    /// <summary>
    ///  [请求类]更新奖池元宝
    /// </summary>
    public partial class ReqUpdateServerShaiZiMoney: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateServerShaiZiMoney pkg = new ReqUpdateServerShaiZiMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateServerShaiZiMoney()
		{
			PacketID = 1131;
		}
    }

    /// <summary>
    ///  [请求类] 更新奖池元宝 创建者
    /// </summary>
    [Package(1131)]
    public partial class ReqUpdateServerShaiZiMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateServerShaiZiMoney();
        }
    }


    /// <summary>
    ///  [响应类]更新奖池元宝
    /// </summary>
    public partial class ResUpdateServerShaiZiMoney: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Money;

        public override Packet Clone()
        {
            ResUpdateServerShaiZiMoney pkg = new ResUpdateServerShaiZiMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Money = Money;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Money);
            }
            else
            {
                Money = oByteArray.ReadInt();
            }
        }
		public ResUpdateServerShaiZiMoney()
		{
			PacketID = 1132;
		}
    }

    /// <summary>
    ///  [响应类] 更新奖池元宝 创建者
    /// </summary>
    [Package(1132)]
    public partial class ResUpdateServerShaiZiMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateServerShaiZiMoney();
        }
    }


    /// <summary>
    ///  [请求类]花钱传送到藏宝图地图
    /// </summary>
    public partial class ReqTransferToTreasureMap: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqTransferToTreasureMap pkg = new ReqTransferToTreasureMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqTransferToTreasureMap()
		{
			PacketID = 1133;
		}
    }

    /// <summary>
    ///  [请求类] 花钱传送到藏宝图地图 创建者
    /// </summary>
    [Package(1133)]
    public partial class ReqTransferToTreasureMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferToTreasureMap();
        }
    }


    /// <summary>
    ///  [响应类]花钱传送到藏宝图地图
    /// </summary>
    public partial class ResTransferToTreasureMap: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTransferToTreasureMap pkg = new ResTransferToTreasureMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResTransferToTreasureMap()
		{
			PacketID = 1134;
		}
    }

    /// <summary>
    ///  [响应类] 花钱传送到藏宝图地图 创建者
    /// </summary>
    [Package(1134)]
    public partial class ResTransferToTreasureMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferToTreasureMap();
        }
    }


    /// <summary>
    ///  [请求类]增加传奇筛子日志
    /// </summary>
    public partial class ReqAddChuanQiShaiZiLog: Packet 
    {

        public override Packet Clone()
        {
            ReqAddChuanQiShaiZiLog pkg = new ReqAddChuanQiShaiZiLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddChuanQiShaiZiLog()
		{
			PacketID = 1135;
		}
    }

    /// <summary>
    ///  [请求类] 增加传奇筛子日志 创建者
    /// </summary>
    [Package(1135)]
    public partial class ReqAddChuanQiShaiZiLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddChuanQiShaiZiLog();
        }
    }


    /// <summary>
    ///  [响应类]增加传奇筛子日志
    /// </summary>
    public partial class ResAddChuanQiShaiZiLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public AssembleActivityLog Info = new AssembleActivityLog();

        public override Packet Clone()
        {
            ResAddChuanQiShaiZiLog pkg = new ResAddChuanQiShaiZiLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Info = Info.Clone() as AssembleActivityLog;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Info.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Info.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResAddChuanQiShaiZiLog()
		{
			PacketID = 1136;
		}
    }

    /// <summary>
    ///  [响应类] 增加传奇筛子日志 创建者
    /// </summary>
    [Package(1136)]
    public partial class ResAddChuanQiShaiZiLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddChuanQiShaiZiLog();
        }
    }


    /// <summary>
    ///  [请求类]发送传奇骰子日志给客户端
    /// </summary>
    public partial class ReqSendChuanQiShaiZiLog: Packet 
    {

        public override Packet Clone()
        {
            ReqSendChuanQiShaiZiLog pkg = new ReqSendChuanQiShaiZiLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSendChuanQiShaiZiLog()
		{
			PacketID = 1137;
		}
    }

    /// <summary>
    ///  [请求类] 发送传奇骰子日志给客户端 创建者
    /// </summary>
    [Package(1137)]
    public partial class ReqSendChuanQiShaiZiLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSendChuanQiShaiZiLog();
        }
    }


    /// <summary>
    ///  [响应类]发送传奇骰子日志给客户端
    /// </summary>
    public partial class ResSendChuanQiShaiZiLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<AssembleActivityLog> InfoVec = new List<AssembleActivityLog>();

        public override Packet Clone()
        {
            ResSendChuanQiShaiZiLog pkg = new ResSendChuanQiShaiZiLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (AssembleActivityLog item in InfoVec)
            {
                pkg.InfoVec.Add(item.Clone() as AssembleActivityLog);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)InfoVec.Count);
                for (int i = 0; i < InfoVec.Count; i++)
                {
                    InfoVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int InfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoVecCount; i++)
                {
                    AssembleActivityLog obj = new AssembleActivityLog();
                    obj.Serializtion(oByteArray, bSerialize);
                    InfoVec.Add(obj);
                }
            }
        }
		public ResSendChuanQiShaiZiLog()
		{
			PacketID = 1138;
		}
    }

    /// <summary>
    ///  [响应类] 发送传奇骰子日志给客户端 创建者
    /// </summary>
    [Package(1138)]
    public partial class ResSendChuanQiShaiZiLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSendChuanQiShaiZiLog();
        }
    }


    /// <summary>
    ///  [请求类]通知服务器打开UI
    /// </summary>
    public partial class ReqGuideOpenUI: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int TID;

        public override Packet Clone()
        {
            ReqGuideOpenUI pkg = new ReqGuideOpenUI();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(TID);
            }
            else
            {
                TID = oByteArray.ReadInt();
            }
        }
		public ReqGuideOpenUI()
		{
			PacketID = 1139;
		}
    }

    /// <summary>
    ///  [请求类] 通知服务器打开UI 创建者
    /// </summary>
    [Package(1139)]
    public partial class ReqGuideOpenUICreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGuideOpenUI();
        }
    }


    /// <summary>
    ///  [响应类]通知服务器打开UI
    /// </summary>
    public partial class ResGuideOpenUI: Packet 
    {

        public override Packet Clone()
        {
            ResGuideOpenUI pkg = new ResGuideOpenUI();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResGuideOpenUI()
		{
			PacketID = 1140;
		}
    }

    /// <summary>
    ///  [响应类] 通知服务器打开UI 创建者
    /// </summary>
    [Package(1140)]
    public partial class ResGuideOpenUICreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGuideOpenUI();
        }
    }


    /// <summary>
    ///  [请求类]增加免费骰子次数
    /// </summary>
    public partial class ReqAddFreeShaiZiTime: Packet 
    {

        public override Packet Clone()
        {
            ReqAddFreeShaiZiTime pkg = new ReqAddFreeShaiZiTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddFreeShaiZiTime()
		{
			PacketID = 1141;
		}
    }

    /// <summary>
    ///  [请求类] 增加免费骰子次数 创建者
    /// </summary>
    [Package(1141)]
    public partial class ReqAddFreeShaiZiTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddFreeShaiZiTime();
        }
    }


    /// <summary>
    ///  [响应类]增加免费骰子次数
    /// </summary>
    public partial class ResAddFreeShaiZiTime: Packet 
    {

        public override Packet Clone()
        {
            ResAddFreeShaiZiTime pkg = new ResAddFreeShaiZiTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResAddFreeShaiZiTime()
		{
			PacketID = 1142;
		}
    }

    /// <summary>
    ///  [响应类] 增加免费骰子次数 创建者
    /// </summary>
    [Package(1142)]
    public partial class ResAddFreeShaiZiTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddFreeShaiZiTime();
        }
    }


    /// <summary>
    ///  [请求类]增加日常活动日志
    /// </summary>
    public partial class ReqAddActivityLog: Packet 
    {

        public override Packet Clone()
        {
            ReqAddActivityLog pkg = new ReqAddActivityLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddActivityLog()
		{
			PacketID = 1143;
		}
    }

    /// <summary>
    ///  [请求类] 增加日常活动日志 创建者
    /// </summary>
    [Package(1143)]
    public partial class ReqAddActivityLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddActivityLog();
        }
    }


    /// <summary>
    ///  [响应类]增加日常活动日志
    /// </summary>
    public partial class ResAddActivityLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public AssembleActivityLog Log = new AssembleActivityLog();
        /// <summary>
        /// 
        /// </summary>
        public byte ActivityType;

        public override Packet Clone()
        {
            ResAddActivityLog pkg = new ResAddActivityLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Log = Log.Clone() as AssembleActivityLog;
            pkg.ActivityType = ActivityType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Log.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(ActivityType);
            }
            else
            {
                Log.Serializtion(oByteArray, bSerialize);
                ActivityType = oByteArray.ReadByte();
            }
        }
		public ResAddActivityLog()
		{
			PacketID = 1144;
		}
    }

    /// <summary>
    ///  [响应类] 增加日常活动日志 创建者
    /// </summary>
    [Package(1144)]
    public partial class ResAddActivityLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddActivityLog();
        }
    }


    /// <summary>
    ///  [请求类]升级烧猪守卫
    /// </summary>
    public partial class ReqUpgradeFirePigMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo MonsterID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqUpgradeFirePigMonster pkg = new ReqUpgradeFirePigMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterID = MonsterID.Clone() as ObjectGuidInfo;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                MonsterID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                MonsterID.Serializtion(oByteArray, bSerialize);
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqUpgradeFirePigMonster()
		{
			PacketID = 1145;
		}
    }

    /// <summary>
    ///  [请求类] 升级烧猪守卫 创建者
    /// </summary>
    [Package(1145)]
    public partial class ReqUpgradeFirePigMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeFirePigMonster();
        }
    }


    /// <summary>
    ///  [响应类]升级烧猪守卫
    /// </summary>
    public partial class ResUpgradeFirePigMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo MonsterID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResUpgradeFirePigMonster pkg = new ResUpgradeFirePigMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MonsterID = MonsterID.Clone() as ObjectGuidInfo;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                MonsterID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                MonsterID.Serializtion(oByteArray, bSerialize);
                TID = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeFirePigMonster()
		{
			PacketID = 1146;
		}
    }

    /// <summary>
    ///  [响应类] 升级烧猪守卫 创建者
    /// </summary>
    [Package(1146)]
    public partial class ResUpgradeFirePigMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeFirePigMonster();
        }
    }


    /// <summary>
    ///  [请求类]领取全民红包奖励
    /// </summary>
    public partial class ReqTakeRedBagMoney: Packet 
    {

        public override Packet Clone()
        {
            ReqTakeRedBagMoney pkg = new ReqTakeRedBagMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTakeRedBagMoney()
		{
			PacketID = 1147;
		}
    }

    /// <summary>
    ///  [请求类] 领取全民红包奖励 创建者
    /// </summary>
    [Package(1147)]
    public partial class ReqTakeRedBagMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeRedBagMoney();
        }
    }


    /// <summary>
    ///  [响应类]领取全民红包奖励
    /// </summary>
    public partial class ResTakeRedBagMoney: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResTakeRedBagMoney pkg = new ResTakeRedBagMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResTakeRedBagMoney()
		{
			PacketID = 1148;
		}
    }

    /// <summary>
    ///  [响应类] 领取全民红包奖励 创建者
    /// </summary>
    [Package(1148)]
    public partial class ResTakeRedBagMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeRedBagMoney();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家头像
    /// </summary>
    public partial class ReqUpdatePlayerHeadSculpture: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerHeadSculpture pkg = new ReqUpdatePlayerHeadSculpture();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerHeadSculpture()
		{
			PacketID = 1149;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家头像 创建者
    /// </summary>
    [Package(1149)]
    public partial class ReqUpdatePlayerHeadSculptureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerHeadSculpture();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家头像
    /// </summary>
    public partial class ResUpdatePlayerHeadSculpture: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 文件名字
        /// </summary>
        public string FileName;

        public override Packet Clone()
        {
            ResUpdatePlayerHeadSculpture pkg = new ResUpdatePlayerHeadSculpture();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.FileName = FileName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(FileName);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                FileName = oByteArray.ReadUTF();
            }
        }
		public ResUpdatePlayerHeadSculpture()
		{
			PacketID = 1150;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家头像 创建者
    /// </summary>
    [Package(1150)]
    public partial class ResUpdatePlayerHeadSculptureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerHeadSculpture();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家是否能上榜
    /// </summary>
    public partial class ReqChangePlayerRanking: Packet 
    {

        public override Packet Clone()
        {
            ReqChangePlayerRanking pkg = new ReqChangePlayerRanking();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqChangePlayerRanking()
		{
			PacketID = 1151;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家是否能上榜 创建者
    /// </summary>
    [Package(1151)]
    public partial class ReqChangePlayerRankingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangePlayerRanking();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家是否能上榜
    /// </summary>
    public partial class ResChangePlayerRanking: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int IsRank;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResChangePlayerRanking pkg = new ResChangePlayerRanking();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsRank = IsRank;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(IsRank);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                IsRank = oByteArray.ReadInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResChangePlayerRanking()
		{
			PacketID = 1152;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家是否能上榜 创建者
    /// </summary>
    [Package(1152)]
    public partial class ResChangePlayerRankingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangePlayerRanking();
        }
    }


    /// <summary>
    ///  [请求类]领取限时任务阶段奖励
    /// </summary>
    public partial class ReqTakeLimiteTaskTypeAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqTakeLimiteTaskTypeAward pkg = new ReqTakeLimiteTaskTypeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqTakeLimiteTaskTypeAward()
		{
			PacketID = 1153;
		}
    }

    /// <summary>
    ///  [请求类] 领取限时任务阶段奖励 创建者
    /// </summary>
    [Package(1153)]
    public partial class ReqTakeLimiteTaskTypeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeLimiteTaskTypeAward();
        }
    }


    /// <summary>
    ///  [响应类]领取限时任务阶段奖励
    /// </summary>
    public partial class ResTakeLimiteTaskTypeAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ResTakeLimiteTaskTypeAward pkg = new ResTakeLimiteTaskTypeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
            }
        }
		public ResTakeLimiteTaskTypeAward()
		{
			PacketID = 1154;
		}
    }

    /// <summary>
    ///  [响应类] 领取限时任务阶段奖励 创建者
    /// </summary>
    [Package(1154)]
    public partial class ResTakeLimiteTaskTypeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeLimiteTaskTypeAward();
        }
    }


    /// <summary>
    ///  [请求类]更新坐骑ID
    /// </summary>
    public partial class ReqUpdateMountsID: Packet 
    {
        /// <summary>
        /// 非零上坐骑,0下坐骑
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqUpdateMountsID pkg = new ReqUpdateMountsID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqUpdateMountsID()
		{
			PacketID = 1155;
		}
    }

    /// <summary>
    ///  [请求类] 更新坐骑ID 创建者
    /// </summary>
    [Package(1155)]
    public partial class ReqUpdateMountsIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMountsID();
        }
    }


    /// <summary>
    ///  [响应类]更新坐骑ID
    /// </summary>
    public partial class ResUpdateMountsID: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResUpdateMountsID pkg = new ResUpdateMountsID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateMountsID()
		{
			PacketID = 1156;
		}
    }

    /// <summary>
    ///  [响应类] 更新坐骑ID 创建者
    /// </summary>
    [Package(1156)]
    public partial class ResUpdateMountsIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMountsID();
        }
    }


    /// <summary>
    ///  [请求类]更新心魔变身时间
    /// </summary>
    public partial class ReqUpdateShapeshiftInnerDemonsTimes: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateShapeshiftInnerDemonsTimes pkg = new ReqUpdateShapeshiftInnerDemonsTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateShapeshiftInnerDemonsTimes()
		{
			PacketID = 1157;
		}
    }

    /// <summary>
    ///  [请求类] 更新心魔变身时间 创建者
    /// </summary>
    [Package(1157)]
    public partial class ReqUpdateShapeshiftInnerDemonsTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateShapeshiftInnerDemonsTimes();
        }
    }


    /// <summary>
    ///  [响应类]更新心魔变身时间
    /// </summary>
    public partial class ResUpdateShapeshiftInnerDemonsTimes: Packet 
    {
        /// <summary>
        /// 剩余变身秒数
        /// </summary>
        public uint Times;
        /// <summary>
        /// 魔煞值
        /// </summary>
        public uint MoShaValue;

        public override Packet Clone()
        {
            ResUpdateShapeshiftInnerDemonsTimes pkg = new ResUpdateShapeshiftInnerDemonsTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Times = Times;
            pkg.MoShaValue = MoShaValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Times);
                oByteArray.WriteUInt(MoShaValue);
            }
            else
            {
                Times = oByteArray.ReadUInt();
                MoShaValue = oByteArray.ReadUInt();
            }
        }
		public ResUpdateShapeshiftInnerDemonsTimes()
		{
			PacketID = 1158;
		}
    }

    /// <summary>
    ///  [响应类] 更新心魔变身时间 创建者
    /// </summary>
    [Package(1158)]
    public partial class ResUpdateShapeshiftInnerDemonsTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateShapeshiftInnerDemonsTimes();
        }
    }


    /// <summary>
    ///  [请求类]更新完成限时任务玩家数量
    /// </summary>
    public partial class ReqUpdateLimiteTaskPlayerCount: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLimiteTaskPlayerCount pkg = new ReqUpdateLimiteTaskPlayerCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLimiteTaskPlayerCount()
		{
			PacketID = 1159;
		}
    }

    /// <summary>
    ///  [请求类] 更新完成限时任务玩家数量 创建者
    /// </summary>
    [Package(1159)]
    public partial class ReqUpdateLimiteTaskPlayerCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLimiteTaskPlayerCount();
        }
    }


    /// <summary>
    ///  [响应类]更新完成限时任务玩家数量
    /// </summary>
    public partial class ResUpdateLimiteTaskPlayerCount: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Count;

        public override Packet Clone()
        {
            ResUpdateLimiteTaskPlayerCount pkg = new ResUpdateLimiteTaskPlayerCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Count);
            }
            else
            {
                Count = oByteArray.ReadInt();
            }
        }
		public ResUpdateLimiteTaskPlayerCount()
		{
			PacketID = 1160;
		}
    }

    /// <summary>
    ///  [响应类] 更新完成限时任务玩家数量 创建者
    /// </summary>
    [Package(1160)]
    public partial class ResUpdateLimiteTaskPlayerCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLimiteTaskPlayerCount();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端宝藏任务兑换信息
    /// </summary>
    public partial class ReqNoticeTreasureMapTaskInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeTreasureMapTaskInfo pkg = new ReqNoticeTreasureMapTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeTreasureMapTaskInfo()
		{
			PacketID = 1161;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端宝藏任务兑换信息 创建者
    /// </summary>
    [Package(1161)]
    public partial class ReqNoticeTreasureMapTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeTreasureMapTaskInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端宝藏任务兑换信息
    /// </summary>
    public partial class ResNoticeTreasureMapTaskInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<string> Info = new List<string>();
        /// <summary>
        /// 
        /// </summary>
        public List<string> Award = new List<string>();

        public override Packet Clone()
        {
            ResNoticeTreasureMapTaskInfo pkg = new ResNoticeTreasureMapTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in Info)
            {
                pkg.Info.Add(item);
            }
            foreach (var item in Award)
            {
                pkg.Award.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Info.Count);
                for (int i = 0; i < Info.Count; i++)
                {
                    oByteArray.WriteUTF(Info[i]);
                }
                oByteArray.WriteUShort((ushort)Award.Count);
                for (int i = 0; i < Award.Count; i++)
                {
                    oByteArray.WriteUTF(Award[i]);
                }
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    Info.Add(oByteArray.ReadUTF());
                }
                int AwardCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AwardCount; i++)
                {
                    Award.Add(oByteArray.ReadUTF());
                }
            }
        }
		public ResNoticeTreasureMapTaskInfo()
		{
			PacketID = 1162;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端宝藏任务兑换信息 创建者
    /// </summary>
    [Package(1162)]
    public partial class ResNoticeTreasureMapTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeTreasureMapTaskInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新技能冷却时间
    /// </summary>
    public partial class ReqUpdateSkillCDTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateSkillCDTime pkg = new ReqUpdateSkillCDTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateSkillCDTime()
		{
			PacketID = 1163;
		}
    }

    /// <summary>
    ///  [请求类] 更新技能冷却时间 创建者
    /// </summary>
    [Package(1163)]
    public partial class ReqUpdateSkillCDTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateSkillCDTime();
        }
    }


    /// <summary>
    ///  [响应类]更新技能冷却时间
    /// </summary>
    public partial class ResUpdateSkillCDTime: Packet 
    {
        /// <summary>
        /// 减少的毫秒数
        /// </summary>
        public int ReduceTime;
        /// <summary>
        /// 技能ID
        /// </summary>
        public uint SkillID;

        public override Packet Clone()
        {
            ResUpdateSkillCDTime pkg = new ResUpdateSkillCDTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ReduceTime = ReduceTime;
            pkg.SkillID = SkillID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(ReduceTime);
                oByteArray.WriteUInt(SkillID);
            }
            else
            {
                ReduceTime = oByteArray.ReadInt();
                SkillID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateSkillCDTime()
		{
			PacketID = 1164;
		}
    }

    /// <summary>
    ///  [响应类] 更新技能冷却时间 创建者
    /// </summary>
    [Package(1164)]
    public partial class ResUpdateSkillCDTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateSkillCDTime();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家vip等级
    /// </summary>
    public partial class ReqUpdateVipLv: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateVipLv pkg = new ReqUpdateVipLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateVipLv()
		{
			PacketID = 1165;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家vip等级 创建者
    /// </summary>
    [Package(1165)]
    public partial class ReqUpdateVipLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateVipLv();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家vip等级
    /// </summary>
    public partial class ResUpdateVipLv: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// vip等级
        /// </summary>
        public byte VipLv;

        public override Packet Clone()
        {
            ResUpdateVipLv pkg = new ResUpdateVipLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.VipLv = VipLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(VipLv);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                VipLv = oByteArray.ReadByte();
            }
        }
		public ResUpdateVipLv()
		{
			PacketID = 1166;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家vip等级 创建者
    /// </summary>
    [Package(1166)]
    public partial class ResUpdateVipLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateVipLv();
        }
    }


    /// <summary>
    ///  [请求类]自动移动到哪里
    /// </summary>
    public partial class ReqAutoMoveToPoint: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<PlayerMoveInfo> MoveInfo = new List<PlayerMoveInfo>();

        public override Packet Clone()
        {
            ReqAutoMoveToPoint pkg = new ReqAutoMoveToPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (PlayerMoveInfo item in MoveInfo)
            {
                pkg.MoveInfo.Add(item.Clone() as PlayerMoveInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < MoveInfo.Count; i++)
                {
                      MoveInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int MoveInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MoveInfoCount; i++)
                {
                    PlayerMoveInfo obj = new PlayerMoveInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    MoveInfo.Add(obj);
                }
            }
        }
		public ReqAutoMoveToPoint()
		{
			PacketID = 1167;
		}
    }

    /// <summary>
    ///  [请求类] 自动移动到哪里 创建者
    /// </summary>
    [Package(1167)]
    public partial class ReqAutoMoveToPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAutoMoveToPoint();
        }
    }


    /// <summary>
    ///  [响应类]自动移动到哪里
    /// </summary>
    public partial class ResAutoMoveToPoint: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public List<PlayerMoveInfo> MoveInfo = new List<PlayerMoveInfo>();

        public override Packet Clone()
        {
            ResAutoMoveToPoint pkg = new ResAutoMoveToPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            foreach (PlayerMoveInfo item in MoveInfo)
            {
                pkg.MoveInfo.Add(item.Clone() as PlayerMoveInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUShort((ushort)MoveInfo.Count);
                for (int i = 0; i < MoveInfo.Count; i++)
                {
                    MoveInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                int MoveInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MoveInfoCount; i++)
                {
                    PlayerMoveInfo obj = new PlayerMoveInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    MoveInfo.Add(obj);
                }
            }
        }
		public ResAutoMoveToPoint()
		{
			PacketID = 1168;
		}
    }

    /// <summary>
    ///  [响应类] 自动移动到哪里 创建者
    /// </summary>
    [Package(1168)]
    public partial class ResAutoMoveToPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAutoMoveToPoint();
        }
    }


    /// <summary>
    ///  [请求类]清除自动移动
    /// </summary>
    public partial class ReqClearAutoMove: Packet 
    {

        public override Packet Clone()
        {
            ReqClearAutoMove pkg = new ReqClearAutoMove();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqClearAutoMove()
		{
			PacketID = 1169;
		}
    }

    /// <summary>
    ///  [请求类] 清除自动移动 创建者
    /// </summary>
    [Package(1169)]
    public partial class ReqClearAutoMoveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqClearAutoMove();
        }
    }


    /// <summary>
    ///  [响应类]清除自动移动
    /// </summary>
    public partial class ResClearAutoMove: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerInfo = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResClearAutoMove pkg = new ResClearAutoMove();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerInfo = PlayerInfo.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResClearAutoMove()
		{
			PacketID = 1170;
		}
    }

    /// <summary>
    ///  [响应类] 清除自动移动 创建者
    /// </summary>
    [Package(1170)]
    public partial class ResClearAutoMoveCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResClearAutoMove();
        }
    }


    /// <summary>
    ///  [请求类]随机角色名
    /// </summary>
    public partial class ReqRandomRoleName: Packet 
    {
        /// <summary>
        /// 性别
        /// </summary>
        public int Sex;

        public override Packet Clone()
        {
            ReqRandomRoleName pkg = new ReqRandomRoleName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Sex = Sex;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Sex);
            }
            else
            {
                Sex = oByteArray.ReadInt();
            }
        }
		public ReqRandomRoleName()
		{
			PacketID = 1171;
		}
    }

    /// <summary>
    ///  [请求类] 随机角色名 创建者
    /// </summary>
    [Package(1171)]
    public partial class ReqRandomRoleNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRandomRoleName();
        }
    }


    /// <summary>
    ///  [响应类]随机角色名
    /// </summary>
    public partial class ResRandomRoleName: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string Name;

        public override Packet Clone()
        {
            ResRandomRoleName pkg = new ResRandomRoleName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Name = Name;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Name);
            }
            else
            {
                Name = oByteArray.ReadUTF();
            }
        }
		public ResRandomRoleName()
		{
			PacketID = 1172;
		}
    }

    /// <summary>
    ///  [响应类] 随机角色名 创建者
    /// </summary>
    [Package(1172)]
    public partial class ResRandomRoleNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRandomRoleName();
        }
    }


    /// <summary>
    ///  [请求类]更新天下第一名字
    /// </summary>
    public partial class ReqUpdateTianXiaDiYiName: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateTianXiaDiYiName pkg = new ReqUpdateTianXiaDiYiName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateTianXiaDiYiName()
		{
			PacketID = 1173;
		}
    }

    /// <summary>
    ///  [请求类] 更新天下第一名字 创建者
    /// </summary>
    [Package(1173)]
    public partial class ReqUpdateTianXiaDiYiNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTianXiaDiYiName();
        }
    }


    /// <summary>
    ///  [响应类]更新天下第一名字
    /// </summary>
    public partial class ResUpdateTianXiaDiYiName: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<string> NickName = new List<string>();

        public override Packet Clone()
        {
            ResUpdateTianXiaDiYiName pkg = new ResUpdateTianXiaDiYiName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in NickName)
            {
                pkg.NickName.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)NickName.Count);
                for (int i = 0; i < NickName.Count; i++)
                {
                    oByteArray.WriteUTF(NickName[i]);
                }
            }
            else
            {
                int NickNameCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < NickNameCount; i++)
                {
                    NickName.Add(oByteArray.ReadUTF());
                }
            }
        }
		public ResUpdateTianXiaDiYiName()
		{
			PacketID = 1174;
		}
    }

    /// <summary>
    ///  [响应类] 更新天下第一名字 创建者
    /// </summary>
    [Package(1174)]
    public partial class ResUpdateTianXiaDiYiNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTianXiaDiYiName();
        }
    }


    /// <summary>
    ///  [请求类]删除离线挂机雕像
    /// </summary>
    public partial class ReqDeleteOffLineGuaJiPlayer: Packet 
    {

        public override Packet Clone()
        {
            ReqDeleteOffLineGuaJiPlayer pkg = new ReqDeleteOffLineGuaJiPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDeleteOffLineGuaJiPlayer()
		{
			PacketID = 1175;
		}
    }

    /// <summary>
    ///  [请求类] 删除离线挂机雕像 创建者
    /// </summary>
    [Package(1175)]
    public partial class ReqDeleteOffLineGuaJiPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDeleteOffLineGuaJiPlayer();
        }
    }


    /// <summary>
    ///  [响应类]删除离线挂机雕像
    /// </summary>
    public partial class ResDeleteOffLineGuaJiPlayer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerID;

        public override Packet Clone()
        {
            ResDeleteOffLineGuaJiPlayer pkg = new ResDeleteOffLineGuaJiPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerID);
            }
            else
            {
                PlayerID = oByteArray.ReadUInt64();
            }
        }
		public ResDeleteOffLineGuaJiPlayer()
		{
			PacketID = 1176;
		}
    }

    /// <summary>
    ///  [响应类] 删除离线挂机雕像 创建者
    /// </summary>
    [Package(1176)]
    public partial class ResDeleteOffLineGuaJiPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDeleteOffLineGuaJiPlayer();
        }
    }


    /// <summary>
    ///  [请求类]增加离线挂机玩家
    /// </summary>
    public partial class ReqAddOffLineGuaJiPlayer: Packet 
    {

        public override Packet Clone()
        {
            ReqAddOffLineGuaJiPlayer pkg = new ReqAddOffLineGuaJiPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddOffLineGuaJiPlayer()
		{
			PacketID = 1177;
		}
    }

    /// <summary>
    ///  [请求类] 增加离线挂机玩家 创建者
    /// </summary>
    [Package(1177)]
    public partial class ReqAddOffLineGuaJiPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddOffLineGuaJiPlayer();
        }
    }


    /// <summary>
    ///  [响应类]增加离线挂机玩家
    /// </summary>
    public partial class ResAddOffLineGuaJiPlayer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public CombatAttribute Attribute = new CombatAttribute();
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public byte Career;
        /// <summary>
        /// 
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 
        /// </summary>
        public uint Lv;
        /// <summary>
        /// 
        /// </summary>
        public string Name;
        /// <summary>
        /// 
        /// </summary>
        public uint WeaponID;
        /// <summary>
        /// 
        /// </summary>
        public uint ClothesID;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleID;
        /// <summary>
        /// 
        /// </summary>
        public byte WingLevel;
        /// <summary>
        /// 
        /// </summary>
        public uint FashionClothesID;
        /// <summary>
        /// 
        /// </summary>
        public uint FashionWeaponID;
        /// <summary>
        /// 
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 
        /// </summary>
        public byte VipLv;
        /// <summary>
        /// 
        /// </summary>
        public uint PlatfromVipTID;
        /// <summary>
        /// 
        /// </summary>
        public uint GuildPosition;
        /// <summary>
        /// 
        /// </summary>
        public uint CurCiphertext;
        /// <summary>
        /// 时装足迹ID
        /// </summary>
        public uint FashionFootMark;

        public override Packet Clone()
        {
            ResAddOffLineGuaJiPlayer pkg = new ResAddOffLineGuaJiPlayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Attribute = Attribute.Clone() as CombatAttribute;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.Career = Career;
            pkg.Sex = Sex;
            pkg.Lv = Lv;
            pkg.Name = Name;
            pkg.WeaponID = WeaponID;
            pkg.ClothesID = ClothesID;
            pkg.TitleID = TitleID;
            pkg.WingLevel = WingLevel;
            pkg.FashionClothesID = FashionClothesID;
            pkg.FashionWeaponID = FashionWeaponID;
            pkg.GuildName = GuildName;
            pkg.VipLv = VipLv;
            pkg.PlatfromVipTID = PlatfromVipTID;
            pkg.GuildPosition = GuildPosition;
            pkg.CurCiphertext = CurCiphertext;
            pkg.FashionFootMark = FashionFootMark;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Attribute.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteByte(Career);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteUInt(Lv);
                oByteArray.WriteUTF(Name);
                oByteArray.WriteUInt(WeaponID);
                oByteArray.WriteUInt(ClothesID);
                oByteArray.WriteUInt(TitleID);
                oByteArray.WriteByte(WingLevel);
                oByteArray.WriteUInt(FashionClothesID);
                oByteArray.WriteUInt(FashionWeaponID);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteByte(VipLv);
                oByteArray.WriteUInt(PlatfromVipTID);
                oByteArray.WriteUInt(GuildPosition);
                oByteArray.WriteUInt(CurCiphertext);
                oByteArray.WriteUInt(FashionFootMark);
            }
            else
            {
                Attribute.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
                Career = oByteArray.ReadByte();
                Sex = oByteArray.ReadByte();
                Lv = oByteArray.ReadUInt();
                Name = oByteArray.ReadUTF();
                WeaponID = oByteArray.ReadUInt();
                ClothesID = oByteArray.ReadUInt();
                TitleID = oByteArray.ReadUInt();
                WingLevel = oByteArray.ReadByte();
                FashionClothesID = oByteArray.ReadUInt();
                FashionWeaponID = oByteArray.ReadUInt();
                GuildName = oByteArray.ReadUTF();
                VipLv = oByteArray.ReadByte();
                PlatfromVipTID = oByteArray.ReadUInt();
                GuildPosition = oByteArray.ReadUInt();
                CurCiphertext = oByteArray.ReadUInt();
                FashionFootMark = oByteArray.ReadUInt();
            }
        }
		public ResAddOffLineGuaJiPlayer()
		{
			PacketID = 1178;
		}
    }

    /// <summary>
    ///  [响应类] 增加离线挂机玩家 创建者
    /// </summary>
    [Package(1178)]
    public partial class ResAddOffLineGuaJiPlayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddOffLineGuaJiPlayer();
        }
    }


    /// <summary>
    ///  [请求类]领取开服离线挂机经验
    /// </summary>
    public partial class ReqGetOpenDayOfftimeExp: Packet 
    {

        public override Packet Clone()
        {
            ReqGetOpenDayOfftimeExp pkg = new ReqGetOpenDayOfftimeExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetOpenDayOfftimeExp()
		{
			PacketID = 1179;
		}
    }

    /// <summary>
    ///  [请求类] 领取开服离线挂机经验 创建者
    /// </summary>
    [Package(1179)]
    public partial class ReqGetOpenDayOfftimeExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetOpenDayOfftimeExp();
        }
    }


    /// <summary>
    ///  [响应类]领取开服离线挂机经验
    /// </summary>
    public partial class ResGetOpenDayOfftimeExp: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResGetOpenDayOfftimeExp pkg = new ResGetOpenDayOfftimeExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResGetOpenDayOfftimeExp()
		{
			PacketID = 1180;
		}
    }

    /// <summary>
    ///  [响应类] 领取开服离线挂机经验 创建者
    /// </summary>
    [Package(1180)]
    public partial class ResGetOpenDayOfftimeExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetOpenDayOfftimeExp();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端大刀跪下
    /// </summary>
    public partial class ReqNoticeDaDaoGuiXia: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeDaDaoGuiXia pkg = new ReqNoticeDaDaoGuiXia();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeDaDaoGuiXia()
		{
			PacketID = 1181;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端大刀跪下 创建者
    /// </summary>
    [Package(1181)]
    public partial class ReqNoticeDaDaoGuiXiaCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDaDaoGuiXia();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端大刀跪下
    /// </summary>
    public partial class ResNoticeDaDaoGuiXia: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResNoticeDaDaoGuiXia pkg = new ResNoticeDaDaoGuiXia();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResNoticeDaDaoGuiXia()
		{
			PacketID = 1182;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端大刀跪下 创建者
    /// </summary>
    [Package(1182)]
    public partial class ResNoticeDaDaoGuiXiaCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDaDaoGuiXia();
        }
    }


    /// <summary>
    ///  [请求类]更新是否是沙巴克城主
    /// </summary>
    public partial class ReqUpdateIsShaBakeOwner: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateIsShaBakeOwner pkg = new ReqUpdateIsShaBakeOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateIsShaBakeOwner()
		{
			PacketID = 1183;
		}
    }

    /// <summary>
    ///  [请求类] 更新是否是沙巴克城主 创建者
    /// </summary>
    [Package(1183)]
    public partial class ReqUpdateIsShaBakeOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateIsShaBakeOwner();
        }
    }


    /// <summary>
    ///  [响应类]更新是否是沙巴克城主
    /// </summary>
    public partial class ResUpdateIsShaBakeOwner: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public bool IsShaBakeOwner;

        public override Packet Clone()
        {
            ResUpdateIsShaBakeOwner pkg = new ResUpdateIsShaBakeOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IsShaBakeOwner = IsShaBakeOwner;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(IsShaBakeOwner);
            }
            else
            {
                IsShaBakeOwner = oByteArray.ReadBoolean();
            }
        }
		public ResUpdateIsShaBakeOwner()
		{
			PacketID = 1184;
		}
    }

    /// <summary>
    ///  [响应类] 更新是否是沙巴克城主 创建者
    /// </summary>
    [Package(1184)]
    public partial class ResUpdateIsShaBakeOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateIsShaBakeOwner();
        }
    }


    /// <summary>
    ///  [请求类]更新雕像类怪物状态
    /// </summary>
    public partial class ReqUpdateMonsterState: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMonsterState pkg = new ReqUpdateMonsterState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMonsterState()
		{
			PacketID = 1185;
		}
    }

    /// <summary>
    ///  [请求类] 更新雕像类怪物状态 创建者
    /// </summary>
    [Package(1185)]
    public partial class ReqUpdateMonsterStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMonsterState();
        }
    }


    /// <summary>
    ///  [响应类]更新雕像类怪物状态
    /// </summary>
    public partial class ResUpdateMonsterState: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte State;
        /// <summary>
        /// 
        /// </summary>
        public uint MonsterTID;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ResUpdateMonsterState pkg = new ResUpdateMonsterState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.State = State;
            pkg.MonsterTID = MonsterTID;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(State);
                oByteArray.WriteUInt(MonsterTID);
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                State = oByteArray.ReadByte();
                MonsterTID = oByteArray.ReadUInt();
                ObjectID.Serializtion(oByteArray, bSerialize);
                MapID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateMonsterState()
		{
			PacketID = 1186;
		}
    }

    /// <summary>
    ///  [响应类] 更新雕像类怪物状态 创建者
    /// </summary>
    [Package(1186)]
    public partial class ResUpdateMonsterStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMonsterState();
        }
    }


    /// <summary>
    ///  [请求类]通知地图删除怪物
    /// </summary>
    public partial class ReqDeleteMonster: Packet 
    {

        public override Packet Clone()
        {
            ReqDeleteMonster pkg = new ReqDeleteMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDeleteMonster()
		{
			PacketID = 1187;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图删除怪物 创建者
    /// </summary>
    [Package(1187)]
    public partial class ReqDeleteMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDeleteMonster();
        }
    }


    /// <summary>
    ///  [响应类]通知地图删除怪物
    /// </summary>
    public partial class ResDeleteMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MonsterTID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ResDeleteMonster pkg = new ResDeleteMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterTID = MonsterTID;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonsterTID);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MonsterTID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ResDeleteMonster()
		{
			PacketID = 1188;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图删除怪物 创建者
    /// </summary>
    [Package(1188)]
    public partial class ResDeleteMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDeleteMonster();
        }
    }


    /// <summary>
    ///  [请求类]传送玩家到新地图
    /// </summary>
    public partial class ReqNoticeTransferPlayerToMap: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeTransferPlayerToMap pkg = new ReqNoticeTransferPlayerToMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeTransferPlayerToMap()
		{
			PacketID = 1189;
		}
    }

    /// <summary>
    ///  [请求类] 传送玩家到新地图 创建者
    /// </summary>
    [Package(1189)]
    public partial class ReqNoticeTransferPlayerToMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeTransferPlayerToMap();
        }
    }


    /// <summary>
    ///  [响应类]传送玩家到新地图
    /// </summary>
    public partial class ResNoticeTransferPlayerToMap: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ResNoticeTransferPlayerToMap pkg = new ResNoticeTransferPlayerToMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeTransferPlayerToMap()
		{
			PacketID = 1190;
		}
    }

    /// <summary>
    ///  [响应类] 传送玩家到新地图 创建者
    /// </summary>
    [Package(1190)]
    public partial class ResNoticeTransferPlayerToMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeTransferPlayerToMap();
        }
    }


    /// <summary>
    ///  [请求类]升级魔器系统
    /// </summary>
    public partial class ReqUpgradeGemEquipLv: Packet 
    {

        public override Packet Clone()
        {
            ReqUpgradeGemEquipLv pkg = new ReqUpgradeGemEquipLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpgradeGemEquipLv()
		{
			PacketID = 1191;
		}
    }

    /// <summary>
    ///  [请求类] 升级魔器系统 创建者
    /// </summary>
    [Package(1191)]
    public partial class ReqUpgradeGemEquipLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeGemEquipLv();
        }
    }


    /// <summary>
    ///  [响应类]升级魔器系统
    /// </summary>
    public partial class ResUpgradeGemEquipLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResUpgradeGemEquipLv pkg = new ResUpgradeGemEquipLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResUpgradeGemEquipLv()
		{
			PacketID = 1192;
		}
    }

    /// <summary>
    ///  [响应类] 升级魔器系统 创建者
    /// </summary>
    [Package(1192)]
    public partial class ResUpgradeGemEquipLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeGemEquipLv();
        }
    }


    /// <summary>
    ///  [请求类]更新队友坐标
    /// </summary>
    public partial class ReqUpdateGroupMemberXY: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateGroupMemberXY pkg = new ReqUpdateGroupMemberXY();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateGroupMemberXY()
		{
			PacketID = 1193;
		}
    }

    /// <summary>
    ///  [请求类] 更新队友坐标 创建者
    /// </summary>
    [Package(1193)]
    public partial class ReqUpdateGroupMemberXYCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateGroupMemberXY();
        }
    }


    /// <summary>
    ///  [响应类]更新队友坐标
    /// </summary>
    public partial class ResUpdateGroupMemberXY: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public ushort MapX;
        /// <summary>
        /// 
        /// </summary>
        public short MapY;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResUpdateGroupMemberXY pkg = new ResUpdateGroupMemberXY();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUShort(MapX);
                oByteArray.WriteShort(MapY);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUShort();
                MapY = oByteArray.ReadShort();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateGroupMemberXY()
		{
			PacketID = 1194;
		}
    }

    /// <summary>
    ///  [响应类] 更新队友坐标 创建者
    /// </summary>
    [Package(1194)]
    public partial class ResUpdateGroupMemberXYCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateGroupMemberXY();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服胜利ID
    /// </summary>
    public partial class ReqNoticeServiceWarWinnerID: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeServiceWarWinnerID pkg = new ReqNoticeServiceWarWinnerID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeServiceWarWinnerID()
		{
			PacketID = 1195;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服胜利ID 创建者
    /// </summary>
    [Package(1195)]
    public partial class ReqNoticeServiceWarWinnerIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeServiceWarWinnerID();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服胜利ID
    /// </summary>
    public partial class ResNoticeServiceWarWinnerID: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong WinnerID;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ResNoticeServiceWarWinnerID pkg = new ResNoticeServiceWarWinnerID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.WinnerID = WinnerID;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(WinnerID);
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                WinnerID = oByteArray.ReadUInt64();
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeServiceWarWinnerID()
		{
			PacketID = 1196;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服胜利ID 创建者
    /// </summary>
    [Package(1196)]
    public partial class ResNoticeServiceWarWinnerIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeServiceWarWinnerID();
        }
    }


    /// <summary>
    ///  [请求类]发送红包口令
    /// </summary>
    public partial class ReqSendRedBagCode: Packet 
    {

        public override Packet Clone()
        {
            ReqSendRedBagCode pkg = new ReqSendRedBagCode();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSendRedBagCode()
		{
			PacketID = 1197;
		}
    }

    /// <summary>
    ///  [请求类] 发送红包口令 创建者
    /// </summary>
    [Package(1197)]
    public partial class ReqSendRedBagCodeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSendRedBagCode();
        }
    }


    /// <summary>
    ///  [响应类]发送红包口令
    /// </summary>
    public partial class ResSendRedBagCode: Packet 
    {

        public override Packet Clone()
        {
            ResSendRedBagCode pkg = new ResSendRedBagCode();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSendRedBagCode()
		{
			PacketID = 1198;
		}
    }

    /// <summary>
    ///  [响应类] 发送红包口令 创建者
    /// </summary>
    [Package(1198)]
    public partial class ResSendRedBagCodeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSendRedBagCode();
        }
    }


    /// <summary>
    ///  [请求类]自动任务
    /// </summary>
    public partial class ReqAutoMainTask: Packet 
    {

        public override Packet Clone()
        {
            ReqAutoMainTask pkg = new ReqAutoMainTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAutoMainTask()
		{
			PacketID = 1199;
		}
    }

    /// <summary>
    ///  [请求类] 自动任务 创建者
    /// </summary>
    [Package(1199)]
    public partial class ReqAutoMainTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAutoMainTask();
        }
    }


    /// <summary>
    ///  [响应类]自动任务
    /// </summary>
    public partial class ResAutoMainTask: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Time;

        public override Packet Clone()
        {
            ResAutoMainTask pkg = new ResAutoMainTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Time = Time;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Time);
            }
            else
            {
                Time = oByteArray.ReadUInt();
            }
        }
		public ResAutoMainTask()
		{
			PacketID = 1200;
		}
    }

    /// <summary>
    ///  [响应类] 自动任务 创建者
    /// </summary>
    [Package(1200)]
    public partial class ResAutoMainTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAutoMainTask();
        }
    }


    /// <summary>
    ///  [请求类]
    /// </summary>
    public partial class ReqNoticeHeartID: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ID;

        public override Packet Clone()
        {
            ReqNoticeHeartID pkg = new ReqNoticeHeartID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ID = ID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ID);
            }
            else
            {
                ID = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeHeartID()
		{
			PacketID = 1201;
		}
    }

    /// <summary>
    ///  [请求类]  创建者
    /// </summary>
    [Package(1201)]
    public partial class ReqNoticeHeartIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeHeartID();
        }
    }


    /// <summary>
    ///  [响应类]
    /// </summary>
    public partial class ResNoticeHeartID: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ID;

        public override Packet Clone()
        {
            ResNoticeHeartID pkg = new ResNoticeHeartID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ID = ID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ID);
            }
            else
            {
                ID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeHeartID()
		{
			PacketID = 1202;
		}
    }

    /// <summary>
    ///  [响应类]  创建者
    /// </summary>
    [Package(1202)]
    public partial class ResNoticeHeartIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeHeartID();
        }
    }


    /// <summary>
    ///  [请求类]宝藏仓库全部经验丹
    /// </summary>
    public partial class ReqUseTreasureAllExpItem: Packet 
    {

        public override Packet Clone()
        {
            ReqUseTreasureAllExpItem pkg = new ReqUseTreasureAllExpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUseTreasureAllExpItem()
		{
			PacketID = 1203;
		}
    }

    /// <summary>
    ///  [请求类] 宝藏仓库全部经验丹 创建者
    /// </summary>
    [Package(1203)]
    public partial class ReqUseTreasureAllExpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseTreasureAllExpItem();
        }
    }


    /// <summary>
    ///  [响应类]宝藏仓库全部经验丹
    /// </summary>
    public partial class ResUseTreasureAllExpItem: Packet 
    {

        public override Packet Clone()
        {
            ResUseTreasureAllExpItem pkg = new ResUseTreasureAllExpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUseTreasureAllExpItem()
		{
			PacketID = 1204;
		}
    }

    /// <summary>
    ///  [响应类] 宝藏仓库全部经验丹 创建者
    /// </summary>
    [Package(1204)]
    public partial class ResUseTreasureAllExpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseTreasureAllExpItem();
        }
    }


    /// <summary>
    ///  [请求类]修改检测参数
    /// </summary>
    public partial class ReqUpDateDeviationTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpDateDeviationTime pkg = new ReqUpDateDeviationTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpDateDeviationTime()
		{
			PacketID = 1205;
		}
    }

    /// <summary>
    ///  [请求类] 修改检测参数 创建者
    /// </summary>
    [Package(1205)]
    public partial class ReqUpDateDeviationTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpDateDeviationTime();
        }
    }


    /// <summary>
    ///  [响应类]修改检测参数
    /// </summary>
    public partial class ResUpDateDeviationTime: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint FastTimes;
        /// <summary>
        /// 
        /// </summary>
        public uint FastTime;
        /// <summary>
        /// 
        /// </summary>
        public uint SlowTime;
        /// <summary>
        /// 
        /// </summary>
        public uint StopTime;

        public override Packet Clone()
        {
            ResUpDateDeviationTime pkg = new ResUpDateDeviationTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FastTimes = FastTimes;
            pkg.FastTime = FastTime;
            pkg.SlowTime = SlowTime;
            pkg.StopTime = StopTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(FastTimes);
                oByteArray.WriteUInt(FastTime);
                oByteArray.WriteUInt(SlowTime);
                oByteArray.WriteUInt(StopTime);
            }
            else
            {
                FastTimes = oByteArray.ReadUInt();
                FastTime = oByteArray.ReadUInt();
                SlowTime = oByteArray.ReadUInt();
                StopTime = oByteArray.ReadUInt();
            }
        }
		public ResUpDateDeviationTime()
		{
			PacketID = 1206;
		}
    }

    /// <summary>
    ///  [响应类] 修改检测参数 创建者
    /// </summary>
    [Package(1206)]
    public partial class ResUpDateDeviationTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpDateDeviationTime();
        }
    }


    /// <summary>
    ///  [请求类]修改屏蔽信息
    /// </summary>
    public partial class ReqSetScreenInfo: Packet 
    {
        /// <summary>
        /// 屏蔽所有
        /// </summary>
        public bool ScreenAll;
        /// <summary>
        /// 屏蔽所有玩家
        /// </summary>
        public bool ScreenAllPlayer;
        /// <summary>
        /// 屏蔽行会玩家
        /// </summary>
        public bool ScreenGuildPlayer;
        /// <summary>
        /// 屏蔽怪物
        /// </summary>
        public bool ScreenMonster;
        /// <summary>
        /// 屏蔽召唤物
        /// </summary>
        public bool ScreenPet;
        /// <summary>
        /// 屏蔽称号
        /// </summary>
        public bool ScreenTitle;
        /// <summary>
        /// 屏蔽翅膀
        /// </summary>
        public bool ScreenWing;
        /// <summary>
        /// 屏蔽特效
        /// </summary>
        public bool ScreenEffect;
        /// <summary>
        /// 优化玩家形象
        /// </summary>
        public bool PlayerAvatar;
        /// <summary>
        /// 优化怪物形象
        /// </summary>
        public bool MonsterAvatar;
        /// <summary>
        /// 优化影子形象
        /// </summary>
        public bool ShadowAvatar;

        public override Packet Clone()
        {
            ReqSetScreenInfo pkg = new ReqSetScreenInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ScreenAll = ScreenAll;
            pkg.ScreenAllPlayer = ScreenAllPlayer;
            pkg.ScreenGuildPlayer = ScreenGuildPlayer;
            pkg.ScreenMonster = ScreenMonster;
            pkg.ScreenPet = ScreenPet;
            pkg.ScreenTitle = ScreenTitle;
            pkg.ScreenWing = ScreenWing;
            pkg.ScreenEffect = ScreenEffect;
            pkg.PlayerAvatar = PlayerAvatar;
            pkg.MonsterAvatar = MonsterAvatar;
            pkg.ShadowAvatar = ShadowAvatar;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(ScreenAll);
                oByteArray.WriteBoolean(ScreenAllPlayer);
                oByteArray.WriteBoolean(ScreenGuildPlayer);
                oByteArray.WriteBoolean(ScreenMonster);
                oByteArray.WriteBoolean(ScreenPet);
                oByteArray.WriteBoolean(ScreenTitle);
                oByteArray.WriteBoolean(ScreenWing);
                oByteArray.WriteBoolean(ScreenEffect);
                oByteArray.WriteBoolean(PlayerAvatar);
                oByteArray.WriteBoolean(MonsterAvatar);
                oByteArray.WriteBoolean(ShadowAvatar);
            }
            else
            {
                ScreenAll = oByteArray.ReadBoolean();
                ScreenAllPlayer = oByteArray.ReadBoolean();
                ScreenGuildPlayer = oByteArray.ReadBoolean();
                ScreenMonster = oByteArray.ReadBoolean();
                ScreenPet = oByteArray.ReadBoolean();
                ScreenTitle = oByteArray.ReadBoolean();
                ScreenWing = oByteArray.ReadBoolean();
                ScreenEffect = oByteArray.ReadBoolean();
                PlayerAvatar = oByteArray.ReadBoolean();
                MonsterAvatar = oByteArray.ReadBoolean();
                ShadowAvatar = oByteArray.ReadBoolean();
            }
        }
		public ReqSetScreenInfo()
		{
			PacketID = 1207;
		}
    }

    /// <summary>
    ///  [请求类] 修改屏蔽信息 创建者
    /// </summary>
    [Package(1207)]
    public partial class ReqSetScreenInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetScreenInfo();
        }
    }


    /// <summary>
    ///  [响应类]修改屏蔽信息
    /// </summary>
    public partial class ResSetScreenInfo: Packet 
    {

        public override Packet Clone()
        {
            ResSetScreenInfo pkg = new ResSetScreenInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSetScreenInfo()
		{
			PacketID = 1208;
		}
    }

    /// <summary>
    ///  [响应类] 修改屏蔽信息 创建者
    /// </summary>
    [Package(1208)]
    public partial class ResSetScreenInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetScreenInfo();
        }
    }


    /// <summary>
    ///  [请求类]刷新杀手
    /// </summary>
    public partial class ReqSpawnKiller: Packet 
    {

        public override Packet Clone()
        {
            ReqSpawnKiller pkg = new ReqSpawnKiller();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSpawnKiller()
		{
			PacketID = 1209;
		}
    }

    /// <summary>
    ///  [请求类] 刷新杀手 创建者
    /// </summary>
    [Package(1209)]
    public partial class ReqSpawnKillerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnKiller();
        }
    }


    /// <summary>
    ///  [响应类]刷新杀手
    /// </summary>
    public partial class ResSpawnKiller: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Career;
        /// <summary>
        /// 
        /// </summary>
        public CombatAttribute AttrInfo = new CombatAttribute();

        public override Packet Clone()
        {
            ResSpawnKiller pkg = new ResSpawnKiller();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Career = Career;
            pkg.AttrInfo = AttrInfo.Clone() as CombatAttribute;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Career);
                AttrInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Career = oByteArray.ReadByte();
                AttrInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResSpawnKiller()
		{
			PacketID = 1210;
		}
    }

    /// <summary>
    ///  [响应类] 刷新杀手 创建者
    /// </summary>
    [Package(1210)]
    public partial class ResSpawnKillerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnKiller();
        }
    }


    /// <summary>
    ///  [请求类]购买心魔派遣VIP
    /// </summary>
    public partial class ReqBuyXinMoPaiQianVip: Packet 
    {

        public override Packet Clone()
        {
            ReqBuyXinMoPaiQianVip pkg = new ReqBuyXinMoPaiQianVip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBuyXinMoPaiQianVip()
		{
			PacketID = 1211;
		}
    }

    /// <summary>
    ///  [请求类] 购买心魔派遣VIP 创建者
    /// </summary>
    [Package(1211)]
    public partial class ReqBuyXinMoPaiQianVipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyXinMoPaiQianVip();
        }
    }


    /// <summary>
    ///  [响应类]购买心魔派遣VIP
    /// </summary>
    public partial class ResBuyXinMoPaiQianVip: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 到期时间戳，成功有效
        /// </summary>
        public uint Time;

        public override Packet Clone()
        {
            ResBuyXinMoPaiQianVip pkg = new ResBuyXinMoPaiQianVip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Time = Time;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(Time);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Time = oByteArray.ReadUInt();
            }
        }
		public ResBuyXinMoPaiQianVip()
		{
			PacketID = 1212;
		}
    }

    /// <summary>
    ///  [响应类] 购买心魔派遣VIP 创建者
    /// </summary>
    [Package(1212)]
    public partial class ResBuyXinMoPaiQianVipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyXinMoPaiQianVip();
        }
    }


    /// <summary>
    ///  [请求类]心魔派遣
    /// </summary>
    public partial class ReqXinMoPaiQian: Packet 
    {
        /// <summary>
        /// 派遣类型
        /// </summary>
        public byte Type;

        public override Packet Clone()
        {
            ReqXinMoPaiQian pkg = new ReqXinMoPaiQian();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
            }
            else
            {
                Type = oByteArray.ReadByte();
            }
        }
		public ReqXinMoPaiQian()
		{
			PacketID = 1213;
		}
    }

    /// <summary>
    ///  [请求类] 心魔派遣 创建者
    /// </summary>
    [Package(1213)]
    public partial class ReqXinMoPaiQianCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqXinMoPaiQian();
        }
    }


    /// <summary>
    ///  [响应类]心魔派遣
    /// </summary>
    public partial class ResXinMoPaiQian: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 派遣类型
        /// </summary>
        public byte Type;
        /// <summary>
        /// 起始时间戳
        /// </summary>
        public uint StartTime;
        /// <summary>
        /// 最大持续时间戳
        /// </summary>
        public uint MaxTime;

        public override Packet Clone()
        {
            ResXinMoPaiQian pkg = new ResXinMoPaiQian();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.StartTime = StartTime;
            pkg.MaxTime = MaxTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(StartTime);
                oByteArray.WriteUInt(MaxTime);
            }
            else
            {
                Result = oByteArray.ReadByte();
                Type = oByteArray.ReadByte();
                StartTime = oByteArray.ReadUInt();
                MaxTime = oByteArray.ReadUInt();
            }
        }
		public ResXinMoPaiQian()
		{
			PacketID = 1214;
		}
    }

    /// <summary>
    ///  [响应类] 心魔派遣 创建者
    /// </summary>
    [Package(1214)]
    public partial class ResXinMoPaiQianCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResXinMoPaiQian();
        }
    }


    /// <summary>
    ///  [请求类]领取心魔派遣奖励
    /// </summary>
    public partial class ReqTakeXinMoPaiQianAward: Packet 
    {

        public override Packet Clone()
        {
            ReqTakeXinMoPaiQianAward pkg = new ReqTakeXinMoPaiQianAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTakeXinMoPaiQianAward()
		{
			PacketID = 1215;
		}
    }

    /// <summary>
    ///  [请求类] 领取心魔派遣奖励 创建者
    /// </summary>
    [Package(1215)]
    public partial class ReqTakeXinMoPaiQianAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeXinMoPaiQianAward();
        }
    }


    /// <summary>
    ///  [响应类]领取心魔派遣奖励
    /// </summary>
    public partial class ResTakeXinMoPaiQianAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 随机掉落信息
        /// </summary>
        public List<ItemInfo> ItemInfoVec = new List<ItemInfo>();

        public override Packet Clone()
        {
            ResTakeXinMoPaiQianAward pkg = new ResTakeXinMoPaiQianAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (ItemInfo item in ItemInfoVec)
            {
                pkg.ItemInfoVec.Add(item.Clone() as ItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUShort((ushort)ItemInfoVec.Count);
                for (int i = 0; i < ItemInfoVec.Count; i++)
                {
                    ItemInfoVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadByte();
                int ItemInfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemInfoVecCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemInfoVec.Add(obj);
                }
            }
        }
		public ResTakeXinMoPaiQianAward()
		{
			PacketID = 1216;
		}
    }

    /// <summary>
    ///  [响应类] 领取心魔派遣奖励 创建者
    /// </summary>
    [Package(1216)]
    public partial class ResTakeXinMoPaiQianAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeXinMoPaiQianAward();
        }
    }


    /// <summary>
    ///  [请求类]心魔派遣时间结束
    /// </summary>
    public partial class ReqXinMoPaiQianTimeEnd: Packet 
    {

        public override Packet Clone()
        {
            ReqXinMoPaiQianTimeEnd pkg = new ReqXinMoPaiQianTimeEnd();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqXinMoPaiQianTimeEnd()
		{
			PacketID = 1217;
		}
    }

    /// <summary>
    ///  [请求类] 心魔派遣时间结束 创建者
    /// </summary>
    [Package(1217)]
    public partial class ReqXinMoPaiQianTimeEndCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqXinMoPaiQianTimeEnd();
        }
    }


    /// <summary>
    ///  [响应类]心魔派遣时间结束
    /// </summary>
    public partial class ResXinMoPaiQianTimeEnd: Packet 
    {

        public override Packet Clone()
        {
            ResXinMoPaiQianTimeEnd pkg = new ResXinMoPaiQianTimeEnd();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResXinMoPaiQianTimeEnd()
		{
			PacketID = 1218;
		}
    }

    /// <summary>
    ///  [响应类] 心魔派遣时间结束 创建者
    /// </summary>
    [Package(1218)]
    public partial class ResXinMoPaiQianTimeEndCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResXinMoPaiQianTimeEnd();
        }
    }


    /// <summary>
    ///  [请求类]怪物最后一击
    /// </summary>
    public partial class ReqKillMonster: Packet 
    {

        public override Packet Clone()
        {
            ReqKillMonster pkg = new ReqKillMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqKillMonster()
		{
			PacketID = 1219;
		}
    }

    /// <summary>
    ///  [请求类] 怪物最后一击 创建者
    /// </summary>
    [Package(1219)]
    public partial class ReqKillMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKillMonster();
        }
    }


    /// <summary>
    ///  [响应类]怪物最后一击
    /// </summary>
    public partial class ResKillMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MonID;

        public override Packet Clone()
        {
            ResKillMonster pkg = new ResKillMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonID = MonID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonID);
            }
            else
            {
                MonID = oByteArray.ReadUInt();
            }
        }
		public ResKillMonster()
		{
			PacketID = 1220;
		}
    }

    /// <summary>
    ///  [响应类] 怪物最后一击 创建者
    /// </summary>
    [Package(1220)]
    public partial class ResKillMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKillMonster();
        }
    }


    /// <summary>
    ///  [请求类]更新翅膀技能
    /// </summary>
    public partial class ReqUpdateWingSkill: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateWingSkill pkg = new ReqUpdateWingSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateWingSkill()
		{
			PacketID = 1221;
		}
    }

    /// <summary>
    ///  [请求类] 更新翅膀技能 创建者
    /// </summary>
    [Package(1221)]
    public partial class ReqUpdateWingSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateWingSkill();
        }
    }


    /// <summary>
    ///  [响应类]更新翅膀技能
    /// </summary>
    public partial class ResUpdateWingSkill: Packet 
    {
        /// <summary>
        /// 旧的技能ID,0表示新增
        /// </summary>
        public uint OldSkillID;
        /// <summary>
        /// 新的技能ID
        /// </summary>
        public uint NewSkillID;

        public override Packet Clone()
        {
            ResUpdateWingSkill pkg = new ResUpdateWingSkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OldSkillID = OldSkillID;
            pkg.NewSkillID = NewSkillID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(OldSkillID);
                oByteArray.WriteUInt(NewSkillID);
            }
            else
            {
                OldSkillID = oByteArray.ReadUInt();
                NewSkillID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateWingSkill()
		{
			PacketID = 1222;
		}
    }

    /// <summary>
    ///  [响应类] 更新翅膀技能 创建者
    /// </summary>
    [Package(1222)]
    public partial class ResUpdateWingSkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateWingSkill();
        }
    }


    /// <summary>
    ///  [请求类]设置行会操作物品权限
    /// </summary>
    public partial class ReqSetGuildTreatedItemInfo: Packet 
    {
        /// <summary>
        /// 职业限制
        /// </summary>
        public byte CareerSet;
        /// <summary>
        /// 转生限制
        /// </summary>
        public byte StateSet;

        public override Packet Clone()
        {
            ReqSetGuildTreatedItemInfo pkg = new ReqSetGuildTreatedItemInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CareerSet = CareerSet;
            pkg.StateSet = StateSet;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(CareerSet);
                oByteArray.WriteByte(StateSet);
            }
            else
            {
                CareerSet = oByteArray.ReadByte();
                StateSet = oByteArray.ReadByte();
            }
        }
		public ReqSetGuildTreatedItemInfo()
		{
			PacketID = 1223;
		}
    }

    /// <summary>
    ///  [请求类] 设置行会操作物品权限 创建者
    /// </summary>
    [Package(1223)]
    public partial class ReqSetGuildTreatedItemInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetGuildTreatedItemInfo();
        }
    }


    /// <summary>
    ///  [响应类]设置行会操作物品权限
    /// </summary>
    public partial class ResSetGuildTreatedItemInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResSetGuildTreatedItemInfo pkg = new ResSetGuildTreatedItemInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResSetGuildTreatedItemInfo()
		{
			PacketID = 1224;
		}
    }

    /// <summary>
    ///  [响应类] 设置行会操作物品权限 创建者
    /// </summary>
    [Package(1224)]
    public partial class ResSetGuildTreatedItemInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetGuildTreatedItemInfo();
        }
    }


    /// <summary>
    ///  [请求类]进入炼狱地图
    /// </summary>
    public partial class ReqLianYuTransfer: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqLianYuTransfer pkg = new ReqLianYuTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqLianYuTransfer()
		{
			PacketID = 1225;
		}
    }

    /// <summary>
    ///  [请求类] 进入炼狱地图 创建者
    /// </summary>
    [Package(1225)]
    public partial class ReqLianYuTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLianYuTransfer();
        }
    }


    /// <summary>
    ///  [响应类]进入炼狱地图
    /// </summary>
    public partial class ResLianYuTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResLianYuTransfer pkg = new ResLianYuTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResLianYuTransfer()
		{
			PacketID = 1226;
		}
    }

    /// <summary>
    ///  [响应类] 进入炼狱地图 创建者
    /// </summary>
    [Package(1226)]
    public partial class ResLianYuTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLianYuTransfer();
        }
    }


    /// <summary>
    ///  [请求类]购买肉身无敌buff
    /// </summary>
    public partial class ReqBuyRouShenBuff: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ItemID;

        public override Packet Clone()
        {
            ReqBuyRouShenBuff pkg = new ReqBuyRouShenBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemID);
            }
            else
            {
                ItemID = oByteArray.ReadUInt();
            }
        }
		public ReqBuyRouShenBuff()
		{
			PacketID = 1227;
		}
    }

    /// <summary>
    ///  [请求类] 购买肉身无敌buff 创建者
    /// </summary>
    [Package(1227)]
    public partial class ReqBuyRouShenBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyRouShenBuff();
        }
    }


    /// <summary>
    ///  [响应类]购买肉身无敌buff
    /// </summary>
    public partial class ResBuyRouShenBuff: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResBuyRouShenBuff pkg = new ResBuyRouShenBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteByte(Result);
            }
            else
            {
                ItemID = oByteArray.ReadUInt();
                Result = oByteArray.ReadByte();
            }
        }
		public ResBuyRouShenBuff()
		{
			PacketID = 1228;
		}
    }

    /// <summary>
    ///  [响应类] 购买肉身无敌buff 创建者
    /// </summary>
    [Package(1228)]
    public partial class ResBuyRouShenBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyRouShenBuff();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家已经购买了几次肉身无敌buff
    /// </summary>
    public partial class ReqNoticeBuyRouShenTimes: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeBuyRouShenTimes pkg = new ReqNoticeBuyRouShenTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeBuyRouShenTimes()
		{
			PacketID = 1229;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家已经购买了几次肉身无敌buff 创建者
    /// </summary>
    [Package(1229)]
    public partial class ReqNoticeBuyRouShenTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeBuyRouShenTimes();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家已经购买了几次肉身无敌buff
    /// </summary>
    public partial class ResNoticeBuyRouShenTimes: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Item1Times;
        /// <summary>
        /// 
        /// </summary>
        public uint Item2Times;

        public override Packet Clone()
        {
            ResNoticeBuyRouShenTimes pkg = new ResNoticeBuyRouShenTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Item1Times = Item1Times;
            pkg.Item2Times = Item2Times;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Item1Times);
                oByteArray.WriteUInt(Item2Times);
            }
            else
            {
                Item1Times = oByteArray.ReadUInt();
                Item2Times = oByteArray.ReadUInt();
            }
        }
		public ResNoticeBuyRouShenTimes()
		{
			PacketID = 1230;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家已经购买了几次肉身无敌buff 创建者
    /// </summary>
    [Package(1230)]
    public partial class ResNoticeBuyRouShenTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeBuyRouShenTimes();
        }
    }


    /// <summary>
    ///  [请求类]通知经验红包元宝属性
    /// </summary>
    public partial class ReqUpdateRedBagMoney: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateRedBagMoney pkg = new ReqUpdateRedBagMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateRedBagMoney()
		{
			PacketID = 1231;
		}
    }

    /// <summary>
    ///  [请求类] 通知经验红包元宝属性 创建者
    /// </summary>
    [Package(1231)]
    public partial class ReqUpdateRedBagMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRedBagMoney();
        }
    }


    /// <summary>
    ///  [响应类]通知经验红包元宝属性
    /// </summary>
    public partial class ResUpdateRedBagMoney: Packet 
    {
        /// <summary>
        /// 当前元宝数量
        /// </summary>
        public uint CurMoney;

        public override Packet Clone()
        {
            ResUpdateRedBagMoney pkg = new ResUpdateRedBagMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurMoney = CurMoney;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurMoney);
            }
            else
            {
                CurMoney = oByteArray.ReadUInt();
            }
        }
		public ResUpdateRedBagMoney()
		{
			PacketID = 1232;
		}
    }

    /// <summary>
    ///  [响应类] 通知经验红包元宝属性 创建者
    /// </summary>
    [Package(1232)]
    public partial class ResUpdateRedBagMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRedBagMoney();
        }
    }


    /// <summary>
    ///  [请求类]通知经验红包中奖了
    /// </summary>
    public partial class ReqNotcieRedBagLucky: Packet 
    {

        public override Packet Clone()
        {
            ReqNotcieRedBagLucky pkg = new ReqNotcieRedBagLucky();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNotcieRedBagLucky()
		{
			PacketID = 1233;
		}
    }

    /// <summary>
    ///  [请求类] 通知经验红包中奖了 创建者
    /// </summary>
    [Package(1233)]
    public partial class ReqNotcieRedBagLuckyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNotcieRedBagLucky();
        }
    }


    /// <summary>
    ///  [响应类]通知经验红包中奖了
    /// </summary>
    public partial class ResNotcieRedBagLucky: Packet 
    {
        /// <summary>
        /// 中奖元宝数
        /// </summary>
        public uint Money;

        public override Packet Clone()
        {
            ResNotcieRedBagLucky pkg = new ResNotcieRedBagLucky();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Money = Money;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Money);
            }
            else
            {
                Money = oByteArray.ReadUInt();
            }
        }
		public ResNotcieRedBagLucky()
		{
			PacketID = 1234;
		}
    }

    /// <summary>
    ///  [响应类] 通知经验红包中奖了 创建者
    /// </summary>
    [Package(1234)]
    public partial class ResNotcieRedBagLuckyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNotcieRedBagLucky();
        }
    }


    /// <summary>
    ///  [请求类]玩家使用活动物品
    /// </summary>
    public partial class ReqPlayerUseActivityItem: Packet 
    {

        public override Packet Clone()
        {
            ReqPlayerUseActivityItem pkg = new ReqPlayerUseActivityItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPlayerUseActivityItem()
		{
			PacketID = 1235;
		}
    }

    /// <summary>
    ///  [请求类] 玩家使用活动物品 创建者
    /// </summary>
    [Package(1235)]
    public partial class ReqPlayerUseActivityItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerUseActivityItem();
        }
    }


    /// <summary>
    ///  [响应类]玩家使用活动物品
    /// </summary>
    public partial class ResPlayerUseActivityItem: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 活动Type
        /// </summary>
        public uint ActivityType;

        public override Packet Clone()
        {
            ResPlayerUseActivityItem pkg = new ResPlayerUseActivityItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID;
            pkg.ActivityType = ActivityType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt(ActivityType);
            }
            else
            {
                ItemID = oByteArray.ReadUInt();
                ActivityType = oByteArray.ReadUInt();
            }
        }
		public ResPlayerUseActivityItem()
		{
			PacketID = 1236;
		}
    }

    /// <summary>
    ///  [响应类] 玩家使用活动物品 创建者
    /// </summary>
    [Package(1236)]
    public partial class ResPlayerUseActivityItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerUseActivityItem();
        }
    }


    /// <summary>
    ///  [请求类]后台设置平台VIP信息
    /// </summary>
    public partial class ReqGMSetPlatFormVIP: Packet 
    {

        public override Packet Clone()
        {
            ReqGMSetPlatFormVIP pkg = new ReqGMSetPlatFormVIP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGMSetPlatFormVIP()
		{
			PacketID = 1237;
		}
    }

    /// <summary>
    ///  [请求类] 后台设置平台VIP信息 创建者
    /// </summary>
    [Package(1237)]
    public partial class ReqGMSetPlatFormVIPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGMSetPlatFormVIP();
        }
    }


    /// <summary>
    ///  [响应类]后台设置平台VIP信息
    /// </summary>
    public partial class ResGMSetPlatFormVIP: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string Info;

        public override Packet Clone()
        {
            ResGMSetPlatFormVIP pkg = new ResGMSetPlatFormVIP();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Info = Info;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Info);
            }
            else
            {
                Info = oByteArray.ReadUTF();
            }
        }
		public ResGMSetPlatFormVIP()
		{
			PacketID = 1238;
		}
    }

    /// <summary>
    ///  [响应类] 后台设置平台VIP信息 创建者
    /// </summary>
    [Package(1238)]
    public partial class ResGMSetPlatFormVIPCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGMSetPlatFormVIP();
        }
    }


    /// <summary>
    ///  [请求类]请求文件
    /// </summary>
    public partial class ReqGetDumpFile: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string PlatID;

        public override Packet Clone()
        {
            ReqGetDumpFile pkg = new ReqGetDumpFile();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlatID = PlatID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(PlatID);
            }
            else
            {
                PlatID = oByteArray.ReadUTF();
            }
        }
		public ReqGetDumpFile()
		{
			PacketID = 1239;
		}
    }

    /// <summary>
    ///  [请求类] 请求文件 创建者
    /// </summary>
    [Package(1239)]
    public partial class ReqGetDumpFileCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetDumpFile();
        }
    }


    /// <summary>
    ///  [响应类]请求文件
    /// </summary>
    public partial class ResGetDumpFile: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string File;
        /// <summary>
        /// 
        /// </summary>
        public string PlatID;
        /// <summary>
        /// 
        /// </summary>
        public string ServerID;
        /// <summary>
        /// 
        /// </summary>
        public string FileName;

        public override Packet Clone()
        {
            ResGetDumpFile pkg = new ResGetDumpFile();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.File = File;
            pkg.PlatID = PlatID;
            pkg.ServerID = ServerID;
            pkg.FileName = FileName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(File);
                oByteArray.WriteUTF(PlatID);
                oByteArray.WriteUTF(ServerID);
                oByteArray.WriteUTF(FileName);
            }
            else
            {
                File = oByteArray.ReadUTF();
                PlatID = oByteArray.ReadUTF();
                ServerID = oByteArray.ReadUTF();
                FileName = oByteArray.ReadUTF();
            }
        }
		public ResGetDumpFile()
		{
			PacketID = 1240;
		}
    }

    /// <summary>
    ///  [响应类] 请求文件 创建者
    /// </summary>
    [Package(1240)]
    public partial class ResGetDumpFileCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetDumpFile();
        }
    }


    /// <summary>
    ///  [请求类]通知创建行会
    /// </summary>
    public partial class ReqNoticeCreateGuild: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeCreateGuild pkg = new ReqNoticeCreateGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeCreateGuild()
		{
			PacketID = 1241;
		}
    }

    /// <summary>
    ///  [请求类] 通知创建行会 创建者
    /// </summary>
    [Package(1241)]
    public partial class ReqNoticeCreateGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCreateGuild();
        }
    }


    /// <summary>
    ///  [响应类]通知创建行会
    /// </summary>
    public partial class ResNoticeCreateGuild: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeCreateGuild pkg = new ResNoticeCreateGuild();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeCreateGuild()
		{
			PacketID = 1242;
		}
    }

    /// <summary>
    ///  [响应类] 通知创建行会 创建者
    /// </summary>
    [Package(1242)]
    public partial class ResNoticeCreateGuildCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCreateGuild();
        }
    }


    /// <summary>
    ///  [请求类]欢乐猜拳出拳
    /// </summary>
    public partial class ReqHappyGuess: Packet 
    {
        /// <summary>
        /// 玩家出拳信息(1剪刀，2石头，3布)
        /// </summary>
        public uint PlayerNum;
        /// <summary>
        /// 禁用出拳信息(0表示不禁用)
        /// </summary>
        public uint ForbidNum;

        public override Packet Clone()
        {
            ReqHappyGuess pkg = new ReqHappyGuess();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerNum = PlayerNum;
            pkg.ForbidNum = ForbidNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlayerNum);
                oByteArray.WriteUInt(ForbidNum);
            }
            else
            {
                PlayerNum = oByteArray.ReadUInt();
                ForbidNum = oByteArray.ReadUInt();
            }
        }
		public ReqHappyGuess()
		{
			PacketID = 1243;
		}
    }

    /// <summary>
    ///  [请求类] 欢乐猜拳出拳 创建者
    /// </summary>
    [Package(1243)]
    public partial class ReqHappyGuessCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHappyGuess();
        }
    }


    /// <summary>
    ///  [响应类]欢乐猜拳出拳
    /// </summary>
    public partial class ResHappyGuess: Packet 
    {
        /// <summary>
        /// 0赢了，63平局，64输了
        /// </summary>
        public uint Result;
        /// <summary>
        /// 禁用出拳信息(0不禁用)
        /// </summary>
        public uint ForbidNum;

        public override Packet Clone()
        {
            ResHappyGuess pkg = new ResHappyGuess();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ForbidNum = ForbidNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(ForbidNum);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ForbidNum = oByteArray.ReadUInt();
            }
        }
		public ResHappyGuess()
		{
			PacketID = 1244;
		}
    }

    /// <summary>
    ///  [响应类] 欢乐猜拳出拳 创建者
    /// </summary>
    [Package(1244)]
    public partial class ResHappyGuessCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHappyGuess();
        }
    }


    /// <summary>
    ///  [请求类]提取猜拳钱包
    /// </summary>
    public partial class ReqTakeGuessMoney: Packet 
    {
        /// <summary>
        /// 0奖池，1奖励一，2奖励二
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqTakeGuessMoney pkg = new ReqTakeGuessMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqTakeGuessMoney()
		{
			PacketID = 1245;
		}
    }

    /// <summary>
    ///  [请求类] 提取猜拳钱包 创建者
    /// </summary>
    [Package(1245)]
    public partial class ReqTakeGuessMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeGuessMoney();
        }
    }


    /// <summary>
    ///  [响应类]提取猜拳钱包
    /// </summary>
    public partial class ResTakeGuessMoney: Packet 
    {
        /// <summary>
        /// 提取结果
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResTakeGuessMoney pkg = new ResTakeGuessMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResTakeGuessMoney()
		{
			PacketID = 1246;
		}
    }

    /// <summary>
    ///  [响应类] 提取猜拳钱包 创建者
    /// </summary>
    [Package(1246)]
    public partial class ResTakeGuessMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeGuessMoney();
        }
    }


    /// <summary>
    ///  [请求类]猜拳玩家信息
    /// </summary>
    public partial class ReqGuessPlayerInfo: Packet 
    {
        /// <summary>
        /// 猜拳奖池
        /// </summary>
        public uint GuessMoneyPool;

        public override Packet Clone()
        {
            ReqGuessPlayerInfo pkg = new ReqGuessPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuessMoneyPool = GuessMoneyPool;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(GuessMoneyPool);
            }
            else
            {
                GuessMoneyPool = oByteArray.ReadUInt();
            }
        }
		public ReqGuessPlayerInfo()
		{
			PacketID = 1247;
		}
    }

    /// <summary>
    ///  [请求类] 猜拳玩家信息 创建者
    /// </summary>
    [Package(1247)]
    public partial class ReqGuessPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGuessPlayerInfo();
        }
    }


    /// <summary>
    ///  [响应类]猜拳玩家信息
    /// </summary>
    public partial class ResGuessPlayerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<GuessMoneyInfo> Info = new List<GuessMoneyInfo>();

        public override Packet Clone()
        {
            ResGuessPlayerInfo pkg = new ResGuessPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GuessMoneyInfo item in Info)
            {
                pkg.Info.Add(item.Clone() as GuessMoneyInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Info.Count);
                for (int i = 0; i < Info.Count; i++)
                {
                    Info[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    GuessMoneyInfo obj = new GuessMoneyInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Info.Add(obj);
                }
            }
        }
		public ResGuessPlayerInfo()
		{
			PacketID = 1248;
		}
    }

    /// <summary>
    ///  [响应类] 猜拳玩家信息 创建者
    /// </summary>
    [Package(1248)]
    public partial class ResGuessPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGuessPlayerInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新猜拳任务信息
    /// </summary>
    public partial class ReqUpdateGuessTaskInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateGuessTaskInfo pkg = new ReqUpdateGuessTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateGuessTaskInfo()
		{
			PacketID = 1249;
		}
    }

    /// <summary>
    ///  [请求类] 更新猜拳任务信息 创建者
    /// </summary>
    [Package(1249)]
    public partial class ReqUpdateGuessTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateGuessTaskInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新猜拳任务信息
    /// </summary>
    public partial class ResUpdateGuessTaskInfo: Packet 
    {
        /// <summary>
        /// 任务TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 任务完成进度
        /// </summary>
        public uint Count;
        /// <summary>
        /// 0未完成，1已完成
        /// </summary>
        public uint CurState;

        public override Packet Clone()
        {
            ResUpdateGuessTaskInfo pkg = new ResUpdateGuessTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Count = Count;
            pkg.CurState = CurState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
                oByteArray.WriteUInt(CurState);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
                CurState = oByteArray.ReadUInt();
            }
        }
		public ResUpdateGuessTaskInfo()
		{
			PacketID = 1250;
		}
    }

    /// <summary>
    ///  [响应类] 更新猜拳任务信息 创建者
    /// </summary>
    [Package(1250)]
    public partial class ResUpdateGuessTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateGuessTaskInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新猜拳奖池
    /// </summary>
    public partial class ReqUpdateGuessMoneyPool: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateGuessMoneyPool pkg = new ReqUpdateGuessMoneyPool();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateGuessMoneyPool()
		{
			PacketID = 1251;
		}
    }

    /// <summary>
    ///  [请求类] 更新猜拳奖池 创建者
    /// </summary>
    [Package(1251)]
    public partial class ReqUpdateGuessMoneyPoolCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateGuessMoneyPool();
        }
    }


    /// <summary>
    ///  [响应类]更新猜拳奖池
    /// </summary>
    public partial class ResUpdateGuessMoneyPool: Packet 
    {
        /// <summary>
        /// 猜拳奖池
        /// </summary>
        public uint Pool;

        public override Packet Clone()
        {
            ResUpdateGuessMoneyPool pkg = new ResUpdateGuessMoneyPool();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pool = Pool;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Pool);
            }
            else
            {
                Pool = oByteArray.ReadUInt();
            }
        }
		public ResUpdateGuessMoneyPool()
		{
			PacketID = 1252;
		}
    }

    /// <summary>
    ///  [响应类] 更新猜拳奖池 创建者
    /// </summary>
    [Package(1252)]
    public partial class ResUpdateGuessMoneyPoolCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateGuessMoneyPool();
        }
    }


    /// <summary>
    ///  [请求类]更新猜拳玩家所得元宝
    /// </summary>
    public partial class ReqUpdateGuessPlayerMoney: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateGuessPlayerMoney pkg = new ReqUpdateGuessPlayerMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateGuessPlayerMoney()
		{
			PacketID = 1253;
		}
    }

    /// <summary>
    ///  [请求类] 更新猜拳玩家所得元宝 创建者
    /// </summary>
    [Package(1253)]
    public partial class ReqUpdateGuessPlayerMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateGuessPlayerMoney();
        }
    }


    /// <summary>
    ///  [响应类]更新猜拳玩家所得元宝
    /// </summary>
    public partial class ResUpdateGuessPlayerMoney: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Money;

        public override Packet Clone()
        {
            ResUpdateGuessPlayerMoney pkg = new ResUpdateGuessPlayerMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Money = Money;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Money);
            }
            else
            {
                Money = oByteArray.ReadUInt();
            }
        }
		public ResUpdateGuessPlayerMoney()
		{
			PacketID = 1254;
		}
    }

    /// <summary>
    ///  [响应类] 更新猜拳玩家所得元宝 创建者
    /// </summary>
    [Package(1254)]
    public partial class ResUpdateGuessPlayerMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateGuessPlayerMoney();
        }
    }


    /// <summary>
    ///  [请求类]
    /// </summary>
    public partial class ReqSuperAddMoney: Packet 
    {

        public override Packet Clone()
        {
            ReqSuperAddMoney pkg = new ReqSuperAddMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSuperAddMoney()
		{
			PacketID = 1255;
		}
    }

    /// <summary>
    ///  [请求类]  创建者
    /// </summary>
    [Package(1255)]
    public partial class ReqSuperAddMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSuperAddMoney();
        }
    }


    /// <summary>
    ///  [响应类]
    /// </summary>
    public partial class ResSuperAddMoney: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint PayIngot;
        /// <summary>
        /// 
        /// </summary>
        public uint PayMoney;
        /// <summary>
        /// 
        /// </summary>
        public string OrderID;
        /// <summary>
        /// 
        /// </summary>
        public byte AddVIP;
        /// <summary>
        /// 
        /// </summary>
        public string Account;

        public override Packet Clone()
        {
            ResSuperAddMoney pkg = new ResSuperAddMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.PayIngot = PayIngot;
            pkg.PayMoney = PayMoney;
            pkg.OrderID = OrderID;
            pkg.AddVIP = AddVIP;
            pkg.Account = Account;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(PayIngot);
                oByteArray.WriteUInt(PayMoney);
                oByteArray.WriteUTF(OrderID);
                oByteArray.WriteByte(AddVIP);
                oByteArray.WriteUTF(Account);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                PayIngot = oByteArray.ReadUInt();
                PayMoney = oByteArray.ReadUInt();
                OrderID = oByteArray.ReadUTF();
                AddVIP = oByteArray.ReadByte();
                Account = oByteArray.ReadUTF();
            }
        }
		public ResSuperAddMoney()
		{
			PacketID = 1256;
		}
    }

    /// <summary>
    ///  [响应类]  创建者
    /// </summary>
    [Package(1256)]
    public partial class ResSuperAddMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSuperAddMoney();
        }
    }


    /// <summary>
    ///  [请求类]更新卧龙山庄BOSS信息
    /// </summary>
    public partial class ReqUpdateWolongBossInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateWolongBossInfo pkg = new ReqUpdateWolongBossInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateWolongBossInfo()
		{
			PacketID = 1257;
		}
    }

    /// <summary>
    ///  [请求类] 更新卧龙山庄BOSS信息 创建者
    /// </summary>
    [Package(1257)]
    public partial class ReqUpdateWolongBossInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateWolongBossInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新卧龙山庄BOSS信息
    /// </summary>
    public partial class ResUpdateWolongBossInfo: Packet 
    {
        /// <summary>
        /// 已击杀BOSS的ID
        /// </summary>
        public List<int> KilledBossID = new List<int>();

        public override Packet Clone()
        {
            ResUpdateWolongBossInfo pkg = new ResUpdateWolongBossInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in KilledBossID)
            {
                pkg.KilledBossID.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)KilledBossID.Count);
                for (int i = 0; i < KilledBossID.Count; i++)
                {
                    oByteArray.WriteInt(KilledBossID[i]);
                }
            }
            else
            {
                int KilledBossIDCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < KilledBossIDCount; i++)
                {
                    KilledBossID.Add(oByteArray.ReadInt());
                }
            }
        }
		public ResUpdateWolongBossInfo()
		{
			PacketID = 1258;
		}
    }

    /// <summary>
    ///  [响应类] 更新卧龙山庄BOSS信息 创建者
    /// </summary>
    [Package(1258)]
    public partial class ResUpdateWolongBossInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateWolongBossInfo();
        }
    }


    /// <summary>
    ///  [请求类]卧龙山庄宝箱信息
    /// </summary>
    public partial class ReqWolongBoxInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqWolongBoxInfo pkg = new ReqWolongBoxInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqWolongBoxInfo()
		{
			PacketID = 1259;
		}
    }

    /// <summary>
    ///  [请求类] 卧龙山庄宝箱信息 创建者
    /// </summary>
    [Package(1259)]
    public partial class ReqWolongBoxInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqWolongBoxInfo();
        }
    }


    /// <summary>
    ///  [响应类]卧龙山庄宝箱信息
    /// </summary>
    public partial class ResWolongBoxInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ItemInfo> BoxInfo = new List<ItemInfo>();

        public override Packet Clone()
        {
            ResWolongBoxInfo pkg = new ResWolongBoxInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ItemInfo item in BoxInfo)
            {
                pkg.BoxInfo.Add(item.Clone() as ItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)BoxInfo.Count);
                for (int i = 0; i < BoxInfo.Count; i++)
                {
                    BoxInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int BoxInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BoxInfoCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    BoxInfo.Add(obj);
                }
            }
        }
		public ResWolongBoxInfo()
		{
			PacketID = 1260;
		}
    }

    /// <summary>
    ///  [响应类] 卧龙山庄宝箱信息 创建者
    /// </summary>
    [Package(1260)]
    public partial class ResWolongBoxInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResWolongBoxInfo();
        }
    }


    /// <summary>
    ///  [请求类]进入奇遇副本
    /// </summary>
    public partial class ReqEnterAdventureMap: Packet 
    {
        /// <summary>
        /// 奇遇TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqEnterAdventureMap pkg = new ReqEnterAdventureMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqEnterAdventureMap()
		{
			PacketID = 1261;
		}
    }

    /// <summary>
    ///  [请求类] 进入奇遇副本 创建者
    /// </summary>
    [Package(1261)]
    public partial class ReqEnterAdventureMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterAdventureMap();
        }
    }


    /// <summary>
    ///  [响应类]进入奇遇副本
    /// </summary>
    public partial class ResEnterAdventureMap: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 奇遇TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResEnterAdventureMap pkg = new ResEnterAdventureMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResEnterAdventureMap()
		{
			PacketID = 1262;
		}
    }

    /// <summary>
    ///  [响应类] 进入奇遇副本 创建者
    /// </summary>
    [Package(1262)]
    public partial class ResEnterAdventureMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterAdventureMap();
        }
    }


    /// <summary>
    ///  [请求类]购买奇遇商店商品
    /// </summary>
    public partial class ReqBuyAdventureItem: Packet 
    {
        /// <summary>
        /// 物品位置TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqBuyAdventureItem pkg = new ReqBuyAdventureItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqBuyAdventureItem()
		{
			PacketID = 1263;
		}
    }

    /// <summary>
    ///  [请求类] 购买奇遇商店商品 创建者
    /// </summary>
    [Package(1263)]
    public partial class ReqBuyAdventureItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyAdventureItem();
        }
    }


    /// <summary>
    ///  [响应类]购买奇遇商店商品
    /// </summary>
    public partial class ResBuyAdventureItem: Packet 
    {
        /// <summary>
        /// 购买结果
        /// </summary>
        public byte Result;
        /// <summary>
        /// 购买位置TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResBuyAdventureItem pkg = new ResBuyAdventureItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResBuyAdventureItem()
		{
			PacketID = 1264;
		}
    }

    /// <summary>
    ///  [响应类] 购买奇遇商店商品 创建者
    /// </summary>
    [Package(1264)]
    public partial class ResBuyAdventureItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyAdventureItem();
        }
    }


    /// <summary>
    ///  [请求类]奇遇副本已生成
    /// </summary>
    public partial class ReqAdventureRefresh: Packet 
    {

        public override Packet Clone()
        {
            ReqAdventureRefresh pkg = new ReqAdventureRefresh();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAdventureRefresh()
		{
			PacketID = 1265;
		}
    }

    /// <summary>
    ///  [请求类] 奇遇副本已生成 创建者
    /// </summary>
    [Package(1265)]
    public partial class ReqAdventureRefreshCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAdventureRefresh();
        }
    }


    /// <summary>
    ///  [响应类]奇遇副本已生成
    /// </summary>
    public partial class ResAdventureRefresh: Packet 
    {
        /// <summary>
        /// 奇遇副本TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 结束时间
        /// </summary>
        public uint FinishTime;

        public override Packet Clone()
        {
            ResAdventureRefresh pkg = new ResAdventureRefresh();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.FinishTime = FinishTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(FinishTime);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                FinishTime = oByteArray.ReadUInt();
            }
        }
		public ResAdventureRefresh()
		{
			PacketID = 1266;
		}
    }

    /// <summary>
    ///  [响应类] 奇遇副本已生成 创建者
    /// </summary>
    [Package(1266)]
    public partial class ResAdventureRefreshCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAdventureRefresh();
        }
    }


    /// <summary>
    ///  [请求类]设置副本是否自动双倍
    /// </summary>
    public partial class ReqSetDoubleDungeon: Packet 
    {
        /// <summary>
        /// 是否双倍
        /// </summary>
        public bool DoubleDungeon;

        public override Packet Clone()
        {
            ReqSetDoubleDungeon pkg = new ReqSetDoubleDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DoubleDungeon = DoubleDungeon;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(DoubleDungeon);
            }
            else
            {
                DoubleDungeon = oByteArray.ReadBoolean();
            }
        }
		public ReqSetDoubleDungeon()
		{
			PacketID = 1267;
		}
    }

    /// <summary>
    ///  [请求类] 设置副本是否自动双倍 创建者
    /// </summary>
    [Package(1267)]
    public partial class ReqSetDoubleDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSetDoubleDungeon();
        }
    }


    /// <summary>
    ///  [响应类]设置副本是否自动双倍
    /// </summary>
    public partial class ResSetDoubleDungeon: Packet 
    {

        public override Packet Clone()
        {
            ResSetDoubleDungeon pkg = new ResSetDoubleDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSetDoubleDungeon()
		{
			PacketID = 1268;
		}
    }

    /// <summary>
    ///  [响应类] 设置副本是否自动双倍 创建者
    /// </summary>
    [Package(1268)]
    public partial class ResSetDoubleDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSetDoubleDungeon();
        }
    }


    /// <summary>
    ///  [请求类]进入超玩副本
    /// </summary>
    public partial class ReqEnterYYSuperDungeon: Packet 
    {
        /// <summary>
        /// 0-2(超玩副本)
        /// </summary>
        public uint Index;

        public override Packet Clone()
        {
            ReqEnterYYSuperDungeon pkg = new ReqEnterYYSuperDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Index = Index;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Index);
            }
            else
            {
                Index = oByteArray.ReadUInt();
            }
        }
		public ReqEnterYYSuperDungeon()
		{
			PacketID = 1269;
		}
    }

    /// <summary>
    ///  [请求类] 进入超玩副本 创建者
    /// </summary>
    [Package(1269)]
    public partial class ReqEnterYYSuperDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterYYSuperDungeon();
        }
    }


    /// <summary>
    ///  [响应类]进入超玩副本
    /// </summary>
    public partial class ResEnterYYSuperDungeon: Packet 
    {
        /// <summary>
        /// 返回结果
        /// </summary>
        public uint Result;
        /// <summary>
        /// 0-2(超玩副本)
        /// </summary>
        public uint Index;

        public override Packet Clone()
        {
            ResEnterYYSuperDungeon pkg = new ResEnterYYSuperDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Index = Index;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Index);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Index = oByteArray.ReadUInt();
            }
        }
		public ResEnterYYSuperDungeon()
		{
			PacketID = 1270;
		}
    }

    /// <summary>
    ///  [响应类] 进入超玩副本 创建者
    /// </summary>
    [Package(1270)]
    public partial class ResEnterYYSuperDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterYYSuperDungeon();
        }
    }


    /// <summary>
    ///  [请求类]转换职业
    /// </summary>
    public partial class ReqChangeCareer: Packet 
    {
        /// <summary>
        /// 目标职业
        /// </summary>
        public ushort TargetCareer;

        public override Packet Clone()
        {
            ReqChangeCareer pkg = new ReqChangeCareer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetCareer = TargetCareer;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort(TargetCareer);
            }
            else
            {
                TargetCareer = oByteArray.ReadUShort();
            }
        }
		public ReqChangeCareer()
		{
			PacketID = 1271;
		}
    }

    /// <summary>
    ///  [请求类] 转换职业 创建者
    /// </summary>
    [Package(1271)]
    public partial class ReqChangeCareerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeCareer();
        }
    }


    /// <summary>
    ///  [响应类]转换职业
    /// </summary>
    public partial class ResChangeCareer: Packet 
    {
        /// <summary>
        /// 转换结果
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResChangeCareer pkg = new ResChangeCareer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResChangeCareer()
		{
			PacketID = 1272;
		}
    }

    /// <summary>
    ///  [响应类] 转换职业 创建者
    /// </summary>
    [Package(1272)]
    public partial class ResChangeCareerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeCareer();
        }
    }


    /// <summary>
    ///  [请求类]拍卖行上架(worldserver通知cacheserver)
    /// </summary>
    public partial class ReqAddAuctionItem: Packet 
    {
        /// <summary>
        /// 拍卖类型0.金币拍卖，1.元宝拍卖，2.跨服拍卖，3.行会金币拍卖，4.行会元宝拍卖
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 物品平台ID
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 物品区服ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 卖方ID，通常为玩家ID，AuctionType为3是，则表示工会ID
        /// </summary>
        public ulong OwnerID;
        /// <summary>
        /// 竞拍者ID
        /// </summary>
        public ulong BidderID;
        /// <summary>
        /// 对谁可见 0为对所有人可见
        /// </summary>
        public ulong VisiblePlayer;
        /// <summary>
        /// 一口价
        /// </summary>
        public uint Price;
        /// <summary>
        /// 竞拍价
        /// </summary>
        public uint AuctionPrice;
        /// <summary>
        /// 竞拍失效时间
        /// </summary>
        public uint AuctionExpireTime;
        /// <summary>
        /// 竞拍加价最低万分比
        /// </summary>
        public uint AuctionAddMoneyRate;
        /// <summary>
        /// 竞拍导致剩余时间减少
        /// </summary>
        public uint AuctionReduceTime;
        /// <summary>
        /// 
        /// </summary>
        public uint PriceType;

        public override Packet Clone()
        {
            ReqAddAuctionItem pkg = new ReqAddAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.ItemID = ItemID;
            pkg.OwnerID = OwnerID;
            pkg.BidderID = BidderID;
            pkg.VisiblePlayer = VisiblePlayer;
            pkg.Price = Price;
            pkg.AuctionPrice = AuctionPrice;
            pkg.AuctionExpireTime = AuctionExpireTime;
            pkg.AuctionAddMoneyRate = AuctionAddMoneyRate;
            pkg.AuctionReduceTime = AuctionReduceTime;
            pkg.PriceType = PriceType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt64(OwnerID);
                oByteArray.WriteUInt64(BidderID);
                oByteArray.WriteUInt64(VisiblePlayer);
                oByteArray.WriteUInt(Price);
                oByteArray.WriteUInt(AuctionPrice);
                oByteArray.WriteUInt(AuctionExpireTime);
                oByteArray.WriteUInt(AuctionAddMoneyRate);
                oByteArray.WriteUInt(AuctionReduceTime);
                oByteArray.WriteUInt(PriceType);
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
                OwnerID = oByteArray.ReadUInt64();
                BidderID = oByteArray.ReadUInt64();
                VisiblePlayer = oByteArray.ReadUInt64();
                Price = oByteArray.ReadUInt();
                AuctionPrice = oByteArray.ReadUInt();
                AuctionExpireTime = oByteArray.ReadUInt();
                AuctionAddMoneyRate = oByteArray.ReadUInt();
                AuctionReduceTime = oByteArray.ReadUInt();
                PriceType = oByteArray.ReadUInt();
            }
        }
		public ReqAddAuctionItem()
		{
			PacketID = 1273;
		}
    }

    /// <summary>
    ///  [请求类] 拍卖行上架(worldserver通知cacheserver) 创建者
    /// </summary>
    [Package(1273)]
    public partial class ReqAddAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddAuctionItem();
        }
    }


    /// <summary>
    ///  [响应类]拍卖行上架(worldserver通知cacheserver)
    /// </summary>
    public partial class ResAddAuctionItem: Packet 
    {
        /// <summary>
        /// 操作结果
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResAddAuctionItem pkg = new ResAddAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResAddAuctionItem()
		{
			PacketID = 1274;
		}
    }

    /// <summary>
    ///  [响应类] 拍卖行上架(worldserver通知cacheserver) 创建者
    /// </summary>
    [Package(1274)]
    public partial class ResAddAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddAuctionItem();
        }
    }


    /// <summary>
    ///  [请求类]拍卖行物品下架/被买走
    /// </summary>
    public partial class ReqDelAuctionItem: Packet 
    {
        /// <summary>
        /// 拍卖类型0.金币拍卖，1.元宝拍卖，2.跨服拍卖，3.行会金币拍卖，4.行会元宝拍卖
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 物品平台ID
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 物品区服ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public uint ItemID;

        public override Packet Clone()
        {
            ReqDelAuctionItem pkg = new ReqDelAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.ItemID = ItemID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt(ItemID);
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
            }
        }
		public ReqDelAuctionItem()
		{
			PacketID = 1275;
		}
    }

    /// <summary>
    ///  [请求类] 拍卖行物品下架/被买走 创建者
    /// </summary>
    [Package(1275)]
    public partial class ReqDelAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDelAuctionItem();
        }
    }


    /// <summary>
    ///  [响应类]拍卖行物品下架/被买走
    /// </summary>
    public partial class ResDelAuctionItem: Packet 
    {
        /// <summary>
        /// 操作结果
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResDelAuctionItem pkg = new ResDelAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResDelAuctionItem()
		{
			PacketID = 1276;
		}
    }

    /// <summary>
    ///  [响应类] 拍卖行物品下架/被买走 创建者
    /// </summary>
    [Package(1276)]
    public partial class ResDelAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDelAuctionItem();
        }
    }


    /// <summary>
    ///  [请求类]更换竞拍者信息(竞拍)
    /// </summary>
    public partial class ReqUpdateAuctionItem: Packet 
    {
        /// <summary>
        /// 拍卖类型
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 物品平台ID
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 物品区服ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 竞拍者ID
        /// </summary>
        public ulong BidderID;
        /// <summary>
        /// 竞拍价
        /// </summary>
        public uint AuctionPrice;
        /// <summary>
        /// 竞拍失效时间
        /// </summary>
        public uint AuctionExpireTime;
        /// <summary>
        /// 一口价
        /// </summary>
        public uint Price;

        public override Packet Clone()
        {
            ReqUpdateAuctionItem pkg = new ReqUpdateAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.ItemID = ItemID;
            pkg.BidderID = BidderID;
            pkg.AuctionPrice = AuctionPrice;
            pkg.AuctionExpireTime = AuctionExpireTime;
            pkg.Price = Price;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt64(BidderID);
                oByteArray.WriteUInt(AuctionPrice);
                oByteArray.WriteUInt(AuctionExpireTime);
                oByteArray.WriteUInt(Price);
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
                BidderID = oByteArray.ReadUInt64();
                AuctionPrice = oByteArray.ReadUInt();
                AuctionExpireTime = oByteArray.ReadUInt();
                Price = oByteArray.ReadUInt();
            }
        }
		public ReqUpdateAuctionItem()
		{
			PacketID = 1277;
		}
    }

    /// <summary>
    ///  [请求类] 更换竞拍者信息(竞拍) 创建者
    /// </summary>
    [Package(1277)]
    public partial class ReqUpdateAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAuctionItem();
        }
    }


    /// <summary>
    ///  [响应类]更换竞拍者信息(竞拍)
    /// </summary>
    public partial class ResUpdateAuctionItem: Packet 
    {
        /// <summary>
        /// 操作结果
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUpdateAuctionItem pkg = new ResUpdateAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUpdateAuctionItem()
		{
			PacketID = 1278;
		}
    }

    /// <summary>
    ///  [响应类] 更换竞拍者信息(竞拍) 创建者
    /// </summary>
    [Package(1278)]
    public partial class ResUpdateAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAuctionItem();
        }
    }


    /// <summary>
    ///  [请求类]购买拍卖行物品（一口价）
    /// </summary>
    public partial class ReqBuyAuctionItem: Packet 
    {
        /// <summary>
        /// 拍卖类型
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 物品平台ID
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 物品区服ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public uint ItemID;

        public override Packet Clone()
        {
            ReqBuyAuctionItem pkg = new ReqBuyAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.ItemID = ItemID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt(ItemID);
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
            }
        }
		public ReqBuyAuctionItem()
		{
			PacketID = 1279;
		}
    }

    /// <summary>
    ///  [请求类] 购买拍卖行物品（一口价） 创建者
    /// </summary>
    [Package(1279)]
    public partial class ReqBuyAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyAuctionItem();
        }
    }


    /// <summary>
    ///  [响应类]购买拍卖行物品（一口价）
    /// </summary>
    public partial class ResBuyAuctionItem: Packet 
    {
        /// <summary>
        /// 操作结果
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBuyAuctionItem pkg = new ResBuyAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBuyAuctionItem()
		{
			PacketID = 1280;
		}
    }

    /// <summary>
    ///  [响应类] 购买拍卖行物品（一口价） 创建者
    /// </summary>
    [Package(1280)]
    public partial class ResBuyAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyAuctionItem();
        }
    }


    /// <summary>
    ///  [请求类]获取拍卖行物品列表
    /// </summary>
    public partial class ReqGetAuctionItems: Packet 
    {
        /// <summary>
        /// 拍卖类型
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 操作类型1.所有在售列表，2.玩家竞拍中商品，3.玩家销售中商品
        /// </summary>
        public uint OperateType;
        /// <summary>
        /// 开始索引
        /// </summary>
        public uint StartPos;
        /// <summary>
        /// 物品数量
        /// </summary>
        public uint ItemNum;
        /// <summary>
        /// 筛选类别（0：全部 1：道具，2：装备）
        /// </summary>
        public uint SelectType1;
        /// <summary>
        /// 子类别,可包含多个,空串代表全部，用|隔开（详见道具表/装备表 type）
        /// </summary>
        public string SelectType2;
        /// <summary>
        /// 等级
        /// </summary>
        public uint MinLv;
        /// <summary>
        /// 等级
        /// </summary>
        public uint MaxLv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public uint MinStateLv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public uint MaxStateLv;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Job;

        public override Packet Clone()
        {
            ReqGetAuctionItems pkg = new ReqGetAuctionItems();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            pkg.OperateType = OperateType;
            pkg.StartPos = StartPos;
            pkg.ItemNum = ItemNum;
            pkg.SelectType1 = SelectType1;
            pkg.SelectType2 = SelectType2;
            pkg.MinLv = MinLv;
            pkg.MaxLv = MaxLv;
            pkg.MinStateLv = MinStateLv;
            pkg.MaxStateLv = MaxStateLv;
            pkg.Job = Job;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt(OperateType);
                oByteArray.WriteUInt(StartPos);
                oByteArray.WriteUInt(ItemNum);
                oByteArray.WriteUInt(SelectType1);
                oByteArray.WriteUTF(SelectType2);
                oByteArray.WriteUInt(MinLv);
                oByteArray.WriteUInt(MaxLv);
                oByteArray.WriteUInt(MinStateLv);
                oByteArray.WriteUInt(MaxStateLv);
                oByteArray.WriteUInt(Job);
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                OperateType = oByteArray.ReadUInt();
                StartPos = oByteArray.ReadUInt();
                ItemNum = oByteArray.ReadUInt();
                SelectType1 = oByteArray.ReadUInt();
                SelectType2 = oByteArray.ReadUTF();
                MinLv = oByteArray.ReadUInt();
                MaxLv = oByteArray.ReadUInt();
                MinStateLv = oByteArray.ReadUInt();
                MaxStateLv = oByteArray.ReadUInt();
                Job = oByteArray.ReadUInt();
            }
        }
		public ReqGetAuctionItems()
		{
			PacketID = 1281;
		}
    }

    /// <summary>
    ///  [请求类] 获取拍卖行物品列表 创建者
    /// </summary>
    [Package(1281)]
    public partial class ReqGetAuctionItemsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetAuctionItems();
        }
    }


    /// <summary>
    ///  [响应类]获取拍卖行物品列表
    /// </summary>
    public partial class ResGetAuctionItems: Packet 
    {
        /// <summary>
        /// 拍卖类型
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 操作类型1.所有在售列表，2.玩家竞拍中商品，3.玩家销售中商品
        /// </summary>
        public uint OperateType;
        /// <summary>
        /// 结果
        /// </summary>
        public uint Result;
        /// <summary>
        /// 物品列表
        /// </summary>
        public List<AuctionItem> ItemVec = new List<AuctionItem>();
        /// <summary>
        /// 筛选类别（0：全部 1：道具，2：装备）
        /// </summary>
        public uint SelectType1;
        /// <summary>
        /// 子类别,可包含多个,空串代表全部，用|隔开（详见道具表/装备表 type）
        /// </summary>
        public string SelectType2;
        /// <summary>
        /// 等级
        /// </summary>
        public uint MinLv;
        /// <summary>
        /// 等级
        /// </summary>
        public uint MaxLv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public uint MinStateLv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public uint MaxStateLv;
        /// <summary>
        /// 职业
        /// </summary>
        public uint Job;
        /// <summary>
        /// 总商品数量
        /// </summary>
        public uint TotalItemCount;

        public override Packet Clone()
        {
            ResGetAuctionItems pkg = new ResGetAuctionItems();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            pkg.OperateType = OperateType;
            pkg.Result = Result;
            foreach (AuctionItem item in ItemVec)
            {
                pkg.ItemVec.Add(item.Clone() as AuctionItem);
            }
            pkg.SelectType1 = SelectType1;
            pkg.SelectType2 = SelectType2;
            pkg.MinLv = MinLv;
            pkg.MaxLv = MaxLv;
            pkg.MinStateLv = MinStateLv;
            pkg.MaxStateLv = MaxStateLv;
            pkg.Job = Job;
            pkg.TotalItemCount = TotalItemCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt(OperateType);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)ItemVec.Count);
                for (int i = 0; i < ItemVec.Count; i++)
                {
                    ItemVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(SelectType1);
                oByteArray.WriteUTF(SelectType2);
                oByteArray.WriteUInt(MinLv);
                oByteArray.WriteUInt(MaxLv);
                oByteArray.WriteUInt(MinStateLv);
                oByteArray.WriteUInt(MaxStateLv);
                oByteArray.WriteUInt(Job);
                oByteArray.WriteUInt(TotalItemCount);
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                OperateType = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                int ItemVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemVecCount; i++)
                {
                    AuctionItem obj = new AuctionItem();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemVec.Add(obj);
                }
                SelectType1 = oByteArray.ReadUInt();
                SelectType2 = oByteArray.ReadUTF();
                MinLv = oByteArray.ReadUInt();
                MaxLv = oByteArray.ReadUInt();
                MinStateLv = oByteArray.ReadUInt();
                MaxStateLv = oByteArray.ReadUInt();
                Job = oByteArray.ReadUInt();
                TotalItemCount = oByteArray.ReadUInt();
            }
        }
		public ResGetAuctionItems()
		{
			PacketID = 1282;
		}
    }

    /// <summary>
    ///  [响应类] 获取拍卖行物品列表 创建者
    /// </summary>
    [Package(1282)]
    public partial class ResGetAuctionItemsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetAuctionItems();
        }
    }


    /// <summary>
    ///  [请求类]拍卖行上架（客户端请求服务器）
    /// </summary>
    public partial class ReqPlayerAddAuctionItem: Packet 
    {
        /// <summary>
        /// 拍卖类型
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 物品平台ID;
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 物品区服ID;
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 物品ID;
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 竞拍价
        /// </summary>
        public uint AuctionPrice;
        /// <summary>
        /// 一口价
        /// </summary>
        public uint Price;
        /// <summary>
        /// 物品数量
        /// </summary>
        public uint ItemNum;
        /// <summary>
        /// 0.从背包上架，1.重新上架
        /// </summary>
        public uint OperateType;
        /// <summary>
        /// 以前的拍卖类型（用于重新上架）0.金币拍卖，1.元宝拍卖，2.跨服拍卖，3.行会金币拍卖，4.行会元宝拍卖
        /// </summary>
        public uint OriginalAuctionType;

        public override Packet Clone()
        {
            ReqPlayerAddAuctionItem pkg = new ReqPlayerAddAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.ItemID = ItemID;
            pkg.AuctionPrice = AuctionPrice;
            pkg.Price = Price;
            pkg.ItemNum = ItemNum;
            pkg.OperateType = OperateType;
            pkg.OriginalAuctionType = OriginalAuctionType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt(AuctionPrice);
                oByteArray.WriteUInt(Price);
                oByteArray.WriteUInt(ItemNum);
                oByteArray.WriteUInt(OperateType);
                oByteArray.WriteUInt(OriginalAuctionType);
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
                AuctionPrice = oByteArray.ReadUInt();
                Price = oByteArray.ReadUInt();
                ItemNum = oByteArray.ReadUInt();
                OperateType = oByteArray.ReadUInt();
                OriginalAuctionType = oByteArray.ReadUInt();
            }
        }
		public ReqPlayerAddAuctionItem()
		{
			PacketID = 1283;
		}
    }

    /// <summary>
    ///  [请求类] 拍卖行上架（客户端请求服务器） 创建者
    /// </summary>
    [Package(1283)]
    public partial class ReqPlayerAddAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerAddAuctionItem();
        }
    }


    /// <summary>
    ///  [响应类]拍卖行上架（客户端请求服务器）
    /// </summary>
    public partial class ResPlayerAddAuctionItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResPlayerAddAuctionItem pkg = new ResPlayerAddAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResPlayerAddAuctionItem()
		{
			PacketID = 1284;
		}
    }

    /// <summary>
    ///  [响应类] 拍卖行上架（客户端请求服务器） 创建者
    /// </summary>
    [Package(1284)]
    public partial class ResPlayerAddAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerAddAuctionItem();
        }
    }


    /// <summary>
    ///  [请求类]金刚石回收
    /// </summary>
    public partial class ReqDiamondRecycle: Packet 
    {
        /// <summary>
        /// 金刚石回收表的TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqDiamondRecycle pkg = new ReqDiamondRecycle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqDiamondRecycle()
		{
			PacketID = 1285;
		}
    }

    /// <summary>
    ///  [请求类] 金刚石回收 创建者
    /// </summary>
    [Package(1285)]
    public partial class ReqDiamondRecycleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDiamondRecycle();
        }
    }


    /// <summary>
    ///  [响应类]金刚石回收
    /// </summary>
    public partial class ResDiamondRecycle: Packet 
    {
        /// <summary>
        /// 0成功,其它失败
        /// </summary>
        public uint Result;
        /// <summary>
        /// 增加金刚石
        /// </summary>
        public uint AddIgnots;

        public override Packet Clone()
        {
            ResDiamondRecycle pkg = new ResDiamondRecycle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.AddIgnots = AddIgnots;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(AddIgnots);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                AddIgnots = oByteArray.ReadUInt();
            }
        }
		public ResDiamondRecycle()
		{
			PacketID = 1286;
		}
    }

    /// <summary>
    ///  [响应类] 金刚石回收 创建者
    /// </summary>
    [Package(1286)]
    public partial class ResDiamondRecycleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDiamondRecycle();
        }
    }


    /// <summary>
    ///  [请求类]开宝箱(转圈模式)
    /// </summary>
    public partial class ReqOpenCircleChest: Packet 
    {

        public override Packet Clone()
        {
            ReqOpenCircleChest pkg = new ReqOpenCircleChest();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOpenCircleChest()
		{
			PacketID = 1287;
		}
    }

    /// <summary>
    ///  [请求类] 开宝箱(转圈模式) 创建者
    /// </summary>
    [Package(1287)]
    public partial class ReqOpenCircleChestCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOpenCircleChest();
        }
    }


    /// <summary>
    ///  [响应类]开宝箱(转圈模式)
    /// </summary>
    public partial class ResOpenCircleChest: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 0:黄金宝箱,1:钻石宝箱
        /// </summary>
        public byte Type;
        /// <summary>
        /// 中奖的位置[0,7]
        /// </summary>
        public uint AwardPos;
        /// <summary>
        /// 隐藏宝库抽取位置[8,10]
        /// </summary>
        public uint HidePos;

        public override Packet Clone()
        {
            ResOpenCircleChest pkg = new ResOpenCircleChest();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.AwardPos = AwardPos;
            pkg.HidePos = HidePos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(AwardPos);
                oByteArray.WriteUInt(HidePos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                AwardPos = oByteArray.ReadUInt();
                HidePos = oByteArray.ReadUInt();
            }
        }
		public ResOpenCircleChest()
		{
			PacketID = 1288;
		}
    }

    /// <summary>
    ///  [响应类] 开宝箱(转圈模式) 创建者
    /// </summary>
    [Package(1288)]
    public partial class ResOpenCircleChestCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOpenCircleChest();
        }
    }


    /// <summary>
    ///  [请求类]更改物品信息
    /// </summary>
    public partial class ReqUpDateItemInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpDateItemInfo pkg = new ReqUpDateItemInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpDateItemInfo()
		{
			PacketID = 1289;
		}
    }

    /// <summary>
    ///  [请求类] 更改物品信息 创建者
    /// </summary>
    [Package(1289)]
    public partial class ReqUpDateItemInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpDateItemInfo();
        }
    }


    /// <summary>
    ///  [响应类]更改物品信息
    /// </summary>
    public partial class ResUpDateItemInfo: Packet 
    {
        /// <summary>
        /// 物品信息
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();

        public override Packet Clone()
        {
            ResUpDateItemInfo pkg = new ResUpDateItemInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpDateItemInfo()
		{
			PacketID = 1290;
		}
    }

    /// <summary>
    ///  [响应类] 更改物品信息 创建者
    /// </summary>
    [Package(1290)]
    public partial class ResUpDateItemInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpDateItemInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新物品Data3属性
    /// </summary>
    public partial class ReqNoticeUpdateItemData3: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdateItemData3 pkg = new ReqNoticeUpdateItemData3();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdateItemData3()
		{
			PacketID = 1291;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新物品Data3属性 创建者
    /// </summary>
    [Package(1291)]
    public partial class ReqNoticeUpdateItemData3Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemData3();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新物品Data3属性
    /// </summary>
    public partial class ResNoticeUpdateItemData3: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 值
        /// </summary>
        public string Value;

        public override Packet Clone()
        {
            ResNoticeUpdateItemData3 pkg = new ResNoticeUpdateItemData3();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.Value = Value;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(Value);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                Value = oByteArray.ReadUTF();
            }
        }
		public ResNoticeUpdateItemData3()
		{
			PacketID = 1292;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新物品Data3属性 创建者
    /// </summary>
    [Package(1292)]
    public partial class ResNoticeUpdateItemData3Creator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemData3();
        }
    }


    /// <summary>
    ///  [请求类]购买行会buff
    /// </summary>
    public partial class ReqBuyGuildBuff: Packet 
    {
        /// <summary>
        /// 1.无尽地狱呐喊 2.无尽地狱击鼓
        /// </summary>
        public uint BuffType;

        public override Packet Clone()
        {
            ReqBuyGuildBuff pkg = new ReqBuyGuildBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BuffType = BuffType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BuffType);
            }
            else
            {
                BuffType = oByteArray.ReadUInt();
            }
        }
		public ReqBuyGuildBuff()
		{
			PacketID = 1293;
		}
    }

    /// <summary>
    ///  [请求类] 购买行会buff 创建者
    /// </summary>
    [Package(1293)]
    public partial class ReqBuyGuildBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyGuildBuff();
        }
    }


    /// <summary>
    ///  [响应类]购买行会buff
    /// </summary>
    public partial class ResBuyGuildBuff: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBuyGuildBuff pkg = new ResBuyGuildBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBuyGuildBuff()
		{
			PacketID = 1294;
		}
    }

    /// <summary>
    ///  [响应类] 购买行会buff 创建者
    /// </summary>
    [Package(1294)]
    public partial class ResBuyGuildBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyGuildBuff();
        }
    }


    /// <summary>
    ///  [请求类]行会无尽地狱活动信息
    /// </summary>
    public partial class ReqHHWJDYActivityInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqHHWJDYActivityInfo pkg = new ReqHHWJDYActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqHHWJDYActivityInfo()
		{
			PacketID = 1295;
		}
    }

    /// <summary>
    ///  [请求类] 行会无尽地狱活动信息 创建者
    /// </summary>
    [Package(1295)]
    public partial class ReqHHWJDYActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHHWJDYActivityInfo();
        }
    }


    /// <summary>
    ///  [响应类]行会无尽地狱活动信息
    /// </summary>
    public partial class ResHHWJDYActivityInfo: Packet 
    {
        /// <summary>
        /// 当前怪物波数
        /// </summary>
        public uint CurWaves;
        /// <summary>
        /// 怪物总波数
        /// </summary>
        public uint TotalWaves;
        /// <summary>
        /// boss名字|血量百分比,boss名字|血量百分比...
        /// </summary>
        public string BossInfo;
        /// <summary>
        /// bufftype|buff层数,bufftype|buff层数....
        /// </summary>
        public string GuildBuffInfo;

        public override Packet Clone()
        {
            ResHHWJDYActivityInfo pkg = new ResHHWJDYActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurWaves = CurWaves;
            pkg.TotalWaves = TotalWaves;
            pkg.BossInfo = BossInfo;
            pkg.GuildBuffInfo = GuildBuffInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurWaves);
                oByteArray.WriteUInt(TotalWaves);
                oByteArray.WriteUTF(BossInfo);
                oByteArray.WriteUTF(GuildBuffInfo);
            }
            else
            {
                CurWaves = oByteArray.ReadUInt();
                TotalWaves = oByteArray.ReadUInt();
                BossInfo = oByteArray.ReadUTF();
                GuildBuffInfo = oByteArray.ReadUTF();
            }
        }
		public ResHHWJDYActivityInfo()
		{
			PacketID = 1296;
		}
    }

    /// <summary>
    ///  [响应类] 行会无尽地狱活动信息 创建者
    /// </summary>
    [Package(1296)]
    public partial class ResHHWJDYActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHHWJDYActivityInfo();
        }
    }


    /// <summary>
    ///  [请求类]请求行会祭坛祭祀
    /// </summary>
    public partial class ReqAltarSacrifice: Packet 
    {
        /// <summary>
        /// 行会祭祀(捐献)TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqAltarSacrifice pkg = new ReqAltarSacrifice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqAltarSacrifice()
		{
			PacketID = 1297;
		}
    }

    /// <summary>
    ///  [请求类] 请求行会祭坛祭祀 创建者
    /// </summary>
    [Package(1297)]
    public partial class ReqAltarSacrificeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAltarSacrifice();
        }
    }


    /// <summary>
    ///  [响应类]请求行会祭坛祭祀
    /// </summary>
    public partial class ResAltarSacrifice: Packet 
    {
        /// <summary>
        /// 0成功
        /// </summary>
        public byte Result;
        /// <summary>
        /// 行会祭祀(捐献)TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResAltarSacrifice pkg = new ResAltarSacrifice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResAltarSacrifice()
		{
			PacketID = 1298;
		}
    }

    /// <summary>
    ///  [响应类] 请求行会祭坛祭祀 创建者
    /// </summary>
    [Package(1298)]
    public partial class ResAltarSacrificeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAltarSacrifice();
        }
    }


    /// <summary>
    ///  [请求类]世界服通知地图夫，玩家购买行会buff
    /// </summary>
    public partial class ReqOnPlayerBuyGuildBuff: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint BuffID;
        /// <summary>
        /// 
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 1.行会无尽地狱呐喊 2.行会无尽地狱击鼓
        /// </summary>
        public uint BuffType;

        public override Packet Clone()
        {
            ReqOnPlayerBuyGuildBuff pkg = new ReqOnPlayerBuyGuildBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BuffID = BuffID;
            pkg.MapGuid = MapGuid;
            pkg.GuildGuid = GuildGuid;
            pkg.BuffType = BuffType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BuffID);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUInt(BuffType);
            }
            else
            {
                BuffID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                GuildGuid = oByteArray.ReadUInt64();
                BuffType = oByteArray.ReadUInt();
            }
        }
		public ReqOnPlayerBuyGuildBuff()
		{
			PacketID = 1299;
		}
    }

    /// <summary>
    ///  [请求类] 世界服通知地图夫，玩家购买行会buff 创建者
    /// </summary>
    [Package(1299)]
    public partial class ReqOnPlayerBuyGuildBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOnPlayerBuyGuildBuff();
        }
    }


    /// <summary>
    ///  [响应类]世界服通知地图夫，玩家购买行会buff
    /// </summary>
    public partial class ResOnPlayerBuyGuildBuff: Packet 
    {

        public override Packet Clone()
        {
            ResOnPlayerBuyGuildBuff pkg = new ResOnPlayerBuyGuildBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResOnPlayerBuyGuildBuff()
		{
			PacketID = 1300;
		}
    }

    /// <summary>
    ///  [响应类] 世界服通知地图夫，玩家购买行会buff 创建者
    /// </summary>
    [Package(1300)]
    public partial class ResOnPlayerBuyGuildBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOnPlayerBuyGuildBuff();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服发公告
    /// </summary>
    public partial class ReqNoticeWorldSendSystemMessage: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public string Param1;
        /// <summary>
        /// 
        /// </summary>
        public string Param2;
        /// <summary>
        /// 
        /// </summary>
        public string Param3;
        /// <summary>
        /// 
        /// </summary>
        public string Param4;
        /// <summary>
        /// 
        /// </summary>
        public string Param5;
        /// <summary>
        /// 
        /// </summary>
        public string Param6;
        /// <summary>
        /// 1.发给所有人，2.发给工会，3发给玩家
        /// </summary>
        public uint NoticeType;
        /// <summary>
        /// 玩家id/工会guid
        /// </summary>
        public ulong Guid;

        public override Packet Clone()
        {
            ReqNoticeWorldSendSystemMessage pkg = new ReqNoticeWorldSendSystemMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Param1 = Param1;
            pkg.Param2 = Param2;
            pkg.Param3 = Param3;
            pkg.Param4 = Param4;
            pkg.Param5 = Param5;
            pkg.Param6 = Param6;
            pkg.NoticeType = NoticeType;
            pkg.Guid = Guid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUTF(Param1);
                oByteArray.WriteUTF(Param2);
                oByteArray.WriteUTF(Param3);
                oByteArray.WriteUTF(Param4);
                oByteArray.WriteUTF(Param5);
                oByteArray.WriteUTF(Param6);
                oByteArray.WriteUInt(NoticeType);
                oByteArray.WriteUInt64(Guid);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Param1 = oByteArray.ReadUTF();
                Param2 = oByteArray.ReadUTF();
                Param3 = oByteArray.ReadUTF();
                Param4 = oByteArray.ReadUTF();
                Param5 = oByteArray.ReadUTF();
                Param6 = oByteArray.ReadUTF();
                NoticeType = oByteArray.ReadUInt();
                Guid = oByteArray.ReadUInt64();
            }
        }
		public ReqNoticeWorldSendSystemMessage()
		{
			PacketID = 1301;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服发公告 创建者
    /// </summary>
    [Package(1301)]
    public partial class ReqNoticeWorldSendSystemMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeWorldSendSystemMessage();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服发公告
    /// </summary>
    public partial class ResNoticeWorldSendSystemMessage: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeWorldSendSystemMessage pkg = new ResNoticeWorldSendSystemMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeWorldSendSystemMessage()
		{
			PacketID = 1302;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服发公告 创建者
    /// </summary>
    [Package(1302)]
    public partial class ResNoticeWorldSendSystemMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeWorldSendSystemMessage();
        }
    }


    /// <summary>
    ///  [请求类]行会buff信息
    /// </summary>
    public partial class ReqNoticeGuildBuffList: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeGuildBuffList pkg = new ReqNoticeGuildBuffList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeGuildBuffList()
		{
			PacketID = 1303;
		}
    }

    /// <summary>
    ///  [请求类] 行会buff信息 创建者
    /// </summary>
    [Package(1303)]
    public partial class ReqNoticeGuildBuffListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeGuildBuffList();
        }
    }


    /// <summary>
    ///  [响应类]行会buff信息
    /// </summary>
    public partial class ResNoticeGuildBuffList: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<GuildBuffInfo> BuffList = new List<GuildBuffInfo>();

        public override Packet Clone()
        {
            ResNoticeGuildBuffList pkg = new ResNoticeGuildBuffList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GuildBuffInfo item in BuffList)
            {
                pkg.BuffList.Add(item.Clone() as GuildBuffInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)BuffList.Count);
                for (int i = 0; i < BuffList.Count; i++)
                {
                    BuffList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int BuffListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BuffListCount; i++)
                {
                    GuildBuffInfo obj = new GuildBuffInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    BuffList.Add(obj);
                }
            }
        }
		public ResNoticeGuildBuffList()
		{
			PacketID = 1304;
		}
    }

    /// <summary>
    ///  [响应类] 行会buff信息 创建者
    /// </summary>
    [Package(1304)]
    public partial class ResNoticeGuildBuffListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeGuildBuffList();
        }
    }


    /// <summary>
    ///  [请求类]上架物品到拍卖行
    /// </summary>
    public partial class ReqAddItemToAuction: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 物品列表
        /// </summary>
        public List<uint> ItemVec = new List<uint>();

        public override Packet Clone()
        {
            ReqAddItemToAuction pkg = new ReqAddItemToAuction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            foreach (var item in ItemVec)
            {
                pkg.ItemVec.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                for (int i = 0; i < ItemVec.Count; i++)
                {
                      oByteArray.WriteUInt(ItemVec[i]);
                }
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                int ItemVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemVecCount; i++)
                {
                    ItemVec.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqAddItemToAuction()
		{
			PacketID = 1305;
		}
    }

    /// <summary>
    ///  [请求类] 上架物品到拍卖行 创建者
    /// </summary>
    [Package(1305)]
    public partial class ReqAddItemToAuctionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddItemToAuction();
        }
    }


    /// <summary>
    ///  [响应类]上架物品到拍卖行
    /// </summary>
    public partial class ResAddItemToAuction: Packet 
    {

        public override Packet Clone()
        {
            ResAddItemToAuction pkg = new ResAddItemToAuction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResAddItemToAuction()
		{
			PacketID = 1306;
		}
    }

    /// <summary>
    ///  [响应类] 上架物品到拍卖行 创建者
    /// </summary>
    [Package(1306)]
    public partial class ResAddItemToAuctionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddItemToAuction();
        }
    }


    /// <summary>
    ///  [请求类]装备重铸
    /// </summary>
    public partial class ReqRecastEquip: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqRecastEquip pkg = new ReqRecastEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqRecastEquip()
		{
			PacketID = 1307;
		}
    }

    /// <summary>
    ///  [请求类] 装备重铸 创建者
    /// </summary>
    [Package(1307)]
    public partial class ReqRecastEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRecastEquip();
        }
    }


    /// <summary>
    ///  [响应类]装备重铸
    /// </summary>
    public partial class ResRecastEquip: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResRecastEquip pkg = new ResRecastEquip();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResRecastEquip()
		{
			PacketID = 1308;
		}
    }

    /// <summary>
    ///  [响应类] 装备重铸 创建者
    /// </summary>
    [Package(1308)]
    public partial class ResRecastEquipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRecastEquip();
        }
    }


    /// <summary>
    ///  [请求类]开放下一层入口
    /// </summary>
    public partial class ReqAllowTransferToNextMap: Packet 
    {

        public override Packet Clone()
        {
            ReqAllowTransferToNextMap pkg = new ReqAllowTransferToNextMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAllowTransferToNextMap()
		{
			PacketID = 1309;
		}
    }

    /// <summary>
    ///  [请求类] 开放下一层入口 创建者
    /// </summary>
    [Package(1309)]
    public partial class ReqAllowTransferToNextMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAllowTransferToNextMap();
        }
    }


    /// <summary>
    ///  [响应类]开放下一层入口
    /// </summary>
    public partial class ResAllowTransferToNextMap: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint CurMapID;
        /// <summary>
        /// 
        /// </summary>
        public ulong CurMapGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint ActiveID;
        /// <summary>
        /// 
        /// </summary>
        public ulong GuildGuid;

        public override Packet Clone()
        {
            ResAllowTransferToNextMap pkg = new ResAllowTransferToNextMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurMapID = CurMapID;
            pkg.CurMapGuid = CurMapGuid;
            pkg.ActiveID = ActiveID;
            pkg.GuildGuid = GuildGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurMapID);
                oByteArray.WriteUInt64(CurMapGuid);
                oByteArray.WriteUInt(ActiveID);
                oByteArray.WriteUInt64(GuildGuid);
            }
            else
            {
                CurMapID = oByteArray.ReadUInt();
                CurMapGuid = oByteArray.ReadUInt64();
                ActiveID = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
            }
        }
		public ResAllowTransferToNextMap()
		{
			PacketID = 1310;
		}
    }

    /// <summary>
    ///  [响应类] 开放下一层入口 创建者
    /// </summary>
    [Package(1310)]
    public partial class ResAllowTransferToNextMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAllowTransferToNextMap();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服添加物品（非玩家）
    /// </summary>
    public partial class ReqNoticeAddPublicItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong OwnerID;
        /// <summary>
        /// 
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();

        public override Packet Clone()
        {
            ReqNoticeAddPublicItem pkg = new ReqNoticeAddPublicItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OwnerID = OwnerID;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(OwnerID);
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                OwnerID = oByteArray.ReadUInt64();
                ItemInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeAddPublicItem()
		{
			PacketID = 1311;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服添加物品（非玩家） 创建者
    /// </summary>
    [Package(1311)]
    public partial class ReqNoticeAddPublicItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeAddPublicItem();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服添加物品（非玩家）
    /// </summary>
    public partial class ResNoticeAddPublicItem: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeAddPublicItem pkg = new ResNoticeAddPublicItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeAddPublicItem()
		{
			PacketID = 1312;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服添加物品（非玩家） 创建者
    /// </summary>
    [Package(1312)]
    public partial class ResNoticeAddPublicItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeAddPublicItem();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服删除物品
    /// </summary>
    public partial class ReqNoticeDelPublicItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqNoticeDelPublicItem pkg = new ReqNoticeDelPublicItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqNoticeDelPublicItem()
		{
			PacketID = 1313;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服删除物品 创建者
    /// </summary>
    [Package(1313)]
    public partial class ReqNoticeDelPublicItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDelPublicItem();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服删除物品
    /// </summary>
    public partial class ResNoticeDelPublicItem: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeDelPublicItem pkg = new ResNoticeDelPublicItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeDelPublicItem()
		{
			PacketID = 1314;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服删除物品 创建者
    /// </summary>
    [Package(1314)]
    public partial class ResNoticeDelPublicItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDelPublicItem();
        }
    }


    /// <summary>
    ///  [请求类]初始化拍卖行物品
    /// </summary>
    public partial class ReqInitializeAuctionItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 
        /// </summary>
        public uint AuctionGuid;

        public override Packet Clone()
        {
            ReqInitializeAuctionItem pkg = new ReqInitializeAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AuctionType = AuctionType;
            pkg.AuctionGuid = AuctionGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt(AuctionGuid);
            }
            else
            {
                AuctionType = oByteArray.ReadUInt();
                AuctionGuid = oByteArray.ReadUInt();
            }
        }
		public ReqInitializeAuctionItem()
		{
			PacketID = 1315;
		}
    }

    /// <summary>
    ///  [请求类] 初始化拍卖行物品 创建者
    /// </summary>
    [Package(1315)]
    public partial class ReqInitializeAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitializeAuctionItem();
        }
    }


    /// <summary>
    ///  [响应类]初始化拍卖行物品
    /// </summary>
    public partial class ResInitializeAuctionItem: Packet 
    {
        /// <summary>
        /// 物品信息
        /// </summary>
        public GameItemInfo ItemInfo = new GameItemInfo();
        /// <summary>
        /// 拍卖行类型
        /// </summary>
        public uint AuctionType;
        /// <summary>
        /// 卖方ID，通常为玩家ID，行会拍卖，则表示行会ID
        /// </summary>
        public ulong OwnerID;
        /// <summary>
        /// 竞拍者ID
        /// </summary>
        public ulong BidderID;
        /// <summary>
        /// 一口价
        /// </summary>
        public int Price;
        /// <summary>
        /// 竞拍价
        /// </summary>
        public int AuctionPrice;
        /// <summary>
        /// 竞拍失效时间
        /// </summary>
        public int AuctionExpireTime;
        /// <summary>
        /// 对谁可见 0 对所有人可见
        /// </summary>
        public ulong VisiblePlayer;
        /// <summary>
        /// 竞拍加价最低万分比
        /// </summary>
        public int AuctionAddMoneyRate;
        /// <summary>
        /// 竞拍减少剩余竞拍时间
        /// </summary>
        public int AuctionReduceTime;
        /// <summary>
        /// 
        /// </summary>
        public int PriceType;

        public override Packet Clone()
        {
            ResInitializeAuctionItem pkg = new ResInitializeAuctionItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemInfo = ItemInfo.Clone() as GameItemInfo;
            pkg.AuctionType = AuctionType;
            pkg.OwnerID = OwnerID;
            pkg.BidderID = BidderID;
            pkg.Price = Price;
            pkg.AuctionPrice = AuctionPrice;
            pkg.AuctionExpireTime = AuctionExpireTime;
            pkg.VisiblePlayer = VisiblePlayer;
            pkg.AuctionAddMoneyRate = AuctionAddMoneyRate;
            pkg.AuctionReduceTime = AuctionReduceTime;
            pkg.PriceType = PriceType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(AuctionType);
                oByteArray.WriteUInt64(OwnerID);
                oByteArray.WriteUInt64(BidderID);
                oByteArray.WriteInt(Price);
                oByteArray.WriteInt(AuctionPrice);
                oByteArray.WriteInt(AuctionExpireTime);
                oByteArray.WriteUInt64(VisiblePlayer);
                oByteArray.WriteInt(AuctionAddMoneyRate);
                oByteArray.WriteInt(AuctionReduceTime);
                oByteArray.WriteInt(PriceType);
            }
            else
            {
                ItemInfo.Serializtion(oByteArray, bSerialize);
                AuctionType = oByteArray.ReadUInt();
                OwnerID = oByteArray.ReadUInt64();
                BidderID = oByteArray.ReadUInt64();
                Price = oByteArray.ReadInt();
                AuctionPrice = oByteArray.ReadInt();
                AuctionExpireTime = oByteArray.ReadInt();
                VisiblePlayer = oByteArray.ReadUInt64();
                AuctionAddMoneyRate = oByteArray.ReadInt();
                AuctionReduceTime = oByteArray.ReadInt();
                PriceType = oByteArray.ReadInt();
            }
        }
		public ResInitializeAuctionItem()
		{
			PacketID = 1316;
		}
    }

    /// <summary>
    ///  [响应类] 初始化拍卖行物品 创建者
    /// </summary>
    [Package(1316)]
    public partial class ResInitializeAuctionItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitializeAuctionItem();
        }
    }


    /// <summary>
    ///  [请求类]矿工雇佣
    /// </summary>
    public partial class ReqMinerHire: Packet 
    {
        /// <summary>
        /// 矿工配置id
        /// </summary>
        public uint MinerTmplID;
        /// <summary>
        /// 矿点id
        /// </summary>
        public ObjectGuidInfo MineGuid = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqMinerHire pkg = new ReqMinerHire();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MinerTmplID = MinerTmplID;
            pkg.MineGuid = MineGuid.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MinerTmplID);
                MineGuid.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MinerTmplID = oByteArray.ReadUInt();
                MineGuid.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqMinerHire()
		{
			PacketID = 1317;
		}
    }

    /// <summary>
    ///  [请求类] 矿工雇佣 创建者
    /// </summary>
    [Package(1317)]
    public partial class ReqMinerHireCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMinerHire();
        }
    }


    /// <summary>
    ///  [响应类]矿工雇佣
    /// </summary>
    public partial class ResMinerHire: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResMinerHire pkg = new ResMinerHire();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResMinerHire()
		{
			PacketID = 1318;
		}
    }

    /// <summary>
    ///  [响应类] 矿工雇佣 创建者
    /// </summary>
    [Package(1318)]
    public partial class ResMinerHireCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMinerHire();
        }
    }


    /// <summary>
    ///  [请求类]通知采矿信息
    /// </summary>
    public partial class ReqNoticeMinerInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeMinerInfo pkg = new ReqNoticeMinerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeMinerInfo()
		{
			PacketID = 1319;
		}
    }

    /// <summary>
    ///  [请求类] 通知采矿信息 创建者
    /// </summary>
    [Package(1319)]
    public partial class ReqNoticeMinerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeMinerInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知采矿信息
    /// </summary>
    public partial class ResNoticeMinerInfo: Packet 
    {
        /// <summary>
        /// 矿工剩余时间
        /// </summary>
        public uint MinerRestTime;
        /// <summary>
        /// 矿工配置id
        /// </summary>
        public uint MinerTmplID;
        /// <summary>
        /// 锄头剩余使用次数
        /// </summary>
        public uint HoeRestUseCount;
        /// <summary>
        /// 是否自动复活
        /// </summary>
        public byte AutoRevive;
        /// <summary>
        /// 自动复活等待时间
        /// </summary>
        public uint AutoReviveTime;
        /// <summary>
        /// 0.未雇佣 1.挖矿中 2.死亡 3.复活中 4.已到期
        /// </summary>
        public uint MinerStatus;
        /// <summary>
        /// 矿工位置
        /// </summary>
        public uint MinerMapX;
        /// <summary>
        /// 矿工位置
        /// </summary>
        public uint MinerMapY;
        /// <summary>
        /// 死亡矿工复活时间戳
        /// </summary>
        public uint ReviveTime;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 矿工名字
        /// </summary>
        public string MinerName;
        /// <summary>
        /// 矿点序号
        /// </summary>
        public uint MineIdx;
        /// <summary>
        /// 每日购买锄头数量
        /// </summary>
        public uint DailyBuyHoeTimes;
        /// <summary>
        /// 矿工guid
        /// </summary>
        public ObjectGuidInfo MinerGuid = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeMinerInfo pkg = new ResNoticeMinerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MinerRestTime = MinerRestTime;
            pkg.MinerTmplID = MinerTmplID;
            pkg.HoeRestUseCount = HoeRestUseCount;
            pkg.AutoRevive = AutoRevive;
            pkg.AutoReviveTime = AutoReviveTime;
            pkg.MinerStatus = MinerStatus;
            pkg.MinerMapX = MinerMapX;
            pkg.MinerMapY = MinerMapY;
            pkg.ReviveTime = ReviveTime;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.MinerName = MinerName;
            pkg.MineIdx = MineIdx;
            pkg.DailyBuyHoeTimes = DailyBuyHoeTimes;
            pkg.MinerGuid = MinerGuid.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MinerRestTime);
                oByteArray.WriteUInt(MinerTmplID);
                oByteArray.WriteUInt(HoeRestUseCount);
                oByteArray.WriteByte(AutoRevive);
                oByteArray.WriteUInt(AutoReviveTime);
                oByteArray.WriteUInt(MinerStatus);
                oByteArray.WriteUInt(MinerMapX);
                oByteArray.WriteUInt(MinerMapY);
                oByteArray.WriteUInt(ReviveTime);
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(MinerName);
                oByteArray.WriteUInt(MineIdx);
                oByteArray.WriteUInt(DailyBuyHoeTimes);
                MinerGuid.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MinerRestTime = oByteArray.ReadUInt();
                MinerTmplID = oByteArray.ReadUInt();
                HoeRestUseCount = oByteArray.ReadUInt();
                AutoRevive = oByteArray.ReadByte();
                AutoReviveTime = oByteArray.ReadUInt();
                MinerStatus = oByteArray.ReadUInt();
                MinerMapX = oByteArray.ReadUInt();
                MinerMapY = oByteArray.ReadUInt();
                ReviveTime = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
                MinerName = oByteArray.ReadUTF();
                MineIdx = oByteArray.ReadUInt();
                DailyBuyHoeTimes = oByteArray.ReadUInt();
                MinerGuid.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeMinerInfo()
		{
			PacketID = 1320;
		}
    }

    /// <summary>
    ///  [响应类] 通知采矿信息 创建者
    /// </summary>
    [Package(1320)]
    public partial class ResNoticeMinerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeMinerInfo();
        }
    }


    /// <summary>
    ///  [请求类]变更矿工自动复活信息
    /// </summary>
    public partial class ReqChangeMinerAutoReviveStatus: Packet 
    {
        /// <summary>
        /// 是否自动复活
        /// </summary>
        public byte AutoRevive;
        /// <summary>
        /// 自动复活等待时间
        /// </summary>
        public uint AutoReviveTime;

        public override Packet Clone()
        {
            ReqChangeMinerAutoReviveStatus pkg = new ReqChangeMinerAutoReviveStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AutoRevive = AutoRevive;
            pkg.AutoReviveTime = AutoReviveTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(AutoRevive);
                oByteArray.WriteUInt(AutoReviveTime);
            }
            else
            {
                AutoRevive = oByteArray.ReadByte();
                AutoReviveTime = oByteArray.ReadUInt();
            }
        }
		public ReqChangeMinerAutoReviveStatus()
		{
			PacketID = 1321;
		}
    }

    /// <summary>
    ///  [请求类] 变更矿工自动复活信息 创建者
    /// </summary>
    [Package(1321)]
    public partial class ReqChangeMinerAutoReviveStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeMinerAutoReviveStatus();
        }
    }


    /// <summary>
    ///  [响应类]变更矿工自动复活信息
    /// </summary>
    public partial class ResChangeMinerAutoReviveStatus: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResChangeMinerAutoReviveStatus pkg = new ResChangeMinerAutoReviveStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResChangeMinerAutoReviveStatus()
		{
			PacketID = 1322;
		}
    }

    /// <summary>
    ///  [响应类] 变更矿工自动复活信息 创建者
    /// </summary>
    [Package(1322)]
    public partial class ResChangeMinerAutoReviveStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeMinerAutoReviveStatus();
        }
    }


    /// <summary>
    ///  [请求类]挖矿结果
    /// </summary>
    public partial class ReqNoticeDigOreResult: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeDigOreResult pkg = new ReqNoticeDigOreResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeDigOreResult()
		{
			PacketID = 1323;
		}
    }

    /// <summary>
    ///  [请求类] 挖矿结果 创建者
    /// </summary>
    [Package(1323)]
    public partial class ReqNoticeDigOreResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDigOreResult();
        }
    }


    /// <summary>
    ///  [响应类]挖矿结果
    /// </summary>
    public partial class ResNoticeDigOreResult: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint OreTmplID;
        /// <summary>
        /// 
        /// </summary>
        public uint OreCount;
        /// <summary>
        /// 锄头剩余次数
        /// </summary>
        public uint RestHoeTimes;
        /// <summary>
        /// 
        /// </summary>
        public ulong OwnerGuid;
        /// <summary>
        /// 
        /// </summary>
        public ulong MinerGuid;

        public override Packet Clone()
        {
            ResNoticeDigOreResult pkg = new ResNoticeDigOreResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OreTmplID = OreTmplID;
            pkg.OreCount = OreCount;
            pkg.RestHoeTimes = RestHoeTimes;
            pkg.OwnerGuid = OwnerGuid;
            pkg.MinerGuid = MinerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(OreTmplID);
                oByteArray.WriteUInt(OreCount);
                oByteArray.WriteUInt(RestHoeTimes);
                oByteArray.WriteUInt64(OwnerGuid);
                oByteArray.WriteUInt64(MinerGuid);
            }
            else
            {
                OreTmplID = oByteArray.ReadUInt();
                OreCount = oByteArray.ReadUInt();
                RestHoeTimes = oByteArray.ReadUInt();
                OwnerGuid = oByteArray.ReadUInt64();
                MinerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResNoticeDigOreResult()
		{
			PacketID = 1324;
		}
    }

    /// <summary>
    ///  [响应类] 挖矿结果 创建者
    /// </summary>
    [Package(1324)]
    public partial class ResNoticeDigOreResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDigOreResult();
        }
    }


    /// <summary>
    ///  [请求类]在地图上刷新矿工
    /// </summary>
    public partial class ReqSpwanMiner: Packet 
    {
        /// <summary>
        /// 矿工所属玩家id
        /// </summary>
        public ulong OwnerGuid;
        /// <summary>
        /// 1.雇佣 2.复活
        /// </summary>
        public uint Type;
        /// <summary>
        /// 当前矿工id
        /// </summary>
        public ulong CurMinerGuid;
        /// <summary>
        /// 矿点唯一id
        /// </summary>
        public ulong MineGuid;
        /// <summary>
        /// 地图id
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MinerTmplID;
        /// <summary>
        /// 矿点序号
        /// </summary>
        public uint MineIdx;
        /// <summary>
        /// 矿工名称
        /// </summary>
        public string MinerName;

        public override Packet Clone()
        {
            ReqSpwanMiner pkg = new ReqSpwanMiner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OwnerGuid = OwnerGuid;
            pkg.Type = Type;
            pkg.CurMinerGuid = CurMinerGuid;
            pkg.MineGuid = MineGuid;
            pkg.MapID = MapID;
            pkg.MinerTmplID = MinerTmplID;
            pkg.MineIdx = MineIdx;
            pkg.MinerName = MinerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(OwnerGuid);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt64(CurMinerGuid);
                oByteArray.WriteUInt64(MineGuid);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MinerTmplID);
                oByteArray.WriteUInt(MineIdx);
                oByteArray.WriteUTF(MinerName);
            }
            else
            {
                OwnerGuid = oByteArray.ReadUInt64();
                Type = oByteArray.ReadUInt();
                CurMinerGuid = oByteArray.ReadUInt64();
                MineGuid = oByteArray.ReadUInt64();
                MapID = oByteArray.ReadUInt();
                MinerTmplID = oByteArray.ReadUInt();
                MineIdx = oByteArray.ReadUInt();
                MinerName = oByteArray.ReadUTF();
            }
        }
		public ReqSpwanMiner()
		{
			PacketID = 1325;
		}
    }

    /// <summary>
    ///  [请求类] 在地图上刷新矿工 创建者
    /// </summary>
    [Package(1325)]
    public partial class ReqSpwanMinerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpwanMiner();
        }
    }


    /// <summary>
    ///  [响应类]在地图上刷新矿工
    /// </summary>
    public partial class ResSpwanMiner: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public ulong OwnerGuid;
        /// <summary>
        /// 1.雇佣 2.复活
        /// </summary>
        public uint Type;
        /// <summary>
        /// 矿工guid
        /// </summary>
        public ulong MinerGuid;
        /// <summary>
        /// 矿工配置id
        /// </summary>
        public uint MinerTmplID;
        /// <summary>
        /// 矿点guid
        /// </summary>
        public uint MineGuid;
        /// <summary>
        /// 矿洞地图guid
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 矿工名称
        /// </summary>
        public string MinerName;
        /// <summary>
        /// 矿点序号
        /// </summary>
        public uint MineIdx;

        public override Packet Clone()
        {
            ResSpwanMiner pkg = new ResSpwanMiner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.OwnerGuid = OwnerGuid;
            pkg.Type = Type;
            pkg.MinerGuid = MinerGuid;
            pkg.MinerTmplID = MinerTmplID;
            pkg.MineGuid = MineGuid;
            pkg.MapGuid = MapGuid;
            pkg.MinerName = MinerName;
            pkg.MineIdx = MineIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt64(OwnerGuid);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt64(MinerGuid);
                oByteArray.WriteUInt(MinerTmplID);
                oByteArray.WriteUInt(MineGuid);
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteUTF(MinerName);
                oByteArray.WriteUInt(MineIdx);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                OwnerGuid = oByteArray.ReadUInt64();
                Type = oByteArray.ReadUInt();
                MinerGuid = oByteArray.ReadUInt64();
                MinerTmplID = oByteArray.ReadUInt();
                MineGuid = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
                MinerName = oByteArray.ReadUTF();
                MineIdx = oByteArray.ReadUInt();
            }
        }
		public ResSpwanMiner()
		{
			PacketID = 1326;
		}
    }

    /// <summary>
    ///  [响应类] 在地图上刷新矿工 创建者
    /// </summary>
    [Package(1326)]
    public partial class ResSpwanMinerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpwanMiner();
        }
    }


    /// <summary>
    ///  [请求类]变更矿工状态
    /// </summary>
    public partial class ReqChangeMapMinerState: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong MinerGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint Status;
        /// <summary>
        /// 
        /// </summary>
        public uint MineMapID;

        public override Packet Clone()
        {
            ReqChangeMapMinerState pkg = new ReqChangeMapMinerState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MinerGuid = MinerGuid;
            pkg.Status = Status;
            pkg.MineMapID = MineMapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(MinerGuid);
                oByteArray.WriteUInt(Status);
                oByteArray.WriteUInt(MineMapID);
            }
            else
            {
                MinerGuid = oByteArray.ReadUInt64();
                Status = oByteArray.ReadUInt();
                MineMapID = oByteArray.ReadUInt();
            }
        }
		public ReqChangeMapMinerState()
		{
			PacketID = 1327;
		}
    }

    /// <summary>
    ///  [请求类] 变更矿工状态 创建者
    /// </summary>
    [Package(1327)]
    public partial class ReqChangeMapMinerStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeMapMinerState();
        }
    }


    /// <summary>
    ///  [响应类]变更矿工状态
    /// </summary>
    public partial class ResChangeMapMinerState: Packet 
    {

        public override Packet Clone()
        {
            ResChangeMapMinerState pkg = new ResChangeMapMinerState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResChangeMapMinerState()
		{
			PacketID = 1328;
		}
    }

    /// <summary>
    ///  [响应类] 变更矿工状态 创建者
    /// </summary>
    [Package(1328)]
    public partial class ResChangeMapMinerStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeMapMinerState();
        }
    }


    /// <summary>
    ///  [请求类]一键提取矿工包裹
    /// </summary>
    public partial class ReqExtractMinerItem: Packet 
    {

        public override Packet Clone()
        {
            ReqExtractMinerItem pkg = new ReqExtractMinerItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqExtractMinerItem()
		{
			PacketID = 1329;
		}
    }

    /// <summary>
    ///  [请求类] 一键提取矿工包裹 创建者
    /// </summary>
    [Package(1329)]
    public partial class ReqExtractMinerItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqExtractMinerItem();
        }
    }


    /// <summary>
    ///  [响应类]一键提取矿工包裹
    /// </summary>
    public partial class ResExtractMinerItem: Packet 
    {
        /// <summary>
        /// 0-成功 1-背包无空格;
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResExtractMinerItem pkg = new ResExtractMinerItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResExtractMinerItem()
		{
			PacketID = 1330;
		}
    }

    /// <summary>
    ///  [响应类] 一键提取矿工包裹 创建者
    /// </summary>
    [Package(1330)]
    public partial class ResExtractMinerItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResExtractMinerItem();
        }
    }


    /// <summary>
    ///  [请求类]挖矿结束通过邮件发放矿石
    /// </summary>
    public partial class ReqMinerAddItemByMail: Packet 
    {
        /// <summary>
        /// 玩家唯一ID
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 形如："TID|Num,TID|Num"
        /// </summary>
        public string ItemInfo;

        public override Packet Clone()
        {
            ReqMinerAddItemByMail pkg = new ReqMinerAddItemByMail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.ItemInfo = ItemInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUTF(ItemInfo);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                ItemInfo = oByteArray.ReadUTF();
            }
        }
		public ReqMinerAddItemByMail()
		{
			PacketID = 1331;
		}
    }

    /// <summary>
    ///  [请求类] 挖矿结束通过邮件发放矿石 创建者
    /// </summary>
    [Package(1331)]
    public partial class ReqMinerAddItemByMailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMinerAddItemByMail();
        }
    }


    /// <summary>
    ///  [响应类]挖矿结束通过邮件发放矿石
    /// </summary>
    public partial class ResMinerAddItemByMail: Packet 
    {

        public override Packet Clone()
        {
            ResMinerAddItemByMail pkg = new ResMinerAddItemByMail();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResMinerAddItemByMail()
		{
			PacketID = 1332;
		}
    }

    /// <summary>
    ///  [响应类] 挖矿结束通过邮件发放矿石 创建者
    /// </summary>
    [Package(1332)]
    public partial class ResMinerAddItemByMailCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMinerAddItemByMail();
        }
    }


    /// <summary>
    ///  [请求类]新增矿工日志
    /// </summary>
    public partial class ReqNoticeAddMinerLog: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeAddMinerLog pkg = new ReqNoticeAddMinerLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeAddMinerLog()
		{
			PacketID = 1333;
		}
    }

    /// <summary>
    ///  [请求类] 新增矿工日志 创建者
    /// </summary>
    [Package(1333)]
    public partial class ReqNoticeAddMinerLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeAddMinerLog();
        }
    }


    /// <summary>
    ///  [响应类]新增矿工日志
    /// </summary>
    public partial class ResNoticeAddMinerLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public MinerLogInfo LogInfo = new MinerLogInfo();
        /// <summary>
        /// 玩家id
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeAddMinerLog pkg = new ResNoticeAddMinerLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LogInfo = LogInfo.Clone() as MinerLogInfo;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                LogInfo.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                LogInfo.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeAddMinerLog()
		{
			PacketID = 1334;
		}
    }

    /// <summary>
    ///  [响应类] 新增矿工日志 创建者
    /// </summary>
    [Package(1334)]
    public partial class ResNoticeAddMinerLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeAddMinerLog();
        }
    }


    /// <summary>
    ///  [请求类]矿工日志列表
    /// </summary>
    public partial class ReqGetMinerLogList: Packet 
    {

        public override Packet Clone()
        {
            ReqGetMinerLogList pkg = new ReqGetMinerLogList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetMinerLogList()
		{
			PacketID = 1335;
		}
    }

    /// <summary>
    ///  [请求类] 矿工日志列表 创建者
    /// </summary>
    [Package(1335)]
    public partial class ReqGetMinerLogListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetMinerLogList();
        }
    }


    /// <summary>
    ///  [响应类]矿工日志列表
    /// </summary>
    public partial class ResGetMinerLogList: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<MinerLogInfo> LogInfoList = new List<MinerLogInfo>();

        public override Packet Clone()
        {
            ResGetMinerLogList pkg = new ResGetMinerLogList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (MinerLogInfo item in LogInfoList)
            {
                pkg.LogInfoList.Add(item.Clone() as MinerLogInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)LogInfoList.Count);
                for (int i = 0; i < LogInfoList.Count; i++)
                {
                    LogInfoList[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int LogInfoListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < LogInfoListCount; i++)
                {
                    MinerLogInfo obj = new MinerLogInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    LogInfoList.Add(obj);
                }
            }
        }
		public ResGetMinerLogList()
		{
			PacketID = 1336;
		}
    }

    /// <summary>
    ///  [响应类] 矿工日志列表 创建者
    /// </summary>
    [Package(1336)]
    public partial class ResGetMinerLogListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetMinerLogList();
        }
    }


    /// <summary>
    ///  [请求类]矿工日志初始化
    /// </summary>
    public partial class ReqInitMinerLog: Packet 
    {

        public override Packet Clone()
        {
            ReqInitMinerLog pkg = new ReqInitMinerLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitMinerLog()
		{
			PacketID = 1337;
		}
    }

    /// <summary>
    ///  [请求类] 矿工日志初始化 创建者
    /// </summary>
    [Package(1337)]
    public partial class ReqInitMinerLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitMinerLog();
        }
    }


    /// <summary>
    ///  [响应类]矿工日志初始化
    /// </summary>
    public partial class ResInitMinerLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public MinerLogInfo LogInfo = new MinerLogInfo();
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResInitMinerLog pkg = new ResInitMinerLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LogInfo = LogInfo.Clone() as MinerLogInfo;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                LogInfo.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                LogInfo.Serializtion(oByteArray, bSerialize);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResInitMinerLog()
		{
			PacketID = 1338;
		}
    }

    /// <summary>
    ///  [响应类] 矿工日志初始化 创建者
    /// </summary>
    [Package(1338)]
    public partial class ResInitMinerLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitMinerLog();
        }
    }


    /// <summary>
    ///  [请求类]矿工信息初始化
    /// </summary>
    public partial class ReqInitMinerData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitMinerData pkg = new ReqInitMinerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitMinerData()
		{
			PacketID = 1339;
		}
    }

    /// <summary>
    ///  [请求类] 矿工信息初始化 创建者
    /// </summary>
    [Package(1339)]
    public partial class ReqInitMinerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitMinerData();
        }
    }


    /// <summary>
    ///  [响应类]矿工信息初始化
    /// </summary>
    public partial class ResInitMinerData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 矿工配置id
        /// </summary>
        public uint MinerTmplID;
        /// <summary>
        /// 矿工剩余时间
        /// </summary>
        public uint DurationTime;
        /// <summary>
        /// 矿工复活时间戳
        /// </summary>
        public uint ReviveTime;
        /// <summary>
        /// 矿工状态
        /// </summary>
        public uint State;
        /// <summary>
        /// 锄头配置id
        /// </summary>
        public uint HoeTmplID;
        /// <summary>
        /// 锄头剩余次数
        /// </summary>
        public uint HoeRestUseCount;
        /// <summary>
        /// 矿工是否自动复活
        /// </summary>
        public uint MinerAutoRevive;
        /// <summary>
        /// 矿工自动复活等待时间
        /// </summary>
        public uint MinerAutoReviveCostTime;
        /// <summary>
        /// 矿工名字
        /// </summary>
        public string MinerName;
        /// <summary>
        /// 矿点序号
        /// </summary>
        public uint MineIdx;
        /// <summary>
        /// 每日购买锄头数量
        /// </summary>
        public uint DailyBuyHoeTimes;
        /// <summary>
        /// 矿工背包信息
        /// </summary>
        public List<GameItemInfo> ItemVec = new List<GameItemInfo>();
        /// <summary>
        /// 所属玩家名字
        /// </summary>
        public string PlayerName;

        public override Packet Clone()
        {
            ResInitMinerData pkg = new ResInitMinerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.MinerTmplID = MinerTmplID;
            pkg.DurationTime = DurationTime;
            pkg.ReviveTime = ReviveTime;
            pkg.State = State;
            pkg.HoeTmplID = HoeTmplID;
            pkg.HoeRestUseCount = HoeRestUseCount;
            pkg.MinerAutoRevive = MinerAutoRevive;
            pkg.MinerAutoReviveCostTime = MinerAutoReviveCostTime;
            pkg.MinerName = MinerName;
            pkg.MineIdx = MineIdx;
            pkg.DailyBuyHoeTimes = DailyBuyHoeTimes;
            foreach (GameItemInfo item in ItemVec)
            {
                pkg.ItemVec.Add(item.Clone() as GameItemInfo);
            }
            pkg.PlayerName = PlayerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MinerTmplID);
                oByteArray.WriteUInt(DurationTime);
                oByteArray.WriteUInt(ReviveTime);
                oByteArray.WriteUInt(State);
                oByteArray.WriteUInt(HoeTmplID);
                oByteArray.WriteUInt(HoeRestUseCount);
                oByteArray.WriteUInt(MinerAutoRevive);
                oByteArray.WriteUInt(MinerAutoReviveCostTime);
                oByteArray.WriteUTF(MinerName);
                oByteArray.WriteUInt(MineIdx);
                oByteArray.WriteUInt(DailyBuyHoeTimes);
                oByteArray.WriteUShort((ushort)ItemVec.Count);
                for (int i = 0; i < ItemVec.Count; i++)
                {
                    ItemVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUTF(PlayerName);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                MinerTmplID = oByteArray.ReadUInt();
                DurationTime = oByteArray.ReadUInt();
                ReviveTime = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
                HoeTmplID = oByteArray.ReadUInt();
                HoeRestUseCount = oByteArray.ReadUInt();
                MinerAutoRevive = oByteArray.ReadUInt();
                MinerAutoReviveCostTime = oByteArray.ReadUInt();
                MinerName = oByteArray.ReadUTF();
                MineIdx = oByteArray.ReadUInt();
                DailyBuyHoeTimes = oByteArray.ReadUInt();
                int ItemVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemVecCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemVec.Add(obj);
                }
                PlayerName = oByteArray.ReadUTF();
            }
        }
		public ResInitMinerData()
		{
			PacketID = 1340;
		}
    }

    /// <summary>
    ///  [响应类] 矿工信息初始化 创建者
    /// </summary>
    [Package(1340)]
    public partial class ResInitMinerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitMinerData();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服新增矿工信息
    /// </summary>
    public partial class ReqAddMinerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 矿工配置id
        /// </summary>
        public uint MinerTmplID;
        /// <summary>
        /// 矿工剩余时间
        /// </summary>
        public uint DurationTime;
        /// <summary>
        /// 矿工复活时间戳
        /// </summary>
        public uint ReviveTime;
        /// <summary>
        /// 矿工状态
        /// </summary>
        public uint State;
        /// <summary>
        /// 锄头配置id
        /// </summary>
        public uint HoeTmplID;
        /// <summary>
        /// 锄头剩余次数
        /// </summary>
        public uint HoeRestUseCount;
        /// <summary>
        /// 矿工是否自动复活
        /// </summary>
        public uint MinerAutoRevive;
        /// <summary>
        /// 矿工自动复活等待时间
        /// </summary>
        public uint MinerAutoReviveCostTime;
        /// <summary>
        /// 矿工名称
        /// </summary>
        public string MinerName;
        /// <summary>
        /// 矿点序号
        /// </summary>
        public uint MineIdx;

        public override Packet Clone()
        {
            ReqAddMinerInfo pkg = new ReqAddMinerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.MinerTmplID = MinerTmplID;
            pkg.DurationTime = DurationTime;
            pkg.ReviveTime = ReviveTime;
            pkg.State = State;
            pkg.HoeTmplID = HoeTmplID;
            pkg.HoeRestUseCount = HoeRestUseCount;
            pkg.MinerAutoRevive = MinerAutoRevive;
            pkg.MinerAutoReviveCostTime = MinerAutoReviveCostTime;
            pkg.MinerName = MinerName;
            pkg.MineIdx = MineIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MinerTmplID);
                oByteArray.WriteUInt(DurationTime);
                oByteArray.WriteUInt(ReviveTime);
                oByteArray.WriteUInt(State);
                oByteArray.WriteUInt(HoeTmplID);
                oByteArray.WriteUInt(HoeRestUseCount);
                oByteArray.WriteUInt(MinerAutoRevive);
                oByteArray.WriteUInt(MinerAutoReviveCostTime);
                oByteArray.WriteUTF(MinerName);
                oByteArray.WriteUInt(MineIdx);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                MinerTmplID = oByteArray.ReadUInt();
                DurationTime = oByteArray.ReadUInt();
                ReviveTime = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
                HoeTmplID = oByteArray.ReadUInt();
                HoeRestUseCount = oByteArray.ReadUInt();
                MinerAutoRevive = oByteArray.ReadUInt();
                MinerAutoReviveCostTime = oByteArray.ReadUInt();
                MinerName = oByteArray.ReadUTF();
                MineIdx = oByteArray.ReadUInt();
            }
        }
		public ReqAddMinerInfo()
		{
			PacketID = 1341;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服新增矿工信息 创建者
    /// </summary>
    [Package(1341)]
    public partial class ReqAddMinerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddMinerInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服新增矿工信息
    /// </summary>
    public partial class ResAddMinerInfo: Packet 
    {

        public override Packet Clone()
        {
            ResAddMinerInfo pkg = new ResAddMinerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResAddMinerInfo()
		{
			PacketID = 1342;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服新增矿工信息 创建者
    /// </summary>
    [Package(1342)]
    public partial class ResAddMinerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddMinerInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知矿工背包物品数量
    /// </summary>
    public partial class ReqUpdateMinerBagCount: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMinerBagCount pkg = new ReqUpdateMinerBagCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMinerBagCount()
		{
			PacketID = 1343;
		}
    }

    /// <summary>
    ///  [请求类] 通知矿工背包物品数量 创建者
    /// </summary>
    [Package(1343)]
    public partial class ReqUpdateMinerBagCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMinerBagCount();
        }
    }


    /// <summary>
    ///  [响应类]通知矿工背包物品数量
    /// </summary>
    public partial class ResUpdateMinerBagCount: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Count;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo MinerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint MineMapID;

        public override Packet Clone()
        {
            ResUpdateMinerBagCount pkg = new ResUpdateMinerBagCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Count = Count;
            pkg.MinerID = MinerID.Clone() as ObjectGuidInfo;
            pkg.MineMapID = MineMapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Count);
                MinerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MineMapID);
            }
            else
            {
                Count = oByteArray.ReadUInt();
                MinerID.Serializtion(oByteArray, bSerialize);
                MineMapID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateMinerBagCount()
		{
			PacketID = 1344;
		}
    }

    /// <summary>
    ///  [响应类] 通知矿工背包物品数量 创建者
    /// </summary>
    [Package(1344)]
    public partial class ResUpdateMinerBagCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMinerBagCount();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服刷新物品额外属性
    /// </summary>
    public partial class ReqNoticeUpdateItemAdditionalAttributes: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdateItemAdditionalAttributes pkg = new ReqNoticeUpdateItemAdditionalAttributes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdateItemAdditionalAttributes()
		{
			PacketID = 1345;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服刷新物品额外属性 创建者
    /// </summary>
    [Package(1345)]
    public partial class ReqNoticeUpdateItemAdditionalAttributesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemAdditionalAttributes();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服刷新物品额外属性
    /// </summary>
    public partial class ResNoticeUpdateItemAdditionalAttributes: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public string Value;

        public override Packet Clone()
        {
            ResNoticeUpdateItemAdditionalAttributes pkg = new ResNoticeUpdateItemAdditionalAttributes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.Value = Value;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(Value);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                Value = oByteArray.ReadUTF();
            }
        }
		public ResNoticeUpdateItemAdditionalAttributes()
		{
			PacketID = 1346;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服刷新物品额外属性 创建者
    /// </summary>
    [Package(1346)]
    public partial class ResNoticeUpdateItemAdditionalAttributesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemAdditionalAttributes();
        }
    }


    /// <summary>
    ///  [请求类]更改装备来源信息
    /// </summary>
    public partial class ReqChangeItemSourceInfo: Packet 
    {
        /// <summary>
        /// 装备位置
        /// </summary>
        public uint Pos;

        public override Packet Clone()
        {
            ReqChangeItemSourceInfo pkg = new ReqChangeItemSourceInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Pos);
            }
            else
            {
                Pos = oByteArray.ReadUInt();
            }
        }
		public ReqChangeItemSourceInfo()
		{
			PacketID = 1347;
		}
    }

    /// <summary>
    ///  [请求类] 更改装备来源信息 创建者
    /// </summary>
    [Package(1347)]
    public partial class ReqChangeItemSourceInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeItemSourceInfo();
        }
    }


    /// <summary>
    ///  [响应类]更改装备来源信息
    /// </summary>
    public partial class ResChangeItemSourceInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 更改后的物品来源信息
        /// </summary>
        public SourceInfo ItemSourceInfo = new SourceInfo();
        /// <summary>
        /// 装备id
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResChangeItemSourceInfo pkg = new ResChangeItemSourceInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemSourceInfo = ItemSourceInfo.Clone() as SourceInfo;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                ItemSourceInfo.Serializtion(oByteArray, bSerialize);
                ItemID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ItemSourceInfo.Serializtion(oByteArray, bSerialize);
                ItemID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResChangeItemSourceInfo()
		{
			PacketID = 1348;
		}
    }

    /// <summary>
    ///  [响应类] 更改装备来源信息 创建者
    /// </summary>
    [Package(1348)]
    public partial class ResChangeItemSourceInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeItemSourceInfo();
        }
    }


    /// <summary>
    ///  [请求类]购买泡点buff
    /// </summary>
    public partial class ReqBuyBubbleBuff: Packet 
    {
        /// <summary>
        /// 0:免费泡点时间,1:泡点效率提升
        /// </summary>
        public sbyte BuffType;

        public override Packet Clone()
        {
            ReqBuyBubbleBuff pkg = new ReqBuyBubbleBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BuffType = BuffType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteSByte(BuffType);
            }
            else
            {
                BuffType = oByteArray.ReadSByte();
            }
        }
		public ReqBuyBubbleBuff()
		{
			PacketID = 1349;
		}
    }

    /// <summary>
    ///  [请求类] 购买泡点buff 创建者
    /// </summary>
    [Package(1349)]
    public partial class ReqBuyBubbleBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyBubbleBuff();
        }
    }


    /// <summary>
    ///  [响应类]购买泡点buff
    /// </summary>
    public partial class ResBuyBubbleBuff: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 0:免费泡点时间,1:泡点效率提升
        /// </summary>
        public sbyte BuffType;

        public override Packet Clone()
        {
            ResBuyBubbleBuff pkg = new ResBuyBubbleBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.BuffType = BuffType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteSByte(BuffType);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                BuffType = oByteArray.ReadSByte();
            }
        }
		public ResBuyBubbleBuff()
		{
			PacketID = 1350;
		}
    }

    /// <summary>
    ///  [响应类] 购买泡点buff 创建者
    /// </summary>
    [Package(1350)]
    public partial class ResBuyBubbleBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyBubbleBuff();
        }
    }


    /// <summary>
    ///  [请求类]获取会员特权礼包领取状态
    /// </summary>
    public partial class ReqMembershipAwardsState: Packet 
    {
        /// <summary>
        /// 会员奖励对应等级
        /// </summary>
        public int AwardsLv;

        public override Packet Clone()
        {
            ReqMembershipAwardsState pkg = new ReqMembershipAwardsState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AwardsLv = AwardsLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(AwardsLv);
            }
            else
            {
                AwardsLv = oByteArray.ReadInt();
            }
        }
		public ReqMembershipAwardsState()
		{
			PacketID = 1351;
		}
    }

    /// <summary>
    ///  [请求类] 获取会员特权礼包领取状态 创建者
    /// </summary>
    [Package(1351)]
    public partial class ReqMembershipAwardsStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMembershipAwardsState();
        }
    }


    /// <summary>
    ///  [响应类]获取会员特权礼包领取状态
    /// </summary>
    public partial class ResMembershipAwardsState: Packet 
    {
        /// <summary>
        /// 会员奖励对应等级
        /// </summary>
        public int AwardsLv;
        /// <summary>
        /// 0:未达成1:可领取2:已领取
        /// </summary>
        public sbyte State;

        public override Packet Clone()
        {
            ResMembershipAwardsState pkg = new ResMembershipAwardsState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AwardsLv = AwardsLv;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(AwardsLv);
                oByteArray.WriteSByte(State);
            }
            else
            {
                AwardsLv = oByteArray.ReadInt();
                State = oByteArray.ReadSByte();
            }
        }
		public ResMembershipAwardsState()
		{
			PacketID = 1352;
		}
    }

    /// <summary>
    ///  [响应类] 获取会员特权礼包领取状态 创建者
    /// </summary>
    [Package(1352)]
    public partial class ResMembershipAwardsStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMembershipAwardsState();
        }
    }


    /// <summary>
    ///  [请求类]领取会员礼包奖励
    /// </summary>
    public partial class ReqGetMembershipAwards: Packet 
    {
        /// <summary>
        /// 会员奖励对应等级
        /// </summary>
        public int AwardsLv;

        public override Packet Clone()
        {
            ReqGetMembershipAwards pkg = new ReqGetMembershipAwards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AwardsLv = AwardsLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(AwardsLv);
            }
            else
            {
                AwardsLv = oByteArray.ReadInt();
            }
        }
		public ReqGetMembershipAwards()
		{
			PacketID = 1353;
		}
    }

    /// <summary>
    ///  [请求类] 领取会员礼包奖励 创建者
    /// </summary>
    [Package(1353)]
    public partial class ReqGetMembershipAwardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetMembershipAwards();
        }
    }


    /// <summary>
    ///  [响应类]领取会员礼包奖励
    /// </summary>
    public partial class ResGetMembershipAwards: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResGetMembershipAwards pkg = new ResGetMembershipAwards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResGetMembershipAwards()
		{
			PacketID = 1354;
		}
    }

    /// <summary>
    ///  [响应类] 领取会员礼包奖励 创建者
    /// </summary>
    [Package(1354)]
    public partial class ResGetMembershipAwardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetMembershipAwards();
        }
    }


    /// <summary>
    ///  [请求类]购买会员(秒升会员)
    /// </summary>
    public partial class ReqBuyMembership: Packet 
    {

        public override Packet Clone()
        {
            ReqBuyMembership pkg = new ReqBuyMembership();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBuyMembership()
		{
			PacketID = 1355;
		}
    }

    /// <summary>
    ///  [请求类] 购买会员(秒升会员) 创建者
    /// </summary>
    [Package(1355)]
    public partial class ReqBuyMembershipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyMembership();
        }
    }


    /// <summary>
    ///  [响应类]购买会员(秒升会员)
    /// </summary>
    public partial class ResBuyMembership: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBuyMembership pkg = new ResBuyMembership();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBuyMembership()
		{
			PacketID = 1356;
		}
    }

    /// <summary>
    ///  [响应类] 购买会员(秒升会员) 创建者
    /// </summary>
    [Package(1356)]
    public partial class ResBuyMembershipCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyMembership();
        }
    }


    /// <summary>
    ///  [请求类]更新会员等级(购买和使用会员卡)
    /// </summary>
    public partial class ReqUpdateMembershipLv: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateMembershipLv pkg = new ReqUpdateMembershipLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateMembershipLv()
		{
			PacketID = 1357;
		}
    }

    /// <summary>
    ///  [请求类] 更新会员等级(购买和使用会员卡) 创建者
    /// </summary>
    [Package(1357)]
    public partial class ReqUpdateMembershipLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateMembershipLv();
        }
    }


    /// <summary>
    ///  [响应类]更新会员等级(购买和使用会员卡)
    /// </summary>
    public partial class ResUpdateMembershipLv: Packet 
    {
        /// <summary>
        /// 会员等级
        /// </summary>
        public int MembershipLv;

        public override Packet Clone()
        {
            ResUpdateMembershipLv pkg = new ResUpdateMembershipLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MembershipLv = MembershipLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(MembershipLv);
            }
            else
            {
                MembershipLv = oByteArray.ReadInt();
            }
        }
		public ResUpdateMembershipLv()
		{
			PacketID = 1358;
		}
    }

    /// <summary>
    ///  [响应类] 更新会员等级(购买和使用会员卡) 创建者
    /// </summary>
    [Package(1358)]
    public partial class ResUpdateMembershipLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateMembershipLv();
        }
    }


    /// <summary>
    ///  [请求类]溅射通知
    /// </summary>
    public partial class ReqNoticeSpread: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeSpread pkg = new ReqNoticeSpread();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeSpread()
		{
			PacketID = 1359;
		}
    }

    /// <summary>
    ///  [请求类] 溅射通知 创建者
    /// </summary>
    [Package(1359)]
    public partial class ReqNoticeSpreadCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSpread();
        }
    }


    /// <summary>
    ///  [响应类]溅射通知
    /// </summary>
    public partial class ResNoticeSpread: Packet 
    {
        /// <summary>
        /// 溅射起始对象
        /// </summary>
        public ObjectGuidInfo SrcObject = new ObjectGuidInfo();
        /// <summary>
        /// 溅射目标对象
        /// </summary>
        public ObjectGuidInfo DestObject = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint SkillID;

        public override Packet Clone()
        {
            ResNoticeSpread pkg = new ResNoticeSpread();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SrcObject = SrcObject.Clone() as ObjectGuidInfo;
            pkg.DestObject = DestObject.Clone() as ObjectGuidInfo;
            pkg.SkillID = SkillID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                SrcObject.Serializtion(oByteArray, bSerialize);
                DestObject.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(SkillID);
            }
            else
            {
                SrcObject.Serializtion(oByteArray, bSerialize);
                DestObject.Serializtion(oByteArray, bSerialize);
                SkillID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeSpread()
		{
			PacketID = 1360;
		}
    }

    /// <summary>
    ///  [响应类] 溅射通知 创建者
    /// </summary>
    [Package(1360)]
    public partial class ResNoticeSpreadCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSpread();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服根据规则刷新怪物
    /// </summary>
    public partial class ReqNoticeSpwanMonByTemplate: Packet 
    {
        /// <summary>
        /// 刷新规则
        /// </summary>
        public uint RefreshRule;
        /// <summary>
        /// 刷新地图
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqNoticeSpwanMonByTemplate pkg = new ReqNoticeSpwanMonByTemplate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RefreshRule = RefreshRule;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(RefreshRule);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                RefreshRule = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeSpwanMonByTemplate()
		{
			PacketID = 1361;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服根据规则刷新怪物 创建者
    /// </summary>
    [Package(1361)]
    public partial class ReqNoticeSpwanMonByTemplateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSpwanMonByTemplate();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服根据规则刷新怪物
    /// </summary>
    public partial class ResNoticeSpwanMonByTemplate: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeSpwanMonByTemplate pkg = new ResNoticeSpwanMonByTemplate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeSpwanMonByTemplate()
		{
			PacketID = 1362;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服根据规则刷新怪物 创建者
    /// </summary>
    [Package(1362)]
    public partial class ResNoticeSpwanMonByTemplateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSpwanMonByTemplate();
        }
    }


    /// <summary>
    ///  [请求类]发布悬赏任务
    /// </summary>
    public partial class ReqIssueOfferTask: Packet 
    {
        /// <summary>
        /// 7:龙血,8:掌灵,9:元力,10:暗器,11:龙魄
        /// </summary>
        public uint FunctionType;

        public override Packet Clone()
        {
            ReqIssueOfferTask pkg = new ReqIssueOfferTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FunctionType = FunctionType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(FunctionType);
            }
            else
            {
                FunctionType = oByteArray.ReadUInt();
            }
        }
		public ReqIssueOfferTask()
		{
			PacketID = 1363;
		}
    }

    /// <summary>
    ///  [请求类] 发布悬赏任务 创建者
    /// </summary>
    [Package(1363)]
    public partial class ReqIssueOfferTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqIssueOfferTask();
        }
    }


    /// <summary>
    ///  [响应类]发布悬赏任务
    /// </summary>
    public partial class ResIssueOfferTask: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResIssueOfferTask pkg = new ResIssueOfferTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResIssueOfferTask()
		{
			PacketID = 1364;
		}
    }

    /// <summary>
    ///  [响应类] 发布悬赏任务 创建者
    /// </summary>
    [Package(1364)]
    public partial class ResIssueOfferTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResIssueOfferTask();
        }
    }


    /// <summary>
    ///  [请求类]领取悬赏任务
    /// </summary>
    public partial class ReqReceiveOfferTask: Packet 
    {
        /// <summary>
        /// 任务唯一id
        /// </summary>
        public ObjectGuidInfo TaskGuid = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqReceiveOfferTask pkg = new ReqReceiveOfferTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskGuid = TaskGuid.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TaskGuid.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                TaskGuid.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqReceiveOfferTask()
		{
			PacketID = 1365;
		}
    }

    /// <summary>
    ///  [请求类] 领取悬赏任务 创建者
    /// </summary>
    [Package(1365)]
    public partial class ReqReceiveOfferTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReceiveOfferTask();
        }
    }


    /// <summary>
    ///  [响应类]领取悬赏任务
    /// </summary>
    public partial class ResReceiveOfferTask: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResReceiveOfferTask pkg = new ResReceiveOfferTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResReceiveOfferTask()
		{
			PacketID = 1366;
		}
    }

    /// <summary>
    ///  [响应类] 领取悬赏任务 创建者
    /// </summary>
    [Package(1366)]
    public partial class ResReceiveOfferTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReceiveOfferTask();
        }
    }


    /// <summary>
    ///  [请求类]获取悬赏任务列表
    /// </summary>
    public partial class ReqGetOfferTaskList: Packet 
    {
        /// <summary>
        /// 1.所有任务  2.本人发布的任务
        /// </summary>
        public uint Type;
        /// <summary>
        /// idx从0开始，包括BeginIdx
        /// </summary>
        public uint BeginIdx;
        /// <summary>
        /// idx从0开始，包括EndIdx
        /// </summary>
        public uint EndIdx;

        public override Packet Clone()
        {
            ReqGetOfferTaskList pkg = new ReqGetOfferTaskList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.BeginIdx = BeginIdx;
            pkg.EndIdx = EndIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(BeginIdx);
                oByteArray.WriteUInt(EndIdx);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                BeginIdx = oByteArray.ReadUInt();
                EndIdx = oByteArray.ReadUInt();
            }
        }
		public ReqGetOfferTaskList()
		{
			PacketID = 1367;
		}
    }

    /// <summary>
    ///  [请求类] 获取悬赏任务列表 创建者
    /// </summary>
    [Package(1367)]
    public partial class ReqGetOfferTaskListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetOfferTaskList();
        }
    }


    /// <summary>
    ///  [响应类]获取悬赏任务列表
    /// </summary>
    public partial class ResGetOfferTaskList: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<OfferTaskInfo> TaskList = new List<OfferTaskInfo>();
        /// <summary>
        /// 1.所有任务  2.本人发布的任务
        /// </summary>
        public uint Type;
        /// <summary>
        /// 任务总数
        /// </summary>
        public uint TotalNum;

        public override Packet Clone()
        {
            ResGetOfferTaskList pkg = new ResGetOfferTaskList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (OfferTaskInfo item in TaskList)
            {
                pkg.TaskList.Add(item.Clone() as OfferTaskInfo);
            }
            pkg.Type = Type;
            pkg.TotalNum = TotalNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)TaskList.Count);
                for (int i = 0; i < TaskList.Count; i++)
                {
                    TaskList[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(TotalNum);
            }
            else
            {
                int TaskListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TaskListCount; i++)
                {
                    OfferTaskInfo obj = new OfferTaskInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    TaskList.Add(obj);
                }
                Type = oByteArray.ReadUInt();
                TotalNum = oByteArray.ReadUInt();
            }
        }
		public ResGetOfferTaskList()
		{
			PacketID = 1368;
		}
    }

    /// <summary>
    ///  [响应类] 获取悬赏任务列表 创建者
    /// </summary>
    [Package(1368)]
    public partial class ResGetOfferTaskListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetOfferTaskList();
        }
    }


    /// <summary>
    ///  [请求类]刷新悬赏任务进度（接取方）
    /// </summary>
    public partial class ReqUpdateOfferTaskProgress: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateOfferTaskProgress pkg = new ReqUpdateOfferTaskProgress();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateOfferTaskProgress()
		{
			PacketID = 1369;
		}
    }

    /// <summary>
    ///  [请求类] 刷新悬赏任务进度（接取方） 创建者
    /// </summary>
    [Package(1369)]
    public partial class ReqUpdateOfferTaskProgressCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateOfferTaskProgress();
        }
    }


    /// <summary>
    ///  [响应类]刷新悬赏任务进度（接取方）
    /// </summary>
    public partial class ResUpdateOfferTaskProgress: Packet 
    {
        /// <summary>
        /// RewardOrderTemplate->TID
        /// </summary>
        public uint TaskTID;
        /// <summary>
        /// 当前击杀数
        /// </summary>
        public uint CurKillNum;
        /// <summary>
        /// 怪物组id
        /// </summary>
        public uint MonsterGroupID;
        /// <summary>
        /// 任务唯一id
        /// </summary>
        public ObjectGuidInfo TaskGuid = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResUpdateOfferTaskProgress pkg = new ResUpdateOfferTaskProgress();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskTID = TaskTID;
            pkg.CurKillNum = CurKillNum;
            pkg.MonsterGroupID = MonsterGroupID;
            pkg.TaskGuid = TaskGuid.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskTID);
                oByteArray.WriteUInt(CurKillNum);
                oByteArray.WriteUInt(MonsterGroupID);
                TaskGuid.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                TaskTID = oByteArray.ReadUInt();
                CurKillNum = oByteArray.ReadUInt();
                MonsterGroupID = oByteArray.ReadUInt();
                TaskGuid.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateOfferTaskProgress()
		{
			PacketID = 1370;
		}
    }

    /// <summary>
    ///  [响应类] 刷新悬赏任务进度（接取方） 创建者
    /// </summary>
    [Package(1370)]
    public partial class ResUpdateOfferTaskProgressCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateOfferTaskProgress();
        }
    }


    /// <summary>
    ///  [请求类]放弃悬赏任务
    /// </summary>
    public partial class ReqGiveUpOfferTask: Packet 
    {

        public override Packet Clone()
        {
            ReqGiveUpOfferTask pkg = new ReqGiveUpOfferTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGiveUpOfferTask()
		{
			PacketID = 1371;
		}
    }

    /// <summary>
    ///  [请求类] 放弃悬赏任务 创建者
    /// </summary>
    [Package(1371)]
    public partial class ReqGiveUpOfferTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGiveUpOfferTask();
        }
    }


    /// <summary>
    ///  [响应类]放弃悬赏任务
    /// </summary>
    public partial class ResGiveUpOfferTask: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResGiveUpOfferTask pkg = new ResGiveUpOfferTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResGiveUpOfferTask()
		{
			PacketID = 1372;
		}
    }

    /// <summary>
    ///  [响应类] 放弃悬赏任务 创建者
    /// </summary>
    [Package(1372)]
    public partial class ResGiveUpOfferTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGiveUpOfferTask();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服刷新任务信息
    /// </summary>
    public partial class ReqUpdateOfferTaskData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public OfferTaskInfo OfferTaskData = new OfferTaskInfo();

        public override Packet Clone()
        {
            ReqUpdateOfferTaskData pkg = new ReqUpdateOfferTaskData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OfferTaskData = OfferTaskData.Clone() as OfferTaskInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                OfferTaskData.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                OfferTaskData.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqUpdateOfferTaskData()
		{
			PacketID = 1373;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服刷新任务信息 创建者
    /// </summary>
    [Package(1373)]
    public partial class ReqUpdateOfferTaskDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateOfferTaskData();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服刷新任务信息
    /// </summary>
    public partial class ResUpdateOfferTaskData: Packet 
    {

        public override Packet Clone()
        {
            ResUpdateOfferTaskData pkg = new ResUpdateOfferTaskData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdateOfferTaskData()
		{
			PacketID = 1374;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服刷新任务信息 创建者
    /// </summary>
    [Package(1374)]
    public partial class ResUpdateOfferTaskDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateOfferTaskData();
        }
    }


    /// <summary>
    ///  [请求类]玩家悬赏任务信息初始化
    /// </summary>
    public partial class ReqInitPlayerOfferTaskData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerOfferTaskData pkg = new ReqInitPlayerOfferTaskData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerOfferTaskData()
		{
			PacketID = 1375;
		}
    }

    /// <summary>
    ///  [请求类] 玩家悬赏任务信息初始化 创建者
    /// </summary>
    [Package(1375)]
    public partial class ReqInitPlayerOfferTaskDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerOfferTaskData();
        }
    }


    /// <summary>
    ///  [响应类]玩家悬赏任务信息初始化
    /// </summary>
    public partial class ResInitPlayerOfferTaskData: Packet 
    {
        /// <summary>
        /// 任务唯一id
        /// </summary>
        public ulong TaskGuid;
        /// <summary>
        /// 怪物组id
        /// </summary>
        public uint MonsterGroupID;
        /// <summary>
        /// 当前击杀数量
        /// </summary>
        public uint CurKillNum;
        /// <summary>
        /// 任务配置id
        /// </summary>
        public uint TaskTmplID;
        /// <summary>
        /// 已发布次数（系统枚举|次数，...）
        /// </summary>
        public string PublisTimesInfo;

        public override Packet Clone()
        {
            ResInitPlayerOfferTaskData pkg = new ResInitPlayerOfferTaskData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskGuid = TaskGuid;
            pkg.MonsterGroupID = MonsterGroupID;
            pkg.CurKillNum = CurKillNum;
            pkg.TaskTmplID = TaskTmplID;
            pkg.PublisTimesInfo = PublisTimesInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(TaskGuid);
                oByteArray.WriteUInt(MonsterGroupID);
                oByteArray.WriteUInt(CurKillNum);
                oByteArray.WriteUInt(TaskTmplID);
                oByteArray.WriteUTF(PublisTimesInfo);
            }
            else
            {
                TaskGuid = oByteArray.ReadUInt64();
                MonsterGroupID = oByteArray.ReadUInt();
                CurKillNum = oByteArray.ReadUInt();
                TaskTmplID = oByteArray.ReadUInt();
                PublisTimesInfo = oByteArray.ReadUTF();
            }
        }
		public ResInitPlayerOfferTaskData()
		{
			PacketID = 1376;
		}
    }

    /// <summary>
    ///  [响应类] 玩家悬赏任务信息初始化 创建者
    /// </summary>
    [Package(1376)]
    public partial class ResInitPlayerOfferTaskDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerOfferTaskData();
        }
    }


    /// <summary>
    ///  [请求类]悬赏任务模块初始化，拉取任务列表
    /// </summary>
    public partial class ReqInitOfferTaskModule: Packet 
    {

        public override Packet Clone()
        {
            ReqInitOfferTaskModule pkg = new ReqInitOfferTaskModule();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitOfferTaskModule()
		{
			PacketID = 1377;
		}
    }

    /// <summary>
    ///  [请求类] 悬赏任务模块初始化，拉取任务列表 创建者
    /// </summary>
    [Package(1377)]
    public partial class ReqInitOfferTaskModuleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitOfferTaskModule();
        }
    }


    /// <summary>
    ///  [响应类]悬赏任务模块初始化，拉取任务列表
    /// </summary>
    public partial class ResInitOfferTaskModule: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo TaskGuid = new ObjectGuidInfo();
        /// <summary>
        /// 发布玩家id
        /// </summary>
        public ulong OwnerID;
        /// <summary>
        /// 发布玩家名字
        /// </summary>
        public string PublisherName;
        /// <summary>
        /// 任务配置id
        /// </summary>
        public uint TaskTmplID;
        /// <summary>
        /// 完成任务次数
        /// </summary>
        public uint FinishNum;
        /// <summary>
        /// 需求击杀怪物组id
        /// </summary>
        public uint MonsterGroupID;
        /// <summary>
        /// 奖励数量
        /// </summary>
        public uint RewardNum;
        /// <summary>
        /// 已领取奖励任务数量
        /// </summary>
        public uint TakeRewardNum;
        /// <summary>
        /// 领取玩家数量
        /// </summary>
        public uint ExecutePlayerNum;
        /// <summary>
        /// 发布时间
        /// </summary>
        public uint PublishTime;
        /// <summary>
        /// 发布任务数量
        /// </summary>
        public uint PublishNum;

        public override Packet Clone()
        {
            ResInitOfferTaskModule pkg = new ResInitOfferTaskModule();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskGuid = TaskGuid.Clone() as ObjectGuidInfo;
            pkg.OwnerID = OwnerID;
            pkg.PublisherName = PublisherName;
            pkg.TaskTmplID = TaskTmplID;
            pkg.FinishNum = FinishNum;
            pkg.MonsterGroupID = MonsterGroupID;
            pkg.RewardNum = RewardNum;
            pkg.TakeRewardNum = TakeRewardNum;
            pkg.ExecutePlayerNum = ExecutePlayerNum;
            pkg.PublishTime = PublishTime;
            pkg.PublishNum = PublishNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TaskGuid.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt64(OwnerID);
                oByteArray.WriteUTF(PublisherName);
                oByteArray.WriteUInt(TaskTmplID);
                oByteArray.WriteUInt(FinishNum);
                oByteArray.WriteUInt(MonsterGroupID);
                oByteArray.WriteUInt(RewardNum);
                oByteArray.WriteUInt(TakeRewardNum);
                oByteArray.WriteUInt(ExecutePlayerNum);
                oByteArray.WriteUInt(PublishTime);
                oByteArray.WriteUInt(PublishNum);
            }
            else
            {
                TaskGuid.Serializtion(oByteArray, bSerialize);
                OwnerID = oByteArray.ReadUInt64();
                PublisherName = oByteArray.ReadUTF();
                TaskTmplID = oByteArray.ReadUInt();
                FinishNum = oByteArray.ReadUInt();
                MonsterGroupID = oByteArray.ReadUInt();
                RewardNum = oByteArray.ReadUInt();
                TakeRewardNum = oByteArray.ReadUInt();
                ExecutePlayerNum = oByteArray.ReadUInt();
                PublishTime = oByteArray.ReadUInt();
                PublishNum = oByteArray.ReadUInt();
            }
        }
		public ResInitOfferTaskModule()
		{
			PacketID = 1378;
		}
    }

    /// <summary>
    ///  [响应类] 悬赏任务模块初始化，拉取任务列表 创建者
    /// </summary>
    [Package(1378)]
    public partial class ResInitOfferTaskModuleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitOfferTaskModule();
        }
    }


    /// <summary>
    ///  [请求类]存储客户端自定义信息
    /// </summary>
    public partial class ReqStoreClientDefinedInfo: Packet 
    {
        /// <summary>
        /// 客户端自解析数据
        /// </summary>
        public ClientData Data = new ClientData();

        public override Packet Clone()
        {
            ReqStoreClientDefinedInfo pkg = new ReqStoreClientDefinedInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as ClientData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqStoreClientDefinedInfo()
		{
			PacketID = 1379;
		}
    }

    /// <summary>
    ///  [请求类] 存储客户端自定义信息 创建者
    /// </summary>
    [Package(1379)]
    public partial class ReqStoreClientDefinedInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStoreClientDefinedInfo();
        }
    }


    /// <summary>
    ///  [响应类]存储客户端自定义信息
    /// </summary>
    public partial class ResStoreClientDefinedInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResStoreClientDefinedInfo pkg = new ResStoreClientDefinedInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResStoreClientDefinedInfo()
		{
			PacketID = 1380;
		}
    }

    /// <summary>
    ///  [响应类] 存储客户端自定义信息 创建者
    /// </summary>
    [Package(1380)]
    public partial class ResStoreClientDefinedInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStoreClientDefinedInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新世界服挑战Boss信息
    /// </summary>
    public partial class ReqUpdateWorldBossChallengeInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateWorldBossChallengeInfo pkg = new ReqUpdateWorldBossChallengeInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateWorldBossChallengeInfo()
		{
			PacketID = 1381;
		}
    }

    /// <summary>
    ///  [请求类] 更新世界服挑战Boss信息 创建者
    /// </summary>
    [Package(1381)]
    public partial class ReqUpdateWorldBossChallengeInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateWorldBossChallengeInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新世界服挑战Boss信息
    /// </summary>
    public partial class ResUpdateWorldBossChallengeInfo: Packet 
    {
        /// <summary>
        /// Boss的怪物ID
        /// </summary>
        public uint BossId;
        /// <summary>
        /// 
        /// </summary>
        public List<BossChallengeInfo> BossInfo = new List<BossChallengeInfo>();

        public override Packet Clone()
        {
            ResUpdateWorldBossChallengeInfo pkg = new ResUpdateWorldBossChallengeInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BossId = BossId;
            foreach (BossChallengeInfo item in BossInfo)
            {
                pkg.BossInfo.Add(item.Clone() as BossChallengeInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BossId);
                oByteArray.WriteUShort((ushort)BossInfo.Count);
                for (int i = 0; i < BossInfo.Count; i++)
                {
                    BossInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                BossId = oByteArray.ReadUInt();
                int BossInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BossInfoCount; i++)
                {
                    BossChallengeInfo obj = new BossChallengeInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    BossInfo.Add(obj);
                }
            }
        }
		public ResUpdateWorldBossChallengeInfo()
		{
			PacketID = 1382;
		}
    }

    /// <summary>
    ///  [响应类] 更新世界服挑战Boss信息 创建者
    /// </summary>
    [Package(1382)]
    public partial class ResUpdateWorldBossChallengeInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateWorldBossChallengeInfo();
        }
    }


    /// <summary>
    ///  [请求类]获取地图中某些Boss的数量
    /// </summary>
    public partial class ReqGetMapBossChallengeNum: Packet 
    {
        /// <summary>
        /// NewBossChallengeTemplate中的Type
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqGetMapBossChallengeNum pkg = new ReqGetMapBossChallengeNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqGetMapBossChallengeNum()
		{
			PacketID = 1383;
		}
    }

    /// <summary>
    ///  [请求类] 获取地图中某些Boss的数量 创建者
    /// </summary>
    [Package(1383)]
    public partial class ReqGetMapBossChallengeNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetMapBossChallengeNum();
        }
    }


    /// <summary>
    ///  [响应类]获取地图中某些Boss的数量
    /// </summary>
    public partial class ResGetMapBossChallengeNum: Packet 
    {
        /// <summary>
        /// NewBossChallengeTemplate中的Type
        /// </summary>
        public uint Type;
        /// <summary>
        /// 该Type下所有页签的信息
        /// </summary>
        public List<BossChallengeTabInfo> TabInfo = new List<BossChallengeTabInfo>();

        public override Packet Clone()
        {
            ResGetMapBossChallengeNum pkg = new ResGetMapBossChallengeNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            foreach (BossChallengeTabInfo item in TabInfo)
            {
                pkg.TabInfo.Add(item.Clone() as BossChallengeTabInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUShort((ushort)TabInfo.Count);
                for (int i = 0; i < TabInfo.Count; i++)
                {
                    TabInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Type = oByteArray.ReadUInt();
                int TabInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TabInfoCount; i++)
                {
                    BossChallengeTabInfo obj = new BossChallengeTabInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    TabInfo.Add(obj);
                }
            }
        }
		public ResGetMapBossChallengeNum()
		{
			PacketID = 1384;
		}
    }

    /// <summary>
    ///  [响应类] 获取地图中某些Boss的数量 创建者
    /// </summary>
    [Package(1384)]
    public partial class ResGetMapBossChallengeNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetMapBossChallengeNum();
        }
    }


    /// <summary>
    ///  [请求类]通知发布方任务信息（发布任务信息，发布次数，发布任务完成情况）
    /// </summary>
    public partial class ReqNoticePublisherTaskInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticePublisherTaskInfo pkg = new ReqNoticePublisherTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticePublisherTaskInfo()
		{
			PacketID = 1385;
		}
    }

    /// <summary>
    ///  [请求类] 通知发布方任务信息（发布任务信息，发布次数，发布任务完成情况） 创建者
    /// </summary>
    [Package(1385)]
    public partial class ReqNoticePublisherTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePublisherTaskInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知发布方任务信息（发布任务信息，发布次数，发布任务完成情况）
    /// </summary>
    public partial class ResNoticePublisherTaskInfo: Packet 
    {
        /// <summary>
        /// 已完成任务数量
        /// </summary>
        public uint CompletedNum;
        /// <summary>
        /// 7:龙血,8:掌灵,9:元力,10:暗器,11:龙魄
        /// </summary>
        public uint FunctionType;
        /// <summary>
        /// 已发布次数
        /// </summary>
        public uint Times;
        /// <summary>
        /// Rewardordertemplate->TID
        /// </summary>
        public uint TaskTID;
        /// <summary>
        /// 当前发布的任务的奖励数量
        /// </summary>
        public uint CurTaskRewardNum;

        public override Packet Clone()
        {
            ResNoticePublisherTaskInfo pkg = new ResNoticePublisherTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CompletedNum = CompletedNum;
            pkg.FunctionType = FunctionType;
            pkg.Times = Times;
            pkg.TaskTID = TaskTID;
            pkg.CurTaskRewardNum = CurTaskRewardNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CompletedNum);
                oByteArray.WriteUInt(FunctionType);
                oByteArray.WriteUInt(Times);
                oByteArray.WriteUInt(TaskTID);
                oByteArray.WriteUInt(CurTaskRewardNum);
            }
            else
            {
                CompletedNum = oByteArray.ReadUInt();
                FunctionType = oByteArray.ReadUInt();
                Times = oByteArray.ReadUInt();
                TaskTID = oByteArray.ReadUInt();
                CurTaskRewardNum = oByteArray.ReadUInt();
            }
        }
		public ResNoticePublisherTaskInfo()
		{
			PacketID = 1386;
		}
    }

    /// <summary>
    ///  [响应类] 通知发布方任务信息（发布任务信息，发布次数，发布任务完成情况） 创建者
    /// </summary>
    [Package(1386)]
    public partial class ResNoticePublisherTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePublisherTaskInfo();
        }
    }


    /// <summary>
    ///  [请求类]新击杀Boss传送
    /// </summary>
    public partial class ReqNewBossTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 传送ID;
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqNewBossTransfer pkg = new ReqNewBossTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqNewBossTransfer()
		{
			PacketID = 1387;
		}
    }

    /// <summary>
    ///  [请求类] 新击杀Boss传送 创建者
    /// </summary>
    [Package(1387)]
    public partial class ReqNewBossTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNewBossTransfer();
        }
    }


    /// <summary>
    ///  [响应类]新击杀Boss传送
    /// </summary>
    public partial class ResNewBossTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResNewBossTransfer pkg = new ResNewBossTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResNewBossTransfer()
		{
			PacketID = 1388;
		}
    }

    /// <summary>
    ///  [响应类] 新击杀Boss传送 创建者
    /// </summary>
    [Package(1388)]
    public partial class ResNewBossTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNewBossTransfer();
        }
    }


    /// <summary>
    ///  [请求类]清理周常历练值信息
    /// </summary>
    public partial class ReqUpdateLivenessWeeklyInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLivenessWeeklyInfo pkg = new ReqUpdateLivenessWeeklyInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLivenessWeeklyInfo()
		{
			PacketID = 1389;
		}
    }

    /// <summary>
    ///  [请求类] 清理周常历练值信息 创建者
    /// </summary>
    [Package(1389)]
    public partial class ReqUpdateLivenessWeeklyInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLivenessWeeklyInfo();
        }
    }


    /// <summary>
    ///  [响应类]清理周常历练值信息
    /// </summary>
    public partial class ResUpdateLivenessWeeklyInfo: Packet 
    {

        public override Packet Clone()
        {
            ResUpdateLivenessWeeklyInfo pkg = new ResUpdateLivenessWeeklyInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdateLivenessWeeklyInfo()
		{
			PacketID = 1390;
		}
    }

    /// <summary>
    ///  [响应类] 清理周常历练值信息 创建者
    /// </summary>
    [Package(1390)]
    public partial class ResUpdateLivenessWeeklyInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLivenessWeeklyInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新商城限购物品信息(礼包类分栏)
    /// </summary>
    public partial class ReqUpdateLimitTimeShopItem: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLimitTimeShopItem pkg = new ReqUpdateLimitTimeShopItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLimitTimeShopItem()
		{
			PacketID = 1391;
		}
    }

    /// <summary>
    ///  [请求类] 更新商城限购物品信息(礼包类分栏) 创建者
    /// </summary>
    [Package(1391)]
    public partial class ReqUpdateLimitTimeShopItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLimitTimeShopItem();
        }
    }


    /// <summary>
    ///  [响应类]更新商城限购物品信息(礼包类分栏)
    /// </summary>
    public partial class ResUpdateLimitTimeShopItem: Packet 
    {
        /// <summary>
        /// 限时物品信息
        /// </summary>
        public List<TimeLimitShopItem> ItemInfo = new List<TimeLimitShopItem>();
        /// <summary>
        /// 4基础礼包、5日常礼包、6免费礼包、7限时礼包
        /// </summary>
        public int Column;

        public override Packet Clone()
        {
            ResUpdateLimitTimeShopItem pkg = new ResUpdateLimitTimeShopItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (TimeLimitShopItem item in ItemInfo)
            {
                pkg.ItemInfo.Add(item.Clone() as TimeLimitShopItem);
            }
            pkg.Column = Column;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ItemInfo.Count);
                for (int i = 0; i < ItemInfo.Count; i++)
                {
                    ItemInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteInt(Column);
            }
            else
            {
                int ItemInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemInfoCount; i++)
                {
                    TimeLimitShopItem obj = new TimeLimitShopItem();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemInfo.Add(obj);
                }
                Column = oByteArray.ReadInt();
            }
        }
		public ResUpdateLimitTimeShopItem()
		{
			PacketID = 1392;
		}
    }

    /// <summary>
    ///  [响应类] 更新商城限购物品信息(礼包类分栏) 创建者
    /// </summary>
    [Package(1392)]
    public partial class ResUpdateLimitTimeShopItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLimitTimeShopItem();
        }
    }


    /// <summary>
    ///  [请求类]从市场购买道具
    /// </summary>
    public partial class ReqBuyItemFromMarket: Packet 
    {
        /// <summary>
        /// MarketTemplate中TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 数量
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ReqBuyItemFromMarket pkg = new ReqBuyItemFromMarket();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ReqBuyItemFromMarket()
		{
			PacketID = 1393;
		}
    }

    /// <summary>
    ///  [请求类] 从市场购买道具 创建者
    /// </summary>
    [Package(1393)]
    public partial class ReqBuyItemFromMarketCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyItemFromMarket();
        }
    }


    /// <summary>
    ///  [响应类]从市场购买道具
    /// </summary>
    public partial class ResBuyItemFromMarket: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// MarketTemplate中TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 购买兑换的物品ID
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 数量
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ResBuyItemFromMarket pkg = new ResBuyItemFromMarket();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            pkg.ItemID = ItemID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ResBuyItemFromMarket()
		{
			PacketID = 1394;
		}
    }

    /// <summary>
    ///  [响应类] 从市场购买道具 创建者
    /// </summary>
    [Package(1394)]
    public partial class ResBuyItemFromMarketCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyItemFromMarket();
        }
    }


    /// <summary>
    ///  [请求类]更新黑市集市道具信息
    /// </summary>
    public partial class ReqUpdateBRMarketItemInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateBRMarketItemInfo pkg = new ReqUpdateBRMarketItemInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateBRMarketItemInfo()
		{
			PacketID = 1395;
		}
    }

    /// <summary>
    ///  [请求类] 更新黑市集市道具信息 创建者
    /// </summary>
    [Package(1395)]
    public partial class ReqUpdateBRMarketItemInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateBRMarketItemInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新黑市集市道具信息
    /// </summary>
    public partial class ResUpdateBRMarketItemInfo: Packet 
    {
        /// <summary>
        /// 1:实用、2:黑市、3:集市、4:黑市(活跃币兑换)、5:黑市(定时活动道具兑换)、6:普通兑换
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public List<MarketItemInfo> ItemInfo = new List<MarketItemInfo>();
        /// <summary>
        /// 下次刷新时间
        /// </summary>
        public int RefreshTime;

        public override Packet Clone()
        {
            ResUpdateBRMarketItemInfo pkg = new ResUpdateBRMarketItemInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            foreach (MarketItemInfo item in ItemInfo)
            {
                pkg.ItemInfo.Add(item.Clone() as MarketItemInfo);
            }
            pkg.RefreshTime = RefreshTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUShort((ushort)ItemInfo.Count);
                for (int i = 0; i < ItemInfo.Count; i++)
                {
                    ItemInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteInt(RefreshTime);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                int ItemInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemInfoCount; i++)
                {
                    MarketItemInfo obj = new MarketItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemInfo.Add(obj);
                }
                RefreshTime = oByteArray.ReadInt();
            }
        }
		public ResUpdateBRMarketItemInfo()
		{
			PacketID = 1396;
		}
    }

    /// <summary>
    ///  [响应类] 更新黑市集市道具信息 创建者
    /// </summary>
    [Package(1396)]
    public partial class ResUpdateBRMarketItemInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateBRMarketItemInfo();
        }
    }


    /// <summary>
    ///  [请求类]玩家炼体
    /// </summary>
    public partial class ReqRefiningBody: Packet 
    {

        public override Packet Clone()
        {
            ReqRefiningBody pkg = new ReqRefiningBody();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRefiningBody()
		{
			PacketID = 1397;
		}
    }

    /// <summary>
    ///  [请求类] 玩家炼体 创建者
    /// </summary>
    [Package(1397)]
    public partial class ReqRefiningBodyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRefiningBody();
        }
    }


    /// <summary>
    ///  [响应类]玩家炼体
    /// </summary>
    public partial class ResRefiningBody: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResRefiningBody pkg = new ResRefiningBody();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResRefiningBody()
		{
			PacketID = 1398;
		}
    }

    /// <summary>
    ///  [响应类] 玩家炼体 创建者
    /// </summary>
    [Package(1398)]
    public partial class ResRefiningBodyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRefiningBody();
        }
    }


    /// <summary>
    ///  [请求类]物品回收设置
    /// </summary>
    public partial class ReqItemRecycleSet: Packet 
    {
        /// <summary>
        /// RecoveryTemplate[TID]
        /// </summary>
        public int RecoveryTID;
        /// <summary>
        /// 0:设置,1:取消
        /// </summary>
        public int Type;

        public override Packet Clone()
        {
            ReqItemRecycleSet pkg = new ReqItemRecycleSet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RecoveryTID = RecoveryTID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(RecoveryTID);
                oByteArray.WriteInt(Type);
            }
            else
            {
                RecoveryTID = oByteArray.ReadInt();
                Type = oByteArray.ReadInt();
            }
        }
		public ReqItemRecycleSet()
		{
			PacketID = 1399;
		}
    }

    /// <summary>
    ///  [请求类] 物品回收设置 创建者
    /// </summary>
    [Package(1399)]
    public partial class ReqItemRecycleSetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqItemRecycleSet();
        }
    }


    /// <summary>
    ///  [响应类]物品回收设置
    /// </summary>
    public partial class ResItemRecycleSet: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// RecoveryTemplate[TID]
        /// </summary>
        public int RecoveryTID;
        /// <summary>
        /// 0:设置,1:取消
        /// </summary>
        public int Type;

        public override Packet Clone()
        {
            ResItemRecycleSet pkg = new ResItemRecycleSet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.RecoveryTID = RecoveryTID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteInt(RecoveryTID);
                oByteArray.WriteInt(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                RecoveryTID = oByteArray.ReadInt();
                Type = oByteArray.ReadInt();
            }
        }
		public ResItemRecycleSet()
		{
			PacketID = 1400;
		}
    }

    /// <summary>
    ///  [响应类] 物品回收设置 创建者
    /// </summary>
    [Package(1400)]
    public partial class ResItemRecycleSetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResItemRecycleSet();
        }
    }


    /// <summary>
    ///  [请求类]物品回收
    /// </summary>
    public partial class ReqItemRecycle: Packet 
    {
        /// <summary>
        /// 0:普通背包1:宝藏仓库
        /// </summary>
        public int BagType;
        /// <summary>
        /// 物品列表
        /// </summary>
        public List<ObjectGuidInfo> ItemList = new List<ObjectGuidInfo>();
        /// <summary>
        /// 0:手动 1：自动回收
        /// </summary>
        public bool IsAuto;

        public override Packet Clone()
        {
            ReqItemRecycle pkg = new ReqItemRecycle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BagType = BagType;
            foreach (ObjectGuidInfo item in ItemList)
            {
                pkg.ItemList.Add(item.Clone() as ObjectGuidInfo);
            }
            pkg.IsAuto = IsAuto;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(BagType);
                for (int i = 0; i < ItemList.Count; i++)
                {
                      ItemList[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteBoolean(IsAuto);
            }
            else
            {
                BagType = oByteArray.ReadInt();
                int ItemListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemListCount; i++)
                {
                    ObjectGuidInfo obj = new ObjectGuidInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemList.Add(obj);
                }
                IsAuto = oByteArray.ReadBoolean();
            }
        }
		public ReqItemRecycle()
		{
			PacketID = 1401;
		}
    }

    /// <summary>
    ///  [请求类] 物品回收 创建者
    /// </summary>
    [Package(1401)]
    public partial class ReqItemRecycleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqItemRecycle();
        }
    }


    /// <summary>
    ///  [响应类]物品回收
    /// </summary>
    public partial class ResItemRecycle: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Result;
        /// <summary>
        /// 0:手动 1：自动回收
        /// </summary>
        public bool IsAuto;
        /// <summary>
        /// 回收获得货币
        /// </summary>
        public List<ProtocolPair> RecoveryMoney = new List<ProtocolPair>();

        public override Packet Clone()
        {
            ResItemRecycle pkg = new ResItemRecycle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.IsAuto = IsAuto;
            foreach (ProtocolPair item in RecoveryMoney)
            {
                pkg.RecoveryMoney.Add(item.Clone() as ProtocolPair);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
                oByteArray.WriteBoolean(IsAuto);
                oByteArray.WriteUShort((ushort)RecoveryMoney.Count);
                for (int i = 0; i < RecoveryMoney.Count; i++)
                {
                    RecoveryMoney[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadInt();
                IsAuto = oByteArray.ReadBoolean();
                int RecoveryMoneyCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RecoveryMoneyCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    RecoveryMoney.Add(obj);
                }
            }
        }
		public ResItemRecycle()
		{
			PacketID = 1402;
		}
    }

    /// <summary>
    ///  [响应类] 物品回收 创建者
    /// </summary>
    [Package(1402)]
    public partial class ResItemRecycleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResItemRecycle();
        }
    }


    /// <summary>
    ///  [请求类]道具自动回收设置
    /// </summary>
    public partial class ReqItemAutoRecycle: Packet 
    {
        /// <summary>
        /// 0:否,1:自动
        /// </summary>
        public bool Auto;

        public override Packet Clone()
        {
            ReqItemAutoRecycle pkg = new ReqItemAutoRecycle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Auto = Auto;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Auto);
            }
            else
            {
                Auto = oByteArray.ReadBoolean();
            }
        }
		public ReqItemAutoRecycle()
		{
			PacketID = 1403;
		}
    }

    /// <summary>
    ///  [请求类] 道具自动回收设置 创建者
    /// </summary>
    [Package(1403)]
    public partial class ReqItemAutoRecycleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqItemAutoRecycle();
        }
    }


    /// <summary>
    ///  [响应类]道具自动回收设置
    /// </summary>
    public partial class ResItemAutoRecycle: Packet 
    {
        /// <summary>
        /// 0:否,1:自动
        /// </summary>
        public bool Auto;

        public override Packet Clone()
        {
            ResItemAutoRecycle pkg = new ResItemAutoRecycle();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Auto = Auto;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Auto);
            }
            else
            {
                Auto = oByteArray.ReadBoolean();
            }
        }
		public ResItemAutoRecycle()
		{
			PacketID = 1404;
		}
    }

    /// <summary>
    ///  [响应类] 道具自动回收设置 创建者
    /// </summary>
    [Package(1404)]
    public partial class ResItemAutoRecycleCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResItemAutoRecycle();
        }
    }


    /// <summary>
    ///  [请求类]通知更新练功房时间
    /// </summary>
    public partial class ReqUpdateLianGongFangTime: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateLianGongFangTime pkg = new ReqUpdateLianGongFangTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateLianGongFangTime()
		{
			PacketID = 1405;
		}
    }

    /// <summary>
    ///  [请求类] 通知更新练功房时间 创建者
    /// </summary>
    [Package(1405)]
    public partial class ReqUpdateLianGongFangTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateLianGongFangTime();
        }
    }


    /// <summary>
    ///  [响应类]通知更新练功房时间
    /// </summary>
    public partial class ResUpdateLianGongFangTime: Packet 
    {
        /// <summary>
        /// 剩余时间
        /// </summary>
        public int Time;
        /// <summary>
        /// 练功房类型(1:普通练功房2:福利练功房3:超级练功房)
        /// </summary>
        public int Type;
        /// <summary>
        /// 每三秒**经验
        /// </summary>
        public int ExpEff;

        public override Packet Clone()
        {
            ResUpdateLianGongFangTime pkg = new ResUpdateLianGongFangTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Time = Time;
            pkg.Type = Type;
            pkg.ExpEff = ExpEff;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Time);
                oByteArray.WriteInt(Type);
                oByteArray.WriteInt(ExpEff);
            }
            else
            {
                Time = oByteArray.ReadInt();
                Type = oByteArray.ReadInt();
                ExpEff = oByteArray.ReadInt();
            }
        }
		public ResUpdateLianGongFangTime()
		{
			PacketID = 1406;
		}
    }

    /// <summary>
    ///  [响应类] 通知更新练功房时间 创建者
    /// </summary>
    [Package(1406)]
    public partial class ResUpdateLianGongFangTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateLianGongFangTime();
        }
    }


    /// <summary>
    ///  [请求类]进入练功房地图
    /// </summary>
    public partial class ReqLianGongFangTransfer: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqLianGongFangTransfer pkg = new ReqLianGongFangTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqLianGongFangTransfer()
		{
			PacketID = 1407;
		}
    }

    /// <summary>
    ///  [请求类] 进入练功房地图 创建者
    /// </summary>
    [Package(1407)]
    public partial class ReqLianGongFangTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLianGongFangTransfer();
        }
    }


    /// <summary>
    ///  [响应类]进入练功房地图
    /// </summary>
    public partial class ResLianGongFangTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResLianGongFangTransfer pkg = new ResLianGongFangTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResLianGongFangTransfer()
		{
			PacketID = 1408;
		}
    }

    /// <summary>
    ///  [响应类] 进入练功房地图 创建者
    /// </summary>
    [Package(1408)]
    public partial class ResLianGongFangTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLianGongFangTransfer();
        }
    }


    /// <summary>
    ///  [请求类]轮回装备升级
    /// </summary>
    public partial class ReqReincarnationEquipUpgrade: Packet 
    {
        /// <summary>
        /// 装备位置
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqReincarnationEquipUpgrade pkg = new ReqReincarnationEquipUpgrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqReincarnationEquipUpgrade()
		{
			PacketID = 1409;
		}
    }

    /// <summary>
    ///  [请求类] 轮回装备升级 创建者
    /// </summary>
    [Package(1409)]
    public partial class ReqReincarnationEquipUpgradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReincarnationEquipUpgrade();
        }
    }


    /// <summary>
    ///  [响应类]轮回装备升级
    /// </summary>
    public partial class ResReincarnationEquipUpgrade: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ResReincarnationEquipUpgrade pkg = new ResReincarnationEquipUpgrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ResReincarnationEquipUpgrade()
		{
			PacketID = 1410;
		}
    }

    /// <summary>
    ///  [响应类] 轮回装备升级 创建者
    /// </summary>
    [Package(1410)]
    public partial class ResReincarnationEquipUpgradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReincarnationEquipUpgrade();
        }
    }


    /// <summary>
    ///  [请求类]轮回装备分解
    /// </summary>
    public partial class ReqReincarnationEquipDecompose: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<int> ItemPos = new List<int>();

        public override Packet Clone()
        {
            ReqReincarnationEquipDecompose pkg = new ReqReincarnationEquipDecompose();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in ItemPos)
            {
                pkg.ItemPos.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < ItemPos.Count; i++)
                {
                      oByteArray.WriteInt(ItemPos[i]);
                }
            }
            else
            {
                int ItemPosCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemPosCount; i++)
                {
                    ItemPos.Add(oByteArray.ReadInt());
                }
            }
        }
		public ReqReincarnationEquipDecompose()
		{
			PacketID = 1411;
		}
    }

    /// <summary>
    ///  [请求类] 轮回装备分解 创建者
    /// </summary>
    [Package(1411)]
    public partial class ReqReincarnationEquipDecomposeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReincarnationEquipDecompose();
        }
    }


    /// <summary>
    ///  [响应类]轮回装备分解
    /// </summary>
    public partial class ResReincarnationEquipDecompose: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Result;

        public override Packet Clone()
        {
            ResReincarnationEquipDecompose pkg = new ResReincarnationEquipDecompose();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
            }
            else
            {
                Result = oByteArray.ReadInt();
            }
        }
		public ResReincarnationEquipDecompose()
		{
			PacketID = 1412;
		}
    }

    /// <summary>
    ///  [响应类] 轮回装备分解 创建者
    /// </summary>
    [Package(1412)]
    public partial class ResReincarnationEquipDecomposeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReincarnationEquipDecompose();
        }
    }


    /// <summary>
    ///  [请求类]更新每周刷新的日常活动
    /// </summary>
    public partial class ReqUpdateDailyActivity: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateDailyActivity pkg = new ReqUpdateDailyActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateDailyActivity()
		{
			PacketID = 1413;
		}
    }

    /// <summary>
    ///  [请求类] 更新每周刷新的日常活动 创建者
    /// </summary>
    [Package(1413)]
    public partial class ReqUpdateDailyActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateDailyActivity();
        }
    }


    /// <summary>
    ///  [响应类]更新每周刷新的日常活动
    /// </summary>
    public partial class ResUpdateDailyActivity: Packet 
    {
        /// <summary>
        /// 一周活动布局展示
        /// </summary>
        public List<DailyActivityInfo> ActivityInfo = new List<DailyActivityInfo>();

        public override Packet Clone()
        {
            ResUpdateDailyActivity pkg = new ResUpdateDailyActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (DailyActivityInfo item in ActivityInfo)
            {
                pkg.ActivityInfo.Add(item.Clone() as DailyActivityInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ActivityInfo.Count);
                for (int i = 0; i < ActivityInfo.Count; i++)
                {
                    ActivityInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ActivityInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ActivityInfoCount; i++)
                {
                    DailyActivityInfo obj = new DailyActivityInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ActivityInfo.Add(obj);
                }
            }
        }
		public ResUpdateDailyActivity()
		{
			PacketID = 1414;
		}
    }

    /// <summary>
    ///  [响应类] 更新每周刷新的日常活动 创建者
    /// </summary>
    [Package(1414)]
    public partial class ResUpdateDailyActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateDailyActivity();
        }
    }


    /// <summary>
    ///  [请求类]领取日常活动补签奖励
    /// </summary>
    public partial class ReqGetDailyActivitySignAwards: Packet 
    {
        /// <summary>
        /// DailyActivityShowTemplate[TID]
        /// </summary>
        public uint TID;
        /// <summary>
        /// 是否多倍
        /// </summary>
        public bool IsTimes;

        public override Packet Clone()
        {
            ReqGetDailyActivitySignAwards pkg = new ReqGetDailyActivitySignAwards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.IsTimes = IsTimes;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteBoolean(IsTimes);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                IsTimes = oByteArray.ReadBoolean();
            }
        }
		public ReqGetDailyActivitySignAwards()
		{
			PacketID = 1415;
		}
    }

    /// <summary>
    ///  [请求类] 领取日常活动补签奖励 创建者
    /// </summary>
    [Package(1415)]
    public partial class ReqGetDailyActivitySignAwardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetDailyActivitySignAwards();
        }
    }


    /// <summary>
    ///  [响应类]领取日常活动补签奖励
    /// </summary>
    public partial class ResGetDailyActivitySignAwards: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// DailyActivityShowTemplate[TID]
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResGetDailyActivitySignAwards pkg = new ResGetDailyActivitySignAwards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResGetDailyActivitySignAwards()
		{
			PacketID = 1416;
		}
    }

    /// <summary>
    ///  [响应类] 领取日常活动补签奖励 创建者
    /// </summary>
    [Package(1416)]
    public partial class ResGetDailyActivitySignAwardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetDailyActivitySignAwards();
        }
    }


    /// <summary>
    ///  [请求类]更新单个日常活动补签信息
    /// </summary>
    public partial class ReqUpdateDailyActivitySignState: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateDailyActivitySignState pkg = new ReqUpdateDailyActivitySignState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateDailyActivitySignState()
		{
			PacketID = 1417;
		}
    }

    /// <summary>
    ///  [请求类] 更新单个日常活动补签信息 创建者
    /// </summary>
    [Package(1417)]
    public partial class ReqUpdateDailyActivitySignStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateDailyActivitySignState();
        }
    }


    /// <summary>
    ///  [响应类]更新单个日常活动补签信息
    /// </summary>
    public partial class ResUpdateDailyActivitySignState: Packet 
    {
        /// <summary>
        /// DailyActivityShowTemplate[TID]
        /// </summary>
        public uint TID;
        /// <summary>
        /// 0:该活动不能补签;1:不能补签(活动未结束);2:参与了活动;3:可补签;4:已补签;
        /// </summary>
        public uint SignState;

        public override Packet Clone()
        {
            ResUpdateDailyActivitySignState pkg = new ResUpdateDailyActivitySignState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.SignState = SignState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(SignState);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                SignState = oByteArray.ReadUInt();
            }
        }
		public ResUpdateDailyActivitySignState()
		{
			PacketID = 1418;
		}
    }

    /// <summary>
    ///  [响应类] 更新单个日常活动补签信息 创建者
    /// </summary>
    [Package(1418)]
    public partial class ResUpdateDailyActivitySignStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateDailyActivitySignState();
        }
    }


    /// <summary>
    ///  [请求类]创建活动副本
    /// </summary>
    public partial class ReqCreateAssembleActivityDungeon: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint AssembleActivityType;
        /// <summary>
        /// 活动id
        /// </summary>
        public uint AssembleActivityID;
        /// <summary>
        /// 地图id
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 结束时间
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ReqCreateAssembleActivityDungeon pkg = new ReqCreateAssembleActivityDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AssembleActivityType = AssembleActivityType;
            pkg.AssembleActivityID = AssembleActivityID;
            pkg.MapID = MapID;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AssembleActivityType);
                oByteArray.WriteUInt(AssembleActivityID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                AssembleActivityType = oByteArray.ReadUInt();
                AssembleActivityID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ReqCreateAssembleActivityDungeon()
		{
			PacketID = 1419;
		}
    }

    /// <summary>
    ///  [请求类] 创建活动副本 创建者
    /// </summary>
    [Package(1419)]
    public partial class ReqCreateAssembleActivityDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateAssembleActivityDungeon();
        }
    }


    /// <summary>
    ///  [响应类]创建活动副本
    /// </summary>
    public partial class ResCreateAssembleActivityDungeon: Packet 
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint AssembleActivityType;
        /// <summary>
        /// 活动id
        /// </summary>
        public uint AssembleActivityID;
        /// <summary>
        /// 地图Guid
        /// </summary>
        public uint MapGuid;

        public override Packet Clone()
        {
            ResCreateAssembleActivityDungeon pkg = new ResCreateAssembleActivityDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AssembleActivityType = AssembleActivityType;
            pkg.AssembleActivityID = AssembleActivityID;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AssembleActivityType);
                oByteArray.WriteUInt(AssembleActivityID);
                oByteArray.WriteUInt(MapGuid);
            }
            else
            {
                AssembleActivityType = oByteArray.ReadUInt();
                AssembleActivityID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
            }
        }
		public ResCreateAssembleActivityDungeon()
		{
			PacketID = 1420;
		}
    }

    /// <summary>
    ///  [响应类] 创建活动副本 创建者
    /// </summary>
    [Package(1420)]
    public partial class ResCreateAssembleActivityDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateAssembleActivityDungeon();
        }
    }


    /// <summary>
    ///  [请求类]替换日常活动展示信息
    /// </summary>
    public partial class ReqReplaceDailyActivityShowInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqReplaceDailyActivityShowInfo pkg = new ReqReplaceDailyActivityShowInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqReplaceDailyActivityShowInfo()
		{
			PacketID = 1421;
		}
    }

    /// <summary>
    ///  [请求类] 替换日常活动展示信息 创建者
    /// </summary>
    [Package(1421)]
    public partial class ReqReplaceDailyActivityShowInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReplaceDailyActivityShowInfo();
        }
    }


    /// <summary>
    ///  [响应类]替换日常活动展示信息
    /// </summary>
    public partial class ResReplaceDailyActivityShowInfo: Packet 
    {
        /// <summary>
        /// DailyActivityShowTemplate[TID]
        /// </summary>
        public uint TID;
        /// <summary>
        /// 具体日常活动信息
        /// </summary>
        public DailyActivityInfo ActivityInfo = new DailyActivityInfo();

        public override Packet Clone()
        {
            ResReplaceDailyActivityShowInfo pkg = new ResReplaceDailyActivityShowInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.ActivityInfo = ActivityInfo.Clone() as DailyActivityInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                ActivityInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                ActivityInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResReplaceDailyActivityShowInfo()
		{
			PacketID = 1422;
		}
    }

    /// <summary>
    ///  [响应类] 替换日常活动展示信息 创建者
    /// </summary>
    [Package(1422)]
    public partial class ResReplaceDailyActivityShowInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReplaceDailyActivityShowInfo();
        }
    }


    /// <summary>
    ///  [请求类]获取世界前**名玩家境界平均等级
    /// </summary>
    public partial class ReqGetWorldStateMeanLv: Packet 
    {

        public override Packet Clone()
        {
            ReqGetWorldStateMeanLv pkg = new ReqGetWorldStateMeanLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetWorldStateMeanLv()
		{
			PacketID = 1423;
		}
    }

    /// <summary>
    ///  [请求类] 获取世界前**名玩家境界平均等级 创建者
    /// </summary>
    [Package(1423)]
    public partial class ReqGetWorldStateMeanLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetWorldStateMeanLv();
        }
    }


    /// <summary>
    ///  [响应类]获取世界前**名玩家境界平均等级
    /// </summary>
    public partial class ResGetWorldStateMeanLv: Packet 
    {
        /// <summary>
        /// 境界平均等级
        /// </summary>
        public uint Lv;

        public override Packet Clone()
        {
            ResGetWorldStateMeanLv pkg = new ResGetWorldStateMeanLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Lv = Lv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Lv);
            }
            else
            {
                Lv = oByteArray.ReadUInt();
            }
        }
		public ResGetWorldStateMeanLv()
		{
			PacketID = 1424;
		}
    }

    /// <summary>
    ///  [响应类] 获取世界前**名玩家境界平均等级 创建者
    /// </summary>
    [Package(1424)]
    public partial class ResGetWorldStateMeanLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetWorldStateMeanLv();
        }
    }


    /// <summary>
    ///  [请求类]通知答题奖励信息
    /// </summary>
    public partial class ReqNoticeDTAward: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeDTAward pkg = new ReqNoticeDTAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeDTAward()
		{
			PacketID = 1425;
		}
    }

    /// <summary>
    ///  [请求类] 通知答题奖励信息 创建者
    /// </summary>
    [Package(1425)]
    public partial class ReqNoticeDTAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDTAward();
        }
    }


    /// <summary>
    ///  [响应类]通知答题奖励信息
    /// </summary>
    public partial class ResNoticeDTAward: Packet 
    {
        /// <summary>
        /// 普通奖励
        /// </summary>
        public List<ItemInfo> NormalAward = new List<ItemInfo>();
        /// <summary>
        /// 惊喜奖励
        /// </summary>
        public List<ItemInfo> ExtraAward = new List<ItemInfo>();

        public override Packet Clone()
        {
            ResNoticeDTAward pkg = new ResNoticeDTAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ItemInfo item in NormalAward)
            {
                pkg.NormalAward.Add(item.Clone() as ItemInfo);
            }
            foreach (ItemInfo item in ExtraAward)
            {
                pkg.ExtraAward.Add(item.Clone() as ItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)NormalAward.Count);
                for (int i = 0; i < NormalAward.Count; i++)
                {
                    NormalAward[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)ExtraAward.Count);
                for (int i = 0; i < ExtraAward.Count; i++)
                {
                    ExtraAward[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int NormalAwardCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < NormalAwardCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    NormalAward.Add(obj);
                }
                int ExtraAwardCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ExtraAwardCount; i++)
                {
                    ItemInfo obj = new ItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    ExtraAward.Add(obj);
                }
            }
        }
		public ResNoticeDTAward()
		{
			PacketID = 1426;
		}
    }

    /// <summary>
    ///  [响应类] 通知答题奖励信息 创建者
    /// </summary>
    [Package(1426)]
    public partial class ResNoticeDTAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDTAward();
        }
    }


    /// <summary>
    ///  [请求类]活动传送
    /// </summary>
    public partial class ReqAssembleActivityTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint AssembleActivityType;
        /// <summary>
        /// 
        /// </summary>
        public uint AssembleActivityTID;

        public override Packet Clone()
        {
            ReqAssembleActivityTransfer pkg = new ReqAssembleActivityTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AssembleActivityType = AssembleActivityType;
            pkg.AssembleActivityTID = AssembleActivityTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AssembleActivityType);
                oByteArray.WriteUInt(AssembleActivityTID);
            }
            else
            {
                AssembleActivityType = oByteArray.ReadUInt();
                AssembleActivityTID = oByteArray.ReadUInt();
            }
        }
		public ReqAssembleActivityTransfer()
		{
			PacketID = 1427;
		}
    }

    /// <summary>
    ///  [请求类] 活动传送 创建者
    /// </summary>
    [Package(1427)]
    public partial class ReqAssembleActivityTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAssembleActivityTransfer();
        }
    }


    /// <summary>
    ///  [响应类]活动传送
    /// </summary>
    public partial class ResAssembleActivityTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResAssembleActivityTransfer pkg = new ResAssembleActivityTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResAssembleActivityTransfer()
		{
			PacketID = 1428;
		}
    }

    /// <summary>
    ///  [响应类] 活动传送 创建者
    /// </summary>
    [Package(1428)]
    public partial class ResAssembleActivityTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAssembleActivityTransfer();
        }
    }


    /// <summary>
    ///  [请求类]生成境界对应怪,此协议产生的怪物无法重生
    /// </summary>
    public partial class ReqSpawnStateMonster: Packet 
    {

        public override Packet Clone()
        {
            ReqSpawnStateMonster pkg = new ReqSpawnStateMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSpawnStateMonster()
		{
			PacketID = 1429;
		}
    }

    /// <summary>
    ///  [请求类] 生成境界对应怪,此协议产生的怪物无法重生 创建者
    /// </summary>
    [Package(1429)]
    public partial class ReqSpawnStateMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnStateMonster();
        }
    }


    /// <summary>
    ///  [响应类]生成境界对应怪,此协议产生的怪物无法重生
    /// </summary>
    public partial class ResSpawnStateMonster: Packet 
    {
        /// <summary>
        /// 怪物模板ID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// Y坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 唯一ID
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 是否初始化
        /// </summary>
        public bool IsInit;
        /// <summary>
        /// 是否统计
        /// </summary>
        public bool IsStat;

        public override Packet Clone()
        {
            ResSpawnStateMonster pkg = new ResSpawnStateMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.MapGuid = MapGuid;
            pkg.IsInit = IsInit;
            pkg.IsStat = IsStat;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteBoolean(IsInit);
                oByteArray.WriteBoolean(IsStat);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
                IsInit = oByteArray.ReadBoolean();
                IsStat = oByteArray.ReadBoolean();
            }
        }
		public ResSpawnStateMonster()
		{
			PacketID = 1430;
		}
    }

    /// <summary>
    ///  [响应类] 生成境界对应怪,此协议产生的怪物无法重生 创建者
    /// </summary>
    [Package(1430)]
    public partial class ResSpawnStateMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnStateMonster();
        }
    }


    /// <summary>
    ///  [请求类]通知怪物统计数量
    /// </summary>
    public partial class ReqNotieMonsterStatCount: Packet 
    {

        public override Packet Clone()
        {
            ReqNotieMonsterStatCount pkg = new ReqNotieMonsterStatCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNotieMonsterStatCount()
		{
			PacketID = 1431;
		}
    }

    /// <summary>
    ///  [请求类] 通知怪物统计数量 创建者
    /// </summary>
    [Package(1431)]
    public partial class ReqNotieMonsterStatCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNotieMonsterStatCount();
        }
    }


    /// <summary>
    ///  [响应类]通知怪物统计数量
    /// </summary>
    public partial class ResNotieMonsterStatCount: Packet 
    {
        /// <summary>
        /// 唯一ID
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 怪物数量
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ResNotieMonsterStatCount pkg = new ResNotieMonsterStatCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapGuid = MapGuid;
            pkg.MapID = MapID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                MapGuid = oByteArray.ReadUInt64();
                MapID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ResNotieMonsterStatCount()
		{
			PacketID = 1432;
		}
    }

    /// <summary>
    ///  [响应类] 通知怪物统计数量 创建者
    /// </summary>
    [Package(1432)]
    public partial class ResNotieMonsterStatCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNotieMonsterStatCount();
        }
    }


    /// <summary>
    ///  [请求类]刷新玩家跨服活动信息
    /// </summary>
    public partial class ReqNoticeSWPlayerInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeSWPlayerInfo pkg = new ReqNoticeSWPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeSWPlayerInfo()
		{
			PacketID = 1433;
		}
    }

    /// <summary>
    ///  [请求类] 刷新玩家跨服活动信息 创建者
    /// </summary>
    [Package(1433)]
    public partial class ReqNoticeSWPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSWPlayerInfo();
        }
    }


    /// <summary>
    ///  [响应类]刷新玩家跨服活动信息
    /// </summary>
    public partial class ResNoticeSWPlayerInfo: Packet 
    {
        /// <summary>
        /// 活动id
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 玩家活动积分
        /// </summary>
        public uint ActivityPoint;
        /// <summary>
        /// 玩家积分排名
        /// </summary>
        public uint ActivityRank;
        /// <summary>
        /// 阵营积分
        /// </summary>
        public uint CampPoint;
        /// <summary>
        /// 阵营排名
        /// </summary>
        public uint CampRank;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 玩家自定义数据
        /// </summary>
        public List<int> PlayerData = new List<int>();
        /// <summary>
        /// 玩家所属阵营
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 玩家名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 当前掠夺积分
        /// </summary>
        public uint CurRobPoint;
        /// <summary>
        /// 当天积分
        /// </summary>
        public uint CurDayPoint;
        /// <summary>
        /// 玩家活动数据
        /// </summary>
        public string Info;

        public override Packet Clone()
        {
            ResNoticeSWPlayerInfo pkg = new ResNoticeSWPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.ActivityPoint = ActivityPoint;
            pkg.ActivityRank = ActivityRank;
            pkg.CampPoint = CampPoint;
            pkg.CampRank = CampRank;
            pkg.PlayerGuid = PlayerGuid;
            foreach (var item in PlayerData)
            {
                pkg.PlayerData.Add(item);
            }
            pkg.Camp = Camp;
            pkg.Name = Name;
            pkg.CurRobPoint = CurRobPoint;
            pkg.CurDayPoint = CurDayPoint;
            pkg.Info = Info;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(ActivityPoint);
                oByteArray.WriteUInt(ActivityRank);
                oByteArray.WriteUInt(CampPoint);
                oByteArray.WriteUInt(CampRank);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUShort((ushort)PlayerData.Count);
                for (int i = 0; i < PlayerData.Count; i++)
                {
                    oByteArray.WriteInt(PlayerData[i]);
                }
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUTF(Name);
                oByteArray.WriteUInt(CurRobPoint);
                oByteArray.WriteUInt(CurDayPoint);
                oByteArray.WriteUTF(Info);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                ActivityPoint = oByteArray.ReadUInt();
                ActivityRank = oByteArray.ReadUInt();
                CampPoint = oByteArray.ReadUInt();
                CampRank = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
                int PlayerDataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerDataCount; i++)
                {
                    PlayerData.Add(oByteArray.ReadInt());
                }
                Camp = oByteArray.ReadUInt();
                Name = oByteArray.ReadUTF();
                CurRobPoint = oByteArray.ReadUInt();
                CurDayPoint = oByteArray.ReadUInt();
                Info = oByteArray.ReadUTF();
            }
        }
		public ResNoticeSWPlayerInfo()
		{
			PacketID = 1434;
		}
    }

    /// <summary>
    ///  [响应类] 刷新玩家跨服活动信息 创建者
    /// </summary>
    [Package(1434)]
    public partial class ResNoticeSWPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSWPlayerInfo();
        }
    }


    /// <summary>
    ///  [请求类]领取跨服活动奖励
    /// </summary>
    public partial class ReqServiceWarTakeAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 1.排名奖励
        /// </summary>
        public uint RewardType;
        /// <summary>
        /// 
        /// </summary>
        public uint Data1;

        public override Packet Clone()
        {
            ReqServiceWarTakeAward pkg = new ReqServiceWarTakeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.RewardType = RewardType;
            pkg.Data1 = Data1;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(RewardType);
                oByteArray.WriteUInt(Data1);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                RewardType = oByteArray.ReadUInt();
                Data1 = oByteArray.ReadUInt();
            }
        }
		public ReqServiceWarTakeAward()
		{
			PacketID = 1435;
		}
    }

    /// <summary>
    ///  [请求类] 领取跨服活动奖励 创建者
    /// </summary>
    [Package(1435)]
    public partial class ReqServiceWarTakeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqServiceWarTakeAward();
        }
    }


    /// <summary>
    ///  [响应类]领取跨服活动奖励
    /// </summary>
    public partial class ResServiceWarTakeAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResServiceWarTakeAward pkg = new ResServiceWarTakeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResServiceWarTakeAward()
		{
			PacketID = 1436;
		}
    }

    /// <summary>
    ///  [响应类] 领取跨服活动奖励 创建者
    /// </summary>
    [Package(1436)]
    public partial class ResServiceWarTakeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResServiceWarTakeAward();
        }
    }


    /// <summary>
    ///  [请求类]改变日常活动补签信息
    /// </summary>
    public partial class ReqChangeDailyActivitySign: Packet 
    {

        public override Packet Clone()
        {
            ReqChangeDailyActivitySign pkg = new ReqChangeDailyActivitySign();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqChangeDailyActivitySign()
		{
			PacketID = 1437;
		}
    }

    /// <summary>
    ///  [请求类] 改变日常活动补签信息 创建者
    /// </summary>
    [Package(1437)]
    public partial class ReqChangeDailyActivitySignCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeDailyActivitySign();
        }
    }


    /// <summary>
    ///  [响应类]改变日常活动补签信息
    /// </summary>
    public partial class ResChangeDailyActivitySign: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// DailyActivityShowTemplate[TID]
        /// </summary>
        public uint ShowID;
        /// <summary>
        /// enum DASState
        /// </summary>
        public uint State;

        public override Packet Clone()
        {
            ResChangeDailyActivitySign pkg = new ResChangeDailyActivitySign();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.ShowID = ShowID;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(ShowID);
                oByteArray.WriteUInt(State);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                ShowID = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
            }
        }
		public ResChangeDailyActivitySign()
		{
			PacketID = 1438;
		}
    }

    /// <summary>
    ///  [响应类] 改变日常活动补签信息 创建者
    /// </summary>
    [Package(1438)]
    public partial class ResChangeDailyActivitySignCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeDailyActivitySign();
        }
    }


    /// <summary>
    ///  [请求类]跨服活动最强王者商店购买
    /// </summary>
    public partial class ReqBuyZQWZShopItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ReqBuyZQWZShopItem pkg = new ReqBuyZQWZShopItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ReqBuyZQWZShopItem()
		{
			PacketID = 1439;
		}
    }

    /// <summary>
    ///  [请求类] 跨服活动最强王者商店购买 创建者
    /// </summary>
    [Package(1439)]
    public partial class ReqBuyZQWZShopItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyZQWZShopItem();
        }
    }


    /// <summary>
    ///  [响应类]跨服活动最强王者商店购买
    /// </summary>
    public partial class ResBuyZQWZShopItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ResBuyZQWZShopItem pkg = new ResBuyZQWZShopItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ResBuyZQWZShopItem()
		{
			PacketID = 1440;
		}
    }

    /// <summary>
    ///  [响应类] 跨服活动最强王者商店购买 创建者
    /// </summary>
    [Package(1440)]
    public partial class ResBuyZQWZShopItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyZQWZShopItem();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服地图服新增跨服服务器信息
    /// </summary>
    public partial class ReqNoticeAddServiceWarServerInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeAddServiceWarServerInfo pkg = new ReqNoticeAddServiceWarServerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeAddServiceWarServerInfo()
		{
			PacketID = 1441;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服地图服新增跨服服务器信息 创建者
    /// </summary>
    [Package(1441)]
    public partial class ReqNoticeAddServiceWarServerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeAddServiceWarServerInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服地图服新增跨服服务器信息
    /// </summary>
    public partial class ResNoticeAddServiceWarServerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string ServerIP;
        /// <summary>
        /// 
        /// </summary>
        public uint ServerPort;
        /// <summary>
        /// 
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 区服ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 
        /// </summary>
        public uint GroupID;

        public override Packet Clone()
        {
            ResNoticeAddServiceWarServerInfo pkg = new ResNoticeAddServiceWarServerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ServerIP = ServerIP;
            pkg.ServerPort = ServerPort;
            pkg.Camp = Camp;
            pkg.ActivityID = ActivityID;
            pkg.ServerID = ServerID;
            pkg.GroupID = GroupID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ServerIP);
                oByteArray.WriteUInt(ServerPort);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt(GroupID);
            }
            else
            {
                ServerIP = oByteArray.ReadUTF();
                ServerPort = oByteArray.ReadUInt();
                Camp = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                GroupID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeAddServiceWarServerInfo()
		{
			PacketID = 1442;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服地图服新增跨服服务器信息 创建者
    /// </summary>
    [Package(1442)]
    public partial class ResNoticeAddServiceWarServerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeAddServiceWarServerInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服活动阵营积分变更
    /// </summary>
    public partial class ReqOnSWCampPointChange: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public int ChangeValue;
        /// <summary>
        /// 
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 
        /// </summary>
        public uint GroupID;
        /// <summary>
        /// 
        /// </summary>
        public uint CurDayValue;

        public override Packet Clone()
        {
            ReqOnSWCampPointChange pkg = new ReqOnSWCampPointChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.ChangeValue = ChangeValue;
            pkg.Camp = Camp;
            pkg.GroupID = GroupID;
            pkg.CurDayValue = CurDayValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteInt(ChangeValue);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt(GroupID);
                oByteArray.WriteUInt(CurDayValue);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                ChangeValue = oByteArray.ReadInt();
                Camp = oByteArray.ReadUInt();
                GroupID = oByteArray.ReadUInt();
                CurDayValue = oByteArray.ReadUInt();
            }
        }
		public ReqOnSWCampPointChange()
		{
			PacketID = 1443;
		}
    }

    /// <summary>
    ///  [请求类] 跨服活动阵营积分变更 创建者
    /// </summary>
    [Package(1443)]
    public partial class ReqOnSWCampPointChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOnSWCampPointChange();
        }
    }


    /// <summary>
    ///  [响应类]跨服活动阵营积分变更
    /// </summary>
    public partial class ResOnSWCampPointChange: Packet 
    {

        public override Packet Clone()
        {
            ResOnSWCampPointChange pkg = new ResOnSWCampPointChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResOnSWCampPointChange()
		{
			PacketID = 1444;
		}
    }

    /// <summary>
    ///  [响应类] 跨服活动阵营积分变更 创建者
    /// </summary>
    [Package(1444)]
    public partial class ResOnSWCampPointChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOnSWCampPointChange();
        }
    }


    /// <summary>
    ///  [请求类]跨服战阵营积分信息
    /// </summary>
    public partial class ReqNoticeSWActivityCampInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 0:总积分排行 1：当天积分排行
        /// </summary>
        public uint RankType;

        public override Packet Clone()
        {
            ReqNoticeSWActivityCampInfo pkg = new ReqNoticeSWActivityCampInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.RankType = RankType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(RankType);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                RankType = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeSWActivityCampInfo()
		{
			PacketID = 1445;
		}
    }

    /// <summary>
    ///  [请求类] 跨服战阵营积分信息 创建者
    /// </summary>
    [Package(1445)]
    public partial class ReqNoticeSWActivityCampInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSWActivityCampInfo();
        }
    }


    /// <summary>
    ///  [响应类]跨服战阵营积分信息
    /// </summary>
    public partial class ResNoticeSWActivityCampInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ServiceWarCampInfo> CampsInfo = new List<ServiceWarCampInfo>();
        /// <summary>
        /// 0:总积分排行 1：当天积分排行
        /// </summary>
        public uint RankType;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ResNoticeSWActivityCampInfo pkg = new ResNoticeSWActivityCampInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ServiceWarCampInfo item in CampsInfo)
            {
                pkg.CampsInfo.Add(item.Clone() as ServiceWarCampInfo);
            }
            pkg.RankType = RankType;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)CampsInfo.Count);
                for (int i = 0; i < CampsInfo.Count; i++)
                {
                    CampsInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(RankType);
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                int CampsInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < CampsInfoCount; i++)
                {
                    ServiceWarCampInfo obj = new ServiceWarCampInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    CampsInfo.Add(obj);
                }
                RankType = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeSWActivityCampInfo()
		{
			PacketID = 1446;
		}
    }

    /// <summary>
    ///  [响应类] 跨服战阵营积分信息 创建者
    /// </summary>
    [Package(1446)]
    public partial class ResNoticeSWActivityCampInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSWActivityCampInfo();
        }
    }


    /// <summary>
    ///  [请求类]击杀其他玩家
    /// </summary>
    public partial class ReqNoticeKillOther: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeKillOther pkg = new ReqNoticeKillOther();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeKillOther()
		{
			PacketID = 1447;
		}
    }

    /// <summary>
    ///  [请求类] 击杀其他玩家 创建者
    /// </summary>
    [Package(1447)]
    public partial class ReqNoticeKillOtherCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeKillOther();
        }
    }


    /// <summary>
    ///  [响应类]击杀其他玩家
    /// </summary>
    public partial class ResNoticeKillOther: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerID;
        /// <summary>
        /// 
        /// </summary>
        public string NickName;

        public override Packet Clone()
        {
            ResNoticeKillOther pkg = new ResNoticeKillOther();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID;
            pkg.NickName = NickName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerID);
                oByteArray.WriteUTF(NickName);
            }
            else
            {
                PlayerID = oByteArray.ReadUInt64();
                NickName = oByteArray.ReadUTF();
            }
        }
		public ResNoticeKillOther()
		{
			PacketID = 1448;
		}
    }

    /// <summary>
    ///  [响应类] 击杀其他玩家 创建者
    /// </summary>
    [Package(1448)]
    public partial class ResNoticeKillOtherCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeKillOther();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服刷新服务器境界等级
    /// </summary>
    public partial class ReqNoticeServerStateLevel: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeServerStateLevel pkg = new ReqNoticeServerStateLevel();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeServerStateLevel()
		{
			PacketID = 1449;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服刷新服务器境界等级 创建者
    /// </summary>
    [Package(1449)]
    public partial class ReqNoticeServerStateLevelCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeServerStateLevel();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服刷新服务器境界等级
    /// </summary>
    public partial class ResNoticeServerStateLevel: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint StateLevel;

        public override Packet Clone()
        {
            ResNoticeServerStateLevel pkg = new ResNoticeServerStateLevel();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.StateLevel = StateLevel;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(StateLevel);
            }
            else
            {
                StateLevel = oByteArray.ReadUInt();
            }
        }
		public ResNoticeServerStateLevel()
		{
			PacketID = 1450;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服刷新服务器境界等级 创建者
    /// </summary>
    [Package(1450)]
    public partial class ResNoticeServerStateLevelCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeServerStateLevel();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服刷新怪物模板
    /// </summary>
    public partial class ReqReviveAllMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqReviveAllMonster pkg = new ReqReviveAllMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqReviveAllMonster()
		{
			PacketID = 1451;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服刷新怪物模板 创建者
    /// </summary>
    [Package(1451)]
    public partial class ReqReviveAllMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReviveAllMonster();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服刷新怪物模板
    /// </summary>
    public partial class ResReviveAllMonster: Packet 
    {

        public override Packet Clone()
        {
            ResReviveAllMonster pkg = new ResReviveAllMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResReviveAllMonster()
		{
			PacketID = 1452;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服刷新怪物模板 创建者
    /// </summary>
    [Package(1452)]
    public partial class ResReviveAllMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReviveAllMonster();
        }
    }


    /// <summary>
    ///  [请求类]通知物品掉落统计
    /// </summary>
    public partial class ReqItemDropStatistics: Packet 
    {

        public override Packet Clone()
        {
            ReqItemDropStatistics pkg = new ReqItemDropStatistics();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqItemDropStatistics()
		{
			PacketID = 1453;
		}
    }

    /// <summary>
    ///  [请求类] 通知物品掉落统计 创建者
    /// </summary>
    [Package(1453)]
    public partial class ReqItemDropStatisticsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqItemDropStatistics();
        }
    }


    /// <summary>
    ///  [响应类]通知物品掉落统计
    /// </summary>
    public partial class ResItemDropStatistics: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ItemId;

        public override Packet Clone()
        {
            ResItemDropStatistics pkg = new ResItemDropStatistics();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemId = ItemId;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemId);
            }
            else
            {
                ItemId = oByteArray.ReadUInt();
            }
        }
		public ResItemDropStatistics()
		{
			PacketID = 1454;
		}
    }

    /// <summary>
    ///  [响应类] 通知物品掉落统计 创建者
    /// </summary>
    [Package(1454)]
    public partial class ResItemDropStatisticsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResItemDropStatistics();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家装备首次掉落
    /// </summary>
    public partial class ReqNoticeEquipFirstDrop: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeEquipFirstDrop pkg = new ReqNoticeEquipFirstDrop();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeEquipFirstDrop()
		{
			PacketID = 1455;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家装备首次掉落 创建者
    /// </summary>
    [Package(1455)]
    public partial class ReqNoticeEquipFirstDropCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeEquipFirstDrop();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家装备首次掉落
    /// </summary>
    public partial class ResNoticeEquipFirstDrop: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResNoticeEquipFirstDrop pkg = new ResNoticeEquipFirstDrop();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeEquipFirstDrop()
		{
			PacketID = 1456;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家装备首次掉落 创建者
    /// </summary>
    [Package(1456)]
    public partial class ResNoticeEquipFirstDropCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeEquipFirstDrop();
        }
    }


    /// <summary>
    ///  [请求类]开启仓库页
    /// </summary>
    public partial class ReqOpenStoreHousePage: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte PageIdx;

        public override Packet Clone()
        {
            ReqOpenStoreHousePage pkg = new ReqOpenStoreHousePage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PageIdx = PageIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(PageIdx);
            }
            else
            {
                PageIdx = oByteArray.ReadByte();
            }
        }
		public ReqOpenStoreHousePage()
		{
			PacketID = 1457;
		}
    }

    /// <summary>
    ///  [请求类] 开启仓库页 创建者
    /// </summary>
    [Package(1457)]
    public partial class ReqOpenStoreHousePageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOpenStoreHousePage();
        }
    }


    /// <summary>
    ///  [响应类]开启仓库页
    /// </summary>
    public partial class ResOpenStoreHousePage: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public byte PageIdx;

        public override Packet Clone()
        {
            ResOpenStoreHousePage pkg = new ResOpenStoreHousePage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PageIdx = PageIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(PageIdx);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                PageIdx = oByteArray.ReadByte();
            }
        }
		public ResOpenStoreHousePage()
		{
			PacketID = 1458;
		}
    }

    /// <summary>
    ///  [响应类] 开启仓库页 创建者
    /// </summary>
    [Package(1458)]
    public partial class ResOpenStoreHousePageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOpenStoreHousePage();
        }
    }


    /// <summary>
    ///  [请求类]开启仓库格子
    /// </summary>
    public partial class ReqOpenStroreHousePos: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte PageIdx;
        /// <summary>
        /// 
        /// </summary>
        public byte Count;

        public override Packet Clone()
        {
            ReqOpenStroreHousePos pkg = new ReqOpenStroreHousePos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PageIdx = PageIdx;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(PageIdx);
                oByteArray.WriteByte(Count);
            }
            else
            {
                PageIdx = oByteArray.ReadByte();
                Count = oByteArray.ReadByte();
            }
        }
		public ReqOpenStroreHousePos()
		{
			PacketID = 1459;
		}
    }

    /// <summary>
    ///  [请求类] 开启仓库格子 创建者
    /// </summary>
    [Package(1459)]
    public partial class ReqOpenStroreHousePosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOpenStroreHousePos();
        }
    }


    /// <summary>
    ///  [响应类]开启仓库格子
    /// </summary>
    public partial class ResOpenStroreHousePos: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public byte PageIdx;
        /// <summary>
        /// 
        /// </summary>
        public byte Count;

        public override Packet Clone()
        {
            ResOpenStroreHousePos pkg = new ResOpenStroreHousePos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.PageIdx = PageIdx;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(PageIdx);
                oByteArray.WriteByte(Count);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                PageIdx = oByteArray.ReadByte();
                Count = oByteArray.ReadByte();
            }
        }
		public ResOpenStroreHousePos()
		{
			PacketID = 1460;
		}
    }

    /// <summary>
    ///  [响应类] 开启仓库格子 创建者
    /// </summary>
    [Package(1460)]
    public partial class ResOpenStroreHousePosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOpenStroreHousePos();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家装备强化失败附加成功率
    /// </summary>
    public partial class ReqUpdateStrengthFailExtraRate: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateStrengthFailExtraRate pkg = new ReqUpdateStrengthFailExtraRate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateStrengthFailExtraRate()
		{
			PacketID = 1461;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家装备强化失败附加成功率 创建者
    /// </summary>
    [Package(1461)]
    public partial class ReqUpdateStrengthFailExtraRateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateStrengthFailExtraRate();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家装备强化失败附加成功率
    /// </summary>
    public partial class ResUpdateStrengthFailExtraRate: Packet 
    {
        /// <summary>
        /// 强化失败附加成功率
        /// </summary>
        public int ExtraRate;

        public override Packet Clone()
        {
            ResUpdateStrengthFailExtraRate pkg = new ResUpdateStrengthFailExtraRate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ExtraRate = ExtraRate;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(ExtraRate);
            }
            else
            {
                ExtraRate = oByteArray.ReadInt();
            }
        }
		public ResUpdateStrengthFailExtraRate()
		{
			PacketID = 1462;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家装备强化失败附加成功率 创建者
    /// </summary>
    [Package(1462)]
    public partial class ResUpdateStrengthFailExtraRateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateStrengthFailExtraRate();
        }
    }


    /// <summary>
    ///  [请求类]通知行会淘金活动镖车状态变更
    /// </summary>
    public partial class ReqNoticeHHTJEscortCartStateChanged: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeHHTJEscortCartStateChanged pkg = new ReqNoticeHHTJEscortCartStateChanged();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeHHTJEscortCartStateChanged()
		{
			PacketID = 1463;
		}
    }

    /// <summary>
    ///  [请求类] 通知行会淘金活动镖车状态变更 创建者
    /// </summary>
    [Package(1463)]
    public partial class ReqNoticeHHTJEscortCartStateChangedCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeHHTJEscortCartStateChanged();
        }
    }


    /// <summary>
    ///  [响应类]通知行会淘金活动镖车状态变更
    /// </summary>
    public partial class ResNoticeHHTJEscortCartStateChanged: Packet 
    {
        /// <summary>
        /// 0.空闲状态，1.争夺中，2.占领中，3.守护中，4.占领暂停，5.守护暂停
        /// </summary>
        public uint State;
        /// <summary>
        /// 占领成功时间戳
        /// </summary>
        public uint OccupyTime;
        /// <summary>
        /// 守护成功时间戳
        /// </summary>
        public uint GuardTime;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeHHTJEscortCartStateChanged pkg = new ResNoticeHHTJEscortCartStateChanged();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.State = State;
            pkg.OccupyTime = OccupyTime;
            pkg.GuardTime = GuardTime;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(State);
                oByteArray.WriteUInt(OccupyTime);
                oByteArray.WriteUInt(GuardTime);
                ObjectID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                State = oByteArray.ReadUInt();
                OccupyTime = oByteArray.ReadUInt();
                GuardTime = oByteArray.ReadUInt();
                ObjectID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeHHTJEscortCartStateChanged()
		{
			PacketID = 1464;
		}
    }

    /// <summary>
    ///  [响应类] 通知行会淘金活动镖车状态变更 创建者
    /// </summary>
    [Package(1464)]
    public partial class ResNoticeHHTJEscortCartStateChangedCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeHHTJEscortCartStateChanged();
        }
    }


    /// <summary>
    ///  [请求类]活动事件通知
    /// </summary>
    public partial class ReqNoticeDailyActivityEvent: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeDailyActivityEvent pkg = new ReqNoticeDailyActivityEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeDailyActivityEvent()
		{
			PacketID = 1465;
		}
    }

    /// <summary>
    ///  [请求类] 活动事件通知 创建者
    /// </summary>
    [Package(1465)]
    public partial class ReqNoticeDailyActivityEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDailyActivityEvent();
        }
    }


    /// <summary>
    ///  [响应类]活动事件通知
    /// </summary>
    public partial class ResNoticeDailyActivityEvent: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 
        /// </summary>
        public DailyActivityEvent ActivityEvent = new DailyActivityEvent();

        public override Packet Clone()
        {
            ResNoticeDailyActivityEvent pkg = new ResNoticeDailyActivityEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityType = ActivityType;
            pkg.ActivityEvent = ActivityEvent.Clone() as DailyActivityEvent;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityType);
                ActivityEvent.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ActivityType = oByteArray.ReadUInt();
                ActivityEvent.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeDailyActivityEvent()
		{
			PacketID = 1466;
		}
    }

    /// <summary>
    ///  [响应类] 活动事件通知 创建者
    /// </summary>
    [Package(1466)]
    public partial class ResNoticeDailyActivityEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDailyActivityEvent();
        }
    }


    /// <summary>
    ///  [请求类]行会淘金购买加倍buff
    /// </summary>
    public partial class ReqHHTJBuyDoubleBuff: Packet 
    {

        public override Packet Clone()
        {
            ReqHHTJBuyDoubleBuff pkg = new ReqHHTJBuyDoubleBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqHHTJBuyDoubleBuff()
		{
			PacketID = 1467;
		}
    }

    /// <summary>
    ///  [请求类] 行会淘金购买加倍buff 创建者
    /// </summary>
    [Package(1467)]
    public partial class ReqHHTJBuyDoubleBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHHTJBuyDoubleBuff();
        }
    }


    /// <summary>
    ///  [响应类]行会淘金购买加倍buff
    /// </summary>
    public partial class ResHHTJBuyDoubleBuff: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public bool HasDoubleBuff;

        public override Packet Clone()
        {
            ResHHTJBuyDoubleBuff pkg = new ResHHTJBuyDoubleBuff();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.HasDoubleBuff = HasDoubleBuff;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteBoolean(HasDoubleBuff);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                HasDoubleBuff = oByteArray.ReadBoolean();
            }
        }
		public ResHHTJBuyDoubleBuff()
		{
			PacketID = 1468;
		}
    }

    /// <summary>
    ///  [响应类] 行会淘金购买加倍buff 创建者
    /// </summary>
    [Package(1468)]
    public partial class ResHHTJBuyDoubleBuffCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHHTJBuyDoubleBuff();
        }
    }


    /// <summary>
    ///  [请求类]创建活动副本
    /// </summary>
    public partial class ReqNoticeCreateActivityDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqNoticeCreateActivityDungeon pkg = new ReqNoticeCreateActivityDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeCreateActivityDungeon()
		{
			PacketID = 1469;
		}
    }

    /// <summary>
    ///  [请求类] 创建活动副本 创建者
    /// </summary>
    [Package(1469)]
    public partial class ReqNoticeCreateActivityDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCreateActivityDungeon();
        }
    }


    /// <summary>
    ///  [响应类]创建活动副本
    /// </summary>
    public partial class ResNoticeCreateActivityDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint DungeonID;

        public override Packet Clone()
        {
            ResNoticeCreateActivityDungeon pkg = new ResNoticeCreateActivityDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.MapID = MapID;
            pkg.DungeonID = DungeonID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(DungeonID);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                DungeonID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeCreateActivityDungeon()
		{
			PacketID = 1470;
		}
    }

    /// <summary>
    ///  [响应类] 创建活动副本 创建者
    /// </summary>
    [Package(1470)]
    public partial class ResNoticeCreateActivityDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCreateActivityDungeon();
        }
    }


    /// <summary>
    ///  [请求类]强化装备位
    /// </summary>
    public partial class ReqStrengthenEquipPos: Packet 
    {
        /// <summary>
        /// 装备位
        /// </summary>
        public uint EquipPos;
        /// <summary>
        /// 付费必定成功
        /// </summary>
        public bool MustSucceed;

        public override Packet Clone()
        {
            ReqStrengthenEquipPos pkg = new ReqStrengthenEquipPos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EquipPos = EquipPos;
            pkg.MustSucceed = MustSucceed;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EquipPos);
                oByteArray.WriteBoolean(MustSucceed);
            }
            else
            {
                EquipPos = oByteArray.ReadUInt();
                MustSucceed = oByteArray.ReadBoolean();
            }
        }
		public ReqStrengthenEquipPos()
		{
			PacketID = 1471;
		}
    }

    /// <summary>
    ///  [请求类] 强化装备位 创建者
    /// </summary>
    [Package(1471)]
    public partial class ReqStrengthenEquipPosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStrengthenEquipPos();
        }
    }


    /// <summary>
    ///  [响应类]强化装备位
    /// </summary>
    public partial class ResStrengthenEquipPos: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 装备位
        /// </summary>
        public uint EquipPos;

        public override Packet Clone()
        {
            ResStrengthenEquipPos pkg = new ResStrengthenEquipPos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.EquipPos = EquipPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(EquipPos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                EquipPos = oByteArray.ReadUInt();
            }
        }
		public ResStrengthenEquipPos()
		{
			PacketID = 1472;
		}
    }

    /// <summary>
    ///  [响应类] 强化装备位 创建者
    /// </summary>
    [Package(1472)]
    public partial class ResStrengthenEquipPosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStrengthenEquipPos();
        }
    }


    /// <summary>
    ///  [请求类]刷新装备位强化信息
    /// </summary>
    public partial class ReqUpdateEquipPosStrengthenInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateEquipPosStrengthenInfo pkg = new ReqUpdateEquipPosStrengthenInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateEquipPosStrengthenInfo()
		{
			PacketID = 1473;
		}
    }

    /// <summary>
    ///  [请求类] 刷新装备位强化信息 创建者
    /// </summary>
    [Package(1473)]
    public partial class ReqUpdateEquipPosStrengthenInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateEquipPosStrengthenInfo();
        }
    }


    /// <summary>
    ///  [响应类]刷新装备位强化信息
    /// </summary>
    public partial class ResUpdateEquipPosStrengthenInfo: Packet 
    {
        /// <summary>
        /// 强化信息
        /// </summary>
        public ProtocolPair StrengthenLvInfo = new ProtocolPair();
        /// <summary>
        /// 强化熟练度
        /// </summary>
        public uint Mastery;

        public override Packet Clone()
        {
            ResUpdateEquipPosStrengthenInfo pkg = new ResUpdateEquipPosStrengthenInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.StrengthenLvInfo = StrengthenLvInfo.Clone() as ProtocolPair;
            pkg.Mastery = Mastery;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                StrengthenLvInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Mastery);
            }
            else
            {
                StrengthenLvInfo.Serializtion(oByteArray, bSerialize);
                Mastery = oByteArray.ReadUInt();
            }
        }
		public ResUpdateEquipPosStrengthenInfo()
		{
			PacketID = 1474;
		}
    }

    /// <summary>
    ///  [响应类] 刷新装备位强化信息 创建者
    /// </summary>
    [Package(1474)]
    public partial class ResUpdateEquipPosStrengthenInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateEquipPosStrengthenInfo();
        }
    }


    /// <summary>
    ///  [请求类]神器合成
    /// </summary>
    public partial class ReqArtifactCompose: Packet 
    {
        /// <summary>
        /// 源装备位置
        /// </summary>
        public uint Pos;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqArtifactCompose pkg = new ReqArtifactCompose();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Pos = Pos;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Pos);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Pos = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqArtifactCompose()
		{
			PacketID = 1475;
		}
    }

    /// <summary>
    ///  [请求类] 神器合成 创建者
    /// </summary>
    [Package(1475)]
    public partial class ReqArtifactComposeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqArtifactCompose();
        }
    }


    /// <summary>
    ///  [响应类]神器合成
    /// </summary>
    public partial class ResArtifactCompose: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResArtifactCompose pkg = new ResArtifactCompose();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResArtifactCompose()
		{
			PacketID = 1476;
		}
    }

    /// <summary>
    ///  [响应类] 神器合成 创建者
    /// </summary>
    [Package(1476)]
    public partial class ResArtifactComposeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResArtifactCompose();
        }
    }


    /// <summary>
    ///  [请求类]地图福利数据初始化
    /// </summary>
    public partial class ReqInitPlayerMapWelfare: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerMapWelfare pkg = new ReqInitPlayerMapWelfare();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerMapWelfare()
		{
			PacketID = 1477;
		}
    }

    /// <summary>
    ///  [请求类] 地图福利数据初始化 创建者
    /// </summary>
    [Package(1477)]
    public partial class ReqInitPlayerMapWelfareCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerMapWelfare();
        }
    }


    /// <summary>
    ///  [响应类]地图福利数据初始化
    /// </summary>
    public partial class ResInitPlayerMapWelfare: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 当天已经使用了的免费时间
        /// </summary>
        public uint UsedFreeSeconds;
        /// <summary>
        /// 当天已经使用了的掉率加成次数
        /// </summary>
        public uint UsedDropRateCount;
        /// <summary>
        /// 当天已经使用了的血量百分比伤害加成次数
        /// </summary>
        public uint UsedHPPectHurtCount;

        public override Packet Clone()
        {
            ResInitPlayerMapWelfare pkg = new ResInitPlayerMapWelfare();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.UsedFreeSeconds = UsedFreeSeconds;
            pkg.UsedDropRateCount = UsedDropRateCount;
            pkg.UsedHPPectHurtCount = UsedHPPectHurtCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(UsedFreeSeconds);
                oByteArray.WriteUInt(UsedDropRateCount);
                oByteArray.WriteUInt(UsedHPPectHurtCount);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                UsedFreeSeconds = oByteArray.ReadUInt();
                UsedDropRateCount = oByteArray.ReadUInt();
                UsedHPPectHurtCount = oByteArray.ReadUInt();
            }
        }
		public ResInitPlayerMapWelfare()
		{
			PacketID = 1478;
		}
    }

    /// <summary>
    ///  [响应类] 地图福利数据初始化 创建者
    /// </summary>
    [Package(1478)]
    public partial class ResInitPlayerMapWelfareCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerMapWelfare();
        }
    }


    /// <summary>
    ///  [请求类]地图福利数据刷新
    /// </summary>
    public partial class ReqUpdatePlayerMapWelfare: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public ProtocolPair Data = new ProtocolPair();

        public override Packet Clone()
        {
            ReqUpdatePlayerMapWelfare pkg = new ReqUpdatePlayerMapWelfare();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.Data = Data.Clone() as ProtocolPair;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqUpdatePlayerMapWelfare()
		{
			PacketID = 1479;
		}
    }

    /// <summary>
    ///  [请求类] 地图福利数据刷新 创建者
    /// </summary>
    [Package(1479)]
    public partial class ReqUpdatePlayerMapWelfareCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerMapWelfare();
        }
    }


    /// <summary>
    ///  [响应类]地图福利数据刷新
    /// </summary>
    public partial class ResUpdatePlayerMapWelfare: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public ProtocolPair Data = new ProtocolPair();

        public override Packet Clone()
        {
            ResUpdatePlayerMapWelfare pkg = new ResUpdatePlayerMapWelfare();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.Data = Data.Clone() as ProtocolPair;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdatePlayerMapWelfare()
		{
			PacketID = 1480;
		}
    }

    /// <summary>
    ///  [响应类] 地图福利数据刷新 创建者
    /// </summary>
    [Package(1480)]
    public partial class ResUpdatePlayerMapWelfareCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerMapWelfare();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家(道士)宠物信息
    /// </summary>
    public partial class ReqUpdatePlayerPetInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerPetInfo pkg = new ReqUpdatePlayerPetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerPetInfo()
		{
			PacketID = 1481;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家(道士)宠物信息 创建者
    /// </summary>
    [Package(1481)]
    public partial class ReqUpdatePlayerPetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerPetInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家(道士)宠物信息
    /// </summary>
    public partial class ResUpdatePlayerPetInfo: Packet 
    {
        /// <summary>
        /// 宠物信息
        /// </summary>
        public PlayerPetInfo PetInfo = new PlayerPetInfo();

        public override Packet Clone()
        {
            ResUpdatePlayerPetInfo pkg = new ResUpdatePlayerPetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PetInfo = PetInfo.Clone() as PlayerPetInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PetInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PetInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdatePlayerPetInfo()
		{
			PacketID = 1482;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家(道士)宠物信息 创建者
    /// </summary>
    [Package(1482)]
    public partial class ResUpdatePlayerPetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerPetInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家宠物信息
    /// </summary>
    public partial class ReqInitPlayerPetInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerPetInfo pkg = new ReqInitPlayerPetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerPetInfo()
		{
			PacketID = 1483;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家宠物信息 创建者
    /// </summary>
    [Package(1483)]
    public partial class ReqInitPlayerPetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerPetInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家宠物信息
    /// </summary>
    public partial class ResInitPlayerPetInfo: Packet 
    {
        /// <summary>
        /// 宠物信息
        /// </summary>
        public List<PlayerPetInfo> PetInfo = new List<PlayerPetInfo>();

        public override Packet Clone()
        {
            ResInitPlayerPetInfo pkg = new ResInitPlayerPetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (PlayerPetInfo item in PetInfo)
            {
                pkg.PetInfo.Add(item.Clone() as PlayerPetInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)PetInfo.Count);
                for (int i = 0; i < PetInfo.Count; i++)
                {
                    PetInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int PetInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PetInfoCount; i++)
                {
                    PlayerPetInfo obj = new PlayerPetInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    PetInfo.Add(obj);
                }
            }
        }
		public ResInitPlayerPetInfo()
		{
			PacketID = 1484;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家宠物信息 创建者
    /// </summary>
    [Package(1484)]
    public partial class ResInitPlayerPetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerPetInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新当前待召唤魂宠Group
    /// </summary>
    public partial class ReqUpdateSoulPetGroup: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateSoulPetGroup pkg = new ReqUpdateSoulPetGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateSoulPetGroup()
		{
			PacketID = 1485;
		}
    }

    /// <summary>
    ///  [请求类] 更新当前待召唤魂宠Group 创建者
    /// </summary>
    [Package(1485)]
    public partial class ReqUpdateSoulPetGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateSoulPetGroup();
        }
    }


    /// <summary>
    ///  [响应类]更新当前待召唤魂宠Group
    /// </summary>
    public partial class ResUpdateSoulPetGroup: Packet 
    {
        /// <summary>
        /// 汲取技能组
        /// </summary>
        public uint SkillGroup;
        /// <summary>
        /// 宠物组
        /// </summary>
        public uint SoulPetGroup;

        public override Packet Clone()
        {
            ResUpdateSoulPetGroup pkg = new ResUpdateSoulPetGroup();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillGroup = SkillGroup;
            pkg.SoulPetGroup = SoulPetGroup;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillGroup);
                oByteArray.WriteUInt(SoulPetGroup);
            }
            else
            {
                SkillGroup = oByteArray.ReadUInt();
                SoulPetGroup = oByteArray.ReadUInt();
            }
        }
		public ResUpdateSoulPetGroup()
		{
			PacketID = 1486;
		}
    }

    /// <summary>
    ///  [响应类] 更新当前待召唤魂宠Group 创建者
    /// </summary>
    [Package(1486)]
    public partial class ResUpdateSoulPetGroupCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateSoulPetGroup();
        }
    }


    /// <summary>
    ///  [请求类]官印升级
    /// </summary>
    public partial class ReqUpgradeOfficalSeal: Packet 
    {

        public override Packet Clone()
        {
            ReqUpgradeOfficalSeal pkg = new ReqUpgradeOfficalSeal();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpgradeOfficalSeal()
		{
			PacketID = 1487;
		}
    }

    /// <summary>
    ///  [请求类] 官印升级 创建者
    /// </summary>
    [Package(1487)]
    public partial class ReqUpgradeOfficalSealCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeOfficalSeal();
        }
    }


    /// <summary>
    ///  [响应类]官印升级
    /// </summary>
    public partial class ResUpgradeOfficalSeal: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 官印等级
        /// </summary>
        public uint OfficialSealLv;
        /// <summary>
        /// 官印经验
        /// </summary>
        public uint OfficialSealValue;

        public override Packet Clone()
        {
            ResUpgradeOfficalSeal pkg = new ResUpgradeOfficalSeal();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.OfficialSealLv = OfficialSealLv;
            pkg.OfficialSealValue = OfficialSealValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(OfficialSealLv);
                oByteArray.WriteUInt(OfficialSealValue);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                OfficialSealLv = oByteArray.ReadUInt();
                OfficialSealValue = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeOfficalSeal()
		{
			PacketID = 1488;
		}
    }

    /// <summary>
    ///  [响应类] 官印升级 创建者
    /// </summary>
    [Package(1488)]
    public partial class ResUpgradeOfficalSealCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeOfficalSeal();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家成就信息
    /// </summary>
    public partial class ReqInitPlayerAchievementInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerAchievementInfo pkg = new ReqInitPlayerAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerAchievementInfo()
		{
			PacketID = 1489;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家成就信息 创建者
    /// </summary>
    [Package(1489)]
    public partial class ReqInitPlayerAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerAchievementInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家成就信息
    /// </summary>
    public partial class ResInitPlayerAchievementInfo: Packet 
    {
        /// <summary>
        /// 玩家成就信息
        /// </summary>
        public List<PlayerAchievementInfo> AchievementInfo = new List<PlayerAchievementInfo>();
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResInitPlayerAchievementInfo pkg = new ResInitPlayerAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (PlayerAchievementInfo item in AchievementInfo)
            {
                pkg.AchievementInfo.Add(item.Clone() as PlayerAchievementInfo);
            }
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)AchievementInfo.Count);
                for (int i = 0; i < AchievementInfo.Count; i++)
                {
                    AchievementInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                int AchievementInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AchievementInfoCount; i++)
                {
                    PlayerAchievementInfo obj = new PlayerAchievementInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    AchievementInfo.Add(obj);
                }
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResInitPlayerAchievementInfo()
		{
			PacketID = 1490;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家成就信息 创建者
    /// </summary>
    [Package(1490)]
    public partial class ResInitPlayerAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerAchievementInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家成就信息
    /// </summary>
    public partial class ReqUpdatePlayerAchievementInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerAchievementInfo pkg = new ReqUpdatePlayerAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerAchievementInfo()
		{
			PacketID = 1491;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家成就信息 创建者
    /// </summary>
    [Package(1491)]
    public partial class ReqUpdatePlayerAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerAchievementInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家成就信息
    /// </summary>
    public partial class ResUpdatePlayerAchievementInfo: Packet 
    {
        /// <summary>
        /// 成就信息
        /// </summary>
        public List<PlayerAchievementInfo> AchievementInfo = new List<PlayerAchievementInfo>();

        public override Packet Clone()
        {
            ResUpdatePlayerAchievementInfo pkg = new ResUpdatePlayerAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (PlayerAchievementInfo item in AchievementInfo)
            {
                pkg.AchievementInfo.Add(item.Clone() as PlayerAchievementInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)AchievementInfo.Count);
                for (int i = 0; i < AchievementInfo.Count; i++)
                {
                    AchievementInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int AchievementInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AchievementInfoCount; i++)
                {
                    PlayerAchievementInfo obj = new PlayerAchievementInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    AchievementInfo.Add(obj);
                }
            }
        }
		public ResUpdatePlayerAchievementInfo()
		{
			PacketID = 1492;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家成就信息 创建者
    /// </summary>
    [Package(1492)]
    public partial class ResUpdatePlayerAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerAchievementInfo();
        }
    }


    /// <summary>
    ///  [请求类]触发惊龙
    /// </summary>
    public partial class ReqJingLongTakeEffect: Packet 
    {
        /// <summary>
        /// 普通装备位
        /// </summary>
        public uint NormalEquipPos;
        /// <summary>
        /// 禁止装备普通装备buffid
        /// </summary>
        public uint NormalBuffID;
        /// <summary>
        /// 内甲装备位
        /// </summary>
        public uint InnerEquipPos;
        /// <summary>
        /// 禁止装备内甲buffid
        /// </summary>
        public uint InnerBuffID;

        public override Packet Clone()
        {
            ReqJingLongTakeEffect pkg = new ReqJingLongTakeEffect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NormalEquipPos = NormalEquipPos;
            pkg.NormalBuffID = NormalBuffID;
            pkg.InnerEquipPos = InnerEquipPos;
            pkg.InnerBuffID = InnerBuffID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(NormalEquipPos);
                oByteArray.WriteUInt(NormalBuffID);
                oByteArray.WriteUInt(InnerEquipPos);
                oByteArray.WriteUInt(InnerBuffID);
            }
            else
            {
                NormalEquipPos = oByteArray.ReadUInt();
                NormalBuffID = oByteArray.ReadUInt();
                InnerEquipPos = oByteArray.ReadUInt();
                InnerBuffID = oByteArray.ReadUInt();
            }
        }
		public ReqJingLongTakeEffect()
		{
			PacketID = 1493;
		}
    }

    /// <summary>
    ///  [请求类] 触发惊龙 创建者
    /// </summary>
    [Package(1493)]
    public partial class ReqJingLongTakeEffectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqJingLongTakeEffect();
        }
    }


    /// <summary>
    ///  [响应类]触发惊龙
    /// </summary>
    public partial class ResJingLongTakeEffect: Packet 
    {

        public override Packet Clone()
        {
            ResJingLongTakeEffect pkg = new ResJingLongTakeEffect();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResJingLongTakeEffect()
		{
			PacketID = 1494;
		}
    }

    /// <summary>
    ///  [响应类] 触发惊龙 创建者
    /// </summary>
    [Package(1494)]
    public partial class ResJingLongTakeEffectCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResJingLongTakeEffect();
        }
    }


    /// <summary>
    ///  [请求类]变身能量变更
    /// </summary>
    public partial class ReqUpdateShapeShiftEnergy: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateShapeShiftEnergy pkg = new ReqUpdateShapeShiftEnergy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateShapeShiftEnergy()
		{
			PacketID = 1495;
		}
    }

    /// <summary>
    ///  [请求类] 变身能量变更 创建者
    /// </summary>
    [Package(1495)]
    public partial class ReqUpdateShapeShiftEnergyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateShapeShiftEnergy();
        }
    }


    /// <summary>
    ///  [响应类]变身能量变更
    /// </summary>
    public partial class ResUpdateShapeShiftEnergy: Packet 
    {
        /// <summary>
        /// 变身能量
        /// </summary>
        public uint ShapeShiftEnergy;

        public override Packet Clone()
        {
            ResUpdateShapeShiftEnergy pkg = new ResUpdateShapeShiftEnergy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ShapeShiftEnergy = ShapeShiftEnergy;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ShapeShiftEnergy);
            }
            else
            {
                ShapeShiftEnergy = oByteArray.ReadUInt();
            }
        }
		public ResUpdateShapeShiftEnergy()
		{
			PacketID = 1496;
		}
    }

    /// <summary>
    ///  [响应类] 变身能量变更 创建者
    /// </summary>
    [Package(1496)]
    public partial class ResUpdateShapeShiftEnergyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateShapeShiftEnergy();
        }
    }


    /// <summary>
    ///  [请求类]更新成就限额信息
    /// </summary>
    public partial class ReqUpdateAchievementQuotaInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateAchievementQuotaInfo pkg = new ReqUpdateAchievementQuotaInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateAchievementQuotaInfo()
		{
			PacketID = 1497;
		}
    }

    /// <summary>
    ///  [请求类] 更新成就限额信息 创建者
    /// </summary>
    [Package(1497)]
    public partial class ReqUpdateAchievementQuotaInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAchievementQuotaInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新成就限额信息
    /// </summary>
    public partial class ResUpdateAchievementQuotaInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public AchievementQuotaInfo QuotaInfo = new AchievementQuotaInfo();

        public override Packet Clone()
        {
            ResUpdateAchievementQuotaInfo pkg = new ResUpdateAchievementQuotaInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.QuotaInfo = QuotaInfo.Clone() as AchievementQuotaInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                QuotaInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                QuotaInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateAchievementQuotaInfo()
		{
			PacketID = 1498;
		}
    }

    /// <summary>
    ///  [响应类] 更新成就限额信息 创建者
    /// </summary>
    [Package(1498)]
    public partial class ResUpdateAchievementQuotaInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAchievementQuotaInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知世界成就信息
    /// </summary>
    public partial class ReqInitWorldAchievementInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqInitWorldAchievementInfo pkg = new ReqInitWorldAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitWorldAchievementInfo()
		{
			PacketID = 1499;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界成就信息 创建者
    /// </summary>
    [Package(1499)]
    public partial class ReqInitWorldAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitWorldAchievementInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知世界成就信息
    /// </summary>
    public partial class ResInitWorldAchievementInfo: Packet 
    {
        /// <summary>
        /// 限额信息
        /// </summary>
        public List<AchievementQuotaInfo> QuotaInfo = new List<AchievementQuotaInfo>();
        /// <summary>
        /// 进度共用信息
        /// </summary>
        public List<AchievementMergeInfo> MergeInfo = new List<AchievementMergeInfo>();
        /// <summary>
        /// 前十排行信息
        /// </summary>
        public List<AchievementRank> RankInfo = new List<AchievementRank>();

        public override Packet Clone()
        {
            ResInitWorldAchievementInfo pkg = new ResInitWorldAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (AchievementQuotaInfo item in QuotaInfo)
            {
                pkg.QuotaInfo.Add(item.Clone() as AchievementQuotaInfo);
            }
            foreach (AchievementMergeInfo item in MergeInfo)
            {
                pkg.MergeInfo.Add(item.Clone() as AchievementMergeInfo);
            }
            foreach (AchievementRank item in RankInfo)
            {
                pkg.RankInfo.Add(item.Clone() as AchievementRank);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)QuotaInfo.Count);
                for (int i = 0; i < QuotaInfo.Count; i++)
                {
                    QuotaInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)MergeInfo.Count);
                for (int i = 0; i < MergeInfo.Count; i++)
                {
                    MergeInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)RankInfo.Count);
                for (int i = 0; i < RankInfo.Count; i++)
                {
                    RankInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int QuotaInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < QuotaInfoCount; i++)
                {
                    AchievementQuotaInfo obj = new AchievementQuotaInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    QuotaInfo.Add(obj);
                }
                int MergeInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MergeInfoCount; i++)
                {
                    AchievementMergeInfo obj = new AchievementMergeInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    MergeInfo.Add(obj);
                }
                int RankInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankInfoCount; i++)
                {
                    AchievementRank obj = new AchievementRank();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankInfo.Add(obj);
                }
            }
        }
		public ResInitWorldAchievementInfo()
		{
			PacketID = 1500;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界成就信息 创建者
    /// </summary>
    [Package(1500)]
    public partial class ResInitWorldAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitWorldAchievementInfo();
        }
    }


    /// <summary>
    ///  [请求类]藏宝图信息（幸运/当日开启次数）变更通知
    /// </summary>
    public partial class ReqNoticeTreasureMapData: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeTreasureMapData pkg = new ReqNoticeTreasureMapData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeTreasureMapData()
		{
			PacketID = 1501;
		}
    }

    /// <summary>
    ///  [请求类] 藏宝图信息（幸运/当日开启次数）变更通知 创建者
    /// </summary>
    [Package(1501)]
    public partial class ReqNoticeTreasureMapDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeTreasureMapData();
        }
    }


    /// <summary>
    ///  [响应类]藏宝图信息（幸运/当日开启次数）变更通知
    /// </summary>
    public partial class ResNoticeTreasureMapData: Packet 
    {
        /// <summary>
        /// 藏宝图幸运
        /// </summary>
        public uint TreasureMapLucky;
        /// <summary>
        /// 当日藏宝图开启次数
        /// </summary>
        public uint OpenTMCount;

        public override Packet Clone()
        {
            ResNoticeTreasureMapData pkg = new ResNoticeTreasureMapData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TreasureMapLucky = TreasureMapLucky;
            pkg.OpenTMCount = OpenTMCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TreasureMapLucky);
                oByteArray.WriteUInt(OpenTMCount);
            }
            else
            {
                TreasureMapLucky = oByteArray.ReadUInt();
                OpenTMCount = oByteArray.ReadUInt();
            }
        }
		public ResNoticeTreasureMapData()
		{
			PacketID = 1502;
		}
    }

    /// <summary>
    ///  [响应类] 藏宝图信息（幸运/当日开启次数）变更通知 创建者
    /// </summary>
    [Package(1502)]
    public partial class ResNoticeTreasureMapDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeTreasureMapData();
        }
    }


    /// <summary>
    ///  [请求类]获取成就信息
    /// </summary>
    public partial class ReqGetAchievementInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqGetAchievementInfo pkg = new ReqGetAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetAchievementInfo()
		{
			PacketID = 1503;
		}
    }

    /// <summary>
    ///  [请求类] 获取成就信息 创建者
    /// </summary>
    [Package(1503)]
    public partial class ReqGetAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetAchievementInfo();
        }
    }


    /// <summary>
    ///  [响应类]获取成就信息
    /// </summary>
    public partial class ResGetAchievementInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// 成就TID、玩家自己的进度、成就状态
        /// </summary>
        public List<PlayerAchievementInfo> AchievementInfo = new List<PlayerAchievementInfo>();
        /// <summary>
        /// 成就TID、已完成次数、首次完成玩家昵称、首次完成时间
        /// </summary>
        public List<AchievementQuotaInfo> QuotaInfo = new List<AchievementQuotaInfo>();
        /// <summary>
        /// 成就TID、公共进度
        /// </summary>
        public List<AchievementMergeInfo> MergeInfo = new List<AchievementMergeInfo>();

        public override Packet Clone()
        {
            ResGetAchievementInfo pkg = new ResGetAchievementInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (PlayerAchievementInfo item in AchievementInfo)
            {
                pkg.AchievementInfo.Add(item.Clone() as PlayerAchievementInfo);
            }
            foreach (AchievementQuotaInfo item in QuotaInfo)
            {
                pkg.QuotaInfo.Add(item.Clone() as AchievementQuotaInfo);
            }
            foreach (AchievementMergeInfo item in MergeInfo)
            {
                pkg.MergeInfo.Add(item.Clone() as AchievementMergeInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteUShort((ushort)AchievementInfo.Count);
                for (int i = 0; i < AchievementInfo.Count; i++)
                {
                    AchievementInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)QuotaInfo.Count);
                for (int i = 0; i < QuotaInfo.Count; i++)
                {
                    QuotaInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)MergeInfo.Count);
                for (int i = 0; i < MergeInfo.Count; i++)
                {
                    MergeInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadByte();
                int AchievementInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AchievementInfoCount; i++)
                {
                    PlayerAchievementInfo obj = new PlayerAchievementInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    AchievementInfo.Add(obj);
                }
                int QuotaInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < QuotaInfoCount; i++)
                {
                    AchievementQuotaInfo obj = new AchievementQuotaInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    QuotaInfo.Add(obj);
                }
                int MergeInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MergeInfoCount; i++)
                {
                    AchievementMergeInfo obj = new AchievementMergeInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    MergeInfo.Add(obj);
                }
            }
        }
		public ResGetAchievementInfo()
		{
			PacketID = 1504;
		}
    }

    /// <summary>
    ///  [响应类] 获取成就信息 创建者
    /// </summary>
    [Package(1504)]
    public partial class ResGetAchievementInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetAchievementInfo();
        }
    }


    /// <summary>
    ///  [请求类]查看更多成就达成排名
    /// </summary>
    public partial class ReqGetAchievementMoreRank: Packet 
    {
        /// <summary>
        /// 成就TID
        /// </summary>
        public int TID;

        public override Packet Clone()
        {
            ReqGetAchievementMoreRank pkg = new ReqGetAchievementMoreRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(TID);
            }
            else
            {
                TID = oByteArray.ReadInt();
            }
        }
		public ReqGetAchievementMoreRank()
		{
			PacketID = 1505;
		}
    }

    /// <summary>
    ///  [请求类] 查看更多成就达成排名 创建者
    /// </summary>
    [Package(1505)]
    public partial class ReqGetAchievementMoreRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetAchievementMoreRank();
        }
    }


    /// <summary>
    ///  [响应类]查看更多成就达成排名
    /// </summary>
    public partial class ResGetAchievementMoreRank: Packet 
    {
        /// <summary>
        /// 成就ITD
        /// </summary>
        public int TID;
        /// <summary>
        /// 查看更多(达成排名)
        /// </summary>
        public List<AchievementRank> RankInfo = new List<AchievementRank>();

        public override Packet Clone()
        {
            ResGetAchievementMoreRank pkg = new ResGetAchievementMoreRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            foreach (AchievementRank item in RankInfo)
            {
                pkg.RankInfo.Add(item.Clone() as AchievementRank);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(TID);
                oByteArray.WriteUShort((ushort)RankInfo.Count);
                for (int i = 0; i < RankInfo.Count; i++)
                {
                    RankInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                TID = oByteArray.ReadInt();
                int RankInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankInfoCount; i++)
                {
                    AchievementRank obj = new AchievementRank();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankInfo.Add(obj);
                }
            }
        }
		public ResGetAchievementMoreRank()
		{
			PacketID = 1506;
		}
    }

    /// <summary>
    ///  [响应类] 查看更多成就达成排名 创建者
    /// </summary>
    [Package(1506)]
    public partial class ResGetAchievementMoreRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetAchievementMoreRank();
        }
    }


    /// <summary>
    ///  [请求类]创建副本地图
    /// </summary>
    public partial class ReqCreateDungeonMap: Packet 
    {
        /// <summary>
        /// 副本类型
        /// </summary>
        public uint DungeonType;
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 活动id
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 地图列表
        /// </summary>
        public List<uint> MapIDVec = new List<uint>();
        /// <summary>
        /// 玩家Guid
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 行会Guid
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 是否初始化
        /// </summary>
        public bool IsInit;
        /// <summary>
        /// 结束时间
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ReqCreateDungeonMap pkg = new ReqCreateDungeonMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonType = DungeonType;
            pkg.ActivityType = ActivityType;
            pkg.ActivityID = ActivityID;
            foreach (var item in MapIDVec)
            {
                pkg.MapIDVec.Add(item);
            }
            pkg.PlayerGuid = PlayerGuid;
            pkg.GuildGuid = GuildGuid;
            pkg.IsInit = IsInit;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DungeonType);
                oByteArray.WriteUInt(ActivityType);
                oByteArray.WriteUInt(ActivityID);
                for (int i = 0; i < MapIDVec.Count; i++)
                {
                      oByteArray.WriteUInt(MapIDVec[i]);
                }
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteBoolean(IsInit);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                DungeonType = oByteArray.ReadUInt();
                ActivityType = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
                int MapIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapIDVecCount; i++)
                {
                    MapIDVec.Add(oByteArray.ReadUInt());
                }
                PlayerGuid = oByteArray.ReadUInt64();
                GuildGuid = oByteArray.ReadUInt64();
                IsInit = oByteArray.ReadBoolean();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ReqCreateDungeonMap()
		{
			PacketID = 1507;
		}
    }

    /// <summary>
    ///  [请求类] 创建副本地图 创建者
    /// </summary>
    [Package(1507)]
    public partial class ReqCreateDungeonMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateDungeonMap();
        }
    }


    /// <summary>
    ///  [响应类]创建副本地图
    /// </summary>
    public partial class ResCreateDungeonMap: Packet 
    {
        /// <summary>
        /// 副本类型
        /// </summary>
        public uint DungeonType;
        /// <summary>
        /// 活动类型
        /// </summary>
        public uint ActivityType;
        /// <summary>
        /// 活动id
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 地图列表
        /// </summary>
        public List<uint> MapIDVec = new List<uint>();
        /// <summary>
        /// 地图唯一id
        /// </summary>
        public List<ulong> MapGuidVec = new List<ulong>();
        /// <summary>
        /// 玩家Guid
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 行会Guid
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 是否初始化
        /// </summary>
        public bool IsInit;

        public override Packet Clone()
        {
            ResCreateDungeonMap pkg = new ResCreateDungeonMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonType = DungeonType;
            pkg.ActivityType = ActivityType;
            pkg.ActivityID = ActivityID;
            foreach (var item in MapIDVec)
            {
                pkg.MapIDVec.Add(item);
            }
            foreach (var item in MapGuidVec)
            {
                pkg.MapGuidVec.Add(item);
            }
            pkg.PlayerGuid = PlayerGuid;
            pkg.GuildGuid = GuildGuid;
            pkg.IsInit = IsInit;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DungeonType);
                oByteArray.WriteUInt(ActivityType);
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUShort((ushort)MapIDVec.Count);
                for (int i = 0; i < MapIDVec.Count; i++)
                {
                    oByteArray.WriteUInt(MapIDVec[i]);
                }
                oByteArray.WriteUShort((ushort)MapGuidVec.Count);
                for (int i = 0; i < MapGuidVec.Count; i++)
                {
                    oByteArray.WriteUInt64(MapGuidVec[i]);
                }
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteBoolean(IsInit);
            }
            else
            {
                DungeonType = oByteArray.ReadUInt();
                ActivityType = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
                int MapIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapIDVecCount; i++)
                {
                    MapIDVec.Add(oByteArray.ReadUInt());
                }
                int MapGuidVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapGuidVecCount; i++)
                {
                    MapGuidVec.Add(oByteArray.ReadUInt64());
                }
                PlayerGuid = oByteArray.ReadUInt64();
                GuildGuid = oByteArray.ReadUInt64();
                IsInit = oByteArray.ReadBoolean();
            }
        }
		public ResCreateDungeonMap()
		{
			PacketID = 1508;
		}
    }

    /// <summary>
    ///  [响应类] 创建副本地图 创建者
    /// </summary>
    [Package(1508)]
    public partial class ResCreateDungeonMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateDungeonMap();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家休闲(短期)活动结束时间
    /// </summary>
    public partial class ReqNoticeLeisureActiveTime: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeLeisureActiveTime pkg = new ReqNoticeLeisureActiveTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeLeisureActiveTime()
		{
			PacketID = 1509;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家休闲(短期)活动结束时间 创建者
    /// </summary>
    [Package(1509)]
    public partial class ReqNoticeLeisureActiveTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeLeisureActiveTime();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家休闲(短期)活动结束时间
    /// </summary>
    public partial class ResNoticeLeisureActiveTime: Packet 
    {
        /// <summary>
        /// 当前活动TID(ShortActivityTemplate)
        /// </summary>
        public uint TID;
        /// <summary>
        /// 当前活动结束时间
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResNoticeLeisureActiveTime pkg = new ResNoticeLeisureActiveTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResNoticeLeisureActiveTime()
		{
			PacketID = 1510;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家休闲(短期)活动结束时间 创建者
    /// </summary>
    [Package(1510)]
    public partial class ResNoticeLeisureActiveTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeLeisureActiveTime();
        }
    }


    /// <summary>
    ///  [请求类]藏宝图副本内传送
    /// </summary>
    public partial class ReqTreasureMapDungeonTransfer: Packet 
    {
        /// <summary>
        /// 1.下一层  2.掷骰子随机传送 3.灌铅骰子指定传送
        /// </summary>
        public uint Type;
        /// <summary>
        /// 骰子点数
        /// </summary>
        public uint Point;

        public override Packet Clone()
        {
            ReqTreasureMapDungeonTransfer pkg = new ReqTreasureMapDungeonTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Point = Point;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Point);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Point = oByteArray.ReadUInt();
            }
        }
		public ReqTreasureMapDungeonTransfer()
		{
			PacketID = 1511;
		}
    }

    /// <summary>
    ///  [请求类] 藏宝图副本内传送 创建者
    /// </summary>
    [Package(1511)]
    public partial class ReqTreasureMapDungeonTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTreasureMapDungeonTransfer();
        }
    }


    /// <summary>
    ///  [响应类]藏宝图副本内传送
    /// </summary>
    public partial class ResTreasureMapDungeonTransfer: Packet 
    {
        /// <summary>
        /// 骰子点数
        /// </summary>
        public uint Point;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint NextIdx;

        public override Packet Clone()
        {
            ResTreasureMapDungeonTransfer pkg = new ResTreasureMapDungeonTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Point = Point;
            pkg.Result = Result;
            pkg.NextIdx = NextIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Point);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(NextIdx);
            }
            else
            {
                Point = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                NextIdx = oByteArray.ReadUInt();
            }
        }
		public ResTreasureMapDungeonTransfer()
		{
			PacketID = 1512;
		}
    }

    /// <summary>
    ///  [响应类] 藏宝图副本内传送 创建者
    /// </summary>
    [Package(1512)]
    public partial class ResTreasureMapDungeonTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTreasureMapDungeonTransfer();
        }
    }


    /// <summary>
    ///  [请求类]藏宝图副本类购买次数
    /// </summary>
    public partial class ReqTreasureMapDungeonBuy: Packet 
    {
        /// <summary>
        /// 参见ExConsumeTemplate表中Type字段
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqTreasureMapDungeonBuy pkg = new ReqTreasureMapDungeonBuy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqTreasureMapDungeonBuy()
		{
			PacketID = 1513;
		}
    }

    /// <summary>
    ///  [请求类] 藏宝图副本类购买次数 创建者
    /// </summary>
    [Package(1513)]
    public partial class ReqTreasureMapDungeonBuyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTreasureMapDungeonBuy();
        }
    }


    /// <summary>
    ///  [响应类]藏宝图副本类购买次数
    /// </summary>
    public partial class ResTreasureMapDungeonBuy: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint Times;

        public override Packet Clone()
        {
            ResTreasureMapDungeonBuy pkg = new ResTreasureMapDungeonBuy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Result = Result;
            pkg.Times = Times;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Times);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                Times = oByteArray.ReadUInt();
            }
        }
		public ResTreasureMapDungeonBuy()
		{
			PacketID = 1514;
		}
    }

    /// <summary>
    ///  [响应类] 藏宝图副本类购买次数 创建者
    /// </summary>
    [Package(1514)]
    public partial class ResTreasureMapDungeonBuyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTreasureMapDungeonBuy();
        }
    }


    /// <summary>
    ///  [请求类]采集指定地图所有宝箱
    /// </summary>
    public partial class ReqCollectAllChest: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ulong> MapGuid = new List<ulong>();
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ReqCollectAllChest pkg = new ReqCollectAllChest();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in MapGuid)
            {
                pkg.MapGuid.Add(item);
            }
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < MapGuid.Count; i++)
                {
                      oByteArray.WriteUInt64(MapGuid[i]);
                }
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                int MapGuidCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapGuidCount; i++)
                {
                    MapGuid.Add(oByteArray.ReadUInt64());
                }
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqCollectAllChest()
		{
			PacketID = 1515;
		}
    }

    /// <summary>
    ///  [请求类] 采集指定地图所有宝箱 创建者
    /// </summary>
    [Package(1515)]
    public partial class ReqCollectAllChestCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCollectAllChest();
        }
    }


    /// <summary>
    ///  [响应类]采集指定地图所有宝箱
    /// </summary>
    public partial class ResCollectAllChest: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> CollectIDs = new List<uint>();
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResCollectAllChest pkg = new ResCollectAllChest();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in CollectIDs)
            {
                pkg.CollectIDs.Add(item);
            }
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)CollectIDs.Count);
                for (int i = 0; i < CollectIDs.Count; i++)
                {
                    oByteArray.WriteUInt(CollectIDs[i]);
                }
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                int CollectIDsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < CollectIDsCount; i++)
                {
                    CollectIDs.Add(oByteArray.ReadUInt());
                }
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResCollectAllChest()
		{
			PacketID = 1516;
		}
    }

    /// <summary>
    ///  [响应类] 采集指定地图所有宝箱 创建者
    /// </summary>
    [Package(1516)]
    public partial class ResCollectAllChestCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCollectAllChest();
        }
    }


    /// <summary>
    ///  [请求类]藏宝图副本信息
    /// </summary>
    public partial class ReqTreasureMapDungeonInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqTreasureMapDungeonInfo pkg = new ReqTreasureMapDungeonInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTreasureMapDungeonInfo()
		{
			PacketID = 1517;
		}
    }

    /// <summary>
    ///  [请求类] 藏宝图副本信息 创建者
    /// </summary>
    [Package(1517)]
    public partial class ReqTreasureMapDungeonInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTreasureMapDungeonInfo();
        }
    }


    /// <summary>
    ///  [响应类]藏宝图副本信息
    /// </summary>
    public partial class ResTreasureMapDungeonInfo: Packet 
    {
        /// <summary>
        /// 已普通宝箱开箱次数
        /// </summary>
        public uint OpenNormalChestTimes;
        /// <summary>
        /// 已高级宝箱开箱次数
        /// </summary>
        public uint OpenSeniorChestTimes;
        /// <summary>
        /// 已超级宝箱开箱次数
        /// </summary>
        public uint OpenSuperChestTimes;
        /// <summary>
        /// 已点亮视野次数
        /// </summary>
        public uint LightUpTimes;
        /// <summary>
        /// 已购买移动次数次数
        /// </summary>
        public uint BuyMoveTimesTimes;
        /// <summary>
        /// 已购买灌铅骰子次数
        /// </summary>
        public uint BuySuperDiceTimes;
        /// <summary>
        /// 已购买所有奖励次数
        /// </summary>
        public uint BuyAllRewardTimes;
        /// <summary>
        /// 层数
        /// </summary>
        public uint Index;
        /// <summary>
        /// 是否已经点亮视野
        /// </summary>
        public bool IsLightUp;
        /// <summary>
        /// 剩余移动次数
        /// </summary>
        public uint LastMoveTimesTime;
        /// <summary>
        /// 本层已抽签次数
        /// </summary>
        public uint DrawTimes;
        /// <summary>
        /// 已到达过的房间列表
        /// </summary>
        public List<uint> AchieveRooms = new List<uint>();

        public override Packet Clone()
        {
            ResTreasureMapDungeonInfo pkg = new ResTreasureMapDungeonInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OpenNormalChestTimes = OpenNormalChestTimes;
            pkg.OpenSeniorChestTimes = OpenSeniorChestTimes;
            pkg.OpenSuperChestTimes = OpenSuperChestTimes;
            pkg.LightUpTimes = LightUpTimes;
            pkg.BuyMoveTimesTimes = BuyMoveTimesTimes;
            pkg.BuySuperDiceTimes = BuySuperDiceTimes;
            pkg.BuyAllRewardTimes = BuyAllRewardTimes;
            pkg.Index = Index;
            pkg.IsLightUp = IsLightUp;
            pkg.LastMoveTimesTime = LastMoveTimesTime;
            pkg.DrawTimes = DrawTimes;
            foreach (var item in AchieveRooms)
            {
                pkg.AchieveRooms.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(OpenNormalChestTimes);
                oByteArray.WriteUInt(OpenSeniorChestTimes);
                oByteArray.WriteUInt(OpenSuperChestTimes);
                oByteArray.WriteUInt(LightUpTimes);
                oByteArray.WriteUInt(BuyMoveTimesTimes);
                oByteArray.WriteUInt(BuySuperDiceTimes);
                oByteArray.WriteUInt(BuyAllRewardTimes);
                oByteArray.WriteUInt(Index);
                oByteArray.WriteBoolean(IsLightUp);
                oByteArray.WriteUInt(LastMoveTimesTime);
                oByteArray.WriteUInt(DrawTimes);
                oByteArray.WriteUShort((ushort)AchieveRooms.Count);
                for (int i = 0; i < AchieveRooms.Count; i++)
                {
                    oByteArray.WriteUInt(AchieveRooms[i]);
                }
            }
            else
            {
                OpenNormalChestTimes = oByteArray.ReadUInt();
                OpenSeniorChestTimes = oByteArray.ReadUInt();
                OpenSuperChestTimes = oByteArray.ReadUInt();
                LightUpTimes = oByteArray.ReadUInt();
                BuyMoveTimesTimes = oByteArray.ReadUInt();
                BuySuperDiceTimes = oByteArray.ReadUInt();
                BuyAllRewardTimes = oByteArray.ReadUInt();
                Index = oByteArray.ReadUInt();
                IsLightUp = oByteArray.ReadBoolean();
                LastMoveTimesTime = oByteArray.ReadUInt();
                DrawTimes = oByteArray.ReadUInt();
                int AchieveRoomsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AchieveRoomsCount; i++)
                {
                    AchieveRooms.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResTreasureMapDungeonInfo()
		{
			PacketID = 1518;
		}
    }

    /// <summary>
    ///  [响应类] 藏宝图副本信息 创建者
    /// </summary>
    [Package(1518)]
    public partial class ResTreasureMapDungeonInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTreasureMapDungeonInfo();
        }
    }


    /// <summary>
    ///  [请求类]藏宝图副本奖励通知
    /// </summary>
    public partial class ReqNoticeTreasureMapDungeonReward: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeTreasureMapDungeonReward pkg = new ReqNoticeTreasureMapDungeonReward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeTreasureMapDungeonReward()
		{
			PacketID = 1519;
		}
    }

    /// <summary>
    ///  [请求类] 藏宝图副本奖励通知 创建者
    /// </summary>
    [Package(1519)]
    public partial class ReqNoticeTreasureMapDungeonRewardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeTreasureMapDungeonReward();
        }
    }


    /// <summary>
    ///  [响应类]藏宝图副本奖励通知
    /// </summary>
    public partial class ResNoticeTreasureMapDungeonReward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ProtocolPair> Rewards = new List<ProtocolPair>();

        public override Packet Clone()
        {
            ResNoticeTreasureMapDungeonReward pkg = new ResNoticeTreasureMapDungeonReward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ProtocolPair item in Rewards)
            {
                pkg.Rewards.Add(item.Clone() as ProtocolPair);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Rewards.Count);
                for (int i = 0; i < Rewards.Count; i++)
                {
                    Rewards[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int RewardsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RewardsCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    Rewards.Add(obj);
                }
            }
        }
		public ResNoticeTreasureMapDungeonReward()
		{
			PacketID = 1520;
		}
    }

    /// <summary>
    ///  [响应类] 藏宝图副本奖励通知 创建者
    /// </summary>
    [Package(1520)]
    public partial class ResNoticeTreasureMapDungeonRewardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeTreasureMapDungeonReward();
        }
    }


    /// <summary>
    ///  [请求类]密文名号切换
    /// </summary>
    public partial class ReqCiphertextFameChange: Packet 
    {
        /// <summary>
        /// [CipherTemplate]TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqCiphertextFameChange pkg = new ReqCiphertextFameChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqCiphertextFameChange()
		{
			PacketID = 1521;
		}
    }

    /// <summary>
    ///  [请求类] 密文名号切换 创建者
    /// </summary>
    [Package(1521)]
    public partial class ReqCiphertextFameChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCiphertextFameChange();
        }
    }


    /// <summary>
    ///  [响应类]密文名号切换
    /// </summary>
    public partial class ResCiphertextFameChange: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// [CipherTemplate]TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResCiphertextFameChange pkg = new ResCiphertextFameChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResCiphertextFameChange()
		{
			PacketID = 1522;
		}
    }

    /// <summary>
    ///  [响应类] 密文名号切换 创建者
    /// </summary>
    [Package(1522)]
    public partial class ResCiphertextFameChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCiphertextFameChange();
        }
    }


    /// <summary>
    ///  [请求类]领取活跃度
    /// </summary>
    public partial class ReqTakeLiveness: Packet 
    {
        /// <summary>
        /// LivenessTemplate[TID]
        /// </summary>
        public int TID;

        public override Packet Clone()
        {
            ReqTakeLiveness pkg = new ReqTakeLiveness();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(TID);
            }
            else
            {
                TID = oByteArray.ReadInt();
            }
        }
		public ReqTakeLiveness()
		{
			PacketID = 1523;
		}
    }

    /// <summary>
    ///  [请求类] 领取活跃度 创建者
    /// </summary>
    [Package(1523)]
    public partial class ReqTakeLivenessCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeLiveness();
        }
    }


    /// <summary>
    ///  [响应类]领取活跃度
    /// </summary>
    public partial class ResTakeLiveness: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;
        /// <summary>
        /// LivenessTemplate[TID]
        /// </summary>
        public int TID;

        public override Packet Clone()
        {
            ResTakeLiveness pkg = new ResTakeLiveness();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
                oByteArray.WriteInt(TID);
            }
            else
            {
                Result = oByteArray.ReadByte();
                TID = oByteArray.ReadInt();
            }
        }
		public ResTakeLiveness()
		{
			PacketID = 1524;
		}
    }

    /// <summary>
    ///  [响应类] 领取活跃度 创建者
    /// </summary>
    [Package(1524)]
    public partial class ResTakeLivenessCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeLiveness();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家活跃信息
    /// </summary>
    public partial class ReqInitPlayerLivenessInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerLivenessInfo pkg = new ReqInitPlayerLivenessInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerLivenessInfo()
		{
			PacketID = 1525;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家活跃信息 创建者
    /// </summary>
    [Package(1525)]
    public partial class ReqInitPlayerLivenessInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerLivenessInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家活跃信息
    /// </summary>
    public partial class ResInitPlayerLivenessInfo: Packet 
    {
        /// <summary>
        /// 活跃信息
        /// </summary>
        public List<LivenessInfo> Info = new List<LivenessInfo>();
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResInitPlayerLivenessInfo pkg = new ResInitPlayerLivenessInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (LivenessInfo item in Info)
            {
                pkg.Info.Add(item.Clone() as LivenessInfo);
            }
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Info.Count);
                for (int i = 0; i < Info.Count; i++)
                {
                    Info[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    LivenessInfo obj = new LivenessInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Info.Add(obj);
                }
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResInitPlayerLivenessInfo()
		{
			PacketID = 1526;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家活跃信息 创建者
    /// </summary>
    [Package(1526)]
    public partial class ResInitPlayerLivenessInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerLivenessInfo();
        }
    }


    /// <summary>
    ///  [请求类]藏宝图副本抽签
    /// </summary>
    public partial class ReqTreasureMapDungeonDraw: Packet 
    {

        public override Packet Clone()
        {
            ReqTreasureMapDungeonDraw pkg = new ReqTreasureMapDungeonDraw();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTreasureMapDungeonDraw()
		{
			PacketID = 1527;
		}
    }

    /// <summary>
    ///  [请求类] 藏宝图副本抽签 创建者
    /// </summary>
    [Package(1527)]
    public partial class ReqTreasureMapDungeonDrawCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTreasureMapDungeonDraw();
        }
    }


    /// <summary>
    ///  [响应类]藏宝图副本抽签
    /// </summary>
    public partial class ResTreasureMapDungeonDraw: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResTreasureMapDungeonDraw pkg = new ResTreasureMapDungeonDraw();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResTreasureMapDungeonDraw()
		{
			PacketID = 1528;
		}
    }

    /// <summary>
    ///  [响应类] 藏宝图副本抽签 创建者
    /// </summary>
    [Package(1528)]
    public partial class ResTreasureMapDungeonDrawCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTreasureMapDungeonDraw();
        }
    }


    /// <summary>
    ///  [请求类]购买开启通天塔额外掉落
    /// </summary>
    public partial class ReqBuyBabelDrop: Packet 
    {

        public override Packet Clone()
        {
            ReqBuyBabelDrop pkg = new ReqBuyBabelDrop();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBuyBabelDrop()
		{
			PacketID = 1529;
		}
    }

    /// <summary>
    ///  [请求类] 购买开启通天塔额外掉落 创建者
    /// </summary>
    [Package(1529)]
    public partial class ReqBuyBabelDropCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyBabelDrop();
        }
    }


    /// <summary>
    ///  [响应类]购买开启通天塔额外掉落
    /// </summary>
    public partial class ResBuyBabelDrop: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint BabelDropLayer;

        public override Packet Clone()
        {
            ResBuyBabelDrop pkg = new ResBuyBabelDrop();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.BabelDropLayer = BabelDropLayer;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(BabelDropLayer);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                BabelDropLayer = oByteArray.ReadUInt();
            }
        }
		public ResBuyBabelDrop()
		{
			PacketID = 1530;
		}
    }

    /// <summary>
    ///  [响应类] 购买开启通天塔额外掉落 创建者
    /// </summary>
    [Package(1530)]
    public partial class ResBuyBabelDropCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyBabelDrop();
        }
    }


    /// <summary>
    ///  [请求类]升级神器盒子
    /// </summary>
    public partial class ReqUpgradeArtifactBox: Packet 
    {
        /// <summary>
        /// 神器背包位置
        /// </summary>
        public List<uint> BagPos = new List<uint>();

        public override Packet Clone()
        {
            ReqUpgradeArtifactBox pkg = new ReqUpgradeArtifactBox();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in BagPos)
            {
                pkg.BagPos.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < BagPos.Count; i++)
                {
                      oByteArray.WriteUInt(BagPos[i]);
                }
            }
            else
            {
                int BagPosCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BagPosCount; i++)
                {
                    BagPos.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqUpgradeArtifactBox()
		{
			PacketID = 1531;
		}
    }

    /// <summary>
    ///  [请求类] 升级神器盒子 创建者
    /// </summary>
    [Package(1531)]
    public partial class ReqUpgradeArtifactBoxCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeArtifactBox();
        }
    }


    /// <summary>
    ///  [响应类]升级神器盒子
    /// </summary>
    public partial class ResUpgradeArtifactBox: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 神器盒子等级
        /// </summary>
        public uint ArtifactBoxLv;
        /// <summary>
        /// 神器盒子经验值
        /// </summary>
        public uint ArtifactBoxValue;

        public override Packet Clone()
        {
            ResUpgradeArtifactBox pkg = new ResUpgradeArtifactBox();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ArtifactBoxLv = ArtifactBoxLv;
            pkg.ArtifactBoxValue = ArtifactBoxValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(ArtifactBoxLv);
                oByteArray.WriteUInt(ArtifactBoxValue);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ArtifactBoxLv = oByteArray.ReadUInt();
                ArtifactBoxValue = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeArtifactBox()
		{
			PacketID = 1532;
		}
    }

    /// <summary>
    ///  [响应类] 升级神器盒子 创建者
    /// </summary>
    [Package(1532)]
    public partial class ResUpgradeArtifactBoxCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeArtifactBox();
        }
    }


    /// <summary>
    ///  [请求类]刷新降妖除魔任务
    /// </summary>
    public partial class ReqRefreshDailyTask: Packet 
    {

        public override Packet Clone()
        {
            ReqRefreshDailyTask pkg = new ReqRefreshDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRefreshDailyTask()
		{
			PacketID = 1533;
		}
    }

    /// <summary>
    ///  [请求类] 刷新降妖除魔任务 创建者
    /// </summary>
    [Package(1533)]
    public partial class ReqRefreshDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRefreshDailyTask();
        }
    }


    /// <summary>
    ///  [响应类]刷新降妖除魔任务
    /// </summary>
    public partial class ResRefreshDailyTask: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> TaskTID = new List<uint>();
        /// <summary>
        /// 任务星级
        /// </summary>
        public List<uint> TaskRank = new List<uint>();
        /// <summary>
        /// 任务完成状况
        /// </summary>
        public List<uint> TaskData = new List<uint>();
        /// <summary>
        /// 任务接取状况
        /// </summary>
        public List<uint> TaskReceived = new List<uint>();
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 0.手动刷新 1.系统刷新
        /// </summary>
        public uint RefreshType;

        public override Packet Clone()
        {
            ResRefreshDailyTask pkg = new ResRefreshDailyTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in TaskTID)
            {
                pkg.TaskTID.Add(item);
            }
            foreach (var item in TaskRank)
            {
                pkg.TaskRank.Add(item);
            }
            foreach (var item in TaskData)
            {
                pkg.TaskData.Add(item);
            }
            foreach (var item in TaskReceived)
            {
                pkg.TaskReceived.Add(item);
            }
            pkg.Result = Result;
            pkg.RefreshType = RefreshType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)TaskTID.Count);
                for (int i = 0; i < TaskTID.Count; i++)
                {
                    oByteArray.WriteUInt(TaskTID[i]);
                }
                oByteArray.WriteUShort((ushort)TaskRank.Count);
                for (int i = 0; i < TaskRank.Count; i++)
                {
                    oByteArray.WriteUInt(TaskRank[i]);
                }
                oByteArray.WriteUShort((ushort)TaskData.Count);
                for (int i = 0; i < TaskData.Count; i++)
                {
                    oByteArray.WriteUInt(TaskData[i]);
                }
                oByteArray.WriteUShort((ushort)TaskReceived.Count);
                for (int i = 0; i < TaskReceived.Count; i++)
                {
                    oByteArray.WriteUInt(TaskReceived[i]);
                }
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(RefreshType);
            }
            else
            {
                int TaskTIDCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TaskTIDCount; i++)
                {
                    TaskTID.Add(oByteArray.ReadUInt());
                }
                int TaskRankCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TaskRankCount; i++)
                {
                    TaskRank.Add(oByteArray.ReadUInt());
                }
                int TaskDataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TaskDataCount; i++)
                {
                    TaskData.Add(oByteArray.ReadUInt());
                }
                int TaskReceivedCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TaskReceivedCount; i++)
                {
                    TaskReceived.Add(oByteArray.ReadUInt());
                }
                Result = oByteArray.ReadUInt();
                RefreshType = oByteArray.ReadUInt();
            }
        }
		public ResRefreshDailyTask()
		{
			PacketID = 1534;
		}
    }

    /// <summary>
    ///  [响应类] 刷新降妖除魔任务 创建者
    /// </summary>
    [Package(1534)]
    public partial class ResRefreshDailyTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRefreshDailyTask();
        }
    }


    /// <summary>
    ///  [请求类]移动到怪物身边
    /// </summary>
    public partial class ReqMoveToMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MonsterTID;
        /// <summary>
        /// 
        /// </summary>
        public string MonsterName;

        public override Packet Clone()
        {
            ReqMoveToMonster pkg = new ReqMoveToMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonsterTID = MonsterTID;
            pkg.MonsterName = MonsterName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonsterTID);
                oByteArray.WriteUTF(MonsterName);
            }
            else
            {
                MonsterTID = oByteArray.ReadUInt();
                MonsterName = oByteArray.ReadUTF();
            }
        }
		public ReqMoveToMonster()
		{
			PacketID = 1535;
		}
    }

    /// <summary>
    ///  [请求类] 移动到怪物身边 创建者
    /// </summary>
    [Package(1535)]
    public partial class ReqMoveToMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMoveToMonster();
        }
    }


    /// <summary>
    ///  [响应类]移动到怪物身边
    /// </summary>
    public partial class ResMoveToMonster: Packet 
    {

        public override Packet Clone()
        {
            ResMoveToMonster pkg = new ResMoveToMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResMoveToMonster()
		{
			PacketID = 1536;
		}
    }

    /// <summary>
    ///  [响应类] 移动到怪物身边 创建者
    /// </summary>
    [Package(1536)]
    public partial class ResMoveToMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMoveToMonster();
        }
    }


    /// <summary>
    ///  [请求类]命魂合成
    /// </summary>
    public partial class ReqMingHunCompose: Packet 
    {
        /// <summary>
        /// MingHunCompTemplate表tid
        /// </summary>
        public uint TID;
        /// <summary>
        /// 材料装备的位置
        /// </summary>
        public uint EquipPos;

        public override Packet Clone()
        {
            ReqMingHunCompose pkg = new ReqMingHunCompose();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.EquipPos = EquipPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(EquipPos);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                EquipPos = oByteArray.ReadUInt();
            }
        }
		public ReqMingHunCompose()
		{
			PacketID = 1537;
		}
    }

    /// <summary>
    ///  [请求类] 命魂合成 创建者
    /// </summary>
    [Package(1537)]
    public partial class ReqMingHunComposeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMingHunCompose();
        }
    }


    /// <summary>
    ///  [响应类]命魂合成
    /// </summary>
    public partial class ResMingHunCompose: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResMingHunCompose pkg = new ResMingHunCompose();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResMingHunCompose()
		{
			PacketID = 1538;
		}
    }

    /// <summary>
    ///  [响应类] 命魂合成 创建者
    /// </summary>
    [Package(1538)]
    public partial class ResMingHunComposeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMingHunCompose();
        }
    }


    /// <summary>
    ///  [请求类]转转盘
    /// </summary>
    public partial class ReqPlayTurntable: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Group;
        /// <summary>
        /// 0:用剩余次数抽 1:用钱抽
        /// </summary>
        public uint PlayType;

        public override Packet Clone()
        {
            ReqPlayTurntable pkg = new ReqPlayTurntable();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Group = Group;
            pkg.PlayType = PlayType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Group);
                oByteArray.WriteUInt(PlayType);
            }
            else
            {
                Group = oByteArray.ReadUInt();
                PlayType = oByteArray.ReadUInt();
            }
        }
		public ReqPlayTurntable()
		{
			PacketID = 1539;
		}
    }

    /// <summary>
    ///  [请求类] 转转盘 创建者
    /// </summary>
    [Package(1539)]
    public partial class ReqPlayTurntableCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayTurntable();
        }
    }


    /// <summary>
    ///  [响应类]转转盘
    /// </summary>
    public partial class ResPlayTurntable: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 奖励序号
        /// </summary>
        public uint RewardIdx;

        public override Packet Clone()
        {
            ResPlayTurntable pkg = new ResPlayTurntable();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.RewardIdx = RewardIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(RewardIdx);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                RewardIdx = oByteArray.ReadUInt();
            }
        }
		public ResPlayTurntable()
		{
			PacketID = 1540;
		}
    }

    /// <summary>
    ///  [响应类] 转转盘 创建者
    /// </summary>
    [Package(1540)]
    public partial class ResPlayTurntableCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayTurntable();
        }
    }


    /// <summary>
    ///  [请求类]玩家免费会员数据初始化
    /// </summary>
    public partial class ReqInitPlayerMembershipData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerMembershipData pkg = new ReqInitPlayerMembershipData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerMembershipData()
		{
			PacketID = 1541;
		}
    }

    /// <summary>
    ///  [请求类] 玩家免费会员数据初始化 创建者
    /// </summary>
    [Package(1541)]
    public partial class ReqInitPlayerMembershipDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerMembershipData();
        }
    }


    /// <summary>
    ///  [响应类]玩家免费会员数据初始化
    /// </summary>
    public partial class ResInitPlayerMembershipData: Packet 
    {
        /// <summary>
        /// 免费会员等级
        /// </summary>
        public uint MembershipLv;
        /// <summary>
        /// 体验等级
        /// </summary>
        public uint TemporaryLv;
        /// <summary>
        /// 会员奖励领取记录
        /// </summary>
        public string MembershipInfo;
        /// <summary>
        /// 当前任务怪击杀数量
        /// </summary>
        public uint MembershipMK;
        /// <summary>
        /// 体验卡过期时间
        /// </summary>
        public uint TemporaryExpireTime;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResInitPlayerMembershipData pkg = new ResInitPlayerMembershipData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MembershipLv = MembershipLv;
            pkg.TemporaryLv = TemporaryLv;
            pkg.MembershipInfo = MembershipInfo;
            pkg.MembershipMK = MembershipMK;
            pkg.TemporaryExpireTime = TemporaryExpireTime;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MembershipLv);
                oByteArray.WriteUInt(TemporaryLv);
                oByteArray.WriteUTF(MembershipInfo);
                oByteArray.WriteUInt(MembershipMK);
                oByteArray.WriteUInt(TemporaryExpireTime);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                MembershipLv = oByteArray.ReadUInt();
                TemporaryLv = oByteArray.ReadUInt();
                MembershipInfo = oByteArray.ReadUTF();
                MembershipMK = oByteArray.ReadUInt();
                TemporaryExpireTime = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResInitPlayerMembershipData()
		{
			PacketID = 1542;
		}
    }

    /// <summary>
    ///  [响应类] 玩家免费会员数据初始化 创建者
    /// </summary>
    [Package(1542)]
    public partial class ResInitPlayerMembershipDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerMembershipData();
        }
    }


    /// <summary>
    ///  [请求类]刷新转盘信息
    /// </summary>
    public partial class ReqUpdateTurntableInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateTurntableInfo pkg = new ReqUpdateTurntableInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateTurntableInfo()
		{
			PacketID = 1543;
		}
    }

    /// <summary>
    ///  [请求类] 刷新转盘信息 创建者
    /// </summary>
    [Package(1543)]
    public partial class ReqUpdateTurntableInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTurntableInfo();
        }
    }


    /// <summary>
    ///  [响应类]刷新转盘信息
    /// </summary>
    public partial class ResUpdateTurntableInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public TurntableInformation TurntableInfo = new TurntableInformation();

        public override Packet Clone()
        {
            ResUpdateTurntableInfo pkg = new ResUpdateTurntableInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TurntableInfo = TurntableInfo.Clone() as TurntableInformation;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TurntableInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                TurntableInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateTurntableInfo()
		{
			PacketID = 1544;
		}
    }

    /// <summary>
    ///  [响应类] 刷新转盘信息 创建者
    /// </summary>
    [Package(1544)]
    public partial class ResUpdateTurntableInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTurntableInfo();
        }
    }


    /// <summary>
    ///  [请求类]刷新免费会员信息
    /// </summary>
    public partial class ReqUpdatePlayerMembershipData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerMembershipData pkg = new ReqUpdatePlayerMembershipData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerMembershipData()
		{
			PacketID = 1545;
		}
    }

    /// <summary>
    ///  [请求类] 刷新免费会员信息 创建者
    /// </summary>
    [Package(1545)]
    public partial class ReqUpdatePlayerMembershipDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerMembershipData();
        }
    }


    /// <summary>
    ///  [响应类]刷新免费会员信息
    /// </summary>
    public partial class ResUpdatePlayerMembershipData: Packet 
    {
        /// <summary>
        /// 免费会员等级
        /// </summary>
        public uint MembershipLv;
        /// <summary>
        /// 体验等级
        /// </summary>
        public uint TemporaryLv;
        /// <summary>
        /// 体验卡过期时间
        /// </summary>
        public uint TemporaryExpireTime;
        /// <summary>
        /// 会员奖励领取记录
        /// </summary>
        public string MembershipInfo;
        /// <summary>
        /// 当前任务怪击杀数量
        /// </summary>
        public uint MembershipMK;

        public override Packet Clone()
        {
            ResUpdatePlayerMembershipData pkg = new ResUpdatePlayerMembershipData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MembershipLv = MembershipLv;
            pkg.TemporaryLv = TemporaryLv;
            pkg.TemporaryExpireTime = TemporaryExpireTime;
            pkg.MembershipInfo = MembershipInfo;
            pkg.MembershipMK = MembershipMK;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MembershipLv);
                oByteArray.WriteUInt(TemporaryLv);
                oByteArray.WriteUInt(TemporaryExpireTime);
                oByteArray.WriteUTF(MembershipInfo);
                oByteArray.WriteUInt(MembershipMK);
            }
            else
            {
                MembershipLv = oByteArray.ReadUInt();
                TemporaryLv = oByteArray.ReadUInt();
                TemporaryExpireTime = oByteArray.ReadUInt();
                MembershipInfo = oByteArray.ReadUTF();
                MembershipMK = oByteArray.ReadUInt();
            }
        }
		public ResUpdatePlayerMembershipData()
		{
			PacketID = 1546;
		}
    }

    /// <summary>
    ///  [响应类] 刷新免费会员信息 创建者
    /// </summary>
    [Package(1546)]
    public partial class ResUpdatePlayerMembershipDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerMembershipData();
        }
    }


    /// <summary>
    ///  [请求类]触发玩家事件
    /// </summary>
    public partial class ReqTriggerPlayerEvent: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint EventTID;

        public override Packet Clone()
        {
            ReqTriggerPlayerEvent pkg = new ReqTriggerPlayerEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EventTID = EventTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EventTID);
            }
            else
            {
                EventTID = oByteArray.ReadUInt();
            }
        }
		public ReqTriggerPlayerEvent()
		{
			PacketID = 1547;
		}
    }

    /// <summary>
    ///  [请求类] 触发玩家事件 创建者
    /// </summary>
    [Package(1547)]
    public partial class ReqTriggerPlayerEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTriggerPlayerEvent();
        }
    }


    /// <summary>
    ///  [响应类]触发玩家事件
    /// </summary>
    public partial class ResTriggerPlayerEvent: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public PlayerEventData EventData = new PlayerEventData();
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResTriggerPlayerEvent pkg = new ResTriggerPlayerEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EventData = EventData.Clone() as PlayerEventData;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                EventData.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                EventData.Serializtion(oByteArray, bSerialize);
                Result = oByteArray.ReadUInt();
            }
        }
		public ResTriggerPlayerEvent()
		{
			PacketID = 1548;
		}
    }

    /// <summary>
    ///  [响应类] 触发玩家事件 创建者
    /// </summary>
    [Package(1548)]
    public partial class ResTriggerPlayerEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTriggerPlayerEvent();
        }
    }


    /// <summary>
    ///  [请求类]初始化玩家事件信息
    /// </summary>
    public partial class ReqInitPlayerEvent: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerEvent pkg = new ReqInitPlayerEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerEvent()
		{
			PacketID = 1549;
		}
    }

    /// <summary>
    ///  [请求类] 初始化玩家事件信息 创建者
    /// </summary>
    [Package(1549)]
    public partial class ReqInitPlayerEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerEvent();
        }
    }


    /// <summary>
    ///  [响应类]初始化玩家事件信息
    /// </summary>
    public partial class ResInitPlayerEvent: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<PlayerEventData> PlayerEvents = new List<PlayerEventData>();

        public override Packet Clone()
        {
            ResInitPlayerEvent pkg = new ResInitPlayerEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (PlayerEventData item in PlayerEvents)
            {
                pkg.PlayerEvents.Add(item.Clone() as PlayerEventData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)PlayerEvents.Count);
                for (int i = 0; i < PlayerEvents.Count; i++)
                {
                    PlayerEvents[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int PlayerEventsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerEventsCount; i++)
                {
                    PlayerEventData obj = new PlayerEventData();
                    obj.Serializtion(oByteArray, bSerialize);
                    PlayerEvents.Add(obj);
                }
            }
        }
		public ResInitPlayerEvent()
		{
			PacketID = 1550;
		}
    }

    /// <summary>
    ///  [响应类] 初始化玩家事件信息 创建者
    /// </summary>
    [Package(1550)]
    public partial class ResInitPlayerEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerEvent();
        }
    }


    /// <summary>
    ///  [请求类]刷新玩家境界信息
    /// </summary>
    public partial class ReqUpdatePlayerStateData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerStateData pkg = new ReqUpdatePlayerStateData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerStateData()
		{
			PacketID = 1551;
		}
    }

    /// <summary>
    ///  [请求类] 刷新玩家境界信息 创建者
    /// </summary>
    [Package(1551)]
    public partial class ReqUpdatePlayerStateDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerStateData();
        }
    }


    /// <summary>
    ///  [响应类]刷新玩家境界信息
    /// </summary>
    public partial class ResUpdatePlayerStateData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public PlayerStateData StateData = new PlayerStateData();

        public override Packet Clone()
        {
            ResUpdatePlayerStateData pkg = new ResUpdatePlayerStateData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.StateData = StateData.Clone() as PlayerStateData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                StateData.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                StateData.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdatePlayerStateData()
		{
			PacketID = 1552;
		}
    }

    /// <summary>
    ///  [响应类] 刷新玩家境界信息 创建者
    /// </summary>
    [Package(1552)]
    public partial class ResUpdatePlayerStateDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerStateData();
        }
    }


    /// <summary>
    ///  [请求类]境界升级通知
    /// </summary>
    public partial class ReqStateUpgradedNotice: Packet 
    {

        public override Packet Clone()
        {
            ReqStateUpgradedNotice pkg = new ReqStateUpgradedNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqStateUpgradedNotice()
		{
			PacketID = 1553;
		}
    }

    /// <summary>
    ///  [请求类] 境界升级通知 创建者
    /// </summary>
    [Package(1553)]
    public partial class ReqStateUpgradedNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStateUpgradedNotice();
        }
    }


    /// <summary>
    ///  [响应类]境界升级通知
    /// </summary>
    public partial class ResStateUpgradedNotice: Packet 
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public uint StateLevel;

        public override Packet Clone()
        {
            ResStateUpgradedNotice pkg = new ResStateUpgradedNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.StateLevel = StateLevel;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(StateLevel);
            }
            else
            {
                StateLevel = oByteArray.ReadUInt();
            }
        }
		public ResStateUpgradedNotice()
		{
			PacketID = 1554;
		}
    }

    /// <summary>
    ///  [响应类] 境界升级通知 创建者
    /// </summary>
    [Package(1554)]
    public partial class ResStateUpgradedNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStateUpgradedNotice();
        }
    }


    /// <summary>
    ///  [请求类]通知定时刷新的怪物存活情况
    /// </summary>
    public partial class ReqNoticeFixedTimeRefreshMonData: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeFixedTimeRefreshMonData pkg = new ReqNoticeFixedTimeRefreshMonData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeFixedTimeRefreshMonData()
		{
			PacketID = 1555;
		}
    }

    /// <summary>
    ///  [请求类] 通知定时刷新的怪物存活情况 创建者
    /// </summary>
    [Package(1555)]
    public partial class ReqNoticeFixedTimeRefreshMonDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeFixedTimeRefreshMonData();
        }
    }


    /// <summary>
    ///  [响应类]通知定时刷新的怪物存活情况
    /// </summary>
    public partial class ResNoticeFixedTimeRefreshMonData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ProtocolPair> MonDatas = new List<ProtocolPair>();

        public override Packet Clone()
        {
            ResNoticeFixedTimeRefreshMonData pkg = new ResNoticeFixedTimeRefreshMonData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ProtocolPair item in MonDatas)
            {
                pkg.MonDatas.Add(item.Clone() as ProtocolPair);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)MonDatas.Count);
                for (int i = 0; i < MonDatas.Count; i++)
                {
                    MonDatas[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int MonDatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MonDatasCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    MonDatas.Add(obj);
                }
            }
        }
		public ResNoticeFixedTimeRefreshMonData()
		{
			PacketID = 1556;
		}
    }

    /// <summary>
    ///  [响应类] 通知定时刷新的怪物存活情况 创建者
    /// </summary>
    [Package(1556)]
    public partial class ResNoticeFixedTimeRefreshMonDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeFixedTimeRefreshMonData();
        }
    }


    /// <summary>
    ///  [请求类]通知前端刷新定时刷新怪物存活情况
    /// </summary>
    public partial class ReqUpdateFixedTimeRefreshMonData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateFixedTimeRefreshMonData pkg = new ReqUpdateFixedTimeRefreshMonData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateFixedTimeRefreshMonData()
		{
			PacketID = 1557;
		}
    }

    /// <summary>
    ///  [请求类] 通知前端刷新定时刷新怪物存活情况 创建者
    /// </summary>
    [Package(1557)]
    public partial class ReqUpdateFixedTimeRefreshMonDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateFixedTimeRefreshMonData();
        }
    }


    /// <summary>
    ///  [响应类]通知前端刷新定时刷新怪物存活情况
    /// </summary>
    public partial class ResUpdateFixedTimeRefreshMonData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ResUpdateFixedTimeRefreshMonData pkg = new ResUpdateFixedTimeRefreshMonData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ResUpdateFixedTimeRefreshMonData()
		{
			PacketID = 1558;
		}
    }

    /// <summary>
    ///  [响应类] 通知前端刷新定时刷新怪物存活情况 创建者
    /// </summary>
    [Package(1558)]
    public partial class ResUpdateFixedTimeRefreshMonDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateFixedTimeRefreshMonData();
        }
    }


    /// <summary>
    ///  [请求类]升级打宝精灵
    /// </summary>
    public partial class ReqUpgradeElvs: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ElvsTID;
        /// <summary>
        /// 是否自动从商城购买升级道具
        /// </summary>
        public bool AutoBuy;

        public override Packet Clone()
        {
            ReqUpgradeElvs pkg = new ReqUpgradeElvs();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ElvsTID = ElvsTID;
            pkg.AutoBuy = AutoBuy;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ElvsTID);
                oByteArray.WriteBoolean(AutoBuy);
            }
            else
            {
                ElvsTID = oByteArray.ReadUInt();
                AutoBuy = oByteArray.ReadBoolean();
            }
        }
		public ReqUpgradeElvs()
		{
			PacketID = 1559;
		}
    }

    /// <summary>
    ///  [请求类] 升级打宝精灵 创建者
    /// </summary>
    [Package(1559)]
    public partial class ReqUpgradeElvsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeElvs();
        }
    }


    /// <summary>
    ///  [响应类]升级打宝精灵
    /// </summary>
    public partial class ResUpgradeElvs: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ElvsTID;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUpgradeElvs pkg = new ResUpgradeElvs();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ElvsTID = ElvsTID;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ElvsTID);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                ElvsTID = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeElvs()
		{
			PacketID = 1560;
		}
    }

    /// <summary>
    ///  [响应类] 升级打宝精灵 创建者
    /// </summary>
    [Package(1560)]
    public partial class ResUpgradeElvsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeElvs();
        }
    }


    /// <summary>
    ///  [请求类]激活打宝精灵
    /// </summary>
    public partial class ReqActivateElvs: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ElvsTID;

        public override Packet Clone()
        {
            ReqActivateElvs pkg = new ReqActivateElvs();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ElvsTID = ElvsTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ElvsTID);
            }
            else
            {
                ElvsTID = oByteArray.ReadUInt();
            }
        }
		public ReqActivateElvs()
		{
			PacketID = 1561;
		}
    }

    /// <summary>
    ///  [请求类] 激活打宝精灵 创建者
    /// </summary>
    [Package(1561)]
    public partial class ReqActivateElvsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqActivateElvs();
        }
    }


    /// <summary>
    ///  [响应类]激活打宝精灵
    /// </summary>
    public partial class ResActivateElvs: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ElvsTID;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResActivateElvs pkg = new ResActivateElvs();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ElvsTID = ElvsTID;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ElvsTID);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                ElvsTID = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResActivateElvs()
		{
			PacketID = 1562;
		}
    }

    /// <summary>
    ///  [响应类] 激活打宝精灵 创建者
    /// </summary>
    [Package(1562)]
    public partial class ResActivateElvsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResActivateElvs();
        }
    }


    /// <summary>
    ///  [请求类]玩家刷新黑市物品(市场)
    /// </summary>
    public partial class ReqRefreshBlackMarketItem: Packet 
    {

        public override Packet Clone()
        {
            ReqRefreshBlackMarketItem pkg = new ReqRefreshBlackMarketItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRefreshBlackMarketItem()
		{
			PacketID = 1563;
		}
    }

    /// <summary>
    ///  [请求类] 玩家刷新黑市物品(市场) 创建者
    /// </summary>
    [Package(1563)]
    public partial class ReqRefreshBlackMarketItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRefreshBlackMarketItem();
        }
    }


    /// <summary>
    ///  [响应类]玩家刷新黑市物品(市场)
    /// </summary>
    public partial class ResRefreshBlackMarketItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResRefreshBlackMarketItem pkg = new ResRefreshBlackMarketItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResRefreshBlackMarketItem()
		{
			PacketID = 1564;
		}
    }

    /// <summary>
    ///  [响应类] 玩家刷新黑市物品(市场) 创建者
    /// </summary>
    [Package(1564)]
    public partial class ResRefreshBlackMarketItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRefreshBlackMarketItem();
        }
    }


    /// <summary>
    ///  [请求类]通知打宝精灵等级
    /// </summary>
    public partial class ReqNoticeElvesLv: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeElvesLv pkg = new ReqNoticeElvesLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeElvesLv()
		{
			PacketID = 1565;
		}
    }

    /// <summary>
    ///  [请求类] 通知打宝精灵等级 创建者
    /// </summary>
    [Package(1565)]
    public partial class ReqNoticeElvesLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeElvesLv();
        }
    }


    /// <summary>
    ///  [响应类]通知打宝精灵等级
    /// </summary>
    public partial class ResNoticeElvesLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Level;
        /// <summary>
        /// 
        /// </summary>
        public uint ElvsTID;

        public override Packet Clone()
        {
            ResNoticeElvesLv pkg = new ResNoticeElvesLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Level = Level;
            pkg.ElvsTID = ElvsTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Level);
                oByteArray.WriteUInt(ElvsTID);
            }
            else
            {
                Level = oByteArray.ReadUInt();
                ElvsTID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeElvesLv()
		{
			PacketID = 1566;
		}
    }

    /// <summary>
    ///  [响应类] 通知打宝精灵等级 创建者
    /// </summary>
    [Package(1566)]
    public partial class ResNoticeElvesLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeElvesLv();
        }
    }


    /// <summary>
    ///  [请求类]变更打宝精灵跟随状态
    /// </summary>
    public partial class ReqChangeElvesFollowStatus: Packet 
    {
        /// <summary>
        /// 跟随精灵tid,0为不跟随
        /// </summary>
        public uint FollowElvs;

        public override Packet Clone()
        {
            ReqChangeElvesFollowStatus pkg = new ReqChangeElvesFollowStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FollowElvs = FollowElvs;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(FollowElvs);
            }
            else
            {
                FollowElvs = oByteArray.ReadUInt();
            }
        }
		public ReqChangeElvesFollowStatus()
		{
			PacketID = 1567;
		}
    }

    /// <summary>
    ///  [请求类] 变更打宝精灵跟随状态 创建者
    /// </summary>
    [Package(1567)]
    public partial class ReqChangeElvesFollowStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeElvesFollowStatus();
        }
    }


    /// <summary>
    ///  [响应类]变更打宝精灵跟随状态
    /// </summary>
    public partial class ResChangeElvesFollowStatus: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 跟随精灵tid,0为不跟随
        /// </summary>
        public uint FollowElvs;

        public override Packet Clone()
        {
            ResChangeElvesFollowStatus pkg = new ResChangeElvesFollowStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.FollowElvs = FollowElvs;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(FollowElvs);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                FollowElvs = oByteArray.ReadUInt();
            }
        }
		public ResChangeElvesFollowStatus()
		{
			PacketID = 1568;
		}
    }

    /// <summary>
    ///  [响应类] 变更打宝精灵跟随状态 创建者
    /// </summary>
    [Package(1568)]
    public partial class ResChangeElvesFollowStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeElvesFollowStatus();
        }
    }


    /// <summary>
    ///  [请求类]变更打宝精灵外观
    /// </summary>
    public partial class ReqChangeElvesAppearence: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint AppearenceID;

        public override Packet Clone()
        {
            ReqChangeElvesAppearence pkg = new ReqChangeElvesAppearence();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.AppearenceID = AppearenceID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(AppearenceID);
            }
            else
            {
                AppearenceID = oByteArray.ReadUInt();
            }
        }
		public ReqChangeElvesAppearence()
		{
			PacketID = 1569;
		}
    }

    /// <summary>
    ///  [请求类] 变更打宝精灵外观 创建者
    /// </summary>
    [Package(1569)]
    public partial class ReqChangeElvesAppearenceCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeElvesAppearence();
        }
    }


    /// <summary>
    ///  [响应类]变更打宝精灵外观
    /// </summary>
    public partial class ResChangeElvesAppearence: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint AppearenceID;

        public override Packet Clone()
        {
            ResChangeElvesAppearence pkg = new ResChangeElvesAppearence();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.AppearenceID = AppearenceID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(AppearenceID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                AppearenceID = oByteArray.ReadUInt();
            }
        }
		public ResChangeElvesAppearence()
		{
			PacketID = 1570;
		}
    }

    /// <summary>
    ///  [响应类] 变更打宝精灵外观 创建者
    /// </summary>
    [Package(1570)]
    public partial class ResChangeElvesAppearenceCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeElvesAppearence();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家杀怪首爆
    /// </summary>
    public partial class ReqPlayerFirstDrop: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MonID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;

        public override Packet Clone()
        {
            ReqPlayerFirstDrop pkg = new ReqPlayerFirstDrop();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapGuid = MapGuid;
            pkg.MapID = MapID;
            pkg.MonID = MonID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MonID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
            }
            else
            {
                MapGuid = oByteArray.ReadUInt64();
                MapID = oByteArray.ReadUInt();
                MonID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
            }
        }
		public ReqPlayerFirstDrop()
		{
			PacketID = 1571;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家杀怪首爆 创建者
    /// </summary>
    [Package(1571)]
    public partial class ReqPlayerFirstDropCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerFirstDrop();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家杀怪首爆
    /// </summary>
    public partial class ResPlayerFirstDrop: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public uint MonID;
        /// <summary>
        /// 首爆掉落
        /// </summary>
        public List<uint> FirstDrop = new List<uint>();

        public override Packet Clone()
        {
            ResPlayerFirstDrop pkg = new ResPlayerFirstDrop();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapGuid = MapGuid;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.MonID = MonID;
            foreach (var item in FirstDrop)
            {
                pkg.FirstDrop.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(MonID);
                oByteArray.WriteUShort((ushort)FirstDrop.Count);
                for (int i = 0; i < FirstDrop.Count; i++)
                {
                    oByteArray.WriteUInt(FirstDrop[i]);
                }
            }
            else
            {
                MapGuid = oByteArray.ReadUInt64();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                MonID = oByteArray.ReadUInt();
                int FirstDropCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < FirstDropCount; i++)
                {
                    FirstDrop.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResPlayerFirstDrop()
		{
			PacketID = 1572;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家杀怪首爆 创建者
    /// </summary>
    [Package(1572)]
    public partial class ResPlayerFirstDropCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerFirstDrop();
        }
    }


    /// <summary>
    ///  [请求类]初始化玩家首爆数据
    /// </summary>
    public partial class ReqInitPlayerFirstDrop: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerFirstDrop pkg = new ReqInitPlayerFirstDrop();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerFirstDrop()
		{
			PacketID = 1573;
		}
    }

    /// <summary>
    ///  [请求类] 初始化玩家首爆数据 创建者
    /// </summary>
    [Package(1573)]
    public partial class ReqInitPlayerFirstDropCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerFirstDrop();
        }
    }


    /// <summary>
    ///  [响应类]初始化玩家首爆数据
    /// </summary>
    public partial class ResInitPlayerFirstDrop: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string FirstDrop;

        public override Packet Clone()
        {
            ResInitPlayerFirstDrop pkg = new ResInitPlayerFirstDrop();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FirstDrop = FirstDrop;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(FirstDrop);
            }
            else
            {
                FirstDrop = oByteArray.ReadUTF();
            }
        }
		public ResInitPlayerFirstDrop()
		{
			PacketID = 1574;
		}
    }

    /// <summary>
    ///  [响应类] 初始化玩家首爆数据 创建者
    /// </summary>
    [Package(1574)]
    public partial class ResInitPlayerFirstDropCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerFirstDrop();
        }
    }


    /// <summary>
    ///  [请求类]新增机器人信息
    /// </summary>
    public partial class ReqAddRobotData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public RobotData Data = new RobotData();

        public override Packet Clone()
        {
            ReqAddRobotData pkg = new ReqAddRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as RobotData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqAddRobotData()
		{
			PacketID = 1575;
		}
    }

    /// <summary>
    ///  [请求类] 新增机器人信息 创建者
    /// </summary>
    [Package(1575)]
    public partial class ReqAddRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddRobotData();
        }
    }


    /// <summary>
    ///  [响应类]新增机器人信息
    /// </summary>
    public partial class ResAddRobotData: Packet 
    {

        public override Packet Clone()
        {
            ResAddRobotData pkg = new ResAddRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResAddRobotData()
		{
			PacketID = 1576;
		}
    }

    /// <summary>
    ///  [响应类] 新增机器人信息 创建者
    /// </summary>
    [Package(1576)]
    public partial class ResAddRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddRobotData();
        }
    }


    /// <summary>
    ///  [请求类]删除机器人信息
    /// </summary>
    public partial class ReqDelRobotData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong DataGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint RobotType;

        public override Packet Clone()
        {
            ReqDelRobotData pkg = new ReqDelRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DataGuid = DataGuid;
            pkg.RobotType = RobotType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(DataGuid);
                oByteArray.WriteUInt(RobotType);
            }
            else
            {
                DataGuid = oByteArray.ReadUInt64();
                RobotType = oByteArray.ReadUInt();
            }
        }
		public ReqDelRobotData()
		{
			PacketID = 1577;
		}
    }

    /// <summary>
    ///  [请求类] 删除机器人信息 创建者
    /// </summary>
    [Package(1577)]
    public partial class ReqDelRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDelRobotData();
        }
    }


    /// <summary>
    ///  [响应类]删除机器人信息
    /// </summary>
    public partial class ResDelRobotData: Packet 
    {

        public override Packet Clone()
        {
            ResDelRobotData pkg = new ResDelRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResDelRobotData()
		{
			PacketID = 1578;
		}
    }

    /// <summary>
    ///  [响应类] 删除机器人信息 创建者
    /// </summary>
    [Package(1578)]
    public partial class ResDelRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDelRobotData();
        }
    }


    /// <summary>
    ///  [请求类]初始化加载机器人信息
    /// </summary>
    public partial class ReqInitRobotData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitRobotData pkg = new ReqInitRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitRobotData()
		{
			PacketID = 1579;
		}
    }

    /// <summary>
    ///  [请求类] 初始化加载机器人信息 创建者
    /// </summary>
    [Package(1579)]
    public partial class ReqInitRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitRobotData();
        }
    }


    /// <summary>
    ///  [响应类]初始化加载机器人信息
    /// </summary>
    public partial class ResInitRobotData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<RobotData> Datas = new List<RobotData>();

        public override Packet Clone()
        {
            ResInitRobotData pkg = new ResInitRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (RobotData item in Datas)
            {
                pkg.Datas.Add(item.Clone() as RobotData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Datas.Count);
                for (int i = 0; i < Datas.Count; i++)
                {
                    Datas[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int DatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DatasCount; i++)
                {
                    RobotData obj = new RobotData();
                    obj.Serializtion(oByteArray, bSerialize);
                    Datas.Add(obj);
                }
            }
        }
		public ResInitRobotData()
		{
			PacketID = 1580;
		}
    }

    /// <summary>
    ///  [响应类] 初始化加载机器人信息 创建者
    /// </summary>
    [Package(1580)]
    public partial class ResInitRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitRobotData();
        }
    }


    /// <summary>
    ///  [请求类]升级铭文石
    /// </summary>
    public partial class ReqUpgradeInscriptionStone: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqUpgradeInscriptionStone pkg = new ReqUpgradeInscriptionStone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqUpgradeInscriptionStone()
		{
			PacketID = 1581;
		}
    }

    /// <summary>
    ///  [请求类] 升级铭文石 创建者
    /// </summary>
    [Package(1581)]
    public partial class ReqUpgradeInscriptionStoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeInscriptionStone();
        }
    }


    /// <summary>
    ///  [响应类]升级铭文石
    /// </summary>
    public partial class ResUpgradeInscriptionStone: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUpgradeInscriptionStone pkg = new ResUpgradeInscriptionStone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeInscriptionStone()
		{
			PacketID = 1582;
		}
    }

    /// <summary>
    ///  [响应类] 升级铭文石 创建者
    /// </summary>
    [Package(1582)]
    public partial class ResUpgradeInscriptionStoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeInscriptionStone();
        }
    }


    /// <summary>
    ///  [请求类]玩家完成组装活动
    /// </summary>
    public partial class ReqCompleteAssembleActivity: Packet 
    {
        /// <summary>
        /// 活动类型1开服活动2公测活动3合服活动4节日活动5周期活动
        /// </summary>
        public byte Type;
        /// <summary>
        /// 活动子类型
        /// </summary>
        public uint SubType;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint Data;

        public override Packet Clone()
        {
            ReqCompleteAssembleActivity pkg = new ReqCompleteAssembleActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.TitleTID = TitleTID;
            pkg.TID = TID;
            pkg.Data = Data;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(SubType);
                oByteArray.WriteUInt(TitleTID);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Data);
            }
            else
            {
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadUInt();
                TitleTID = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                Data = oByteArray.ReadUInt();
            }
        }
		public ReqCompleteAssembleActivity()
		{
			PacketID = 1583;
		}
    }

    /// <summary>
    ///  [请求类] 玩家完成组装活动 创建者
    /// </summary>
    [Package(1583)]
    public partial class ReqCompleteAssembleActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCompleteAssembleActivity();
        }
    }


    /// <summary>
    ///  [响应类]玩家完成组装活动
    /// </summary>
    public partial class ResCompleteAssembleActivity: Packet 
    {
        /// <summary>
        /// 0成功
        /// </summary>
        public uint Result;
        /// <summary>
        /// 活动类型1开服活动2公测活动3合服活动4节日活动5周期活动
        /// </summary>
        public byte Type;
        /// <summary>
        /// 活动子类型
        /// </summary>
        public uint SubType;
        /// <summary>
        /// 
        /// </summary>
        public uint TitleTID;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResCompleteAssembleActivity pkg = new ResCompleteAssembleActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.SubType = SubType;
            pkg.TitleTID = TitleTID;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteByte(Type);
                oByteArray.WriteUInt(SubType);
                oByteArray.WriteUInt(TitleTID);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadByte();
                SubType = oByteArray.ReadUInt();
                TitleTID = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResCompleteAssembleActivity()
		{
			PacketID = 1584;
		}
    }

    /// <summary>
    ///  [响应类] 玩家完成组装活动 创建者
    /// </summary>
    [Package(1584)]
    public partial class ResCompleteAssembleActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCompleteAssembleActivity();
        }
    }


    /// <summary>
    ///  [请求类]卸下铭文石
    /// </summary>
    public partial class ReqUnequipInscriptionStone: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqUnequipInscriptionStone pkg = new ReqUnequipInscriptionStone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqUnequipInscriptionStone()
		{
			PacketID = 1585;
		}
    }

    /// <summary>
    ///  [请求类] 卸下铭文石 创建者
    /// </summary>
    [Package(1585)]
    public partial class ReqUnequipInscriptionStoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUnequipInscriptionStone();
        }
    }


    /// <summary>
    ///  [响应类]卸下铭文石
    /// </summary>
    public partial class ResUnequipInscriptionStone: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUnequipInscriptionStone pkg = new ResUnequipInscriptionStone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUnequipInscriptionStone()
		{
			PacketID = 1586;
		}
    }

    /// <summary>
    ///  [响应类] 卸下铭文石 创建者
    /// </summary>
    [Package(1586)]
    public partial class ResUnequipInscriptionStoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUnequipInscriptionStone();
        }
    }


    /// <summary>
    ///  [请求类]通知刷新铭文石套装等级
    /// </summary>
    public partial class ReqNoticeUpdateInscriptionLevel: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint PenaltyLv;
        /// <summary>
        /// 
        /// </summary>
        public uint ResistLv;

        public override Packet Clone()
        {
            ReqNoticeUpdateInscriptionLevel pkg = new ReqNoticeUpdateInscriptionLevel();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PenaltyLv = PenaltyLv;
            pkg.ResistLv = ResistLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PenaltyLv);
                oByteArray.WriteUInt(ResistLv);
            }
            else
            {
                PenaltyLv = oByteArray.ReadUInt();
                ResistLv = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeUpdateInscriptionLevel()
		{
			PacketID = 1587;
		}
    }

    /// <summary>
    ///  [请求类] 通知刷新铭文石套装等级 创建者
    /// </summary>
    [Package(1587)]
    public partial class ReqNoticeUpdateInscriptionLevelCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateInscriptionLevel();
        }
    }


    /// <summary>
    ///  [响应类]通知刷新铭文石套装等级
    /// </summary>
    public partial class ResNoticeUpdateInscriptionLevel: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateInscriptionLevel pkg = new ResNoticeUpdateInscriptionLevel();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateInscriptionLevel()
		{
			PacketID = 1588;
		}
    }

    /// <summary>
    ///  [响应类] 通知刷新铭文石套装等级 创建者
    /// </summary>
    [Package(1588)]
    public partial class ResNoticeUpdateInscriptionLevelCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateInscriptionLevel();
        }
    }


    /// <summary>
    ///  [请求类]刷新安全区挂机机器人
    /// </summary>
    public partial class ReqAddSafePointRobot: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public RobotData Data = new RobotData();

        public override Packet Clone()
        {
            ReqAddSafePointRobot pkg = new ReqAddSafePointRobot();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as RobotData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqAddSafePointRobot()
		{
			PacketID = 1589;
		}
    }

    /// <summary>
    ///  [请求类] 刷新安全区挂机机器人 创建者
    /// </summary>
    [Package(1589)]
    public partial class ReqAddSafePointRobotCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddSafePointRobot();
        }
    }


    /// <summary>
    ///  [响应类]刷新安全区挂机机器人
    /// </summary>
    public partial class ResAddSafePointRobot: Packet 
    {

        public override Packet Clone()
        {
            ResAddSafePointRobot pkg = new ResAddSafePointRobot();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResAddSafePointRobot()
		{
			PacketID = 1590;
		}
    }

    /// <summary>
    ///  [响应类] 刷新安全区挂机机器人 创建者
    /// </summary>
    [Package(1590)]
    public partial class ResAddSafePointRobotCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddSafePointRobot();
        }
    }


    /// <summary>
    ///  [请求类]删除安全区挂机机器人
    /// </summary>
    public partial class ReqDelSafePointRobot: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public ulong RobotGuid;

        public override Packet Clone()
        {
            ReqDelSafePointRobot pkg = new ReqDelSafePointRobot();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.RobotGuid = RobotGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(RobotGuid);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                RobotGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqDelSafePointRobot()
		{
			PacketID = 1591;
		}
    }

    /// <summary>
    ///  [请求类] 删除安全区挂机机器人 创建者
    /// </summary>
    [Package(1591)]
    public partial class ReqDelSafePointRobotCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDelSafePointRobot();
        }
    }


    /// <summary>
    ///  [响应类]删除安全区挂机机器人
    /// </summary>
    public partial class ResDelSafePointRobot: Packet 
    {

        public override Packet Clone()
        {
            ResDelSafePointRobot pkg = new ResDelSafePointRobot();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResDelSafePointRobot()
		{
			PacketID = 1592;
		}
    }

    /// <summary>
    ///  [响应类] 删除安全区挂机机器人 创建者
    /// </summary>
    [Package(1592)]
    public partial class ResDelSafePointRobotCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDelSafePointRobot();
        }
    }


    /// <summary>
    ///  [请求类]领取累充每日充值奖励
    /// </summary>
    public partial class ReqGetDailyRechargeAward: Packet 
    {

        public override Packet Clone()
        {
            ReqGetDailyRechargeAward pkg = new ReqGetDailyRechargeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetDailyRechargeAward()
		{
			PacketID = 1593;
		}
    }

    /// <summary>
    ///  [请求类] 领取累充每日充值奖励 创建者
    /// </summary>
    [Package(1593)]
    public partial class ReqGetDailyRechargeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetDailyRechargeAward();
        }
    }


    /// <summary>
    ///  [响应类]领取累充每日充值奖励
    /// </summary>
    public partial class ResGetDailyRechargeAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResGetDailyRechargeAward pkg = new ResGetDailyRechargeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResGetDailyRechargeAward()
		{
			PacketID = 1594;
		}
    }

    /// <summary>
    ///  [响应类] 领取累充每日充值奖励 创建者
    /// </summary>
    [Package(1594)]
    public partial class ResGetDailyRechargeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetDailyRechargeAward();
        }
    }


    /// <summary>
    ///  [请求类]获取累充奖励
    /// </summary>
    public partial class ReqGetCumulRechargeAward: Packet 
    {
        /// <summary>
        /// PermanenAccumulationPayTemplate[TID]
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqGetCumulRechargeAward pkg = new ReqGetCumulRechargeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqGetCumulRechargeAward()
		{
			PacketID = 1595;
		}
    }

    /// <summary>
    ///  [请求类] 获取累充奖励 创建者
    /// </summary>
    [Package(1595)]
    public partial class ReqGetCumulRechargeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetCumulRechargeAward();
        }
    }


    /// <summary>
    ///  [响应类]获取累充奖励
    /// </summary>
    public partial class ResGetCumulRechargeAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// PermanenAccumulationPayTemplate[TID]
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResGetCumulRechargeAward pkg = new ResGetCumulRechargeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResGetCumulRechargeAward()
		{
			PacketID = 1596;
		}
    }

    /// <summary>
    ///  [响应类] 获取累充奖励 创建者
    /// </summary>
    [Package(1596)]
    public partial class ResGetCumulRechargeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetCumulRechargeAward();
        }
    }


    /// <summary>
    ///  [请求类]更新累充充值信息
    /// </summary>
    public partial class ReqUpdateRechargeInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateRechargeInfo pkg = new ReqUpdateRechargeInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateRechargeInfo()
		{
			PacketID = 1597;
		}
    }

    /// <summary>
    ///  [请求类] 更新累充充值信息 创建者
    /// </summary>
    [Package(1597)]
    public partial class ReqUpdateRechargeInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRechargeInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新累充充值信息
    /// </summary>
    public partial class ResUpdateRechargeInfo: Packet 
    {
        /// <summary>
        /// AccumulationPayTemplate[Cycle]
        /// </summary>
        public uint Cycle;
        /// <summary>
        /// AccumulationPayTemplate[Day]
        /// </summary>
        public uint Day;
        /// <summary>
        /// 累充每日奖励是否领取
        /// </summary>
        public uint RechargeDailyAwardState;
        /// <summary>
        /// 荣耀值
        /// </summary>
        public uint HonourValue;
        /// <summary>
        /// 上次累充达成时间
        /// </summary>
        public uint LastCumulRechargeTime;
        /// <summary>
        /// 累充天数
        /// </summary>
        public uint RechargeDays;
        /// <summary>
        /// 
        /// </summary>
        public string CumulRechargeInfo;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint RechargeResetTime;

        public override Packet Clone()
        {
            ResUpdateRechargeInfo pkg = new ResUpdateRechargeInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Cycle = Cycle;
            pkg.Day = Day;
            pkg.RechargeDailyAwardState = RechargeDailyAwardState;
            pkg.HonourValue = HonourValue;
            pkg.LastCumulRechargeTime = LastCumulRechargeTime;
            pkg.RechargeDays = RechargeDays;
            pkg.CumulRechargeInfo = CumulRechargeInfo;
            pkg.PlayerGuid = PlayerGuid;
            pkg.RechargeResetTime = RechargeResetTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Cycle);
                oByteArray.WriteUInt(Day);
                oByteArray.WriteUInt(RechargeDailyAwardState);
                oByteArray.WriteUInt(HonourValue);
                oByteArray.WriteUInt(LastCumulRechargeTime);
                oByteArray.WriteUInt(RechargeDays);
                oByteArray.WriteUTF(CumulRechargeInfo);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(RechargeResetTime);
            }
            else
            {
                Cycle = oByteArray.ReadUInt();
                Day = oByteArray.ReadUInt();
                RechargeDailyAwardState = oByteArray.ReadUInt();
                HonourValue = oByteArray.ReadUInt();
                LastCumulRechargeTime = oByteArray.ReadUInt();
                RechargeDays = oByteArray.ReadUInt();
                CumulRechargeInfo = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadUInt64();
                RechargeResetTime = oByteArray.ReadUInt();
            }
        }
		public ResUpdateRechargeInfo()
		{
			PacketID = 1598;
		}
    }

    /// <summary>
    ///  [响应类] 更新累充充值信息 创建者
    /// </summary>
    [Package(1598)]
    public partial class ResUpdateRechargeInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRechargeInfo();
        }
    }


    /// <summary>
    ///  [请求类]刷新机器人信息
    /// </summary>
    public partial class ReqUpdateRobotData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public RobotData Data = new RobotData();

        public override Packet Clone()
        {
            ReqUpdateRobotData pkg = new ReqUpdateRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as RobotData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqUpdateRobotData()
		{
			PacketID = 1599;
		}
    }

    /// <summary>
    ///  [请求类] 刷新机器人信息 创建者
    /// </summary>
    [Package(1599)]
    public partial class ReqUpdateRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRobotData();
        }
    }


    /// <summary>
    ///  [响应类]刷新机器人信息
    /// </summary>
    public partial class ResUpdateRobotData: Packet 
    {

        public override Packet Clone()
        {
            ResUpdateRobotData pkg = new ResUpdateRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdateRobotData()
		{
			PacketID = 1600;
		}
    }

    /// <summary>
    ///  [响应类] 刷新机器人信息 创建者
    /// </summary>
    [Package(1600)]
    public partial class ResUpdateRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRobotData();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服怪物死亡刷新
    /// </summary>
    public partial class ReqNoticeMonsterDeadRefresh: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeMonsterDeadRefresh pkg = new ReqNoticeMonsterDeadRefresh();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeMonsterDeadRefresh()
		{
			PacketID = 1601;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服怪物死亡刷新 创建者
    /// </summary>
    [Package(1601)]
    public partial class ReqNoticeMonsterDeadRefreshCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeMonsterDeadRefresh();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服怪物死亡刷新
    /// </summary>
    public partial class ResNoticeMonsterDeadRefresh: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MonID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// MonsterRefreshTemplate[TID];
        /// </summary>
        public uint RefreshRule;

        public override Packet Clone()
        {
            ResNoticeMonsterDeadRefresh pkg = new ResNoticeMonsterDeadRefresh();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MonID = MonID;
            pkg.MapID = MapID;
            pkg.RefreshRule = RefreshRule;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MonID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(RefreshRule);
            }
            else
            {
                MonID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                RefreshRule = oByteArray.ReadUInt();
            }
        }
		public ResNoticeMonsterDeadRefresh()
		{
			PacketID = 1602;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服怪物死亡刷新 创建者
    /// </summary>
    [Package(1602)]
    public partial class ResNoticeMonsterDeadRefreshCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeMonsterDeadRefresh();
        }
    }


    /// <summary>
    ///  [请求类]初始化玩家累计充值
    /// </summary>
    public partial class ReqInitPlayerRecharge: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerRecharge pkg = new ReqInitPlayerRecharge();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerRecharge()
		{
			PacketID = 1603;
		}
    }

    /// <summary>
    ///  [请求类] 初始化玩家累计充值 创建者
    /// </summary>
    [Package(1603)]
    public partial class ReqInitPlayerRechargeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerRecharge();
        }
    }


    /// <summary>
    ///  [响应类]初始化玩家累计充值
    /// </summary>
    public partial class ResInitPlayerRecharge: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint RechargeDailyAwardInfo;
        /// <summary>
        /// 
        /// </summary>
        public uint HonourValue;
        /// <summary>
        /// 
        /// </summary>
        public uint LastCumulRechargeTime;
        /// <summary>
        /// 
        /// </summary>
        public uint RechargeDays;
        /// <summary>
        /// 
        /// </summary>
        public string CumulRechargeInfo;
        /// <summary>
        /// 
        /// </summary>
        public uint Circle;
        /// <summary>
        /// 
        /// </summary>
        public uint Day;

        public override Packet Clone()
        {
            ResInitPlayerRecharge pkg = new ResInitPlayerRecharge();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RechargeDailyAwardInfo = RechargeDailyAwardInfo;
            pkg.HonourValue = HonourValue;
            pkg.LastCumulRechargeTime = LastCumulRechargeTime;
            pkg.RechargeDays = RechargeDays;
            pkg.CumulRechargeInfo = CumulRechargeInfo;
            pkg.Circle = Circle;
            pkg.Day = Day;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(RechargeDailyAwardInfo);
                oByteArray.WriteUInt(HonourValue);
                oByteArray.WriteUInt(LastCumulRechargeTime);
                oByteArray.WriteUInt(RechargeDays);
                oByteArray.WriteUTF(CumulRechargeInfo);
                oByteArray.WriteUInt(Circle);
                oByteArray.WriteUInt(Day);
            }
            else
            {
                RechargeDailyAwardInfo = oByteArray.ReadUInt();
                HonourValue = oByteArray.ReadUInt();
                LastCumulRechargeTime = oByteArray.ReadUInt();
                RechargeDays = oByteArray.ReadUInt();
                CumulRechargeInfo = oByteArray.ReadUTF();
                Circle = oByteArray.ReadUInt();
                Day = oByteArray.ReadUInt();
            }
        }
		public ResInitPlayerRecharge()
		{
			PacketID = 1604;
		}
    }

    /// <summary>
    ///  [响应类] 初始化玩家累计充值 创建者
    /// </summary>
    [Package(1604)]
    public partial class ResInitPlayerRechargeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerRecharge();
        }
    }


    /// <summary>
    ///  [请求类]熔炉抽奖
    /// </summary>
    public partial class ReqSmelterdraw: Packet 
    {
        /// <summary>
        /// 1:天工2:荒古
        /// </summary>
        public uint Type;
        /// <summary>
        /// 1:单抽10:十连抽20:二十抽
        /// </summary>
        public uint SubType;

        public override Packet Clone()
        {
            ReqSmelterdraw pkg = new ReqSmelterdraw();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.SubType = SubType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(SubType);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                SubType = oByteArray.ReadUInt();
            }
        }
		public ReqSmelterdraw()
		{
			PacketID = 1605;
		}
    }

    /// <summary>
    ///  [请求类] 熔炉抽奖 创建者
    /// </summary>
    [Package(1605)]
    public partial class ReqSmelterdrawCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSmelterdraw();
        }
    }


    /// <summary>
    ///  [响应类]熔炉抽奖
    /// </summary>
    public partial class ResSmelterdraw: Packet 
    {
        /// <summary>
        /// 1:天工2:荒古
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public List<uint> Awards = new List<uint>();

        public override Packet Clone()
        {
            ResSmelterdraw pkg = new ResSmelterdraw();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Result = Result;
            foreach (var item in Awards)
            {
                pkg.Awards.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)Awards.Count);
                for (int i = 0; i < Awards.Count; i++)
                {
                    oByteArray.WriteUInt(Awards[i]);
                }
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                int AwardsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AwardsCount; i++)
                {
                    Awards.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResSmelterdraw()
		{
			PacketID = 1606;
		}
    }

    /// <summary>
    ///  [响应类] 熔炉抽奖 创建者
    /// </summary>
    [Package(1606)]
    public partial class ResSmelterdrawCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSmelterdraw();
        }
    }


    /// <summary>
    ///  [请求类]升级帮会战旗
    /// </summary>
    public partial class ReqUpgradeGuildFlagLv: Packet 
    {

        public override Packet Clone()
        {
            ReqUpgradeGuildFlagLv pkg = new ReqUpgradeGuildFlagLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpgradeGuildFlagLv()
		{
			PacketID = 1607;
		}
    }

    /// <summary>
    ///  [请求类] 升级帮会战旗 创建者
    /// </summary>
    [Package(1607)]
    public partial class ReqUpgradeGuildFlagLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeGuildFlagLv();
        }
    }


    /// <summary>
    ///  [响应类]升级帮会战旗
    /// </summary>
    public partial class ResUpgradeGuildFlagLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUpgradeGuildFlagLv pkg = new ResUpgradeGuildFlagLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeGuildFlagLv()
		{
			PacketID = 1608;
		}
    }

    /// <summary>
    ///  [响应类] 升级帮会战旗 创建者
    /// </summary>
    [Package(1608)]
    public partial class ResUpgradeGuildFlagLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeGuildFlagLv();
        }
    }


    /// <summary>
    ///  [请求类]进入帮会驻地
    /// </summary>
    public partial class ReqEnterGuildStation: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterGuildStation pkg = new ReqEnterGuildStation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterGuildStation()
		{
			PacketID = 1609;
		}
    }

    /// <summary>
    ///  [请求类] 进入帮会驻地 创建者
    /// </summary>
    [Package(1609)]
    public partial class ReqEnterGuildStationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterGuildStation();
        }
    }


    /// <summary>
    ///  [响应类]进入帮会驻地
    /// </summary>
    public partial class ResEnterGuildStation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResEnterGuildStation pkg = new ResEnterGuildStation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResEnterGuildStation()
		{
			PacketID = 1610;
		}
    }

    /// <summary>
    ///  [响应类] 进入帮会驻地 创建者
    /// </summary>
    [Package(1610)]
    public partial class ResEnterGuildStationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterGuildStation();
        }
    }


    /// <summary>
    ///  [请求类]激活熔炉兵骨
    /// </summary>
    public partial class ReqActivateSmelterBone: Packet 
    {

        public override Packet Clone()
        {
            ReqActivateSmelterBone pkg = new ReqActivateSmelterBone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqActivateSmelterBone()
		{
			PacketID = 1611;
		}
    }

    /// <summary>
    ///  [请求类] 激活熔炉兵骨 创建者
    /// </summary>
    [Package(1611)]
    public partial class ReqActivateSmelterBoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqActivateSmelterBone();
        }
    }


    /// <summary>
    ///  [响应类]激活熔炉兵骨
    /// </summary>
    public partial class ResActivateSmelterBone: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResActivateSmelterBone pkg = new ResActivateSmelterBone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResActivateSmelterBone()
		{
			PacketID = 1612;
		}
    }

    /// <summary>
    ///  [响应类] 激活熔炉兵骨 创建者
    /// </summary>
    [Package(1612)]
    public partial class ResActivateSmelterBoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResActivateSmelterBone();
        }
    }


    /// <summary>
    ///  [请求类]兵骨部位升级
    /// </summary>
    public partial class ReqUpgradeSmelterBoneRegion: Packet 
    {

        public override Packet Clone()
        {
            ReqUpgradeSmelterBoneRegion pkg = new ReqUpgradeSmelterBoneRegion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpgradeSmelterBoneRegion()
		{
			PacketID = 1613;
		}
    }

    /// <summary>
    ///  [请求类] 兵骨部位升级 创建者
    /// </summary>
    [Package(1613)]
    public partial class ReqUpgradeSmelterBoneRegionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeSmelterBoneRegion();
        }
    }


    /// <summary>
    ///  [响应类]兵骨部位升级
    /// </summary>
    public partial class ResUpgradeSmelterBoneRegion: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUpgradeSmelterBoneRegion pkg = new ResUpgradeSmelterBoneRegion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeSmelterBoneRegion()
		{
			PacketID = 1614;
		}
    }

    /// <summary>
    ///  [响应类] 兵骨部位升级 创建者
    /// </summary>
    [Package(1614)]
    public partial class ResUpgradeSmelterBoneRegionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeSmelterBoneRegion();
        }
    }


    /// <summary>
    ///  [请求类]创建帮会驻地
    /// </summary>
    public partial class ReqCreateGuildStation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;

        public override Packet Clone()
        {
            ReqCreateGuildStation pkg = new ReqCreateGuildStation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildGuid = GuildGuid;
            pkg.MapID = MapID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUInt(MapID);
            }
            else
            {
                GuildGuid = oByteArray.ReadUInt64();
                MapID = oByteArray.ReadUInt();
            }
        }
		public ReqCreateGuildStation()
		{
			PacketID = 1615;
		}
    }

    /// <summary>
    ///  [请求类] 创建帮会驻地 创建者
    /// </summary>
    [Package(1615)]
    public partial class ReqCreateGuildStationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateGuildStation();
        }
    }


    /// <summary>
    ///  [响应类]创建帮会驻地
    /// </summary>
    public partial class ResCreateGuildStation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 
        /// </summary>
        public ulong MapGuid;

        public override Packet Clone()
        {
            ResCreateGuildStation pkg = new ResCreateGuildStation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildGuid = GuildGuid;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUInt64(MapGuid);
            }
            else
            {
                GuildGuid = oByteArray.ReadUInt64();
                MapGuid = oByteArray.ReadUInt64();
            }
        }
		public ResCreateGuildStation()
		{
			PacketID = 1616;
		}
    }

    /// <summary>
    ///  [响应类] 创建帮会驻地 创建者
    /// </summary>
    [Package(1616)]
    public partial class ResCreateGuildStationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateGuildStation();
        }
    }


    /// <summary>
    ///  [请求类]熔炼物品
    /// </summary>
    public partial class ReqSmeltItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> PosList = new List<uint>();

        public override Packet Clone()
        {
            ReqSmeltItem pkg = new ReqSmeltItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in PosList)
            {
                pkg.PosList.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < PosList.Count; i++)
                {
                      oByteArray.WriteUInt(PosList[i]);
                }
            }
            else
            {
                int PosListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PosListCount; i++)
                {
                    PosList.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqSmeltItem()
		{
			PacketID = 1617;
		}
    }

    /// <summary>
    ///  [请求类] 熔炼物品 创建者
    /// </summary>
    [Package(1617)]
    public partial class ReqSmeltItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSmeltItem();
        }
    }


    /// <summary>
    ///  [响应类]熔炼物品
    /// </summary>
    public partial class ResSmeltItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResSmeltItem pkg = new ResSmeltItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResSmeltItem()
		{
			PacketID = 1618;
		}
    }

    /// <summary>
    ///  [响应类] 熔炼物品 创建者
    /// </summary>
    [Package(1618)]
    public partial class ResSmeltItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSmeltItem();
        }
    }


    /// <summary>
    ///  [请求类]开始竞技场匹配
    /// </summary>
    public partial class ReqStartArenaMatching: Packet 
    {

        public override Packet Clone()
        {
            ReqStartArenaMatching pkg = new ReqStartArenaMatching();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqStartArenaMatching()
		{
			PacketID = 1619;
		}
    }

    /// <summary>
    ///  [请求类] 开始竞技场匹配 创建者
    /// </summary>
    [Package(1619)]
    public partial class ReqStartArenaMatchingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStartArenaMatching();
        }
    }


    /// <summary>
    ///  [响应类]开始竞技场匹配
    /// </summary>
    public partial class ResStartArenaMatching: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResStartArenaMatching pkg = new ResStartArenaMatching();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResStartArenaMatching()
		{
			PacketID = 1620;
		}
    }

    /// <summary>
    ///  [响应类] 开始竞技场匹配 创建者
    /// </summary>
    [Package(1620)]
    public partial class ResStartArenaMatchingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStartArenaMatching();
        }
    }


    /// <summary>
    ///  [请求类]结束竞技场匹配
    /// </summary>
    public partial class ReqStopArenaMatching: Packet 
    {

        public override Packet Clone()
        {
            ReqStopArenaMatching pkg = new ReqStopArenaMatching();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqStopArenaMatching()
		{
			PacketID = 1621;
		}
    }

    /// <summary>
    ///  [请求类] 结束竞技场匹配 创建者
    /// </summary>
    [Package(1621)]
    public partial class ReqStopArenaMatchingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStopArenaMatching();
        }
    }


    /// <summary>
    ///  [响应类]结束竞技场匹配
    /// </summary>
    public partial class ResStopArenaMatching: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Reason;
        /// <summary>
        /// 对手名字
        /// </summary>
        public string OpponentName;
        /// <summary>
        /// 对手等级
        /// </summary>
        public int OpponentLevel;
        /// <summary>
        /// 对手分数
        /// </summary>
        public int OppenentScore;
        /// <summary>
        /// 对手性别
        /// </summary>
        public int OpponentSex;
        /// <summary>
        /// 对手职业
        /// </summary>
        public int OpponentJob;

        public override Packet Clone()
        {
            ResStopArenaMatching pkg = new ResStopArenaMatching();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Reason = Reason;
            pkg.OpponentName = OpponentName;
            pkg.OpponentLevel = OpponentLevel;
            pkg.OppenentScore = OppenentScore;
            pkg.OpponentSex = OpponentSex;
            pkg.OpponentJob = OpponentJob;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Reason);
                oByteArray.WriteUTF(OpponentName);
                oByteArray.WriteInt(OpponentLevel);
                oByteArray.WriteInt(OppenentScore);
                oByteArray.WriteInt(OpponentSex);
                oByteArray.WriteInt(OpponentJob);
            }
            else
            {
                Reason = oByteArray.ReadUInt();
                OpponentName = oByteArray.ReadUTF();
                OpponentLevel = oByteArray.ReadInt();
                OppenentScore = oByteArray.ReadInt();
                OpponentSex = oByteArray.ReadInt();
                OpponentJob = oByteArray.ReadInt();
            }
        }
		public ResStopArenaMatching()
		{
			PacketID = 1622;
		}
    }

    /// <summary>
    ///  [响应类] 结束竞技场匹配 创建者
    /// </summary>
    [Package(1622)]
    public partial class ResStopArenaMatchingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStopArenaMatching();
        }
    }


    /// <summary>
    ///  [请求类]领取竞技场段位奖励
    /// </summary>
    public partial class ReqTakeArenaLevelAward: Packet 
    {
        /// <summary>
        /// 竞技场段位tid
        /// </summary>
        public uint TID;
        /// <summary>
        /// 1 普通给奖励 2 尊享奖励
        /// </summary>
        public uint AwardType;

        public override Packet Clone()
        {
            ReqTakeArenaLevelAward pkg = new ReqTakeArenaLevelAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.AwardType = AwardType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(AwardType);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                AwardType = oByteArray.ReadUInt();
            }
        }
		public ReqTakeArenaLevelAward()
		{
			PacketID = 1623;
		}
    }

    /// <summary>
    ///  [请求类] 领取竞技场段位奖励 创建者
    /// </summary>
    [Package(1623)]
    public partial class ReqTakeArenaLevelAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeArenaLevelAward();
        }
    }


    /// <summary>
    ///  [响应类]领取竞技场段位奖励
    /// </summary>
    public partial class ResTakeArenaLevelAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResTakeArenaLevelAward pkg = new ResTakeArenaLevelAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResTakeArenaLevelAward()
		{
			PacketID = 1624;
		}
    }

    /// <summary>
    ///  [响应类] 领取竞技场段位奖励 创建者
    /// </summary>
    [Package(1624)]
    public partial class ResTakeArenaLevelAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeArenaLevelAward();
        }
    }


    /// <summary>
    ///  [请求类]取消竞技场匹配
    /// </summary>
    public partial class ReqCancleArenaMatch: Packet 
    {

        public override Packet Clone()
        {
            ReqCancleArenaMatch pkg = new ReqCancleArenaMatch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCancleArenaMatch()
		{
			PacketID = 1625;
		}
    }

    /// <summary>
    ///  [请求类] 取消竞技场匹配 创建者
    /// </summary>
    [Package(1625)]
    public partial class ReqCancleArenaMatchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCancleArenaMatch();
        }
    }


    /// <summary>
    ///  [响应类]取消竞技场匹配
    /// </summary>
    public partial class ResCancleArenaMatch: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResCancleArenaMatch pkg = new ResCancleArenaMatch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResCancleArenaMatch()
		{
			PacketID = 1626;
		}
    }

    /// <summary>
    ///  [响应类] 取消竞技场匹配 创建者
    /// </summary>
    [Package(1626)]
    public partial class ResCancleArenaMatchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCancleArenaMatch();
        }
    }


    /// <summary>
    ///  [请求类]领取竞技场结算奖励
    /// </summary>
    public partial class ReqTakeArenaSettlementAward: Packet 
    {

        public override Packet Clone()
        {
            ReqTakeArenaSettlementAward pkg = new ReqTakeArenaSettlementAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTakeArenaSettlementAward()
		{
			PacketID = 1627;
		}
    }

    /// <summary>
    ///  [请求类] 领取竞技场结算奖励 创建者
    /// </summary>
    [Package(1627)]
    public partial class ReqTakeArenaSettlementAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeArenaSettlementAward();
        }
    }


    /// <summary>
    ///  [响应类]领取竞技场结算奖励
    /// </summary>
    public partial class ResTakeArenaSettlementAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResTakeArenaSettlementAward pkg = new ResTakeArenaSettlementAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResTakeArenaSettlementAward()
		{
			PacketID = 1628;
		}
    }

    /// <summary>
    ///  [响应类] 领取竞技场结算奖励 创建者
    /// </summary>
    [Package(1628)]
    public partial class ResTakeArenaSettlementAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeArenaSettlementAward();
        }
    }


    /// <summary>
    ///  [请求类]获取竞技场排名信息
    /// </summary>
    public partial class ReqGetArenaRankInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint StartIdx;
        /// <summary>
        /// 
        /// </summary>
        public uint EndIdx;

        public override Packet Clone()
        {
            ReqGetArenaRankInfo pkg = new ReqGetArenaRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.StartIdx = StartIdx;
            pkg.EndIdx = EndIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(StartIdx);
                oByteArray.WriteUInt(EndIdx);
            }
            else
            {
                StartIdx = oByteArray.ReadUInt();
                EndIdx = oByteArray.ReadUInt();
            }
        }
		public ReqGetArenaRankInfo()
		{
			PacketID = 1629;
		}
    }

    /// <summary>
    ///  [请求类] 获取竞技场排名信息 创建者
    /// </summary>
    [Package(1629)]
    public partial class ReqGetArenaRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetArenaRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]获取竞技场排名信息
    /// </summary>
    public partial class ResGetArenaRankInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ArenaRankData> Data = new List<ArenaRankData>();

        public override Packet Clone()
        {
            ResGetArenaRankInfo pkg = new ResGetArenaRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ArenaRankData item in Data)
            {
                pkg.Data.Add(item.Clone() as ArenaRankData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Data.Count);
                for (int i = 0; i < Data.Count; i++)
                {
                    Data[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int DataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DataCount; i++)
                {
                    ArenaRankData obj = new ArenaRankData();
                    obj.Serializtion(oByteArray, bSerialize);
                    Data.Add(obj);
                }
            }
        }
		public ResGetArenaRankInfo()
		{
			PacketID = 1630;
		}
    }

    /// <summary>
    ///  [响应类] 获取竞技场排名信息 创建者
    /// </summary>
    [Package(1630)]
    public partial class ResGetArenaRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetArenaRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]竞技场战斗结果
    /// </summary>
    public partial class ReqArenaFightResult: Packet 
    {

        public override Packet Clone()
        {
            ReqArenaFightResult pkg = new ReqArenaFightResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqArenaFightResult()
		{
			PacketID = 1631;
		}
    }

    /// <summary>
    ///  [请求类] 竞技场战斗结果 创建者
    /// </summary>
    [Package(1631)]
    public partial class ReqArenaFightResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqArenaFightResult();
        }
    }


    /// <summary>
    ///  [响应类]竞技场战斗结果
    /// </summary>
    public partial class ResArenaFightResult: Packet 
    {
        /// <summary>
        /// 0输 1赢
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint CostTime;
        /// <summary>
        /// 
        /// </summary>
        public int AddScore;

        public override Packet Clone()
        {
            ResArenaFightResult pkg = new ResArenaFightResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CostTime = CostTime;
            pkg.AddScore = AddScore;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(CostTime);
                oByteArray.WriteInt(AddScore);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                CostTime = oByteArray.ReadUInt();
                AddScore = oByteArray.ReadInt();
            }
        }
		public ResArenaFightResult()
		{
			PacketID = 1632;
		}
    }

    /// <summary>
    ///  [响应类] 竞技场战斗结果 创建者
    /// </summary>
    [Package(1632)]
    public partial class ResArenaFightResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResArenaFightResult();
        }
    }


    /// <summary>
    ///  [请求类]刷新竞技场机器人
    /// </summary>
    public partial class ReqSpwanRobotInArena: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 
        /// </summary>
        public RobotData Data = new RobotData();

        public override Packet Clone()
        {
            ReqSpwanRobotInArena pkg = new ReqSpwanRobotInArena();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapGuid = MapGuid;
            pkg.Data = Data.Clone() as RobotData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(MapGuid);
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqSpwanRobotInArena()
		{
			PacketID = 1633;
		}
    }

    /// <summary>
    ///  [请求类] 刷新竞技场机器人 创建者
    /// </summary>
    [Package(1633)]
    public partial class ReqSpwanRobotInArenaCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpwanRobotInArena();
        }
    }


    /// <summary>
    ///  [响应类]刷新竞技场机器人
    /// </summary>
    public partial class ResSpwanRobotInArena: Packet 
    {

        public override Packet Clone()
        {
            ResSpwanRobotInArena pkg = new ResSpwanRobotInArena();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSpwanRobotInArena()
		{
			PacketID = 1634;
		}
    }

    /// <summary>
    ///  [响应类] 刷新竞技场机器人 创建者
    /// </summary>
    [Package(1634)]
    public partial class ResSpwanRobotInArenaCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpwanRobotInArena();
        }
    }


    /// <summary>
    ///  [请求类]刷新玩家竞技场信息
    /// </summary>
    public partial class ReqUpdatePlayerArenaData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerArenaData pkg = new ReqUpdatePlayerArenaData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerArenaData()
		{
			PacketID = 1635;
		}
    }

    /// <summary>
    ///  [请求类] 刷新玩家竞技场信息 创建者
    /// </summary>
    [Package(1635)]
    public partial class ReqUpdatePlayerArenaDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerArenaData();
        }
    }


    /// <summary>
    ///  [响应类]刷新玩家竞技场信息
    /// </summary>
    public partial class ResUpdatePlayerArenaData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public PlayerArenaProtocolData Data = new PlayerArenaProtocolData();
        /// <summary>
        /// 
        /// </summary>
        public bool IsNew;

        public override Packet Clone()
        {
            ResUpdatePlayerArenaData pkg = new ResUpdatePlayerArenaData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as PlayerArenaProtocolData;
            pkg.IsNew = IsNew;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(IsNew);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
                IsNew = oByteArray.ReadBoolean();
            }
        }
		public ResUpdatePlayerArenaData()
		{
			PacketID = 1636;
		}
    }

    /// <summary>
    ///  [响应类] 刷新玩家竞技场信息 创建者
    /// </summary>
    [Package(1636)]
    public partial class ResUpdatePlayerArenaDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerArenaData();
        }
    }


    /// <summary>
    ///  [请求类]初始话竞技场模块
    /// </summary>
    public partial class ReqInitArenaModuleData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitArenaModuleData pkg = new ReqInitArenaModuleData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitArenaModuleData()
		{
			PacketID = 1637;
		}
    }

    /// <summary>
    ///  [请求类] 初始话竞技场模块 创建者
    /// </summary>
    [Package(1637)]
    public partial class ReqInitArenaModuleDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitArenaModuleData();
        }
    }


    /// <summary>
    ///  [响应类]初始话竞技场模块
    /// </summary>
    public partial class ResInitArenaModuleData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<PlayerArenaProtocolData> Datas = new List<PlayerArenaProtocolData>();

        public override Packet Clone()
        {
            ResInitArenaModuleData pkg = new ResInitArenaModuleData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (PlayerArenaProtocolData item in Datas)
            {
                pkg.Datas.Add(item.Clone() as PlayerArenaProtocolData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Datas.Count);
                for (int i = 0; i < Datas.Count; i++)
                {
                    Datas[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int DatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DatasCount; i++)
                {
                    PlayerArenaProtocolData obj = new PlayerArenaProtocolData();
                    obj.Serializtion(oByteArray, bSerialize);
                    Datas.Add(obj);
                }
            }
        }
		public ResInitArenaModuleData()
		{
			PacketID = 1638;
		}
    }

    /// <summary>
    ///  [响应类] 初始话竞技场模块 创建者
    /// </summary>
    [Package(1638)]
    public partial class ResInitArenaModuleDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitArenaModuleData();
        }
    }


    /// <summary>
    ///  [请求类]竞技场购买尊享奖励资格
    /// </summary>
    public partial class ReqArenaBuyExAward: Packet 
    {

        public override Packet Clone()
        {
            ReqArenaBuyExAward pkg = new ReqArenaBuyExAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqArenaBuyExAward()
		{
			PacketID = 1639;
		}
    }

    /// <summary>
    ///  [请求类] 竞技场购买尊享奖励资格 创建者
    /// </summary>
    [Package(1639)]
    public partial class ReqArenaBuyExAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqArenaBuyExAward();
        }
    }


    /// <summary>
    ///  [响应类]竞技场购买尊享奖励资格
    /// </summary>
    public partial class ResArenaBuyExAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResArenaBuyExAward pkg = new ResArenaBuyExAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResArenaBuyExAward()
		{
			PacketID = 1640;
		}
    }

    /// <summary>
    ///  [响应类] 竞技场购买尊享奖励资格 创建者
    /// </summary>
    [Package(1640)]
    public partial class ResArenaBuyExAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResArenaBuyExAward();
        }
    }


    /// <summary>
    ///  [请求类]更新跨服活动小地图信息
    /// </summary>
    public partial class ReqUpdateTURBMiniMapInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateTURBMiniMapInfo pkg = new ReqUpdateTURBMiniMapInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateTURBMiniMapInfo()
		{
			PacketID = 1641;
		}
    }

    /// <summary>
    ///  [请求类] 更新跨服活动小地图信息 创建者
    /// </summary>
    [Package(1641)]
    public partial class ReqUpdateTURBMiniMapInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTURBMiniMapInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新跨服活动小地图信息
    /// </summary>
    public partial class ResUpdateTURBMiniMapInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<TURBMiniMapInfo> Info = new List<TURBMiniMapInfo>();
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ResUpdateTURBMiniMapInfo pkg = new ResUpdateTURBMiniMapInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (TURBMiniMapInfo item in Info)
            {
                pkg.Info.Add(item.Clone() as TURBMiniMapInfo);
            }
            pkg.MapID = MapID;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Info.Count);
                for (int i = 0; i < Info.Count; i++)
                {
                    Info[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                int InfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfoCount; i++)
                {
                    TURBMiniMapInfo obj = new TURBMiniMapInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Info.Add(obj);
                }
                MapID = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ResUpdateTURBMiniMapInfo()
		{
			PacketID = 1642;
		}
    }

    /// <summary>
    ///  [响应类] 更新跨服活动小地图信息 创建者
    /// </summary>
    [Package(1642)]
    public partial class ResUpdateTURBMiniMapInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTURBMiniMapInfo();
        }
    }


    /// <summary>
    ///  [请求类]召唤圣兽
    /// </summary>
    public partial class ReqSummonTherion: Packet 
    {

        public override Packet Clone()
        {
            ReqSummonTherion pkg = new ReqSummonTherion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSummonTherion()
		{
			PacketID = 1643;
		}
    }

    /// <summary>
    ///  [请求类] 召唤圣兽 创建者
    /// </summary>
    [Package(1643)]
    public partial class ReqSummonTherionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSummonTherion();
        }
    }


    /// <summary>
    ///  [响应类]召唤圣兽
    /// </summary>
    public partial class ResSummonTherion: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResSummonTherion pkg = new ResSummonTherion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResSummonTherion()
		{
			PacketID = 1644;
		}
    }

    /// <summary>
    ///  [响应类] 召唤圣兽 创建者
    /// </summary>
    [Package(1644)]
    public partial class ResSummonTherionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSummonTherion();
        }
    }


    /// <summary>
    ///  [请求类]客户端打开/关闭界面记录
    /// </summary>
    public partial class ReqClientPage: Packet 
    {
        /// <summary>
        /// 0打开 1关闭
        /// </summary>
        public uint PageAction;
        /// <summary>
        /// 界面名|一级子页签名|二级子页签名|三级子页签名......
        /// </summary>
        public string PageName;

        public override Packet Clone()
        {
            ReqClientPage pkg = new ReqClientPage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PageAction = PageAction;
            pkg.PageName = PageName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PageAction);
                oByteArray.WriteUTF(PageName);
            }
            else
            {
                PageAction = oByteArray.ReadUInt();
                PageName = oByteArray.ReadUTF();
            }
        }
		public ReqClientPage()
		{
			PacketID = 1645;
		}
    }

    /// <summary>
    ///  [请求类] 客户端打开/关闭界面记录 创建者
    /// </summary>
    [Package(1645)]
    public partial class ReqClientPageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqClientPage();
        }
    }


    /// <summary>
    ///  [响应类]客户端打开/关闭界面记录
    /// </summary>
    public partial class ResClientPage: Packet 
    {

        public override Packet Clone()
        {
            ResClientPage pkg = new ResClientPage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResClientPage()
		{
			PacketID = 1646;
		}
    }

    /// <summary>
    ///  [响应类] 客户端打开/关闭界面记录 创建者
    /// </summary>
    [Package(1646)]
    public partial class ResClientPageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResClientPage();
        }
    }


    /// <summary>
    ///  [请求类]充值资格校验
    /// </summary>
    public partial class ReqCanRechargeBuy: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public RechargeBuyData Data = new RechargeBuyData();

        public override Packet Clone()
        {
            ReqCanRechargeBuy pkg = new ReqCanRechargeBuy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as RechargeBuyData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqCanRechargeBuy()
		{
			PacketID = 1647;
		}
    }

    /// <summary>
    ///  [请求类] 充值资格校验 创建者
    /// </summary>
    [Package(1647)]
    public partial class ReqCanRechargeBuyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCanRechargeBuy();
        }
    }


    /// <summary>
    ///  [响应类]充值资格校验
    /// </summary>
    public partial class ResCanRechargeBuy: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public RechargeBuyData Data = new RechargeBuyData();

        public override Packet Clone()
        {
            ResCanRechargeBuy pkg = new ResCanRechargeBuy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Data = Data.Clone() as RechargeBuyData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResCanRechargeBuy()
		{
			PacketID = 1648;
		}
    }

    /// <summary>
    ///  [响应类] 充值资格校验 创建者
    /// </summary>
    [Package(1648)]
    public partial class ResCanRechargeBuyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCanRechargeBuy();
        }
    }


    /// <summary>
    ///  [请求类]直充可领取奖励次数
    /// </summary>
    public partial class ReqUpdateRechargeBuyCount: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateRechargeBuyCount pkg = new ReqUpdateRechargeBuyCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateRechargeBuyCount()
		{
			PacketID = 1649;
		}
    }

    /// <summary>
    ///  [请求类] 直充可领取奖励次数 创建者
    /// </summary>
    [Package(1649)]
    public partial class ReqUpdateRechargeBuyCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRechargeBuyCount();
        }
    }


    /// <summary>
    ///  [响应类]直充可领取奖励次数
    /// </summary>
    public partial class ResUpdateRechargeBuyCount: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public RechargeBuyData Data = new RechargeBuyData();
        /// <summary>
        /// 
        /// </summary>
        public uint RechargeCount;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint RewardCount;
        /// <summary>
        /// 
        /// </summary>
        public uint Career;
        /// <summary>
        /// 
        /// </summary>
        public uint Sex;

        public override Packet Clone()
        {
            ResUpdateRechargeBuyCount pkg = new ResUpdateRechargeBuyCount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as RechargeBuyData;
            pkg.RechargeCount = RechargeCount;
            pkg.PlayerGuid = PlayerGuid;
            pkg.RewardCount = RewardCount;
            pkg.Career = Career;
            pkg.Sex = Sex;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(RechargeCount);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(RewardCount);
                oByteArray.WriteUInt(Career);
                oByteArray.WriteUInt(Sex);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
                RechargeCount = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
                RewardCount = oByteArray.ReadUInt();
                Career = oByteArray.ReadUInt();
                Sex = oByteArray.ReadUInt();
            }
        }
		public ResUpdateRechargeBuyCount()
		{
			PacketID = 1650;
		}
    }

    /// <summary>
    ///  [响应类] 直充可领取奖励次数 创建者
    /// </summary>
    [Package(1650)]
    public partial class ResUpdateRechargeBuyCountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRechargeBuyCount();
        }
    }


    /// <summary>
    ///  [请求类]领取直充奖励
    /// </summary>
    public partial class ReqTakeRechargeBuyAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public RechargeBuyData Data = new RechargeBuyData();

        public override Packet Clone()
        {
            ReqTakeRechargeBuyAward pkg = new ReqTakeRechargeBuyAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as RechargeBuyData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqTakeRechargeBuyAward()
		{
			PacketID = 1651;
		}
    }

    /// <summary>
    ///  [请求类] 领取直充奖励 创建者
    /// </summary>
    [Package(1651)]
    public partial class ReqTakeRechargeBuyAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeRechargeBuyAward();
        }
    }


    /// <summary>
    ///  [响应类]领取直充奖励
    /// </summary>
    public partial class ResTakeRechargeBuyAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public RechargeBuyData Data = new RechargeBuyData();

        public override Packet Clone()
        {
            ResTakeRechargeBuyAward pkg = new ResTakeRechargeBuyAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Data = Data.Clone() as RechargeBuyData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResTakeRechargeBuyAward()
		{
			PacketID = 1652;
		}
    }

    /// <summary>
    ///  [响应类] 领取直充奖励 创建者
    /// </summary>
    [Package(1652)]
    public partial class ResTakeRechargeBuyAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeRechargeBuyAward();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服务器，直充周期结束，清除相关数据
    /// </summary>
    public partial class ReqRechargeBuyEnd: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string ItemKey;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ReqRechargeBuyEnd pkg = new ReqRechargeBuyEnd();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemKey = ItemKey;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ItemKey);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                ItemKey = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqRechargeBuyEnd()
		{
			PacketID = 1653;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服务器，直充周期结束，清除相关数据 创建者
    /// </summary>
    [Package(1653)]
    public partial class ReqRechargeBuyEndCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRechargeBuyEnd();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服务器，直充周期结束，清除相关数据
    /// </summary>
    public partial class ResRechargeBuyEnd: Packet 
    {

        public override Packet Clone()
        {
            ResRechargeBuyEnd pkg = new ResRechargeBuyEnd();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResRechargeBuyEnd()
		{
			PacketID = 1654;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服务器，直充周期结束，清除相关数据 创建者
    /// </summary>
    [Package(1654)]
    public partial class ResRechargeBuyEndCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRechargeBuyEnd();
        }
    }


    /// <summary>
    ///  [请求类]初始化档位首充状态
    /// </summary>
    public partial class ReqUpdateGearRechargeInfoData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateGearRechargeInfoData pkg = new ReqUpdateGearRechargeInfoData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateGearRechargeInfoData()
		{
			PacketID = 1655;
		}
    }

    /// <summary>
    ///  [请求类] 初始化档位首充状态 创建者
    /// </summary>
    [Package(1655)]
    public partial class ReqUpdateGearRechargeInfoDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateGearRechargeInfoData();
        }
    }


    /// <summary>
    ///  [响应类]初始化档位首充状态
    /// </summary>
    public partial class ResUpdateGearRechargeInfoData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public string GearRechargeInfo;

        public override Packet Clone()
        {
            ResUpdateGearRechargeInfoData pkg = new ResUpdateGearRechargeInfoData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.GearRechargeInfo = GearRechargeInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUTF(GearRechargeInfo);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                GearRechargeInfo = oByteArray.ReadUTF();
            }
        }
		public ResUpdateGearRechargeInfoData()
		{
			PacketID = 1656;
		}
    }

    /// <summary>
    ///  [响应类] 初始化档位首充状态 创建者
    /// </summary>
    [Package(1656)]
    public partial class ResUpdateGearRechargeInfoDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateGearRechargeInfoData();
        }
    }


    /// <summary>
    ///  [请求类]通知玩家充值档位信息
    /// </summary>
    public partial class ReqNoticeGearRechargeInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeGearRechargeInfo pkg = new ReqNoticeGearRechargeInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeGearRechargeInfo()
		{
			PacketID = 1657;
		}
    }

    /// <summary>
    ///  [请求类] 通知玩家充值档位信息 创建者
    /// </summary>
    [Package(1657)]
    public partial class ReqNoticeGearRechargeInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeGearRechargeInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知玩家充值档位信息
    /// </summary>
    public partial class ResNoticeGearRechargeInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> TID = new List<uint>();

        public override Packet Clone()
        {
            ResNoticeGearRechargeInfo pkg = new ResNoticeGearRechargeInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in TID)
            {
                pkg.TID.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)TID.Count);
                for (int i = 0; i < TID.Count; i++)
                {
                    oByteArray.WriteUInt(TID[i]);
                }
            }
            else
            {
                int TIDCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TIDCount; i++)
                {
                    TID.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResNoticeGearRechargeInfo()
		{
			PacketID = 1658;
		}
    }

    /// <summary>
    ///  [响应类] 通知玩家充值档位信息 创建者
    /// </summary>
    [Package(1658)]
    public partial class ResNoticeGearRechargeInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeGearRechargeInfo();
        }
    }


    /// <summary>
    ///  [请求类]升级五行系统
    /// </summary>
    public partial class ReqUpgradeFiveElementsLv: Packet 
    {
        /// <summary>
        /// 1：木 2：水 3：金 4：土 5：火
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqUpgradeFiveElementsLv pkg = new ReqUpgradeFiveElementsLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqUpgradeFiveElementsLv()
		{
			PacketID = 1659;
		}
    }

    /// <summary>
    ///  [请求类] 升级五行系统 创建者
    /// </summary>
    [Package(1659)]
    public partial class ReqUpgradeFiveElementsLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeFiveElementsLv();
        }
    }


    /// <summary>
    ///  [响应类]升级五行系统
    /// </summary>
    public partial class ResUpgradeFiveElementsLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 1：木 2：水 3：金 4：土 5：火
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResUpgradeFiveElementsLv pkg = new ResUpgradeFiveElementsLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeFiveElementsLv()
		{
			PacketID = 1660;
		}
    }

    /// <summary>
    ///  [响应类] 升级五行系统 创建者
    /// </summary>
    [Package(1660)]
    public partial class ResUpgradeFiveElementsLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeFiveElementsLv();
        }
    }


    /// <summary>
    ///  [请求类]五行系统解锁
    /// </summary>
    public partial class ReqUnlockFiveElements: Packet 
    {

        public override Packet Clone()
        {
            ReqUnlockFiveElements pkg = new ReqUnlockFiveElements();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUnlockFiveElements()
		{
			PacketID = 1661;
		}
    }

    /// <summary>
    ///  [请求类] 五行系统解锁 创建者
    /// </summary>
    [Package(1661)]
    public partial class ReqUnlockFiveElementsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUnlockFiveElements();
        }
    }


    /// <summary>
    ///  [响应类]五行系统解锁
    /// </summary>
    public partial class ResUnlockFiveElements: Packet 
    {

        public override Packet Clone()
        {
            ResUnlockFiveElements pkg = new ResUnlockFiveElements();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUnlockFiveElements()
		{
			PacketID = 1662;
		}
    }

    /// <summary>
    ///  [响应类] 五行系统解锁 创建者
    /// </summary>
    [Package(1662)]
    public partial class ResUnlockFiveElementsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUnlockFiveElements();
        }
    }


    /// <summary>
    ///  [请求类]更新充值信息到缓存服(不在线玩家)
    /// </summary>
    public partial class ReqPlayerRechargeMoney: Packet 
    {

        public override Packet Clone()
        {
            ReqPlayerRechargeMoney pkg = new ReqPlayerRechargeMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPlayerRechargeMoney()
		{
			PacketID = 1663;
		}
    }

    /// <summary>
    ///  [请求类] 更新充值信息到缓存服(不在线玩家) 创建者
    /// </summary>
    [Package(1663)]
    public partial class ReqPlayerRechargeMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerRechargeMoney();
        }
    }


    /// <summary>
    ///  [响应类]更新充值信息到缓存服(不在线玩家)
    /// </summary>
    public partial class ResPlayerRechargeMoney: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint AllRecharge;
        /// <summary>
        /// 
        /// </summary>
        public uint AllRechargeRMB;
        /// <summary>
        /// 
        /// </summary>
        public uint DailyRechargeRMB;
        /// <summary>
        /// 
        /// </summary>
        public uint FirstPayNum;
        /// <summary>
        /// 
        /// </summary>
        public uint FirstPayTime;
        /// <summary>
        /// 
        /// </summary>
        public uint DailyPayNum;
        /// <summary>
        /// 
        /// </summary>
        public uint CurDayPayNum;
        /// <summary>
        /// 
        /// </summary>
        public string AddIngotsInfo;
        /// <summary>
        /// 
        /// </summary>
        public string DailyPaySignInfo;
        /// <summary>
        /// 
        /// </summary>
        public uint WeekRechareDays;

        public override Packet Clone()
        {
            ResPlayerRechargeMoney pkg = new ResPlayerRechargeMoney();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.AllRecharge = AllRecharge;
            pkg.AllRechargeRMB = AllRechargeRMB;
            pkg.DailyRechargeRMB = DailyRechargeRMB;
            pkg.FirstPayNum = FirstPayNum;
            pkg.FirstPayTime = FirstPayTime;
            pkg.DailyPayNum = DailyPayNum;
            pkg.CurDayPayNum = CurDayPayNum;
            pkg.AddIngotsInfo = AddIngotsInfo;
            pkg.DailyPaySignInfo = DailyPaySignInfo;
            pkg.WeekRechareDays = WeekRechareDays;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(AllRecharge);
                oByteArray.WriteUInt(AllRechargeRMB);
                oByteArray.WriteUInt(DailyRechargeRMB);
                oByteArray.WriteUInt(FirstPayNum);
                oByteArray.WriteUInt(FirstPayTime);
                oByteArray.WriteUInt(DailyPayNum);
                oByteArray.WriteUInt(CurDayPayNum);
                oByteArray.WriteUTF(AddIngotsInfo);
                oByteArray.WriteUTF(DailyPaySignInfo);
                oByteArray.WriteUInt(WeekRechareDays);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                AllRecharge = oByteArray.ReadUInt();
                AllRechargeRMB = oByteArray.ReadUInt();
                DailyRechargeRMB = oByteArray.ReadUInt();
                FirstPayNum = oByteArray.ReadUInt();
                FirstPayTime = oByteArray.ReadUInt();
                DailyPayNum = oByteArray.ReadUInt();
                CurDayPayNum = oByteArray.ReadUInt();
                AddIngotsInfo = oByteArray.ReadUTF();
                DailyPaySignInfo = oByteArray.ReadUTF();
                WeekRechareDays = oByteArray.ReadUInt();
            }
        }
		public ResPlayerRechargeMoney()
		{
			PacketID = 1664;
		}
    }

    /// <summary>
    ///  [响应类] 更新充值信息到缓存服(不在线玩家) 创建者
    /// </summary>
    [Package(1664)]
    public partial class ResPlayerRechargeMoneyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerRechargeMoney();
        }
    }


    /// <summary>
    ///  [请求类]保存五行系统信息
    /// </summary>
    public partial class ReqSaveFiveElements: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public FiveElementsData Data = new FiveElementsData();

        public override Packet Clone()
        {
            ReqSaveFiveElements pkg = new ReqSaveFiveElements();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as FiveElementsData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqSaveFiveElements()
		{
			PacketID = 1665;
		}
    }

    /// <summary>
    ///  [请求类] 保存五行系统信息 创建者
    /// </summary>
    [Package(1665)]
    public partial class ReqSaveFiveElementsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSaveFiveElements();
        }
    }


    /// <summary>
    ///  [响应类]保存五行系统信息
    /// </summary>
    public partial class ResSaveFiveElements: Packet 
    {

        public override Packet Clone()
        {
            ResSaveFiveElements pkg = new ResSaveFiveElements();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSaveFiveElements()
		{
			PacketID = 1666;
		}
    }

    /// <summary>
    ///  [响应类] 保存五行系统信息 创建者
    /// </summary>
    [Package(1666)]
    public partial class ResSaveFiveElementsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSaveFiveElements();
        }
    }


    /// <summary>
    ///  [请求类]通知系统解锁
    /// </summary>
    public partial class ReqNoticeUnlockFunction: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUnlockFunction pkg = new ReqNoticeUnlockFunction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUnlockFunction()
		{
			PacketID = 1667;
		}
    }

    /// <summary>
    ///  [请求类] 通知系统解锁 创建者
    /// </summary>
    [Package(1667)]
    public partial class ReqNoticeUnlockFunctionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUnlockFunction();
        }
    }


    /// <summary>
    ///  [响应类]通知系统解锁
    /// </summary>
    public partial class ResNoticeUnlockFunction: Packet 
    {
        /// <summary>
        /// 功能开启表tid
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResNoticeUnlockFunction pkg = new ResNoticeUnlockFunction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeUnlockFunction()
		{
			PacketID = 1668;
		}
    }

    /// <summary>
    ///  [响应类] 通知系统解锁 创建者
    /// </summary>
    [Package(1668)]
    public partial class ResNoticeUnlockFunctionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUnlockFunction();
        }
    }


    /// <summary>
    ///  [请求类]通知怪物复活时间
    /// </summary>
    public partial class ReqNoticeMonReviveTime: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeMonReviveTime pkg = new ReqNoticeMonReviveTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeMonReviveTime()
		{
			PacketID = 1669;
		}
    }

    /// <summary>
    ///  [请求类] 通知怪物复活时间 创建者
    /// </summary>
    [Package(1669)]
    public partial class ReqNoticeMonReviveTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeMonReviveTime();
        }
    }


    /// <summary>
    ///  [响应类]通知怪物复活时间
    /// </summary>
    public partial class ResNoticeMonReviveTime: Packet 
    {
        /// <summary>
        /// 怪物刷怪表TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 复活时间戳
        /// </summary>
        public uint ReviveTime;

        public override Packet Clone()
        {
            ResNoticeMonReviveTime pkg = new ResNoticeMonReviveTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.ReviveTime = ReviveTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(ReviveTime);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                ReviveTime = oByteArray.ReadUInt();
            }
        }
		public ResNoticeMonReviveTime()
		{
			PacketID = 1670;
		}
    }

    /// <summary>
    ///  [响应类] 通知怪物复活时间 创建者
    /// </summary>
    [Package(1670)]
    public partial class ResNoticeMonReviveTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeMonReviveTime();
        }
    }


    /// <summary>
    ///  [请求类]怪物复活时间，用于进地图通知
    /// </summary>
    public partial class ReqMapMonReviveTimeList: Packet 
    {

        public override Packet Clone()
        {
            ReqMapMonReviveTimeList pkg = new ReqMapMonReviveTimeList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqMapMonReviveTimeList()
		{
			PacketID = 1671;
		}
    }

    /// <summary>
    ///  [请求类] 怪物复活时间，用于进地图通知 创建者
    /// </summary>
    [Package(1671)]
    public partial class ReqMapMonReviveTimeListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqMapMonReviveTimeList();
        }
    }


    /// <summary>
    ///  [响应类]怪物复活时间，用于进地图通知
    /// </summary>
    public partial class ResMapMonReviveTimeList: Packet 
    {
        /// <summary>
        /// <地图刷怪表tid，复活时间>
        /// </summary>
        public List<ProtocolPair> Data = new List<ProtocolPair>();

        public override Packet Clone()
        {
            ResMapMonReviveTimeList pkg = new ResMapMonReviveTimeList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ProtocolPair item in Data)
            {
                pkg.Data.Add(item.Clone() as ProtocolPair);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Data.Count);
                for (int i = 0; i < Data.Count; i++)
                {
                    Data[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int DataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DataCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    Data.Add(obj);
                }
            }
        }
		public ResMapMonReviveTimeList()
		{
			PacketID = 1672;
		}
    }

    /// <summary>
    ///  [响应类] 怪物复活时间，用于进地图通知 创建者
    /// </summary>
    [Package(1672)]
    public partial class ResMapMonReviveTimeListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResMapMonReviveTimeList();
        }
    }


    /// <summary>
    ///  [请求类]辅助设置
    /// </summary>
    public partial class ReqAssistSetting: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public List<uint> Value = new List<uint>();

        public override Packet Clone()
        {
            ReqAssistSetting pkg = new ReqAssistSetting();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            foreach (var item in Value)
            {
                pkg.Value.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                for (int i = 0; i < Value.Count; i++)
                {
                      oByteArray.WriteUInt(Value[i]);
                }
            }
            else
            {
                TID = oByteArray.ReadUInt();
                int ValueCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ValueCount; i++)
                {
                    Value.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqAssistSetting()
		{
			PacketID = 1673;
		}
    }

    /// <summary>
    ///  [请求类] 辅助设置 创建者
    /// </summary>
    [Package(1673)]
    public partial class ReqAssistSettingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAssistSetting();
        }
    }


    /// <summary>
    ///  [响应类]辅助设置
    /// </summary>
    public partial class ResAssistSetting: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResAssistSetting pkg = new ResAssistSetting();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResAssistSetting()
		{
			PacketID = 1674;
		}
    }

    /// <summary>
    ///  [响应类] 辅助设置 创建者
    /// </summary>
    [Package(1674)]
    public partial class ResAssistSettingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAssistSetting();
        }
    }


    /// <summary>
    ///  [请求类]播放场景特效
    /// </summary>
    public partial class ReqPlayEffectToScene: Packet 
    {

        public override Packet Clone()
        {
            ReqPlayEffectToScene pkg = new ReqPlayEffectToScene();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqPlayEffectToScene()
		{
			PacketID = 1675;
		}
    }

    /// <summary>
    ///  [请求类] 播放场景特效 创建者
    /// </summary>
    [Package(1675)]
    public partial class ReqPlayEffectToSceneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayEffectToScene();
        }
    }


    /// <summary>
    ///  [响应类]播放场景特效
    /// </summary>
    public partial class ResPlayEffectToScene: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint EffectID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public bool AutoRemove;
        /// <summary>
        /// 
        /// </summary>
        public uint Time;

        public override Packet Clone()
        {
            ResPlayEffectToScene pkg = new ResPlayEffectToScene();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EffectID = EffectID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.AutoRemove = AutoRemove;
            pkg.Time = Time;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EffectID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteBoolean(AutoRemove);
                oByteArray.WriteUInt(Time);
            }
            else
            {
                EffectID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                AutoRemove = oByteArray.ReadBoolean();
                Time = oByteArray.ReadUInt();
            }
        }
		public ResPlayEffectToScene()
		{
			PacketID = 1676;
		}
    }

    /// <summary>
    ///  [响应类] 播放场景特效 创建者
    /// </summary>
    [Package(1676)]
    public partial class ResPlayEffectToSceneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayEffectToScene();
        }
    }


    /// <summary>
    ///  [请求类]通知签到信息
    /// </summary>
    public partial class ReqNoticeSignInInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeSignInInfo pkg = new ReqNoticeSignInInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeSignInInfo()
		{
			PacketID = 1677;
		}
    }

    /// <summary>
    ///  [请求类] 通知签到信息 创建者
    /// </summary>
    [Package(1677)]
    public partial class ReqNoticeSignInInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSignInInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知签到信息
    /// </summary>
    public partial class ResNoticeSignInInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint SignFlag;
        /// <summary>
        /// 
        /// </summary>
        public uint SignInCircle;
        /// <summary>
        /// 
        /// </summary>
        public uint SignTimes;
        /// <summary>
        /// 下次重置时间点
        /// </summary>
        public uint SignResetTime;
        /// <summary>
        /// 已补签次数
        /// </summary>
        public uint RetroactiveTimes;

        public override Packet Clone()
        {
            ResNoticeSignInInfo pkg = new ResNoticeSignInInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SignFlag = SignFlag;
            pkg.SignInCircle = SignInCircle;
            pkg.SignTimes = SignTimes;
            pkg.SignResetTime = SignResetTime;
            pkg.RetroactiveTimes = RetroactiveTimes;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SignFlag);
                oByteArray.WriteUInt(SignInCircle);
                oByteArray.WriteUInt(SignTimes);
                oByteArray.WriteUInt(SignResetTime);
                oByteArray.WriteUInt(RetroactiveTimes);
            }
            else
            {
                SignFlag = oByteArray.ReadUInt();
                SignInCircle = oByteArray.ReadUInt();
                SignTimes = oByteArray.ReadUInt();
                SignResetTime = oByteArray.ReadUInt();
                RetroactiveTimes = oByteArray.ReadUInt();
            }
        }
		public ResNoticeSignInInfo()
		{
			PacketID = 1678;
		}
    }

    /// <summary>
    ///  [响应类] 通知签到信息 创建者
    /// </summary>
    [Package(1678)]
    public partial class ResNoticeSignInInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSignInInfo();
        }
    }


    /// <summary>
    ///  [请求类]玩家离线数据统计
    /// </summary>
    public partial class ReqNoticeDataStatisticsOffline: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeDataStatisticsOffline pkg = new ReqNoticeDataStatisticsOffline();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeDataStatisticsOffline()
		{
			PacketID = 1679;
		}
    }

    /// <summary>
    ///  [请求类] 玩家离线数据统计 创建者
    /// </summary>
    [Package(1679)]
    public partial class ReqNoticeDataStatisticsOfflineCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDataStatisticsOffline();
        }
    }


    /// <summary>
    ///  [响应类]玩家离线数据统计
    /// </summary>
    public partial class ResNoticeDataStatisticsOffline: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong Guid;
        /// <summary>
        /// 记录日期
        /// </summary>
        public uint LogDate;
        /// <summary>
        /// 记录信息类型
        /// </summary>
        public uint Type;
        /// <summary>
        /// 记录信息参数
        /// </summary>
        public uint Value;
        /// <summary>
        /// 是否需要立刻储存
        /// </summary>
        public uint NeedSave;

        public override Packet Clone()
        {
            ResNoticeDataStatisticsOffline pkg = new ResNoticeDataStatisticsOffline();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Guid = Guid;
            pkg.LogDate = LogDate;
            pkg.Type = Type;
            pkg.Value = Value;
            pkg.NeedSave = NeedSave;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(Guid);
                oByteArray.WriteUInt(LogDate);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Value);
                oByteArray.WriteUInt(NeedSave);
            }
            else
            {
                Guid = oByteArray.ReadUInt64();
                LogDate = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                Value = oByteArray.ReadUInt();
                NeedSave = oByteArray.ReadUInt();
            }
        }
		public ResNoticeDataStatisticsOffline()
		{
			PacketID = 1680;
		}
    }

    /// <summary>
    ///  [响应类] 玩家离线数据统计 创建者
    /// </summary>
    [Package(1680)]
    public partial class ResNoticeDataStatisticsOfflineCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDataStatisticsOffline();
        }
    }


    /// <summary>
    ///  [请求类]刷新背包格子状态
    /// </summary>
    public partial class ReqUpdateBagPosStatus: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateBagPosStatus pkg = new ReqUpdateBagPosStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateBagPosStatus()
		{
			PacketID = 1681;
		}
    }

    /// <summary>
    ///  [请求类] 刷新背包格子状态 创建者
    /// </summary>
    [Package(1681)]
    public partial class ReqUpdateBagPosStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateBagPosStatus();
        }
    }


    /// <summary>
    ///  [响应类]刷新背包格子状态
    /// </summary>
    public partial class ResUpdateBagPosStatus: Packet 
    {
        /// <summary>
        /// 解锁背包时间
        /// </summary>
        public uint UnlockBagTime;
        /// <summary>
        /// 可解锁背包起始格子
        /// </summary>
        public uint BagCanUnlockStartPos;
        /// <summary>
        /// 背包结束格子(不包括这个位置)
        /// </summary>
        public uint BagEndPos;

        public override Packet Clone()
        {
            ResUpdateBagPosStatus pkg = new ResUpdateBagPosStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.UnlockBagTime = UnlockBagTime;
            pkg.BagCanUnlockStartPos = BagCanUnlockStartPos;
            pkg.BagEndPos = BagEndPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(UnlockBagTime);
                oByteArray.WriteUInt(BagCanUnlockStartPos);
                oByteArray.WriteUInt(BagEndPos);
            }
            else
            {
                UnlockBagTime = oByteArray.ReadUInt();
                BagCanUnlockStartPos = oByteArray.ReadUInt();
                BagEndPos = oByteArray.ReadUInt();
            }
        }
		public ResUpdateBagPosStatus()
		{
			PacketID = 1682;
		}
    }

    /// <summary>
    ///  [响应类] 刷新背包格子状态 创建者
    /// </summary>
    [Package(1682)]
    public partial class ResUpdateBagPosStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateBagPosStatus();
        }
    }


    /// <summary>
    ///  [请求类]解锁背包格子
    /// </summary>
    public partial class ReqUnlockBagPos: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint BagPos;
        /// <summary>
        /// 0:时间解锁 1:道具解锁
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqUnlockBagPos pkg = new ReqUnlockBagPos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BagPos = BagPos;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BagPos);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                BagPos = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqUnlockBagPos()
		{
			PacketID = 1683;
		}
    }

    /// <summary>
    ///  [请求类] 解锁背包格子 创建者
    /// </summary>
    [Package(1683)]
    public partial class ReqUnlockBagPosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUnlockBagPos();
        }
    }


    /// <summary>
    ///  [响应类]解锁背包格子
    /// </summary>
    public partial class ResUnlockBagPos: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUnlockBagPos pkg = new ResUnlockBagPos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUnlockBagPos()
		{
			PacketID = 1684;
		}
    }

    /// <summary>
    ///  [响应类] 解锁背包格子 创建者
    /// </summary>
    [Package(1684)]
    public partial class ResUnlockBagPosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUnlockBagPos();
        }
    }


    /// <summary>
    ///  [请求类]藏宝图事件通知
    /// </summary>
    public partial class ReqNoticeTreasureMapEvent: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeTreasureMapEvent pkg = new ReqNoticeTreasureMapEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeTreasureMapEvent()
		{
			PacketID = 1685;
		}
    }

    /// <summary>
    ///  [请求类] 藏宝图事件通知 创建者
    /// </summary>
    [Package(1685)]
    public partial class ReqNoticeTreasureMapEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeTreasureMapEvent();
        }
    }


    /// <summary>
    ///  [响应类]藏宝图事件通知
    /// </summary>
    public partial class ResNoticeTreasureMapEvent: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint EventTID;

        public override Packet Clone()
        {
            ResNoticeTreasureMapEvent pkg = new ResNoticeTreasureMapEvent();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EventTID = EventTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EventTID);
            }
            else
            {
                EventTID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeTreasureMapEvent()
		{
			PacketID = 1686;
		}
    }

    /// <summary>
    ///  [响应类] 藏宝图事件通知 创建者
    /// </summary>
    [Package(1686)]
    public partial class ResNoticeTreasureMapEventCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeTreasureMapEvent();
        }
    }


    /// <summary>
    ///  [请求类]更新藏宝图地图等级
    /// </summary>
    public partial class ReqUpdateTreasureMapLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Lv;

        public override Packet Clone()
        {
            ReqUpdateTreasureMapLv pkg = new ReqUpdateTreasureMapLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Lv = Lv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Lv);
            }
            else
            {
                Lv = oByteArray.ReadInt();
            }
        }
		public ReqUpdateTreasureMapLv()
		{
			PacketID = 1687;
		}
    }

    /// <summary>
    ///  [请求类] 更新藏宝图地图等级 创建者
    /// </summary>
    [Package(1687)]
    public partial class ReqUpdateTreasureMapLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTreasureMapLv();
        }
    }


    /// <summary>
    ///  [响应类]更新藏宝图地图等级
    /// </summary>
    public partial class ResUpdateTreasureMapLv: Packet 
    {

        public override Packet Clone()
        {
            ResUpdateTreasureMapLv pkg = new ResUpdateTreasureMapLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdateTreasureMapLv()
		{
			PacketID = 1688;
		}
    }

    /// <summary>
    ///  [响应类] 更新藏宝图地图等级 创建者
    /// </summary>
    [Package(1688)]
    public partial class ResUpdateTreasureMapLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTreasureMapLv();
        }
    }


    /// <summary>
    ///  [请求类]初始化玩家充值数据
    /// </summary>
    public partial class ReqInitPlayerRechargeData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerRechargeData pkg = new ReqInitPlayerRechargeData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerRechargeData()
		{
			PacketID = 1689;
		}
    }

    /// <summary>
    ///  [请求类] 初始化玩家充值数据 创建者
    /// </summary>
    [Package(1689)]
    public partial class ReqInitPlayerRechargeDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerRechargeData();
        }
    }


    /// <summary>
    ///  [响应类]初始化玩家充值数据
    /// </summary>
    public partial class ResInitPlayerRechargeData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint AllRecharge;
        /// <summary>
        /// 
        /// </summary>
        public uint AllRechargeRMB;
        /// <summary>
        /// 
        /// </summary>
        public uint DailyRechargeRMB;
        /// <summary>
        /// 
        /// </summary>
        public uint FirstPayNum;
        /// <summary>
        /// 
        /// </summary>
        public uint FirstPayTime;
        /// <summary>
        /// 
        /// </summary>
        public uint DailyPayNum;
        /// <summary>
        /// 
        /// </summary>
        public uint CurDayPayNum;
        /// <summary>
        /// 
        /// </summary>
        public string AddIngotsInfo;
        /// <summary>
        /// 
        /// </summary>
        public string DailyPaySignInfo;
        /// <summary>
        /// 
        /// </summary>
        public uint WeekRechareDays;
        /// <summary>
        /// 
        /// </summary>
        public uint Cycle;
        /// <summary>
        /// 
        /// </summary>
        public uint State;
        /// <summary>
        /// 
        /// </summary>
        public uint HonourValue;
        /// <summary>
        /// 
        /// </summary>
        public uint LastCumulRechargeTime;
        /// <summary>
        /// 
        /// </summary>
        public uint RechargeDays;
        /// <summary>
        /// 
        /// </summary>
        public string CumulRechargeInfo;
        /// <summary>
        /// 
        /// </summary>
        public uint RechargeResetTime;
        /// <summary>
        /// 注册时主区开服时间戳
        /// </summary>
        public uint ServerOpenSeconds;

        public override Packet Clone()
        {
            ResInitPlayerRechargeData pkg = new ResInitPlayerRechargeData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.AllRecharge = AllRecharge;
            pkg.AllRechargeRMB = AllRechargeRMB;
            pkg.DailyRechargeRMB = DailyRechargeRMB;
            pkg.FirstPayNum = FirstPayNum;
            pkg.FirstPayTime = FirstPayTime;
            pkg.DailyPayNum = DailyPayNum;
            pkg.CurDayPayNum = CurDayPayNum;
            pkg.AddIngotsInfo = AddIngotsInfo;
            pkg.DailyPaySignInfo = DailyPaySignInfo;
            pkg.WeekRechareDays = WeekRechareDays;
            pkg.Cycle = Cycle;
            pkg.State = State;
            pkg.HonourValue = HonourValue;
            pkg.LastCumulRechargeTime = LastCumulRechargeTime;
            pkg.RechargeDays = RechargeDays;
            pkg.CumulRechargeInfo = CumulRechargeInfo;
            pkg.RechargeResetTime = RechargeResetTime;
            pkg.ServerOpenSeconds = ServerOpenSeconds;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(AllRecharge);
                oByteArray.WriteUInt(AllRechargeRMB);
                oByteArray.WriteUInt(DailyRechargeRMB);
                oByteArray.WriteUInt(FirstPayNum);
                oByteArray.WriteUInt(FirstPayTime);
                oByteArray.WriteUInt(DailyPayNum);
                oByteArray.WriteUInt(CurDayPayNum);
                oByteArray.WriteUTF(AddIngotsInfo);
                oByteArray.WriteUTF(DailyPaySignInfo);
                oByteArray.WriteUInt(WeekRechareDays);
                oByteArray.WriteUInt(Cycle);
                oByteArray.WriteUInt(State);
                oByteArray.WriteUInt(HonourValue);
                oByteArray.WriteUInt(LastCumulRechargeTime);
                oByteArray.WriteUInt(RechargeDays);
                oByteArray.WriteUTF(CumulRechargeInfo);
                oByteArray.WriteUInt(RechargeResetTime);
                oByteArray.WriteUInt(ServerOpenSeconds);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                AllRecharge = oByteArray.ReadUInt();
                AllRechargeRMB = oByteArray.ReadUInt();
                DailyRechargeRMB = oByteArray.ReadUInt();
                FirstPayNum = oByteArray.ReadUInt();
                FirstPayTime = oByteArray.ReadUInt();
                DailyPayNum = oByteArray.ReadUInt();
                CurDayPayNum = oByteArray.ReadUInt();
                AddIngotsInfo = oByteArray.ReadUTF();
                DailyPaySignInfo = oByteArray.ReadUTF();
                WeekRechareDays = oByteArray.ReadUInt();
                Cycle = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
                HonourValue = oByteArray.ReadUInt();
                LastCumulRechargeTime = oByteArray.ReadUInt();
                RechargeDays = oByteArray.ReadUInt();
                CumulRechargeInfo = oByteArray.ReadUTF();
                RechargeResetTime = oByteArray.ReadUInt();
                ServerOpenSeconds = oByteArray.ReadUInt();
            }
        }
		public ResInitPlayerRechargeData()
		{
			PacketID = 1690;
		}
    }

    /// <summary>
    ///  [响应类] 初始化玩家充值数据 创建者
    /// </summary>
    [Package(1690)]
    public partial class ResInitPlayerRechargeDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerRechargeData();
        }
    }


    /// <summary>
    ///  [请求类]刷新藏宝图地图怪物信息
    /// </summary>
    public partial class ReqUpdateTreasureMapData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateTreasureMapData pkg = new ReqUpdateTreasureMapData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateTreasureMapData()
		{
			PacketID = 1691;
		}
    }

    /// <summary>
    ///  [请求类] 刷新藏宝图地图怪物信息 创建者
    /// </summary>
    [Package(1691)]
    public partial class ReqUpdateTreasureMapDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTreasureMapData();
        }
    }


    /// <summary>
    ///  [响应类]刷新藏宝图地图怪物信息
    /// </summary>
    public partial class ResUpdateTreasureMapData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public TreasureMapMonData Data = new TreasureMapMonData();

        public override Packet Clone()
        {
            ResUpdateTreasureMapData pkg = new ResUpdateTreasureMapData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as TreasureMapMonData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateTreasureMapData()
		{
			PacketID = 1692;
		}
    }

    /// <summary>
    ///  [响应类] 刷新藏宝图地图怪物信息 创建者
    /// </summary>
    [Package(1692)]
    public partial class ResUpdateTreasureMapDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTreasureMapData();
        }
    }


    /// <summary>
    ///  [请求类]初始化客户端自定义数据
    /// </summary>
    public partial class ReqInitClientDefinedInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqInitClientDefinedInfo pkg = new ReqInitClientDefinedInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitClientDefinedInfo()
		{
			PacketID = 1693;
		}
    }

    /// <summary>
    ///  [请求类] 初始化客户端自定义数据 创建者
    /// </summary>
    [Package(1693)]
    public partial class ReqInitClientDefinedInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitClientDefinedInfo();
        }
    }


    /// <summary>
    ///  [响应类]初始化客户端自定义数据
    /// </summary>
    public partial class ResInitClientDefinedInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ClientData> Datas = new List<ClientData>();
        /// <summary>
        /// 
        /// </summary>
        public uint TotalCouont;

        public override Packet Clone()
        {
            ResInitClientDefinedInfo pkg = new ResInitClientDefinedInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ClientData item in Datas)
            {
                pkg.Datas.Add(item.Clone() as ClientData);
            }
            pkg.TotalCouont = TotalCouont;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Datas.Count);
                for (int i = 0; i < Datas.Count; i++)
                {
                    Datas[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(TotalCouont);
            }
            else
            {
                int DatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DatasCount; i++)
                {
                    ClientData obj = new ClientData();
                    obj.Serializtion(oByteArray, bSerialize);
                    Datas.Add(obj);
                }
                TotalCouont = oByteArray.ReadUInt();
            }
        }
		public ResInitClientDefinedInfo()
		{
			PacketID = 1694;
		}
    }

    /// <summary>
    ///  [响应类] 初始化客户端自定义数据 创建者
    /// </summary>
    [Package(1694)]
    public partial class ResInitClientDefinedInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitClientDefinedInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家设置信息
    /// </summary>
    public partial class ReqUpdatePlayerSetInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerSetInfo pkg = new ReqUpdatePlayerSetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerSetInfo()
		{
			PacketID = 1695;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家设置信息 创建者
    /// </summary>
    [Package(1695)]
    public partial class ReqUpdatePlayerSetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerSetInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家设置信息
    /// </summary>
    public partial class ResUpdatePlayerSetInfo: Packet 
    {
        /// <summary>
        /// 0:辅助1回收2熔炼
        /// </summary>
        public uint Type;
        /// <summary>
        /// 
        /// </summary>
        public string Info;

        public override Packet Clone()
        {
            ResUpdatePlayerSetInfo pkg = new ResUpdatePlayerSetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Info = Info;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUTF(Info);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Info = oByteArray.ReadUTF();
            }
        }
		public ResUpdatePlayerSetInfo()
		{
			PacketID = 1696;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家设置信息 创建者
    /// </summary>
    [Package(1696)]
    public partial class ResUpdatePlayerSetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerSetInfo();
        }
    }


    /// <summary>
    ///  [请求类]熔炉抽奖日志
    /// </summary>
    public partial class ReqSmelterdrawLog: Packet 
    {

        public override Packet Clone()
        {
            ReqSmelterdrawLog pkg = new ReqSmelterdrawLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSmelterdrawLog()
		{
			PacketID = 1697;
		}
    }

    /// <summary>
    ///  [请求类] 熔炉抽奖日志 创建者
    /// </summary>
    [Package(1697)]
    public partial class ReqSmelterdrawLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSmelterdrawLog();
        }
    }


    /// <summary>
    ///  [响应类]熔炉抽奖日志
    /// </summary>
    public partial class ResSmelterdrawLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public SmelterdrawLog LogInfo = new SmelterdrawLog();
        /// <summary>
        /// True:个人;False:全服
        /// </summary>
        public bool IsPerson;

        public override Packet Clone()
        {
            ResSmelterdrawLog pkg = new ResSmelterdrawLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LogInfo = LogInfo.Clone() as SmelterdrawLog;
            pkg.IsPerson = IsPerson;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                LogInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(IsPerson);
            }
            else
            {
                LogInfo.Serializtion(oByteArray, bSerialize);
                IsPerson = oByteArray.ReadBoolean();
            }
        }
		public ResSmelterdrawLog()
		{
			PacketID = 1698;
		}
    }

    /// <summary>
    ///  [响应类] 熔炉抽奖日志 创建者
    /// </summary>
    [Package(1698)]
    public partial class ResSmelterdrawLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSmelterdrawLog();
        }
    }


    /// <summary>
    ///  [请求类]导入抽奖日志
    /// </summary>
    public partial class ReqLoadSmelterdrawLog: Packet 
    {

        public override Packet Clone()
        {
            ReqLoadSmelterdrawLog pkg = new ReqLoadSmelterdrawLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqLoadSmelterdrawLog()
		{
			PacketID = 1699;
		}
    }

    /// <summary>
    ///  [请求类] 导入抽奖日志 创建者
    /// </summary>
    [Package(1699)]
    public partial class ReqLoadSmelterdrawLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLoadSmelterdrawLog();
        }
    }


    /// <summary>
    ///  [响应类]导入抽奖日志
    /// </summary>
    public partial class ResLoadSmelterdrawLog: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<SmelterdrawLog> LogInfo = new List<SmelterdrawLog>();
        /// <summary>
        /// false:全服;True稀有
        /// </summary>
        public bool Rare;

        public override Packet Clone()
        {
            ResLoadSmelterdrawLog pkg = new ResLoadSmelterdrawLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (SmelterdrawLog item in LogInfo)
            {
                pkg.LogInfo.Add(item.Clone() as SmelterdrawLog);
            }
            pkg.Rare = Rare;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)LogInfo.Count);
                for (int i = 0; i < LogInfo.Count; i++)
                {
                    LogInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteBoolean(Rare);
            }
            else
            {
                int LogInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < LogInfoCount; i++)
                {
                    SmelterdrawLog obj = new SmelterdrawLog();
                    obj.Serializtion(oByteArray, bSerialize);
                    LogInfo.Add(obj);
                }
                Rare = oByteArray.ReadBoolean();
            }
        }
		public ResLoadSmelterdrawLog()
		{
			PacketID = 1700;
		}
    }

    /// <summary>
    ///  [响应类] 导入抽奖日志 创建者
    /// </summary>
    [Package(1700)]
    public partial class ResLoadSmelterdrawLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLoadSmelterdrawLog();
        }
    }


    /// <summary>
    ///  [请求类]积分兑换
    /// </summary>
    public partial class ReqIntegralExchange: Packet 
    {
        /// <summary>
        /// 兑换编号
        /// </summary>
        public uint TID;
        /// <summary>
        /// 消耗品背包位置
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqIntegralExchange pkg = new ReqIntegralExchange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqIntegralExchange()
		{
			PacketID = 1701;
		}
    }

    /// <summary>
    ///  [请求类] 积分兑换 创建者
    /// </summary>
    [Package(1701)]
    public partial class ReqIntegralExchangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqIntegralExchange();
        }
    }


    /// <summary>
    ///  [响应类]积分兑换
    /// </summary>
    public partial class ResIntegralExchange: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResIntegralExchange pkg = new ResIntegralExchange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResIntegralExchange()
		{
			PacketID = 1702;
		}
    }

    /// <summary>
    ///  [响应类] 积分兑换 创建者
    /// </summary>
    [Package(1702)]
    public partial class ResIntegralExchangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResIntegralExchange();
        }
    }


    /// <summary>
    ///  [请求类]聚灵大阵信息通知
    /// </summary>
    public partial class ReqNoticeCollectSpiritData: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeCollectSpiritData pkg = new ReqNoticeCollectSpiritData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeCollectSpiritData()
		{
			PacketID = 1703;
		}
    }

    /// <summary>
    ///  [请求类] 聚灵大阵信息通知 创建者
    /// </summary>
    [Package(1703)]
    public partial class ReqNoticeCollectSpiritDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCollectSpiritData();
        }
    }


    /// <summary>
    ///  [响应类]聚灵大阵信息通知
    /// </summary>
    public partial class ResNoticeCollectSpiritData: Packet 
    {
        /// <summary>
        /// 当前灵气值
        /// </summary>
        public int CurSpiritValue;
        /// <summary>
        /// 当日已触发事件次数
        /// </summary>
        public int HasTriggerCount;
        /// <summary>
        /// 当前事件类型（0:未触发事件 1:秘境 2:不朽魔王 3:神秘集市）
        /// </summary>
        public int CurEventType;
        /// <summary>
        /// 事件结束时间戳
        /// </summary>
        public int EventEndTime;

        public override Packet Clone()
        {
            ResNoticeCollectSpiritData pkg = new ResNoticeCollectSpiritData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurSpiritValue = CurSpiritValue;
            pkg.HasTriggerCount = HasTriggerCount;
            pkg.CurEventType = CurEventType;
            pkg.EventEndTime = EventEndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(CurSpiritValue);
                oByteArray.WriteInt(HasTriggerCount);
                oByteArray.WriteInt(CurEventType);
                oByteArray.WriteInt(EventEndTime);
            }
            else
            {
                CurSpiritValue = oByteArray.ReadInt();
                HasTriggerCount = oByteArray.ReadInt();
                CurEventType = oByteArray.ReadInt();
                EventEndTime = oByteArray.ReadInt();
            }
        }
		public ResNoticeCollectSpiritData()
		{
			PacketID = 1704;
		}
    }

    /// <summary>
    ///  [响应类] 聚灵大阵信息通知 创建者
    /// </summary>
    [Package(1704)]
    public partial class ResNoticeCollectSpiritDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCollectSpiritData();
        }
    }


    /// <summary>
    ///  [请求类]进入聚灵大阵地图
    /// </summary>
    public partial class ReqEnterCollectSpiritMap: Packet 
    {

        public override Packet Clone()
        {
            ReqEnterCollectSpiritMap pkg = new ReqEnterCollectSpiritMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEnterCollectSpiritMap()
		{
			PacketID = 1705;
		}
    }

    /// <summary>
    ///  [请求类] 进入聚灵大阵地图 创建者
    /// </summary>
    [Package(1705)]
    public partial class ReqEnterCollectSpiritMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEnterCollectSpiritMap();
        }
    }


    /// <summary>
    ///  [响应类]进入聚灵大阵地图
    /// </summary>
    public partial class ResEnterCollectSpiritMap: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResEnterCollectSpiritMap pkg = new ResEnterCollectSpiritMap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResEnterCollectSpiritMap()
		{
			PacketID = 1706;
		}
    }

    /// <summary>
    ///  [响应类] 进入聚灵大阵地图 创建者
    /// </summary>
    [Package(1706)]
    public partial class ResEnterCollectSpiritMapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEnterCollectSpiritMap();
        }
    }


    /// <summary>
    ///  [请求类]创建聚灵阵副本
    /// </summary>
    public partial class ReqCreateCollectSpiritDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 1:不朽魔王副本 2:秘境二层
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqCreateCollectSpiritDungeon pkg = new ReqCreateCollectSpiritDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqCreateCollectSpiritDungeon()
		{
			PacketID = 1707;
		}
    }

    /// <summary>
    ///  [请求类] 创建聚灵阵副本 创建者
    /// </summary>
    [Package(1707)]
    public partial class ReqCreateCollectSpiritDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateCollectSpiritDungeon();
        }
    }


    /// <summary>
    ///  [响应类]创建聚灵阵副本
    /// </summary>
    public partial class ResCreateCollectSpiritDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 1:不朽魔王副本 2:秘境二层
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResCreateCollectSpiritDungeon pkg = new ResCreateCollectSpiritDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapGuid = MapGuid;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                MapGuid = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResCreateCollectSpiritDungeon()
		{
			PacketID = 1708;
		}
    }

    /// <summary>
    ///  [响应类] 创建聚灵阵副本 创建者
    /// </summary>
    [Package(1708)]
    public partial class ResCreateCollectSpiritDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateCollectSpiritDungeon();
        }
    }


    /// <summary>
    ///  [请求类]通知不朽魔王副本信息
    /// </summary>
    public partial class ReqNoticeDevilDungeonInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeDevilDungeonInfo pkg = new ReqNoticeDevilDungeonInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeDevilDungeonInfo()
		{
			PacketID = 1709;
		}
    }

    /// <summary>
    ///  [请求类] 通知不朽魔王副本信息 创建者
    /// </summary>
    [Package(1709)]
    public partial class ReqNoticeDevilDungeonInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeDevilDungeonInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知不朽魔王副本信息
    /// </summary>
    public partial class ResNoticeDevilDungeonInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint DungeonEndTime;
        /// <summary>
        /// 
        /// </summary>
        public uint KillCount;

        public override Packet Clone()
        {
            ResNoticeDevilDungeonInfo pkg = new ResNoticeDevilDungeonInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonEndTime = DungeonEndTime;
            pkg.KillCount = KillCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DungeonEndTime);
                oByteArray.WriteUInt(KillCount);
            }
            else
            {
                DungeonEndTime = oByteArray.ReadUInt();
                KillCount = oByteArray.ReadUInt();
            }
        }
		public ResNoticeDevilDungeonInfo()
		{
			PacketID = 1710;
		}
    }

    /// <summary>
    ///  [响应类] 通知不朽魔王副本信息 创建者
    /// </summary>
    [Package(1710)]
    public partial class ResNoticeDevilDungeonInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeDevilDungeonInfo();
        }
    }


    /// <summary>
    ///  [请求类]购买聚灵阵密室商品
    /// </summary>
    public partial class ReqBuyCollectSpiritItem: Packet 
    {
        /// <summary>
        /// CurrencyTemplate[TID]
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ReqBuyCollectSpiritItem pkg = new ReqBuyCollectSpiritItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ReqBuyCollectSpiritItem()
		{
			PacketID = 1711;
		}
    }

    /// <summary>
    ///  [请求类] 购买聚灵阵密室商品 创建者
    /// </summary>
    [Package(1711)]
    public partial class ReqBuyCollectSpiritItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyCollectSpiritItem();
        }
    }


    /// <summary>
    ///  [响应类]购买聚灵阵密室商品
    /// </summary>
    public partial class ResBuyCollectSpiritItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBuyCollectSpiritItem pkg = new ResBuyCollectSpiritItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBuyCollectSpiritItem()
		{
			PacketID = 1712;
		}
    }

    /// <summary>
    ///  [响应类] 购买聚灵阵密室商品 创建者
    /// </summary>
    [Package(1712)]
    public partial class ResBuyCollectSpiritItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyCollectSpiritItem();
        }
    }


    /// <summary>
    ///  [请求类]通知聚灵阵密市事件限购数据
    /// </summary>
    public partial class ReqNoticeSecretStoreLimitBuyInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeSecretStoreLimitBuyInfo pkg = new ReqNoticeSecretStoreLimitBuyInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeSecretStoreLimitBuyInfo()
		{
			PacketID = 1713;
		}
    }

    /// <summary>
    ///  [请求类] 通知聚灵阵密市事件限购数据 创建者
    /// </summary>
    [Package(1713)]
    public partial class ReqNoticeSecretStoreLimitBuyInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSecretStoreLimitBuyInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知聚灵阵密市事件限购数据
    /// </summary>
    public partial class ResNoticeSecretStoreLimitBuyInfo: Packet 
    {
        /// <summary>
        /// key:TID:Num:已购数量
        /// </summary>
        public List<ProtocolPair> LimitInfo = new List<ProtocolPair>();

        public override Packet Clone()
        {
            ResNoticeSecretStoreLimitBuyInfo pkg = new ResNoticeSecretStoreLimitBuyInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ProtocolPair item in LimitInfo)
            {
                pkg.LimitInfo.Add(item.Clone() as ProtocolPair);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)LimitInfo.Count);
                for (int i = 0; i < LimitInfo.Count; i++)
                {
                    LimitInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int LimitInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < LimitInfoCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    LimitInfo.Add(obj);
                }
            }
        }
		public ResNoticeSecretStoreLimitBuyInfo()
		{
			PacketID = 1714;
		}
    }

    /// <summary>
    ///  [响应类] 通知聚灵阵密市事件限购数据 创建者
    /// </summary>
    [Package(1714)]
    public partial class ResNoticeSecretStoreLimitBuyInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSecretStoreLimitBuyInfo();
        }
    }


    /// <summary>
    ///  [请求类]物品熔炼设置
    /// </summary>
    public partial class ReqItemSmelterSet: Packet 
    {
        /// <summary>
        /// MeltTypeTemplate[tid]
        /// </summary>
        public uint SmelterTID;
        /// <summary>
        /// 0:设置1：取消
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqItemSmelterSet pkg = new ReqItemSmelterSet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SmelterTID = SmelterTID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SmelterTID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                SmelterTID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqItemSmelterSet()
		{
			PacketID = 1715;
		}
    }

    /// <summary>
    ///  [请求类] 物品熔炼设置 创建者
    /// </summary>
    [Package(1715)]
    public partial class ReqItemSmelterSetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqItemSmelterSet();
        }
    }


    /// <summary>
    ///  [响应类]物品熔炼设置
    /// </summary>
    public partial class ResItemSmelterSet: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// MeltTypeTemplate[tid]
        /// </summary>
        public uint SmelterTID;
        /// <summary>
        /// 0:设置1：取消
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResItemSmelterSet pkg = new ResItemSmelterSet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.SmelterTID = SmelterTID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(SmelterTID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                SmelterTID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResItemSmelterSet()
		{
			PacketID = 1716;
		}
    }

    /// <summary>
    ///  [响应类] 物品熔炼设置 创建者
    /// </summary>
    [Package(1716)]
    public partial class ResItemSmelterSetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResItemSmelterSet();
        }
    }


    /// <summary>
    ///  [请求类]物品自动熔炼
    /// </summary>
    public partial class ReqItemAutoSmelter: Packet 
    {
        /// <summary>
        /// 是否自动
        /// </summary>
        public bool Auto;

        public override Packet Clone()
        {
            ReqItemAutoSmelter pkg = new ReqItemAutoSmelter();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Auto = Auto;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Auto);
            }
            else
            {
                Auto = oByteArray.ReadBoolean();
            }
        }
		public ReqItemAutoSmelter()
		{
			PacketID = 1717;
		}
    }

    /// <summary>
    ///  [请求类] 物品自动熔炼 创建者
    /// </summary>
    [Package(1717)]
    public partial class ReqItemAutoSmelterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqItemAutoSmelter();
        }
    }


    /// <summary>
    ///  [响应类]物品自动熔炼
    /// </summary>
    public partial class ResItemAutoSmelter: Packet 
    {
        /// <summary>
        /// 是否自动
        /// </summary>
        public bool Auto;

        public override Packet Clone()
        {
            ResItemAutoSmelter pkg = new ResItemAutoSmelter();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Auto = Auto;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(Auto);
            }
            else
            {
                Auto = oByteArray.ReadBoolean();
            }
        }
		public ResItemAutoSmelter()
		{
			PacketID = 1718;
		}
    }

    /// <summary>
    ///  [响应类] 物品自动熔炼 创建者
    /// </summary>
    [Package(1718)]
    public partial class ResItemAutoSmelterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResItemAutoSmelter();
        }
    }


    /// <summary>
    ///  [请求类]聚灵阵密市个人限购信息
    /// </summary>
    public partial class ReqSecretStorePersonLimit: Packet 
    {

        public override Packet Clone()
        {
            ReqSecretStorePersonLimit pkg = new ReqSecretStorePersonLimit();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSecretStorePersonLimit()
		{
			PacketID = 1719;
		}
    }

    /// <summary>
    ///  [请求类] 聚灵阵密市个人限购信息 创建者
    /// </summary>
    [Package(1719)]
    public partial class ReqSecretStorePersonLimitCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSecretStorePersonLimit();
        }
    }


    /// <summary>
    ///  [响应类]聚灵阵密市个人限购信息
    /// </summary>
    public partial class ResSecretStorePersonLimit: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// key:TID:Num:已购数量
        /// </summary>
        public List<ProtocolPair> LimitInfo = new List<ProtocolPair>();

        public override Packet Clone()
        {
            ResSecretStorePersonLimit pkg = new ResSecretStorePersonLimit();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (ProtocolPair item in LimitInfo)
            {
                pkg.LimitInfo.Add(item.Clone() as ProtocolPair);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)LimitInfo.Count);
                for (int i = 0; i < LimitInfo.Count; i++)
                {
                    LimitInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadUInt();
                int LimitInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < LimitInfoCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    LimitInfo.Add(obj);
                }
            }
        }
		public ResSecretStorePersonLimit()
		{
			PacketID = 1720;
		}
    }

    /// <summary>
    ///  [响应类] 聚灵阵密市个人限购信息 创建者
    /// </summary>
    [Package(1720)]
    public partial class ResSecretStorePersonLimitCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSecretStorePersonLimit();
        }
    }


    /// <summary>
    ///  [请求类]通知精灵特效生效状态
    /// </summary>
    public partial class ReqNoticeElvesEffectStatus: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeElvesEffectStatus pkg = new ReqNoticeElvesEffectStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeElvesEffectStatus()
		{
			PacketID = 1721;
		}
    }

    /// <summary>
    ///  [请求类] 通知精灵特效生效状态 创建者
    /// </summary>
    [Package(1721)]
    public partial class ReqNoticeElvesEffectStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeElvesEffectStatus();
        }
    }


    /// <summary>
    ///  [响应类]通知精灵特效生效状态
    /// </summary>
    public partial class ResNoticeElvesEffectStatus: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ElvesTID;
        /// <summary>
        /// 特效是否生效
        /// </summary>
        public uint EffectStatus;

        public override Packet Clone()
        {
            ResNoticeElvesEffectStatus pkg = new ResNoticeElvesEffectStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ElvesTID = ElvesTID;
            pkg.EffectStatus = EffectStatus;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ElvesTID);
                oByteArray.WriteUInt(EffectStatus);
            }
            else
            {
                ElvesTID = oByteArray.ReadUInt();
                EffectStatus = oByteArray.ReadUInt();
            }
        }
		public ResNoticeElvesEffectStatus()
		{
			PacketID = 1722;
		}
    }

    /// <summary>
    ///  [响应类] 通知精灵特效生效状态 创建者
    /// </summary>
    [Package(1722)]
    public partial class ResNoticeElvesEffectStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeElvesEffectStatus();
        }
    }


    /// <summary>
    ///  [请求类]刷新玩家初始化完成状态
    /// </summary>
    public partial class ReqUpdatePlayerInitStatus: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerInitStatus pkg = new ReqUpdatePlayerInitStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerInitStatus()
		{
			PacketID = 1723;
		}
    }

    /// <summary>
    ///  [请求类] 刷新玩家初始化完成状态 创建者
    /// </summary>
    [Package(1723)]
    public partial class ReqUpdatePlayerInitStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerInitStatus();
        }
    }


    /// <summary>
    ///  [响应类]刷新玩家初始化完成状态
    /// </summary>
    public partial class ResUpdatePlayerInitStatus: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public bool InitComplate;

        public override Packet Clone()
        {
            ResUpdatePlayerInitStatus pkg = new ResUpdatePlayerInitStatus();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.InitComplate = InitComplate;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(InitComplate);
            }
            else
            {
                InitComplate = oByteArray.ReadBoolean();
            }
        }
		public ResUpdatePlayerInitStatus()
		{
			PacketID = 1724;
		}
    }

    /// <summary>
    ///  [响应类] 刷新玩家初始化完成状态 创建者
    /// </summary>
    [Package(1724)]
    public partial class ResUpdatePlayerInitStatusCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerInitStatus();
        }
    }


    /// <summary>
    ///  [请求类]升级图腾
    /// </summary>
    public partial class ReqUpgradeTotem: Packet 
    {

        public override Packet Clone()
        {
            ReqUpgradeTotem pkg = new ReqUpgradeTotem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpgradeTotem()
		{
			PacketID = 1725;
		}
    }

    /// <summary>
    ///  [请求类] 升级图腾 创建者
    /// </summary>
    [Package(1725)]
    public partial class ReqUpgradeTotemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeTotem();
        }
    }


    /// <summary>
    ///  [响应类]升级图腾
    /// </summary>
    public partial class ResUpgradeTotem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResUpgradeTotem pkg = new ResUpgradeTotem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResUpgradeTotem()
		{
			PacketID = 1726;
		}
    }

    /// <summary>
    ///  [响应类] 升级图腾 创建者
    /// </summary>
    [Package(1726)]
    public partial class ResUpgradeTotemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeTotem();
        }
    }


    /// <summary>
    ///  [请求类]兑换图腾经验
    /// </summary>
    public partial class ReqExchangeTotemExp: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int TID;

        public override Packet Clone()
        {
            ReqExchangeTotemExp pkg = new ReqExchangeTotemExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(TID);
            }
            else
            {
                TID = oByteArray.ReadInt();
            }
        }
		public ReqExchangeTotemExp()
		{
			PacketID = 1727;
		}
    }

    /// <summary>
    ///  [请求类] 兑换图腾经验 创建者
    /// </summary>
    [Package(1727)]
    public partial class ReqExchangeTotemExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqExchangeTotemExp();
        }
    }


    /// <summary>
    ///  [响应类]兑换图腾经验
    /// </summary>
    public partial class ResExchangeTotemExp: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResExchangeTotemExp pkg = new ResExchangeTotemExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResExchangeTotemExp()
		{
			PacketID = 1728;
		}
    }

    /// <summary>
    ///  [响应类] 兑换图腾经验 创建者
    /// </summary>
    [Package(1728)]
    public partial class ResExchangeTotemExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResExchangeTotemExp();
        }
    }


    /// <summary>
    ///  [请求类]图腾任务初始化
    /// </summary>
    public partial class ReqInitTotemTask: Packet 
    {

        public override Packet Clone()
        {
            ReqInitTotemTask pkg = new ReqInitTotemTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitTotemTask()
		{
			PacketID = 1729;
		}
    }

    /// <summary>
    ///  [请求类] 图腾任务初始化 创建者
    /// </summary>
    [Package(1729)]
    public partial class ReqInitTotemTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitTotemTask();
        }
    }


    /// <summary>
    ///  [响应类]图腾任务初始化
    /// </summary>
    public partial class ResInitTotemTask: Packet 
    {
        /// <summary>
        /// 任务列表（任务TID,任务完成进度）
        /// </summary>
        public List<ProtocolPair> Tasks = new List<ProtocolPair>();

        public override Packet Clone()
        {
            ResInitTotemTask pkg = new ResInitTotemTask();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ProtocolPair item in Tasks)
            {
                pkg.Tasks.Add(item.Clone() as ProtocolPair);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Tasks.Count);
                for (int i = 0; i < Tasks.Count; i++)
                {
                    Tasks[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int TasksCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < TasksCount; i++)
                {
                    ProtocolPair obj = new ProtocolPair();
                    obj.Serializtion(oByteArray, bSerialize);
                    Tasks.Add(obj);
                }
            }
        }
		public ResInitTotemTask()
		{
			PacketID = 1730;
		}
    }

    /// <summary>
    ///  [响应类] 图腾任务初始化 创建者
    /// </summary>
    [Package(1730)]
    public partial class ResInitTotemTaskCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitTotemTask();
        }
    }


    /// <summary>
    ///  [请求类]刷新图腾任务进度
    /// </summary>
    public partial class ReqUpdateTotemTaskData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateTotemTaskData pkg = new ReqUpdateTotemTaskData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateTotemTaskData()
		{
			PacketID = 1731;
		}
    }

    /// <summary>
    ///  [请求类] 刷新图腾任务进度 创建者
    /// </summary>
    [Package(1731)]
    public partial class ReqUpdateTotemTaskDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTotemTaskData();
        }
    }


    /// <summary>
    ///  [响应类]刷新图腾任务进度
    /// </summary>
    public partial class ResUpdateTotemTaskData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TaskTID;
        /// <summary>
        /// 任务完成进度
        /// </summary>
        public uint TaskValue;

        public override Packet Clone()
        {
            ResUpdateTotemTaskData pkg = new ResUpdateTotemTaskData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TaskTID = TaskTID;
            pkg.TaskValue = TaskValue;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TaskTID);
                oByteArray.WriteUInt(TaskValue);
            }
            else
            {
                TaskTID = oByteArray.ReadUInt();
                TaskValue = oByteArray.ReadUInt();
            }
        }
		public ResUpdateTotemTaskData()
		{
			PacketID = 1732;
		}
    }

    /// <summary>
    ///  [响应类] 刷新图腾任务进度 创建者
    /// </summary>
    [Package(1732)]
    public partial class ResUpdateTotemTaskDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTotemTaskData();
        }
    }


    /// <summary>
    ///  [请求类]初始化主宰者特权信息
    /// </summary>
    public partial class ReqInitPlayerDominaterData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerDominaterData pkg = new ReqInitPlayerDominaterData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerDominaterData()
		{
			PacketID = 1733;
		}
    }

    /// <summary>
    ///  [请求类] 初始化主宰者特权信息 创建者
    /// </summary>
    [Package(1733)]
    public partial class ReqInitPlayerDominaterDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerDominaterData();
        }
    }


    /// <summary>
    ///  [响应类]初始化主宰者特权信息
    /// </summary>
    public partial class ResInitPlayerDominaterData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public string DominaterInfo;

        public override Packet Clone()
        {
            ResInitPlayerDominaterData pkg = new ResInitPlayerDominaterData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.DominaterInfo = DominaterInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUTF(DominaterInfo);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                DominaterInfo = oByteArray.ReadUTF();
            }
        }
		public ResInitPlayerDominaterData()
		{
			PacketID = 1734;
		}
    }

    /// <summary>
    ///  [响应类] 初始化主宰者特权信息 创建者
    /// </summary>
    [Package(1734)]
    public partial class ResInitPlayerDominaterDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerDominaterData();
        }
    }


    /// <summary>
    ///  [请求类]刷新限时礼包信息
    /// </summary>
    public partial class ReqRefreshTimeLimitedGiftPackInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqRefreshTimeLimitedGiftPackInfo pkg = new ReqRefreshTimeLimitedGiftPackInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRefreshTimeLimitedGiftPackInfo()
		{
			PacketID = 1735;
		}
    }

    /// <summary>
    ///  [请求类] 刷新限时礼包信息 创建者
    /// </summary>
    [Package(1735)]
    public partial class ReqRefreshTimeLimitedGiftPackInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRefreshTimeLimitedGiftPackInfo();
        }
    }


    /// <summary>
    ///  [响应类]刷新限时礼包信息
    /// </summary>
    public partial class ResRefreshTimeLimitedGiftPackInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> FinishedItems = new List<uint>();
        /// <summary>
        /// 当前礼包id
        /// </summary>
        public uint CurItem;
        /// <summary>
        /// 当前礼包结束时间戳
        /// </summary>
        public uint EndTimestamp;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResRefreshTimeLimitedGiftPackInfo pkg = new ResRefreshTimeLimitedGiftPackInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in FinishedItems)
            {
                pkg.FinishedItems.Add(item);
            }
            pkg.CurItem = CurItem;
            pkg.EndTimestamp = EndTimestamp;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)FinishedItems.Count);
                for (int i = 0; i < FinishedItems.Count; i++)
                {
                    oByteArray.WriteUInt(FinishedItems[i]);
                }
                oByteArray.WriteUInt(CurItem);
                oByteArray.WriteUInt(EndTimestamp);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                int FinishedItemsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < FinishedItemsCount; i++)
                {
                    FinishedItems.Add(oByteArray.ReadUInt());
                }
                CurItem = oByteArray.ReadUInt();
                EndTimestamp = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResRefreshTimeLimitedGiftPackInfo()
		{
			PacketID = 1736;
		}
    }

    /// <summary>
    ///  [响应类] 刷新限时礼包信息 创建者
    /// </summary>
    [Package(1736)]
    public partial class ResRefreshTimeLimitedGiftPackInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRefreshTimeLimitedGiftPackInfo();
        }
    }


    /// <summary>
    ///  [请求类]购买狂暴之力
    /// </summary>
    public partial class ReqBuyRagePower: Packet 
    {

        public override Packet Clone()
        {
            ReqBuyRagePower pkg = new ReqBuyRagePower();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBuyRagePower()
		{
			PacketID = 1737;
		}
    }

    /// <summary>
    ///  [请求类] 购买狂暴之力 创建者
    /// </summary>
    [Package(1737)]
    public partial class ReqBuyRagePowerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyRagePower();
        }
    }


    /// <summary>
    ///  [响应类]购买狂暴之力
    /// </summary>
    public partial class ResBuyRagePower: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBuyRagePower pkg = new ResBuyRagePower();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBuyRagePower()
		{
			PacketID = 1738;
		}
    }

    /// <summary>
    ///  [响应类] 购买狂暴之力 创建者
    /// </summary>
    [Package(1738)]
    public partial class ResBuyRagePowerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyRagePower();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家主宰者信息
    /// </summary>
    public partial class ReqUpdatePlayerDominaterData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerDominaterData pkg = new ReqUpdatePlayerDominaterData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerDominaterData()
		{
			PacketID = 1739;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家主宰者信息 创建者
    /// </summary>
    [Package(1739)]
    public partial class ReqUpdatePlayerDominaterDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerDominaterData();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家主宰者信息
    /// </summary>
    public partial class ResUpdatePlayerDominaterData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string DominaterInfo;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResUpdatePlayerDominaterData pkg = new ResUpdatePlayerDominaterData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DominaterInfo = DominaterInfo;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(DominaterInfo);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                DominaterInfo = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResUpdatePlayerDominaterData()
		{
			PacketID = 1740;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家主宰者信息 创建者
    /// </summary>
    [Package(1740)]
    public partial class ResUpdatePlayerDominaterDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerDominaterData();
        }
    }


    /// <summary>
    ///  [请求类]通知前端刷新游戏
    /// </summary>
    public partial class ReqNoticeUpdateGame: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdateGame pkg = new ReqNoticeUpdateGame();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdateGame()
		{
			PacketID = 1741;
		}
    }

    /// <summary>
    ///  [请求类] 通知前端刷新游戏 创建者
    /// </summary>
    [Package(1741)]
    public partial class ReqNoticeUpdateGameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateGame();
        }
    }


    /// <summary>
    ///  [响应类]通知前端刷新游戏
    /// </summary>
    public partial class ResNoticeUpdateGame: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string NoticeText;

        public override Packet Clone()
        {
            ResNoticeUpdateGame pkg = new ResNoticeUpdateGame();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NoticeText = NoticeText;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(NoticeText);
            }
            else
            {
                NoticeText = oByteArray.ReadUTF();
            }
        }
		public ResNoticeUpdateGame()
		{
			PacketID = 1742;
		}
    }

    /// <summary>
    ///  [响应类] 通知前端刷新游戏 创建者
    /// </summary>
    [Package(1742)]
    public partial class ResNoticeUpdateGameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateGame();
        }
    }


    /// <summary>
    ///  [请求类]限时直购礼包购买成功
    /// </summary>
    public partial class ReqBuyTimeLimitedGiftPackSuccess: Packet 
    {

        public override Packet Clone()
        {
            ReqBuyTimeLimitedGiftPackSuccess pkg = new ReqBuyTimeLimitedGiftPackSuccess();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBuyTimeLimitedGiftPackSuccess()
		{
			PacketID = 1743;
		}
    }

    /// <summary>
    ///  [请求类] 限时直购礼包购买成功 创建者
    /// </summary>
    [Package(1743)]
    public partial class ReqBuyTimeLimitedGiftPackSuccessCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyTimeLimitedGiftPackSuccess();
        }
    }


    /// <summary>
    ///  [响应类]限时直购礼包购买成功
    /// </summary>
    public partial class ResBuyTimeLimitedGiftPackSuccess: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint GiftPackID;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResBuyTimeLimitedGiftPackSuccess pkg = new ResBuyTimeLimitedGiftPackSuccess();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GiftPackID = GiftPackID;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(GiftPackID);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                GiftPackID = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResBuyTimeLimitedGiftPackSuccess()
		{
			PacketID = 1744;
		}
    }

    /// <summary>
    ///  [响应类] 限时直购礼包购买成功 创建者
    /// </summary>
    [Package(1744)]
    public partial class ResBuyTimeLimitedGiftPackSuccessCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyTimeLimitedGiftPackSuccess();
        }
    }


    /// <summary>
    ///  [请求类]限时目标
    /// </summary>
    public partial class ReqRefreshTimelimitedttargetInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqRefreshTimelimitedttargetInfo pkg = new ReqRefreshTimelimitedttargetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRefreshTimelimitedttargetInfo()
		{
			PacketID = 1745;
		}
    }

    /// <summary>
    ///  [请求类] 限时目标 创建者
    /// </summary>
    [Package(1745)]
    public partial class ReqRefreshTimelimitedttargetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRefreshTimelimitedttargetInfo();
        }
    }


    /// <summary>
    ///  [响应类]限时目标
    /// </summary>
    public partial class ResRefreshTimelimitedttargetInfo: Packet 
    {
        /// <summary>
        /// A目标tid（客户端显示奖励道具用）
        /// </summary>
        public uint TypeATID;
        /// <summary>
        /// A进度分子
        /// </summary>
        public uint TypeACurr;
        /// <summary>
        /// A进度分母
        /// </summary>
        public uint TypeAMax;
        /// <summary>
        /// A截至时间
        /// </summary>
        public uint TypeAEndTime;
        /// <summary>
        /// B目标tid（客户端显示奖励道具用）
        /// </summary>
        public uint TypeBTID;
        /// <summary>
        /// B进度分子
        /// </summary>
        public uint TypeBCurr;
        /// <summary>
        /// B进度分母
        /// </summary>
        public uint TypeBMax;
        /// <summary>
        /// B截至时间
        /// </summary>
        public uint TypeBEndTime;

        public override Packet Clone()
        {
            ResRefreshTimelimitedttargetInfo pkg = new ResRefreshTimelimitedttargetInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TypeATID = TypeATID;
            pkg.TypeACurr = TypeACurr;
            pkg.TypeAMax = TypeAMax;
            pkg.TypeAEndTime = TypeAEndTime;
            pkg.TypeBTID = TypeBTID;
            pkg.TypeBCurr = TypeBCurr;
            pkg.TypeBMax = TypeBMax;
            pkg.TypeBEndTime = TypeBEndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TypeATID);
                oByteArray.WriteUInt(TypeACurr);
                oByteArray.WriteUInt(TypeAMax);
                oByteArray.WriteUInt(TypeAEndTime);
                oByteArray.WriteUInt(TypeBTID);
                oByteArray.WriteUInt(TypeBCurr);
                oByteArray.WriteUInt(TypeBMax);
                oByteArray.WriteUInt(TypeBEndTime);
            }
            else
            {
                TypeATID = oByteArray.ReadUInt();
                TypeACurr = oByteArray.ReadUInt();
                TypeAMax = oByteArray.ReadUInt();
                TypeAEndTime = oByteArray.ReadUInt();
                TypeBTID = oByteArray.ReadUInt();
                TypeBCurr = oByteArray.ReadUInt();
                TypeBMax = oByteArray.ReadUInt();
                TypeBEndTime = oByteArray.ReadUInt();
            }
        }
		public ResRefreshTimelimitedttargetInfo()
		{
			PacketID = 1746;
		}
    }

    /// <summary>
    ///  [响应类] 限时目标 创建者
    /// </summary>
    [Package(1746)]
    public partial class ResRefreshTimelimitedttargetInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRefreshTimelimitedttargetInfo();
        }
    }


    /// <summary>
    ///  [请求类]限时目标，领取奖励
    /// </summary>
    public partial class ReqTimelimitedttargetAward: Packet 
    {
        /// <summary>
        /// 领奖唯一编号
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqTimelimitedttargetAward pkg = new ReqTimelimitedttargetAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqTimelimitedttargetAward()
		{
			PacketID = 1747;
		}
    }

    /// <summary>
    ///  [请求类] 限时目标，领取奖励 创建者
    /// </summary>
    [Package(1747)]
    public partial class ReqTimelimitedttargetAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTimelimitedttargetAward();
        }
    }


    /// <summary>
    ///  [响应类]限时目标，领取奖励
    /// </summary>
    public partial class ResTimelimitedttargetAward: Packet 
    {
        /// <summary>
        /// 0成功，1失败
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResTimelimitedttargetAward pkg = new ResTimelimitedttargetAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResTimelimitedttargetAward()
		{
			PacketID = 1748;
		}
    }

    /// <summary>
    ///  [响应类] 限时目标，领取奖励 创建者
    /// </summary>
    [Package(1748)]
    public partial class ResTimelimitedttargetAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTimelimitedttargetAward();
        }
    }


    /// <summary>
    ///  [请求类]通知狂暴之力状态
    /// </summary>
    public partial class ReqNoticeRagePowerState: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeRagePowerState pkg = new ReqNoticeRagePowerState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeRagePowerState()
		{
			PacketID = 1749;
		}
    }

    /// <summary>
    ///  [请求类] 通知狂暴之力状态 创建者
    /// </summary>
    [Package(1749)]
    public partial class ReqNoticeRagePowerStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeRagePowerState();
        }
    }


    /// <summary>
    ///  [响应类]通知狂暴之力状态
    /// </summary>
    public partial class ResNoticeRagePowerState: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public bool State;

        public override Packet Clone()
        {
            ResNoticeRagePowerState pkg = new ResNoticeRagePowerState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteBoolean(State);
            }
            else
            {
                State = oByteArray.ReadBoolean();
            }
        }
		public ResNoticeRagePowerState()
		{
			PacketID = 1750;
		}
    }

    /// <summary>
    ///  [响应类] 通知狂暴之力状态 创建者
    /// </summary>
    [Package(1750)]
    public partial class ResNoticeRagePowerStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeRagePowerState();
        }
    }


    /// <summary>
    ///  [请求类]沙城捐赠
    /// </summary>
    public partial class ReqShachengDonation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Num;

        public override Packet Clone()
        {
            ReqShachengDonation pkg = new ReqShachengDonation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Num);
            }
            else
            {
                Num = oByteArray.ReadUInt();
            }
        }
		public ReqShachengDonation()
		{
			PacketID = 1751;
		}
    }

    /// <summary>
    ///  [请求类] 沙城捐赠 创建者
    /// </summary>
    [Package(1751)]
    public partial class ReqShachengDonationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqShachengDonation();
        }
    }


    /// <summary>
    ///  [响应类]沙城捐赠
    /// </summary>
    public partial class ResShachengDonation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint Num;

        public override Packet Clone()
        {
            ResShachengDonation pkg = new ResShachengDonation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Num);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Num = oByteArray.ReadUInt();
            }
        }
		public ResShachengDonation()
		{
			PacketID = 1752;
		}
    }

    /// <summary>
    ///  [响应类] 沙城捐赠 创建者
    /// </summary>
    [Package(1752)]
    public partial class ResShachengDonationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResShachengDonation();
        }
    }


    /// <summary>
    ///  [请求类]清空沙城捐赠
    /// </summary>
    public partial class ReqClearShachengDonation: Packet 
    {

        public override Packet Clone()
        {
            ReqClearShachengDonation pkg = new ReqClearShachengDonation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqClearShachengDonation()
		{
			PacketID = 1753;
		}
    }

    /// <summary>
    ///  [请求类] 清空沙城捐赠 创建者
    /// </summary>
    [Package(1753)]
    public partial class ReqClearShachengDonationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqClearShachengDonation();
        }
    }


    /// <summary>
    ///  [响应类]清空沙城捐赠
    /// </summary>
    public partial class ResClearShachengDonation: Packet 
    {

        public override Packet Clone()
        {
            ResClearShachengDonation pkg = new ResClearShachengDonation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResClearShachengDonation()
		{
			PacketID = 1754;
		}
    }

    /// <summary>
    ///  [响应类] 清空沙城捐赠 创建者
    /// </summary>
    [Package(1754)]
    public partial class ResClearShachengDonationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResClearShachengDonation();
        }
    }


    /// <summary>
    ///  [请求类]十二宫副本购买道具
    /// </summary>
    public partial class ReqZodiacDungeonBuyItem: Packet 
    {
        /// <summary>
        /// 地图TID
        /// </summary>
        public uint DungeonID;
        /// <summary>
        /// [0挑战;1扫荡]
        /// </summary>
        public uint IsQuickly;

        public override Packet Clone()
        {
            ReqZodiacDungeonBuyItem pkg = new ReqZodiacDungeonBuyItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonID = DungeonID;
            pkg.IsQuickly = IsQuickly;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DungeonID);
                oByteArray.WriteUInt(IsQuickly);
            }
            else
            {
                DungeonID = oByteArray.ReadUInt();
                IsQuickly = oByteArray.ReadUInt();
            }
        }
		public ReqZodiacDungeonBuyItem()
		{
			PacketID = 1755;
		}
    }

    /// <summary>
    ///  [请求类] 十二宫副本购买道具 创建者
    /// </summary>
    [Package(1755)]
    public partial class ReqZodiacDungeonBuyItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqZodiacDungeonBuyItem();
        }
    }


    /// <summary>
    ///  [响应类]十二宫副本购买道具
    /// </summary>
    public partial class ResZodiacDungeonBuyItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// [0挑战;1扫荡]
        /// </summary>
        public uint IsQuickly;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint DungeonID;

        public override Packet Clone()
        {
            ResZodiacDungeonBuyItem pkg = new ResZodiacDungeonBuyItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.IsQuickly = IsQuickly;
            pkg.DungeonID = DungeonID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(IsQuickly);
                oByteArray.WriteUInt(DungeonID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                IsQuickly = oByteArray.ReadUInt();
                DungeonID = oByteArray.ReadUInt();
            }
        }
		public ResZodiacDungeonBuyItem()
		{
			PacketID = 1756;
		}
    }

    /// <summary>
    ///  [响应类] 十二宫副本购买道具 创建者
    /// </summary>
    [Package(1756)]
    public partial class ResZodiacDungeonBuyItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResZodiacDungeonBuyItem();
        }
    }


    /// <summary>
    ///  [请求类]十二宫副本奖励
    /// </summary>
    public partial class ReqNoticeZodiacDungeonAward: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeZodiacDungeonAward pkg = new ReqNoticeZodiacDungeonAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeZodiacDungeonAward()
		{
			PacketID = 1757;
		}
    }

    /// <summary>
    ///  [请求类] 十二宫副本奖励 创建者
    /// </summary>
    [Package(1757)]
    public partial class ReqNoticeZodiacDungeonAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeZodiacDungeonAward();
        }
    }


    /// <summary>
    ///  [响应类]十二宫副本奖励
    /// </summary>
    public partial class ResNoticeZodiacDungeonAward: Packet 
    {
        /// <summary>
        /// TID|NUM,TID|NUM...
        /// </summary>
        public string Award;
        /// <summary>
        /// 是否扫荡
        /// </summary>
        public bool IsQuickly;

        public override Packet Clone()
        {
            ResNoticeZodiacDungeonAward pkg = new ResNoticeZodiacDungeonAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Award = Award;
            pkg.IsQuickly = IsQuickly;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(Award);
                oByteArray.WriteBoolean(IsQuickly);
            }
            else
            {
                Award = oByteArray.ReadUTF();
                IsQuickly = oByteArray.ReadBoolean();
            }
        }
		public ResNoticeZodiacDungeonAward()
		{
			PacketID = 1758;
		}
    }

    /// <summary>
    ///  [响应类] 十二宫副本奖励 创建者
    /// </summary>
    [Package(1758)]
    public partial class ResNoticeZodiacDungeonAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeZodiacDungeonAward();
        }
    }


    /// <summary>
    ///  [请求类]初始化玩家超级VIP信息
    /// </summary>
    public partial class ReqInitPlayerSuperVipData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerSuperVipData pkg = new ReqInitPlayerSuperVipData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerSuperVipData()
		{
			PacketID = 1759;
		}
    }

    /// <summary>
    ///  [请求类] 初始化玩家超级VIP信息 创建者
    /// </summary>
    [Package(1759)]
    public partial class ReqInitPlayerSuperVipDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerSuperVipData();
        }
    }


    /// <summary>
    ///  [响应类]初始化玩家超级VIP信息
    /// </summary>
    public partial class ResInitPlayerSuperVipData: Packet 
    {
        /// <summary>
        /// Type|EndTime|AwardTime
        /// </summary>
        public string SuperVipInfo;
        /// <summary>
        /// 
        /// </summary>
        public string DominaterInfo;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResInitPlayerSuperVipData pkg = new ResInitPlayerSuperVipData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SuperVipInfo = SuperVipInfo;
            pkg.DominaterInfo = DominaterInfo;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(SuperVipInfo);
                oByteArray.WriteUTF(DominaterInfo);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                SuperVipInfo = oByteArray.ReadUTF();
                DominaterInfo = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResInitPlayerSuperVipData()
		{
			PacketID = 1760;
		}
    }

    /// <summary>
    ///  [响应类] 初始化玩家超级VIP信息 创建者
    /// </summary>
    [Package(1760)]
    public partial class ResInitPlayerSuperVipDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerSuperVipData();
        }
    }


    /// <summary>
    ///  [请求类]更新玩家超级VIP信息
    /// </summary>
    public partial class ReqUpdatePlayerSuperVipData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerSuperVipData pkg = new ReqUpdatePlayerSuperVipData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerSuperVipData()
		{
			PacketID = 1761;
		}
    }

    /// <summary>
    ///  [请求类] 更新玩家超级VIP信息 创建者
    /// </summary>
    [Package(1761)]
    public partial class ReqUpdatePlayerSuperVipDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerSuperVipData();
        }
    }


    /// <summary>
    ///  [响应类]更新玩家超级VIP信息
    /// </summary>
    public partial class ResUpdatePlayerSuperVipData: Packet 
    {
        /// <summary>
        /// Type|EndTime|AwardTime,Type|EndTime|AwardTime
        /// </summary>
        public string SuperVipInfo;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResUpdatePlayerSuperVipData pkg = new ResUpdatePlayerSuperVipData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SuperVipInfo = SuperVipInfo;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(SuperVipInfo);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                SuperVipInfo = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResUpdatePlayerSuperVipData()
		{
			PacketID = 1762;
		}
    }

    /// <summary>
    ///  [响应类] 更新玩家超级VIP信息 创建者
    /// </summary>
    [Package(1762)]
    public partial class ResUpdatePlayerSuperVipDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerSuperVipData();
        }
    }


    /// <summary>
    ///  [请求类]开启技能释放(旧ReqPlayerAttack开启附加技能逻辑暂不变更)
    /// </summary>
    public partial class ReqChangeSkillState: Packet 
    {
        /// <summary>
        /// 技能ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// True:开启
        /// </summary>
        public bool SkillState;

        public override Packet Clone()
        {
            ReqChangeSkillState pkg = new ReqChangeSkillState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillID = SkillID;
            pkg.SkillState = SkillState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteBoolean(SkillState);
            }
            else
            {
                SkillID = oByteArray.ReadUInt();
                SkillState = oByteArray.ReadBoolean();
            }
        }
		public ReqChangeSkillState()
		{
			PacketID = 1763;
		}
    }

    /// <summary>
    ///  [请求类] 开启技能释放(旧ReqPlayerAttack开启附加技能逻辑暂不变更) 创建者
    /// </summary>
    [Package(1763)]
    public partial class ReqChangeSkillStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChangeSkillState();
        }
    }


    /// <summary>
    ///  [响应类]开启技能释放(旧ReqPlayerAttack开启附加技能逻辑暂不变更)
    /// </summary>
    public partial class ResChangeSkillState: Packet 
    {
        /// <summary>
        /// 技能ID
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 
        /// </summary>
        public bool SkillState;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResChangeSkillState pkg = new ResChangeSkillState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.SkillID = SkillID;
            pkg.SkillState = SkillState;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(SkillID);
                oByteArray.WriteBoolean(SkillState);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                SkillID = oByteArray.ReadUInt();
                SkillState = oByteArray.ReadBoolean();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResChangeSkillState()
		{
			PacketID = 1764;
		}
    }

    /// <summary>
    ///  [响应类] 开启技能释放(旧ReqPlayerAttack开启附加技能逻辑暂不变更) 创建者
    /// </summary>
    [Package(1764)]
    public partial class ResChangeSkillStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChangeSkillState();
        }
    }


    /// <summary>
    ///  [请求类]获取补偿奖励
    /// </summary>
    public partial class ReqGetNewCompensateAwards: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqGetNewCompensateAwards pkg = new ReqGetNewCompensateAwards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqGetNewCompensateAwards()
		{
			PacketID = 1765;
		}
    }

    /// <summary>
    ///  [请求类] 获取补偿奖励 创建者
    /// </summary>
    [Package(1765)]
    public partial class ReqGetNewCompensateAwardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetNewCompensateAwards();
        }
    }


    /// <summary>
    ///  [响应类]获取补偿奖励
    /// </summary>
    public partial class ResGetNewCompensateAwards: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResGetNewCompensateAwards pkg = new ResGetNewCompensateAwards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResGetNewCompensateAwards()
		{
			PacketID = 1766;
		}
    }

    /// <summary>
    ///  [响应类] 获取补偿奖励 创建者
    /// </summary>
    [Package(1766)]
    public partial class ResGetNewCompensateAwardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetNewCompensateAwards();
        }
    }


    /// <summary>
    ///  [请求类]经验炼制
    /// </summary>
    public partial class ReqExpRefine: Packet 
    {

        public override Packet Clone()
        {
            ReqExpRefine pkg = new ReqExpRefine();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqExpRefine()
		{
			PacketID = 1767;
		}
    }

    /// <summary>
    ///  [请求类] 经验炼制 创建者
    /// </summary>
    [Package(1767)]
    public partial class ReqExpRefineCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqExpRefine();
        }
    }


    /// <summary>
    ///  [响应类]经验炼制
    /// </summary>
    public partial class ResExpRefine: Packet 
    {
        /// <summary>
        /// 经验炼制最后日期
        /// </summary>
        public uint ExpRefineDay;
        /// <summary>
        /// 经验炼制次数
        /// </summary>
        public uint ExpRefineNum;

        public override Packet Clone()
        {
            ResExpRefine pkg = new ResExpRefine();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ExpRefineDay = ExpRefineDay;
            pkg.ExpRefineNum = ExpRefineNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ExpRefineDay);
                oByteArray.WriteUInt(ExpRefineNum);
            }
            else
            {
                ExpRefineDay = oByteArray.ReadUInt();
                ExpRefineNum = oByteArray.ReadUInt();
            }
        }
		public ResExpRefine()
		{
			PacketID = 1768;
		}
    }

    /// <summary>
    ///  [响应类] 经验炼制 创建者
    /// </summary>
    [Package(1768)]
    public partial class ResExpRefineCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResExpRefine();
        }
    }


    /// <summary>
    ///  [请求类]点击按钮经验炼制
    /// </summary>
    public partial class ReqDoExpRefine: Packet 
    {

        public override Packet Clone()
        {
            ReqDoExpRefine pkg = new ReqDoExpRefine();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDoExpRefine()
		{
			PacketID = 1769;
		}
    }

    /// <summary>
    ///  [请求类] 点击按钮经验炼制 创建者
    /// </summary>
    [Package(1769)]
    public partial class ReqDoExpRefineCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDoExpRefine();
        }
    }


    /// <summary>
    ///  [响应类]点击按钮经验炼制
    /// </summary>
    public partial class ResDoExpRefine: Packet 
    {
        /// <summary>
        /// 返回成功失败
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResDoExpRefine pkg = new ResDoExpRefine();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResDoExpRefine()
		{
			PacketID = 1770;
		}
    }

    /// <summary>
    ///  [响应类] 点击按钮经验炼制 创建者
    /// </summary>
    [Package(1770)]
    public partial class ResDoExpRefineCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDoExpRefine();
        }
    }


    /// <summary>
    ///  [请求类]通知重置玩家十二宫通关层数
    /// </summary>
    public partial class ReqNoticePlayerZodiaceLayer: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticePlayerZodiaceLayer pkg = new ReqNoticePlayerZodiaceLayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticePlayerZodiaceLayer()
		{
			PacketID = 1771;
		}
    }

    /// <summary>
    ///  [请求类] 通知重置玩家十二宫通关层数 创建者
    /// </summary>
    [Package(1771)]
    public partial class ReqNoticePlayerZodiaceLayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePlayerZodiaceLayer();
        }
    }


    /// <summary>
    ///  [响应类]通知重置玩家十二宫通关层数
    /// </summary>
    public partial class ResNoticePlayerZodiaceLayer: Packet 
    {
        /// <summary>
        /// 十二宫层数
        /// </summary>
        public uint ZodiaceLayer;
        /// <summary>
        /// 圣十二宫层数
        /// </summary>
        public uint HolyZodiaceLayer;

        public override Packet Clone()
        {
            ResNoticePlayerZodiaceLayer pkg = new ResNoticePlayerZodiaceLayer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ZodiaceLayer = ZodiaceLayer;
            pkg.HolyZodiaceLayer = HolyZodiaceLayer;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ZodiaceLayer);
                oByteArray.WriteUInt(HolyZodiaceLayer);
            }
            else
            {
                ZodiaceLayer = oByteArray.ReadUInt();
                HolyZodiaceLayer = oByteArray.ReadUInt();
            }
        }
		public ResNoticePlayerZodiaceLayer()
		{
			PacketID = 1772;
		}
    }

    /// <summary>
    ///  [响应类] 通知重置玩家十二宫通关层数 创建者
    /// </summary>
    [Package(1772)]
    public partial class ResNoticePlayerZodiaceLayerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePlayerZodiaceLayer();
        }
    }


    /// <summary>
    ///  [请求类]刷新玩家活动积分
    /// </summary>
    public partial class ReqUpdatePlayerActivityScore: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerActivityScore pkg = new ReqUpdatePlayerActivityScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerActivityScore()
		{
			PacketID = 1773;
		}
    }

    /// <summary>
    ///  [请求类] 刷新玩家活动积分 创建者
    /// </summary>
    [Package(1773)]
    public partial class ReqUpdatePlayerActivityScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerActivityScore();
        }
    }


    /// <summary>
    ///  [响应类]刷新玩家活动积分
    /// </summary>
    public partial class ResUpdatePlayerActivityScore: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 活动积分
        /// </summary>
        public uint ActivitySocre;

        public override Packet Clone()
        {
            ResUpdatePlayerActivityScore pkg = new ResUpdatePlayerActivityScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerObjectID = PlayerObjectID.Clone() as ObjectGuidInfo;
            pkg.ActivitySocre = ActivitySocre;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ActivitySocre);
            }
            else
            {
                PlayerObjectID.Serializtion(oByteArray, bSerialize);
                ActivitySocre = oByteArray.ReadUInt();
            }
        }
		public ResUpdatePlayerActivityScore()
		{
			PacketID = 1774;
		}
    }

    /// <summary>
    ///  [响应类] 刷新玩家活动积分 创建者
    /// </summary>
    [Package(1774)]
    public partial class ResUpdatePlayerActivityScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerActivityScore();
        }
    }


    /// <summary>
    ///  [请求类]条件刷怪物
    /// </summary>
    public partial class ReqSpawnMonsterEx: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public uint WeapenID;
        /// <summary>
        /// 
        /// </summary>
        public uint ClothesID;
        /// <summary>
        /// 
        /// </summary>
        public uint WingLevel;
        /// <summary>
        /// 
        /// </summary>
        public uint Title;
        /// <summary>
        /// 
        /// </summary>
        public string GuildTitle;
        /// <summary>
        /// 
        /// </summary>
        public string PlayerName;
        /// <summary>
        /// 
        /// </summary>
        public uint Fame;
        /// <summary>
        /// 
        /// </summary>
        public uint ResetTime;
        /// <summary>
        /// 
        /// </summary>
        public ulong GuildGuild;
        /// <summary>
        /// 
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 
        /// </summary>
        public byte Sex;
        /// <summary>
        /// 
        /// </summary>
        public byte Career;
        /// <summary>
        /// 
        /// </summary>
        public uint MaxHp;
        /// <summary>
        /// 
        /// </summary>
        public uint Param1;
        /// <summary>
        /// 
        /// </summary>
        public uint Param2;

        public override Packet Clone()
        {
            ReqSpawnMonsterEx pkg = new ReqSpawnMonsterEx();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TmplID = TmplID;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.WeapenID = WeapenID;
            pkg.ClothesID = ClothesID;
            pkg.WingLevel = WingLevel;
            pkg.Title = Title;
            pkg.GuildTitle = GuildTitle;
            pkg.PlayerName = PlayerName;
            pkg.Fame = Fame;
            pkg.ResetTime = ResetTime;
            pkg.GuildGuild = GuildGuild;
            pkg.MapGuid = MapGuid;
            pkg.Sex = Sex;
            pkg.Career = Career;
            pkg.MaxHp = MaxHp;
            pkg.Param1 = Param1;
            pkg.Param2 = Param2;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(WeapenID);
                oByteArray.WriteUInt(ClothesID);
                oByteArray.WriteUInt(WingLevel);
                oByteArray.WriteUInt(Title);
                oByteArray.WriteUTF(GuildTitle);
                oByteArray.WriteUTF(PlayerName);
                oByteArray.WriteUInt(Fame);
                oByteArray.WriteUInt(ResetTime);
                oByteArray.WriteUInt64(GuildGuild);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteByte(Sex);
                oByteArray.WriteByte(Career);
                oByteArray.WriteUInt(MaxHp);
                oByteArray.WriteUInt(Param1);
                oByteArray.WriteUInt(Param2);
            }
            else
            {
                TmplID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                WeapenID = oByteArray.ReadUInt();
                ClothesID = oByteArray.ReadUInt();
                WingLevel = oByteArray.ReadUInt();
                Title = oByteArray.ReadUInt();
                GuildTitle = oByteArray.ReadUTF();
                PlayerName = oByteArray.ReadUTF();
                Fame = oByteArray.ReadUInt();
                ResetTime = oByteArray.ReadUInt();
                GuildGuild = oByteArray.ReadUInt64();
                MapGuid = oByteArray.ReadUInt64();
                Sex = oByteArray.ReadByte();
                Career = oByteArray.ReadByte();
                MaxHp = oByteArray.ReadUInt();
                Param1 = oByteArray.ReadUInt();
                Param2 = oByteArray.ReadUInt();
            }
        }
		public ReqSpawnMonsterEx()
		{
			PacketID = 1775;
		}
    }

    /// <summary>
    ///  [请求类] 条件刷怪物 创建者
    /// </summary>
    [Package(1775)]
    public partial class ReqSpawnMonsterExCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnMonsterEx();
        }
    }


    /// <summary>
    ///  [响应类]条件刷怪物
    /// </summary>
    public partial class ResSpawnMonsterEx: Packet 
    {
        /// <summary>
        /// 结果
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint Param1;
        /// <summary>
        /// 
        /// </summary>
        public uint Param2;
        /// <summary>
        /// 
        /// </summary>
        public uint Param3;

        public override Packet Clone()
        {
            ResSpawnMonsterEx pkg = new ResSpawnMonsterEx();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Param1 = Param1;
            pkg.Param2 = Param2;
            pkg.Param3 = Param3;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Param1);
                oByteArray.WriteUInt(Param2);
                oByteArray.WriteUInt(Param3);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Param1 = oByteArray.ReadUInt();
                Param2 = oByteArray.ReadUInt();
                Param3 = oByteArray.ReadUInt();
            }
        }
		public ResSpawnMonsterEx()
		{
			PacketID = 1776;
		}
    }

    /// <summary>
    ///  [响应类] 条件刷怪物 创建者
    /// </summary>
    [Package(1776)]
    public partial class ResSpawnMonsterExCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnMonsterEx();
        }
    }


    /// <summary>
    ///  [请求类]世界服向地图服查询怪物数量
    /// </summary>
    public partial class ReqQueryMonster: Packet 
    {
        /// <summary>
        /// 地图TID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图Guid
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 怪物TID
        /// </summary>
        public uint TmplID;

        public override Packet Clone()
        {
            ReqQueryMonster pkg = new ReqQueryMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapGuid = MapGuid;
            pkg.TmplID = TmplID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteUInt(TmplID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
                TmplID = oByteArray.ReadUInt();
            }
        }
		public ReqQueryMonster()
		{
			PacketID = 1777;
		}
    }

    /// <summary>
    ///  [请求类] 世界服向地图服查询怪物数量 创建者
    /// </summary>
    [Package(1777)]
    public partial class ReqQueryMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqQueryMonster();
        }
    }


    /// <summary>
    ///  [响应类]世界服向地图服查询怪物数量
    /// </summary>
    public partial class ResQueryMonster: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint State;

        public override Packet Clone()
        {
            ResQueryMonster pkg = new ResQueryMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(State);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
            }
        }
		public ResQueryMonster()
		{
			PacketID = 1778;
		}
    }

    /// <summary>
    ///  [响应类] 世界服向地图服查询怪物数量 创建者
    /// </summary>
    [Package(1778)]
    public partial class ResQueryMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResQueryMonster();
        }
    }


    /// <summary>
    ///  [请求类]（被）抢夺跨服战积分
    /// </summary>
    public partial class ReqServerWarRobScore: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityTID;
        /// <summary>
        /// 
        /// </summary>
        public int Score;

        public override Packet Clone()
        {
            ReqServerWarRobScore pkg = new ReqServerWarRobScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityTID = ActivityTID;
            pkg.Score = Score;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityTID);
                oByteArray.WriteInt(Score);
            }
            else
            {
                ActivityTID = oByteArray.ReadUInt();
                Score = oByteArray.ReadInt();
            }
        }
		public ReqServerWarRobScore()
		{
			PacketID = 1779;
		}
    }

    /// <summary>
    ///  [请求类] （被）抢夺跨服战积分 创建者
    /// </summary>
    [Package(1779)]
    public partial class ReqServerWarRobScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqServerWarRobScore();
        }
    }


    /// <summary>
    ///  [响应类]（被）抢夺跨服战积分
    /// </summary>
    public partial class ResServerWarRobScore: Packet 
    {

        public override Packet Clone()
        {
            ResServerWarRobScore pkg = new ResServerWarRobScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResServerWarRobScore()
		{
			PacketID = 1780;
		}
    }

    /// <summary>
    ///  [响应类] （被）抢夺跨服战积分 创建者
    /// </summary>
    [Package(1780)]
    public partial class ResServerWarRobScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResServerWarRobScore();
        }
    }


    /// <summary>
    ///  [请求类]增加跨服积分
    /// </summary>
    public partial class ReqAddServerWarScore: Packet 
    {

        public override Packet Clone()
        {
            ReqAddServerWarScore pkg = new ReqAddServerWarScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddServerWarScore()
		{
			PacketID = 1781;
		}
    }

    /// <summary>
    ///  [请求类] 增加跨服积分 创建者
    /// </summary>
    [Package(1781)]
    public partial class ReqAddServerWarScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddServerWarScore();
        }
    }


    /// <summary>
    ///  [响应类]增加跨服积分
    /// </summary>
    public partial class ResAddServerWarScore: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint Score;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ResAddServerWarScore pkg = new ResAddServerWarScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.Score = Score;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(Score);
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                Score = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ResAddServerWarScore()
		{
			PacketID = 1782;
		}
    }

    /// <summary>
    ///  [响应类] 增加跨服积分 创建者
    /// </summary>
    [Package(1782)]
    public partial class ResAddServerWarScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddServerWarScore();
        }
    }


    /// <summary>
    ///  [请求类]清理跨服活动玩家活动信息
    /// </summary>
    public partial class ReqClearSWPlayerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityTID;

        public override Packet Clone()
        {
            ReqClearSWPlayerInfo pkg = new ReqClearSWPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityTID = ActivityTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityTID);
            }
            else
            {
                ActivityTID = oByteArray.ReadUInt();
            }
        }
		public ReqClearSWPlayerInfo()
		{
			PacketID = 1783;
		}
    }

    /// <summary>
    ///  [请求类] 清理跨服活动玩家活动信息 创建者
    /// </summary>
    [Package(1783)]
    public partial class ReqClearSWPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqClearSWPlayerInfo();
        }
    }


    /// <summary>
    ///  [响应类]清理跨服活动玩家活动信息
    /// </summary>
    public partial class ResClearSWPlayerInfo: Packet 
    {

        public override Packet Clone()
        {
            ResClearSWPlayerInfo pkg = new ResClearSWPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResClearSWPlayerInfo()
		{
			PacketID = 1784;
		}
    }

    /// <summary>
    ///  [响应类] 清理跨服活动玩家活动信息 创建者
    /// </summary>
    [Package(1784)]
    public partial class ResClearSWPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResClearSWPlayerInfo();
        }
    }


    /// <summary>
    ///  [请求类]押镖元宝刷新次数
    /// </summary>
    public partial class ReqNoticePatrolCityTaskInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticePatrolCityTaskInfo pkg = new ReqNoticePatrolCityTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticePatrolCityTaskInfo()
		{
			PacketID = 1785;
		}
    }

    /// <summary>
    ///  [请求类] 押镖元宝刷新次数 创建者
    /// </summary>
    [Package(1785)]
    public partial class ReqNoticePatrolCityTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticePatrolCityTaskInfo();
        }
    }


    /// <summary>
    ///  [响应类]押镖元宝刷新次数
    /// </summary>
    public partial class ResNoticePatrolCityTaskInfo: Packet 
    {
        /// <summary>
        /// 押镖元宝刷新次数
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResNoticePatrolCityTaskInfo pkg = new ResNoticePatrolCityTaskInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResNoticePatrolCityTaskInfo()
		{
			PacketID = 1786;
		}
    }

    /// <summary>
    ///  [响应类] 押镖元宝刷新次数 创建者
    /// </summary>
    [Package(1786)]
    public partial class ResNoticePatrolCityTaskInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticePatrolCityTaskInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服战服务器积分变动
    /// </summary>
    public partial class ReqOnSWServerPointChange: Packet 
    {

        public override Packet Clone()
        {
            ReqOnSWServerPointChange pkg = new ReqOnSWServerPointChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOnSWServerPointChange()
		{
			PacketID = 1787;
		}
    }

    /// <summary>
    ///  [请求类] 跨服战服务器积分变动 创建者
    /// </summary>
    [Package(1787)]
    public partial class ReqOnSWServerPointChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOnSWServerPointChange();
        }
    }


    /// <summary>
    ///  [响应类]跨服战服务器积分变动
    /// </summary>
    public partial class ResOnSWServerPointChange: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string IP;
        /// <summary>
        /// 
        /// </summary>
        public ushort Port;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityTID;
        /// <summary>
        /// 
        /// </summary>
        public uint Point;
        /// <summary>
        /// 
        /// </summary>
        public uint CurDayPoint;

        public override Packet Clone()
        {
            ResOnSWServerPointChange pkg = new ResOnSWServerPointChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.IP = IP;
            pkg.Port = Port;
            pkg.ActivityTID = ActivityTID;
            pkg.Point = Point;
            pkg.CurDayPoint = CurDayPoint;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(IP);
                oByteArray.WriteUShort(Port);
                oByteArray.WriteUInt(ActivityTID);
                oByteArray.WriteUInt(Point);
                oByteArray.WriteUInt(CurDayPoint);
            }
            else
            {
                IP = oByteArray.ReadUTF();
                Port = oByteArray.ReadUShort();
                ActivityTID = oByteArray.ReadUInt();
                Point = oByteArray.ReadUInt();
                CurDayPoint = oByteArray.ReadUInt();
            }
        }
		public ResOnSWServerPointChange()
		{
			PacketID = 1788;
		}
    }

    /// <summary>
    ///  [响应类] 跨服战服务器积分变动 创建者
    /// </summary>
    [Package(1788)]
    public partial class ResOnSWServerPointChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOnSWServerPointChange();
        }
    }


    /// <summary>
    ///  [请求类]通知刷新玩家跨服战积分
    /// </summary>
    public partial class ReqNoticeUpdatePlayerSWPoint: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdatePlayerSWPoint pkg = new ReqNoticeUpdatePlayerSWPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdatePlayerSWPoint()
		{
			PacketID = 1789;
		}
    }

    /// <summary>
    ///  [请求类] 通知刷新玩家跨服战积分 创建者
    /// </summary>
    [Package(1789)]
    public partial class ReqNoticeUpdatePlayerSWPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdatePlayerSWPoint();
        }
    }


    /// <summary>
    ///  [响应类]通知刷新玩家跨服战积分
    /// </summary>
    public partial class ResNoticeUpdatePlayerSWPoint: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public uint WorldPort;
        /// <summary>
        /// 
        /// </summary>
        public uint Group;
        /// <summary>
        /// 
        /// </summary>
        public uint Point;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityTID;
        /// <summary>
        /// 
        /// </summary>
        public string PlayerName;

        public override Packet Clone()
        {
            ResNoticeUpdatePlayerSWPoint pkg = new ResNoticeUpdatePlayerSWPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            pkg.Group = Group;
            pkg.Point = Point;
            pkg.ActivityTID = ActivityTID;
            pkg.PlayerName = PlayerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
                oByteArray.WriteUInt(Group);
                oByteArray.WriteUInt(Point);
                oByteArray.WriteUInt(ActivityTID);
                oByteArray.WriteUTF(PlayerName);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
                Group = oByteArray.ReadUInt();
                Point = oByteArray.ReadUInt();
                ActivityTID = oByteArray.ReadUInt();
                PlayerName = oByteArray.ReadUTF();
            }
        }
		public ResNoticeUpdatePlayerSWPoint()
		{
			PacketID = 1790;
		}
    }

    /// <summary>
    ///  [响应类] 通知刷新玩家跨服战积分 创建者
    /// </summary>
    [Package(1790)]
    public partial class ResNoticeUpdatePlayerSWPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdatePlayerSWPoint();
        }
    }


    /// <summary>
    ///  [请求类]通知刷新玩家跨服战当天积分
    /// </summary>
    public partial class ReqNoticeUpdatePlayerSWCurDayPoint: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeUpdatePlayerSWCurDayPoint pkg = new ReqNoticeUpdatePlayerSWCurDayPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeUpdatePlayerSWCurDayPoint()
		{
			PacketID = 1791;
		}
    }

    /// <summary>
    ///  [请求类] 通知刷新玩家跨服战当天积分 创建者
    /// </summary>
    [Package(1791)]
    public partial class ReqNoticeUpdatePlayerSWCurDayPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdatePlayerSWCurDayPoint();
        }
    }


    /// <summary>
    ///  [响应类]通知刷新玩家跨服战当天积分
    /// </summary>
    public partial class ResNoticeUpdatePlayerSWCurDayPoint: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public uint WorldPort;
        /// <summary>
        /// 
        /// </summary>
        public uint Group;
        /// <summary>
        /// 
        /// </summary>
        public uint Point;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityTID;
        /// <summary>
        /// 
        /// </summary>
        public string PlayerName;

        public override Packet Clone()
        {
            ResNoticeUpdatePlayerSWCurDayPoint pkg = new ResNoticeUpdatePlayerSWCurDayPoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            pkg.Group = Group;
            pkg.Point = Point;
            pkg.ActivityTID = ActivityTID;
            pkg.PlayerName = PlayerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
                oByteArray.WriteUInt(Group);
                oByteArray.WriteUInt(Point);
                oByteArray.WriteUInt(ActivityTID);
                oByteArray.WriteUTF(PlayerName);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
                Group = oByteArray.ReadUInt();
                Point = oByteArray.ReadUInt();
                ActivityTID = oByteArray.ReadUInt();
                PlayerName = oByteArray.ReadUTF();
            }
        }
		public ResNoticeUpdatePlayerSWCurDayPoint()
		{
			PacketID = 1792;
		}
    }

    /// <summary>
    ///  [响应类] 通知刷新玩家跨服战当天积分 创建者
    /// </summary>
    [Package(1792)]
    public partial class ResNoticeUpdatePlayerSWCurDayPointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdatePlayerSWCurDayPoint();
        }
    }


    /// <summary>
    ///  [请求类]跨服战场捐赠
    /// </summary>
    public partial class ReqServerWarDonation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Num;

        public override Packet Clone()
        {
            ReqServerWarDonation pkg = new ReqServerWarDonation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Num);
            }
            else
            {
                Num = oByteArray.ReadUInt();
            }
        }
		public ReqServerWarDonation()
		{
			PacketID = 1793;
		}
    }

    /// <summary>
    ///  [请求类] 跨服战场捐赠 创建者
    /// </summary>
    [Package(1793)]
    public partial class ReqServerWarDonationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqServerWarDonation();
        }
    }


    /// <summary>
    ///  [响应类]跨服战场捐赠
    /// </summary>
    public partial class ResServerWarDonation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Num;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResServerWarDonation pkg = new ResServerWarDonation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Num = Num;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Num);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Num = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResServerWarDonation()
		{
			PacketID = 1794;
		}
    }

    /// <summary>
    ///  [响应类] 跨服战场捐赠 创建者
    /// </summary>
    [Package(1794)]
    public partial class ResServerWarDonationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResServerWarDonation();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服捐赠信息
    /// </summary>
    public partial class ReqNoticeServerWarDonation: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeServerWarDonation pkg = new ReqNoticeServerWarDonation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeServerWarDonation()
		{
			PacketID = 1795;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服捐赠信息 创建者
    /// </summary>
    [Package(1795)]
    public partial class ReqNoticeServerWarDonationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeServerWarDonation();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服捐赠信息
    /// </summary>
    public partial class ResNoticeServerWarDonation: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public string NickName;
        /// <summary>
        /// 
        /// </summary>
        public uint Value;
        /// <summary>
        /// 
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 
        /// </summary>
        public uint Group;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityTID;

        public override Packet Clone()
        {
            ResNoticeServerWarDonation pkg = new ResNoticeServerWarDonation();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.NickName = NickName;
            pkg.Value = Value;
            pkg.Camp = Camp;
            pkg.Group = Group;
            pkg.ActivityTID = ActivityTID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(NickName);
                oByteArray.WriteUInt(Value);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt(Group);
                oByteArray.WriteUInt(ActivityTID);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                NickName = oByteArray.ReadUTF();
                Value = oByteArray.ReadUInt();
                Camp = oByteArray.ReadUInt();
                Group = oByteArray.ReadUInt();
                ActivityTID = oByteArray.ReadUInt();
            }
        }
		public ResNoticeServerWarDonation()
		{
			PacketID = 1796;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服捐赠信息 创建者
    /// </summary>
    [Package(1796)]
    public partial class ResNoticeServerWarDonationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeServerWarDonation();
        }
    }


    /// <summary>
    ///  [请求类]刷新玩家泡点经验加成
    /// </summary>
    public partial class ReqUpdatePlayerBubbleUpPct: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdatePlayerBubbleUpPct pkg = new ReqUpdatePlayerBubbleUpPct();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdatePlayerBubbleUpPct()
		{
			PacketID = 1797;
		}
    }

    /// <summary>
    ///  [请求类] 刷新玩家泡点经验加成 创建者
    /// </summary>
    [Package(1797)]
    public partial class ReqUpdatePlayerBubbleUpPctCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerBubbleUpPct();
        }
    }


    /// <summary>
    ///  [响应类]刷新玩家泡点经验加成
    /// </summary>
    public partial class ResUpdatePlayerBubbleUpPct: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Rate;

        public override Packet Clone()
        {
            ResUpdatePlayerBubbleUpPct pkg = new ResUpdatePlayerBubbleUpPct();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Rate = Rate;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Rate);
            }
            else
            {
                Rate = oByteArray.ReadUInt();
            }
        }
		public ResUpdatePlayerBubbleUpPct()
		{
			PacketID = 1798;
		}
    }

    /// <summary>
    ///  [响应类] 刷新玩家泡点经验加成 创建者
    /// </summary>
    [Package(1798)]
    public partial class ResUpdatePlayerBubbleUpPctCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerBubbleUpPct();
        }
    }


    /// <summary>
    ///  [请求类]秘宝持有者
    /// </summary>
    public partial class ReqUpdateTreasureOwners: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateTreasureOwners pkg = new ReqUpdateTreasureOwners();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateTreasureOwners()
		{
			PacketID = 1799;
		}
    }

    /// <summary>
    ///  [请求类] 秘宝持有者 创建者
    /// </summary>
    [Package(1799)]
    public partial class ReqUpdateTreasureOwnersCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateTreasureOwners();
        }
    }


    /// <summary>
    ///  [响应类]秘宝持有者
    /// </summary>
    public partial class ResUpdateTreasureOwners: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo TreasureOwner = new ObjectGuidInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 解封时间
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResUpdateTreasureOwners pkg = new ResUpdateTreasureOwners();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TreasureOwner = TreasureOwner.Clone() as ObjectGuidInfo;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TreasureOwner.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                TreasureOwner.Serializtion(oByteArray, bSerialize);
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResUpdateTreasureOwners()
		{
			PacketID = 1800;
		}
    }

    /// <summary>
    ///  [响应类] 秘宝持有者 创建者
    /// </summary>
    [Package(1800)]
    public partial class ResUpdateTreasureOwnersCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateTreasureOwners();
        }
    }


    /// <summary>
    ///  [请求类]掉落秘宝
    /// </summary>
    public partial class ReqDropTreasure: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint DropType;

        public override Packet Clone()
        {
            ReqDropTreasure pkg = new ReqDropTreasure();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DropType = DropType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DropType);
            }
            else
            {
                DropType = oByteArray.ReadUInt();
            }
        }
		public ReqDropTreasure()
		{
			PacketID = 1801;
		}
    }

    /// <summary>
    ///  [请求类] 掉落秘宝 创建者
    /// </summary>
    [Package(1801)]
    public partial class ReqDropTreasureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDropTreasure();
        }
    }


    /// <summary>
    ///  [响应类]掉落秘宝
    /// </summary>
    public partial class ResDropTreasure: Packet 
    {

        public override Packet Clone()
        {
            ResDropTreasure pkg = new ResDropTreasure();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResDropTreasure()
		{
			PacketID = 1802;
		}
    }

    /// <summary>
    ///  [响应类] 掉落秘宝 创建者
    /// </summary>
    [Package(1802)]
    public partial class ResDropTreasureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDropTreasure();
        }
    }


    /// <summary>
    ///  [请求类]玩家申请打孔，安装，卸下，替换神石
    /// </summary>
    public partial class ReqGemStoneAction: Packet 
    {
        /// <summary>
        /// 如武器=0，衣服=1，头盔=2等
        /// </summary>
        public uint gemtype;
        /// <summary>
        /// 打孔=0，安装=1，卸下=2，替换=3
        /// </summary>
        public uint act;
        /// <summary>
        /// 神石背包位置
        /// </summary>
        public uint bodypos;
        /// <summary>
        /// 背包位置
        /// </summary>
        public uint bagpos;
        /// <summary>
        /// 打孔位置0..4
        /// </summary>
        public uint pos;

        public override Packet Clone()
        {
            ReqGemStoneAction pkg = new ReqGemStoneAction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.gemtype = gemtype;
            pkg.act = act;
            pkg.bodypos = bodypos;
            pkg.bagpos = bagpos;
            pkg.pos = pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(gemtype);
                oByteArray.WriteUInt(act);
                oByteArray.WriteUInt(bodypos);
                oByteArray.WriteUInt(bagpos);
                oByteArray.WriteUInt(pos);
            }
            else
            {
                gemtype = oByteArray.ReadUInt();
                act = oByteArray.ReadUInt();
                bodypos = oByteArray.ReadUInt();
                bagpos = oByteArray.ReadUInt();
                pos = oByteArray.ReadUInt();
            }
        }
		public ReqGemStoneAction()
		{
			PacketID = 1803;
		}
    }

    /// <summary>
    ///  [请求类] 玩家申请打孔，安装，卸下，替换神石 创建者
    /// </summary>
    [Package(1803)]
    public partial class ReqGemStoneActionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGemStoneAction();
        }
    }


    /// <summary>
    ///  [响应类]玩家申请打孔，安装，卸下，替换神石
    /// </summary>
    public partial class ResGemStoneAction: Packet 
    {
        /// <summary>
        /// 返回成功失败
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResGemStoneAction pkg = new ResGemStoneAction();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResGemStoneAction()
		{
			PacketID = 1804;
		}
    }

    /// <summary>
    ///  [响应类] 玩家申请打孔，安装，卸下，替换神石 创建者
    /// </summary>
    [Package(1804)]
    public partial class ResGemStoneActionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGemStoneAction();
        }
    }


    /// <summary>
    ///  [请求类]75个孔信息
    /// </summary>
    public partial class ReqGemStoneHoleInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqGemStoneHoleInfo pkg = new ReqGemStoneHoleInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGemStoneHoleInfo()
		{
			PacketID = 1805;
		}
    }

    /// <summary>
    ///  [请求类] 75个孔信息 创建者
    /// </summary>
    [Package(1805)]
    public partial class ReqGemStoneHoleInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGemStoneHoleInfo();
        }
    }


    /// <summary>
    ///  [响应类]75个孔信息
    /// </summary>
    public partial class ResGemStoneHoleInfo: Packet 
    {
        /// <summary>
        /// 未打孔=0，已打孔=1
        /// </summary>
        public List<uint> HoleInfo = new List<uint>();

        public override Packet Clone()
        {
            ResGemStoneHoleInfo pkg = new ResGemStoneHoleInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in HoleInfo)
            {
                pkg.HoleInfo.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)HoleInfo.Count);
                for (int i = 0; i < HoleInfo.Count; i++)
                {
                    oByteArray.WriteUInt(HoleInfo[i]);
                }
            }
            else
            {
                int HoleInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < HoleInfoCount; i++)
                {
                    HoleInfo.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResGemStoneHoleInfo()
		{
			PacketID = 1806;
		}
    }

    /// <summary>
    ///  [响应类] 75个孔信息 创建者
    /// </summary>
    [Package(1806)]
    public partial class ResGemStoneHoleInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGemStoneHoleInfo();
        }
    }


    /// <summary>
    ///  [请求类]创建跨服活动副本
    /// </summary>
    public partial class ReqCreateSWActivityDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> MapIDVec = new List<uint>();
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint GroupID;

        public override Packet Clone()
        {
            ReqCreateSWActivityDungeon pkg = new ReqCreateSWActivityDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in MapIDVec)
            {
                pkg.MapIDVec.Add(item);
            }
            pkg.ActivityID = ActivityID;
            pkg.GroupID = GroupID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < MapIDVec.Count; i++)
                {
                      oByteArray.WriteUInt(MapIDVec[i]);
                }
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(GroupID);
            }
            else
            {
                int MapIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapIDVecCount; i++)
                {
                    MapIDVec.Add(oByteArray.ReadUInt());
                }
                ActivityID = oByteArray.ReadUInt();
                GroupID = oByteArray.ReadUInt();
            }
        }
		public ReqCreateSWActivityDungeon()
		{
			PacketID = 1807;
		}
    }

    /// <summary>
    ///  [请求类] 创建跨服活动副本 创建者
    /// </summary>
    [Package(1807)]
    public partial class ReqCreateSWActivityDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateSWActivityDungeon();
        }
    }


    /// <summary>
    ///  [响应类]创建跨服活动副本
    /// </summary>
    public partial class ResCreateSWActivityDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> MapIDVec = new List<uint>();
        /// <summary>
        /// 
        /// </summary>
        public List<ulong> MapGuidVec = new List<ulong>();
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint GroupID;

        public override Packet Clone()
        {
            ResCreateSWActivityDungeon pkg = new ResCreateSWActivityDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in MapIDVec)
            {
                pkg.MapIDVec.Add(item);
            }
            foreach (var item in MapGuidVec)
            {
                pkg.MapGuidVec.Add(item);
            }
            pkg.ActivityID = ActivityID;
            pkg.GroupID = GroupID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)MapIDVec.Count);
                for (int i = 0; i < MapIDVec.Count; i++)
                {
                    oByteArray.WriteUInt(MapIDVec[i]);
                }
                oByteArray.WriteUShort((ushort)MapGuidVec.Count);
                for (int i = 0; i < MapGuidVec.Count; i++)
                {
                    oByteArray.WriteUInt64(MapGuidVec[i]);
                }
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(GroupID);
            }
            else
            {
                int MapIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapIDVecCount; i++)
                {
                    MapIDVec.Add(oByteArray.ReadUInt());
                }
                int MapGuidVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapGuidVecCount; i++)
                {
                    MapGuidVec.Add(oByteArray.ReadUInt64());
                }
                ActivityID = oByteArray.ReadUInt();
                GroupID = oByteArray.ReadUInt();
            }
        }
		public ResCreateSWActivityDungeon()
		{
			PacketID = 1808;
		}
    }

    /// <summary>
    ///  [响应类] 创建跨服活动副本 创建者
    /// </summary>
    [Package(1808)]
    public partial class ResCreateSWActivityDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateSWActivityDungeon();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服初始化跨服活动副本guid
    /// </summary>
    public partial class ReqInitSWActivityDungeonGuid: Packet 
    {

        public override Packet Clone()
        {
            ReqInitSWActivityDungeonGuid pkg = new ReqInitSWActivityDungeonGuid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitSWActivityDungeonGuid()
		{
			PacketID = 1809;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服初始化跨服活动副本guid 创建者
    /// </summary>
    [Package(1809)]
    public partial class ReqInitSWActivityDungeonGuidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitSWActivityDungeonGuid();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服初始化跨服活动副本guid
    /// </summary>
    public partial class ResInitSWActivityDungeonGuid: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<uint> MapIDVec = new List<uint>();
        /// <summary>
        /// 
        /// </summary>
        public List<ulong> MapGuidVec = new List<ulong>();
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ResInitSWActivityDungeonGuid pkg = new ResInitSWActivityDungeonGuid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in MapIDVec)
            {
                pkg.MapIDVec.Add(item);
            }
            foreach (var item in MapGuidVec)
            {
                pkg.MapGuidVec.Add(item);
            }
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)MapIDVec.Count);
                for (int i = 0; i < MapIDVec.Count; i++)
                {
                    oByteArray.WriteUInt(MapIDVec[i]);
                }
                oByteArray.WriteUShort((ushort)MapGuidVec.Count);
                for (int i = 0; i < MapGuidVec.Count; i++)
                {
                    oByteArray.WriteUInt64(MapGuidVec[i]);
                }
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                int MapIDVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapIDVecCount; i++)
                {
                    MapIDVec.Add(oByteArray.ReadUInt());
                }
                int MapGuidVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapGuidVecCount; i++)
                {
                    MapGuidVec.Add(oByteArray.ReadUInt64());
                }
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ResInitSWActivityDungeonGuid()
		{
			PacketID = 1810;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服初始化跨服活动副本guid 创建者
    /// </summary>
    [Package(1810)]
    public partial class ResInitSWActivityDungeonGuidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitSWActivityDungeonGuid();
        }
    }


    /// <summary>
    ///  [请求类]刷新副本Flag
    /// </summary>
    public partial class ReqUpdateDungeonCellFlag: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateDungeonCellFlag pkg = new ReqUpdateDungeonCellFlag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateDungeonCellFlag()
		{
			PacketID = 1811;
		}
    }

    /// <summary>
    ///  [请求类] 刷新副本Flag 创建者
    /// </summary>
    [Package(1811)]
    public partial class ReqUpdateDungeonCellFlagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateDungeonCellFlag();
        }
    }


    /// <summary>
    ///  [响应类]刷新副本Flag
    /// </summary>
    public partial class ResUpdateDungeonCellFlag: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图Guid
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 1是添加0是删除;
        /// </summary>
        public byte Type;
        /// <summary>
        /// 标记
        /// </summary>
        public byte Flag;
        /// <summary>
        /// 格子
        /// </summary>
        public List<PPoint> MapCellVec = new List<PPoint>();

        public override Packet Clone()
        {
            ResUpdateDungeonCellFlag pkg = new ResUpdateDungeonCellFlag();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapGuid = MapGuid;
            pkg.Type = Type;
            pkg.Flag = Flag;
            foreach (PPoint item in MapCellVec)
            {
                pkg.MapCellVec.Add(item.Clone() as PPoint);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteByte(Type);
                oByteArray.WriteByte(Flag);
                oByteArray.WriteUShort((ushort)MapCellVec.Count);
                for (int i = 0; i < MapCellVec.Count; i++)
                {
                    MapCellVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                Type = oByteArray.ReadByte();
                Flag = oByteArray.ReadByte();
                int MapCellVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MapCellVecCount; i++)
                {
                    PPoint obj = new PPoint();
                    obj.Serializtion(oByteArray, bSerialize);
                    MapCellVec.Add(obj);
                }
            }
        }
		public ResUpdateDungeonCellFlag()
		{
			PacketID = 1812;
		}
    }

    /// <summary>
    ///  [响应类] 刷新副本Flag 创建者
    /// </summary>
    [Package(1812)]
    public partial class ResUpdateDungeonCellFlagCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateDungeonCellFlag();
        }
    }


    /// <summary>
    ///  [请求类]跨服活动传送
    /// </summary>
    public partial class ReqSWActivityTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint TransferType;
        /// <summary>
        /// 
        /// </summary>
        public uint State;

        public override Packet Clone()
        {
            ReqSWActivityTransfer pkg = new ReqSWActivityTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.TransferType = TransferType;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(TransferType);
                oByteArray.WriteUInt(State);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                TransferType = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
            }
        }
		public ReqSWActivityTransfer()
		{
			PacketID = 1813;
		}
    }

    /// <summary>
    ///  [请求类] 跨服活动传送 创建者
    /// </summary>
    [Package(1813)]
    public partial class ReqSWActivityTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSWActivityTransfer();
        }
    }


    /// <summary>
    ///  [响应类]跨服活动传送
    /// </summary>
    public partial class ResSWActivityTransfer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint TransferType;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResSWActivityTransfer pkg = new ResSWActivityTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.TransferType = TransferType;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(TransferType);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                TransferType = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResSWActivityTransfer()
		{
			PacketID = 1814;
		}
    }

    /// <summary>
    ///  [响应类] 跨服活动传送 创建者
    /// </summary>
    [Package(1814)]
    public partial class ResSWActivityTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSWActivityTransfer();
        }
    }


    /// <summary>
    ///  [请求类]上报玩家活动数据到跨服匹配服
    /// </summary>
    public partial class ReqEscalationSWPlayerInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqEscalationSWPlayerInfo pkg = new ReqEscalationSWPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEscalationSWPlayerInfo()
		{
			PacketID = 1815;
		}
    }

    /// <summary>
    ///  [请求类] 上报玩家活动数据到跨服匹配服 创建者
    /// </summary>
    [Package(1815)]
    public partial class ReqEscalationSWPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEscalationSWPlayerInfo();
        }
    }


    /// <summary>
    ///  [响应类]上报玩家活动数据到跨服匹配服
    /// </summary>
    public partial class ResEscalationSWPlayerInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint Group;
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public int ActivityPoint;
        /// <summary>
        /// 
        /// </summary>
        public List<int> PlayerData = new List<int>();
        /// <summary>
        /// 
        /// </summary>
        public string Info;
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public ushort Port;
        /// <summary>
        /// 
        /// </summary>
        public string PlayerName;
        /// <summary>
        /// 
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ResEscalationSWPlayerInfo pkg = new ResEscalationSWPlayerInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.Group = Group;
            pkg.PlayerGuid = PlayerGuid;
            pkg.ActivityPoint = ActivityPoint;
            foreach (var item in PlayerData)
            {
                pkg.PlayerData.Add(item);
            }
            pkg.Info = Info;
            pkg.WorldIP = WorldIP;
            pkg.Port = Port;
            pkg.PlayerName = PlayerName;
            pkg.Camp = Camp;
            pkg.MapID = MapID;
            pkg.GuildGuid = GuildGuid;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(Group);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteInt(ActivityPoint);
                oByteArray.WriteUShort((ushort)PlayerData.Count);
                for (int i = 0; i < PlayerData.Count; i++)
                {
                    oByteArray.WriteInt(PlayerData[i]);
                }
                oByteArray.WriteUTF(Info);
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUShort(Port);
                oByteArray.WriteUTF(PlayerName);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                Group = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
                ActivityPoint = oByteArray.ReadInt();
                int PlayerDataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerDataCount; i++)
                {
                    PlayerData.Add(oByteArray.ReadInt());
                }
                Info = oByteArray.ReadUTF();
                WorldIP = oByteArray.ReadUTF();
                Port = oByteArray.ReadUShort();
                PlayerName = oByteArray.ReadUTF();
                Camp = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ResEscalationSWPlayerInfo()
		{
			PacketID = 1816;
		}
    }

    /// <summary>
    ///  [响应类] 上报玩家活动数据到跨服匹配服 创建者
    /// </summary>
    [Package(1816)]
    public partial class ResEscalationSWPlayerInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEscalationSWPlayerInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服匹配服广播龙城归属行会
    /// </summary>
    public partial class ReqBroadcastLongChengOwner: Packet 
    {

        public override Packet Clone()
        {
            ReqBroadcastLongChengOwner pkg = new ReqBroadcastLongChengOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBroadcastLongChengOwner()
		{
			PacketID = 1817;
		}
    }

    /// <summary>
    ///  [请求类] 跨服匹配服广播龙城归属行会 创建者
    /// </summary>
    [Package(1817)]
    public partial class ReqBroadcastLongChengOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBroadcastLongChengOwner();
        }
    }


    /// <summary>
    ///  [响应类]跨服匹配服广播龙城归属行会
    /// </summary>
    public partial class ResBroadcastLongChengOwner: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 
        /// </summary>
        public string LeaderName;

        public override Packet Clone()
        {
            ResBroadcastLongChengOwner pkg = new ResBroadcastLongChengOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildGuid = GuildGuid;
            pkg.GuildName = GuildName;
            pkg.LeaderName = LeaderName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUTF(LeaderName);
            }
            else
            {
                GuildGuid = oByteArray.ReadUInt64();
                GuildName = oByteArray.ReadUTF();
                LeaderName = oByteArray.ReadUTF();
            }
        }
		public ResBroadcastLongChengOwner()
		{
			PacketID = 1818;
		}
    }

    /// <summary>
    ///  [响应类] 跨服匹配服广播龙城归属行会 创建者
    /// </summary>
    [Package(1818)]
    public partial class ResBroadcastLongChengOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBroadcastLongChengOwner();
        }
    }


    /// <summary>
    ///  [请求类]跨服匹配服广播跨服龙城旗子归属行会
    /// </summary>
    public partial class ReqBroadcastBannerOwner: Packet 
    {

        public override Packet Clone()
        {
            ReqBroadcastBannerOwner pkg = new ReqBroadcastBannerOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBroadcastBannerOwner()
		{
			PacketID = 1819;
		}
    }

    /// <summary>
    ///  [请求类] 跨服匹配服广播跨服龙城旗子归属行会 创建者
    /// </summary>
    [Package(1819)]
    public partial class ReqBroadcastBannerOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBroadcastBannerOwner();
        }
    }


    /// <summary>
    ///  [响应类]跨服匹配服广播跨服龙城旗子归属行会
    /// </summary>
    public partial class ResBroadcastBannerOwner: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong BannerOwner;
        /// <summary>
        /// 
        /// </summary>
        public string BannerOwnerName;

        public override Packet Clone()
        {
            ResBroadcastBannerOwner pkg = new ResBroadcastBannerOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BannerOwner = BannerOwner;
            pkg.BannerOwnerName = BannerOwnerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(BannerOwner);
                oByteArray.WriteUTF(BannerOwnerName);
            }
            else
            {
                BannerOwner = oByteArray.ReadUInt64();
                BannerOwnerName = oByteArray.ReadUTF();
            }
        }
		public ResBroadcastBannerOwner()
		{
			PacketID = 1820;
		}
    }

    /// <summary>
    ///  [响应类] 跨服匹配服广播跨服龙城旗子归属行会 创建者
    /// </summary>
    [Package(1820)]
    public partial class ResBroadcastBannerOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBroadcastBannerOwner();
        }
    }


    /// <summary>
    ///  [请求类]活动行会排行榜
    /// </summary>
    public partial class ReqNoticeActivityGuildRankInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeActivityGuildRankInfo pkg = new ReqNoticeActivityGuildRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeActivityGuildRankInfo()
		{
			PacketID = 1821;
		}
    }

    /// <summary>
    ///  [请求类] 活动行会排行榜 创建者
    /// </summary>
    [Package(1821)]
    public partial class ReqNoticeActivityGuildRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeActivityGuildRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]活动行会排行榜
    /// </summary>
    public partial class ResNoticeActivityGuildRankInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<GuildRankInfo> RankInfo = new List<GuildRankInfo>();
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 所属行会的积分
        /// </summary>
        public uint Point;
        /// <summary>
        /// 所属行会的排名
        /// </summary>
        public uint Rank;

        public override Packet Clone()
        {
            ResNoticeActivityGuildRankInfo pkg = new ResNoticeActivityGuildRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (GuildRankInfo item in RankInfo)
            {
                pkg.RankInfo.Add(item.Clone() as GuildRankInfo);
            }
            pkg.ActivityID = ActivityID;
            pkg.Point = Point;
            pkg.Rank = Rank;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RankInfo.Count);
                for (int i = 0; i < RankInfo.Count; i++)
                {
                    RankInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(Point);
                oByteArray.WriteUInt(Rank);
            }
            else
            {
                int RankInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankInfoCount; i++)
                {
                    GuildRankInfo obj = new GuildRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankInfo.Add(obj);
                }
                ActivityID = oByteArray.ReadUInt();
                Point = oByteArray.ReadUInt();
                Rank = oByteArray.ReadUInt();
            }
        }
		public ResNoticeActivityGuildRankInfo()
		{
			PacketID = 1822;
		}
    }

    /// <summary>
    ///  [响应类] 活动行会排行榜 创建者
    /// </summary>
    [Package(1822)]
    public partial class ResNoticeActivityGuildRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeActivityGuildRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服龙城开启密道
    /// </summary>
    public partial class ReqKFLCOpenCellar: Packet 
    {

        public override Packet Clone()
        {
            ReqKFLCOpenCellar pkg = new ReqKFLCOpenCellar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqKFLCOpenCellar()
		{
			PacketID = 1823;
		}
    }

    /// <summary>
    ///  [请求类] 跨服龙城开启密道 创建者
    /// </summary>
    [Package(1823)]
    public partial class ReqKFLCOpenCellarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKFLCOpenCellar();
        }
    }


    /// <summary>
    ///  [响应类]跨服龙城开启密道
    /// </summary>
    public partial class ResKFLCOpenCellar: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint GroupID;
        /// <summary>
        /// 
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 
        /// </summary>
        public string PlayerName;

        public override Packet Clone()
        {
            ResKFLCOpenCellar pkg = new ResKFLCOpenCellar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GroupID = GroupID;
            pkg.GuildName = GuildName;
            pkg.PlayerName = PlayerName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(GroupID);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUTF(PlayerName);
            }
            else
            {
                GroupID = oByteArray.ReadUInt();
                GuildName = oByteArray.ReadUTF();
                PlayerName = oByteArray.ReadUTF();
            }
        }
		public ResKFLCOpenCellar()
		{
			PacketID = 1824;
		}
    }

    /// <summary>
    ///  [响应类] 跨服龙城开启密道 创建者
    /// </summary>
    [Package(1824)]
    public partial class ResKFLCOpenCellarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKFLCOpenCellar();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服更新龙城归属
    /// </summary>
    public partial class ReqNoticeLongChengWiner: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeLongChengWiner pkg = new ReqNoticeLongChengWiner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeLongChengWiner()
		{
			PacketID = 1825;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服更新龙城归属 创建者
    /// </summary>
    [Package(1825)]
    public partial class ReqNoticeLongChengWinerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeLongChengWiner();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服更新龙城归属
    /// </summary>
    public partial class ResNoticeLongChengWiner: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo GuildGuid = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResNoticeLongChengWiner pkg = new ResNoticeLongChengWiner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildGuid = GuildGuid.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildGuid.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildGuid.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResNoticeLongChengWiner()
		{
			PacketID = 1826;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服更新龙城归属 创建者
    /// </summary>
    [Package(1826)]
    public partial class ResNoticeLongChengWinerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeLongChengWiner();
        }
    }


    /// <summary>
    ///  [请求类]通知更新跨服星空三倍点信息
    /// </summary>
    public partial class ReqUpdateKFSSTreblePoint: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateKFSSTreblePoint pkg = new ReqUpdateKFSSTreblePoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateKFSSTreblePoint()
		{
			PacketID = 1827;
		}
    }

    /// <summary>
    ///  [请求类] 通知更新跨服星空三倍点信息 创建者
    /// </summary>
    [Package(1827)]
    public partial class ReqUpdateKFSSTreblePointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateKFSSTreblePoint();
        }
    }


    /// <summary>
    ///  [响应类]通知更新跨服星空三倍点信息
    /// </summary>
    public partial class ResUpdateKFSSTreblePoint: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<PPoint> PointVec = new List<PPoint>();

        public override Packet Clone()
        {
            ResUpdateKFSSTreblePoint pkg = new ResUpdateKFSSTreblePoint();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (PPoint item in PointVec)
            {
                pkg.PointVec.Add(item.Clone() as PPoint);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)PointVec.Count);
                for (int i = 0; i < PointVec.Count; i++)
                {
                    PointVec[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int PointVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PointVecCount; i++)
                {
                    PPoint obj = new PPoint();
                    obj.Serializtion(oByteArray, bSerialize);
                    PointVec.Add(obj);
                }
            }
        }
		public ResUpdateKFSSTreblePoint()
		{
			PacketID = 1828;
		}
    }

    /// <summary>
    ///  [响应类] 通知更新跨服星空三倍点信息 创建者
    /// </summary>
    [Package(1828)]
    public partial class ResUpdateKFSSTreblePointCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateKFSSTreblePoint();
        }
    }


    /// <summary>
    ///  [请求类]玩家退出跨服活动
    /// </summary>
    public partial class ReqPlayerExitSWActivity: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;

        public override Packet Clone()
        {
            ReqPlayerExitSWActivity pkg = new ReqPlayerExitSWActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
            }
        }
		public ReqPlayerExitSWActivity()
		{
			PacketID = 1829;
		}
    }

    /// <summary>
    ///  [请求类] 玩家退出跨服活动 创建者
    /// </summary>
    [Package(1829)]
    public partial class ReqPlayerExitSWActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlayerExitSWActivity();
        }
    }


    /// <summary>
    ///  [响应类]玩家退出跨服活动
    /// </summary>
    public partial class ResPlayerExitSWActivity: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public byte Result;

        public override Packet Clone()
        {
            ResPlayerExitSWActivity pkg = new ResPlayerExitSWActivity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(Result);
            }
            else
            {
                Result = oByteArray.ReadByte();
            }
        }
		public ResPlayerExitSWActivity()
		{
			PacketID = 1830;
		}
    }

    /// <summary>
    ///  [响应类] 玩家退出跨服活动 创建者
    /// </summary>
    [Package(1830)]
    public partial class ResPlayerExitSWActivityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlayerExitSWActivity();
        }
    }


    /// <summary>
    ///  [请求类]通知更新跨服星空各倍率泡点玩家数量
    /// </summary>
    public partial class ReqNoticeKFSSPointInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeKFSSPointInfo pkg = new ReqNoticeKFSSPointInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeKFSSPointInfo()
		{
			PacketID = 1831;
		}
    }

    /// <summary>
    ///  [请求类] 通知更新跨服星空各倍率泡点玩家数量 创建者
    /// </summary>
    [Package(1831)]
    public partial class ReqNoticeKFSSPointInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeKFSSPointInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知更新跨服星空各倍率泡点玩家数量
    /// </summary>
    public partial class ResNoticeKFSSPointInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint DoublePlayerCount;
        /// <summary>
        /// 
        /// </summary>
        public uint TreblePlayerCount;
        /// <summary>
        /// 
        /// </summary>
        public uint FourfoldPlayerCount;
        /// <summary>
        /// 
        /// </summary>
        public uint NextChangePointTime;

        public override Packet Clone()
        {
            ResNoticeKFSSPointInfo pkg = new ResNoticeKFSSPointInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DoublePlayerCount = DoublePlayerCount;
            pkg.TreblePlayerCount = TreblePlayerCount;
            pkg.FourfoldPlayerCount = FourfoldPlayerCount;
            pkg.NextChangePointTime = NextChangePointTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DoublePlayerCount);
                oByteArray.WriteUInt(TreblePlayerCount);
                oByteArray.WriteUInt(FourfoldPlayerCount);
                oByteArray.WriteUInt(NextChangePointTime);
            }
            else
            {
                DoublePlayerCount = oByteArray.ReadUInt();
                TreblePlayerCount = oByteArray.ReadUInt();
                FourfoldPlayerCount = oByteArray.ReadUInt();
                NextChangePointTime = oByteArray.ReadUInt();
            }
        }
		public ResNoticeKFSSPointInfo()
		{
			PacketID = 1832;
		}
    }

    /// <summary>
    ///  [响应类] 通知更新跨服星空各倍率泡点玩家数量 创建者
    /// </summary>
    [Package(1832)]
    public partial class ResNoticeKFSSPointInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeKFSSPointInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服龙城满血
    /// </summary>
    public partial class ReqKFLCFullHp: Packet 
    {

        public override Packet Clone()
        {
            ReqKFLCFullHp pkg = new ReqKFLCFullHp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqKFLCFullHp()
		{
			PacketID = 1833;
		}
    }

    /// <summary>
    ///  [请求类] 跨服龙城满血 创建者
    /// </summary>
    [Package(1833)]
    public partial class ReqKFLCFullHpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKFLCFullHp();
        }
    }


    /// <summary>
    ///  [响应类]跨服龙城满血
    /// </summary>
    public partial class ResKFLCFullHp: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResKFLCFullHp pkg = new ResKFLCFullHp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResKFLCFullHp()
		{
			PacketID = 1834;
		}
    }

    /// <summary>
    ///  [响应类] 跨服龙城满血 创建者
    /// </summary>
    [Package(1834)]
    public partial class ResKFLCFullHpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKFLCFullHp();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服,给对象附加压制属性
    /// </summary>
    public partial class ReqNoticeSuppressAttr: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeSuppressAttr pkg = new ReqNoticeSuppressAttr();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeSuppressAttr()
		{
			PacketID = 1835;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服,给对象附加压制属性 创建者
    /// </summary>
    [Package(1835)]
    public partial class ReqNoticeSuppressAttrCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeSuppressAttr();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服,给对象附加压制属性
    /// </summary>
    public partial class ResNoticeSuppressAttr: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong ObjectGuid;
        /// <summary>
        /// 压制类型 1.战场捐赠压制
        /// </summary>
        public uint SuppressType;
        /// <summary>
        /// 
        /// </summary>
        public List<Property> SuppressAttr = new List<Property>();
        /// <summary>
        /// 压制等级 等级高的压制等级低的
        /// </summary>
        public uint SuppressLevel;

        public override Packet Clone()
        {
            ResNoticeSuppressAttr pkg = new ResNoticeSuppressAttr();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectGuid = ObjectGuid;
            pkg.SuppressType = SuppressType;
            foreach (Property item in SuppressAttr)
            {
                pkg.SuppressAttr.Add(item.Clone() as Property);
            }
            pkg.SuppressLevel = SuppressLevel;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(ObjectGuid);
                oByteArray.WriteUInt(SuppressType);
                oByteArray.WriteUShort((ushort)SuppressAttr.Count);
                for (int i = 0; i < SuppressAttr.Count; i++)
                {
                    SuppressAttr[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(SuppressLevel);
            }
            else
            {
                ObjectGuid = oByteArray.ReadUInt64();
                SuppressType = oByteArray.ReadUInt();
                int SuppressAttrCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < SuppressAttrCount; i++)
                {
                    Property obj = new Property();
                    obj.Serializtion(oByteArray, bSerialize);
                    SuppressAttr.Add(obj);
                }
                SuppressLevel = oByteArray.ReadUInt();
            }
        }
		public ResNoticeSuppressAttr()
		{
			PacketID = 1836;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服,给对象附加压制属性 创建者
    /// </summary>
    [Package(1836)]
    public partial class ResNoticeSuppressAttrCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeSuppressAttr();
        }
    }


    /// <summary>
    ///  [请求类]神兵法宝合成
    /// </summary>
    public partial class ReqSBFBComposeItem: Packet 
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 合成分解表TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqSBFBComposeItem pkg = new ReqSBFBComposeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                ObjectID.Serializtion(oByteArray, bSerialize);
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqSBFBComposeItem()
		{
			PacketID = 1837;
		}
    }

    /// <summary>
    ///  [请求类] 神兵法宝合成 创建者
    /// </summary>
    [Package(1837)]
    public partial class ReqSBFBComposeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSBFBComposeItem();
        }
    }


    /// <summary>
    ///  [响应类]神兵法宝合成
    /// </summary>
    public partial class ResSBFBComposeItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 物品ID
        /// </summary>
        public ObjectGuidInfo ObjectID = new ObjectGuidInfo();
        /// <summary>
        /// 合成分解表TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResSBFBComposeItem pkg = new ResSBFBComposeItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ObjectID = ObjectID.Clone() as ObjectGuidInfo;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                ObjectID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ObjectID.Serializtion(oByteArray, bSerialize);
                TID = oByteArray.ReadUInt();
            }
        }
		public ResSBFBComposeItem()
		{
			PacketID = 1838;
		}
    }

    /// <summary>
    ///  [响应类] 神兵法宝合成 创建者
    /// </summary>
    [Package(1838)]
    public partial class ResSBFBComposeItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSBFBComposeItem();
        }
    }


    /// <summary>
    ///  [请求类]通知客户端更新法宝星级祝福值
    /// </summary>
    public partial class ReqUpdateItemStarBlessing: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemStarBlessing pkg = new ReqUpdateItemStarBlessing();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemStarBlessing()
		{
			PacketID = 1839;
		}
    }

    /// <summary>
    ///  [请求类] 通知客户端更新法宝星级祝福值 创建者
    /// </summary>
    [Package(1839)]
    public partial class ReqUpdateItemStarBlessingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemStarBlessing();
        }
    }


    /// <summary>
    ///  [响应类]通知客户端更新法宝星级祝福值
    /// </summary>
    public partial class ResUpdateItemStarBlessing: Packet 
    {
        /// <summary>
        /// 物品索引
        /// </summary>
        public uint ItemPos;
        /// <summary>
        /// 星级
        /// </summary>
        public uint StarLv;
        /// <summary>
        /// 祝福值
        /// </summary>
        public uint Blessing;

        public override Packet Clone()
        {
            ResUpdateItemStarBlessing pkg = new ResUpdateItemStarBlessing();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            pkg.StarLv = StarLv;
            pkg.Blessing = Blessing;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
                oByteArray.WriteUInt(StarLv);
                oByteArray.WriteUInt(Blessing);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
                StarLv = oByteArray.ReadUInt();
                Blessing = oByteArray.ReadUInt();
            }
        }
		public ResUpdateItemStarBlessing()
		{
			PacketID = 1840;
		}
    }

    /// <summary>
    ///  [响应类] 通知客户端更新法宝星级祝福值 创建者
    /// </summary>
    [Package(1840)]
    public partial class ResUpdateItemStarBlessingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemStarBlessing();
        }
    }


    /// <summary>
    ///  [请求类]更新法宝星级祝福值
    /// </summary>
    public partial class ReqNoticeUpdateItemStarBlessing: Packet 
    {
        /// <summary>
        /// 物品唯一ID
        /// </summary>
        public ObjectGuidInfo ItemID = new ObjectGuidInfo();
        /// <summary>
        /// 星级
        /// </summary>
        public uint Star;
        /// <summary>
        /// 祝福值
        /// </summary>
        public uint Blessing;

        public override Packet Clone()
        {
            ReqNoticeUpdateItemStarBlessing pkg = new ReqNoticeUpdateItemStarBlessing();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemID = ItemID.Clone() as ObjectGuidInfo;
            pkg.Star = Star;
            pkg.Blessing = Blessing;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Star);
                oByteArray.WriteUInt(Blessing);
            }
            else
            {
                ItemID.Serializtion(oByteArray, bSerialize);
                Star = oByteArray.ReadUInt();
                Blessing = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeUpdateItemStarBlessing()
		{
			PacketID = 1841;
		}
    }

    /// <summary>
    ///  [请求类] 更新法宝星级祝福值 创建者
    /// </summary>
    [Package(1841)]
    public partial class ReqNoticeUpdateItemStarBlessingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeUpdateItemStarBlessing();
        }
    }


    /// <summary>
    ///  [响应类]更新法宝星级祝福值
    /// </summary>
    public partial class ResNoticeUpdateItemStarBlessing: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeUpdateItemStarBlessing pkg = new ResNoticeUpdateItemStarBlessing();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeUpdateItemStarBlessing()
		{
			PacketID = 1842;
		}
    }

    /// <summary>
    ///  [响应类] 更新法宝星级祝福值 创建者
    /// </summary>
    [Package(1842)]
    public partial class ResNoticeUpdateItemStarBlessingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeUpdateItemStarBlessing();
        }
    }


    /// <summary>
    ///  [请求类]原石切割
    /// </summary>
    public partial class ReqDivideRawstone: Packet 
    {
        /// <summary>
        /// DivideRawstoneTemplate[TID]
        /// </summary>
        public uint Times;

        public override Packet Clone()
        {
            ReqDivideRawstone pkg = new ReqDivideRawstone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Times = Times;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Times);
            }
            else
            {
                Times = oByteArray.ReadUInt();
            }
        }
		public ReqDivideRawstone()
		{
			PacketID = 1843;
		}
    }

    /// <summary>
    ///  [请求类] 原石切割 创建者
    /// </summary>
    [Package(1843)]
    public partial class ReqDivideRawstoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDivideRawstone();
        }
    }


    /// <summary>
    ///  [响应类]原石切割
    /// </summary>
    public partial class ResDivideRawstone: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 切石获得的宝玉
        /// </summary>
        public List<GameItemInfo> JadeStone = new List<GameItemInfo>();

        public override Packet Clone()
        {
            ResDivideRawstone pkg = new ResDivideRawstone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (GameItemInfo item in JadeStone)
            {
                pkg.JadeStone.Add(item.Clone() as GameItemInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)JadeStone.Count);
                for (int i = 0; i < JadeStone.Count; i++)
                {
                    JadeStone[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadUInt();
                int JadeStoneCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < JadeStoneCount; i++)
                {
                    GameItemInfo obj = new GameItemInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    JadeStone.Add(obj);
                }
            }
        }
		public ResDivideRawstone()
		{
			PacketID = 1844;
		}
    }

    /// <summary>
    ///  [响应类] 原石切割 创建者
    /// </summary>
    [Package(1844)]
    public partial class ResDivideRawstoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDivideRawstone();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场模块初始化
    /// </summary>
    public partial class ReqCSArenaInitModuleData: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaInitModuleData pkg = new ReqCSArenaInitModuleData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaInitModuleData()
		{
			PacketID = 1845;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场模块初始化 创建者
    /// </summary>
    [Package(1845)]
    public partial class ReqCSArenaInitModuleDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaInitModuleData();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场模块初始化
    /// </summary>
    public partial class ResCSArenaInitModuleData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<CSArenaPlayerData> Datas = new List<CSArenaPlayerData>();

        public override Packet Clone()
        {
            ResCSArenaInitModuleData pkg = new ResCSArenaInitModuleData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSArenaPlayerData item in Datas)
            {
                pkg.Datas.Add(item.Clone() as CSArenaPlayerData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Datas.Count);
                for (int i = 0; i < Datas.Count; i++)
                {
                    Datas[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int DatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DatasCount; i++)
                {
                    CSArenaPlayerData obj = new CSArenaPlayerData();
                    obj.Serializtion(oByteArray, bSerialize);
                    Datas.Add(obj);
                }
            }
        }
		public ResCSArenaInitModuleData()
		{
			PacketID = 1846;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场模块初始化 创建者
    /// </summary>
    [Package(1846)]
    public partial class ResCSArenaInitModuleDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaInitModuleData();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场开始匹配
    /// </summary>
    public partial class ReqCSArenaStartMatching: Packet 
    {
        /// <summary>
        /// 玩家信息（仅世界服请求匹配服时使用）
        /// </summary>
        public CSArenaPlayerMatchingData PlayerData = new CSArenaPlayerMatchingData();
        /// <summary>
        /// 世界服ip（仅世界服请求匹配服时使用）
        /// </summary>
        public string WordIP;
        /// <summary>
        /// 世界服端口（仅世界服请求匹配服时使用）
        /// </summary>
        public uint Port;
        /// <summary>
        /// 区服id
        /// </summary>
        public uint ServerID;

        public override Packet Clone()
        {
            ReqCSArenaStartMatching pkg = new ReqCSArenaStartMatching();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerData = PlayerData.Clone() as CSArenaPlayerMatchingData;
            pkg.WordIP = WordIP;
            pkg.Port = Port;
            pkg.ServerID = ServerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerData.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(WordIP);
                oByteArray.WriteUInt(Port);
                oByteArray.WriteUInt(ServerID);
            }
            else
            {
                PlayerData.Serializtion(oByteArray, bSerialize);
                WordIP = oByteArray.ReadUTF();
                Port = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
            }
        }
		public ReqCSArenaStartMatching()
		{
			PacketID = 1847;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场开始匹配 创建者
    /// </summary>
    [Package(1847)]
    public partial class ReqCSArenaStartMatchingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaStartMatching();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场开始匹配
    /// </summary>
    public partial class ResCSArenaStartMatching: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResCSArenaStartMatching pkg = new ResCSArenaStartMatching();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaStartMatching()
		{
			PacketID = 1848;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场开始匹配 创建者
    /// </summary>
    [Package(1848)]
    public partial class ResCSArenaStartMatchingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaStartMatching();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场结束匹配
    /// </summary>
    public partial class ReqCSArenaStopMatching: Packet 
    {
        /// <summary>
        /// 仅世界服通知匹配服生效
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 区服id
        /// </summary>
        public uint ServerID;

        public override Packet Clone()
        {
            ReqCSArenaStopMatching pkg = new ReqCSArenaStopMatching();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.ServerID = ServerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(ServerID);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                ServerID = oByteArray.ReadUInt();
            }
        }
		public ReqCSArenaStopMatching()
		{
			PacketID = 1849;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场结束匹配 创建者
    /// </summary>
    [Package(1849)]
    public partial class ReqCSArenaStopMatchingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaStopMatching();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场结束匹配
    /// </summary>
    public partial class ResCSArenaStopMatching: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Reason;

        public override Packet Clone()
        {
            ResCSArenaStopMatching pkg = new ResCSArenaStopMatching();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Reason = Reason;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Reason);
            }
            else
            {
                Reason = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaStopMatching()
		{
			PacketID = 1850;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场结束匹配 创建者
    /// </summary>
    [Package(1850)]
    public partial class ResCSArenaStopMatchingCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaStopMatching();
        }
    }


    /// <summary>
    ///  [请求类]强化宝玉
    /// </summary>
    public partial class ReqStrengthenJadeStone: Packet 
    {
        /// <summary>
        /// 宝石背包位置
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqStrengthenJadeStone pkg = new ReqStrengthenJadeStone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqStrengthenJadeStone()
		{
			PacketID = 1851;
		}
    }

    /// <summary>
    ///  [请求类] 强化宝玉 创建者
    /// </summary>
    [Package(1851)]
    public partial class ReqStrengthenJadeStoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqStrengthenJadeStone();
        }
    }


    /// <summary>
    ///  [响应类]强化宝玉
    /// </summary>
    public partial class ResStrengthenJadeStone: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 宝石背包位置
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ResStrengthenJadeStone pkg = new ResStrengthenJadeStone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ResStrengthenJadeStone()
		{
			PacketID = 1852;
		}
    }

    /// <summary>
    ///  [响应类] 强化宝玉 创建者
    /// </summary>
    [Package(1852)]
    public partial class ResStrengthenJadeStoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResStrengthenJadeStone();
        }
    }


    /// <summary>
    ///  [请求类]领取跨服竞技场段位（战令）奖励
    /// </summary>
    public partial class ReqCSArenaTakeLevelAward: Packet 
    {
        /// <summary>
        /// 竞技场段位tid
        /// </summary>
        public uint TID;
        /// <summary>
        /// 1 普通奖励 2 尊享奖励
        /// </summary>
        public uint AwardType;

        public override Packet Clone()
        {
            ReqCSArenaTakeLevelAward pkg = new ReqCSArenaTakeLevelAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.AwardType = AwardType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(AwardType);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                AwardType = oByteArray.ReadUInt();
            }
        }
		public ReqCSArenaTakeLevelAward()
		{
			PacketID = 1853;
		}
    }

    /// <summary>
    ///  [请求类] 领取跨服竞技场段位（战令）奖励 创建者
    /// </summary>
    [Package(1853)]
    public partial class ReqCSArenaTakeLevelAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaTakeLevelAward();
        }
    }


    /// <summary>
    ///  [响应类]领取跨服竞技场段位（战令）奖励
    /// </summary>
    public partial class ResCSArenaTakeLevelAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 竞技场段位tid
        /// </summary>
        public uint TID;
        /// <summary>
        /// 1 普通奖励 2 尊享奖励
        /// </summary>
        public uint AwardType;

        public override Packet Clone()
        {
            ResCSArenaTakeLevelAward pkg = new ResCSArenaTakeLevelAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            pkg.AwardType = AwardType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(AwardType);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                AwardType = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaTakeLevelAward()
		{
			PacketID = 1854;
		}
    }

    /// <summary>
    ///  [响应类] 领取跨服竞技场段位（战令）奖励 创建者
    /// </summary>
    [Package(1854)]
    public partial class ResCSArenaTakeLevelAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaTakeLevelAward();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场战斗结果
    /// </summary>
    public partial class ReqCSArenaFightResult: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaFightResult pkg = new ReqCSArenaFightResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaFightResult()
		{
			PacketID = 1855;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场战斗结果 创建者
    /// </summary>
    [Package(1855)]
    public partial class ReqCSArenaFightResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaFightResult();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场战斗结果
    /// </summary>
    public partial class ResCSArenaFightResult: Packet 
    {
        /// <summary>
        /// 红队结算信息
        /// </summary>
        public List<CSArenaSettlementData> RedTeam = new List<CSArenaSettlementData>();
        /// <summary>
        /// 蓝队结算信息
        /// </summary>
        public List<CSArenaSettlementData> BlueTeam = new List<CSArenaSettlementData>();
        /// <summary>
        /// 胜利的阵营（0 两队都输 1 红队 2蓝队）
        /// </summary>
        public uint WinCamp;
        /// <summary>
        /// 房间id
        /// </summary>
        public uint RoomID;
        /// <summary>
        /// 蓝队败场保护
        /// </summary>
        public bool BlueProtect;
        /// <summary>
        /// 红队败场保护
        /// </summary>
        public bool RedProtect;
        /// <summary>
        /// 战区id
        /// </summary>
        public uint CSZoneID;

        public override Packet Clone()
        {
            ResCSArenaFightResult pkg = new ResCSArenaFightResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSArenaSettlementData item in RedTeam)
            {
                pkg.RedTeam.Add(item.Clone() as CSArenaSettlementData);
            }
            foreach (CSArenaSettlementData item in BlueTeam)
            {
                pkg.BlueTeam.Add(item.Clone() as CSArenaSettlementData);
            }
            pkg.WinCamp = WinCamp;
            pkg.RoomID = RoomID;
            pkg.BlueProtect = BlueProtect;
            pkg.RedProtect = RedProtect;
            pkg.CSZoneID = CSZoneID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RedTeam.Count);
                for (int i = 0; i < RedTeam.Count; i++)
                {
                    RedTeam[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)BlueTeam.Count);
                for (int i = 0; i < BlueTeam.Count; i++)
                {
                    BlueTeam[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(WinCamp);
                oByteArray.WriteUInt(RoomID);
                oByteArray.WriteBoolean(BlueProtect);
                oByteArray.WriteBoolean(RedProtect);
                oByteArray.WriteUInt(CSZoneID);
            }
            else
            {
                int RedTeamCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RedTeamCount; i++)
                {
                    CSArenaSettlementData obj = new CSArenaSettlementData();
                    obj.Serializtion(oByteArray, bSerialize);
                    RedTeam.Add(obj);
                }
                int BlueTeamCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BlueTeamCount; i++)
                {
                    CSArenaSettlementData obj = new CSArenaSettlementData();
                    obj.Serializtion(oByteArray, bSerialize);
                    BlueTeam.Add(obj);
                }
                WinCamp = oByteArray.ReadUInt();
                RoomID = oByteArray.ReadUInt();
                BlueProtect = oByteArray.ReadBoolean();
                RedProtect = oByteArray.ReadBoolean();
                CSZoneID = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaFightResult()
		{
			PacketID = 1856;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场战斗结果 创建者
    /// </summary>
    [Package(1856)]
    public partial class ResCSArenaFightResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaFightResult();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场刷新玩家信息
    /// </summary>
    public partial class ReqCSArenaUpdatePlayerData: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaUpdatePlayerData pkg = new ReqCSArenaUpdatePlayerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaUpdatePlayerData()
		{
			PacketID = 1857;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场刷新玩家信息 创建者
    /// </summary>
    [Package(1857)]
    public partial class ReqCSArenaUpdatePlayerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaUpdatePlayerData();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场刷新玩家信息
    /// </summary>
    public partial class ResCSArenaUpdatePlayerData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public CSArenaPlayerData PlayerData = new CSArenaPlayerData();

        public override Packet Clone()
        {
            ResCSArenaUpdatePlayerData pkg = new ResCSArenaUpdatePlayerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerData = PlayerData.Clone() as CSArenaPlayerData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerData.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerData.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResCSArenaUpdatePlayerData()
		{
			PacketID = 1858;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场刷新玩家信息 创建者
    /// </summary>
    [Package(1858)]
    public partial class ResCSArenaUpdatePlayerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaUpdatePlayerData();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场购买尊享奖励
    /// </summary>
    public partial class ReqCSArenaBuyExAward: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaBuyExAward pkg = new ReqCSArenaBuyExAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaBuyExAward()
		{
			PacketID = 1859;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场购买尊享奖励 创建者
    /// </summary>
    [Package(1859)]
    public partial class ReqCSArenaBuyExAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaBuyExAward();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场购买尊享奖励
    /// </summary>
    public partial class ResCSArenaBuyExAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResCSArenaBuyExAward pkg = new ResCSArenaBuyExAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaBuyExAward()
		{
			PacketID = 1860;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场购买尊享奖励 创建者
    /// </summary>
    [Package(1860)]
    public partial class ResCSArenaBuyExAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaBuyExAward();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场通知匹配结果
    /// </summary>
    public partial class ReqCSArenaMatchResult: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaMatchResult pkg = new ReqCSArenaMatchResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaMatchResult()
		{
			PacketID = 1861;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场通知匹配结果 创建者
    /// </summary>
    [Package(1861)]
    public partial class ReqCSArenaMatchResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaMatchResult();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场通知匹配结果
    /// </summary>
    public partial class ResCSArenaMatchResult: Packet 
    {
        /// <summary>
        /// 红队
        /// </summary>
        public List<CSArenaPlayerMatchingData> RedTeamPlayers = new List<CSArenaPlayerMatchingData>();
        /// <summary>
        /// 蓝队
        /// </summary>
        public List<CSArenaPlayerMatchingData> BlueTeamPlayers = new List<CSArenaPlayerMatchingData>();

        public override Packet Clone()
        {
            ResCSArenaMatchResult pkg = new ResCSArenaMatchResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSArenaPlayerMatchingData item in RedTeamPlayers)
            {
                pkg.RedTeamPlayers.Add(item.Clone() as CSArenaPlayerMatchingData);
            }
            foreach (CSArenaPlayerMatchingData item in BlueTeamPlayers)
            {
                pkg.BlueTeamPlayers.Add(item.Clone() as CSArenaPlayerMatchingData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RedTeamPlayers.Count);
                for (int i = 0; i < RedTeamPlayers.Count; i++)
                {
                    RedTeamPlayers[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)BlueTeamPlayers.Count);
                for (int i = 0; i < BlueTeamPlayers.Count; i++)
                {
                    BlueTeamPlayers[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int RedTeamPlayersCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RedTeamPlayersCount; i++)
                {
                    CSArenaPlayerMatchingData obj = new CSArenaPlayerMatchingData();
                    obj.Serializtion(oByteArray, bSerialize);
                    RedTeamPlayers.Add(obj);
                }
                int BlueTeamPlayersCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BlueTeamPlayersCount; i++)
                {
                    CSArenaPlayerMatchingData obj = new CSArenaPlayerMatchingData();
                    obj.Serializtion(oByteArray, bSerialize);
                    BlueTeamPlayers.Add(obj);
                }
            }
        }
		public ResCSArenaMatchResult()
		{
			PacketID = 1862;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场通知匹配结果 创建者
    /// </summary>
    [Package(1862)]
    public partial class ResCSArenaMatchResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaMatchResult();
        }
    }


    /// <summary>
    ///  [请求类]解锁宝玉装备位
    /// </summary>
    public partial class ReqUnlockJadeStonePos: Packet 
    {
        /// <summary>
        /// 装备位
        /// </summary>
        public uint BagPos;

        public override Packet Clone()
        {
            ReqUnlockJadeStonePos pkg = new ReqUnlockJadeStonePos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BagPos = BagPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BagPos);
            }
            else
            {
                BagPos = oByteArray.ReadUInt();
            }
        }
		public ReqUnlockJadeStonePos()
		{
			PacketID = 1863;
		}
    }

    /// <summary>
    ///  [请求类] 解锁宝玉装备位 创建者
    /// </summary>
    [Package(1863)]
    public partial class ReqUnlockJadeStonePosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUnlockJadeStonePos();
        }
    }


    /// <summary>
    ///  [响应类]解锁宝玉装备位
    /// </summary>
    public partial class ResUnlockJadeStonePos: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint BagPos;

        public override Packet Clone()
        {
            ResUnlockJadeStonePos pkg = new ResUnlockJadeStonePos();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.BagPos = BagPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(BagPos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                BagPos = oByteArray.ReadUInt();
            }
        }
		public ResUnlockJadeStonePos()
		{
			PacketID = 1864;
		}
    }

    /// <summary>
    ///  [响应类] 解锁宝玉装备位 创建者
    /// </summary>
    [Package(1864)]
    public partial class ResUnlockJadeStonePosCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUnlockJadeStonePos();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场创建战斗副本
    /// </summary>
    public partial class ReqCSArenaCreateDungeon: Packet 
    {
        /// <summary>
        /// 地图id
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 竞技场房间唯一id
        /// </summary>
        public ulong RoomID;
        /// <summary>
        /// 红队所有玩家
        /// </summary>
        public List<ulong> RedTeamPlayers = new List<ulong>();
        /// <summary>
        /// 蓝队所有玩家
        /// </summary>
        public List<ulong> BlueTeamPlayers = new List<ulong>();
        /// <summary>
        /// 战区id
        /// </summary>
        public uint CSZoneID;

        public override Packet Clone()
        {
            ReqCSArenaCreateDungeon pkg = new ReqCSArenaCreateDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.RoomID = RoomID;
            foreach (var item in RedTeamPlayers)
            {
                pkg.RedTeamPlayers.Add(item);
            }
            foreach (var item in BlueTeamPlayers)
            {
                pkg.BlueTeamPlayers.Add(item);
            }
            pkg.CSZoneID = CSZoneID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(RoomID);
                for (int i = 0; i < RedTeamPlayers.Count; i++)
                {
                      oByteArray.WriteUInt64(RedTeamPlayers[i]);
                }
                for (int i = 0; i < BlueTeamPlayers.Count; i++)
                {
                      oByteArray.WriteUInt64(BlueTeamPlayers[i]);
                }
                oByteArray.WriteUInt(CSZoneID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                RoomID = oByteArray.ReadUInt64();
                int RedTeamPlayersCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RedTeamPlayersCount; i++)
                {
                    RedTeamPlayers.Add(oByteArray.ReadUInt64());
                }
                int BlueTeamPlayersCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BlueTeamPlayersCount; i++)
                {
                    BlueTeamPlayers.Add(oByteArray.ReadUInt64());
                }
                CSZoneID = oByteArray.ReadUInt();
            }
        }
		public ReqCSArenaCreateDungeon()
		{
			PacketID = 1865;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场创建战斗副本 创建者
    /// </summary>
    [Package(1865)]
    public partial class ReqCSArenaCreateDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaCreateDungeon();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场创建战斗副本
    /// </summary>
    public partial class ResCSArenaCreateDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 地图id
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图唯一id
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 竞技场房间唯一id
        /// </summary>
        public ulong RoomID;
        /// <summary>
        /// 战区id
        /// </summary>
        public uint CSZoneID;

        public override Packet Clone()
        {
            ResCSArenaCreateDungeon pkg = new ResCSArenaCreateDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MapID = MapID;
            pkg.MapGuid = MapGuid;
            pkg.RoomID = RoomID;
            pkg.CSZoneID = CSZoneID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt64(RoomID);
                oByteArray.WriteUInt(CSZoneID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                RoomID = oByteArray.ReadUInt64();
                CSZoneID = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaCreateDungeon()
		{
			PacketID = 1866;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场创建战斗副本 创建者
    /// </summary>
    [Package(1866)]
    public partial class ResCSArenaCreateDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaCreateDungeon();
        }
    }


    /// <summary>
    ///  [请求类]广播通知玩家进入竞技场
    /// </summary>
    public partial class ReqBroadcastEnterDungeon: Packet 
    {

        public override Packet Clone()
        {
            ReqBroadcastEnterDungeon pkg = new ReqBroadcastEnterDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBroadcastEnterDungeon()
		{
			PacketID = 1867;
		}
    }

    /// <summary>
    ///  [请求类] 广播通知玩家进入竞技场 创建者
    /// </summary>
    [Package(1867)]
    public partial class ReqBroadcastEnterDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBroadcastEnterDungeon();
        }
    }


    /// <summary>
    ///  [响应类]广播通知玩家进入竞技场
    /// </summary>
    public partial class ResBroadcastEnterDungeon: Packet 
    {
        /// <summary>
        /// 竞技场副本唯一id
        /// </summary>
        public ulong DungeonGuid;

        public override Packet Clone()
        {
            ResBroadcastEnterDungeon pkg = new ResBroadcastEnterDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonGuid = DungeonGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(DungeonGuid);
            }
            else
            {
                DungeonGuid = oByteArray.ReadUInt64();
            }
        }
		public ResBroadcastEnterDungeon()
		{
			PacketID = 1868;
		}
    }

    /// <summary>
    ///  [响应类] 广播通知玩家进入竞技场 创建者
    /// </summary>
    [Package(1868)]
    public partial class ResBroadcastEnterDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBroadcastEnterDungeon();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场购买匹配次数
    /// </summary>
    public partial class ReqCSArenaBuyMatchTime: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaBuyMatchTime pkg = new ReqCSArenaBuyMatchTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaBuyMatchTime()
		{
			PacketID = 1869;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场购买匹配次数 创建者
    /// </summary>
    [Package(1869)]
    public partial class ReqCSArenaBuyMatchTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaBuyMatchTime();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场购买匹配次数
    /// </summary>
    public partial class ResCSArenaBuyMatchTime: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResCSArenaBuyMatchTime pkg = new ResCSArenaBuyMatchTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaBuyMatchTime()
		{
			PacketID = 1870;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场购买匹配次数 创建者
    /// </summary>
    [Package(1870)]
    public partial class ResCSArenaBuyMatchTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaBuyMatchTime();
        }
    }


    /// <summary>
    ///  [请求类]镶嵌卸下宝玉
    /// </summary>
    public partial class ReqInlayJadeStone: Packet 
    {
        /// <summary>
        /// 0:镶嵌;1:卸下
        /// </summary>
        public uint Type;
        /// <summary>
        /// 镶嵌位置
        /// </summary>
        public uint BodyPos;
        /// <summary>
        /// 背包位置
        /// </summary>
        public uint BagPos;

        public override Packet Clone()
        {
            ReqInlayJadeStone pkg = new ReqInlayJadeStone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.BodyPos = BodyPos;
            pkg.BagPos = BagPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(BodyPos);
                oByteArray.WriteUInt(BagPos);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                BodyPos = oByteArray.ReadUInt();
                BagPos = oByteArray.ReadUInt();
            }
        }
		public ReqInlayJadeStone()
		{
			PacketID = 1871;
		}
    }

    /// <summary>
    ///  [请求类] 镶嵌卸下宝玉 创建者
    /// </summary>
    [Package(1871)]
    public partial class ReqInlayJadeStoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInlayJadeStone();
        }
    }


    /// <summary>
    ///  [响应类]镶嵌卸下宝玉
    /// </summary>
    public partial class ResInlayJadeStone: Packet 
    {
        /// <summary>
        /// 0:镶嵌;1:卸下
        /// </summary>
        public uint Type;
        /// <summary>
        /// 镶嵌位置
        /// </summary>
        public uint BodyPos;
        /// <summary>
        /// 背包位置
        /// </summary>
        public uint BagPos;
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResInlayJadeStone pkg = new ResInlayJadeStone();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.BodyPos = BodyPos;
            pkg.BagPos = BagPos;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(BodyPos);
                oByteArray.WriteUInt(BagPos);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                BodyPos = oByteArray.ReadUInt();
                BagPos = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResInlayJadeStone()
		{
			PacketID = 1872;
		}
    }

    /// <summary>
    ///  [响应类] 镶嵌卸下宝玉 创建者
    /// </summary>
    [Package(1872)]
    public partial class ResInlayJadeStoneCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInlayJadeStone();
        }
    }


    /// <summary>
    ///  [请求类]竞技场副本战斗信息
    /// </summary>
    public partial class ReqCSArenaDungeonFightData: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaDungeonFightData pkg = new ReqCSArenaDungeonFightData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaDungeonFightData()
		{
			PacketID = 1873;
		}
    }

    /// <summary>
    ///  [请求类] 竞技场副本战斗信息 创建者
    /// </summary>
    [Package(1873)]
    public partial class ReqCSArenaDungeonFightDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaDungeonFightData();
        }
    }


    /// <summary>
    ///  [响应类]竞技场副本战斗信息
    /// </summary>
    public partial class ResCSArenaDungeonFightData: Packet 
    {
        /// <summary>
        /// 玩家战斗信息
        /// </summary>
        public List<CSArenaFightData> Data = new List<CSArenaFightData>();

        public override Packet Clone()
        {
            ResCSArenaDungeonFightData pkg = new ResCSArenaDungeonFightData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSArenaFightData item in Data)
            {
                pkg.Data.Add(item.Clone() as CSArenaFightData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Data.Count);
                for (int i = 0; i < Data.Count; i++)
                {
                    Data[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int DataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DataCount; i++)
                {
                    CSArenaFightData obj = new CSArenaFightData();
                    obj.Serializtion(oByteArray, bSerialize);
                    Data.Add(obj);
                }
            }
        }
		public ResCSArenaDungeonFightData()
		{
			PacketID = 1874;
		}
    }

    /// <summary>
    ///  [响应类] 竞技场副本战斗信息 创建者
    /// </summary>
    [Package(1874)]
    public partial class ResCSArenaDungeonFightDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaDungeonFightData();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场上报机器人信息
    /// </summary>
    public partial class ReqCSArenaEscalationRobotData: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaEscalationRobotData pkg = new ReqCSArenaEscalationRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaEscalationRobotData()
		{
			PacketID = 1875;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场上报机器人信息 创建者
    /// </summary>
    [Package(1875)]
    public partial class ReqCSArenaEscalationRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaEscalationRobotData();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场上报机器人信息
    /// </summary>
    public partial class ResCSArenaEscalationRobotData: Packet 
    {
        /// <summary>
        /// 机器人信息
        /// </summary>
        public RobotData Data = new RobotData();
        /// <summary>
        /// 
        /// </summary>
        public uint ServerID;

        public override Packet Clone()
        {
            ResCSArenaEscalationRobotData pkg = new ResCSArenaEscalationRobotData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as RobotData;
            pkg.ServerID = ServerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ServerID);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
                ServerID = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaEscalationRobotData()
		{
			PacketID = 1876;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场上报机器人信息 创建者
    /// </summary>
    [Package(1876)]
    public partial class ResCSArenaEscalationRobotDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaEscalationRobotData();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场获取排行信息
    /// </summary>
    public partial class ReqCSArenaGetRankInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaGetRankInfo pkg = new ReqCSArenaGetRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaGetRankInfo()
		{
			PacketID = 1877;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场获取排行信息 创建者
    /// </summary>
    [Package(1877)]
    public partial class ReqCSArenaGetRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaGetRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场获取排行信息
    /// </summary>
    public partial class ResCSArenaGetRankInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<CSArenaRankInfo> RankInfos = new List<CSArenaRankInfo>();
        /// <summary>
        /// 
        /// </summary>
        public uint ZoneID;

        public override Packet Clone()
        {
            ResCSArenaGetRankInfo pkg = new ResCSArenaGetRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSArenaRankInfo item in RankInfos)
            {
                pkg.RankInfos.Add(item.Clone() as CSArenaRankInfo);
            }
            pkg.ZoneID = ZoneID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RankInfos.Count);
                for (int i = 0; i < RankInfos.Count; i++)
                {
                    RankInfos[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(ZoneID);
            }
            else
            {
                int RankInfosCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankInfosCount; i++)
                {
                    CSArenaRankInfo obj = new CSArenaRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankInfos.Add(obj);
                }
                ZoneID = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaGetRankInfo()
		{
			PacketID = 1878;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场获取排行信息 创建者
    /// </summary>
    [Package(1878)]
    public partial class ResCSArenaGetRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaGetRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场刷新机器人
    /// </summary>
    public partial class ReqCSArenaSpwanRobot: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaSpwanRobot pkg = new ReqCSArenaSpwanRobot();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaSpwanRobot()
		{
			PacketID = 1879;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场刷新机器人 创建者
    /// </summary>
    [Package(1879)]
    public partial class ReqCSArenaSpwanRobotCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaSpwanRobot();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场刷新机器人
    /// </summary>
    public partial class ResCSArenaSpwanRobot: Packet 
    {
        /// <summary>
        /// 地图唯一id
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 地图id
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 机器人信息
        /// </summary>
        public RobotData Data = new RobotData();

        public override Packet Clone()
        {
            ResCSArenaSpwanRobot pkg = new ResCSArenaSpwanRobot();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapGuid = MapGuid;
            pkg.MapID = MapID;
            pkg.Data = Data.Clone() as RobotData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(MapID);
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapGuid = oByteArray.ReadUInt64();
                MapID = oByteArray.ReadUInt();
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResCSArenaSpwanRobot()
		{
			PacketID = 1880;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场刷新机器人 创建者
    /// </summary>
    [Package(1880)]
    public partial class ResCSArenaSpwanRobotCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaSpwanRobot();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场上报玩家排行信息
    /// </summary>
    public partial class ReqCSArenaEscalationPlayerRankScore: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaEscalationPlayerRankScore pkg = new ReqCSArenaEscalationPlayerRankScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaEscalationPlayerRankScore()
		{
			PacketID = 1881;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场上报玩家排行信息 创建者
    /// </summary>
    [Package(1881)]
    public partial class ReqCSArenaEscalationPlayerRankScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaEscalationPlayerRankScore();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场上报玩家排行信息
    /// </summary>
    public partial class ResCSArenaEscalationPlayerRankScore: Packet 
    {
        /// <summary>
        /// 玩家排行信息
        /// </summary>
        public CSArenaRankInfo Data = new CSArenaRankInfo();
        /// <summary>
        /// 
        /// </summary>
        public uint ServerID;

        public override Packet Clone()
        {
            ResCSArenaEscalationPlayerRankScore pkg = new ResCSArenaEscalationPlayerRankScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as CSArenaRankInfo;
            pkg.ServerID = ServerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ServerID);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
                ServerID = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaEscalationPlayerRankScore()
		{
			PacketID = 1882;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场上报玩家排行信息 创建者
    /// </summary>
    [Package(1882)]
    public partial class ResCSArenaEscalationPlayerRankScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaEscalationPlayerRankScore();
        }
    }


    /// <summary>
    ///  [请求类]十二宫剩余通关次数
    /// </summary>
    public partial class ReqZodiacCorssTimes: Packet 
    {

        public override Packet Clone()
        {
            ReqZodiacCorssTimes pkg = new ReqZodiacCorssTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqZodiacCorssTimes()
		{
			PacketID = 1883;
		}
    }

    /// <summary>
    ///  [请求类] 十二宫剩余通关次数 创建者
    /// </summary>
    [Package(1883)]
    public partial class ReqZodiacCorssTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqZodiacCorssTimes();
        }
    }


    /// <summary>
    ///  [响应类]十二宫剩余通关次数
    /// </summary>
    public partial class ResZodiacCorssTimes: Packet 
    {
        /// <summary>
        /// 剩余通关次数
        /// </summary>
        public uint Times;

        public override Packet Clone()
        {
            ResZodiacCorssTimes pkg = new ResZodiacCorssTimes();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Times = Times;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Times);
            }
            else
            {
                Times = oByteArray.ReadUInt();
            }
        }
		public ResZodiacCorssTimes()
		{
			PacketID = 1884;
		}
    }

    /// <summary>
    ///  [响应类] 十二宫剩余通关次数 创建者
    /// </summary>
    [Package(1884)]
    public partial class ResZodiacCorssTimesCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResZodiacCorssTimes();
        }
    }


    /// <summary>
    ///  [请求类]gm修改开服天数
    /// </summary>
    public partial class ReqGMChangeOpenDays: Packet 
    {
        /// <summary>
        /// 要设置的开服天数
        /// </summary>
        public int days;

        public override Packet Clone()
        {
            ReqGMChangeOpenDays pkg = new ReqGMChangeOpenDays();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.days = days;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(days);
            }
            else
            {
                days = oByteArray.ReadInt();
            }
        }
		public ReqGMChangeOpenDays()
		{
			PacketID = 1885;
		}
    }

    /// <summary>
    ///  [请求类] gm修改开服天数 创建者
    /// </summary>
    [Package(1885)]
    public partial class ReqGMChangeOpenDaysCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGMChangeOpenDays();
        }
    }


    /// <summary>
    ///  [响应类]gm修改开服天数
    /// </summary>
    public partial class ResGMChangeOpenDays: Packet 
    {

        public override Packet Clone()
        {
            ResGMChangeOpenDays pkg = new ResGMChangeOpenDays();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResGMChangeOpenDays()
		{
			PacketID = 1886;
		}
    }

    /// <summary>
    ///  [响应类] gm修改开服天数 创建者
    /// </summary>
    [Package(1886)]
    public partial class ResGMChangeOpenDaysCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGMChangeOpenDays();
        }
    }


    /// <summary>
    ///  [请求类]时装升星
    /// </summary>
    public partial class ReqUpgradeFashionStar: Packet 
    {
        /// <summary>
        /// 类型(0称号1金装)
        /// </summary>
        public uint Type;
        /// <summary>
        /// 0:[TitleTemplate];1:[FashionTemplate]
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqUpgradeFashionStar pkg = new ReqUpgradeFashionStar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqUpgradeFashionStar()
		{
			PacketID = 1887;
		}
    }

    /// <summary>
    ///  [请求类] 时装升星 创建者
    /// </summary>
    [Package(1887)]
    public partial class ReqUpgradeFashionStarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpgradeFashionStar();
        }
    }


    /// <summary>
    ///  [响应类]时装升星
    /// </summary>
    public partial class ResUpgradeFashionStar: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 类型(0称号1金装)
        /// </summary>
        public uint Type;
        /// <summary>
        /// 升星信息
        /// </summary>
        public string StarInfo;

        public override Packet Clone()
        {
            ResUpgradeFashionStar pkg = new ResUpgradeFashionStar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.StarInfo = StarInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUTF(StarInfo);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                StarInfo = oByteArray.ReadUTF();
            }
        }
		public ResUpgradeFashionStar()
		{
			PacketID = 1888;
		}
    }

    /// <summary>
    ///  [响应类] 时装升星 创建者
    /// </summary>
    [Package(1888)]
    public partial class ResUpgradeFashionStarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpgradeFashionStar();
        }
    }


    /// <summary>
    ///  [请求类]gm修改合服天数
    /// </summary>
    public partial class ReqGMChangeUnionDays: Packet 
    {
        /// <summary>
        /// 往后增加的天数
        /// </summary>
        public int days;

        public override Packet Clone()
        {
            ReqGMChangeUnionDays pkg = new ReqGMChangeUnionDays();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.days = days;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(days);
            }
            else
            {
                days = oByteArray.ReadInt();
            }
        }
		public ReqGMChangeUnionDays()
		{
			PacketID = 1889;
		}
    }

    /// <summary>
    ///  [请求类] gm修改合服天数 创建者
    /// </summary>
    [Package(1889)]
    public partial class ReqGMChangeUnionDaysCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGMChangeUnionDays();
        }
    }


    /// <summary>
    ///  [响应类]gm修改合服天数
    /// </summary>
    public partial class ResGMChangeUnionDays: Packet 
    {

        public override Packet Clone()
        {
            ResGMChangeUnionDays pkg = new ResGMChangeUnionDays();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResGMChangeUnionDays()
		{
			PacketID = 1890;
		}
    }

    /// <summary>
    ///  [响应类] gm修改合服天数 创建者
    /// </summary>
    [Package(1890)]
    public partial class ResGMChangeUnionDaysCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGMChangeUnionDays();
        }
    }


    /// <summary>
    ///  [请求类]保存玩家时装信息
    /// </summary>
    public partial class ReqSaveFashionInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqSaveFashionInfo pkg = new ReqSaveFashionInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSaveFashionInfo()
		{
			PacketID = 1891;
		}
    }

    /// <summary>
    ///  [请求类] 保存玩家时装信息 创建者
    /// </summary>
    [Package(1891)]
    public partial class ReqSaveFashionInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSaveFashionInfo();
        }
    }


    /// <summary>
    ///  [响应类]保存玩家时装信息
    /// </summary>
    public partial class ResSaveFashionInfo: Packet 
    {
        /// <summary>
        /// 时装信息
        /// </summary>
        public string FashionInfo;
        /// <summary>
        /// 0称号1金装
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResSaveFashionInfo pkg = new ResSaveFashionInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FashionInfo = FashionInfo;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(FashionInfo);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                FashionInfo = oByteArray.ReadUTF();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResSaveFashionInfo()
		{
			PacketID = 1892;
		}
    }

    /// <summary>
    ///  [响应类] 保存玩家时装信息 创建者
    /// </summary>
    [Package(1892)]
    public partial class ResSaveFashionInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSaveFashionInfo();
        }
    }


    /// <summary>
    ///  [请求类]通知缓存服解封账号
    /// </summary>
    public partial class ReqNoticeReleaseAccount: Packet 
    {
        /// <summary>
        /// 玩家ID
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 是否解封 1解封 0解封
        /// </summary>
        public uint IsRelease;

        public override Packet Clone()
        {
            ReqNoticeReleaseAccount pkg = new ReqNoticeReleaseAccount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.IsRelease = IsRelease;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(IsRelease);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                IsRelease = oByteArray.ReadUInt();
            }
        }
		public ReqNoticeReleaseAccount()
		{
			PacketID = 1893;
		}
    }

    /// <summary>
    ///  [请求类] 通知缓存服解封账号 创建者
    /// </summary>
    [Package(1893)]
    public partial class ReqNoticeReleaseAccountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeReleaseAccount();
        }
    }


    /// <summary>
    ///  [响应类]通知缓存服解封账号
    /// </summary>
    public partial class ResNoticeReleaseAccount: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeReleaseAccount pkg = new ResNoticeReleaseAccount();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeReleaseAccount()
		{
			PacketID = 1894;
		}
    }

    /// <summary>
    ///  [响应类] 通知缓存服解封账号 创建者
    /// </summary>
    [Package(1894)]
    public partial class ResNoticeReleaseAccountCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeReleaseAccount();
        }
    }


    /// <summary>
    ///  [请求类]加载龙族宝藏日志
    /// </summary>
    public partial class ReqLoadDragonTreasureDrawLog: Packet 
    {
        /// <summary>
        /// 积分兑换日志数
        /// </summary>
        public uint ExchangeLogNum;
        /// <summary>
        /// 全服寻宝日志数
        /// </summary>
        public uint AllLogNum;

        public override Packet Clone()
        {
            ReqLoadDragonTreasureDrawLog pkg = new ReqLoadDragonTreasureDrawLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ExchangeLogNum = ExchangeLogNum;
            pkg.AllLogNum = AllLogNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ExchangeLogNum);
                oByteArray.WriteUInt(AllLogNum);
            }
            else
            {
                ExchangeLogNum = oByteArray.ReadUInt();
                AllLogNum = oByteArray.ReadUInt();
            }
        }
		public ReqLoadDragonTreasureDrawLog()
		{
			PacketID = 1895;
		}
    }

    /// <summary>
    ///  [请求类] 加载龙族宝藏日志 创建者
    /// </summary>
    [Package(1895)]
    public partial class ReqLoadDragonTreasureDrawLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqLoadDragonTreasureDrawLog();
        }
    }


    /// <summary>
    ///  [响应类]加载龙族宝藏日志
    /// </summary>
    public partial class ResLoadDragonTreasureDrawLog: Packet 
    {
        /// <summary>
        /// 龙族宝藏日志信息
        /// </summary>
        public List<DragonTreasureDrawLog> LogInfo = new List<DragonTreasureDrawLog>();

        public override Packet Clone()
        {
            ResLoadDragonTreasureDrawLog pkg = new ResLoadDragonTreasureDrawLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (DragonTreasureDrawLog item in LogInfo)
            {
                pkg.LogInfo.Add(item.Clone() as DragonTreasureDrawLog);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)LogInfo.Count);
                for (int i = 0; i < LogInfo.Count; i++)
                {
                    LogInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int LogInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < LogInfoCount; i++)
                {
                    DragonTreasureDrawLog obj = new DragonTreasureDrawLog();
                    obj.Serializtion(oByteArray, bSerialize);
                    LogInfo.Add(obj);
                }
            }
        }
		public ResLoadDragonTreasureDrawLog()
		{
			PacketID = 1896;
		}
    }

    /// <summary>
    ///  [响应类] 加载龙族宝藏日志 创建者
    /// </summary>
    [Package(1896)]
    public partial class ResLoadDragonTreasureDrawLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResLoadDragonTreasureDrawLog();
        }
    }


    /// <summary>
    ///  [请求类]一键提取龙族宝藏仓库物品
    /// </summary>
    public partial class ReqExtractDragonTreasure: Packet 
    {

        public override Packet Clone()
        {
            ReqExtractDragonTreasure pkg = new ReqExtractDragonTreasure();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqExtractDragonTreasure()
		{
			PacketID = 1897;
		}
    }

    /// <summary>
    ///  [请求类] 一键提取龙族宝藏仓库物品 创建者
    /// </summary>
    [Package(1897)]
    public partial class ReqExtractDragonTreasureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqExtractDragonTreasure();
        }
    }


    /// <summary>
    ///  [响应类]一键提取龙族宝藏仓库物品
    /// </summary>
    public partial class ResExtractDragonTreasure: Packet 
    {
        /// <summary>
        /// 0:成功 1:包满
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResExtractDragonTreasure pkg = new ResExtractDragonTreasure();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResExtractDragonTreasure()
		{
			PacketID = 1898;
		}
    }

    /// <summary>
    ///  [响应类] 一键提取龙族宝藏仓库物品 创建者
    /// </summary>
    [Package(1898)]
    public partial class ResExtractDragonTreasureCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResExtractDragonTreasure();
        }
    }


    /// <summary>
    ///  [请求类]龙族宝藏探宝
    /// </summary>
    public partial class ReqDragonTreasureDraw: Packet 
    {
        /// <summary>
        /// 活动TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 活动大类Type
        /// </summary>
        public uint Type;
        /// <summary>
        /// 探宝次数
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ReqDragonTreasureDraw pkg = new ReqDragonTreasureDraw();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Type = Type;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ReqDragonTreasureDraw()
		{
			PacketID = 1899;
		}
    }

    /// <summary>
    ///  [请求类] 龙族宝藏探宝 创建者
    /// </summary>
    [Package(1899)]
    public partial class ReqDragonTreasureDrawCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDragonTreasureDraw();
        }
    }


    /// <summary>
    ///  [响应类]龙族宝藏探宝
    /// </summary>
    public partial class ResDragonTreasureDraw: Packet 
    {
        /// <summary>
        /// 活动TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 活动大类Type
        /// </summary>
        public uint Type;
        /// <summary>
        /// 探宝次数
        /// </summary>
        public uint Count;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 奖励TID列表
        /// </summary>
        public List<uint> Awards = new List<uint>();

        public override Packet Clone()
        {
            ResDragonTreasureDraw pkg = new ResDragonTreasureDraw();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Type = Type;
            pkg.Count = Count;
            pkg.Result = Result;
            foreach (var item in Awards)
            {
                pkg.Awards.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Count);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)Awards.Count);
                for (int i = 0; i < Awards.Count; i++)
                {
                    oByteArray.WriteUInt(Awards[i]);
                }
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                int AwardsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < AwardsCount; i++)
                {
                    Awards.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResDragonTreasureDraw()
		{
			PacketID = 1900;
		}
    }

    /// <summary>
    ///  [响应类] 龙族宝藏探宝 创建者
    /// </summary>
    [Package(1900)]
    public partial class ResDragonTreasureDrawCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDragonTreasureDraw();
        }
    }


    /// <summary>
    ///  [请求类]龙族宝藏兑换
    /// </summary>
    public partial class ReqDragonTreasureExchange: Packet 
    {
        /// <summary>
        /// 龙族兑换表TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 活动ID
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 活动大类Type
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqDragonTreasureExchange pkg = new ReqDragonTreasureExchange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.ActivityID = ActivityID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                ActivityID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqDragonTreasureExchange()
		{
			PacketID = 1901;
		}
    }

    /// <summary>
    ///  [请求类] 龙族宝藏兑换 创建者
    /// </summary>
    [Package(1901)]
    public partial class ReqDragonTreasureExchangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDragonTreasureExchange();
        }
    }


    /// <summary>
    ///  [响应类]龙族宝藏兑换
    /// </summary>
    public partial class ResDragonTreasureExchange: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResDragonTreasureExchange pkg = new ResDragonTreasureExchange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResDragonTreasureExchange()
		{
			PacketID = 1902;
		}
    }

    /// <summary>
    ///  [响应类] 龙族宝藏兑换 创建者
    /// </summary>
    [Package(1902)]
    public partial class ResDragonTreasureExchangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDragonTreasureExchange();
        }
    }


    /// <summary>
    ///  [请求类]龙族宝藏探宝日志
    /// </summary>
    public partial class ReqDragonTreasureDrawLog: Packet 
    {

        public override Packet Clone()
        {
            ReqDragonTreasureDrawLog pkg = new ReqDragonTreasureDrawLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDragonTreasureDrawLog()
		{
			PacketID = 1903;
		}
    }

    /// <summary>
    ///  [请求类] 龙族宝藏探宝日志 创建者
    /// </summary>
    [Package(1903)]
    public partial class ReqDragonTreasureDrawLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDragonTreasureDrawLog();
        }
    }


    /// <summary>
    ///  [响应类]龙族宝藏探宝日志
    /// </summary>
    public partial class ResDragonTreasureDrawLog: Packet 
    {
        /// <summary>
        /// 龙族宝藏日志信息
        /// </summary>
        public DragonTreasureDrawLog LogInfo = new DragonTreasureDrawLog();
        /// <summary>
        /// true:个人 false:全服
        /// </summary>
        public bool IsPerson;

        public override Packet Clone()
        {
            ResDragonTreasureDrawLog pkg = new ResDragonTreasureDrawLog();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LogInfo = LogInfo.Clone() as DragonTreasureDrawLog;
            pkg.IsPerson = IsPerson;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                LogInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(IsPerson);
            }
            else
            {
                LogInfo.Serializtion(oByteArray, bSerialize);
                IsPerson = oByteArray.ReadBoolean();
            }
        }
		public ResDragonTreasureDrawLog()
		{
			PacketID = 1904;
		}
    }

    /// <summary>
    ///  [响应类] 龙族宝藏探宝日志 创建者
    /// </summary>
    [Package(1904)]
    public partial class ResDragonTreasureDrawLogCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDragonTreasureDrawLog();
        }
    }


    /// <summary>
    ///  [请求类]龙族宝藏仓库经验丹一键使用
    /// </summary>
    public partial class ReqUseDragonTreasureAllExpItem: Packet 
    {

        public override Packet Clone()
        {
            ReqUseDragonTreasureAllExpItem pkg = new ReqUseDragonTreasureAllExpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUseDragonTreasureAllExpItem()
		{
			PacketID = 1905;
		}
    }

    /// <summary>
    ///  [请求类] 龙族宝藏仓库经验丹一键使用 创建者
    /// </summary>
    [Package(1905)]
    public partial class ReqUseDragonTreasureAllExpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUseDragonTreasureAllExpItem();
        }
    }


    /// <summary>
    ///  [响应类]龙族宝藏仓库经验丹一键使用
    /// </summary>
    public partial class ResUseDragonTreasureAllExpItem: Packet 
    {

        public override Packet Clone()
        {
            ResUseDragonTreasureAllExpItem pkg = new ResUseDragonTreasureAllExpItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUseDragonTreasureAllExpItem()
		{
			PacketID = 1906;
		}
    }

    /// <summary>
    ///  [响应类] 龙族宝藏仓库经验丹一键使用 创建者
    /// </summary>
    [Package(1906)]
    public partial class ResUseDragonTreasureAllExpItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUseDragonTreasureAllExpItem();
        }
    }


    /// <summary>
    ///  [请求类]测试starttool和其他服务器通信
    /// </summary>
    public partial class ReqTestStartTool: Packet 
    {
        /// <summary>
        /// 时间戳
        /// </summary>
        public uint Time;
        /// <summary>
        /// 帧数
        /// </summary>
        public uint FrameCount;

        public override Packet Clone()
        {
            ReqTestStartTool pkg = new ReqTestStartTool();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Time = Time;
            pkg.FrameCount = FrameCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Time);
                oByteArray.WriteUInt(FrameCount);
            }
            else
            {
                Time = oByteArray.ReadUInt();
                FrameCount = oByteArray.ReadUInt();
            }
        }
		public ReqTestStartTool()
		{
			PacketID = 1907;
		}
    }

    /// <summary>
    ///  [请求类] 测试starttool和其他服务器通信 创建者
    /// </summary>
    [Package(1907)]
    public partial class ReqTestStartToolCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTestStartTool();
        }
    }


    /// <summary>
    ///  [响应类]测试starttool和其他服务器通信
    /// </summary>
    public partial class ResTestStartTool: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint Param1;
        /// <summary>
        /// 
        /// </summary>
        public uint Param2;

        public override Packet Clone()
        {
            ResTestStartTool pkg = new ResTestStartTool();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Param1 = Param1;
            pkg.Param2 = Param2;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Param1);
                oByteArray.WriteUInt(Param2);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Param1 = oByteArray.ReadUInt();
                Param2 = oByteArray.ReadUInt();
            }
        }
		public ResTestStartTool()
		{
			PacketID = 1908;
		}
    }

    /// <summary>
    ///  [响应类] 测试starttool和其他服务器通信 创建者
    /// </summary>
    [Package(1908)]
    public partial class ResTestStartToolCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTestStartTool();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场通知周期结束时间
    /// </summary>
    public partial class ReqCSArenaNoticeEndTime: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaNoticeEndTime pkg = new ReqCSArenaNoticeEndTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaNoticeEndTime()
		{
			PacketID = 1909;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场通知周期结束时间 创建者
    /// </summary>
    [Package(1909)]
    public partial class ReqCSArenaNoticeEndTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaNoticeEndTime();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场通知周期结束时间
    /// </summary>
    public partial class ResCSArenaNoticeEndTime: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResCSArenaNoticeEndTime pkg = new ResCSArenaNoticeEndTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResCSArenaNoticeEndTime()
		{
			PacketID = 1910;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场通知周期结束时间 创建者
    /// </summary>
    [Package(1910)]
    public partial class ResCSArenaNoticeEndTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaNoticeEndTime();
        }
    }


    /// <summary>
    ///  [请求类]屠魔福利
    /// </summary>
    public partial class ReqKillMonsterBenefits: Packet 
    {

        public override Packet Clone()
        {
            ReqKillMonsterBenefits pkg = new ReqKillMonsterBenefits();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqKillMonsterBenefits()
		{
			PacketID = 1911;
		}
    }

    /// <summary>
    ///  [请求类] 屠魔福利 创建者
    /// </summary>
    [Package(1911)]
    public partial class ReqKillMonsterBenefitsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKillMonsterBenefits();
        }
    }


    /// <summary>
    ///  [响应类]屠魔福利
    /// </summary>
    public partial class ResKillMonsterBenefits: Packet 
    {

        public override Packet Clone()
        {
            ResKillMonsterBenefits pkg = new ResKillMonsterBenefits();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResKillMonsterBenefits()
		{
			PacketID = 1912;
		}
    }

    /// <summary>
    ///  [响应类] 屠魔福利 创建者
    /// </summary>
    [Package(1912)]
    public partial class ResKillMonsterBenefitsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKillMonsterBenefits();
        }
    }


    /// <summary>
    ///  [请求类]通知重新加载服务器配置
    /// </summary>
    public partial class ReqNoticeReloadServerConfig: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeReloadServerConfig pkg = new ReqNoticeReloadServerConfig();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeReloadServerConfig()
		{
			PacketID = 1913;
		}
    }

    /// <summary>
    ///  [请求类] 通知重新加载服务器配置 创建者
    /// </summary>
    [Package(1913)]
    public partial class ReqNoticeReloadServerConfigCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeReloadServerConfig();
        }
    }


    /// <summary>
    ///  [响应类]通知重新加载服务器配置
    /// </summary>
    public partial class ResNoticeReloadServerConfig: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeReloadServerConfig pkg = new ResNoticeReloadServerConfig();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeReloadServerConfig()
		{
			PacketID = 1914;
		}
    }

    /// <summary>
    ///  [响应类] 通知重新加载服务器配置 创建者
    /// </summary>
    [Package(1914)]
    public partial class ResNoticeReloadServerConfigCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeReloadServerConfig();
        }
    }


    /// <summary>
    ///  [请求类]屠魔福利信息刷新
    /// </summary>
    public partial class ReqKillMonsterBenefitsInfo: Packet 
    {
        /// <summary>
        /// 活动TID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 怪物刷新信息
        /// </summary>
        public MonsterReflashInfo Info = new MonsterReflashInfo();
        /// <summary>
        /// 唯一标识
        /// </summary>
        public uint Guid;
        /// <summary>
        /// 操作:true添加,false删除
        /// </summary>
        public bool Operate;

        public override Packet Clone()
        {
            ReqKillMonsterBenefitsInfo pkg = new ReqKillMonsterBenefitsInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Info = Info.Clone() as MonsterReflashInfo;
            pkg.Guid = Guid;
            pkg.Operate = Operate;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                Info.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(Guid);
                oByteArray.WriteBoolean(Operate);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Info.Serializtion(oByteArray, bSerialize);
                Guid = oByteArray.ReadUInt();
                Operate = oByteArray.ReadBoolean();
            }
        }
		public ReqKillMonsterBenefitsInfo()
		{
			PacketID = 1915;
		}
    }

    /// <summary>
    ///  [请求类] 屠魔福利信息刷新 创建者
    /// </summary>
    [Package(1915)]
    public partial class ReqKillMonsterBenefitsInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKillMonsterBenefitsInfo();
        }
    }


    /// <summary>
    ///  [响应类]屠魔福利信息刷新
    /// </summary>
    public partial class ResKillMonsterBenefitsInfo: Packet 
    {

        public override Packet Clone()
        {
            ResKillMonsterBenefitsInfo pkg = new ResKillMonsterBenefitsInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResKillMonsterBenefitsInfo()
		{
			PacketID = 1916;
		}
    }

    /// <summary>
    ///  [响应类] 屠魔福利信息刷新 创建者
    /// </summary>
    [Package(1916)]
    public partial class ResKillMonsterBenefitsInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKillMonsterBenefitsInfo();
        }
    }


    /// <summary>
    ///  [请求类]用来单独对新增的模仿8类型的子活动初始化时记录它的开启活动时的开服时间
    /// </summary>
    public partial class ReqUpdateAssembleActivityDataOpenDays: Packet 
    {
        /// <summary>
        /// 活动的大类型（比如月中月末）
        /// </summary>
        public byte bigType;
        /// <summary>
        /// sub子活动类型
        /// </summary>
        public byte subType;
        /// <summary>
        /// 开服天数
        /// </summary>
        public int openDays;

        public override Packet Clone()
        {
            ReqUpdateAssembleActivityDataOpenDays pkg = new ReqUpdateAssembleActivityDataOpenDays();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.bigType = bigType;
            pkg.subType = subType;
            pkg.openDays = openDays;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteByte(bigType);
                oByteArray.WriteByte(subType);
                oByteArray.WriteInt(openDays);
            }
            else
            {
                bigType = oByteArray.ReadByte();
                subType = oByteArray.ReadByte();
                openDays = oByteArray.ReadInt();
            }
        }
		public ReqUpdateAssembleActivityDataOpenDays()
		{
			PacketID = 1917;
		}
    }

    /// <summary>
    ///  [请求类] 用来单独对新增的模仿8类型的子活动初始化时记录它的开启活动时的开服时间 创建者
    /// </summary>
    [Package(1917)]
    public partial class ReqUpdateAssembleActivityDataOpenDaysCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateAssembleActivityDataOpenDays();
        }
    }


    /// <summary>
    ///  [响应类]用来单独对新增的模仿8类型的子活动初始化时记录它的开启活动时的开服时间
    /// </summary>
    public partial class ResUpdateAssembleActivityDataOpenDays: Packet 
    {

        public override Packet Clone()
        {
            ResUpdateAssembleActivityDataOpenDays pkg = new ResUpdateAssembleActivityDataOpenDays();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdateAssembleActivityDataOpenDays()
		{
			PacketID = 1918;
		}
    }

    /// <summary>
    ///  [响应类] 用来单独对新增的模仿8类型的子活动初始化时记录它的开启活动时的开服时间 创建者
    /// </summary>
    [Package(1918)]
    public partial class ResUpdateAssembleActivityDataOpenDaysCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateAssembleActivityDataOpenDays();
        }
    }


    /// <summary>
    ///  [请求类]平台释放封禁的ip
    /// </summary>
    public partial class ReqNoticeReleaseIp: Packet 
    {
        /// <summary>
        /// 玩家的信息
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();
        /// <summary>
        /// 要释放的ip
        /// </summary>
        public string releaseIp;

        public override Packet Clone()
        {
            ReqNoticeReleaseIp pkg = new ReqNoticeReleaseIp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            pkg.releaseIp = releaseIp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUTF(releaseIp);
            }
            else
            {
                PlayerID.Serializtion(oByteArray, bSerialize);
                releaseIp = oByteArray.ReadUTF();
            }
        }
		public ReqNoticeReleaseIp()
		{
			PacketID = 1919;
		}
    }

    /// <summary>
    ///  [请求类] 平台释放封禁的ip 创建者
    /// </summary>
    [Package(1919)]
    public partial class ReqNoticeReleaseIpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeReleaseIp();
        }
    }


    /// <summary>
    ///  [响应类]平台释放封禁的ip
    /// </summary>
    public partial class ResNoticeReleaseIp: Packet 
    {

        public override Packet Clone()
        {
            ResNoticeReleaseIp pkg = new ResNoticeReleaseIp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNoticeReleaseIp()
		{
			PacketID = 1920;
		}
    }

    /// <summary>
    ///  [响应类] 平台释放封禁的ip 创建者
    /// </summary>
    [Package(1920)]
    public partial class ResNoticeReleaseIpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeReleaseIp();
        }
    }


    /// <summary>
    ///  [请求类]服务器健康度管理心跳包
    /// </summary>
    public partial class ReqHeartBeatEx: Packet 
    {
        /// <summary>
        /// 心跳ID
        /// </summary>
        public uint ID;
        /// <summary>
        /// 时间
        /// </summary>
        public double SendMsgTime;
        /// <summary>
        /// 平台ID
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 区服ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 服务器健康度信息
        /// </summary>
        public int HealthInfo;

        public override Packet Clone()
        {
            ReqHeartBeatEx pkg = new ReqHeartBeatEx();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ID = ID;
            pkg.SendMsgTime = SendMsgTime;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.HealthInfo = HealthInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ID);
                oByteArray.WriteDouble(SendMsgTime);
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteInt(HealthInfo);
            }
            else
            {
                ID = oByteArray.ReadUInt();
                SendMsgTime = oByteArray.ReadDouble();
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                HealthInfo = oByteArray.ReadInt();
            }
        }
		public ReqHeartBeatEx()
		{
			PacketID = 1921;
		}
    }

    /// <summary>
    ///  [请求类] 服务器健康度管理心跳包 创建者
    /// </summary>
    [Package(1921)]
    public partial class ReqHeartBeatExCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHeartBeatEx();
        }
    }


    /// <summary>
    ///  [响应类]服务器健康度管理心跳包
    /// </summary>
    public partial class ResHeartBeatEx: Packet 
    {
        /// <summary>
        /// 结果
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResHeartBeatEx pkg = new ResHeartBeatEx();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResHeartBeatEx()
		{
			PacketID = 1922;
		}
    }

    /// <summary>
    ///  [响应类] 服务器健康度管理心跳包 创建者
    /// </summary>
    [Package(1922)]
    public partial class ResHeartBeatExCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHeartBeatEx();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场周期结束
    /// </summary>
    public partial class ReqCSArenaCycleEnd: Packet 
    {

        public override Packet Clone()
        {
            ReqCSArenaCycleEnd pkg = new ReqCSArenaCycleEnd();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSArenaCycleEnd()
		{
			PacketID = 1923;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场周期结束 创建者
    /// </summary>
    [Package(1923)]
    public partial class ReqCSArenaCycleEndCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaCycleEnd();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场周期结束
    /// </summary>
    public partial class ResCSArenaCycleEnd: Packet 
    {

        public override Packet Clone()
        {
            ResCSArenaCycleEnd pkg = new ResCSArenaCycleEnd();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResCSArenaCycleEnd()
		{
			PacketID = 1924;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场周期结束 创建者
    /// </summary>
    [Package(1924)]
    public partial class ResCSArenaCycleEndCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaCycleEnd();
        }
    }


    /// <summary>
    ///  [请求类]服务器健康度有问题上报
    /// </summary>
    public partial class ReqServerHealthAlarm: Packet 
    {
        /// <summary>
        /// 平台ID
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 区服ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 服务器类型
        /// </summary>
        public uint ServerType;
        /// <summary>
        /// 针对同类多服，从0开始
        /// </summary>
        public uint Param;

        public override Packet Clone()
        {
            ReqServerHealthAlarm pkg = new ReqServerHealthAlarm();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.ServerType = ServerType;
            pkg.Param = Param;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt(ServerType);
                oByteArray.WriteUInt(Param);
            }
            else
            {
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                ServerType = oByteArray.ReadUInt();
                Param = oByteArray.ReadUInt();
            }
        }
		public ReqServerHealthAlarm()
		{
			PacketID = 1925;
		}
    }

    /// <summary>
    ///  [请求类] 服务器健康度有问题上报 创建者
    /// </summary>
    [Package(1925)]
    public partial class ReqServerHealthAlarmCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqServerHealthAlarm();
        }
    }


    /// <summary>
    ///  [响应类]服务器健康度有问题上报
    /// </summary>
    public partial class ResServerHealthAlarm: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Result;

        public override Packet Clone()
        {
            ResServerHealthAlarm pkg = new ResServerHealthAlarm();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
            }
            else
            {
                Result = oByteArray.ReadInt();
            }
        }
		public ResServerHealthAlarm()
		{
			PacketID = 1926;
		}
    }

    /// <summary>
    ///  [响应类] 服务器健康度有问题上报 创建者
    /// </summary>
    [Package(1926)]
    public partial class ResServerHealthAlarmCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResServerHealthAlarm();
        }
    }


    /// <summary>
    ///  [请求类]服务器健康度各exe版本号
    /// </summary>
    public partial class ReqServerHealthVersion: Packet 
    {

        public override Packet Clone()
        {
            ReqServerHealthVersion pkg = new ReqServerHealthVersion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqServerHealthVersion()
		{
			PacketID = 1927;
		}
    }

    /// <summary>
    ///  [请求类] 服务器健康度各exe版本号 创建者
    /// </summary>
    [Package(1927)]
    public partial class ReqServerHealthVersionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqServerHealthVersion();
        }
    }


    /// <summary>
    ///  [响应类]服务器健康度各exe版本号
    /// </summary>
    public partial class ResServerHealthVersion: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Result;
        /// <summary>
        /// 最新版本号（各个平台）
        /// </summary>
        public List<PlatformVersion> Version = new List<PlatformVersion>();

        public override Packet Clone()
        {
            ResServerHealthVersion pkg = new ResServerHealthVersion();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (PlatformVersion item in Version)
            {
                pkg.Version.Add(item.Clone() as PlatformVersion);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
                oByteArray.WriteUShort((ushort)Version.Count);
                for (int i = 0; i < Version.Count; i++)
                {
                    Version[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadInt();
                int VersionCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < VersionCount; i++)
                {
                    PlatformVersion obj = new PlatformVersion();
                    obj.Serializtion(oByteArray, bSerialize);
                    Version.Add(obj);
                }
            }
        }
		public ResServerHealthVersion()
		{
			PacketID = 1928;
		}
    }

    /// <summary>
    ///  [响应类] 服务器健康度各exe版本号 创建者
    /// </summary>
    [Package(1928)]
    public partial class ResServerHealthVersionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResServerHealthVersion();
        }
    }


    /// <summary>
    ///  [请求类]存储玩家头像框信息
    /// </summary>
    public partial class ReqSaveHeadShotFrameInfo: Packet 
    {
        /// <summary>
        /// 头像框ID
        /// </summary>
        public uint HeadShotFrameID;
        /// <summary>
        /// 头像框信息
        /// </summary>
        public string HeadShotFrameInfostr;

        public override Packet Clone()
        {
            ReqSaveHeadShotFrameInfo pkg = new ReqSaveHeadShotFrameInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.HeadShotFrameID = HeadShotFrameID;
            pkg.HeadShotFrameInfostr = HeadShotFrameInfostr;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(HeadShotFrameID);
                oByteArray.WriteUTF(HeadShotFrameInfostr);
            }
            else
            {
                HeadShotFrameID = oByteArray.ReadUInt();
                HeadShotFrameInfostr = oByteArray.ReadUTF();
            }
        }
		public ReqSaveHeadShotFrameInfo()
		{
			PacketID = 1929;
		}
    }

    /// <summary>
    ///  [请求类] 存储玩家头像框信息 创建者
    /// </summary>
    [Package(1929)]
    public partial class ReqSaveHeadShotFrameInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSaveHeadShotFrameInfo();
        }
    }


    /// <summary>
    ///  [响应类]存储玩家头像框信息
    /// </summary>
    public partial class ResSaveHeadShotFrameInfo: Packet 
    {

        public override Packet Clone()
        {
            ResSaveHeadShotFrameInfo pkg = new ResSaveHeadShotFrameInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSaveHeadShotFrameInfo()
		{
			PacketID = 1930;
		}
    }

    /// <summary>
    ///  [响应类] 存储玩家头像框信息 创建者
    /// </summary>
    [Package(1930)]
    public partial class ResSaveHeadShotFrameInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSaveHeadShotFrameInfo();
        }
    }


    /// <summary>
    ///  [请求类]穿脱头像框操作
    /// </summary>
    public partial class ReqWareHeadShotFrame: Packet 
    {
        /// <summary>
        /// 头像框ID
        /// </summary>
        public uint HeadShotFrameID;
        /// <summary>
        /// 0是卸下1是穿戴
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ReqWareHeadShotFrame pkg = new ReqWareHeadShotFrame();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.HeadShotFrameID = HeadShotFrameID;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(HeadShotFrameID);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                HeadShotFrameID = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ReqWareHeadShotFrame()
		{
			PacketID = 1931;
		}
    }

    /// <summary>
    ///  [请求类] 穿脱头像框操作 创建者
    /// </summary>
    [Package(1931)]
    public partial class ReqWareHeadShotFrameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqWareHeadShotFrame();
        }
    }


    /// <summary>
    ///  [响应类]穿脱头像框操作
    /// </summary>
    public partial class ResWareHeadShotFrame: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 头像框ID
        /// </summary>
        public uint HeadShotFrameID;

        public override Packet Clone()
        {
            ResWareHeadShotFrame pkg = new ResWareHeadShotFrame();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.HeadShotFrameID = HeadShotFrameID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(HeadShotFrameID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                HeadShotFrameID = oByteArray.ReadUInt();
            }
        }
		public ResWareHeadShotFrame()
		{
			PacketID = 1932;
		}
    }

    /// <summary>
    ///  [响应类] 穿脱头像框操作 创建者
    /// </summary>
    [Package(1932)]
    public partial class ResWareHeadShotFrameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResWareHeadShotFrame();
        }
    }


    /// <summary>
    ///  [请求类]获得头像框
    /// </summary>
    public partial class ReqAddHeadShotFrame: Packet 
    {

        public override Packet Clone()
        {
            ReqAddHeadShotFrame pkg = new ReqAddHeadShotFrame();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqAddHeadShotFrame()
		{
			PacketID = 1933;
		}
    }

    /// <summary>
    ///  [请求类] 获得头像框 创建者
    /// </summary>
    [Package(1933)]
    public partial class ReqAddHeadShotFrameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddHeadShotFrame();
        }
    }


    /// <summary>
    ///  [响应类]获得头像框
    /// </summary>
    public partial class ResAddHeadShotFrame: Packet 
    {
        /// <summary>
        /// 头像框TID
        /// </summary>
        public uint HeadShotFrameID;
        /// <summary>
        /// 持续时间戳 0为永久
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResAddHeadShotFrame pkg = new ResAddHeadShotFrame();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.HeadShotFrameID = HeadShotFrameID;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(HeadShotFrameID);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                HeadShotFrameID = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResAddHeadShotFrame()
		{
			PacketID = 1934;
		}
    }

    /// <summary>
    ///  [响应类] 获得头像框 创建者
    /// </summary>
    [Package(1934)]
    public partial class ResAddHeadShotFrameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddHeadShotFrame();
        }
    }


    /// <summary>
    ///  [请求类]移除头像框
    /// </summary>
    public partial class ReqRemoveHeadShotFrame: Packet 
    {

        public override Packet Clone()
        {
            ReqRemoveHeadShotFrame pkg = new ReqRemoveHeadShotFrame();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqRemoveHeadShotFrame()
		{
			PacketID = 1935;
		}
    }

    /// <summary>
    ///  [请求类] 移除头像框 创建者
    /// </summary>
    [Package(1935)]
    public partial class ReqRemoveHeadShotFrameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRemoveHeadShotFrame();
        }
    }


    /// <summary>
    ///  [响应类]移除头像框
    /// </summary>
    public partial class ResRemoveHeadShotFrame: Packet 
    {
        /// <summary>
        /// 头像框ID
        /// </summary>
        public uint HeadShotFrameID;

        public override Packet Clone()
        {
            ResRemoveHeadShotFrame pkg = new ResRemoveHeadShotFrame();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.HeadShotFrameID = HeadShotFrameID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(HeadShotFrameID);
            }
            else
            {
                HeadShotFrameID = oByteArray.ReadUInt();
            }
        }
		public ResRemoveHeadShotFrame()
		{
			PacketID = 1936;
		}
    }

    /// <summary>
    ///  [响应类] 移除头像框 创建者
    /// </summary>
    [Package(1936)]
    public partial class ResRemoveHeadShotFrameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRemoveHeadShotFrame();
        }
    }


    /// <summary>
    ///  [请求类]健康度信息改变
    /// </summary>
    public partial class ReqHealthInfoChange: Packet 
    {
        /// <summary>
        /// 健康度信息
        /// </summary>
        public int HealthInfo;

        public override Packet Clone()
        {
            ReqHealthInfoChange pkg = new ReqHealthInfoChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.HealthInfo = HealthInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(HealthInfo);
            }
            else
            {
                HealthInfo = oByteArray.ReadInt();
            }
        }
		public ReqHealthInfoChange()
		{
			PacketID = 1937;
		}
    }

    /// <summary>
    ///  [请求类] 健康度信息改变 创建者
    /// </summary>
    [Package(1937)]
    public partial class ReqHealthInfoChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHealthInfoChange();
        }
    }


    /// <summary>
    ///  [响应类]健康度信息改变
    /// </summary>
    public partial class ResHealthInfoChange: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Result;

        public override Packet Clone()
        {
            ResHealthInfoChange pkg = new ResHealthInfoChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
            }
            else
            {
                Result = oByteArray.ReadInt();
            }
        }
		public ResHealthInfoChange()
		{
			PacketID = 1938;
		}
    }

    /// <summary>
    ///  [响应类] 健康度信息改变 创建者
    /// </summary>
    [Package(1938)]
    public partial class ResHealthInfoChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHealthInfoChange();
        }
    }


    /// <summary>
    ///  [请求类]健康度模块-world服初始化时给center服发的消息
    /// </summary>
    public partial class ReqHealthWorldInit: Packet 
    {
        /// <summary>
        /// 平台ID
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 区服ID
        /// </summary>
        public uint ServerID;

        public override Packet Clone()
        {
            ReqHealthWorldInit pkg = new ReqHealthWorldInit();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
            }
            else
            {
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
            }
        }
		public ReqHealthWorldInit()
		{
			PacketID = 1939;
		}
    }

    /// <summary>
    ///  [请求类] 健康度模块-world服初始化时给center服发的消息 创建者
    /// </summary>
    [Package(1939)]
    public partial class ReqHealthWorldInitCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHealthWorldInit();
        }
    }


    /// <summary>
    ///  [响应类]健康度模块-world服初始化时给center服发的消息
    /// </summary>
    public partial class ResHealthWorldInit: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Result;

        public override Packet Clone()
        {
            ResHealthWorldInit pkg = new ResHealthWorldInit();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
            }
            else
            {
                Result = oByteArray.ReadInt();
            }
        }
		public ResHealthWorldInit()
		{
			PacketID = 1940;
		}
    }

    /// <summary>
    ///  [响应类] 健康度模块-world服初始化时给center服发的消息 创建者
    /// </summary>
    [Package(1940)]
    public partial class ResHealthWorldInitCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHealthWorldInit();
        }
    }


    /// <summary>
    ///  [请求类]初始化玩家信息
    /// </summary>
    public partial class ReqInitPlayerData: Packet 
    {

        public override Packet Clone()
        {
            ReqInitPlayerData pkg = new ReqInitPlayerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitPlayerData()
		{
			PacketID = 1941;
		}
    }

    /// <summary>
    ///  [请求类] 初始化玩家信息 创建者
    /// </summary>
    [Package(1941)]
    public partial class ReqInitPlayerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitPlayerData();
        }
    }


    /// <summary>
    ///  [响应类]初始化玩家信息
    /// </summary>
    public partial class ResInitPlayerData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public PlayerData Data = new PlayerData();

        public override Packet Clone()
        {
            ResInitPlayerData pkg = new ResInitPlayerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.Data = Data.Clone() as PlayerData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResInitPlayerData()
		{
			PacketID = 1942;
		}
    }

    /// <summary>
    ///  [响应类] 初始化玩家信息 创建者
    /// </summary>
    [Package(1942)]
    public partial class ResInitPlayerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitPlayerData();
        }
    }


    /// <summary>
    ///  [请求类]保存玩家信息
    /// </summary>
    public partial class ReqSavePlayerData: Packet 
    {

        public override Packet Clone()
        {
            ReqSavePlayerData pkg = new ReqSavePlayerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqSavePlayerData()
		{
			PacketID = 1943;
		}
    }

    /// <summary>
    ///  [请求类] 保存玩家信息 创建者
    /// </summary>
    [Package(1943)]
    public partial class ReqSavePlayerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSavePlayerData();
        }
    }


    /// <summary>
    ///  [响应类]保存玩家信息
    /// </summary>
    public partial class ResSavePlayerData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public PlayerData Data = new PlayerData();

        public override Packet Clone()
        {
            ResSavePlayerData pkg = new ResSavePlayerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.Data = Data.Clone() as PlayerData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                Data.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                Data.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResSavePlayerData()
		{
			PacketID = 1944;
		}
    }

    /// <summary>
    ///  [响应类] 保存玩家信息 创建者
    /// </summary>
    [Package(1944)]
    public partial class ResSavePlayerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSavePlayerData();
        }
    }


    /// <summary>
    ///  [请求类]获取满足指定条件的玩家数量
    /// </summary>
    public partial class ReqGetPlayerNumByCondition: Packet 
    {
        /// <summary>
        /// 最后在线时间
        /// </summary>
        public uint LastOnlineTime;
        /// <summary>
        /// 境界等级
        /// </summary>
        public uint StateLv;

        public override Packet Clone()
        {
            ReqGetPlayerNumByCondition pkg = new ReqGetPlayerNumByCondition();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LastOnlineTime = LastOnlineTime;
            pkg.StateLv = StateLv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(LastOnlineTime);
                oByteArray.WriteUInt(StateLv);
            }
            else
            {
                LastOnlineTime = oByteArray.ReadUInt();
                StateLv = oByteArray.ReadUInt();
            }
        }
		public ReqGetPlayerNumByCondition()
		{
			PacketID = 1945;
		}
    }

    /// <summary>
    ///  [请求类] 获取满足指定条件的玩家数量 创建者
    /// </summary>
    [Package(1945)]
    public partial class ReqGetPlayerNumByConditionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetPlayerNumByCondition();
        }
    }


    /// <summary>
    ///  [响应类]获取满足指定条件的玩家数量
    /// </summary>
    public partial class ResGetPlayerNumByCondition: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint PlayerCount;

        public override Packet Clone()
        {
            ResGetPlayerNumByCondition pkg = new ResGetPlayerNumByCondition();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerCount = PlayerCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlayerCount);
            }
            else
            {
                PlayerCount = oByteArray.ReadUInt();
            }
        }
		public ResGetPlayerNumByCondition()
		{
			PacketID = 1946;
		}
    }

    /// <summary>
    ///  [响应类] 获取满足指定条件的玩家数量 创建者
    /// </summary>
    [Package(1946)]
    public partial class ResGetPlayerNumByConditionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetPlayerNumByCondition();
        }
    }


    /// <summary>
    ///  [请求类]跨服竞技场报名
    /// </summary>
    public partial class ReqCSArenaEnroll: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public uint WorldPort;
        /// <summary>
        /// 活跃人数
        /// </summary>
        public uint PlayerCount;
        /// <summary>
        /// 区服id
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 区服列表
        /// </summary>
        public List<uint> ServerList = new List<uint>();

        public override Packet Clone()
        {
            ReqCSArenaEnroll pkg = new ReqCSArenaEnroll();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            pkg.PlayerCount = PlayerCount;
            pkg.ServerID = ServerID;
            foreach (var item in ServerList)
            {
                pkg.ServerList.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
                oByteArray.WriteUInt(PlayerCount);
                oByteArray.WriteUInt(ServerID);
                for (int i = 0; i < ServerList.Count; i++)
                {
                      oByteArray.WriteUInt(ServerList[i]);
                }
            }
            else
            {
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
                PlayerCount = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                int ServerListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ServerListCount; i++)
                {
                    ServerList.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqCSArenaEnroll()
		{
			PacketID = 1947;
		}
    }

    /// <summary>
    ///  [请求类] 跨服竞技场报名 创建者
    /// </summary>
    [Package(1947)]
    public partial class ReqCSArenaEnrollCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSArenaEnroll();
        }
    }


    /// <summary>
    ///  [响应类]跨服竞技场报名
    /// </summary>
    public partial class ResCSArenaEnroll: Packet 
    {

        public override Packet Clone()
        {
            ResCSArenaEnroll pkg = new ResCSArenaEnroll();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResCSArenaEnroll()
		{
			PacketID = 1948;
		}
    }

    /// <summary>
    ///  [响应类] 跨服竞技场报名 创建者
    /// </summary>
    [Package(1948)]
    public partial class ResCSArenaEnrollCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSArenaEnroll();
        }
    }


    /// <summary>
    ///  [请求类]平台相关奖励领取(或购买)
    /// </summary>
    public partial class ReqPlatformTakeAward: Packet 
    {
        /// <summary>
        /// 类型(对应平台表相关字段)
        /// </summary>
        public uint Type;
        /// <summary>
        /// 等级相关索引
        /// </summary>
        public uint Data;

        public override Packet Clone()
        {
            ReqPlatformTakeAward pkg = new ReqPlatformTakeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Type = Type;
            pkg.Data = Data;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Data);
            }
            else
            {
                Type = oByteArray.ReadUInt();
                Data = oByteArray.ReadUInt();
            }
        }
		public ReqPlatformTakeAward()
		{
			PacketID = 1949;
		}
    }

    /// <summary>
    ///  [请求类] 平台相关奖励领取(或购买) 创建者
    /// </summary>
    [Package(1949)]
    public partial class ReqPlatformTakeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPlatformTakeAward();
        }
    }


    /// <summary>
    ///  [响应类]平台相关奖励领取(或购买)
    /// </summary>
    public partial class ResPlatformTakeAward: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 类型(对应平台表相关字段)
        /// </summary>
        public uint Type;
        /// <summary>
        /// 等级相关索引
        /// </summary>
        public uint Data;

        public override Packet Clone()
        {
            ResPlatformTakeAward pkg = new ResPlatformTakeAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.Type = Type;
            pkg.Data = Data;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Type);
                oByteArray.WriteUInt(Data);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
                Data = oByteArray.ReadUInt();
            }
        }
		public ResPlatformTakeAward()
		{
			PacketID = 1950;
		}
    }

    /// <summary>
    ///  [响应类] 平台相关奖励领取(或购买) 创建者
    /// </summary>
    [Package(1950)]
    public partial class ResPlatformTakeAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPlatformTakeAward();
        }
    }


    /// <summary>
    ///  [请求类]领取每日礼包奖励
    /// </summary>
    public partial class ReqTakeDailyGiftAward: Packet 
    {
        /// <summary>
        /// DailyGiftConfigurationTemplate[TID]
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqTakeDailyGiftAward pkg = new ReqTakeDailyGiftAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqTakeDailyGiftAward()
		{
			PacketID = 1951;
		}
    }

    /// <summary>
    ///  [请求类] 领取每日礼包奖励 创建者
    /// </summary>
    [Package(1951)]
    public partial class ReqTakeDailyGiftAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTakeDailyGiftAward();
        }
    }


    /// <summary>
    ///  [响应类]领取每日礼包奖励
    /// </summary>
    public partial class ResTakeDailyGiftAward: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// DailyGiftConfigurationTemplate[TID]
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResTakeDailyGiftAward pkg = new ResTakeDailyGiftAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResTakeDailyGiftAward()
		{
			PacketID = 1952;
		}
    }

    /// <summary>
    ///  [响应类] 领取每日礼包奖励 创建者
    /// </summary>
    [Package(1952)]
    public partial class ResTakeDailyGiftAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTakeDailyGiftAward();
        }
    }


    /// <summary>
    ///  [请求类]用gm道具充值
    /// </summary>
    public partial class ReqRechargeUseItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public RechargeBuyData Data = new RechargeBuyData();
        /// <summary>
        /// 
        /// </summary>
        public uint RechargeType;
        /// <summary>
        /// 
        /// </summary>
        public uint PayMoney;

        public override Packet Clone()
        {
            ReqRechargeUseItem pkg = new ReqRechargeUseItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Data = Data.Clone() as RechargeBuyData;
            pkg.RechargeType = RechargeType;
            pkg.PayMoney = PayMoney;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                Data.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(RechargeType);
                oByteArray.WriteUInt(PayMoney);
            }
            else
            {
                Data.Serializtion(oByteArray, bSerialize);
                RechargeType = oByteArray.ReadUInt();
                PayMoney = oByteArray.ReadUInt();
            }
        }
		public ReqRechargeUseItem()
		{
			PacketID = 1953;
		}
    }

    /// <summary>
    ///  [请求类] 用gm道具充值 创建者
    /// </summary>
    [Package(1953)]
    public partial class ReqRechargeUseItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRechargeUseItem();
        }
    }


    /// <summary>
    ///  [响应类]用gm道具充值
    /// </summary>
    public partial class ResRechargeUseItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResRechargeUseItem pkg = new ResRechargeUseItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResRechargeUseItem()
		{
			PacketID = 1954;
		}
    }

    /// <summary>
    ///  [响应类] 用gm道具充值 创建者
    /// </summary>
    [Package(1954)]
    public partial class ResRechargeUseItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRechargeUseItem();
        }
    }


    /// <summary>
    ///  [请求类]健康度模块-world服或StartTool给center服发的消息
    /// </summary>
    public partial class ReqHealthStartStopServer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint PlatformID;
        /// <summary>
        /// 
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 0开服，1关服
        /// </summary>
        public uint Param;

        public override Packet Clone()
        {
            ReqHealthStartStopServer pkg = new ReqHealthStartStopServer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlatformID = PlatformID;
            pkg.ServerID = ServerID;
            pkg.Param = Param;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(PlatformID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt(Param);
            }
            else
            {
                PlatformID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                Param = oByteArray.ReadUInt();
            }
        }
		public ReqHealthStartStopServer()
		{
			PacketID = 1955;
		}
    }

    /// <summary>
    ///  [请求类] 健康度模块-world服或StartTool给center服发的消息 创建者
    /// </summary>
    [Package(1955)]
    public partial class ReqHealthStartStopServerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqHealthStartStopServer();
        }
    }


    /// <summary>
    ///  [响应类]健康度模块-world服或StartTool给center服发的消息
    /// </summary>
    public partial class ResHealthStartStopServer: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResHealthStartStopServer pkg = new ResHealthStartStopServer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResHealthStartStopServer()
		{
			PacketID = 1956;
		}
    }

    /// <summary>
    ///  [响应类] 健康度模块-world服或StartTool给center服发的消息 创建者
    /// </summary>
    [Package(1956)]
    public partial class ResHealthStartStopServerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResHealthStartStopServer();
        }
    }


    /// <summary>
    ///  [请求类]跨服龙城泡点信息
    /// </summary>
    public partial class ReqKFLCMapInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 副本ID
        /// </summary>
        public uint DungeonGuid;

        public override Packet Clone()
        {
            ReqKFLCMapInfo pkg = new ReqKFLCMapInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.DungeonGuid = DungeonGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(DungeonGuid);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                DungeonGuid = oByteArray.ReadUInt();
            }
        }
		public ReqKFLCMapInfo()
		{
			PacketID = 1957;
		}
    }

    /// <summary>
    ///  [请求类] 跨服龙城泡点信息 创建者
    /// </summary>
    [Package(1957)]
    public partial class ReqKFLCMapInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKFLCMapInfo();
        }
    }


    /// <summary>
    ///  [响应类]跨服龙城泡点信息
    /// </summary>
    public partial class ResKFLCMapInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 安全区坐标
        /// </summary>
        public List<PPoint> SafePoints = new List<PPoint>();
        /// <summary>
        /// 龙旗坐标
        /// </summary>
        public List<PPoint> BannerSurroundingsPoints = new List<PPoint>();
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 副本ID
        /// </summary>
        public uint DungeonGuid;

        public override Packet Clone()
        {
            ResKFLCMapInfo pkg = new ResKFLCMapInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            foreach (PPoint item in SafePoints)
            {
                pkg.SafePoints.Add(item.Clone() as PPoint);
            }
            foreach (PPoint item in BannerSurroundingsPoints)
            {
                pkg.BannerSurroundingsPoints.Add(item.Clone() as PPoint);
            }
            pkg.Result = Result;
            pkg.DungeonGuid = DungeonGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUShort((ushort)SafePoints.Count);
                for (int i = 0; i < SafePoints.Count; i++)
                {
                    SafePoints[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)BannerSurroundingsPoints.Count);
                for (int i = 0; i < BannerSurroundingsPoints.Count; i++)
                {
                    BannerSurroundingsPoints[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(DungeonGuid);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                int SafePointsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < SafePointsCount; i++)
                {
                    PPoint obj = new PPoint();
                    obj.Serializtion(oByteArray, bSerialize);
                    SafePoints.Add(obj);
                }
                int BannerSurroundingsPointsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BannerSurroundingsPointsCount; i++)
                {
                    PPoint obj = new PPoint();
                    obj.Serializtion(oByteArray, bSerialize);
                    BannerSurroundingsPoints.Add(obj);
                }
                Result = oByteArray.ReadUInt();
                DungeonGuid = oByteArray.ReadUInt();
            }
        }
		public ResKFLCMapInfo()
		{
			PacketID = 1958;
		}
    }

    /// <summary>
    ///  [响应类] 跨服龙城泡点信息 创建者
    /// </summary>
    [Package(1958)]
    public partial class ResKFLCMapInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKFLCMapInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服龙城活动信息
    /// </summary>
    public partial class ReqUpdateKFLCActivityInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateKFLCActivityInfo pkg = new ReqUpdateKFLCActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateKFLCActivityInfo()
		{
			PacketID = 1959;
		}
    }

    /// <summary>
    ///  [请求类] 跨服龙城活动信息 创建者
    /// </summary>
    [Package(1959)]
    public partial class ReqUpdateKFLCActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateKFLCActivityInfo();
        }
    }


    /// <summary>
    ///  [响应类]跨服龙城活动信息
    /// </summary>
    public partial class ResUpdateKFLCActivityInfo: Packet 
    {
        /// <summary>
        /// 龙城归属帮派名称
        /// </summary>
        public string LongChengOwnerName;
        /// <summary>
        /// 龙旗归属帮派名称信息
        /// </summary>
        public List<BannerProtoInfo> BannerOwnerInfo = new List<BannerProtoInfo>();
        /// <summary>
        /// 城门信息
        /// </summary>
        public List<CellarInfo> CellarInfoVec = new List<CellarInfo>();
        /// <summary>
        /// 是否归属变更
        /// </summary>
        public bool IsChange;

        public override Packet Clone()
        {
            ResUpdateKFLCActivityInfo pkg = new ResUpdateKFLCActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LongChengOwnerName = LongChengOwnerName;
            foreach (BannerProtoInfo item in BannerOwnerInfo)
            {
                pkg.BannerOwnerInfo.Add(item.Clone() as BannerProtoInfo);
            }
            foreach (CellarInfo item in CellarInfoVec)
            {
                pkg.CellarInfoVec.Add(item.Clone() as CellarInfo);
            }
            pkg.IsChange = IsChange;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(LongChengOwnerName);
                oByteArray.WriteUShort((ushort)BannerOwnerInfo.Count);
                for (int i = 0; i < BannerOwnerInfo.Count; i++)
                {
                    BannerOwnerInfo[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)CellarInfoVec.Count);
                for (int i = 0; i < CellarInfoVec.Count; i++)
                {
                    CellarInfoVec[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteBoolean(IsChange);
            }
            else
            {
                LongChengOwnerName = oByteArray.ReadUTF();
                int BannerOwnerInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < BannerOwnerInfoCount; i++)
                {
                    BannerProtoInfo obj = new BannerProtoInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    BannerOwnerInfo.Add(obj);
                }
                int CellarInfoVecCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < CellarInfoVecCount; i++)
                {
                    CellarInfo obj = new CellarInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    CellarInfoVec.Add(obj);
                }
                IsChange = oByteArray.ReadBoolean();
            }
        }
		public ResUpdateKFLCActivityInfo()
		{
			PacketID = 1960;
		}
    }

    /// <summary>
    ///  [响应类] 跨服龙城活动信息 创建者
    /// </summary>
    [Package(1960)]
    public partial class ResUpdateKFLCActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateKFLCActivityInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服匹配服广播新跨服龙城旗子归属行会
    /// </summary>
    public partial class ReqKFLCBroadcastBannerOwner: Packet 
    {

        public override Packet Clone()
        {
            ReqKFLCBroadcastBannerOwner pkg = new ReqKFLCBroadcastBannerOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqKFLCBroadcastBannerOwner()
		{
			PacketID = 1961;
		}
    }

    /// <summary>
    ///  [请求类] 跨服匹配服广播新跨服龙城旗子归属行会 创建者
    /// </summary>
    [Package(1961)]
    public partial class ReqKFLCBroadcastBannerOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKFLCBroadcastBannerOwner();
        }
    }


    /// <summary>
    ///  [响应类]跨服匹配服广播新跨服龙城旗子归属行会
    /// </summary>
    public partial class ResKFLCBroadcastBannerOwner: Packet 
    {
        /// <summary>
        /// 龙旗ID
        /// </summary>
        public uint TID;
        /// <summary>
        /// 龙旗归属ID
        /// </summary>
        public ulong BannerOwner;
        /// <summary>
        /// 龙旗归属名称
        /// </summary>
        public string BannerOwnerName;
        /// <summary>
        /// 玩家Guid
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ResKFLCBroadcastBannerOwner pkg = new ResKFLCBroadcastBannerOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.BannerOwner = BannerOwner;
            pkg.BannerOwnerName = BannerOwnerName;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt64(BannerOwner);
                oByteArray.WriteUTF(BannerOwnerName);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                BannerOwner = oByteArray.ReadUInt64();
                BannerOwnerName = oByteArray.ReadUTF();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ResKFLCBroadcastBannerOwner()
		{
			PacketID = 1962;
		}
    }

    /// <summary>
    ///  [响应类] 跨服匹配服广播新跨服龙城旗子归属行会 创建者
    /// </summary>
    [Package(1962)]
    public partial class ResKFLCBroadcastBannerOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKFLCBroadcastBannerOwner();
        }
    }


    /// <summary>
    ///  [请求类]跨服匹配服广播龙城归属行会
    /// </summary>
    public partial class ReqKFLCBroadcastLongChengOwner: Packet 
    {

        public override Packet Clone()
        {
            ReqKFLCBroadcastLongChengOwner pkg = new ReqKFLCBroadcastLongChengOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqKFLCBroadcastLongChengOwner()
		{
			PacketID = 1963;
		}
    }

    /// <summary>
    ///  [请求类] 跨服匹配服广播龙城归属行会 创建者
    /// </summary>
    [Package(1963)]
    public partial class ReqKFLCBroadcastLongChengOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKFLCBroadcastLongChengOwner();
        }
    }


    /// <summary>
    ///  [响应类]跨服匹配服广播龙城归属行会
    /// </summary>
    public partial class ResKFLCBroadcastLongChengOwner: Packet 
    {
        /// <summary>
        /// 帮派唯一id
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 帮派名称
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ResKFLCBroadcastLongChengOwner pkg = new ResKFLCBroadcastLongChengOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildGuid = GuildGuid;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                GuildGuid = oByteArray.ReadUInt64();
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ResKFLCBroadcastLongChengOwner()
		{
			PacketID = 1964;
		}
    }

    /// <summary>
    ///  [响应类] 跨服匹配服广播龙城归属行会 创建者
    /// </summary>
    [Package(1964)]
    public partial class ResKFLCBroadcastLongChengOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKFLCBroadcastLongChengOwner();
        }
    }


    /// <summary>
    ///  [请求类]跨服龙城开启城门
    /// </summary>
    public partial class ReqNKFLCOpenCellar: Packet 
    {

        public override Packet Clone()
        {
            ReqNKFLCOpenCellar pkg = new ReqNKFLCOpenCellar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNKFLCOpenCellar()
		{
			PacketID = 1965;
		}
    }

    /// <summary>
    ///  [请求类] 跨服龙城开启城门 创建者
    /// </summary>
    [Package(1965)]
    public partial class ReqNKFLCOpenCellarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNKFLCOpenCellar();
        }
    }


    /// <summary>
    ///  [响应类]跨服龙城开启城门
    /// </summary>
    public partial class ResNKFLCOpenCellar: Packet 
    {
        /// <summary>
        /// 战区分区ID
        /// </summary>
        public uint GroupID;
        /// <summary>
        /// 帮派名称
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 玩家名称
        /// </summary>
        public string PlayerName;
        /// <summary>
        /// 城门ID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResNKFLCOpenCellar pkg = new ResNKFLCOpenCellar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GroupID = GroupID;
            pkg.GuildName = GuildName;
            pkg.PlayerName = PlayerName;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(GroupID);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUTF(PlayerName);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                GroupID = oByteArray.ReadUInt();
                GuildName = oByteArray.ReadUTF();
                PlayerName = oByteArray.ReadUTF();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResNKFLCOpenCellar()
		{
			PacketID = 1966;
		}
    }

    /// <summary>
    ///  [响应类] 跨服龙城开启城门 创建者
    /// </summary>
    [Package(1966)]
    public partial class ResNKFLCOpenCellarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNKFLCOpenCellar();
        }
    }


    /// <summary>
    ///  [请求类]移除并刷新跨服龙城怪物
    /// </summary>
    public partial class ReqDelKFLCMonster: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图刷怪表TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqDelKFLCMonster pkg = new ReqDelKFLCMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqDelKFLCMonster()
		{
			PacketID = 1967;
		}
    }

    /// <summary>
    ///  [请求类] 移除并刷新跨服龙城怪物 创建者
    /// </summary>
    [Package(1967)]
    public partial class ReqDelKFLCMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDelKFLCMonster();
        }
    }


    /// <summary>
    ///  [响应类]移除并刷新跨服龙城怪物
    /// </summary>
    public partial class ResDelKFLCMonster: Packet 
    {

        public override Packet Clone()
        {
            ResDelKFLCMonster pkg = new ResDelKFLCMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResDelKFLCMonster()
		{
			PacketID = 1968;
		}
    }

    /// <summary>
    ///  [响应类] 移除并刷新跨服龙城怪物 创建者
    /// </summary>
    [Package(1968)]
    public partial class ResDelKFLCMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDelKFLCMonster();
        }
    }


    /// <summary>
    ///  [请求类]龙城归属变更
    /// </summary>
    public partial class ReqKFLCOwnerChange: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong LongChengOwner;

        public override Packet Clone()
        {
            ReqKFLCOwnerChange pkg = new ReqKFLCOwnerChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.LongChengOwner = LongChengOwner;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(LongChengOwner);
            }
            else
            {
                LongChengOwner = oByteArray.ReadUInt64();
            }
        }
		public ReqKFLCOwnerChange()
		{
			PacketID = 1969;
		}
    }

    /// <summary>
    ///  [请求类] 龙城归属变更 创建者
    /// </summary>
    [Package(1969)]
    public partial class ReqKFLCOwnerChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKFLCOwnerChange();
        }
    }


    /// <summary>
    ///  [响应类]龙城归属变更
    /// </summary>
    public partial class ResKFLCOwnerChange: Packet 
    {

        public override Packet Clone()
        {
            ResKFLCOwnerChange pkg = new ResKFLCOwnerChange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResKFLCOwnerChange()
		{
			PacketID = 1970;
		}
    }

    /// <summary>
    ///  [响应类] 龙城归属变更 创建者
    /// </summary>
    [Package(1970)]
    public partial class ResKFLCOwnerChangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKFLCOwnerChange();
        }
    }


    /// <summary>
    ///  [请求类]更新直冲皇宫时间
    /// </summary>
    public partial class ReqUpdateRushImperial: Packet 
    {
        /// <summary>
        /// 战区分区ID
        /// </summary>
        public uint GroupID;
        /// <summary>
        /// 魔龙击杀时间
        /// </summary>
        public uint Time;

        public override Packet Clone()
        {
            ReqUpdateRushImperial pkg = new ReqUpdateRushImperial();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GroupID = GroupID;
            pkg.Time = Time;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(GroupID);
                oByteArray.WriteUInt(Time);
            }
            else
            {
                GroupID = oByteArray.ReadUInt();
                Time = oByteArray.ReadUInt();
            }
        }
		public ReqUpdateRushImperial()
		{
			PacketID = 1971;
		}
    }

    /// <summary>
    ///  [请求类] 更新直冲皇宫时间 创建者
    /// </summary>
    [Package(1971)]
    public partial class ReqUpdateRushImperialCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateRushImperial();
        }
    }


    /// <summary>
    ///  [响应类]更新直冲皇宫时间
    /// </summary>
    public partial class ResUpdateRushImperial: Packet 
    {

        public override Packet Clone()
        {
            ResUpdateRushImperial pkg = new ResUpdateRushImperial();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdateRushImperial()
		{
			PacketID = 1972;
		}
    }

    /// <summary>
    ///  [响应类] 更新直冲皇宫时间 创建者
    /// </summary>
    [Package(1972)]
    public partial class ResUpdateRushImperialCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateRushImperial();
        }
    }


    /// <summary>
    ///  [请求类]刷新魔龙
    /// </summary>
    public partial class ReqReflashKFLCMonster: Packet 
    {
        /// <summary>
        /// 战区分区ID
        /// </summary>
        public uint GroupID;

        public override Packet Clone()
        {
            ReqReflashKFLCMonster pkg = new ReqReflashKFLCMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GroupID = GroupID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(GroupID);
            }
            else
            {
                GroupID = oByteArray.ReadUInt();
            }
        }
		public ReqReflashKFLCMonster()
		{
			PacketID = 1973;
		}
    }

    /// <summary>
    ///  [请求类] 刷新魔龙 创建者
    /// </summary>
    [Package(1973)]
    public partial class ReqReflashKFLCMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqReflashKFLCMonster();
        }
    }


    /// <summary>
    ///  [响应类]刷新魔龙
    /// </summary>
    public partial class ResReflashKFLCMonster: Packet 
    {

        public override Packet Clone()
        {
            ResReflashKFLCMonster pkg = new ResReflashKFLCMonster();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResReflashKFLCMonster()
		{
			PacketID = 1974;
		}
    }

    /// <summary>
    ///  [响应类] 刷新魔龙 创建者
    /// </summary>
    [Package(1974)]
    public partial class ResReflashKFLCMonsterCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResReflashKFLCMonster();
        }
    }


    /// <summary>
    ///  [请求类]跨服龙城直冲皇宫技能信息
    /// </summary>
    public partial class ReqUpdateKFLCSkillInfo: Packet 
    {
        /// <summary>
        /// 1为进入cd2为可使用
        /// </summary>
        public uint OperType;
        /// <summary>
        /// 技能持续到的时间
        /// </summary>
        public uint TimeStamp;

        public override Packet Clone()
        {
            ReqUpdateKFLCSkillInfo pkg = new ReqUpdateKFLCSkillInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OperType = OperType;
            pkg.TimeStamp = TimeStamp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(OperType);
                oByteArray.WriteUInt(TimeStamp);
            }
            else
            {
                OperType = oByteArray.ReadUInt();
                TimeStamp = oByteArray.ReadUInt();
            }
        }
		public ReqUpdateKFLCSkillInfo()
		{
			PacketID = 1975;
		}
    }

    /// <summary>
    ///  [请求类] 跨服龙城直冲皇宫技能信息 创建者
    /// </summary>
    [Package(1975)]
    public partial class ReqUpdateKFLCSkillInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateKFLCSkillInfo();
        }
    }


    /// <summary>
    ///  [响应类]跨服龙城直冲皇宫技能信息
    /// </summary>
    public partial class ResUpdateKFLCSkillInfo: Packet 
    {
        /// <summary>
        /// 1为进入cd2为可使用
        /// </summary>
        public uint OperType;
        /// <summary>
        /// 技能持续到的时间
        /// </summary>
        public uint TimeStamp;

        public override Packet Clone()
        {
            ResUpdateKFLCSkillInfo pkg = new ResUpdateKFLCSkillInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OperType = OperType;
            pkg.TimeStamp = TimeStamp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(OperType);
                oByteArray.WriteUInt(TimeStamp);
            }
            else
            {
                OperType = oByteArray.ReadUInt();
                TimeStamp = oByteArray.ReadUInt();
            }
        }
		public ResUpdateKFLCSkillInfo()
		{
			PacketID = 1976;
		}
    }

    /// <summary>
    ///  [响应类] 跨服龙城直冲皇宫技能信息 创建者
    /// </summary>
    [Package(1976)]
    public partial class ResUpdateKFLCSkillInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateKFLCSkillInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新魔龙奖励数量
    /// </summary>
    public partial class ReqUpdateKFLCMoLongRewards: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateKFLCMoLongRewards pkg = new ReqUpdateKFLCMoLongRewards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateKFLCMoLongRewards()
		{
			PacketID = 1977;
		}
    }

    /// <summary>
    ///  [请求类] 更新魔龙奖励数量 创建者
    /// </summary>
    [Package(1977)]
    public partial class ReqUpdateKFLCMoLongRewardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateKFLCMoLongRewards();
        }
    }


    /// <summary>
    ///  [响应类]更新魔龙奖励数量
    /// </summary>
    public partial class ResUpdateKFLCMoLongRewards: Packet 
    {
        /// <summary>
        /// 奖励数量
        /// </summary>
        public uint rewards;

        public override Packet Clone()
        {
            ResUpdateKFLCMoLongRewards pkg = new ResUpdateKFLCMoLongRewards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.rewards = rewards;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(rewards);
            }
            else
            {
                rewards = oByteArray.ReadUInt();
            }
        }
		public ResUpdateKFLCMoLongRewards()
		{
			PacketID = 1978;
		}
    }

    /// <summary>
    ///  [响应类] 更新魔龙奖励数量 创建者
    /// </summary>
    [Package(1978)]
    public partial class ResUpdateKFLCMoLongRewardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateKFLCMoLongRewards();
        }
    }


    /// <summary>
    ///  [请求类]通知地图服更新跨服龙城魔龙奖励
    /// </summary>
    public partial class ReqNKFLCMoLongRewards: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 魔龙奖励
        /// </summary>
        public uint DonationNum;
        /// <summary>
        /// 副本ID
        /// </summary>
        public ulong DungeonGuid;

        public override Packet Clone()
        {
            ReqNKFLCMoLongRewards pkg = new ReqNKFLCMoLongRewards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.DonationNum = DonationNum;
            pkg.DungeonGuid = DungeonGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(DonationNum);
                oByteArray.WriteUInt64(DungeonGuid);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                DonationNum = oByteArray.ReadUInt();
                DungeonGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqNKFLCMoLongRewards()
		{
			PacketID = 1979;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图服更新跨服龙城魔龙奖励 创建者
    /// </summary>
    [Package(1979)]
    public partial class ReqNKFLCMoLongRewardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNKFLCMoLongRewards();
        }
    }


    /// <summary>
    ///  [响应类]通知地图服更新跨服龙城魔龙奖励
    /// </summary>
    public partial class ResNKFLCMoLongRewards: Packet 
    {

        public override Packet Clone()
        {
            ResNKFLCMoLongRewards pkg = new ResNKFLCMoLongRewards();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNKFLCMoLongRewards()
		{
			PacketID = 1980;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图服更新跨服龙城魔龙奖励 创建者
    /// </summary>
    [Package(1980)]
    public partial class ResNKFLCMoLongRewardsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNKFLCMoLongRewards();
        }
    }


    /// <summary>
    ///  [请求类]不在线改玩家名(GM)
    /// </summary>
    public partial class ReqOfflineChangeName: Packet 
    {

        public override Packet Clone()
        {
            ReqOfflineChangeName pkg = new ReqOfflineChangeName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqOfflineChangeName()
		{
			PacketID = 1981;
		}
    }

    /// <summary>
    ///  [请求类] 不在线改玩家名(GM) 创建者
    /// </summary>
    [Package(1981)]
    public partial class ReqOfflineChangeNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqOfflineChangeName();
        }
    }


    /// <summary>
    ///  [响应类]不在线改玩家名(GM)
    /// </summary>
    public partial class ResOfflineChangeName: Packet 
    {
        /// <summary>
        /// 玩家唯一ID
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 新名字
        /// </summary>
        public string NewName;

        public override Packet Clone()
        {
            ResOfflineChangeName pkg = new ResOfflineChangeName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.NewName = NewName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUTF(NewName);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                NewName = oByteArray.ReadUTF();
            }
        }
		public ResOfflineChangeName()
		{
			PacketID = 1982;
		}
    }

    /// <summary>
    ///  [响应类] 不在线改玩家名(GM) 创建者
    /// </summary>
    [Package(1982)]
    public partial class ResOfflineChangeNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResOfflineChangeName();
        }
    }


    /// <summary>
    ///  [请求类]实名验证成功通知
    /// </summary>
    public partial class ReqRealVerification: Packet 
    {
        /// <summary>
        /// 实名状态0:未实名;1:已实名且已成年;2:已实名但未成年;
        /// </summary>
        public uint Indulgence;
        /// <summary>
        /// 玩家ID签名时间
        /// </summary>
        public uint PlayerIDSignTime;
        /// <summary>
        /// 玩家ID校验串
        /// </summary>
        public string PlayerIDSignCode;

        public override Packet Clone()
        {
            ReqRealVerification pkg = new ReqRealVerification();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Indulgence = Indulgence;
            pkg.PlayerIDSignTime = PlayerIDSignTime;
            pkg.PlayerIDSignCode = PlayerIDSignCode;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Indulgence);
                oByteArray.WriteUInt(PlayerIDSignTime);
                oByteArray.WriteUTF(PlayerIDSignCode);
            }
            else
            {
                Indulgence = oByteArray.ReadUInt();
                PlayerIDSignTime = oByteArray.ReadUInt();
                PlayerIDSignCode = oByteArray.ReadUTF();
            }
        }
		public ReqRealVerification()
		{
			PacketID = 1983;
		}
    }

    /// <summary>
    ///  [请求类] 实名验证成功通知 创建者
    /// </summary>
    [Package(1983)]
    public partial class ReqRealVerificationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqRealVerification();
        }
    }


    /// <summary>
    ///  [响应类]实名验证成功通知
    /// </summary>
    public partial class ResRealVerification: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResRealVerification pkg = new ResRealVerification();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResRealVerification()
		{
			PacketID = 1984;
		}
    }

    /// <summary>
    ///  [响应类] 实名验证成功通知 创建者
    /// </summary>
    [Package(1984)]
    public partial class ResRealVerificationCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResRealVerification();
        }
    }


    /// <summary>
    ///  [请求类]帮派改名
    /// </summary>
    public partial class ReqGuildChangeName: Packet 
    {
        /// <summary>
        /// 新帮派名
        /// </summary>
        public string NewName;
        /// <summary>
        /// 改名卡位置
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ReqGuildChangeName pkg = new ReqGuildChangeName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.NewName = NewName;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(NewName);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                NewName = oByteArray.ReadUTF();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ReqGuildChangeName()
		{
			PacketID = 1985;
		}
    }

    /// <summary>
    ///  [请求类] 帮派改名 创建者
    /// </summary>
    [Package(1985)]
    public partial class ReqGuildChangeNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGuildChangeName();
        }
    }


    /// <summary>
    ///  [响应类]帮派改名
    /// </summary>
    public partial class ResGuildChangeName: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 帮派名
        /// </summary>
        public string NewName;
        /// <summary>
        /// 改名卡位置
        /// </summary>
        public uint ItemPos;

        public override Packet Clone()
        {
            ResGuildChangeName pkg = new ResGuildChangeName();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.NewName = NewName;
            pkg.ItemPos = ItemPos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUTF(NewName);
                oByteArray.WriteUInt(ItemPos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                NewName = oByteArray.ReadUTF();
                ItemPos = oByteArray.ReadUInt();
            }
        }
		public ResGuildChangeName()
		{
			PacketID = 1986;
		}
    }

    /// <summary>
    ///  [响应类] 帮派改名 创建者
    /// </summary>
    [Package(1986)]
    public partial class ResGuildChangeNameCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGuildChangeName();
        }
    }


    /// <summary>
    ///  [请求类]用于记录gm平台发过来的禁止开启节日庆典活动的时间
    /// </summary>
    public partial class ReqForBidCelActTime: Packet 
    {
        /// <summary>
        /// 禁止庆典活动开启的时间
        /// </summary>
        public uint BeginTime;
        /// <summary>
        /// 禁止庆典活动结束的时间
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ReqForBidCelActTime pkg = new ReqForBidCelActTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BeginTime = BeginTime;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(BeginTime);
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                BeginTime = oByteArray.ReadUInt();
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ReqForBidCelActTime()
		{
			PacketID = 1987;
		}
    }

    /// <summary>
    ///  [请求类] 用于记录gm平台发过来的禁止开启节日庆典活动的时间 创建者
    /// </summary>
    [Package(1987)]
    public partial class ReqForBidCelActTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqForBidCelActTime();
        }
    }


    /// <summary>
    ///  [响应类]用于记录gm平台发过来的禁止开启节日庆典活动的时间
    /// </summary>
    public partial class ResForBidCelActTime: Packet 
    {

        public override Packet Clone()
        {
            ResForBidCelActTime pkg = new ResForBidCelActTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResForBidCelActTime()
		{
			PacketID = 1988;
		}
    }

    /// <summary>
    ///  [响应类] 用于记录gm平台发过来的禁止开启节日庆典活动的时间 创建者
    /// </summary>
    [Package(1988)]
    public partial class ResForBidCelActTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResForBidCelActTime();
        }
    }


    /// <summary>
    ///  [请求类]龙城击杀数量同步到地图服
    /// </summary>
    public partial class ReqNKFLCKillNum: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 副本ID
        /// </summary>
        public ulong DungeonGuid;
        /// <summary>
        /// 玩家guid
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 击杀数量
        /// </summary>
        public uint Num;

        public override Packet Clone()
        {
            ReqNKFLCKillNum pkg = new ReqNKFLCKillNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.DungeonGuid = DungeonGuid;
            pkg.PlayerGuid = PlayerGuid;
            pkg.Num = Num;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(DungeonGuid);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(Num);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                DungeonGuid = oByteArray.ReadUInt64();
                PlayerGuid = oByteArray.ReadUInt64();
                Num = oByteArray.ReadUInt();
            }
        }
		public ReqNKFLCKillNum()
		{
			PacketID = 1989;
		}
    }

    /// <summary>
    ///  [请求类] 龙城击杀数量同步到地图服 创建者
    /// </summary>
    [Package(1989)]
    public partial class ReqNKFLCKillNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNKFLCKillNum();
        }
    }


    /// <summary>
    ///  [响应类]龙城击杀数量同步到地图服
    /// </summary>
    public partial class ResNKFLCKillNum: Packet 
    {

        public override Packet Clone()
        {
            ResNKFLCKillNum pkg = new ResNKFLCKillNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNKFLCKillNum()
		{
			PacketID = 1990;
		}
    }

    /// <summary>
    ///  [响应类] 龙城击杀数量同步到地图服 创建者
    /// </summary>
    [Package(1990)]
    public partial class ResNKFLCKillNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNKFLCKillNum();
        }
    }


    /// <summary>
    ///  [请求类]领取地狱打怪增加的经验池，必须用n倍卡
    /// </summary>
    public partial class ReqPurgatoryExp: Packet 
    {
        /// <summary>
        /// 领取经验时，用n倍卡道具TID
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqPurgatoryExp pkg = new ReqPurgatoryExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqPurgatoryExp()
		{
			PacketID = 1991;
		}
    }

    /// <summary>
    ///  [请求类] 领取地狱打怪增加的经验池，必须用n倍卡 创建者
    /// </summary>
    [Package(1991)]
    public partial class ReqPurgatoryExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqPurgatoryExp();
        }
    }


    /// <summary>
    ///  [响应类]领取地狱打怪增加的经验池，必须用n倍卡
    /// </summary>
    public partial class ResPurgatoryExp: Packet 
    {

        public override Packet Clone()
        {
            ResPurgatoryExp pkg = new ResPurgatoryExp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResPurgatoryExp()
		{
			PacketID = 1992;
		}
    }

    /// <summary>
    ///  [响应类] 领取地狱打怪增加的经验池，必须用n倍卡 创建者
    /// </summary>
    [Package(1992)]
    public partial class ResPurgatoryExpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResPurgatoryExp();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战模块初始化
    /// </summary>
    public partial class ReqCSNationalInitModuleData: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalInitModuleData pkg = new ReqCSNationalInitModuleData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalInitModuleData()
		{
			PacketID = 1993;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战模块初始化 创建者
    /// </summary>
    [Package(1993)]
    public partial class ReqCSNationalInitModuleDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalInitModuleData();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战模块初始化
    /// </summary>
    public partial class ResCSNationalInitModuleData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<CSNationalPlayerData> Datas = new List<CSNationalPlayerData>();

        public override Packet Clone()
        {
            ResCSNationalInitModuleData pkg = new ResCSNationalInitModuleData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSNationalPlayerData item in Datas)
            {
                pkg.Datas.Add(item.Clone() as CSNationalPlayerData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Datas.Count);
                for (int i = 0; i < Datas.Count; i++)
                {
                    Datas[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int DatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DatasCount; i++)
                {
                    CSNationalPlayerData obj = new CSNationalPlayerData();
                    obj.Serializtion(oByteArray, bSerialize);
                    Datas.Add(obj);
                }
            }
        }
		public ResCSNationalInitModuleData()
		{
			PacketID = 1994;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战模块初始化 创建者
    /// </summary>
    [Package(1994)]
    public partial class ResCSNationalInitModuleDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalInitModuleData();
        }
    }


    /// <summary>
    ///  [请求类]国战粮草购买
    /// </summary>
    public partial class ReqCSNationalBuyProvision: Packet 
    {
        /// <summary>
        /// 商品TID(粮草)
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqCSNationalBuyProvision pkg = new ReqCSNationalBuyProvision();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqCSNationalBuyProvision()
		{
			PacketID = 1995;
		}
    }

    /// <summary>
    ///  [请求类] 国战粮草购买 创建者
    /// </summary>
    [Package(1995)]
    public partial class ReqCSNationalBuyProvisionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalBuyProvision();
        }
    }


    /// <summary>
    ///  [响应类]国战粮草购买
    /// </summary>
    public partial class ResCSNationalBuyProvision: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 商品TID(粮草)
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ResCSNationalBuyProvision pkg = new ResCSNationalBuyProvision();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalBuyProvision()
		{
			PacketID = 1996;
		}
    }

    /// <summary>
    ///  [响应类] 国战粮草购买 创建者
    /// </summary>
    [Package(1996)]
    public partial class ResCSNationalBuyProvisionCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalBuyProvision();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战周期结束
    /// </summary>
    public partial class ReqCSNationalCycleEnd: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalCycleEnd pkg = new ReqCSNationalCycleEnd();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalCycleEnd()
		{
			PacketID = 1997;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战周期结束 创建者
    /// </summary>
    [Package(1997)]
    public partial class ReqCSNationalCycleEndCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalCycleEnd();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战周期结束
    /// </summary>
    public partial class ResCSNationalCycleEnd: Packet 
    {

        public override Packet Clone()
        {
            ResCSNationalCycleEnd pkg = new ResCSNationalCycleEnd();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResCSNationalCycleEnd()
		{
			PacketID = 1998;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战周期结束 创建者
    /// </summary>
    [Package(1998)]
    public partial class ResCSNationalCycleEndCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalCycleEnd();
        }
    }


    /// <summary>
    ///  [请求类]国战通知周期结束时间
    /// </summary>
    public partial class ReqCSNationalNoticeEndTime: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalNoticeEndTime pkg = new ReqCSNationalNoticeEndTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalNoticeEndTime()
		{
			PacketID = 1999;
		}
    }

    /// <summary>
    ///  [请求类] 国战通知周期结束时间 创建者
    /// </summary>
    [Package(1999)]
    public partial class ReqCSNationalNoticeEndTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalNoticeEndTime();
        }
    }


    /// <summary>
    ///  [响应类]国战通知周期结束时间
    /// </summary>
    public partial class ResCSNationalNoticeEndTime: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint EndTime;

        public override Packet Clone()
        {
            ResCSNationalNoticeEndTime pkg = new ResCSNationalNoticeEndTime();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.EndTime = EndTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(EndTime);
            }
            else
            {
                EndTime = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalNoticeEndTime()
		{
			PacketID = 2000;
		}
    }

    /// <summary>
    ///  [响应类] 国战通知周期结束时间 创建者
    /// </summary>
    [Package(2000)]
    public partial class ResCSNationalNoticeEndTimeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalNoticeEndTime();
        }
    }


    /// <summary>
    ///  [请求类]国战刷新玩家信息
    /// </summary>
    public partial class ReqCSNationalUpdatePlayerData: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalUpdatePlayerData pkg = new ReqCSNationalUpdatePlayerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalUpdatePlayerData()
		{
			PacketID = 2001;
		}
    }

    /// <summary>
    ///  [请求类] 国战刷新玩家信息 创建者
    /// </summary>
    [Package(2001)]
    public partial class ReqCSNationalUpdatePlayerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalUpdatePlayerData();
        }
    }


    /// <summary>
    ///  [响应类]国战刷新玩家信息
    /// </summary>
    public partial class ResCSNationalUpdatePlayerData: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public CSNationalPlayerData PlayerData = new CSNationalPlayerData();

        public override Packet Clone()
        {
            ResCSNationalUpdatePlayerData pkg = new ResCSNationalUpdatePlayerData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerData = PlayerData.Clone() as CSNationalPlayerData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayerData.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayerData.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResCSNationalUpdatePlayerData()
		{
			PacketID = 2002;
		}
    }

    /// <summary>
    ///  [响应类] 国战刷新玩家信息 创建者
    /// </summary>
    [Package(2002)]
    public partial class ResCSNationalUpdatePlayerDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalUpdatePlayerData();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战排行信息(玩家/行会)
    /// </summary>
    public partial class ReqCSNationalRankInfo: Packet 
    {
        /// <summary>
        /// 1：玩家排名  2：行会排名
        /// </summary>
        public uint RankType;

        public override Packet Clone()
        {
            ReqCSNationalRankInfo pkg = new ReqCSNationalRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RankType = RankType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(RankType);
            }
            else
            {
                RankType = oByteArray.ReadUInt();
            }
        }
		public ReqCSNationalRankInfo()
		{
			PacketID = 2003;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战排行信息(玩家/行会) 创建者
    /// </summary>
    [Package(2003)]
    public partial class ReqCSNationalRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战排行信息(玩家/行会)
    /// </summary>
    public partial class ResCSNationalRankInfo: Packet 
    {
        /// <summary>
        /// 1：玩家排名  2：行会排名
        /// </summary>
        public uint RankType;
        /// <summary>
        /// 
        /// </summary>
        public List<CSNationalRankInfo> Datas = new List<CSNationalRankInfo>();
        /// <summary>
        /// 阵营类型，仅行会排名有效
        /// </summary>
        public uint CampType;

        public override Packet Clone()
        {
            ResCSNationalRankInfo pkg = new ResCSNationalRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RankType = RankType;
            foreach (CSNationalRankInfo item in Datas)
            {
                pkg.Datas.Add(item.Clone() as CSNationalRankInfo);
            }
            pkg.CampType = CampType;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(RankType);
                oByteArray.WriteUShort((ushort)Datas.Count);
                for (int i = 0; i < Datas.Count; i++)
                {
                    Datas[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(CampType);
            }
            else
            {
                RankType = oByteArray.ReadUInt();
                int DatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DatasCount; i++)
                {
                    CSNationalRankInfo obj = new CSNationalRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Datas.Add(obj);
                }
                CampType = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalRankInfo()
		{
			PacketID = 2004;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战排行信息(玩家/行会) 创建者
    /// </summary>
    [Package(2004)]
    public partial class ResCSNationalRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战报名
    /// </summary>
    public partial class ReqCSNationalEnroll: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public uint WorldPort;
        /// <summary>
        /// 活跃人数
        /// </summary>
        public uint PlayerCount;
        /// <summary>
        /// 区服id
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 帮派唯一ID
        /// </summary>
        public List<ulong> GuildGuids = new List<ulong>();
        /// <summary>
        /// 开服时间
        /// </summary>
        public uint OpenSeconds;

        public override Packet Clone()
        {
            ReqCSNationalEnroll pkg = new ReqCSNationalEnroll();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            pkg.PlayerCount = PlayerCount;
            pkg.ServerID = ServerID;
            foreach (var item in GuildGuids)
            {
                pkg.GuildGuids.Add(item);
            }
            pkg.OpenSeconds = OpenSeconds;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
                oByteArray.WriteUInt(PlayerCount);
                oByteArray.WriteUInt(ServerID);
                for (int i = 0; i < GuildGuids.Count; i++)
                {
                      oByteArray.WriteUInt64(GuildGuids[i]);
                }
                oByteArray.WriteUInt(OpenSeconds);
            }
            else
            {
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
                PlayerCount = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                int GuildGuidsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < GuildGuidsCount; i++)
                {
                    GuildGuids.Add(oByteArray.ReadUInt64());
                }
                OpenSeconds = oByteArray.ReadUInt();
            }
        }
		public ReqCSNationalEnroll()
		{
			PacketID = 2005;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战报名 创建者
    /// </summary>
    [Package(2005)]
    public partial class ReqCSNationalEnrollCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalEnroll();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战报名
    /// </summary>
    public partial class ResCSNationalEnroll: Packet 
    {

        public override Packet Clone()
        {
            ResCSNationalEnroll pkg = new ResCSNationalEnroll();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResCSNationalEnroll()
		{
			PacketID = 2006;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战报名 创建者
    /// </summary>
    [Package(2006)]
    public partial class ResCSNationalEnrollCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalEnroll();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战开始行军
    /// </summary>
    public partial class ReqCSNationalMarch: Packet 
    {
        /// <summary>
        /// 目的城池ID
        /// </summary>
        public uint TargetCity;
        /// <summary>
        /// 行军路径上的城池ID
        /// </summary>
        public List<uint> MarchPath = new List<uint>();

        public override Packet Clone()
        {
            ReqCSNationalMarch pkg = new ReqCSNationalMarch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetCity = TargetCity;
            foreach (var item in MarchPath)
            {
                pkg.MarchPath.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TargetCity);
                for (int i = 0; i < MarchPath.Count; i++)
                {
                      oByteArray.WriteUInt(MarchPath[i]);
                }
            }
            else
            {
                TargetCity = oByteArray.ReadUInt();
                int MarchPathCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MarchPathCount; i++)
                {
                    MarchPath.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqCSNationalMarch()
		{
			PacketID = 2007;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战开始行军 创建者
    /// </summary>
    [Package(2007)]
    public partial class ReqCSNationalMarchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalMarch();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战开始行军
    /// </summary>
    public partial class ResCSNationalMarch: Packet 
    {
        /// <summary>
        /// 目的城池ID
        /// </summary>
        public uint TargetCity;
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 行军路径上的城池ID
        /// </summary>
        public List<uint> MarchPath = new List<uint>();

        public override Packet Clone()
        {
            ResCSNationalMarch pkg = new ResCSNationalMarch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TargetCity = TargetCity;
            pkg.Result = Result;
            foreach (var item in MarchPath)
            {
                pkg.MarchPath.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TargetCity);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)MarchPath.Count);
                for (int i = 0; i < MarchPath.Count; i++)
                {
                    oByteArray.WriteUInt(MarchPath[i]);
                }
            }
            else
            {
                TargetCity = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
                int MarchPathCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MarchPathCount; i++)
                {
                    MarchPath.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResCSNationalMarch()
		{
			PacketID = 2008;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战开始行军 创建者
    /// </summary>
    [Package(2008)]
    public partial class ResCSNationalMarchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalMarch();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战弃城
    /// </summary>
    public partial class ReqCSNationalAbandonCity: Packet 
    {
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;

        public override Packet Clone()
        {
            ReqCSNationalAbandonCity pkg = new ReqCSNationalAbandonCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CityID = CityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CityID);
            }
            else
            {
                CityID = oByteArray.ReadUInt();
            }
        }
		public ReqCSNationalAbandonCity()
		{
			PacketID = 2009;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战弃城 创建者
    /// </summary>
    [Package(2009)]
    public partial class ReqCSNationalAbandonCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalAbandonCity();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战弃城
    /// </summary>
    public partial class ResCSNationalAbandonCity: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;

        public override Packet Clone()
        {
            ResCSNationalAbandonCity pkg = new ResCSNationalAbandonCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CityID = CityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(CityID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalAbandonCity()
		{
			PacketID = 2010;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战弃城 创建者
    /// </summary>
    [Package(2010)]
    public partial class ResCSNationalAbandonCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalAbandonCity();
        }
    }


    /// <summary>
    ///  [请求类]获取跨服国战城池信息
    /// </summary>
    public partial class ReqGetCSNationalCityInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqGetCSNationalCityInfo pkg = new ReqGetCSNationalCityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetCSNationalCityInfo()
		{
			PacketID = 2011;
		}
    }

    /// <summary>
    ///  [请求类] 获取跨服国战城池信息 创建者
    /// </summary>
    [Package(2011)]
    public partial class ReqGetCSNationalCityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetCSNationalCityInfo();
        }
    }


    /// <summary>
    ///  [响应类]获取跨服国战城池信息
    /// </summary>
    public partial class ResGetCSNationalCityInfo: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 城池信息
        /// </summary>
        public List<CSNationalCityData> CityInfo = new List<CSNationalCityData>();

        public override Packet Clone()
        {
            ResGetCSNationalCityInfo pkg = new ResGetCSNationalCityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (CSNationalCityData item in CityInfo)
            {
                pkg.CityInfo.Add(item.Clone() as CSNationalCityData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)CityInfo.Count);
                for (int i = 0; i < CityInfo.Count; i++)
                {
                    CityInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadUInt();
                int CityInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < CityInfoCount; i++)
                {
                    CSNationalCityData obj = new CSNationalCityData();
                    obj.Serializtion(oByteArray, bSerialize);
                    CityInfo.Add(obj);
                }
            }
        }
		public ResGetCSNationalCityInfo()
		{
			PacketID = 2012;
		}
    }

    /// <summary>
    ///  [响应类] 获取跨服国战城池信息 创建者
    /// </summary>
    [Package(2012)]
    public partial class ResGetCSNationalCityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetCSNationalCityInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战传送
    /// </summary>
    public partial class ReqCSNationalTransfer: Packet 
    {
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;

        public override Packet Clone()
        {
            ReqCSNationalTransfer pkg = new ReqCSNationalTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CityID = CityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CityID);
            }
            else
            {
                CityID = oByteArray.ReadUInt();
            }
        }
		public ReqCSNationalTransfer()
		{
			PacketID = 2013;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战传送 创建者
    /// </summary>
    [Package(2013)]
    public partial class ReqCSNationalTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalTransfer();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战传送
    /// </summary>
    public partial class ResCSNationalTransfer: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 0:左;1右
        /// </summary>
        public uint Pos;

        public override Packet Clone()
        {
            ResCSNationalTransfer pkg = new ResCSNationalTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CityID = CityID;
            pkg.Pos = Pos;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(Pos);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                Pos = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalTransfer()
		{
			PacketID = 2014;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战传送 创建者
    /// </summary>
    [Package(2014)]
    public partial class ResCSNationalTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalTransfer();
        }
    }


    /// <summary>
    ///  [请求类]通知国战帮派阵营更新
    /// </summary>
    public partial class ReqUpdateCSNationalCampInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateCSNationalCampInfo pkg = new ReqUpdateCSNationalCampInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateCSNationalCampInfo()
		{
			PacketID = 2015;
		}
    }

    /// <summary>
    ///  [请求类] 通知国战帮派阵营更新 创建者
    /// </summary>
    [Package(2015)]
    public partial class ReqUpdateCSNationalCampInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateCSNationalCampInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知国战帮派阵营更新
    /// </summary>
    public partial class ResUpdateCSNationalCampInfo: Packet 
    {
        /// <summary>
        /// 阵营
        /// </summary>
        public int Camp;
        /// <summary>
        /// 帮派唯一ID
        /// </summary>
        public ulong GuildGuid;

        public override Packet Clone()
        {
            ResUpdateCSNationalCampInfo pkg = new ResUpdateCSNationalCampInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Camp = Camp;
            pkg.GuildGuid = GuildGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Camp);
                oByteArray.WriteUInt64(GuildGuid);
            }
            else
            {
                Camp = oByteArray.ReadInt();
                GuildGuid = oByteArray.ReadUInt64();
            }
        }
		public ResUpdateCSNationalCampInfo()
		{
			PacketID = 2016;
		}
    }

    /// <summary>
    ///  [响应类] 通知国战帮派阵营更新 创建者
    /// </summary>
    [Package(2016)]
    public partial class ResUpdateCSNationalCampInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateCSNationalCampInfo();
        }
    }


    /// <summary>
    ///  [请求类]国战-国币商店购买
    /// </summary>
    public partial class ReqBuyNationalShopItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ReqBuyNationalShopItem pkg = new ReqBuyNationalShopItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ReqBuyNationalShopItem()
		{
			PacketID = 2017;
		}
    }

    /// <summary>
    ///  [请求类] 国战-国币商店购买 创建者
    /// </summary>
    [Package(2017)]
    public partial class ReqBuyNationalShopItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBuyNationalShopItem();
        }
    }


    /// <summary>
    ///  [响应类]国战-国币商店购买
    /// </summary>
    public partial class ResBuyNationalShopItem: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint TID;
        /// <summary>
        /// 
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ResBuyNationalShopItem pkg = new ResBuyNationalShopItem();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.TID = TID;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(TID);
                oByteArray.WriteUInt(Count);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                TID = oByteArray.ReadUInt();
                Count = oByteArray.ReadUInt();
            }
        }
		public ResBuyNationalShopItem()
		{
			PacketID = 2018;
		}
    }

    /// <summary>
    ///  [响应类] 国战-国币商店购买 创建者
    /// </summary>
    [Package(2018)]
    public partial class ResBuyNationalShopItemCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBuyNationalShopItem();
        }
    }


    /// <summary>
    ///  [请求类]国战-获取当前赛季世界境界等级
    /// </summary>
    public partial class ReqGetCurrSeasonJJLv: Packet 
    {

        public override Packet Clone()
        {
            ReqGetCurrSeasonJJLv pkg = new ReqGetCurrSeasonJJLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetCurrSeasonJJLv()
		{
			PacketID = 2019;
		}
    }

    /// <summary>
    ///  [请求类] 国战-获取当前赛季世界境界等级 创建者
    /// </summary>
    [Package(2019)]
    public partial class ReqGetCurrSeasonJJLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetCurrSeasonJJLv();
        }
    }


    /// <summary>
    ///  [响应类]国战-获取当前赛季世界境界等级
    /// </summary>
    public partial class ResGetCurrSeasonJJLv: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint CurrSeasonjjlv;

        public override Packet Clone()
        {
            ResGetCurrSeasonJJLv pkg = new ResGetCurrSeasonJJLv();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurrSeasonjjlv = CurrSeasonjjlv;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CurrSeasonjjlv);
            }
            else
            {
                CurrSeasonjjlv = oByteArray.ReadUInt();
            }
        }
		public ResGetCurrSeasonJJLv()
		{
			PacketID = 2020;
		}
    }

    /// <summary>
    ///  [响应类] 国战-获取当前赛季世界境界等级 创建者
    /// </summary>
    [Package(2020)]
    public partial class ResGetCurrSeasonJJLvCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetCurrSeasonJJLv();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战创建副本
    /// </summary>
    public partial class ReqCSNationalCreateDungeon: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 战区ID
        /// </summary>
        public uint CSZoneID;
        /// <summary>
        /// 城池所属阵营
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 城池所属帮派
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 城池帮派名
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 是否急行军创建
        /// </summary>
        public bool RapidMarch;

        public override Packet Clone()
        {
            ReqCSNationalCreateDungeon pkg = new ReqCSNationalCreateDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.CityID = CityID;
            pkg.CSZoneID = CSZoneID;
            pkg.Camp = Camp;
            pkg.GuildGuid = GuildGuid;
            pkg.GuildName = GuildName;
            pkg.RapidMarch = RapidMarch;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(CSZoneID);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteBoolean(RapidMarch);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                CSZoneID = oByteArray.ReadUInt();
                Camp = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
                GuildName = oByteArray.ReadUTF();
                RapidMarch = oByteArray.ReadBoolean();
            }
        }
		public ReqCSNationalCreateDungeon()
		{
			PacketID = 2021;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战创建副本 创建者
    /// </summary>
    [Package(2021)]
    public partial class ReqCSNationalCreateDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalCreateDungeon();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战创建副本
    /// </summary>
    public partial class ResCSNationalCreateDungeon: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 战区ID
        /// </summary>
        public uint CSZoneID;
        /// <summary>
        /// 地图唯一id
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 副本成功创建时间
        /// </summary>
        public uint CreateTime;

        public override Packet Clone()
        {
            ResCSNationalCreateDungeon pkg = new ResCSNationalCreateDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MapID = MapID;
            pkg.CityID = CityID;
            pkg.CSZoneID = CSZoneID;
            pkg.MapGuid = MapGuid;
            pkg.CreateTime = CreateTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(CSZoneID);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(CreateTime);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                CSZoneID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                CreateTime = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalCreateDungeon()
		{
			PacketID = 2022;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战创建副本 创建者
    /// </summary>
    [Package(2022)]
    public partial class ResCSNationalCreateDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalCreateDungeon();
        }
    }


    /// <summary>
    ///  [请求类]初始化国战城池信息(世界服)
    /// </summary>
    public partial class ReqInitCSNationalCityInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqInitCSNationalCityInfo pkg = new ReqInitCSNationalCityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqInitCSNationalCityInfo()
		{
			PacketID = 2023;
		}
    }

    /// <summary>
    ///  [请求类] 初始化国战城池信息(世界服) 创建者
    /// </summary>
    [Package(2023)]
    public partial class ReqInitCSNationalCityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqInitCSNationalCityInfo();
        }
    }


    /// <summary>
    ///  [响应类]初始化国战城池信息(世界服)
    /// </summary>
    public partial class ResInitCSNationalCityInfo: Packet 
    {
        /// <summary>
        /// 城池信息
        /// </summary>
        public List<CSNationalCityData> CityInfo = new List<CSNationalCityData>();

        public override Packet Clone()
        {
            ResInitCSNationalCityInfo pkg = new ResInitCSNationalCityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSNationalCityData item in CityInfo)
            {
                pkg.CityInfo.Add(item.Clone() as CSNationalCityData);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)CityInfo.Count);
                for (int i = 0; i < CityInfo.Count; i++)
                {
                    CityInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int CityInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < CityInfoCount; i++)
                {
                    CSNationalCityData obj = new CSNationalCityData();
                    obj.Serializtion(oByteArray, bSerialize);
                    CityInfo.Add(obj);
                }
            }
        }
		public ResInitCSNationalCityInfo()
		{
			PacketID = 2024;
		}
    }

    /// <summary>
    ///  [响应类] 初始化国战城池信息(世界服) 创建者
    /// </summary>
    [Package(2024)]
    public partial class ResInitCSNationalCityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResInitCSNationalCityInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服红包，排行榜
    /// </summary>
    public partial class ReqTransferRedbagRank: Packet 
    {
        /// <summary>
        /// 客户端申请几条
        /// </summary>
        public uint FetchCount;

        public override Packet Clone()
        {
            ReqTransferRedbagRank pkg = new ReqTransferRedbagRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FetchCount = FetchCount;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(FetchCount);
            }
            else
            {
                FetchCount = oByteArray.ReadUInt();
            }
        }
		public ReqTransferRedbagRank()
		{
			PacketID = 2025;
		}
    }

    /// <summary>
    ///  [请求类] 跨服红包，排行榜 创建者
    /// </summary>
    [Package(2025)]
    public partial class ReqTransferRedbagRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferRedbagRank();
        }
    }


    /// <summary>
    ///  [响应类]跨服红包，排行榜
    /// </summary>
    public partial class ResTransferRedbagRank: Packet 
    {
        /// <summary>
        /// 排行榜数据
        /// </summary>
        public List<UserTransferRedbag> UserRedbagRank = new List<UserTransferRedbag>();
        /// <summary>
        /// 我的名次
        /// </summary>
        public uint MyRedbagRank;
        /// <summary>
        /// 本轮抢红包剩余事件
        /// </summary>
        public uint RedbagRemainTime;

        public override Packet Clone()
        {
            ResTransferRedbagRank pkg = new ResTransferRedbagRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (UserTransferRedbag item in UserRedbagRank)
            {
                pkg.UserRedbagRank.Add(item.Clone() as UserTransferRedbag);
            }
            pkg.MyRedbagRank = MyRedbagRank;
            pkg.RedbagRemainTime = RedbagRemainTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)UserRedbagRank.Count);
                for (int i = 0; i < UserRedbagRank.Count; i++)
                {
                    UserRedbagRank[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(MyRedbagRank);
                oByteArray.WriteUInt(RedbagRemainTime);
            }
            else
            {
                int UserRedbagRankCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < UserRedbagRankCount; i++)
                {
                    UserTransferRedbag obj = new UserTransferRedbag();
                    obj.Serializtion(oByteArray, bSerialize);
                    UserRedbagRank.Add(obj);
                }
                MyRedbagRank = oByteArray.ReadUInt();
                RedbagRemainTime = oByteArray.ReadUInt();
            }
        }
		public ResTransferRedbagRank()
		{
			PacketID = 2026;
		}
    }

    /// <summary>
    ///  [响应类] 跨服红包，排行榜 创建者
    /// </summary>
    [Package(2026)]
    public partial class ResTransferRedbagRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferRedbagRank();
        }
    }


    /// <summary>
    ///  [请求类]跨服红包，领取
    /// </summary>
    public partial class ReqTransferRedbagOpen: Packet 
    {

        public override Packet Clone()
        {
            ReqTransferRedbagOpen pkg = new ReqTransferRedbagOpen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTransferRedbagOpen()
		{
			PacketID = 2027;
		}
    }

    /// <summary>
    ///  [请求类] 跨服红包，领取 创建者
    /// </summary>
    [Package(2027)]
    public partial class ReqTransferRedbagOpenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferRedbagOpen();
        }
    }


    /// <summary>
    ///  [响应类]跨服红包，领取
    /// </summary>
    public partial class ResTransferRedbagOpen: Packet 
    {
        /// <summary>
        /// 0成功，1失败
        /// </summary>
        public int Result;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 领取数量
        /// </summary>
        public uint MoneyNum;

        public override Packet Clone()
        {
            ResTransferRedbagOpen pkg = new ResTransferRedbagOpen();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MoneyType = MoneyType;
            pkg.MoneyNum = MoneyNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
                oByteArray.WriteInt(MoneyType);
                oByteArray.WriteUInt(MoneyNum);
            }
            else
            {
                Result = oByteArray.ReadInt();
                MoneyType = oByteArray.ReadInt();
                MoneyNum = oByteArray.ReadUInt();
            }
        }
		public ResTransferRedbagOpen()
		{
			PacketID = 2028;
		}
    }

    /// <summary>
    ///  [响应类] 跨服红包，领取 创建者
    /// </summary>
    [Package(2028)]
    public partial class ResTransferRedbagOpenCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferRedbagOpen();
        }
    }


    /// <summary>
    ///  [请求类]跨服红包，查询状态
    /// </summary>
    public partial class ReqTransferRedbagQuery: Packet 
    {

        public override Packet Clone()
        {
            ReqTransferRedbagQuery pkg = new ReqTransferRedbagQuery();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqTransferRedbagQuery()
		{
			PacketID = 2029;
		}
    }

    /// <summary>
    ///  [请求类] 跨服红包，查询状态 创建者
    /// </summary>
    [Package(2029)]
    public partial class ReqTransferRedbagQueryCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferRedbagQuery();
        }
    }


    /// <summary>
    ///  [响应类]跨服红包，查询状态
    /// </summary>
    public partial class ResTransferRedbagQuery: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Result;
        /// <summary>
        /// 本轮boss红包，我的领取状态(0未领取，1已领取)
        /// </summary>
        public int State;

        public override Packet Clone()
        {
            ResTransferRedbagQuery pkg = new ResTransferRedbagQuery();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
                oByteArray.WriteInt(State);
            }
            else
            {
                Result = oByteArray.ReadInt();
                State = oByteArray.ReadInt();
            }
        }
		public ResTransferRedbagQuery()
		{
			PacketID = 2030;
		}
    }

    /// <summary>
    ///  [响应类] 跨服红包，查询状态 创建者
    /// </summary>
    [Package(2030)]
    public partial class ResTransferRedbagQueryCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferRedbagQuery();
        }
    }


    /// <summary>
    ///  [请求类]初始化国战帮派数据
    /// </summary>
    public partial class ReqCSNationalGuildData: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalGuildData pkg = new ReqCSNationalGuildData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalGuildData()
		{
			PacketID = 2031;
		}
    }

    /// <summary>
    ///  [请求类] 初始化国战帮派数据 创建者
    /// </summary>
    [Package(2031)]
    public partial class ReqCSNationalGuildDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalGuildData();
        }
    }


    /// <summary>
    ///  [响应类]初始化国战帮派数据
    /// </summary>
    public partial class ResCSNationalGuildData: Packet 
    {
        /// <summary>
        /// 国战帮派数据
        /// </summary>
        public List<CSNationalGuildInfo> GuildInfo = new List<CSNationalGuildInfo>();

        public override Packet Clone()
        {
            ResCSNationalGuildData pkg = new ResCSNationalGuildData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSNationalGuildInfo item in GuildInfo)
            {
                pkg.GuildInfo.Add(item.Clone() as CSNationalGuildInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)GuildInfo.Count);
                for (int i = 0; i < GuildInfo.Count; i++)
                {
                    GuildInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int GuildInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < GuildInfoCount; i++)
                {
                    CSNationalGuildInfo obj = new CSNationalGuildInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    GuildInfo.Add(obj);
                }
            }
        }
		public ResCSNationalGuildData()
		{
			PacketID = 2032;
		}
    }

    /// <summary>
    ///  [响应类] 初始化国战帮派数据 创建者
    /// </summary>
    [Package(2032)]
    public partial class ResCSNationalGuildDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalGuildData();
        }
    }


    /// <summary>
    ///  [请求类]更新保存国战帮派信息
    /// </summary>
    public partial class ReqUpdateCSNationalGuildData: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateCSNationalGuildData pkg = new ReqUpdateCSNationalGuildData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateCSNationalGuildData()
		{
			PacketID = 2033;
		}
    }

    /// <summary>
    ///  [请求类] 更新保存国战帮派信息 创建者
    /// </summary>
    [Package(2033)]
    public partial class ReqUpdateCSNationalGuildDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateCSNationalGuildData();
        }
    }


    /// <summary>
    ///  [响应类]更新保存国战帮派信息
    /// </summary>
    public partial class ResUpdateCSNationalGuildData: Packet 
    {
        /// <summary>
        /// 帮派国战信息
        /// </summary>
        public CSNationalGuildInfo GuildInfo = new CSNationalGuildInfo();

        public override Packet Clone()
        {
            ResUpdateCSNationalGuildData pkg = new ResUpdateCSNationalGuildData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.GuildInfo = GuildInfo.Clone() as CSNationalGuildInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                GuildInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                GuildInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateCSNationalGuildData()
		{
			PacketID = 2034;
		}
    }

    /// <summary>
    ///  [响应类] 更新保存国战帮派信息 创建者
    /// </summary>
    [Package(2034)]
    public partial class ResUpdateCSNationalGuildDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateCSNationalGuildData();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战撤销行军
    /// </summary>
    public partial class ReqCSNationalCancelMarch: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalCancelMarch pkg = new ReqCSNationalCancelMarch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalCancelMarch()
		{
			PacketID = 2035;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战撤销行军 创建者
    /// </summary>
    [Package(2035)]
    public partial class ReqCSNationalCancelMarchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalCancelMarch();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战撤销行军
    /// </summary>
    public partial class ResCSNationalCancelMarch: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 被撤销的城池
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 回到的城池
        /// </summary>
        public uint LastCityID;

        public override Packet Clone()
        {
            ResCSNationalCancelMarch pkg = new ResCSNationalCancelMarch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CityID = CityID;
            pkg.LastCityID = LastCityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(LastCityID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                LastCityID = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalCancelMarch()
		{
			PacketID = 2036;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战撤销行军 创建者
    /// </summary>
    [Package(2036)]
    public partial class ResCSNationalCancelMarchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalCancelMarch();
        }
    }


    /// <summary>
    ///  [请求类]国战升级军备
    /// </summary>
    public partial class ReqCSNationalUpgradeArms: Packet 
    {
        /// <summary>
        /// 军备类型
        /// </summary>
        public uint ArmsType;
        /// <summary>
        /// 升级id
        /// </summary>
        public uint UpgradeID;
        /// <summary>
        /// 城池id
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 服务器所属阵营
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 战役类型
        /// </summary>
        public uint BattleType;
        /// <summary>
        /// 行会guid
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 玩家唯一id
        /// </summary>
        public ulong PlayerGuid;

        public override Packet Clone()
        {
            ReqCSNationalUpgradeArms pkg = new ReqCSNationalUpgradeArms();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ArmsType = ArmsType;
            pkg.UpgradeID = UpgradeID;
            pkg.CityID = CityID;
            pkg.Camp = Camp;
            pkg.BattleType = BattleType;
            pkg.GuildGuid = GuildGuid;
            pkg.PlayerGuid = PlayerGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ArmsType);
                oByteArray.WriteUInt(UpgradeID);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt(BattleType);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUInt64(PlayerGuid);
            }
            else
            {
                ArmsType = oByteArray.ReadUInt();
                UpgradeID = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                Camp = oByteArray.ReadUInt();
                BattleType = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
                PlayerGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqCSNationalUpgradeArms()
		{
			PacketID = 2037;
		}
    }

    /// <summary>
    ///  [请求类] 国战升级军备 创建者
    /// </summary>
    [Package(2037)]
    public partial class ReqCSNationalUpgradeArmsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalUpgradeArms();
        }
    }


    /// <summary>
    ///  [响应类]国战升级军备
    /// </summary>
    public partial class ResCSNationalUpgradeArms: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 城池id
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 军备类型
        /// </summary>
        public uint ArmsType;
        /// <summary>
        /// 军备等级
        /// </summary>
        public uint ArmsLv;
        /// <summary>
        /// 当前经验值
        /// </summary>
        public uint CurExp;
        /// <summary>
        /// 升级id
        /// </summary>
        public uint UpgradeID;

        public override Packet Clone()
        {
            ResCSNationalUpgradeArms pkg = new ResCSNationalUpgradeArms();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CityID = CityID;
            pkg.ArmsType = ArmsType;
            pkg.ArmsLv = ArmsLv;
            pkg.CurExp = CurExp;
            pkg.UpgradeID = UpgradeID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(ArmsType);
                oByteArray.WriteUInt(ArmsLv);
                oByteArray.WriteUInt(CurExp);
                oByteArray.WriteUInt(UpgradeID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                ArmsType = oByteArray.ReadUInt();
                ArmsLv = oByteArray.ReadUInt();
                CurExp = oByteArray.ReadUInt();
                UpgradeID = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalUpgradeArms()
		{
			PacketID = 2038;
		}
    }

    /// <summary>
    ///  [响应类] 国战升级军备 创建者
    /// </summary>
    [Package(2038)]
    public partial class ResCSNationalUpgradeArmsCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalUpgradeArms();
        }
    }


    /// <summary>
    ///  [请求类]国战军备信息
    /// </summary>
    public partial class ReqCSNationalArmsInfo: Packet 
    {
        /// <summary>
        /// 城池id
        /// </summary>
        public uint CityID;

        public override Packet Clone()
        {
            ReqCSNationalArmsInfo pkg = new ReqCSNationalArmsInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CityID = CityID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CityID);
            }
            else
            {
                CityID = oByteArray.ReadUInt();
            }
        }
		public ReqCSNationalArmsInfo()
		{
			PacketID = 2039;
		}
    }

    /// <summary>
    ///  [请求类] 国战军备信息 创建者
    /// </summary>
    [Package(2039)]
    public partial class ReqCSNationalArmsInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalArmsInfo();
        }
    }


    /// <summary>
    ///  [响应类]国战军备信息
    /// </summary>
    public partial class ResCSNationalArmsInfo: Packet 
    {
        /// <summary>
        /// 军备信息
        /// </summary>
        public List<ArmsInfo> Infos = new List<ArmsInfo>();
        /// <summary>
        /// 城池id
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 帮派guid
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 0:全部1:行会2:阵营
        /// </summary>
        public uint Type;

        public override Packet Clone()
        {
            ResCSNationalArmsInfo pkg = new ResCSNationalArmsInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ArmsInfo item in Infos)
            {
                pkg.Infos.Add(item.Clone() as ArmsInfo);
            }
            pkg.CityID = CityID;
            pkg.GuildGuid = GuildGuid;
            pkg.Result = Result;
            pkg.Type = Type;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Infos.Count);
                for (int i = 0; i < Infos.Count; i++)
                {
                    Infos[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(Type);
            }
            else
            {
                int InfosCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < InfosCount; i++)
                {
                    ArmsInfo obj = new ArmsInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Infos.Add(obj);
                }
                CityID = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
                Result = oByteArray.ReadUInt();
                Type = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalArmsInfo()
		{
			PacketID = 2040;
		}
    }

    /// <summary>
    ///  [响应类] 国战军备信息 创建者
    /// </summary>
    [Package(2040)]
    public partial class ResCSNationalArmsInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalArmsInfo();
        }
    }


    /// <summary>
    ///  [请求类]更新国战城池信息
    /// </summary>
    public partial class ReqEscalationCSNationalCity: Packet 
    {

        public override Packet Clone()
        {
            ReqEscalationCSNationalCity pkg = new ReqEscalationCSNationalCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEscalationCSNationalCity()
		{
			PacketID = 2041;
		}
    }

    /// <summary>
    ///  [请求类] 更新国战城池信息 创建者
    /// </summary>
    [Package(2041)]
    public partial class ReqEscalationCSNationalCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEscalationCSNationalCity();
        }
    }


    /// <summary>
    ///  [响应类]更新国战城池信息
    /// </summary>
    public partial class ResEscalationCSNationalCity: Packet 
    {
        /// <summary>
        /// 城池相关信息
        /// </summary>
        public CSNationalCityData CityInfo = new CSNationalCityData();
        /// <summary>
        /// 服务器ID
        /// </summary>
        public uint ServerID;

        public override Packet Clone()
        {
            ResEscalationCSNationalCity pkg = new ResEscalationCSNationalCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CityInfo = CityInfo.Clone() as CSNationalCityData;
            pkg.ServerID = ServerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                CityInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(ServerID);
            }
            else
            {
                CityInfo.Serializtion(oByteArray, bSerialize);
                ServerID = oByteArray.ReadUInt();
            }
        }
		public ResEscalationCSNationalCity()
		{
			PacketID = 2042;
		}
    }

    /// <summary>
    ///  [响应类] 更新国战城池信息 创建者
    /// </summary>
    [Package(2042)]
    public partial class ResEscalationCSNationalCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEscalationCSNationalCity();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服国战活动状态切换
    /// </summary>
    public partial class ReqNoticeCSNationalChangeState: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeCSNationalChangeState pkg = new ReqNoticeCSNationalChangeState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeCSNationalChangeState()
		{
			PacketID = 2043;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服国战活动状态切换 创建者
    /// </summary>
    [Package(2043)]
    public partial class ReqNoticeCSNationalChangeStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCSNationalChangeState();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服国战活动状态切换
    /// </summary>
    public partial class ResNoticeCSNationalChangeState: Packet 
    {
        /// <summary>
        /// 当前状态CSNationalStage
        /// </summary>
        public int State;
        /// <summary>
        /// 
        /// </summary>
        public int BeginTime;
        /// <summary>
        /// 
        /// </summary>
        public int OldState;

        public override Packet Clone()
        {
            ResNoticeCSNationalChangeState pkg = new ResNoticeCSNationalChangeState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.State = State;
            pkg.BeginTime = BeginTime;
            pkg.OldState = OldState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(State);
                oByteArray.WriteInt(BeginTime);
                oByteArray.WriteInt(OldState);
            }
            else
            {
                State = oByteArray.ReadInt();
                BeginTime = oByteArray.ReadInt();
                OldState = oByteArray.ReadInt();
            }
        }
		public ResNoticeCSNationalChangeState()
		{
			PacketID = 2044;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服国战活动状态切换 创建者
    /// </summary>
    [Package(2044)]
    public partial class ResNoticeCSNationalChangeStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCSNationalChangeState();
        }
    }


    /// <summary>
    ///  [请求类]通知城池归属
    /// </summary>
    public partial class ReqNationalNoticeCityOwner: Packet 
    {
        /// <summary>
        /// 副本唯一ID
        /// </summary>
        public uint DungeonID;
        /// <summary>
        /// 帮派唯一ID
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 战区ID
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 帮派名称
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ReqNationalNoticeCityOwner pkg = new ReqNationalNoticeCityOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonID = DungeonID;
            pkg.GuildGuid = GuildGuid;
            pkg.ZoneID = ZoneID;
            pkg.CityID = CityID;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DungeonID);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                DungeonID = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
                ZoneID = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ReqNationalNoticeCityOwner()
		{
			PacketID = 2045;
		}
    }

    /// <summary>
    ///  [请求类] 通知城池归属 创建者
    /// </summary>
    [Package(2045)]
    public partial class ReqNationalNoticeCityOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNationalNoticeCityOwner();
        }
    }


    /// <summary>
    ///  [响应类]通知城池归属
    /// </summary>
    public partial class ResNationalNoticeCityOwner: Packet 
    {

        public override Packet Clone()
        {
            ResNationalNoticeCityOwner pkg = new ResNationalNoticeCityOwner();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNationalNoticeCityOwner()
		{
			PacketID = 2046;
		}
    }

    /// <summary>
    ///  [响应类] 通知城池归属 创建者
    /// </summary>
    [Package(2046)]
    public partial class ResNationalNoticeCityOwnerCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNationalNoticeCityOwner();
        }
    }


    /// <summary>
    ///  [请求类]国战通知破门
    /// </summary>
    public partial class ReqNationalOpenDoor: Packet 
    {
        /// <summary>
        /// 副本唯一ID
        /// </summary>
        public uint DungeonID;
        /// <summary>
        /// 战区ID
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 破门位置0:左1:右(中立战0)
        /// </summary>
        public uint OpenDoorFlag;

        public override Packet Clone()
        {
            ReqNationalOpenDoor pkg = new ReqNationalOpenDoor();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.DungeonID = DungeonID;
            pkg.ZoneID = ZoneID;
            pkg.CityID = CityID;
            pkg.OpenDoorFlag = OpenDoorFlag;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(DungeonID);
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(OpenDoorFlag);
            }
            else
            {
                DungeonID = oByteArray.ReadUInt();
                ZoneID = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                OpenDoorFlag = oByteArray.ReadUInt();
            }
        }
		public ReqNationalOpenDoor()
		{
			PacketID = 2047;
		}
    }

    /// <summary>
    ///  [请求类] 国战通知破门 创建者
    /// </summary>
    [Package(2047)]
    public partial class ReqNationalOpenDoorCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNationalOpenDoor();
        }
    }


    /// <summary>
    ///  [响应类]国战通知破门
    /// </summary>
    public partial class ResNationalOpenDoor: Packet 
    {

        public override Packet Clone()
        {
            ResNationalOpenDoor pkg = new ResNationalOpenDoor();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResNationalOpenDoor()
		{
			PacketID = 2048;
		}
    }

    /// <summary>
    ///  [响应类] 国战通知破门 创建者
    /// </summary>
    [Package(2048)]
    public partial class ResNationalOpenDoorCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNationalOpenDoor();
        }
    }


    /// <summary>
    ///  [请求类]
    /// </summary>
    public partial class ReqTransferRedbagAward: Packet 
    {
        /// <summary>
        /// 活动ID
        /// </summary>
        public uint ActivityTID;
        /// <summary>
        /// 玩家guid
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 第一名奖励邮件TID
        /// </summary>
        public int AwardMailTID;
        /// <summary>
        /// 奖励类型
        /// </summary>
        public int AwardType;
        /// <summary>
        /// 道具奖励
        /// </summary>
        public string sAward;

        public override Packet Clone()
        {
            ReqTransferRedbagAward pkg = new ReqTransferRedbagAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityTID = ActivityTID;
            pkg.PlayerGuid = PlayerGuid;
            pkg.AwardMailTID = AwardMailTID;
            pkg.AwardType = AwardType;
            pkg.sAward = sAward;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityTID);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteInt(AwardMailTID);
                oByteArray.WriteInt(AwardType);
                oByteArray.WriteUTF(sAward);
            }
            else
            {
                ActivityTID = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
                AwardMailTID = oByteArray.ReadInt();
                AwardType = oByteArray.ReadInt();
                sAward = oByteArray.ReadUTF();
            }
        }
		public ReqTransferRedbagAward()
		{
			PacketID = 2049;
		}
    }

    /// <summary>
    ///  [请求类]  创建者
    /// </summary>
    [Package(2049)]
    public partial class ReqTransferRedbagAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqTransferRedbagAward();
        }
    }


    /// <summary>
    ///  [响应类]
    /// </summary>
    public partial class ResTransferRedbagAward: Packet 
    {

        public override Packet Clone()
        {
            ResTransferRedbagAward pkg = new ResTransferRedbagAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResTransferRedbagAward()
		{
			PacketID = 2050;
		}
    }

    /// <summary>
    ///  [响应类]  创建者
    /// </summary>
    [Package(2050)]
    public partial class ResTransferRedbagAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResTransferRedbagAward();
        }
    }


    /// <summary>
    ///  [请求类]上报行会列表
    /// </summary>
    public partial class ReqEscalationGuildList: Packet 
    {
        /// <summary>
        /// 行会列表
        /// </summary>
        public List<ulong> GuildGuids = new List<ulong>();
        /// <summary>
        /// 世界服ip
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 世界服端口
        /// </summary>
        public uint WorldPort;

        public override Packet Clone()
        {
            ReqEscalationGuildList pkg = new ReqEscalationGuildList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in GuildGuids)
            {
                pkg.GuildGuids.Add(item);
            }
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < GuildGuids.Count; i++)
                {
                      oByteArray.WriteUInt64(GuildGuids[i]);
                }
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
            }
            else
            {
                int GuildGuidsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < GuildGuidsCount; i++)
                {
                    GuildGuids.Add(oByteArray.ReadUInt64());
                }
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
            }
        }
		public ReqEscalationGuildList()
		{
			PacketID = 2051;
		}
    }

    /// <summary>
    ///  [请求类] 上报行会列表 创建者
    /// </summary>
    [Package(2051)]
    public partial class ReqEscalationGuildListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEscalationGuildList();
        }
    }


    /// <summary>
    ///  [响应类]上报行会列表
    /// </summary>
    public partial class ResEscalationGuildList: Packet 
    {

        public override Packet Clone()
        {
            ResEscalationGuildList pkg = new ResEscalationGuildList();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResEscalationGuildList()
		{
			PacketID = 2052;
		}
    }

    /// <summary>
    ///  [响应类] 上报行会列表 创建者
    /// </summary>
    [Package(2052)]
    public partial class ResEscalationGuildListCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEscalationGuildList();
        }
    }


    /// <summary>
    ///  [请求类]国战召唤战旗车
    /// </summary>
    public partial class ReqNationalSpawZhanQiCar: Packet 
    {
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// NPCID
        /// </summary>
        public uint NpcID;

        public override Packet Clone()
        {
            ReqNationalSpawZhanQiCar pkg = new ReqNationalSpawZhanQiCar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CityID = CityID;
            pkg.NpcID = NpcID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(NpcID);
            }
            else
            {
                CityID = oByteArray.ReadUInt();
                NpcID = oByteArray.ReadUInt();
            }
        }
		public ReqNationalSpawZhanQiCar()
		{
			PacketID = 2053;
		}
    }

    /// <summary>
    ///  [请求类] 国战召唤战旗车 创建者
    /// </summary>
    [Package(2053)]
    public partial class ReqNationalSpawZhanQiCarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNationalSpawZhanQiCar();
        }
    }


    /// <summary>
    ///  [响应类]国战召唤战旗车
    /// </summary>
    public partial class ResNationalSpawZhanQiCar: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// NPCID
        /// </summary>
        public uint NpcID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// Y坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 战旗车ID
        /// </summary>
        public uint MonsterID;
        /// <summary>
        /// 行会所在阵营
        /// </summary>
        public uint GuildCamp;

        public override Packet Clone()
        {
            ResNationalSpawZhanQiCar pkg = new ResNationalSpawZhanQiCar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.CityID = CityID;
            pkg.NpcID = NpcID;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.MonsterID = MonsterID;
            pkg.GuildCamp = GuildCamp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(NpcID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(MonsterID);
                oByteArray.WriteUInt(GuildCamp);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                NpcID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                MonsterID = oByteArray.ReadUInt();
                GuildCamp = oByteArray.ReadUInt();
            }
        }
		public ResNationalSpawZhanQiCar()
		{
			PacketID = 2054;
		}
    }

    /// <summary>
    ///  [响应类] 国战召唤战旗车 创建者
    /// </summary>
    [Package(2054)]
    public partial class ResNationalSpawZhanQiCarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNationalSpawZhanQiCar();
        }
    }


    /// <summary>
    ///  [请求类]刷新阵营怪物
    /// </summary>
    public partial class ReqSpawnMonsterCamp: Packet 
    {
        /// <summary>
        /// 怪物模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// Y坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 副本唯一ID
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 公会Guid
        /// </summary>
        public ulong GuildGuild;
        /// <summary>
        /// 行会名
        /// </summary>
        public string GuildTitle;
        /// <summary>
        /// 阵营
        /// </summary>
        public uint Camp;

        public override Packet Clone()
        {
            ReqSpawnMonsterCamp pkg = new ReqSpawnMonsterCamp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TmplID = TmplID;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.MapGuid = MapGuid;
            pkg.GuildGuild = GuildGuild;
            pkg.GuildTitle = GuildTitle;
            pkg.Camp = Camp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt64(GuildGuild);
                oByteArray.WriteUTF(GuildTitle);
                oByteArray.WriteUInt(Camp);
            }
            else
            {
                TmplID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                GuildGuild = oByteArray.ReadUInt64();
                GuildTitle = oByteArray.ReadUTF();
                Camp = oByteArray.ReadUInt();
            }
        }
		public ReqSpawnMonsterCamp()
		{
			PacketID = 2055;
		}
    }

    /// <summary>
    ///  [请求类] 刷新阵营怪物 创建者
    /// </summary>
    [Package(2055)]
    public partial class ReqSpawnMonsterCampCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnMonsterCamp();
        }
    }


    /// <summary>
    ///  [响应类]刷新阵营怪物
    /// </summary>
    public partial class ResSpawnMonsterCamp: Packet 
    {

        public override Packet Clone()
        {
            ResSpawnMonsterCamp pkg = new ResSpawnMonsterCamp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSpawnMonsterCamp()
		{
			PacketID = 2056;
		}
    }

    /// <summary>
    ///  [响应类] 刷新阵营怪物 创建者
    /// </summary>
    [Package(2056)]
    public partial class ResSpawnMonsterCampCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnMonsterCamp();
        }
    }


    /// <summary>
    ///  [请求类]增加白名单ip
    /// </summary>
    public partial class ReqAddWhiteListIp: Packet 
    {
        /// <summary>
        /// 白名单ip
        /// </summary>
        public string WhiteListIp;

        public override Packet Clone()
        {
            ReqAddWhiteListIp pkg = new ReqAddWhiteListIp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.WhiteListIp = WhiteListIp;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(WhiteListIp);
            }
            else
            {
                WhiteListIp = oByteArray.ReadUTF();
            }
        }
		public ReqAddWhiteListIp()
		{
			PacketID = 2057;
		}
    }

    /// <summary>
    ///  [请求类] 增加白名单ip 创建者
    /// </summary>
    [Package(2057)]
    public partial class ReqAddWhiteListIpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAddWhiteListIp();
        }
    }


    /// <summary>
    ///  [响应类]增加白名单ip
    /// </summary>
    public partial class ResAddWhiteListIp: Packet 
    {

        public override Packet Clone()
        {
            ResAddWhiteListIp pkg = new ResAddWhiteListIp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResAddWhiteListIp()
		{
			PacketID = 2058;
		}
    }

    /// <summary>
    ///  [响应类] 增加白名单ip 创建者
    /// </summary>
    [Package(2058)]
    public partial class ResAddWhiteListIpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAddWhiteListIp();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服玩家国战传送城池
    /// </summary>
    public partial class ReqNoticeCSNationalCityTransfer: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeCSNationalCityTransfer pkg = new ReqNoticeCSNationalCityTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeCSNationalCityTransfer()
		{
			PacketID = 2059;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服玩家国战传送城池 创建者
    /// </summary>
    [Package(2059)]
    public partial class ReqNoticeCSNationalCityTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCSNationalCityTransfer();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服玩家国战传送城池
    /// </summary>
    public partial class ResNoticeCSNationalCityTransfer: Packet 
    {
        /// <summary>
        /// 战区ID
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 副本唯一ID
        /// </summary>
        public uint DungeonID;
        /// <summary>
        /// 0离开1进入
        /// </summary>
        public int State;

        public override Packet Clone()
        {
            ResNoticeCSNationalCityTransfer pkg = new ResNoticeCSNationalCityTransfer();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ZoneID = ZoneID;
            pkg.CityID = CityID;
            pkg.MapID = MapID;
            pkg.DungeonID = DungeonID;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(DungeonID);
                oByteArray.WriteInt(State);
            }
            else
            {
                ZoneID = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                DungeonID = oByteArray.ReadUInt();
                State = oByteArray.ReadInt();
            }
        }
		public ResNoticeCSNationalCityTransfer()
		{
			PacketID = 2060;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服玩家国战传送城池 创建者
    /// </summary>
    [Package(2060)]
    public partial class ResNoticeCSNationalCityTransferCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCSNationalCityTransfer();
        }
    }


    /// <summary>
    ///  [请求类]更新跨服活动玩家信息
    /// </summary>
    public partial class ReqUpdatePlayerSWActivityInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 活动ID
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 活动积分
        /// </summary>
        public int ActivityPoint;
        /// <summary>
        /// 玩家信息
        /// </summary>
        public List<int> PlayerData = new List<int>();
        /// <summary>
        /// 
        /// </summary>
        public string Info;
        /// <summary>
        /// 阵营
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 帮派Guid
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 帮派名字
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 活跃时间
        /// </summary>
        public uint ActiveTime;
        /// <summary>
        /// 进入时间
        /// </summary>
        public uint EnterTime;
        /// <summary>
        /// 积分排名
        /// </summary>
        public uint Rank;

        public override Packet Clone()
        {
            ReqUpdatePlayerSWActivityInfo pkg = new ReqUpdatePlayerSWActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.ActivityID = ActivityID;
            pkg.ActivityPoint = ActivityPoint;
            foreach (var item in PlayerData)
            {
                pkg.PlayerData.Add(item);
            }
            pkg.Info = Info;
            pkg.Camp = Camp;
            pkg.MapID = MapID;
            pkg.GuildGuid = GuildGuid;
            pkg.GuildName = GuildName;
            pkg.ActiveTime = ActiveTime;
            pkg.EnterTime = EnterTime;
            pkg.Rank = Rank;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteInt(ActivityPoint);
                for (int i = 0; i < PlayerData.Count; i++)
                {
                      oByteArray.WriteInt(PlayerData[i]);
                }
                oByteArray.WriteUTF(Info);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUTF(GuildName);
                oByteArray.WriteUInt(ActiveTime);
                oByteArray.WriteUInt(EnterTime);
                oByteArray.WriteUInt(Rank);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                ActivityID = oByteArray.ReadUInt();
                ActivityPoint = oByteArray.ReadInt();
                int PlayerDataCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerDataCount; i++)
                {
                    PlayerData.Add(oByteArray.ReadInt());
                }
                Info = oByteArray.ReadUTF();
                Camp = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
                GuildName = oByteArray.ReadUTF();
                ActiveTime = oByteArray.ReadUInt();
                EnterTime = oByteArray.ReadUInt();
                Rank = oByteArray.ReadUInt();
            }
        }
		public ReqUpdatePlayerSWActivityInfo()
		{
			PacketID = 2061;
		}
    }

    /// <summary>
    ///  [请求类] 更新跨服活动玩家信息 创建者
    /// </summary>
    [Package(2061)]
    public partial class ReqUpdatePlayerSWActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdatePlayerSWActivityInfo();
        }
    }


    /// <summary>
    ///  [响应类]更新跨服活动玩家信息
    /// </summary>
    public partial class ResUpdatePlayerSWActivityInfo: Packet 
    {

        public override Packet Clone()
        {
            ResUpdatePlayerSWActivityInfo pkg = new ResUpdatePlayerSWActivityInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResUpdatePlayerSWActivityInfo()
		{
			PacketID = 2062;
		}
    }

    /// <summary>
    ///  [响应类] 更新跨服活动玩家信息 创建者
    /// </summary>
    [Package(2062)]
    public partial class ResUpdatePlayerSWActivityInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdatePlayerSWActivityInfo();
        }
    }


    /// <summary>
    ///  [请求类]跨服足球改变化身
    /// </summary>
    public partial class ReqKFZQChangeAvatar: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public int Team;
        /// <summary>
        /// 
        /// </summary>
        public bool Add;

        public override Packet Clone()
        {
            ReqKFZQChangeAvatar pkg = new ReqKFZQChangeAvatar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.ActivityID = ActivityID;
            pkg.Team = Team;
            pkg.Add = Add;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteInt(Team);
                oByteArray.WriteBoolean(Add);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                ActivityID = oByteArray.ReadUInt();
                Team = oByteArray.ReadInt();
                Add = oByteArray.ReadBoolean();
            }
        }
		public ReqKFZQChangeAvatar()
		{
			PacketID = 2063;
		}
    }

    /// <summary>
    ///  [请求类] 跨服足球改变化身 创建者
    /// </summary>
    [Package(2063)]
    public partial class ReqKFZQChangeAvatarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqKFZQChangeAvatar();
        }
    }


    /// <summary>
    ///  [响应类]跨服足球改变化身
    /// </summary>
    public partial class ResKFZQChangeAvatar: Packet 
    {

        public override Packet Clone()
        {
            ResKFZQChangeAvatar pkg = new ResKFZQChangeAvatar();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResKFZQChangeAvatar()
		{
			PacketID = 2064;
		}
    }

    /// <summary>
    ///  [响应类] 跨服足球改变化身 创建者
    /// </summary>
    [Package(2064)]
    public partial class ResKFZQChangeAvatarCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResKFZQChangeAvatar();
        }
    }


    /// <summary>
    ///  [请求类]
    /// </summary>
    public partial class ReqSWUseActivitySkill: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo TargetID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ReqSWUseActivitySkill pkg = new ReqSWUseActivitySkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.SkillID = SkillID;
            pkg.TargetID = TargetID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(SkillID);
                TargetID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                SkillID = oByteArray.ReadUInt();
                TargetID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqSWUseActivitySkill()
		{
			PacketID = 2065;
		}
    }

    /// <summary>
    ///  [请求类]  创建者
    /// </summary>
    [Package(2065)]
    public partial class ReqSWUseActivitySkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSWUseActivitySkill();
        }
    }


    /// <summary>
    ///  [响应类]
    /// </summary>
    public partial class ResSWUseActivitySkill: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ActivityID;
        /// <summary>
        /// 
        /// </summary>
        public uint SkillID;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo TargetID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResSWUseActivitySkill pkg = new ResSWUseActivitySkill();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ActivityID = ActivityID;
            pkg.SkillID = SkillID;
            pkg.TargetID = TargetID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ActivityID);
                oByteArray.WriteUInt(SkillID);
                TargetID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                ActivityID = oByteArray.ReadUInt();
                SkillID = oByteArray.ReadUInt();
                TargetID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResSWUseActivitySkill()
		{
			PacketID = 2066;
		}
    }

    /// <summary>
    ///  [响应类]  创建者
    /// </summary>
    [Package(2066)]
    public partial class ResSWUseActivitySkillCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSWUseActivitySkill();
        }
    }


    /// <summary>
    ///  [请求类]国战上报玩家积分
    /// </summary>
    public partial class ReqCSNationalReportPlayerScore: Packet 
    {
        /// <summary>
        /// 区服id
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 玩家唯一id
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 行会唯一id
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 功勋
        /// </summary>
        public int Score;
        /// <summary>
        /// 所在帮派功勋
        /// </summary>
        public int GuildScore;
        /// <summary>
        /// 玩家名字
        /// </summary>
        public string PlayerName;
        /// <summary>
        /// 帮会名字
        /// </summary>
        public string GuildName;

        public override Packet Clone()
        {
            ReqCSNationalReportPlayerScore pkg = new ReqCSNationalReportPlayerScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ServerID = ServerID;
            pkg.PlayerGuid = PlayerGuid;
            pkg.GuildGuid = GuildGuid;
            pkg.Score = Score;
            pkg.GuildScore = GuildScore;
            pkg.PlayerName = PlayerName;
            pkg.GuildName = GuildName;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteInt(Score);
                oByteArray.WriteInt(GuildScore);
                oByteArray.WriteUTF(PlayerName);
                oByteArray.WriteUTF(GuildName);
            }
            else
            {
                ServerID = oByteArray.ReadUInt();
                PlayerGuid = oByteArray.ReadUInt64();
                GuildGuid = oByteArray.ReadUInt64();
                Score = oByteArray.ReadInt();
                GuildScore = oByteArray.ReadInt();
                PlayerName = oByteArray.ReadUTF();
                GuildName = oByteArray.ReadUTF();
            }
        }
		public ReqCSNationalReportPlayerScore()
		{
			PacketID = 2067;
		}
    }

    /// <summary>
    ///  [请求类] 国战上报玩家积分 创建者
    /// </summary>
    [Package(2067)]
    public partial class ReqCSNationalReportPlayerScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalReportPlayerScore();
        }
    }


    /// <summary>
    ///  [响应类]国战上报玩家积分
    /// </summary>
    public partial class ResCSNationalReportPlayerScore: Packet 
    {

        public override Packet Clone()
        {
            ResCSNationalReportPlayerScore pkg = new ResCSNationalReportPlayerScore();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResCSNationalReportPlayerScore()
		{
			PacketID = 2068;
		}
    }

    /// <summary>
    ///  [响应类] 国战上报玩家积分 创建者
    /// </summary>
    [Package(2068)]
    public partial class ResCSNationalReportPlayerScoreCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalReportPlayerScore();
        }
    }


    /// <summary>
    ///  [请求类]跨服国战阵营排行信息
    /// </summary>
    public partial class ReqCSNatoinalCampRankInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNatoinalCampRankInfo pkg = new ReqCSNatoinalCampRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNatoinalCampRankInfo()
		{
			PacketID = 2069;
		}
    }

    /// <summary>
    ///  [请求类] 跨服国战阵营排行信息 创建者
    /// </summary>
    [Package(2069)]
    public partial class ReqCSNatoinalCampRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNatoinalCampRankInfo();
        }
    }


    /// <summary>
    ///  [响应类]跨服国战阵营排行信息
    /// </summary>
    public partial class ResCSNatoinalCampRankInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<CSCampRankInfo> Datas = new List<CSCampRankInfo>();

        public override Packet Clone()
        {
            ResCSNatoinalCampRankInfo pkg = new ResCSNatoinalCampRankInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSCampRankInfo item in Datas)
            {
                pkg.Datas.Add(item.Clone() as CSCampRankInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Datas.Count);
                for (int i = 0; i < Datas.Count; i++)
                {
                    Datas[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int DatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DatasCount; i++)
                {
                    CSCampRankInfo obj = new CSCampRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Datas.Add(obj);
                }
            }
        }
		public ResCSNatoinalCampRankInfo()
		{
			PacketID = 2070;
		}
    }

    /// <summary>
    ///  [响应类] 跨服国战阵营排行信息 创建者
    /// </summary>
    [Package(2070)]
    public partial class ResCSNatoinalCampRankInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNatoinalCampRankInfo();
        }
    }


    /// <summary>
    ///  [请求类]获取行会的国战阵营
    /// </summary>
    public partial class ReqAcquireGuildCSNationalCamp: Packet 
    {
        /// <summary>
        /// 区服ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 行会唯一ID
        /// </summary>
        public ulong GuildGuid;

        public override Packet Clone()
        {
            ReqAcquireGuildCSNationalCamp pkg = new ReqAcquireGuildCSNationalCamp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ServerID = ServerID;
            pkg.GuildGuid = GuildGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt64(GuildGuid);
            }
            else
            {
                ServerID = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
            }
        }
		public ReqAcquireGuildCSNationalCamp()
		{
			PacketID = 2071;
		}
    }

    /// <summary>
    ///  [请求类] 获取行会的国战阵营 创建者
    /// </summary>
    [Package(2071)]
    public partial class ReqAcquireGuildCSNationalCampCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqAcquireGuildCSNationalCamp();
        }
    }


    /// <summary>
    ///  [响应类]获取行会的国战阵营
    /// </summary>
    public partial class ResAcquireGuildCSNationalCamp: Packet 
    {

        public override Packet Clone()
        {
            ResAcquireGuildCSNationalCamp pkg = new ResAcquireGuildCSNationalCamp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResAcquireGuildCSNationalCamp()
		{
			PacketID = 2072;
		}
    }

    /// <summary>
    ///  [响应类] 获取行会的国战阵营 创建者
    /// </summary>
    [Package(2072)]
    public partial class ResAcquireGuildCSNationalCampCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResAcquireGuildCSNationalCamp();
        }
    }


    /// <summary>
    ///  [请求类]通知当前阵营视野城池
    /// </summary>
    public partial class ReqCSNationalNoticeCampViewCity: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalNoticeCampViewCity pkg = new ReqCSNationalNoticeCampViewCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalNoticeCampViewCity()
		{
			PacketID = 2073;
		}
    }

    /// <summary>
    ///  [请求类] 通知当前阵营视野城池 创建者
    /// </summary>
    [Package(2073)]
    public partial class ReqCSNationalNoticeCampViewCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalNoticeCampViewCity();
        }
    }


    /// <summary>
    ///  [响应类]通知当前阵营视野城池
    /// </summary>
    public partial class ResCSNationalNoticeCampViewCity: Packet 
    {
        /// <summary>
        /// 阵营已占领过的城池数
        /// </summary>
        public List<NationalCampViewCityID> CampCityIDs = new List<NationalCampViewCityID>();

        public override Packet Clone()
        {
            ResCSNationalNoticeCampViewCity pkg = new ResCSNationalNoticeCampViewCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (NationalCampViewCityID item in CampCityIDs)
            {
                pkg.CampCityIDs.Add(item.Clone() as NationalCampViewCityID);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)CampCityIDs.Count);
                for (int i = 0; i < CampCityIDs.Count; i++)
                {
                    CampCityIDs[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int CampCityIDsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < CampCityIDsCount; i++)
                {
                    NationalCampViewCityID obj = new NationalCampViewCityID();
                    obj.Serializtion(oByteArray, bSerialize);
                    CampCityIDs.Add(obj);
                }
            }
        }
		public ResCSNationalNoticeCampViewCity()
		{
			PacketID = 2074;
		}
    }

    /// <summary>
    ///  [响应类] 通知当前阵营视野城池 创建者
    /// </summary>
    [Package(2074)]
    public partial class ResCSNationalNoticeCampViewCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalNoticeCampViewCity();
        }
    }


    /// <summary>
    ///  [请求类]通知国战攻城信息
    /// </summary>
    public partial class ReqNoticeCSNationalExpeditionFightInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeCSNationalExpeditionFightInfo pkg = new ReqNoticeCSNationalExpeditionFightInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeCSNationalExpeditionFightInfo()
		{
			PacketID = 2075;
		}
    }

    /// <summary>
    ///  [请求类] 通知国战攻城信息 创建者
    /// </summary>
    [Package(2075)]
    public partial class ReqNoticeCSNationalExpeditionFightInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCSNationalExpeditionFightInfo();
        }
    }


    /// <summary>
    ///  [响应类]通知国战攻城信息
    /// </summary>
    public partial class ResNoticeCSNationalExpeditionFightInfo: Packet 
    {
        /// <summary>
        /// 军备状态
        /// </summary>
        public List<CSNationalObject> ObjectInfo = new List<CSNationalObject>();

        public override Packet Clone()
        {
            ResNoticeCSNationalExpeditionFightInfo pkg = new ResNoticeCSNationalExpeditionFightInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CSNationalObject item in ObjectInfo)
            {
                pkg.ObjectInfo.Add(item.Clone() as CSNationalObject);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ObjectInfo.Count);
                for (int i = 0; i < ObjectInfo.Count; i++)
                {
                    ObjectInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ObjectInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ObjectInfoCount; i++)
                {
                    CSNationalObject obj = new CSNationalObject();
                    obj.Serializtion(oByteArray, bSerialize);
                    ObjectInfo.Add(obj);
                }
            }
        }
		public ResNoticeCSNationalExpeditionFightInfo()
		{
			PacketID = 2076;
		}
    }

    /// <summary>
    ///  [响应类] 通知国战攻城信息 创建者
    /// </summary>
    [Package(2076)]
    public partial class ResNoticeCSNationalExpeditionFightInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCSNationalExpeditionFightInfo();
        }
    }


    /// <summary>
    ///  [请求类]天下第一武道会通知阶段信息
    /// </summary>
    public partial class ReqNoticeBudokaiStage: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeBudokaiStage pkg = new ReqNoticeBudokaiStage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeBudokaiStage()
		{
			PacketID = 2077;
		}
    }

    /// <summary>
    ///  [请求类] 天下第一武道会通知阶段信息 创建者
    /// </summary>
    [Package(2077)]
    public partial class ReqNoticeBudokaiStageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeBudokaiStage();
        }
    }


    /// <summary>
    ///  [响应类]天下第一武道会通知阶段信息
    /// </summary>
    public partial class ResNoticeBudokaiStage: Packet 
    {
        /// <summary>
        /// 当前阶段
        /// </summary>
        public int CurStage;
        /// <summary>
        /// 上一阶段
        /// </summary>
        public int PreStage;
        /// <summary>
        /// 子阶段
        /// </summary>
        public int SubStage;
        /// <summary>
        /// 是否开启
        /// </summary>
        public bool IsOpen;

        public override Packet Clone()
        {
            ResNoticeBudokaiStage pkg = new ResNoticeBudokaiStage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CurStage = CurStage;
            pkg.PreStage = PreStage;
            pkg.SubStage = SubStage;
            pkg.IsOpen = IsOpen;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(CurStage);
                oByteArray.WriteInt(PreStage);
                oByteArray.WriteInt(SubStage);
                oByteArray.WriteBoolean(IsOpen);
            }
            else
            {
                CurStage = oByteArray.ReadInt();
                PreStage = oByteArray.ReadInt();
                SubStage = oByteArray.ReadInt();
                IsOpen = oByteArray.ReadBoolean();
            }
        }
		public ResNoticeBudokaiStage()
		{
			PacketID = 2078;
		}
    }

    /// <summary>
    ///  [响应类] 天下第一武道会通知阶段信息 创建者
    /// </summary>
    [Package(2078)]
    public partial class ResNoticeBudokaiStageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeBudokaiStage();
        }
    }


    /// <summary>
    ///  [请求类]天下第一武道会报名
    /// </summary>
    public partial class ReqBudokaiSignUp: Packet 
    {
        /// <summary>
        /// 玩家基础信息
        /// </summary>
        public PlayerBasicInfo BasicInfo = new PlayerBasicInfo();

        public override Packet Clone()
        {
            ReqBudokaiSignUp pkg = new ReqBudokaiSignUp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BasicInfo = BasicInfo.Clone() as PlayerBasicInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                BasicInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                BasicInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqBudokaiSignUp()
		{
			PacketID = 2079;
		}
    }

    /// <summary>
    ///  [请求类] 天下第一武道会报名 创建者
    /// </summary>
    [Package(2079)]
    public partial class ReqBudokaiSignUpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBudokaiSignUp();
        }
    }


    /// <summary>
    ///  [响应类]天下第一武道会报名
    /// </summary>
    public partial class ResBudokaiSignUp: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public PlayerBasicInfo BasicInfo = new PlayerBasicInfo();

        public override Packet Clone()
        {
            ResBudokaiSignUp pkg = new ResBudokaiSignUp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.BasicInfo = BasicInfo.Clone() as PlayerBasicInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                BasicInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                BasicInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResBudokaiSignUp()
		{
			PacketID = 2080;
		}
    }

    /// <summary>
    ///  [响应类] 天下第一武道会报名 创建者
    /// </summary>
    [Package(2080)]
    public partial class ResBudokaiSignUpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBudokaiSignUp();
        }
    }


    /// <summary>
    ///  [请求类]国战上报行军信息
    /// </summary>
    public partial class ReqEscalationCSNationalMarch: Packet 
    {

        public override Packet Clone()
        {
            ReqEscalationCSNationalMarch pkg = new ReqEscalationCSNationalMarch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEscalationCSNationalMarch()
		{
			PacketID = 2081;
		}
    }

    /// <summary>
    ///  [请求类] 国战上报行军信息 创建者
    /// </summary>
    [Package(2081)]
    public partial class ReqEscalationCSNationalMarchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEscalationCSNationalMarch();
        }
    }


    /// <summary>
    ///  [响应类]国战上报行军信息
    /// </summary>
    public partial class ResEscalationCSNationalMarch: Packet 
    {
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 弃用
        /// </summary>
        public bool March;
        /// <summary>
        /// 服务器ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 行军行会信息
        /// </summary>
        public MarchGuild MarchInfo = new MarchGuild();

        public override Packet Clone()
        {
            ResEscalationCSNationalMarch pkg = new ResEscalationCSNationalMarch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CityID = CityID;
            pkg.March = March;
            pkg.ServerID = ServerID;
            pkg.MarchInfo = MarchInfo.Clone() as MarchGuild;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteBoolean(March);
                oByteArray.WriteUInt(ServerID);
                MarchInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                CityID = oByteArray.ReadUInt();
                March = oByteArray.ReadBoolean();
                ServerID = oByteArray.ReadUInt();
                MarchInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResEscalationCSNationalMarch()
		{
			PacketID = 2082;
		}
    }

    /// <summary>
    ///  [响应类] 国战上报行军信息 创建者
    /// </summary>
    [Package(2082)]
    public partial class ResEscalationCSNationalMarchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEscalationCSNationalMarch();
        }
    }


    /// <summary>
    ///  [请求类]国战上报弃城信息
    /// </summary>
    public partial class ReqEscalationCSNationalAbandonCity: Packet 
    {

        public override Packet Clone()
        {
            ReqEscalationCSNationalAbandonCity pkg = new ReqEscalationCSNationalAbandonCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqEscalationCSNationalAbandonCity()
		{
			PacketID = 2083;
		}
    }

    /// <summary>
    ///  [请求类] 国战上报弃城信息 创建者
    /// </summary>
    [Package(2083)]
    public partial class ReqEscalationCSNationalAbandonCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqEscalationCSNationalAbandonCity();
        }
    }


    /// <summary>
    ///  [响应类]国战上报弃城信息
    /// </summary>
    public partial class ResEscalationCSNationalAbandonCity: Packet 
    {
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 服务器ID
        /// </summary>
        public uint ServerID;
        /// <summary>
        /// 帮派唯一ID
        /// </summary>
        public ulong GuildGuid;

        public override Packet Clone()
        {
            ResEscalationCSNationalAbandonCity pkg = new ResEscalationCSNationalAbandonCity();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.CityID = CityID;
            pkg.ServerID = ServerID;
            pkg.GuildGuid = GuildGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(ServerID);
                oByteArray.WriteUInt64(GuildGuid);
            }
            else
            {
                CityID = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
            }
        }
		public ResEscalationCSNationalAbandonCity()
		{
			PacketID = 2084;
		}
    }

    /// <summary>
    ///  [响应类] 国战上报弃城信息 创建者
    /// </summary>
    [Package(2084)]
    public partial class ResEscalationCSNationalAbandonCityCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResEscalationCSNationalAbandonCity();
        }
    }


    /// <summary>
    ///  [请求类]通知跨服竞技场战区id
    /// </summary>
    public partial class ReqNoticeCSArenaZoneID: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeCSArenaZoneID pkg = new ReqNoticeCSArenaZoneID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeCSArenaZoneID()
		{
			PacketID = 2085;
		}
    }

    /// <summary>
    ///  [请求类] 通知跨服竞技场战区id 创建者
    /// </summary>
    [Package(2085)]
    public partial class ReqNoticeCSArenaZoneIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCSArenaZoneID();
        }
    }


    /// <summary>
    ///  [响应类]通知跨服竞技场战区id
    /// </summary>
    public partial class ResNoticeCSArenaZoneID: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 
        /// </summary>
        public List<uint> ServerList = new List<uint>();

        public override Packet Clone()
        {
            ResNoticeCSArenaZoneID pkg = new ResNoticeCSArenaZoneID();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ZoneID = ZoneID;
            foreach (var item in ServerList)
            {
                pkg.ServerList.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUShort((ushort)ServerList.Count);
                for (int i = 0; i < ServerList.Count; i++)
                {
                    oByteArray.WriteUInt(ServerList[i]);
                }
            }
            else
            {
                ZoneID = oByteArray.ReadUInt();
                int ServerListCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ServerListCount; i++)
                {
                    ServerList.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResNoticeCSArenaZoneID()
		{
			PacketID = 2086;
		}
    }

    /// <summary>
    ///  [响应类] 通知跨服竞技场战区id 创建者
    /// </summary>
    [Package(2086)]
    public partial class ResNoticeCSArenaZoneIDCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCSArenaZoneID();
        }
    }


    /// <summary>
    ///  [请求类]开始钓鱼
    /// </summary>
    public partial class ReqFishingStart: Packet 
    {
        /// <summary>
        /// 玩家横坐标
        /// </summary>
        public int PosX;
        /// <summary>
        /// 玩家纵坐标
        /// </summary>
        public int PosY;

        public override Packet Clone()
        {
            ReqFishingStart pkg = new ReqFishingStart();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PosX = PosX;
            pkg.PosY = PosY;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(PosX);
                oByteArray.WriteInt(PosY);
            }
            else
            {
                PosX = oByteArray.ReadInt();
                PosY = oByteArray.ReadInt();
            }
        }
		public ReqFishingStart()
		{
			PacketID = 2087;
		}
    }

    /// <summary>
    ///  [请求类] 开始钓鱼 创建者
    /// </summary>
    [Package(2087)]
    public partial class ReqFishingStartCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingStart();
        }
    }


    /// <summary>
    ///  [响应类]开始钓鱼
    /// </summary>
    public partial class ResFishingStart: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint FishID;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemID;
        /// <summary>
        /// 拉杆时间点
        /// </summary>
        public uint PullTime;

        public override Packet Clone()
        {
            ResFishingStart pkg = new ResFishingStart();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.FishID = FishID;
            pkg.ItemID = ItemID;
            pkg.PullTime = PullTime;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(FishID);
                oByteArray.WriteUInt(ItemID);
                oByteArray.WriteUInt(PullTime);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                FishID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
                PullTime = oByteArray.ReadUInt();
            }
        }
		public ResFishingStart()
		{
			PacketID = 2088;
		}
    }

    /// <summary>
    ///  [响应类] 开始钓鱼 创建者
    /// </summary>
    [Package(2088)]
    public partial class ResFishingStartCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingStart();
        }
    }


    /// <summary>
    ///  [请求类]钓鱼收线
    /// </summary>
    public partial class ReqFishingReelUp: Packet 
    {
        /// <summary>
        /// 成功率(百分比整数)
        /// </summary>
        public uint Rate;

        public override Packet Clone()
        {
            ReqFishingReelUp pkg = new ReqFishingReelUp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Rate = Rate;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Rate);
            }
            else
            {
                Rate = oByteArray.ReadUInt();
            }
        }
		public ReqFishingReelUp()
		{
			PacketID = 2089;
		}
    }

    /// <summary>
    ///  [请求类] 钓鱼收线 创建者
    /// </summary>
    [Package(2089)]
    public partial class ReqFishingReelUpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingReelUp();
        }
    }


    /// <summary>
    ///  [响应类]钓鱼收线
    /// </summary>
    public partial class ResFishingReelUp: Packet 
    {
        /// <summary>
        /// 渔获ID
        /// </summary>
        public uint FishID;
        /// <summary>
        /// 道具ID
        /// </summary>
        public uint ItemID;

        public override Packet Clone()
        {
            ResFishingReelUp pkg = new ResFishingReelUp();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FishID = FishID;
            pkg.ItemID = ItemID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(FishID);
                oByteArray.WriteUInt(ItemID);
            }
            else
            {
                FishID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
            }
        }
		public ResFishingReelUp()
		{
			PacketID = 2090;
		}
    }

    /// <summary>
    ///  [响应类] 钓鱼收线 创建者
    /// </summary>
    [Package(2090)]
    public partial class ResFishingReelUpCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingReelUp();
        }
    }


    /// <summary>
    ///  [请求类]购买钓鱼体力
    /// </summary>
    public partial class ReqFishingBuyPhysicalStrength: Packet 
    {
        /// <summary>
        /// 体力数量
        /// </summary>
        public uint Count;

        public override Packet Clone()
        {
            ReqFishingBuyPhysicalStrength pkg = new ReqFishingBuyPhysicalStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Count = Count;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Count);
            }
            else
            {
                Count = oByteArray.ReadUInt();
            }
        }
		public ReqFishingBuyPhysicalStrength()
		{
			PacketID = 2091;
		}
    }

    /// <summary>
    ///  [请求类] 购买钓鱼体力 创建者
    /// </summary>
    [Package(2091)]
    public partial class ReqFishingBuyPhysicalStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingBuyPhysicalStrength();
        }
    }


    /// <summary>
    ///  [响应类]购买钓鱼体力
    /// </summary>
    public partial class ResFishingBuyPhysicalStrength: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResFishingBuyPhysicalStrength pkg = new ResFishingBuyPhysicalStrength();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResFishingBuyPhysicalStrength()
		{
			PacketID = 2092;
		}
    }

    /// <summary>
    ///  [响应类] 购买钓鱼体力 创建者
    /// </summary>
    [Package(2092)]
    public partial class ResFishingBuyPhysicalStrengthCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingBuyPhysicalStrength();
        }
    }


    /// <summary>
    ///  [请求类]钓鱼-请求锦鲤排行榜
    /// </summary>
    public partial class ReqFishingKoiRank: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingKoiRank pkg = new ReqFishingKoiRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingKoiRank()
		{
			PacketID = 2093;
		}
    }

    /// <summary>
    ///  [请求类] 钓鱼-请求锦鲤排行榜 创建者
    /// </summary>
    [Package(2093)]
    public partial class ReqFishingKoiRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingKoiRank();
        }
    }


    /// <summary>
    ///  [响应类]钓鱼-请求锦鲤排行榜
    /// </summary>
    public partial class ResFishingKoiRank: Packet 
    {
        /// <summary>
        /// 天选之人信息
        /// </summary>
        public TodayKoiPlayer TodayKoiPlayerInfo = new TodayKoiPlayer();
        /// <summary>
        /// 锦鲤排行榜
        /// </summary>
        public List<FishingKoiRankInfo> FishingKoiRankInfos = new List<FishingKoiRankInfo>();

        public override Packet Clone()
        {
            ResFishingKoiRank pkg = new ResFishingKoiRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TodayKoiPlayerInfo = TodayKoiPlayerInfo.Clone() as TodayKoiPlayer;
            foreach (FishingKoiRankInfo item in FishingKoiRankInfos)
            {
                pkg.FishingKoiRankInfos.Add(item.Clone() as FishingKoiRankInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                TodayKoiPlayerInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUShort((ushort)FishingKoiRankInfos.Count);
                for (int i = 0; i < FishingKoiRankInfos.Count; i++)
                {
                    FishingKoiRankInfos[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                TodayKoiPlayerInfo.Serializtion(oByteArray, bSerialize);
                int FishingKoiRankInfosCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < FishingKoiRankInfosCount; i++)
                {
                    FishingKoiRankInfo obj = new FishingKoiRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    FishingKoiRankInfos.Add(obj);
                }
            }
        }
		public ResFishingKoiRank()
		{
			PacketID = 2094;
		}
    }

    /// <summary>
    ///  [响应类] 钓鱼-请求锦鲤排行榜 创建者
    /// </summary>
    [Package(2094)]
    public partial class ResFishingKoiRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingKoiRank();
        }
    }


    /// <summary>
    ///  [请求类]钓鱼-升级渔具
    /// </summary>
    public partial class ReqFishingGearUpgrade: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingGearUpgrade pkg = new ReqFishingGearUpgrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingGearUpgrade()
		{
			PacketID = 2095;
		}
    }

    /// <summary>
    ///  [请求类] 钓鱼-升级渔具 创建者
    /// </summary>
    [Package(2095)]
    public partial class ReqFishingGearUpgradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingGearUpgrade();
        }
    }


    /// <summary>
    ///  [响应类]钓鱼-升级渔具
    /// </summary>
    public partial class ResFishingGearUpgrade: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 
        /// </summary>
        public uint UpGradeID;

        public override Packet Clone()
        {
            ResFishingGearUpgrade pkg = new ResFishingGearUpgrade();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.UpGradeID = UpGradeID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(UpGradeID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                UpGradeID = oByteArray.ReadUInt();
            }
        }
		public ResFishingGearUpgrade()
		{
			PacketID = 2096;
		}
    }

    /// <summary>
    ///  [响应类] 钓鱼-升级渔具 创建者
    /// </summary>
    [Package(2096)]
    public partial class ResFishingGearUpgradeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingGearUpgrade();
        }
    }


    /// <summary>
    ///  [请求类]获得锦鲤
    /// </summary>
    public partial class ReqFishingGetKoi: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingGetKoi pkg = new ReqFishingGetKoi();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingGetKoi()
		{
			PacketID = 2097;
		}
    }

    /// <summary>
    ///  [请求类] 获得锦鲤 创建者
    /// </summary>
    [Package(2097)]
    public partial class ReqFishingGetKoiCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingGetKoi();
        }
    }


    /// <summary>
    ///  [响应类]获得锦鲤
    /// </summary>
    public partial class ResFishingGetKoi: Packet 
    {
        /// <summary>
        /// 玩家唯一ID
        /// </summary>
        public ObjectGuidInfo PlayGuid = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResFishingGetKoi pkg = new ResFishingGetKoi();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayGuid = PlayGuid.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                PlayGuid.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                PlayGuid.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResFishingGetKoi()
		{
			PacketID = 2098;
		}
    }

    /// <summary>
    ///  [响应类] 获得锦鲤 创建者
    /// </summary>
    [Package(2098)]
    public partial class ResFishingGetKoiCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingGetKoi();
        }
    }


    /// <summary>
    ///  [请求类]钓鱼-锦鲤兑换
    /// </summary>
    public partial class ReqFishingKoiExchange: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingKoiExchange pkg = new ReqFishingKoiExchange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingKoiExchange()
		{
			PacketID = 2099;
		}
    }

    /// <summary>
    ///  [请求类] 钓鱼-锦鲤兑换 创建者
    /// </summary>
    [Package(2099)]
    public partial class ReqFishingKoiExchangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingKoiExchange();
        }
    }


    /// <summary>
    ///  [响应类]钓鱼-锦鲤兑换
    /// </summary>
    public partial class ResFishingKoiExchange: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResFishingKoiExchange pkg = new ResFishingKoiExchange();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResFishingKoiExchange()
		{
			PacketID = 2100;
		}
    }

    /// <summary>
    ///  [响应类] 钓鱼-锦鲤兑换 创建者
    /// </summary>
    [Package(2100)]
    public partial class ResFishingKoiExchangeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingKoiExchange();
        }
    }


    /// <summary>
    ///  [请求类]钓鱼模块初始化数据
    /// </summary>
    public partial class ReqFishingInitModuleData: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingInitModuleData pkg = new ReqFishingInitModuleData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingInitModuleData()
		{
			PacketID = 2101;
		}
    }

    /// <summary>
    ///  [请求类] 钓鱼模块初始化数据 创建者
    /// </summary>
    [Package(2101)]
    public partial class ReqFishingInitModuleDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingInitModuleData();
        }
    }


    /// <summary>
    ///  [响应类]钓鱼模块初始化数据
    /// </summary>
    public partial class ResFishingInitModuleData: Packet 
    {
        /// <summary>
        /// 鱼王排行榜信息
        /// </summary>
        public List<FishingKingRank> RankDatas = new List<FishingKingRank>();
        /// <summary>
        /// 锦鲤排行榜
        /// </summary>
        public List<FishingKoiRankInfo> KoiRankDatas = new List<FishingKoiRankInfo>();

        public override Packet Clone()
        {
            ResFishingInitModuleData pkg = new ResFishingInitModuleData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (FishingKingRank item in RankDatas)
            {
                pkg.RankDatas.Add(item.Clone() as FishingKingRank);
            }
            foreach (FishingKoiRankInfo item in KoiRankDatas)
            {
                pkg.KoiRankDatas.Add(item.Clone() as FishingKoiRankInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)RankDatas.Count);
                for (int i = 0; i < RankDatas.Count; i++)
                {
                    RankDatas[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUShort((ushort)KoiRankDatas.Count);
                for (int i = 0; i < KoiRankDatas.Count; i++)
                {
                    KoiRankDatas[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int RankDatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RankDatasCount; i++)
                {
                    FishingKingRank obj = new FishingKingRank();
                    obj.Serializtion(oByteArray, bSerialize);
                    RankDatas.Add(obj);
                }
                int KoiRankDatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < KoiRankDatasCount; i++)
                {
                    FishingKoiRankInfo obj = new FishingKoiRankInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    KoiRankDatas.Add(obj);
                }
            }
        }
		public ResFishingInitModuleData()
		{
			PacketID = 2102;
		}
    }

    /// <summary>
    ///  [响应类] 钓鱼模块初始化数据 创建者
    /// </summary>
    [Package(2102)]
    public partial class ResFishingInitModuleDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingInitModuleData();
        }
    }


    /// <summary>
    ///  [请求类]新版每日礼包
    /// </summary>
    public partial class ReqDailyGiftConf: Packet 
    {

        public override Packet Clone()
        {
            ReqDailyGiftConf pkg = new ReqDailyGiftConf();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDailyGiftConf()
		{
			PacketID = 2103;
		}
    }

    /// <summary>
    ///  [请求类] 新版每日礼包 创建者
    /// </summary>
    [Package(2103)]
    public partial class ReqDailyGiftConfCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDailyGiftConf();
        }
    }


    /// <summary>
    ///  [响应类]新版每日礼包
    /// </summary>
    public partial class ResDailyGiftConf: Packet 
    {
        /// <summary>
        /// 礼包组
        /// </summary>
        public List<uint> DailyGift = new List<uint>();

        public override Packet Clone()
        {
            ResDailyGiftConf pkg = new ResDailyGiftConf();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in DailyGift)
            {
                pkg.DailyGift.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)DailyGift.Count);
                for (int i = 0; i < DailyGift.Count; i++)
                {
                    oByteArray.WriteUInt(DailyGift[i]);
                }
            }
            else
            {
                int DailyGiftCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DailyGiftCount; i++)
                {
                    DailyGift.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResDailyGiftConf()
		{
			PacketID = 2104;
		}
    }

    /// <summary>
    ///  [响应类] 新版每日礼包 创建者
    /// </summary>
    [Package(2104)]
    public partial class ResDailyGiftConfCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDailyGiftConf();
        }
    }


    /// <summary>
    ///  [请求类]聊天框无过滤显示信息
    /// </summary>
    public partial class ReqChatBoardMessage: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string ChatMsg;

        public override Packet Clone()
        {
            ReqChatBoardMessage pkg = new ReqChatBoardMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ChatMsg = ChatMsg;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ChatMsg);
            }
            else
            {
                ChatMsg = oByteArray.ReadUTF();
            }
        }
		public ReqChatBoardMessage()
		{
			PacketID = 2105;
		}
    }

    /// <summary>
    ///  [请求类] 聊天框无过滤显示信息 创建者
    /// </summary>
    [Package(2105)]
    public partial class ReqChatBoardMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqChatBoardMessage();
        }
    }


    /// <summary>
    ///  [响应类]聊天框无过滤显示信息
    /// </summary>
    public partial class ResChatBoardMessage: Packet 
    {
        /// <summary>
        /// 聊天框文字
        /// </summary>
        public string ChatMsg;
        /// <summary>
        /// 状态
        /// </summary>
        public uint State;

        public override Packet Clone()
        {
            ResChatBoardMessage pkg = new ResChatBoardMessage();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ChatMsg = ChatMsg;
            pkg.State = State;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(ChatMsg);
                oByteArray.WriteUInt(State);
            }
            else
            {
                ChatMsg = oByteArray.ReadUTF();
                State = oByteArray.ReadUInt();
            }
        }
		public ResChatBoardMessage()
		{
			PacketID = 2106;
		}
    }

    /// <summary>
    ///  [响应类] 聊天框无过滤显示信息 创建者
    /// </summary>
    [Package(2106)]
    public partial class ResChatBoardMessageCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResChatBoardMessage();
        }
    }


    /// <summary>
    ///  [请求类]钓鱼鱼王排行榜更新
    /// </summary>
    public partial class ReqFishingUpdateKingRank: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingUpdateKingRank pkg = new ReqFishingUpdateKingRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingUpdateKingRank()
		{
			PacketID = 2107;
		}
    }

    /// <summary>
    ///  [请求类] 钓鱼鱼王排行榜更新 创建者
    /// </summary>
    [Package(2107)]
    public partial class ReqFishingUpdateKingRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingUpdateKingRank();
        }
    }


    /// <summary>
    ///  [响应类]钓鱼鱼王排行榜更新
    /// </summary>
    public partial class ResFishingUpdateKingRank: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public FishingKingRank RankData = new FishingKingRank();

        public override Packet Clone()
        {
            ResFishingUpdateKingRank pkg = new ResFishingUpdateKingRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.RankData = RankData.Clone() as FishingKingRank;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                RankData.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                RankData.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResFishingUpdateKingRank()
		{
			PacketID = 2108;
		}
    }

    /// <summary>
    ///  [响应类] 钓鱼鱼王排行榜更新 创建者
    /// </summary>
    [Package(2108)]
    public partial class ResFishingUpdateKingRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingUpdateKingRank();
        }
    }


    /// <summary>
    ///  [请求类]鱼王排行榜
    /// </summary>
    public partial class ReqFishingKingRank: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingKingRank pkg = new ReqFishingKingRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingKingRank()
		{
			PacketID = 2109;
		}
    }

    /// <summary>
    ///  [请求类] 鱼王排行榜 创建者
    /// </summary>
    [Package(2109)]
    public partial class ReqFishingKingRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingKingRank();
        }
    }


    /// <summary>
    ///  [响应类]鱼王排行榜
    /// </summary>
    public partial class ResFishingKingRank: Packet 
    {
        /// <summary>
        /// 鱼王排行榜信息
        /// </summary>
        public List<FishingKingRank> Datas = new List<FishingKingRank>();
        /// <summary>
        /// 玩家自己的排名信息
        /// </summary>
        public FishingKingRank Me = new FishingKingRank();

        public override Packet Clone()
        {
            ResFishingKingRank pkg = new ResFishingKingRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (FishingKingRank item in Datas)
            {
                pkg.Datas.Add(item.Clone() as FishingKingRank);
            }
            pkg.Me = Me.Clone() as FishingKingRank;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Datas.Count);
                for (int i = 0; i < Datas.Count; i++)
                {
                    Datas[i].Serializtion(oByteArray, bSerialize);
                }
                Me.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                int DatasCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < DatasCount; i++)
                {
                    FishingKingRank obj = new FishingKingRank();
                    obj.Serializtion(oByteArray, bSerialize);
                    Datas.Add(obj);
                }
                Me.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResFishingKingRank()
		{
			PacketID = 2110;
		}
    }

    /// <summary>
    ///  [响应类] 鱼王排行榜 创建者
    /// </summary>
    [Package(2110)]
    public partial class ResFishingKingRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingKingRank();
        }
    }


    /// <summary>
    ///  [请求类]多个物品数量更新
    /// </summary>
    public partial class ReqUpdateItemListNum: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateItemListNum pkg = new ReqUpdateItemListNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateItemListNum()
		{
			PacketID = 2111;
		}
    }

    /// <summary>
    ///  [请求类] 多个物品数量更新 创建者
    /// </summary>
    [Package(2111)]
    public partial class ReqUpdateItemListNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateItemListNum();
        }
    }


    /// <summary>
    ///  [响应类]多个物品数量更新
    /// </summary>
    public partial class ResUpdateItemListNum: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ItemUpdateNum> ItemListUpdateNum = new List<ItemUpdateNum>();

        public override Packet Clone()
        {
            ResUpdateItemListNum pkg = new ResUpdateItemListNum();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (ItemUpdateNum item in ItemListUpdateNum)
            {
                pkg.ItemListUpdateNum.Add(item.Clone() as ItemUpdateNum);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)ItemListUpdateNum.Count);
                for (int i = 0; i < ItemListUpdateNum.Count; i++)
                {
                    ItemListUpdateNum[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int ItemListUpdateNumCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < ItemListUpdateNumCount; i++)
                {
                    ItemUpdateNum obj = new ItemUpdateNum();
                    obj.Serializtion(oByteArray, bSerialize);
                    ItemListUpdateNum.Add(obj);
                }
            }
        }
		public ResUpdateItemListNum()
		{
			PacketID = 2112;
		}
    }

    /// <summary>
    ///  [响应类] 多个物品数量更新 创建者
    /// </summary>
    [Package(2112)]
    public partial class ResUpdateItemListNumCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateItemListNum();
        }
    }


    /// <summary>
    ///  [请求类]国战战斗副本完成
    /// </summary>
    public partial class ReqCSNationalDungeonFinish: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalDungeonFinish pkg = new ReqCSNationalDungeonFinish();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalDungeonFinish()
		{
			PacketID = 2113;
		}
    }

    /// <summary>
    ///  [请求类] 国战战斗副本完成 创建者
    /// </summary>
    [Package(2113)]
    public partial class ReqCSNationalDungeonFinishCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalDungeonFinish();
        }
    }


    /// <summary>
    ///  [响应类]国战战斗副本完成
    /// </summary>
    public partial class ResCSNationalDungeonFinish: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 战区ID
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 城池ID
        /// </summary>
        public uint CityID;
        /// <summary>
        /// 阵营
        /// </summary>
        public uint Camp;
        /// <summary>
        /// 所属帮派唯一ID
        /// </summary>
        public ulong GuildGuid;
        /// <summary>
        /// 所属帮派名
        /// </summary>
        public string GuildName;
        /// <summary>
        /// 所属帮派ID
        /// </summary>
        public ObjectGuidInfo GuildID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResCSNationalDungeonFinish pkg = new ResCSNationalDungeonFinish();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.ZoneID = ZoneID;
            pkg.CityID = CityID;
            pkg.Camp = Camp;
            pkg.GuildGuid = GuildGuid;
            pkg.GuildName = GuildName;
            pkg.GuildID = GuildID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUInt(CityID);
                oByteArray.WriteUInt(Camp);
                oByteArray.WriteUInt64(GuildGuid);
                oByteArray.WriteUTF(GuildName);
                GuildID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                ZoneID = oByteArray.ReadUInt();
                CityID = oByteArray.ReadUInt();
                Camp = oByteArray.ReadUInt();
                GuildGuid = oByteArray.ReadUInt64();
                GuildName = oByteArray.ReadUTF();
                GuildID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResCSNationalDungeonFinish()
		{
			PacketID = 2114;
		}
    }

    /// <summary>
    ///  [响应类] 国战战斗副本完成 创建者
    /// </summary>
    [Package(2114)]
    public partial class ResCSNationalDungeonFinishCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalDungeonFinish();
        }
    }


    /// <summary>
    ///  [请求类]天下第一武道会分组信息
    /// </summary>
    public partial class ReqBudokaiRoomsInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqBudokaiRoomsInfo pkg = new ReqBudokaiRoomsInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBudokaiRoomsInfo()
		{
			PacketID = 2115;
		}
    }

    /// <summary>
    ///  [请求类] 天下第一武道会分组信息 创建者
    /// </summary>
    [Package(2115)]
    public partial class ReqBudokaiRoomsInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBudokaiRoomsInfo();
        }
    }


    /// <summary>
    ///  [响应类]天下第一武道会分组信息
    /// </summary>
    public partial class ResBudokaiRoomsInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<BudokaiRoom> Rooms = new List<BudokaiRoom>();
        /// <summary>
        /// 战区id
        /// </summary>
        public uint ZoneID;

        public override Packet Clone()
        {
            ResBudokaiRoomsInfo pkg = new ResBudokaiRoomsInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (BudokaiRoom item in Rooms)
            {
                pkg.Rooms.Add(item.Clone() as BudokaiRoom);
            }
            pkg.ZoneID = ZoneID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Rooms.Count);
                for (int i = 0; i < Rooms.Count; i++)
                {
                    Rooms[i].Serializtion(oByteArray, bSerialize);
                }
                oByteArray.WriteUInt(ZoneID);
            }
            else
            {
                int RoomsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RoomsCount; i++)
                {
                    BudokaiRoom obj = new BudokaiRoom();
                    obj.Serializtion(oByteArray, bSerialize);
                    Rooms.Add(obj);
                }
                ZoneID = oByteArray.ReadUInt();
            }
        }
		public ResBudokaiRoomsInfo()
		{
			PacketID = 2116;
		}
    }

    /// <summary>
    ///  [响应类] 天下第一武道会分组信息 创建者
    /// </summary>
    [Package(2116)]
    public partial class ResBudokaiRoomsInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBudokaiRoomsInfo();
        }
    }


    /// <summary>
    ///  [请求类]创建天下第一武道会对战副本
    /// </summary>
    public partial class ReqCreateBudokaiDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 战区id
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 对局id
        /// </summary>
        public uint RoomID;

        public override Packet Clone()
        {
            ReqCreateBudokaiDungeon pkg = new ReqCreateBudokaiDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.ZoneID = ZoneID;
            pkg.RoomID = RoomID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUInt(RoomID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                ZoneID = oByteArray.ReadUInt();
                RoomID = oByteArray.ReadUInt();
            }
        }
		public ReqCreateBudokaiDungeon()
		{
			PacketID = 2117;
		}
    }

    /// <summary>
    ///  [请求类] 创建天下第一武道会对战副本 创建者
    /// </summary>
    [Package(2117)]
    public partial class ReqCreateBudokaiDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCreateBudokaiDungeon();
        }
    }


    /// <summary>
    ///  [响应类]创建天下第一武道会对战副本
    /// </summary>
    public partial class ResCreateBudokaiDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 战区id
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 对局id
        /// </summary>
        public uint RoomID;
        /// <summary>
        /// 地图唯一id
        /// </summary>
        public uint MapGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResCreateBudokaiDungeon pkg = new ResCreateBudokaiDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.ZoneID = ZoneID;
            pkg.RoomID = RoomID;
            pkg.MapGuid = MapGuid;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUInt(RoomID);
                oByteArray.WriteUInt(MapGuid);
                oByteArray.WriteUInt(Result);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                ZoneID = oByteArray.ReadUInt();
                RoomID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
                Result = oByteArray.ReadUInt();
            }
        }
		public ResCreateBudokaiDungeon()
		{
			PacketID = 2118;
		}
    }

    /// <summary>
    ///  [响应类] 创建天下第一武道会对战副本 创建者
    /// </summary>
    [Package(2118)]
    public partial class ResCreateBudokaiDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCreateBudokaiDungeon();
        }
    }


    /// <summary>
    ///  [请求类]通知天下第一武道会对局地图唯一id
    /// </summary>
    public partial class ReqNoticeBudokaiMapGuid: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeBudokaiMapGuid pkg = new ReqNoticeBudokaiMapGuid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeBudokaiMapGuid()
		{
			PacketID = 2119;
		}
    }

    /// <summary>
    ///  [请求类] 通知天下第一武道会对局地图唯一id 创建者
    /// </summary>
    [Package(2119)]
    public partial class ReqNoticeBudokaiMapGuidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeBudokaiMapGuid();
        }
    }


    /// <summary>
    ///  [响应类]通知天下第一武道会对局地图唯一id
    /// </summary>
    public partial class ResNoticeBudokaiMapGuid: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public uint MapGuid;

        public override Packet Clone()
        {
            ResNoticeBudokaiMapGuid pkg = new ResNoticeBudokaiMapGuid();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUInt(MapGuid);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                MapGuid = oByteArray.ReadUInt();
            }
        }
		public ResNoticeBudokaiMapGuid()
		{
			PacketID = 2120;
		}
    }

    /// <summary>
    ///  [响应类] 通知天下第一武道会对局地图唯一id 创建者
    /// </summary>
    [Package(2120)]
    public partial class ResNoticeBudokaiMapGuidCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeBudokaiMapGuid();
        }
    }


    /// <summary>
    ///  [请求类]天下第一武道会玩家进入对战地图
    /// </summary>
    public partial class ReqBudokaiEntermap: Packet 
    {

        public override Packet Clone()
        {
            ReqBudokaiEntermap pkg = new ReqBudokaiEntermap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBudokaiEntermap()
		{
			PacketID = 2121;
		}
    }

    /// <summary>
    ///  [请求类] 天下第一武道会玩家进入对战地图 创建者
    /// </summary>
    [Package(2121)]
    public partial class ReqBudokaiEntermapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBudokaiEntermap();
        }
    }


    /// <summary>
    ///  [响应类]天下第一武道会玩家进入对战地图
    /// </summary>
    public partial class ResBudokaiEntermap: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBudokaiEntermap pkg = new ResBudokaiEntermap();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBudokaiEntermap()
		{
			PacketID = 2122;
		}
    }

    /// <summary>
    ///  [响应类] 天下第一武道会玩家进入对战地图 创建者
    /// </summary>
    [Package(2122)]
    public partial class ResBudokaiEntermapCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBudokaiEntermap();
        }
    }


    /// <summary>
    ///  [请求类]天下第一武道会对战结果
    /// </summary>
    public partial class ReqBudokaiFightReslut: Packet 
    {

        public override Packet Clone()
        {
            ReqBudokaiFightReslut pkg = new ReqBudokaiFightReslut();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBudokaiFightReslut()
		{
			PacketID = 2123;
		}
    }

    /// <summary>
    ///  [请求类] 天下第一武道会对战结果 创建者
    /// </summary>
    [Package(2123)]
    public partial class ReqBudokaiFightReslutCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBudokaiFightReslut();
        }
    }


    /// <summary>
    ///  [响应类]天下第一武道会对战结果
    /// </summary>
    public partial class ResBudokaiFightReslut: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 
        /// </summary>
        public uint RoomIdx;
        /// <summary>
        /// 
        /// </summary>
        public ulong Winner;

        public override Packet Clone()
        {
            ResBudokaiFightReslut pkg = new ResBudokaiFightReslut();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ZoneID = ZoneID;
            pkg.RoomIdx = RoomIdx;
            pkg.Winner = Winner;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUInt(RoomIdx);
                oByteArray.WriteUInt64(Winner);
            }
            else
            {
                ZoneID = oByteArray.ReadUInt();
                RoomIdx = oByteArray.ReadUInt();
                Winner = oByteArray.ReadUInt64();
            }
        }
		public ResBudokaiFightReslut()
		{
			PacketID = 2124;
		}
    }

    /// <summary>
    ///  [响应类] 天下第一武道会对战结果 创建者
    /// </summary>
    [Package(2124)]
    public partial class ResBudokaiFightReslutCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBudokaiFightReslut();
        }
    }


    /// <summary>
    ///  [请求类]国战阵营行军记录
    /// </summary>
    public partial class ReqCSNationalMarchRecord: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalMarchRecord pkg = new ReqCSNationalMarchRecord();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalMarchRecord()
		{
			PacketID = 2125;
		}
    }

    /// <summary>
    ///  [请求类] 国战阵营行军记录 创建者
    /// </summary>
    [Package(2125)]
    public partial class ReqCSNationalMarchRecordCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalMarchRecord();
        }
    }


    /// <summary>
    ///  [响应类]国战阵营行军记录
    /// </summary>
    public partial class ResCSNationalMarchRecord: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 行军记录信息
        /// </summary>
        public List<CsnationalMarchRecord> RecordInfo = new List<CsnationalMarchRecord>();

        public override Packet Clone()
        {
            ResCSNationalMarchRecord pkg = new ResCSNationalMarchRecord();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (CsnationalMarchRecord item in RecordInfo)
            {
                pkg.RecordInfo.Add(item.Clone() as CsnationalMarchRecord);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)RecordInfo.Count);
                for (int i = 0; i < RecordInfo.Count; i++)
                {
                    RecordInfo[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                Result = oByteArray.ReadUInt();
                int RecordInfoCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RecordInfoCount; i++)
                {
                    CsnationalMarchRecord obj = new CsnationalMarchRecord();
                    obj.Serializtion(oByteArray, bSerialize);
                    RecordInfo.Add(obj);
                }
            }
        }
		public ResCSNationalMarchRecord()
		{
			PacketID = 2126;
		}
    }

    /// <summary>
    ///  [响应类] 国战阵营行军记录 创建者
    /// </summary>
    [Package(2126)]
    public partial class ResCSNationalMarchRecordCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalMarchRecord();
        }
    }


    /// <summary>
    ///  [请求类]通知世界服发放武道会对战奖励
    /// </summary>
    public partial class ReqBudokaiSendFightAward: Packet 
    {

        public override Packet Clone()
        {
            ReqBudokaiSendFightAward pkg = new ReqBudokaiSendFightAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBudokaiSendFightAward()
		{
			PacketID = 2127;
		}
    }

    /// <summary>
    ///  [请求类] 通知世界服发放武道会对战奖励 创建者
    /// </summary>
    [Package(2127)]
    public partial class ReqBudokaiSendFightAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBudokaiSendFightAward();
        }
    }


    /// <summary>
    ///  [响应类]通知世界服发放武道会对战奖励
    /// </summary>
    public partial class ResBudokaiSendFightAward: Packet 
    {
        /// <summary>
        /// 玩家基础信息
        /// </summary>
        public PlayerBasicInfo BasicInfo = new PlayerBasicInfo();
        /// <summary>
        /// 1:赢 0:输
        /// </summary>
        public bool Win;

        public override Packet Clone()
        {
            ResBudokaiSendFightAward pkg = new ResBudokaiSendFightAward();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BasicInfo = BasicInfo.Clone() as PlayerBasicInfo;
            pkg.Win = Win;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                BasicInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteBoolean(Win);
            }
            else
            {
                BasicInfo.Serializtion(oByteArray, bSerialize);
                Win = oByteArray.ReadBoolean();
            }
        }
		public ResBudokaiSendFightAward()
		{
			PacketID = 2128;
		}
    }

    /// <summary>
    ///  [响应类] 通知世界服发放武道会对战奖励 创建者
    /// </summary>
    [Package(2128)]
    public partial class ResBudokaiSendFightAwardCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBudokaiSendFightAward();
        }
    }


    /// <summary>
    ///  [请求类]天下第一武道会押注
    /// </summary>
    public partial class ReqBudokaiBet: Packet 
    {
        /// <summary>
        /// 押注目标信息
        /// </summary>
        public PlayerBasicInfo BetInfo = new PlayerBasicInfo();
        /// <summary>
        /// 自身信息
        /// </summary>
        public PlayerBasicInfo SelfInfo = new PlayerBasicInfo();
        /// <summary>
        /// 对局id
        /// </summary>
        public uint RoomIdx;

        public override Packet Clone()
        {
            ReqBudokaiBet pkg = new ReqBudokaiBet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.BetInfo = BetInfo.Clone() as PlayerBasicInfo;
            pkg.SelfInfo = SelfInfo.Clone() as PlayerBasicInfo;
            pkg.RoomIdx = RoomIdx;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                BetInfo.Serializtion(oByteArray, bSerialize);
                SelfInfo.Serializtion(oByteArray, bSerialize);
                oByteArray.WriteUInt(RoomIdx);
            }
            else
            {
                BetInfo.Serializtion(oByteArray, bSerialize);
                SelfInfo.Serializtion(oByteArray, bSerialize);
                RoomIdx = oByteArray.ReadUInt();
            }
        }
		public ReqBudokaiBet()
		{
			PacketID = 2129;
		}
    }

    /// <summary>
    ///  [请求类] 天下第一武道会押注 创建者
    /// </summary>
    [Package(2129)]
    public partial class ReqBudokaiBetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBudokaiBet();
        }
    }


    /// <summary>
    ///  [响应类]天下第一武道会押注
    /// </summary>
    public partial class ResBudokaiBet: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;

        public override Packet Clone()
        {
            ResBudokaiBet pkg = new ResBudokaiBet();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
            }
            else
            {
                Result = oByteArray.ReadUInt();
            }
        }
		public ResBudokaiBet()
		{
			PacketID = 2130;
		}
    }

    /// <summary>
    ///  [响应类] 天下第一武道会押注 创建者
    /// </summary>
    [Package(2130)]
    public partial class ResBudokaiBetCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBudokaiBet();
        }
    }


    /// <summary>
    ///  [请求类]钓鱼-更新钓鱼信息
    /// </summary>
    public partial class ReqUpdateFishingInfo: Packet 
    {

        public override Packet Clone()
        {
            ReqUpdateFishingInfo pkg = new ReqUpdateFishingInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqUpdateFishingInfo()
		{
			PacketID = 2131;
		}
    }

    /// <summary>
    ///  [请求类] 钓鱼-更新钓鱼信息 创建者
    /// </summary>
    [Package(2131)]
    public partial class ReqUpdateFishingInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqUpdateFishingInfo();
        }
    }


    /// <summary>
    ///  [响应类]钓鱼-更新钓鱼信息
    /// </summary>
    public partial class ResUpdateFishingInfo: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public STFishingData FishingInfo = new STFishingData();

        public override Packet Clone()
        {
            ResUpdateFishingInfo pkg = new ResUpdateFishingInfo();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FishingInfo = FishingInfo.Clone() as STFishingData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                FishingInfo.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                FishingInfo.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResUpdateFishingInfo()
		{
			PacketID = 2132;
		}
    }

    /// <summary>
    ///  [响应类] 钓鱼-更新钓鱼信息 创建者
    /// </summary>
    [Package(2132)]
    public partial class ResUpdateFishingInfoCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResUpdateFishingInfo();
        }
    }


    /// <summary>
    ///  [请求类]锦鲤排行
    /// </summary>
    public partial class ReqFishingUpdateKoiRank: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingUpdateKoiRank pkg = new ReqFishingUpdateKoiRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingUpdateKoiRank()
		{
			PacketID = 2133;
		}
    }

    /// <summary>
    ///  [请求类] 锦鲤排行 创建者
    /// </summary>
    [Package(2133)]
    public partial class ReqFishingUpdateKoiRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingUpdateKoiRank();
        }
    }


    /// <summary>
    ///  [响应类]锦鲤排行
    /// </summary>
    public partial class ResFishingUpdateKoiRank: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public ulong PlayerGuid;
        /// <summary>
        /// 
        /// </summary>
        public string PlayerName;
        /// <summary>
        /// 
        /// </summary>
        public uint KoiNum;

        public override Packet Clone()
        {
            ResFishingUpdateKoiRank pkg = new ResFishingUpdateKoiRank();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.PlayerGuid = PlayerGuid;
            pkg.PlayerName = PlayerName;
            pkg.KoiNum = KoiNum;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt64(PlayerGuid);
                oByteArray.WriteUTF(PlayerName);
                oByteArray.WriteUInt(KoiNum);
            }
            else
            {
                PlayerGuid = oByteArray.ReadUInt64();
                PlayerName = oByteArray.ReadUTF();
                KoiNum = oByteArray.ReadUInt();
            }
        }
		public ResFishingUpdateKoiRank()
		{
			PacketID = 2134;
		}
    }

    /// <summary>
    ///  [响应类] 锦鲤排行 创建者
    /// </summary>
    [Package(2134)]
    public partial class ResFishingUpdateKoiRankCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingUpdateKoiRank();
        }
    }


    /// <summary>
    ///  [请求类]通知国战战区相关数据
    /// </summary>
    public partial class ReqCSNationalZeroData: Packet 
    {

        public override Packet Clone()
        {
            ReqCSNationalZeroData pkg = new ReqCSNationalZeroData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqCSNationalZeroData()
		{
			PacketID = 2135;
		}
    }

    /// <summary>
    ///  [请求类] 通知国战战区相关数据 创建者
    /// </summary>
    [Package(2135)]
    public partial class ReqCSNationalZeroDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalZeroData();
        }
    }


    /// <summary>
    ///  [响应类]通知国战战区相关数据
    /// </summary>
    public partial class ResCSNationalZeroData: Packet 
    {
        /// <summary>
        /// 战区最大开服天数
        /// </summary>
        public uint OpenDays;

        public override Packet Clone()
        {
            ResCSNationalZeroData pkg = new ResCSNationalZeroData();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.OpenDays = OpenDays;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(OpenDays);
            }
            else
            {
                OpenDays = oByteArray.ReadUInt();
            }
        }
		public ResCSNationalZeroData()
		{
			PacketID = 2136;
		}
    }

    /// <summary>
    ///  [响应类] 通知国战战区相关数据 创建者
    /// </summary>
    [Package(2136)]
    public partial class ResCSNationalZeroDataCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalZeroData();
        }
    }


    /// <summary>
    ///  [请求类]天下第一武道会,进入对局的玩家列表
    /// </summary>
    public partial class ReqBudokaiEnterRoomPlayers: Packet 
    {

        public override Packet Clone()
        {
            ReqBudokaiEnterRoomPlayers pkg = new ReqBudokaiEnterRoomPlayers();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBudokaiEnterRoomPlayers()
		{
			PacketID = 2137;
		}
    }

    /// <summary>
    ///  [请求类] 天下第一武道会,进入对局的玩家列表 创建者
    /// </summary>
    [Package(2137)]
    public partial class ReqBudokaiEnterRoomPlayersCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBudokaiEnterRoomPlayers();
        }
    }


    /// <summary>
    ///  [响应类]天下第一武道会,进入对局的玩家列表
    /// </summary>
    public partial class ResBudokaiEnterRoomPlayers: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public List<ulong> PlayerGuids = new List<ulong>();
        /// <summary>
        /// 
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 
        /// </summary>
        public uint RoomID;

        public override Packet Clone()
        {
            ResBudokaiEnterRoomPlayers pkg = new ResBudokaiEnterRoomPlayers();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in PlayerGuids)
            {
                pkg.PlayerGuids.Add(item);
            }
            pkg.ZoneID = ZoneID;
            pkg.RoomID = RoomID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)PlayerGuids.Count);
                for (int i = 0; i < PlayerGuids.Count; i++)
                {
                    oByteArray.WriteUInt64(PlayerGuids[i]);
                }
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUInt(RoomID);
            }
            else
            {
                int PlayerGuidsCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayerGuidsCount; i++)
                {
                    PlayerGuids.Add(oByteArray.ReadUInt64());
                }
                ZoneID = oByteArray.ReadUInt();
                RoomID = oByteArray.ReadUInt();
            }
        }
		public ResBudokaiEnterRoomPlayers()
		{
			PacketID = 2138;
		}
    }

    /// <summary>
    ///  [响应类] 天下第一武道会,进入对局的玩家列表 创建者
    /// </summary>
    [Package(2138)]
    public partial class ResBudokaiEnterRoomPlayersCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBudokaiEnterRoomPlayers();
        }
    }


    /// <summary>
    ///  [请求类]刷新NPC
    /// </summary>
    public partial class ReqSpawnNPCEx: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// X坐标
        /// </summary>
        public uint MapX;
        /// <summary>
        /// Y坐标
        /// </summary>
        public uint MapY;
        /// <summary>
        /// NPC模板ID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 副本唯一ID
        /// </summary>
        public uint MapGuid;

        public override Packet Clone()
        {
            ReqSpawnNPCEx pkg = new ReqSpawnNPCEx();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.TmplID = TmplID;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(MapGuid);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                TmplID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
            }
        }
		public ReqSpawnNPCEx()
		{
			PacketID = 2139;
		}
    }

    /// <summary>
    ///  [请求类] 刷新NPC 创建者
    /// </summary>
    [Package(2139)]
    public partial class ReqSpawnNPCExCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpawnNPCEx();
        }
    }


    /// <summary>
    ///  [响应类]刷新NPC
    /// </summary>
    public partial class ResSpawnNPCEx: Packet 
    {

        public override Packet Clone()
        {
            ResSpawnNPCEx pkg = new ResSpawnNPCEx();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSpawnNPCEx()
		{
			PacketID = 2140;
		}
    }

    /// <summary>
    ///  [响应类] 刷新NPC 创建者
    /// </summary>
    [Package(2140)]
    public partial class ResSpawnNPCExCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpawnNPCEx();
        }
    }


    /// <summary>
    ///  [请求类]寻找最近的敌对玩家
    /// </summary>
    public partial class ReqGetNearestEenemy: Packet 
    {

        public override Packet Clone()
        {
            ReqGetNearestEenemy pkg = new ReqGetNearestEenemy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqGetNearestEenemy()
		{
			PacketID = 2141;
		}
    }

    /// <summary>
    ///  [请求类] 寻找最近的敌对玩家 创建者
    /// </summary>
    [Package(2141)]
    public partial class ReqGetNearestEenemyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqGetNearestEenemy();
        }
    }


    /// <summary>
    ///  [响应类]寻找最近的敌对玩家
    /// </summary>
    public partial class ResGetNearestEenemy: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 
        /// </summary>
        public uint MapY;
        /// <summary>
        /// 
        /// </summary>
        public ObjectGuidInfo PlayerID = new ObjectGuidInfo();

        public override Packet Clone()
        {
            ResGetNearestEenemy pkg = new ResGetNearestEenemy();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.PlayerID = PlayerID.Clone() as ObjectGuidInfo;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                PlayerID.Serializtion(oByteArray, bSerialize);
            }
        }
		public ResGetNearestEenemy()
		{
			PacketID = 2142;
		}
    }

    /// <summary>
    ///  [响应类] 寻找最近的敌对玩家 创建者
    /// </summary>
    [Package(2142)]
    public partial class ResGetNearestEenemyCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResGetNearestEenemy();
        }
    }


    /// <summary>
    ///  [请求类]通知地图删除NPC
    /// </summary>
    public partial class ReqDeleteNpc: Packet 
    {

        public override Packet Clone()
        {
            ReqDeleteNpc pkg = new ReqDeleteNpc();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqDeleteNpc()
		{
			PacketID = 2143;
		}
    }

    /// <summary>
    ///  [请求类] 通知地图删除NPC 创建者
    /// </summary>
    [Package(2143)]
    public partial class ReqDeleteNpcCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqDeleteNpc();
        }
    }


    /// <summary>
    ///  [响应类]通知地图删除NPC
    /// </summary>
    public partial class ResDeleteNpc: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 坐标x
        /// </summary>
        public uint MapX;
        /// <summary>
        /// 坐标y
        /// </summary>
        public uint MapY;
        /// <summary>
        /// NPCID
        /// </summary>
        public uint TmplID;
        /// <summary>
        /// 副本ID
        /// </summary>
        public uint MapGuid;

        public override Packet Clone()
        {
            ResDeleteNpc pkg = new ResDeleteNpc();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.MapX = MapX;
            pkg.MapY = MapY;
            pkg.TmplID = TmplID;
            pkg.MapGuid = MapGuid;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(MapX);
                oByteArray.WriteUInt(MapY);
                oByteArray.WriteUInt(TmplID);
                oByteArray.WriteUInt(MapGuid);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                MapX = oByteArray.ReadUInt();
                MapY = oByteArray.ReadUInt();
                TmplID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt();
            }
        }
		public ResDeleteNpc()
		{
			PacketID = 2144;
		}
    }

    /// <summary>
    ///  [响应类] 通知地图删除NPC 创建者
    /// </summary>
    [Package(2144)]
    public partial class ResDeleteNpcCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResDeleteNpc();
        }
    }


    /// <summary>
    ///  [请求类]通知国战行军记录
    /// </summary>
    public partial class ReqNoticeCSNationalMarchRecord: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeCSNationalMarchRecord pkg = new ReqNoticeCSNationalMarchRecord();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeCSNationalMarchRecord()
		{
			PacketID = 2145;
		}
    }

    /// <summary>
    ///  [请求类] 通知国战行军记录 创建者
    /// </summary>
    [Package(2145)]
    public partial class ReqNoticeCSNationalMarchRecordCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCSNationalMarchRecord();
        }
    }


    /// <summary>
    ///  [响应类]通知国战行军记录
    /// </summary>
    public partial class ResNoticeCSNationalMarchRecord: Packet 
    {
        /// <summary>
        /// 阵营行军记录
        /// </summary>
        public List<CsnationalMarchRecord> Record = new List<CsnationalMarchRecord>();

        public override Packet Clone()
        {
            ResNoticeCSNationalMarchRecord pkg = new ResNoticeCSNationalMarchRecord();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (CsnationalMarchRecord item in Record)
            {
                pkg.Record.Add(item.Clone() as CsnationalMarchRecord);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUShort((ushort)Record.Count);
                for (int i = 0; i < Record.Count; i++)
                {
                    Record[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                int RecordCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < RecordCount; i++)
                {
                    CsnationalMarchRecord obj = new CsnationalMarchRecord();
                    obj.Serializtion(oByteArray, bSerialize);
                    Record.Add(obj);
                }
            }
        }
		public ResNoticeCSNationalMarchRecord()
		{
			PacketID = 2146;
		}
    }

    /// <summary>
    ///  [响应类] 通知国战行军记录 创建者
    /// </summary>
    [Package(2146)]
    public partial class ResNoticeCSNationalMarchRecordCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCSNationalMarchRecord();
        }
    }


    /// <summary>
    ///  [请求类]功能预告
    /// </summary>
    public partial class ReqFunctionNotice: Packet 
    {

        public override Packet Clone()
        {
            ReqFunctionNotice pkg = new ReqFunctionNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFunctionNotice()
		{
			PacketID = 2147;
		}
    }

    /// <summary>
    ///  [请求类] 功能预告 创建者
    /// </summary>
    [Package(2147)]
    public partial class ReqFunctionNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFunctionNotice();
        }
    }


    /// <summary>
    ///  [响应类]功能预告
    /// </summary>
    public partial class ResFunctionNotice: Packet 
    {
        /// <summary>
        /// 状态
        /// </summary>
        public uint Status;
        /// <summary>
        /// 功能预告TID列表
        /// </summary>
        public string NoticeList;

        public override Packet Clone()
        {
            ResFunctionNotice pkg = new ResFunctionNotice();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Status = Status;
            pkg.NoticeList = NoticeList;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Status);
                oByteArray.WriteUTF(NoticeList);
            }
            else
            {
                Status = oByteArray.ReadUInt();
                NoticeList = oByteArray.ReadUTF();
            }
        }
		public ResFunctionNotice()
		{
			PacketID = 2148;
		}
    }

    /// <summary>
    ///  [响应类] 功能预告 创建者
    /// </summary>
    [Package(2148)]
    public partial class ResFunctionNoticeCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFunctionNotice();
        }
    }


    /// <summary>
    ///  [请求类]跨服钓鱼报名
    /// </summary>
    public partial class ReqCSFishingEnroll: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public string WorldIP;
        /// <summary>
        /// 
        /// </summary>
        public uint WorldPort;
        /// <summary>
        /// 活跃人数
        /// </summary>
        public uint PlayerCount;
        /// <summary>
        /// 区服ID
        /// </summary>
        public uint ServerID;

        public override Packet Clone()
        {
            ReqCSFishingEnroll pkg = new ReqCSFishingEnroll();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.WorldIP = WorldIP;
            pkg.WorldPort = WorldPort;
            pkg.PlayerCount = PlayerCount;
            pkg.ServerID = ServerID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUTF(WorldIP);
                oByteArray.WriteUInt(WorldPort);
                oByteArray.WriteUInt(PlayerCount);
                oByteArray.WriteUInt(ServerID);
            }
            else
            {
                WorldIP = oByteArray.ReadUTF();
                WorldPort = oByteArray.ReadUInt();
                PlayerCount = oByteArray.ReadUInt();
                ServerID = oByteArray.ReadUInt();
            }
        }
		public ReqCSFishingEnroll()
		{
			PacketID = 2149;
		}
    }

    /// <summary>
    ///  [请求类] 跨服钓鱼报名 创建者
    /// </summary>
    [Package(2149)]
    public partial class ReqCSFishingEnrollCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSFishingEnroll();
        }
    }


    /// <summary>
    ///  [响应类]跨服钓鱼报名
    /// </summary>
    public partial class ResCSFishingEnroll: Packet 
    {

        public override Packet Clone()
        {
            ResCSFishingEnroll pkg = new ResCSFishingEnroll();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResCSFishingEnroll()
		{
			PacketID = 2150;
		}
    }

    /// <summary>
    ///  [响应类] 跨服钓鱼报名 创建者
    /// </summary>
    [Package(2150)]
    public partial class ResCSFishingEnrollCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSFishingEnroll();
        }
    }


    /// <summary>
    ///  [请求类]召唤分身
    /// </summary>
    public partial class ReqSpwanMirror: Packet 
    {
        /// <summary>
        /// 角色分身表tid
        /// </summary>
        public uint TID;

        public override Packet Clone()
        {
            ReqSpwanMirror pkg = new ReqSpwanMirror();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.TID = TID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(TID);
            }
            else
            {
                TID = oByteArray.ReadUInt();
            }
        }
		public ReqSpwanMirror()
		{
			PacketID = 2151;
		}
    }

    /// <summary>
    ///  [请求类] 召唤分身 创建者
    /// </summary>
    [Package(2151)]
    public partial class ReqSpwanMirrorCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqSpwanMirror();
        }
    }


    /// <summary>
    ///  [响应类]召唤分身
    /// </summary>
    public partial class ResSpwanMirror: Packet 
    {

        public override Packet Clone()
        {
            ResSpwanMirror pkg = new ResSpwanMirror();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResSpwanMirror()
		{
			PacketID = 2152;
		}
    }

    /// <summary>
    ///  [响应类] 召唤分身 创建者
    /// </summary>
    [Package(2152)]
    public partial class ResSpwanMirrorCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResSpwanMirror();
        }
    }


    /// <summary>
    ///  [请求类]武道会已报名玩家列表
    /// </summary>
    public partial class ReqBudokaiSignUpPlayers: Packet 
    {

        public override Packet Clone()
        {
            ReqBudokaiSignUpPlayers pkg = new ReqBudokaiSignUpPlayers();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqBudokaiSignUpPlayers()
		{
			PacketID = 2153;
		}
    }

    /// <summary>
    ///  [请求类] 武道会已报名玩家列表 创建者
    /// </summary>
    [Package(2153)]
    public partial class ReqBudokaiSignUpPlayersCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqBudokaiSignUpPlayers();
        }
    }


    /// <summary>
    ///  [响应类]武道会已报名玩家列表
    /// </summary>
    public partial class ResBudokaiSignUpPlayers: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ZoneID;
        /// <summary>
        /// 
        /// </summary>
        public List<PlayerBasicInfo> Players = new List<PlayerBasicInfo>();

        public override Packet Clone()
        {
            ResBudokaiSignUpPlayers pkg = new ResBudokaiSignUpPlayers();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ZoneID = ZoneID;
            foreach (PlayerBasicInfo item in Players)
            {
                pkg.Players.Add(item.Clone() as PlayerBasicInfo);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ZoneID);
                oByteArray.WriteUShort((ushort)Players.Count);
                for (int i = 0; i < Players.Count; i++)
                {
                    Players[i].Serializtion(oByteArray, bSerialize);
                }
            }
            else
            {
                ZoneID = oByteArray.ReadUInt();
                int PlayersCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < PlayersCount; i++)
                {
                    PlayerBasicInfo obj = new PlayerBasicInfo();
                    obj.Serializtion(oByteArray, bSerialize);
                    Players.Add(obj);
                }
            }
        }
		public ResBudokaiSignUpPlayers()
		{
			PacketID = 2154;
		}
    }

    /// <summary>
    ///  [响应类] 武道会已报名玩家列表 创建者
    /// </summary>
    [Package(2154)]
    public partial class ResBudokaiSignUpPlayersCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResBudokaiSignUpPlayers();
        }
    }


    /// <summary>
    ///  [请求类]跨服钓鱼创建副本
    /// </summary>
    public partial class ReqCSFishingCreateDungeon: Packet 
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 钓鱼地图战区ID
        /// </summary>
        public uint ZoneID;

        public override Packet Clone()
        {
            ReqCSFishingCreateDungeon pkg = new ReqCSFishingCreateDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.MapID = MapID;
            pkg.ZoneID = ZoneID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt(ZoneID);
            }
            else
            {
                MapID = oByteArray.ReadUInt();
                ZoneID = oByteArray.ReadUInt();
            }
        }
		public ReqCSFishingCreateDungeon()
		{
			PacketID = 2155;
		}
    }

    /// <summary>
    ///  [请求类] 跨服钓鱼创建副本 创建者
    /// </summary>
    [Package(2155)]
    public partial class ReqCSFishingCreateDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSFishingCreateDungeon();
        }
    }


    /// <summary>
    ///  [响应类]跨服钓鱼创建副本
    /// </summary>
    public partial class ResCSFishingCreateDungeon: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint Result;
        /// <summary>
        /// 地图ID
        /// </summary>
        public uint MapID;
        /// <summary>
        /// 地图唯一ID
        /// </summary>
        public ulong MapGuid;
        /// <summary>
        /// 钓鱼地图战区ID
        /// </summary>
        public uint ZoneID;

        public override Packet Clone()
        {
            ResCSFishingCreateDungeon pkg = new ResCSFishingCreateDungeon();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            pkg.MapID = MapID;
            pkg.MapGuid = MapGuid;
            pkg.ZoneID = ZoneID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUInt(MapID);
                oByteArray.WriteUInt64(MapGuid);
                oByteArray.WriteUInt(ZoneID);
            }
            else
            {
                Result = oByteArray.ReadUInt();
                MapID = oByteArray.ReadUInt();
                MapGuid = oByteArray.ReadUInt64();
                ZoneID = oByteArray.ReadUInt();
            }
        }
		public ResCSFishingCreateDungeon()
		{
			PacketID = 2156;
		}
    }

    /// <summary>
    ///  [响应类] 跨服钓鱼创建副本 创建者
    /// </summary>
    [Package(2156)]
    public partial class ResCSFishingCreateDungeonCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSFishingCreateDungeon();
        }
    }


    /// <summary>
    ///  [请求类]map服通知world服钓鱼结果
    /// </summary>
    public partial class ReqFishingResult: Packet 
    {
        /// <summary>
        /// 钓鱼结果类型
        /// </summary>
        public uint ResultType;
        /// <summary>
        /// 
        /// </summary>
        public uint FishID;
        /// <summary>
        /// 
        /// </summary>
        public uint ItemID;

        public override Packet Clone()
        {
            ReqFishingResult pkg = new ReqFishingResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ResultType = ResultType;
            pkg.FishID = FishID;
            pkg.ItemID = ItemID;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ResultType);
                oByteArray.WriteUInt(FishID);
                oByteArray.WriteUInt(ItemID);
            }
            else
            {
                ResultType = oByteArray.ReadUInt();
                FishID = oByteArray.ReadUInt();
                ItemID = oByteArray.ReadUInt();
            }
        }
		public ReqFishingResult()
		{
			PacketID = 2157;
		}
    }

    /// <summary>
    ///  [请求类] map服通知world服钓鱼结果 创建者
    /// </summary>
    [Package(2157)]
    public partial class ReqFishingResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingResult();
        }
    }


    /// <summary>
    ///  [响应类]map服通知world服钓鱼结果
    /// </summary>
    public partial class ResFishingResult: Packet 
    {

        public override Packet Clone()
        {
            ResFishingResult pkg = new ResFishingResult();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResFishingResult()
		{
			PacketID = 2158;
		}
    }

    /// <summary>
    ///  [响应类] map服通知world服钓鱼结果 创建者
    /// </summary>
    [Package(2158)]
    public partial class ResFishingResultCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingResult();
        }
    }


    /// <summary>
    ///  [请求类]跨服活动状态更改
    /// </summary>
    public partial class ReqNoticeCSChangeState: Packet 
    {

        public override Packet Clone()
        {
            ReqNoticeCSChangeState pkg = new ReqNoticeCSChangeState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqNoticeCSChangeState()
		{
			PacketID = 2159;
		}
    }

    /// <summary>
    ///  [请求类] 跨服活动状态更改 创建者
    /// </summary>
    [Package(2159)]
    public partial class ReqNoticeCSChangeStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqNoticeCSChangeState();
        }
    }


    /// <summary>
    ///  [响应类]跨服活动状态更改
    /// </summary>
    public partial class ResNoticeCSChangeState: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public uint ZoneType;
        /// <summary>
        /// 
        /// </summary>
        public uint State;
        /// <summary>
        /// 
        /// </summary>
        public uint BeginTime;
        /// <summary>
        /// 
        /// </summary>
        public uint OldState;

        public override Packet Clone()
        {
            ResNoticeCSChangeState pkg = new ResNoticeCSChangeState();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.ZoneType = ZoneType;
            pkg.State = State;
            pkg.BeginTime = BeginTime;
            pkg.OldState = OldState;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(ZoneType);
                oByteArray.WriteUInt(State);
                oByteArray.WriteUInt(BeginTime);
                oByteArray.WriteUInt(OldState);
            }
            else
            {
                ZoneType = oByteArray.ReadUInt();
                State = oByteArray.ReadUInt();
                BeginTime = oByteArray.ReadUInt();
                OldState = oByteArray.ReadUInt();
            }
        }
		public ResNoticeCSChangeState()
		{
			PacketID = 2160;
		}
    }

    /// <summary>
    ///  [响应类] 跨服活动状态更改 创建者
    /// </summary>
    [Package(2160)]
    public partial class ResNoticeCSChangeStateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResNoticeCSChangeState();
        }
    }


    /// <summary>
    ///  [请求类]国战急行军
    /// </summary>
    public partial class ReqCSNationalRapidMarch: Packet 
    {
        /// <summary>
        /// 行军路径上的城池ID
        /// </summary>
        public List<uint> MarchPath = new List<uint>();

        public override Packet Clone()
        {
            ReqCSNationalRapidMarch pkg = new ReqCSNationalRapidMarch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            foreach (var item in MarchPath)
            {
                pkg.MarchPath.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                for (int i = 0; i < MarchPath.Count; i++)
                {
                      oByteArray.WriteUInt(MarchPath[i]);
                }
            }
            else
            {
                int MarchPathCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MarchPathCount; i++)
                {
                    MarchPath.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ReqCSNationalRapidMarch()
		{
			PacketID = 2161;
		}
    }

    /// <summary>
    ///  [请求类] 国战急行军 创建者
    /// </summary>
    [Package(2161)]
    public partial class ReqCSNationalRapidMarchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqCSNationalRapidMarch();
        }
    }


    /// <summary>
    ///  [响应类]国战急行军
    /// </summary>
    public partial class ResCSNationalRapidMarch: Packet 
    {
        /// <summary>
        /// 结果码
        /// </summary>
        public uint Result;
        /// <summary>
        /// 行军路径上的城池ID
        /// </summary>
        public List<uint> MarchPath = new List<uint>();

        public override Packet Clone()
        {
            ResCSNationalRapidMarch pkg = new ResCSNationalRapidMarch();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            foreach (var item in MarchPath)
            {
                pkg.MarchPath.Add(item);
            }
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteUInt(Result);
                oByteArray.WriteUShort((ushort)MarchPath.Count);
                for (int i = 0; i < MarchPath.Count; i++)
                {
                    oByteArray.WriteUInt(MarchPath[i]);
                }
            }
            else
            {
                Result = oByteArray.ReadUInt();
                int MarchPathCount = (int)oByteArray.ReadUShort();
                for (int i = 0; i < MarchPathCount; i++)
                {
                    MarchPath.Add(oByteArray.ReadUInt());
                }
            }
        }
		public ResCSNationalRapidMarch()
		{
			PacketID = 2162;
		}
    }

    /// <summary>
    ///  [响应类] 国战急行军 创建者
    /// </summary>
    [Package(2162)]
    public partial class ResCSNationalRapidMarchCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResCSNationalRapidMarch();
        }
    }


    /// <summary>
    ///  [请求类]world服向map服更新钓鱼数据
    /// </summary>
    public partial class ReqFishingDataUpdate: Packet 
    {
        /// <summary>
        /// 钓鱼数据
        /// </summary>
        public STFishingData FishingData = new STFishingData();

        public override Packet Clone()
        {
            ReqFishingDataUpdate pkg = new ReqFishingDataUpdate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.FishingData = FishingData.Clone() as STFishingData;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                FishingData.Serializtion(oByteArray, bSerialize);
            }
            else
            {
                FishingData.Serializtion(oByteArray, bSerialize);
            }
        }
		public ReqFishingDataUpdate()
		{
			PacketID = 2163;
		}
    }

    /// <summary>
    ///  [请求类] world服向map服更新钓鱼数据 创建者
    /// </summary>
    [Package(2163)]
    public partial class ReqFishingDataUpdateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingDataUpdate();
        }
    }


    /// <summary>
    ///  [响应类]world服向map服更新钓鱼数据
    /// </summary>
    public partial class ResFishingDataUpdate: Packet 
    {

        public override Packet Clone()
        {
            ResFishingDataUpdate pkg = new ResFishingDataUpdate();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResFishingDataUpdate()
		{
			PacketID = 2164;
		}
    }

    /// <summary>
    ///  [响应类] world服向map服更新钓鱼数据 创建者
    /// </summary>
    [Package(2164)]
    public partial class ResFishingDataUpdateCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingDataUpdate();
        }
    }


    /// <summary>
    ///  [请求类]拉杆操作
    /// </summary>
    public partial class ReqFishingPull: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingPull pkg = new ReqFishingPull();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingPull()
		{
			PacketID = 2165;
		}
    }

    /// <summary>
    ///  [请求类] 拉杆操作 创建者
    /// </summary>
    [Package(2165)]
    public partial class ReqFishingPullCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingPull();
        }
    }


    /// <summary>
    ///  [响应类]拉杆操作
    /// </summary>
    public partial class ResFishingPull: Packet 
    {
        /// <summary>
        /// 
        /// </summary>
        public int Result;

        public override Packet Clone()
        {
            ResFishingPull pkg = new ResFishingPull();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            pkg.Result = Result;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
                oByteArray.WriteInt(Result);
            }
            else
            {
                Result = oByteArray.ReadInt();
            }
        }
		public ResFishingPull()
		{
			PacketID = 2166;
		}
    }

    /// <summary>
    ///  [响应类] 拉杆操作 创建者
    /// </summary>
    [Package(2166)]
    public partial class ResFishingPullCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingPull();
        }
    }


    /// <summary>
    ///  [请求类]取消钓鱼
    /// </summary>
    public partial class ReqFishingCancel: Packet 
    {

        public override Packet Clone()
        {
            ReqFishingCancel pkg = new ReqFishingCancel();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ReqFishingCancel()
		{
			PacketID = 2167;
		}
    }

    /// <summary>
    ///  [请求类] 取消钓鱼 创建者
    /// </summary>
    [Package(2167)]
    public partial class ReqFishingCancelCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ReqFishingCancel();
        }
    }


    /// <summary>
    ///  [响应类]取消钓鱼
    /// </summary>
    public partial class ResFishingCancel: Packet 
    {

        public override Packet Clone()
        {
            ResFishingCancel pkg = new ResFishingCancel();
            pkg.Header = Header;
            pkg.PacketID = PacketID;
#if USE_OWNERID
            pkg.OwnerID = OwnerID;
#endif
            pkg.PacketSize = PacketSize;
            return pkg;
        }

        public override void Serializtion(ByteArray oByteArray, bool bSerialize)
        {
            base.Serializtion(oByteArray, bSerialize);
            if (bSerialize)
            {
            }
            else
            {
            }
        }
		public ResFishingCancel()
		{
			PacketID = 2168;
		}
    }

    /// <summary>
    ///  [响应类] 取消钓鱼 创建者
    /// </summary>
    [Package(2168)]
    public partial class ResFishingCancelCreator : IPacketCreator
    {
        public Packet CreatePacket()
        {
            return new ResFishingCancel();
        }
    }


    /// <summary>
    ///  协议枚举
    /// </summary>
    public enum PacketCode
    {
        /// <summary>
        ///  [请求类] 连接地图服务器
        /// </summary>
        ReqConnectMapServerCode = 101,
        /// <summary>
        ///  [响应类] 连接地图服务器
        /// </summary>
        ResConnectMapServerCode = 102,
        /// <summary>
        ///  [请求类] 踢玩家下线
        /// </summary>
        ReqKickPlayerCode = 103,
        /// <summary>
        ///  [响应类] 踢玩家下线
        /// </summary>
        ResKickPlayerCode = 104,
        /// <summary>
        ///  [请求类] 保存地图ID对应服务器的Session
        /// </summary>
        ReqSaveMapSessionCode = 105,
        /// <summary>
        ///  [响应类] 保存地图ID对应服务器的Session
        /// </summary>
        ResSaveMapSessionCode = 106,
        /// <summary>
        ///  [请求类] 从地图上移除玩家
        /// </summary>
        ReqRemoveFromMapCode = 107,
        /// <summary>
        ///  [响应类] 从地图上移除玩家
        /// </summary>
        ResRemoveFromMapCode = 108,
        /// <summary>
        ///  [请求类] 玩家连接断开
        /// </summary>
        ReqPlayerDisconnectCode = 109,
        /// <summary>
        ///  [响应类] 玩家连接断开
        /// </summary>
        ResPlayerDisconnectCode = 110,
        /// <summary>
        ///  [请求类] 保存玩家角色数据
        /// </summary>
        ReqSaveCharacterCode = 111,
        /// <summary>
        ///  [响应类] 保存玩家角色数据
        /// </summary>
        ResSaveCharacterCode = 112,
        /// <summary>
        ///  [请求类] 装备装备到身上
        /// </summary>
        ReqUseEquipCode = 113,
        /// <summary>
        ///  [响应类] 装备装备到身上
        /// </summary>
        ResUseEquipCode = 114,
        /// <summary>
        ///  [请求类] 交换2格子
        /// </summary>
        ReqSwapGoodCode = 115,
        /// <summary>
        ///  [响应类] 交换2格子
        /// </summary>
        ResSwapGoodCode = 116,
        /// <summary>
        ///  [请求类] GM命令
        /// </summary>
        ReqGMCommandCode = 117,
        /// <summary>
        ///  [响应类] GM命令
        /// </summary>
        ResGMCommandCode = 118,
        /// <summary>
        ///  [请求类] 脱下装备
        /// </summary>
        ReqUnEquipCode = 119,
        /// <summary>
        ///  [响应类] 脱下装备
        /// </summary>
        ResUnEquipCode = 120,
        /// <summary>
        ///  [请求类] 通知周围其他对象移动
        /// </summary>
        ReqNoticeObjectMoveCode = 121,
        /// <summary>
        ///  [响应类] 通知周围其他对象移动
        /// </summary>
        ResNoticeObjectMoveCode = 122,
        /// <summary>
        ///  [请求类] 地图服务器更新玩家地图位置到世界服务器
        /// </summary>
        ReqUpdatePlayerXYCode = 123,
        /// <summary>
        ///  [响应类] 地图服务器更新玩家地图位置到世界服务器
        /// </summary>
        ResUpdatePlayerXYCode = 124,
        /// <summary>
        ///  [请求类] 提高境界等级
        /// </summary>
        ReqUpGradeStateLvCode = 125,
        /// <summary>
        ///  [响应类] 提高境界等级
        /// </summary>
        ResUpGradeStateLvCode = 126,
        /// <summary>
        ///  [请求类] 商城购买物品
        /// </summary>
        ReqBuyItemCode = 127,
        /// <summary>
        ///  [响应类] 商城购买物品
        /// </summary>
        ResBuyItemCode = 128,
        /// <summary>
        ///  [请求类] 更新属性加成值
        /// </summary>
        ReqUpdateBasicAttributeCode = 129,
        /// <summary>
        ///  [响应类] 更新属性加成值
        /// </summary>
        ResUpdateBasicAttributeCode = 130,
        /// <summary>
        ///  [请求类] 货币变更更新
        /// </summary>
        ReqUpdateMoneyCode = 131,
        /// <summary>
        ///  [响应类] 货币变更更新
        /// </summary>
        ResUpdateMoneyCode = 132,
        /// <summary>
        ///  [请求类] 更新角色经验值
        /// </summary>
        ReqUpdateExpCode = 133,
        /// <summary>
        ///  [响应类] 更新角色经验值
        /// </summary>
        ResUpdateExpCode = 134,
        /// <summary>
        ///  [请求类] GM命令列表
        /// </summary>
        ReqGMCmdListCode = 135,
        /// <summary>
        ///  [响应类] GM命令列表
        /// </summary>
        ResGMCmdListCode = 136,
        /// <summary>
        ///  [请求类] 装备回收
        /// </summary>
        ReqEquipRecycleCode = 137,
        /// <summary>
        ///  [响应类] 装备回收
        /// </summary>
        ResEquipRecycleCode = 138,
        /// <summary>
        ///  [请求类] 装备合成
        /// </summary>
        ReqEquipCompoundCode = 139,
        /// <summary>
        ///  [响应类] 装备合成
        /// </summary>
        ResEquipCompoundCode = 140,
        /// <summary>
        ///  [请求类] 更新地图上的玩家形象
        /// </summary>
        ReqUpdateAvatarCode = 141,
        /// <summary>
        ///  [响应类] 更新地图上的玩家形象
        /// </summary>
        ResUpdateAvatarCode = 142,
        /// <summary>
        ///  [请求类] 整理物品
        /// </summary>
        ReqArrangeItemsCode = 143,
        /// <summary>
        ///  [响应类] 整理物品
        /// </summary>
        ResArrangeItemsCode = 144,
        /// <summary>
        ///  [请求类] 圣器精炼
        /// </summary>
        ReqStoveUpgradeCode = 145,
        /// <summary>
        ///  [响应类] 圣器精炼
        /// </summary>
        ResStoveUpgradeCode = 146,
        /// <summary>
        ///  [请求类] 领取成就奖励
        /// </summary>
        ReqGetAchievementAwardCode = 147,
        /// <summary>
        ///  [响应类] 领取成就奖励
        /// </summary>
        ResGetAchievementAwardCode = 148,
        /// <summary>
        ///  [请求类] 保存玩家成就信息
        /// </summary>
        ReqSaveAchievementCode = 149,
        /// <summary>
        ///  [响应类] 保存玩家成就信息
        /// </summary>
        ResSaveAchievementCode = 150,
        /// <summary>
        ///  [请求类] 更新角色基础属性值
        /// </summary>
        ReqUpdatePlayerValueCode = 151,
        /// <summary>
        ///  [响应类] 更新角色基础属性值
        /// </summary>
        ResUpdatePlayerValueCode = 152,
        /// <summary>
        ///  [请求类] 玩家攻击
        /// </summary>
        ReqPlayerAttackCode = 153,
        /// <summary>
        ///  [响应类] 玩家攻击
        /// </summary>
        ResPlayerAttackCode = 154,
        /// <summary>
        ///  [请求类] 更新物品模板
        /// </summary>
        ReqNoticeUpdateItemTmplIDCode = 155,
        /// <summary>
        ///  [响应类] 更新物品模板
        /// </summary>
        ResNoticeUpdateItemTmplIDCode = 156,
        /// <summary>
        ///  [请求类] 升级翅膀
        /// </summary>
        ReqUpgradeWingCode = 157,
        /// <summary>
        ///  [响应类] 升级翅膀
        /// </summary>
        ResUpgradeWingCode = 158,
        /// <summary>
        ///  [请求类] 通知周围玩家自己的攻击状态
        /// </summary>
        ReqNoticeObjectAttackCode = 159,
        /// <summary>
        ///  [响应类] 通知周围玩家自己的攻击状态
        /// </summary>
        ResNoticeObjectAttackCode = 160,
        /// <summary>
        ///  [请求类] 通知客户端指定对象受伤扣血
        /// </summary>
        ReqNoticeObjectHurtCode = 161,
        /// <summary>
        ///  [响应类] 通知客户端指定对象受伤扣血
        /// </summary>
        ResNoticeObjectHurtCode = 162,
        /// <summary>
        ///  [请求类] 通知周围玩家客户端停止移动
        /// </summary>
        ReqNoticeStopWalkCode = 163,
        /// <summary>
        ///  [响应类] 通知周围玩家客户端停止移动
        /// </summary>
        ResNoticeStopWalkCode = 164,
        /// <summary>
        ///  [请求类] 更新地图服务器上玩家的技能信息
        /// </summary>
        ReqUpdateMapPlayerSkillCode = 165,
        /// <summary>
        ///  [响应类] 更新地图服务器上玩家的技能信息
        /// </summary>
        ResUpdateMapPlayerSkillCode = 166,
        /// <summary>
        ///  [请求类] 更新玩家攻击状态(刺杀、半月)，用于同步世界服和通知客户端
        /// </summary>
        ReqUpdateAttackStateCode = 167,
        /// <summary>
        ///  [响应类] 更新玩家攻击状态(刺杀、半月)，用于同步世界服和通知客户端
        /// </summary>
        ResUpdateAttackStateCode = 168,
        /// <summary>
        ///  [请求类] 技能使用结果
        /// </summary>
        ReqUseSkillResultCode = 169,
        /// <summary>
        ///  [响应类] 技能使用结果
        /// </summary>
        ResUseSkillResultCode = 170,
        /// <summary>
        ///  [请求类] 消息通知
        /// </summary>
        ReqMessageNoticeCode = 171,
        /// <summary>
        ///  [响应类] 消息通知
        /// </summary>
        ResMessageNoticeCode = 172,
        /// <summary>
        ///  [请求类] 通知客户端施放野蛮冲撞技能
        /// </summary>
        ReqNoticePlayerCollideCode = 173,
        /// <summary>
        ///  [响应类] 通知客户端施放野蛮冲撞技能
        /// </summary>
        ResNoticePlayerCollideCode = 174,
        /// <summary>
        ///  [请求类] 交换快捷键
        /// </summary>
        ReqSwapHotkeyCode = 175,
        /// <summary>
        ///  [响应类] 交换快捷键
        /// </summary>
        ResSwapHotkeyCode = 176,
        /// <summary>
        ///  [请求类] 通知客户端添加对象
        /// </summary>
        ReqAddMapObjectCode = 177,
        /// <summary>
        ///  [响应类] 通知客户端添加对象
        /// </summary>
        ResAddMapObjectCode = 178,
        /// <summary>
        ///  [请求类] 通知客户端删除对象
        /// </summary>
        ReqDelMapObjectCode = 179,
        /// <summary>
        ///  [响应类] 通知客户端删除对象
        /// </summary>
        ResDelMapObjectCode = 180,
        /// <summary>
        ///  [请求类] 学习技能
        /// </summary>
        ReqStudySkillCode = 181,
        /// <summary>
        ///  [响应类] 学习技能
        /// </summary>
        ResStudySkillCode = 182,
        /// <summary>
        ///  [请求类] 技能升级
        /// </summary>
        ReqUpgradeSkillCode = 183,
        /// <summary>
        ///  [响应类] 技能升级
        /// </summary>
        ResUpgradeSkillCode = 184,
        /// <summary>
        ///  [请求类] 使用物品
        /// </summary>
        ReqUseItemCode = 185,
        /// <summary>
        ///  [响应类] 使用物品
        /// </summary>
        ResUseItemCode = 186,
        /// <summary>
        ///  [请求类] 设置攻击模式
        /// </summary>
        ReqSetFightModleCode = 187,
        /// <summary>
        ///  [响应类] 设置攻击模式
        /// </summary>
        ResSetFightModleCode = 188,
        /// <summary>
        ///  [请求类] 通知客户端对象死亡;
        /// </summary>
        ReqNoticeObjectDieCode = 189,
        /// <summary>
        ///  [响应类] 通知客户端对象死亡;
        /// </summary>
        ResNoticeObjectDieCode = 190,
        /// <summary>
        ///  [请求类] 通知世界服务器更新生命、魔法、内力
        /// </summary>
        ReqNoticeUpdateHPMPSPCode = 191,
        /// <summary>
        ///  [响应类] 通知世界服务器更新生命、魔法、内力
        /// </summary>
        ResNoticeUpdateHPMPSPCode = 192,
        /// <summary>
        ///  [请求类] 通知周围玩家更新等级
        /// </summary>
        ReqNoticeUpdateLvCode = 193,
        /// <summary>
        ///  [响应类] 通知周围玩家更新等级
        /// </summary>
        ResNoticeUpdateLvCode = 194,
        /// <summary>
        ///  [请求类] 一键提取宝藏仓库物品
        /// </summary>
        ReqExtractTreasureItemCode = 195,
        /// <summary>
        ///  [响应类] 一键提取宝藏仓库物品
        /// </summary>
        ResExtractTreasureItemCode = 196,
        /// <summary>
        ///  [请求类] 玩家复活操作
        /// </summary>
        ReqPlayerReviveCode = 197,
        /// <summary>
        ///  [响应类] 玩家复活操作
        /// </summary>
        ResPlayerReviveCode = 198,
        /// <summary>
        ///  [请求类] 加成等级和经验物品
        /// </summary>
        ReqUseAddExpItemCode = 199,
        /// <summary>
        ///  [响应类] 加成等级和经验物品
        /// </summary>
        ResUseAddExpItemCode = 200,
        /// <summary>
        ///  [请求类] 礼包物品
        /// </summary>
        ReqUseGiftBagItemCode = 201,
        /// <summary>
        ///  [响应类] 礼包物品
        /// </summary>
        ResUseGiftBagItemCode = 202,
        /// <summary>
        ///  [请求类] 通知客户端更新血量蓝量内力
        /// </summary>
        ReqUpdateObjectHPMPSPCode = 203,
        /// <summary>
        ///  [响应类] 通知客户端更新血量蓝量内力
        /// </summary>
        ResUpdateObjectHPMPSPCode = 204,
        /// <summary>
        ///  [请求类] 使用掉落金币物品
        /// </summary>
        ReqUseDropCoinItemCode = 205,
        /// <summary>
        ///  [响应类] 使用掉落金币物品
        /// </summary>
        ResUseDropCoinItemCode = 206,
        /// <summary>
        ///  [请求类] 丢弃物品
        /// </summary>
        ReqDiscardItemCode = 207,
        /// <summary>
        ///  [响应类] 丢弃物品
        /// </summary>
        ResDiscardItemCode = 208,
        /// <summary>
        ///  [请求类] 初始化排行榜信息(开启服务器时请求)
        /// </summary>
        ReqGetRankingListCode = 209,
        /// <summary>
        ///  [响应类] 初始化排行榜信息(开启服务器时请求)
        /// </summary>
        ResGetRankingListCode = 210,
        /// <summary>
        ///  [请求类] 称号激活通知
        /// </summary>
        ReqTitleActiveNoticeCode = 211,
        /// <summary>
        ///  [响应类] 称号激活通知
        /// </summary>
        ResTitleActiveNoticeCode = 212,
        /// <summary>
        ///  [请求类] 拆分物品
        /// </summary>
        ReqSplitItemsCode = 213,
        /// <summary>
        ///  [响应类] 拆分物品
        /// </summary>
        ResSplitItemsCode = 214,
        /// <summary>
        ///  [请求类] 设置佩戴称号
        /// </summary>
        ReqSetAdronTitleCode = 215,
        /// <summary>
        ///  [响应类] 设置佩戴称号
        /// </summary>
        ResSetAdronTitleCode = 216,
        /// <summary>
        ///  [请求类] 加载邮件
        /// </summary>
        ReqLoadMailCode = 217,
        /// <summary>
        ///  [响应类] 加载邮件
        /// </summary>
        ResLoadMailCode = 218,
        /// <summary>
        ///  [请求类] 阅读邮件
        /// </summary>
        ReqReadMailCode = 219,
        /// <summary>
        ///  [响应类] 阅读邮件
        /// </summary>
        ResReadMailCode = 220,
        /// <summary>
        ///  [请求类] 第1步：客户端发送玩家登陆包
        /// </summary>
        ReqPlayerLogin0100Code = 221,
        /// <summary>
        ///  [响应类] 第1步：客户端发送玩家登陆包
        /// </summary>
        ResPlayerLogin0100Code = 222,
        /// <summary>
        ///  [请求类] 第2步：通知缓存加载玩家数据
        /// </summary>
        ReqPlayerLogin0101Code = 223,
        /// <summary>
        ///  [响应类] 第2步：通知缓存加载玩家数据
        /// </summary>
        ResPlayerLogin0101Code = 224,
        /// <summary>
        ///  [请求类] 第3步：告诉客户端玩家角色信息
        /// </summary>
        ReqPlayerLogin0102Code = 225,
        /// <summary>
        ///  [响应类] 第3步：告诉客户端玩家角色信息
        /// </summary>
        ResPlayerLogin0102Code = 226,
        /// <summary>
        ///  [请求类] 第1步：客户端发送创建角色包
        /// </summary>
        ReqCreateRole0100Code = 227,
        /// <summary>
        ///  [响应类] 第1步：客户端发送创建角色包
        /// </summary>
        ResCreateRole0100Code = 228,
        /// <summary>
        ///  [请求类] 第2步：检查玩家昵称是否可用
        /// </summary>
        ReqCreateRole0101Code = 229,
        /// <summary>
        ///  [响应类] 第2步：检查玩家昵称是否可用
        /// </summary>
        ResCreateRole0101Code = 230,
        /// <summary>
        ///  [请求类] 创建新邮件
        /// </summary>
        ReqCreateMailNoticeCode = 231,
        /// <summary>
        ///  [响应类] 创建新邮件
        /// </summary>
        ResCreateMailNoticeCode = 232,
        /// <summary>
        ///  [请求类] 第1步：客户端发送进入游戏数据包
        /// </summary>
        ReqEnterGame001Code = 233,
        /// <summary>
        ///  [响应类] 第1步：客户端发送进入游戏数据包
        /// </summary>
        ResEnterGame001Code = 234,
        /// <summary>
        ///  [请求类] 第2步：通知登陆服更新玩家状态和世界服创建玩家对象
        /// </summary>
        ReqEnterGame002Code = 235,
        /// <summary>
        ///  [响应类] 第2步：通知登陆服更新玩家状态和世界服创建玩家对象
        /// </summary>
        ResEnterGame002Code = 236,
        /// <summary>
        ///  [请求类] 第3步：开始从缓存服上获取玩家信息
        /// </summary>
        ReqEnterGame003Code = 237,
        /// <summary>
        ///  [响应类] 第3步：开始从缓存服上获取玩家信息
        /// </summary>
        ResEnterGame003Code = 238,
        /// <summary>
        ///  [请求类] 第4步：从缓存服务器发送角色基本信息
        /// </summary>
        ReqEnterGame004Code = 239,
        /// <summary>
        ///  [响应类] 第4步：从缓存服务器发送角色基本信息
        /// </summary>
        ResEnterGame004Code = 240,
        /// <summary>
        ///  [请求类] 第6步：从缓存服发送玩家物品数据
        /// </summary>
        ReqEnterGame006Code = 241,
        /// <summary>
        ///  [响应类] 第6步：从缓存服发送玩家物品数据
        /// </summary>
        ResEnterGame006Code = 242,
        /// <summary>
        ///  [请求类] 物品变更通知(客户端提示)
        /// </summary>
        ReqItemAlterNotifyCode = 243,
        /// <summary>
        ///  [响应类] 物品变更通知(客户端提示)
        /// </summary>
        ResItemAlterNotifyCode = 244,
        /// <summary>
        ///  [请求类] 第1步：通过网关发送进入地图数据包
        /// </summary>
        ReqEnterMap001Code = 245,
        /// <summary>
        ///  [响应类] 第1步：通过网关发送进入地图数据包
        /// </summary>
        ResEnterMap001Code = 246,
        /// <summary>
        ///  [请求类] 第2步：通知地图服创建玩家对象
        /// </summary>
        ReqEnterMap002Code = 247,
        /// <summary>
        ///  [响应类] 第2步：通知地图服创建玩家对象
        /// </summary>
        ResEnterMap002Code = 248,
        /// <summary>
        ///  [请求类] 第3步：开始从世界服获取玩家数据
        /// </summary>
        ReqEnterMap003Code = 249,
        /// <summary>
        ///  [响应类] 第3步：开始从世界服获取玩家数据
        /// </summary>
        ResEnterMap003Code = 250,
        /// <summary>
        ///  [请求类] 第4步：发送玩家基础数据到地图服
        /// </summary>
        ReqEnterMap004Code = 251,
        /// <summary>
        ///  [响应类] 第4步：发送玩家基础数据到地图服
        /// </summary>
        ResEnterMap004Code = 252,
        /// <summary>
        ///  [请求类] 领取附件完成
        /// </summary>
        ReqGetMailAppendNoticeCode = 253,
        /// <summary>
        ///  [响应类] 领取附件完成
        /// </summary>
        ResGetMailAppendNoticeCode = 254,
        /// <summary>
        ///  [请求类] 第7步：世界服发送给客户端进入地图
        /// </summary>
        ReqEnterMap007Code = 255,
        /// <summary>
        ///  [响应类] 第7步：世界服发送给客户端进入地图
        /// </summary>
        ResEnterMap007Code = 256,
        /// <summary>
        ///  [请求类] 创建队伍(返回队伍信息)
        /// </summary>
        ReqCreateGroupCode = 257,
        /// <summary>
        ///  [响应类] 创建队伍(返回队伍信息)
        /// </summary>
        ResCreateGroupCode = 258,
        /// <summary>
        ///  [请求类] 邀请组队
        /// </summary>
        ReqInviteGroupCode = 259,
        /// <summary>
        ///  [响应类] 邀请组队
        /// </summary>
        ResInviteGroupCode = 260,
        /// <summary>
        ///  [请求类] 邀请组队应答(客户端通知服务端)
        /// </summary>
        ReqInviteGroupReplyCode = 261,
        /// <summary>
        ///  [响应类] 邀请组队应答(客户端通知服务端)
        /// </summary>
        ResInviteGroupReplyCode = 262,
        /// <summary>
        ///  [请求类] 组员变更通知
        /// </summary>
        ReqAlterGroupItemCode = 263,
        /// <summary>
        ///  [响应类] 组员变更通知
        /// </summary>
        ResAlterGroupItemCode = 264,
        /// <summary>
        ///  [请求类] 申请加入队伍
        /// </summary>
        ReqApplyJoinGroupCode = 265,
        /// <summary>
        ///  [响应类] 申请加入队伍
        /// </summary>
        ResApplyJoinGroupCode = 266,
        /// <summary>
        ///  [请求类] 离开队伍
        /// </summary>
        ReqLeaveGroupCode = 267,
        /// <summary>
        ///  [响应类] 离开队伍
        /// </summary>
        ResLeaveGroupCode = 268,
        /// <summary>
        ///  [请求类] 周围队伍信息(返回队长信息)
        /// </summary>
        ReqGetNearbyGroupCode = 269,
        /// <summary>
        ///  [响应类] 周围队伍信息(返回队长信息)
        /// </summary>
        ResGetNearbyGroupCode = 270,
        /// <summary>
        ///  [请求类] 查看玩家装备
        /// </summary>
        ReqViewPlayerEquipCode = 271,
        /// <summary>
        ///  [响应类] 查看玩家装备
        /// </summary>
        ResViewPlayerEquipCode = 272,
        /// <summary>
        ///  [请求类] 转移武器幸运与极品属性值
        /// </summary>
        ReqTransferEquipLuckyCode = 273,
        /// <summary>
        ///  [响应类] 转移武器幸运与极品属性值
        /// </summary>
        ResTransferEquipLuckyCode = 274,
        /// <summary>
        ///  [请求类] 附近玩家列表
        /// </summary>
        ReqGetNearbyPlayerCode = 275,
        /// <summary>
        ///  [响应类] 附近玩家列表
        /// </summary>
        ResGetNearbyPlayerCode = 276,
        /// <summary>
        ///  [请求类] 武器幸运转移通知CacheServer
        /// </summary>
        ReqTransferLuckyNoticeCode = 277,
        /// <summary>
        ///  [响应类] 武器幸运转移通知CacheServer
        /// </summary>
        ResTransferLuckyNoticeCode = 278,
        /// <summary>
        ///  [请求类] 申请组队应答
        /// </summary>
        ReqApplyJoinGroupReplyCode = 279,
        /// <summary>
        ///  [响应类] 申请组队应答
        /// </summary>
        ResApplyJoinGroupReplyCode = 280,
        /// <summary>
        ///  [请求类] 通知缓存服新增物品
        /// </summary>
        ReqNoticeAddItemCode = 281,
        /// <summary>
        ///  [响应类] 通知缓存服新增物品
        /// </summary>
        ResNoticeAddItemCode = 282,
        /// <summary>
        ///  [请求类] 通知缓存服更新物品数量
        /// </summary>
        ReqNoticeUpdateItemNumCode = 283,
        /// <summary>
        ///  [响应类] 通知缓存服更新物品数量
        /// </summary>
        ResNoticeUpdateItemNumCode = 284,
        /// <summary>
        ///  [请求类] 通知缓存服删除物品
        /// </summary>
        ReqNoticeDeleteItemCode = 285,
        /// <summary>
        ///  [响应类] 通知缓存服删除物品
        /// </summary>
        ResNoticeDeleteItemCode = 286,
        /// <summary>
        ///  [请求类] 通知缓存服更新物品存放位置
        /// </summary>
        ReqNoticeUpdateItemPosCode = 287,
        /// <summary>
        ///  [响应类] 通知缓存服更新物品存放位置
        /// </summary>
        ResNoticeUpdateItemPosCode = 288,
        /// <summary>
        ///  [请求类] 通知缓存服更新物品强化属性
        /// </summary>
        ReqNoticeUpdateItemMaxStrengthCode = 289,
        /// <summary>
        ///  [响应类] 通知缓存服更新物品强化属性
        /// </summary>
        ResNoticeUpdateItemMaxStrengthCode = 290,
        /// <summary>
        ///  [请求类] 通知缓存服更新物品注灵属性
        /// </summary>
        ReqNoticeUpdateItemFixSoulCode = 291,
        /// <summary>
        ///  [响应类] 通知缓存服更新物品注灵属性
        /// </summary>
        ResNoticeUpdateItemFixSoulCode = 292,
        /// <summary>
        ///  [请求类] 通知缓存服更新物品幸运值属性
        /// </summary>
        ReqNoticeUpdateItemLuckyCode = 293,
        /// <summary>
        ///  [响应类] 通知缓存服更新物品幸运值属性
        /// </summary>
        ResNoticeUpdateItemLuckyCode = 294,
        /// <summary>
        ///  [请求类] 移除队员
        /// </summary>
        ReqRemoveGroupMemberCode = 295,
        /// <summary>
        ///  [响应类] 移除队员
        /// </summary>
        ResRemoveGroupMemberCode = 296,
        /// <summary>
        ///  [请求类] 委任队长
        /// </summary>
        ReqEntrustGroupLeaderCode = 297,
        /// <summary>
        ///  [响应类] 委任队长
        /// </summary>
        ResEntrustGroupLeaderCode = 298,
        /// <summary>
        ///  [请求类] 通知客户端物品数量改变
        /// </summary>
        ReqUpdateItemNumCode = 299,
        /// <summary>
        ///  [响应类] 通知客户端物品数量改变
        /// </summary>
        ResUpdateItemNumCode = 300,
        /// <summary>
        ///  [请求类] 通知客户端新增物品
        /// </summary>
        ReqAddPlayerItemCode = 301,
        /// <summary>
        ///  [响应类] 通知客户端新增物品
        /// </summary>
        ResAddPlayerItemCode = 302,
        /// <summary>
        ///  [请求类] 通知客户端更新物品强化属性
        /// </summary>
        ReqUpdateItemStrengthCode = 303,
        /// <summary>
        ///  [响应类] 通知客户端更新物品强化属性
        /// </summary>
        ResUpdateItemStrengthCode = 304,
        /// <summary>
        ///  [请求类] 通知客户端更新物品存放位置
        /// </summary>
        ReqUpdateItemPosCode = 305,
        /// <summary>
        ///  [响应类] 通知客户端更新物品存放位置
        /// </summary>
        ResUpdateItemPosCode = 306,
        /// <summary>
        ///  [请求类] 通知客户端更新物品注灵属性
        /// </summary>
        ReqUpdateItemFixSoulCode = 307,
        /// <summary>
        ///  [响应类] 通知客户端更新物品注灵属性
        /// </summary>
        ResUpdateItemFixSoulCode = 308,
        /// <summary>
        ///  [请求类] 通知客户端更新物品幸运值属性
        /// </summary>
        ReqUpdateItemLuckyCode = 309,
        /// <summary>
        ///  [响应类] 通知客户端更新物品幸运值属性
        /// </summary>
        ResUpdateItemLuckyCode = 310,
        /// <summary>
        ///  [请求类] 更新模板ID
        /// </summary>
        ReqUpdateTmpIDCode = 311,
        /// <summary>
        ///  [响应类] 更新模板ID
        /// </summary>
        ResUpdateTmpIDCode = 312,
        /// <summary>
        ///  [请求类] 通知地图服务器玩家仍物品
        /// </summary>
        ReqNoticeDiscardItemCode = 313,
        /// <summary>
        ///  [响应类] 通知地图服务器玩家仍物品
        /// </summary>
        ResNoticeDiscardItemCode = 314,
        /// <summary>
        ///  [请求类] 初始化全局数据001：初始化排行榜信息
        /// </summary>
        ReqInitializeServer001Code = 315,
        /// <summary>
        ///  [响应类] 初始化全局数据001：初始化排行榜信息
        /// </summary>
        ResInitializeServer001Code = 316,
        /// <summary>
        ///  [请求类] 初始化全局数据002：加载行会列表信息
        /// </summary>
        ReqInitializeServer002Code = 317,
        /// <summary>
        ///  [响应类] 初始化全局数据002：加载行会列表信息
        /// </summary>
        ResInitializeServer002Code = 318,
        /// <summary>
        ///  [请求类] 角色捡起物品（请求协议M2W）
        /// </summary>
        ReqNoticePickUpItemCode = 319,
        /// <summary>
        ///  [响应类] 角色捡起物品（请求协议M2W）
        /// </summary>
        ResNoticePickUpItemCode = 320,
        /// <summary>
        ///  [请求类] 初始化全局数据003：加载行会成员列表
        /// </summary>
        ReqInitializeServer003Code = 321,
        /// <summary>
        ///  [响应类] 初始化全局数据003：加载行会成员列表
        /// </summary>
        ResInitializeServer003Code = 322,
        /// <summary>
        ///  [请求类] 通知拾取物品成功
        /// </summary>
        ReqNoticePickItemSuccessCode = 323,
        /// <summary>
        ///  [响应类] 通知拾取物品成功
        /// </summary>
        ResNoticePickItemSuccessCode = 324,
        /// <summary>
        ///  [请求类] 客户端捡东西协议
        /// </summary>
        ReqPickUpItemCode = 325,
        /// <summary>
        ///  [响应类] 客户端捡东西协议
        /// </summary>
        ResPickUpItemCode = 326,
        /// <summary>
        ///  [请求类] 刷新怪物,此协议产生的怪物无法重生(左边为系统刷怪，右边为玩家刷怪)
        /// </summary>
        ReqSpawnMonsterCode = 327,
        /// <summary>
        ///  [响应类] 刷新怪物,此协议产生的怪物无法重生(左边为系统刷怪，右边为玩家刷怪)
        /// </summary>
        ResSpawnMonsterCode = 328,
        /// <summary>
        ///  [请求类] 进入副本协议
        /// </summary>
        ReqEnterDungeonCode = 329,
        /// <summary>
        ///  [响应类] 进入副本协议
        /// </summary>
        ResEnterDungeonCode = 330,
        /// <summary>
        ///  [请求类] 生成NPC,GM测试
        /// </summary>
        ReqSpawnNPCCode = 331,
        /// <summary>
        ///  [响应类] 生成NPC,GM测试
        /// </summary>
        ResSpawnNPCCode = 332,
        /// <summary>
        ///  [请求类] 创建行会
        /// </summary>
        ReqCreateGuildCode = 333,
        /// <summary>
        ///  [响应类] 创建行会
        /// </summary>
        ResCreateGuildCode = 334,
        /// <summary>
        ///  [请求类] 获取行会列表
        /// </summary>
        ReqGetGuildListCode = 335,
        /// <summary>
        ///  [响应类] 获取行会列表
        /// </summary>
        ResGetGuildListCode = 336,
        /// <summary>
        ///  [请求类] 加载行会申请列表
        /// </summary>
        ReqGetGuildApplyListCode = 337,
        /// <summary>
        ///  [响应类] 加载行会申请列表
        /// </summary>
        ResGetGuildApplyListCode = 338,
        /// <summary>
        ///  [请求类] 初始化全局数据004：加载所有行会物品
        /// </summary>
        ReqInitializeServer004Code = 339,
        /// <summary>
        ///  [响应类] 初始化全局数据004：加载所有行会物品
        /// </summary>
        ResInitializeServer004Code = 340,
        /// <summary>
        ///  [请求类] 请求登陆信息完成
        /// </summary>
        ReqEnterMap008Code = 341,
        /// <summary>
        ///  [响应类] 请求登陆信息完成
        /// </summary>
        ResEnterMap008Code = 342,
        /// <summary>
        ///  [请求类] 申请加入公会
        /// </summary>
        ReqApplyJoinGuildCode = 343,
        /// <summary>
        ///  [响应类] 申请加入公会
        /// </summary>
        ResApplyJoinGuildCode = 344,
        /// <summary>
        ///  [请求类] 通知world增加经验
        /// </summary>
        ReqAddExpCode = 345,
        /// <summary>
        ///  [响应类] 通知world增加经验
        /// </summary>
        ResAddExpCode = 346,
        /// <summary>
        ///  [请求类] 申请加入公会应答
        /// </summary>
        ReqApplyJoinGuildReplyCode = 347,
        /// <summary>
        ///  [响应类] 申请加入公会应答
        /// </summary>
        ResApplyJoinGuildReplyCode = 348,
        /// <summary>
        ///  [请求类] 通知CacheServer移除申请成员
        /// </summary>
        ReqNoticeRemoveApplyMemberCode = 349,
        /// <summary>
        ///  [响应类] 通知CacheServer移除申请成员
        /// </summary>
        ResNoticeRemoveApplyMemberCode = 350,
        /// <summary>
        ///  [请求类] 通知CacheServer新增公会成员
        /// </summary>
        ReqNoticeAddGuildMemberCode = 351,
        /// <summary>
        ///  [响应类] 通知CacheServer新增公会成员
        /// </summary>
        ResNoticeAddGuildMemberCode = 352,
        /// <summary>
        ///  [请求类] 修改行会公告
        /// </summary>
        ReqModifyGuildNoteCode = 353,
        /// <summary>
        ///  [响应类] 修改行会公告
        /// </summary>
        ResModifyGuildNoteCode = 354,
        /// <summary>
        ///  [请求类] 加载行会日志信息
        /// </summary>
        ReqInitializeServer005Code = 355,
        /// <summary>
        ///  [响应类] 加载行会日志信息
        /// </summary>
        ResInitializeServer005Code = 356,
        /// <summary>
        ///  [请求类] 通知CacheServer创建公会
        /// </summary>
        ReqNoticeGreateGuildCode = 357,
        /// <summary>
        ///  [响应类] 通知CacheServer创建公会
        /// </summary>
        ResNoticeGreateGuildCode = 358,
        /// <summary>
        ///  [请求类] 退出行会
        /// </summary>
        ReqLeaveGuildCode = 359,
        /// <summary>
        ///  [响应类] 退出行会
        /// </summary>
        ResLeaveGuildCode = 360,
        /// <summary>
        ///  [请求类] 获取行会基本信息
        /// </summary>
        ReqNoticeGuildInfoCode = 361,
        /// <summary>
        ///  [响应类] 获取行会基本信息
        /// </summary>
        ResNoticeGuildInfoCode = 362,
        /// <summary>
        ///  [请求类] 通知CacheServer添加行会日志
        /// </summary>
        ReqNoticeAddGuildLogCode = 363,
        /// <summary>
        ///  [响应类] 通知CacheServer添加行会日志
        /// </summary>
        ResNoticeAddGuildLogCode = 364,
        /// <summary>
        ///  [请求类] 变更行会职位
        /// </summary>
        ReqAlterGuildPositionCode = 365,
        /// <summary>
        ///  [响应类] 变更行会职位
        /// </summary>
        ResAlterGuildPositionCode = 366,
        /// <summary>
        ///  [请求类] 处理行会物品
        /// </summary>
        ReqTreatedGuildItemCode = 367,
        /// <summary>
        ///  [响应类] 处理行会物品
        /// </summary>
        ResTreatedGuildItemCode = 368,
        /// <summary>
        ///  [请求类] 新增行会仓库物品
        /// </summary>
        ReqNoticeAddGuildItemCode = 369,
        /// <summary>
        ///  [响应类] 新增行会仓库物品
        /// </summary>
        ResNoticeAddGuildItemCode = 370,
        /// <summary>
        ///  [请求类] 通知CacheServer删除行会仓库物品
        /// </summary>
        ReqNoticeDeleteGuildItemCode = 371,
        /// <summary>
        ///  [响应类] 通知CacheServer删除行会仓库物品
        /// </summary>
        ResNoticeDeleteGuildItemCode = 372,
        /// <summary>
        ///  [请求类] 通知客户端更新血量蓝量内力最大值和当前值
        /// </summary>
        ReqUpdateObjectMaxHPMPSPCode = 373,
        /// <summary>
        ///  [响应类] 通知客户端更新血量蓝量内力最大值和当前值
        /// </summary>
        ResUpdateObjectMaxHPMPSPCode = 374,
        /// <summary>
        ///  [请求类] 取消申请加入公会
        /// </summary>
        ReqCancelApplyJoinGuildCode = 375,
        /// <summary>
        ///  [响应类] 取消申请加入公会
        /// </summary>
        ResCancelApplyJoinGuildCode = 376,
        /// <summary>
        ///  [请求类] 通知客户端行会物品列表
        /// </summary>
        ReqNoticeGuildItemListCode = 377,
        /// <summary>
        ///  [响应类] 通知客户端行会物品列表
        /// </summary>
        ResNoticeGuildItemListCode = 378,
        /// <summary>
        ///  [请求类] 获取行会日志列表
        /// </summary>
        ReqGetGuildLogListCode = 379,
        /// <summary>
        ///  [响应类] 获取行会日志列表
        /// </summary>
        ResGetGuildLogListCode = 380,
        /// <summary>
        ///  [请求类] 增加公会物品
        /// </summary>
        ReqAddGuildItemCode = 381,
        /// <summary>
        ///  [响应类] 增加公会物品
        /// </summary>
        ResAddGuildItemCode = 382,
        /// <summary>
        ///  [请求类] 踢出行会
        /// </summary>
        ReqKickoutGuildCode = 383,
        /// <summary>
        ///  [响应类] 踢出行会
        /// </summary>
        ResKickoutGuildCode = 384,
        /// <summary>
        ///  [请求类] 委任会长
        /// </summary>
        ReqDeputeGuildLeaderCode = 385,
        /// <summary>
        ///  [响应类] 委任会长
        /// </summary>
        ResDeputeGuildLeaderCode = 386,
        /// <summary>
        ///  [请求类] 新增行会成员
        /// </summary>
        ReqChangeGuildMemberCode = 387,
        /// <summary>
        ///  [响应类] 新增行会成员
        /// </summary>
        ResChangeGuildMemberCode = 388,
        /// <summary>
        ///  [请求类] 邀请交易
        /// </summary>
        ReqInviteTradeCode = 389,
        /// <summary>
        ///  [响应类] 邀请交易
        /// </summary>
        ResInviteTradeCode = 390,
        /// <summary>
        ///  [请求类] 邀请交易应答
        /// </summary>
        ReqInviteTradeReplyCode = 391,
        /// <summary>
        ///  [响应类] 邀请交易应答
        /// </summary>
        ResInviteTradeReplyCode = 392,
        /// <summary>
        ///  [请求类] 地图触发事件
        /// </summary>
        ReqMapEventCode = 393,
        /// <summary>
        ///  [响应类] 地图触发事件
        /// </summary>
        ResMapEventCode = 394,
        /// <summary>
        ///  [请求类] 添加交易栏物品
        /// </summary>
        ReqAddTradeItemCode = 395,
        /// <summary>
        ///  [响应类] 添加交易栏物品
        /// </summary>
        ResAddTradeItemCode = 396,
        /// <summary>
        ///  [请求类] 移除交易栏物品
        /// </summary>
        ReqRemoveTradeItemCode = 397,
        /// <summary>
        ///  [响应类] 移除交易栏物品
        /// </summary>
        ResRemoveTradeItemCode = 398,
        /// <summary>
        ///  [请求类] 开始交易
        /// </summary>
        ReqStartTradeCode = 399,
        /// <summary>
        ///  [响应类] 开始交易
        /// </summary>
        ResStartTradeCode = 400,
        /// <summary>
        ///  [请求类] 取消解散行会
        /// </summary>
        ReqCancelDisbandGuildCode = 401,
        /// <summary>
        ///  [响应类] 取消解散行会
        /// </summary>
        ResCancelDisbandGuildCode = 402,
        /// <summary>
        ///  [请求类] 交易完成
        /// </summary>
        ReqTradeCompleteCode = 403,
        /// <summary>
        ///  [响应类] 交易完成
        /// </summary>
        ResTradeCompleteCode = 404,
        /// <summary>
        ///  [请求类] 取消交易
        /// </summary>
        ReqCancelTradeCode = 405,
        /// <summary>
        ///  [响应类] 取消交易
        /// </summary>
        ResCancelTradeCode = 406,
        /// <summary>
        ///  [请求类] 开始摆摊
        /// </summary>
        ReqStartRetailCode = 407,
        /// <summary>
        ///  [响应类] 开始摆摊
        /// </summary>
        ResStartRetailCode = 408,
        /// <summary>
        ///  [请求类] 购买摊位物品
        /// </summary>
        ReqBuyRetailItemCode = 409,
        /// <summary>
        ///  [响应类] 购买摊位物品
        /// </summary>
        ResBuyRetailItemCode = 410,
        /// <summary>
        ///  [请求类] 收摊
        /// </summary>
        ReqCloseRetailCode = 411,
        /// <summary>
        ///  [响应类] 收摊
        /// </summary>
        ResCloseRetailCode = 412,
        /// <summary>
        ///  [请求类] 查看摊位信息
        /// </summary>
        ReqViewRetailInfoCode = 413,
        /// <summary>
        ///  [响应类] 查看摊位信息
        /// </summary>
        ResViewRetailInfoCode = 414,
        /// <summary>
        ///  [请求类] 修改交易金币
        /// </summary>
        ReqAlterTradeMoneyCode = 415,
        /// <summary>
        ///  [响应类] 修改交易金币
        /// </summary>
        ResAlterTradeMoneyCode = 416,
        /// <summary>
        ///  [请求类] 新增摆摊日志
        /// </summary>
        ReqAddRetailLogCode = 417,
        /// <summary>
        ///  [响应类] 新增摆摊日志
        /// </summary>
        ResAddRetailLogCode = 418,
        /// <summary>
        ///  [请求类] 激活战神
        /// </summary>
        ReqActivePetCode = 419,
        /// <summary>
        ///  [响应类] 激活战神
        /// </summary>
        ResActivePetCode = 420,
        /// <summary>
        ///  [请求类] 设置出战战神
        /// </summary>
        ReqSummonPetCode = 421,
        /// <summary>
        ///  [响应类] 设置出战战神
        /// </summary>
        ResSummonPetCode = 422,
        /// <summary>
        ///  [请求类] 召唤战神
        /// </summary>
        ReqNoticeSummonPetCode = 423,
        /// <summary>
        ///  [响应类] 召唤战神
        /// </summary>
        ResNoticeSummonPetCode = 424,
        /// <summary>
        ///  [请求类] 挂机辅助设置
        /// </summary>
        ReqSetAssistCode = 425,
        /// <summary>
        ///  [响应类] 挂机辅助设置
        /// </summary>
        ResSetAssistCode = 426,
        /// <summary>
        ///  [请求类] 通知客户端开始被击退
        /// </summary>
        ReqNoticeObjectBeginBeatBackCode = 427,
        /// <summary>
        ///  [响应类] 通知客户端开始被击退
        /// </summary>
        ResNoticeObjectBeginBeatBackCode = 428,
        /// <summary>
        ///  [请求类] 加载辅助设置
        /// </summary>
        ReqEnterMap105Code = 429,
        /// <summary>
        ///  [响应类] 加载辅助设置
        /// </summary>
        ResEnterMap105Code = 430,
        /// <summary>
        ///  [请求类] 加载智能战斗设置和自动拾取
        /// </summary>
        ReqEnterMap205Code = 431,
        /// <summary>
        ///  [响应类] 加载智能战斗设置和自动拾取
        /// </summary>
        ResEnterMap205Code = 432,
        /// <summary>
        ///  [请求类] 发送聊天消息
        /// </summary>
        ReqChatMessageCode = 433,
        /// <summary>
        ///  [响应类] 发送聊天消息
        /// </summary>
        ResChatMessageCode = 434,
        /// <summary>
        ///  [请求类] 客户端请求领取任务奖励
        /// </summary>
        ReqGetTaskAwardCode = 435,
        /// <summary>
        ///  [响应类] 客户端请求领取任务奖励
        /// </summary>
        ResGetTaskAwardCode = 436,
        /// <summary>
        ///  [请求类] 客户端请求接受任务（返回协议为通知客户端任务变更）
        /// </summary>
        ReqTakeTaskCode = 437,
        /// <summary>
        ///  [响应类] 客户端请求接受任务（返回协议为通知客户端任务变更）
        /// </summary>
        ResTakeTaskCode = 438,
        /// <summary>
        ///  [请求类] 通知客户端更新任务信息
        /// </summary>
        ReqUpdateTaskInfoCode = 439,
        /// <summary>
        ///  [响应类] 通知客户端更新任务信息
        /// </summary>
        ResUpdateTaskInfoCode = 440,
        /// <summary>
        ///  [请求类] 任务传送
        /// </summary>
        ReqTaskTransferCode = 441,
        /// <summary>
        ///  [响应类] 任务传送
        /// </summary>
        ResTaskTransferCode = 442,
        /// <summary>
        ///  [请求类] 获取排行榜信息
        /// </summary>
        ReqGetRankingInfoCode = 443,
        /// <summary>
        ///  [响应类] 获取排行榜信息
        /// </summary>
        ResGetRankingInfoCode = 444,
        /// <summary>
        ///  [请求类] 领取在线奖励
        /// </summary>
        ReqGetOnlineAwardCode = 445,
        /// <summary>
        ///  [响应类] 领取在线奖励
        /// </summary>
        ResGetOnlineAwardCode = 446,
        /// <summary>
        ///  [请求类] map通知world副本结束
        /// </summary>
        ReqFinishDungeonCode = 447,
        /// <summary>
        ///  [响应类] map通知world副本结束
        /// </summary>
        ResFinishDungeonCode = 448,
        /// <summary>
        ///  [请求类] 请求副本奖励
        /// </summary>
        ReqGetDungeonAwardCode = 449,
        /// <summary>
        ///  [响应类] 请求副本奖励
        /// </summary>
        ResGetDungeonAwardCode = 450,
        /// <summary>
        ///  [请求类] 通知客户端副本可进入次数信息
        /// </summary>
        ReqUpdataDungeonInfoCode = 451,
        /// <summary>
        ///  [响应类] 通知客户端副本可进入次数信息
        /// </summary>
        ResUpdataDungeonInfoCode = 452,
        /// <summary>
        ///  [请求类] 客户端请求退出副本
        /// </summary>
        ReqExitDungeonCode = 453,
        /// <summary>
        ///  [响应类] 客户端请求退出副本
        /// </summary>
        ResExitDungeonCode = 454,
        /// <summary>
        ///  [请求类] 新增头衔
        /// </summary>
        ReqAddTitleCode = 455,
        /// <summary>
        ///  [响应类] 新增头衔
        /// </summary>
        ResAddTitleCode = 456,
        /// <summary>
        ///  [请求类] 移除头衔称号
        /// </summary>
        ReqRemoveTitleCode = 457,
        /// <summary>
        ///  [响应类] 移除头衔称号
        /// </summary>
        ResRemoveTitleCode = 458,
        /// <summary>
        ///  [请求类] 自己的排名信息
        /// </summary>
        ReqOwnerRankingInfoCode = 459,
        /// <summary>
        ///  [响应类] 自己的排名信息
        /// </summary>
        ResOwnerRankingInfoCode = 460,
        /// <summary>
        ///  [请求类] 传送到指定位置
        /// </summary>
        ReqTransferToMapCode = 461,
        /// <summary>
        ///  [响应类] 传送到指定位置
        /// </summary>
        ResTransferToMapCode = 462,
        /// <summary>
        ///  [请求类] 通知客户端有木有宠物
        /// </summary>
        ReqUpdateIsExistPetCode = 463,
        /// <summary>
        ///  [响应类] 通知客户端有木有宠物
        /// </summary>
        ResUpdateIsExistPetCode = 464,
        /// <summary>
        ///  [请求类] 更新阵营
        /// </summary>
        ReqUpDateCampCode = 465,
        /// <summary>
        ///  [响应类] 更新阵营
        /// </summary>
        ResUpDateCampCode = 466,
        /// <summary>
        ///  [请求类] 设置音效
        /// </summary>
        ReqSetMusicModeCode = 467,
        /// <summary>
        ///  [响应类] 设置音效
        /// </summary>
        ResSetMusicModeCode = 468,
        /// <summary>
        ///  [请求类] 怪物死亡
        /// </summary>
        ReqMonsterDieCode = 469,
        /// <summary>
        ///  [响应类] 怪物死亡
        /// </summary>
        ResMonsterDieCode = 470,
        /// <summary>
        ///  [请求类] Boss复活
        /// </summary>
        ReqMonsterReviveCode = 471,
        /// <summary>
        ///  [响应类] Boss复活
        /// </summary>
        ResMonsterReviveCode = 472,
        /// <summary>
        ///  [请求类] 地图Boss状态
        /// </summary>
        ReqMonsterStateCode = 473,
        /// <summary>
        ///  [响应类] 地图Boss状态
        /// </summary>
        ResMonsterStateCode = 474,
        /// <summary>
        ///  [请求类] 刷新任务等级
        /// </summary>
        ReqRefreshTaskRankCode = 475,
        /// <summary>
        ///  [响应类] 刷新任务等级
        /// </summary>
        ResRefreshTaskRankCode = 476,
        /// <summary>
        ///  [请求类] 从传送员进入地图
        /// </summary>
        ReqNPCTransferToMapCode = 477,
        /// <summary>
        ///  [响应类] 从传送员进入地图
        /// </summary>
        ResNPCTransferToMapCode = 478,
        /// <summary>
        ///  [请求类] 领取每日任务
        /// </summary>
        ReqTakeDailyTaskCode = 479,
        /// <summary>
        ///  [响应类] 领取每日任务
        /// </summary>
        ResTakeDailyTaskCode = 480,
        /// <summary>
        ///  [请求类] 更新每日任务条件数量
        /// </summary>
        ReqUpdateDailyTaskConditonNumCode = 481,
        /// <summary>
        ///  [响应类] 更新每日任务条件数量
        /// </summary>
        ResUpdateDailyTaskConditonNumCode = 482,
        /// <summary>
        ///  [请求类] 领取每日任务奖励
        /// </summary>
        ReqTakeDailyTaskAwardCode = 483,
        /// <summary>
        ///  [响应类] 领取每日任务奖励
        /// </summary>
        ResTakeDailyTaskAwardCode = 484,
        /// <summary>
        ///  [请求类] 升级品阶
        /// </summary>
        ReqUpgradeOfficialRankCode = 485,
        /// <summary>
        ///  [响应类] 升级品阶
        /// </summary>
        ResUpgradeOfficialRankCode = 486,
        /// <summary>
        ///  [请求类] 随机传送
        /// </summary>
        ReqNoticeRandomTransferCode = 487,
        /// <summary>
        ///  [响应类] 随机传送
        /// </summary>
        ResNoticeRandomTransferCode = 488,
        /// <summary>
        ///  [请求类] 沙巴克之主召唤boss
        /// </summary>
        ReqSummerShabakBossCode = 489,
        /// <summary>
        ///  [响应类] 沙巴克之主召唤boss
        /// </summary>
        ResSummerShabakBossCode = 490,
        /// <summary>
        ///  [请求类] 每日任务传送
        /// </summary>
        ReqDailyTaskTransferCode = 491,
        /// <summary>
        ///  [响应类] 每日任务传送
        /// </summary>
        ResDailyTaskTransferCode = 492,
        /// <summary>
        ///  [请求类] 沙巴克信息
        /// </summary>
        ReqShabakInfoCode = 493,
        /// <summary>
        ///  [响应类] 沙巴克信息
        /// </summary>
        ResShabakInfoCode = 494,
        /// <summary>
        ///  [请求类] 开启宝藏类物品
        /// </summary>
        ReqOpenTreasureCode = 495,
        /// <summary>
        ///  [响应类] 开启宝藏类物品
        /// </summary>
        ResOpenTreasureCode = 496,
        /// <summary>
        ///  [请求类] 设置队伍ID
        /// </summary>
        ReqNoticeSetGroupCode = 497,
        /// <summary>
        ///  [响应类] 设置队伍ID
        /// </summary>
        ResNoticeSetGroupCode = 498,
        /// <summary>
        ///  [请求类] 更新挑战Boss列表
        /// </summary>
        ReqGetBossListCode = 499,
        /// <summary>
        ///  [响应类] 更新挑战Boss列表
        /// </summary>
        ResGetBossListCode = 500,
        /// <summary>
        ///  [请求类] 击杀Boss传送
        /// </summary>
        ReqBossTransferCode = 501,
        /// <summary>
        ///  [响应类] 击杀Boss传送
        /// </summary>
        ResBossTransferCode = 502,
        /// <summary>
        ///  [请求类] 开始波数类型副本战斗
        /// </summary>
        ReqStartDungoenCode = 503,
        /// <summary>
        ///  [响应类] 开始波数类型副本战斗
        /// </summary>
        ResStartDungoenCode = 504,
        /// <summary>
        ///  [请求类] 系统提示
        /// </summary>
        ReqSystemMessageCode = 505,
        /// <summary>
        ///  [响应类] 系统提示
        /// </summary>
        ResSystemMessageCode = 506,
        /// <summary>
        ///  [请求类] 领取VIP奖励
        /// </summary>
        ReqGetVIPAwardCode = 507,
        /// <summary>
        ///  [响应类] 领取VIP奖励
        /// </summary>
        ResGetVIPAwardCode = 508,
        /// <summary>
        ///  [请求类] 获取VIPbuff
        /// </summary>
        ReqGetVIPBuffCode = 509,
        /// <summary>
        ///  [响应类] 获取VIPbuff
        /// </summary>
        ResGetVIPBuffCode = 510,
        /// <summary>
        ///  [请求类] 获取VIP人数
        /// </summary>
        ReqGetVipNumCode = 511,
        /// <summary>
        ///  [响应类] 获取VIP人数
        /// </summary>
        ResGetVipNumCode = 512,
        /// <summary>
        ///  [请求类] 获取全服VIP人数
        /// </summary>
        ReqInitializeServer007Code = 513,
        /// <summary>
        ///  [响应类] 获取全服VIP人数
        /// </summary>
        ResInitializeServer007Code = 514,
        /// <summary>
        ///  [请求类] 领取在线周奖励
        /// </summary>
        ReqGetOnlineWeeklyAwardCode = 515,
        /// <summary>
        ///  [响应类] 领取在线周奖励
        /// </summary>
        ResGetOnlineWeeklyAwardCode = 516,
        /// <summary>
        ///  [请求类] 在线奖励可领取
        /// </summary>
        ReqComplateOnlineAwardCode = 517,
        /// <summary>
        ///  [响应类] 在线奖励可领取
        /// </summary>
        ResComplateOnlineAwardCode = 518,
        /// <summary>
        ///  [请求类] 通知WorldServer广播消息
        /// </summary>
        ReqNoticeSystemMessageCode = 519,
        /// <summary>
        ///  [响应类] 通知WorldServer广播消息
        /// </summary>
        ResNoticeSystemMessageCode = 520,
        /// <summary>
        ///  [请求类] GM测试更新在线时间
        /// </summary>
        ReqGMUpdateOnlineTimesCode = 521,
        /// <summary>
        ///  [响应类] GM测试更新在线时间
        /// </summary>
        ResGMUpdateOnlineTimesCode = 522,
        /// <summary>
        ///  [请求类] 通知活动改变状态
        /// </summary>
        ReqChangeActivityStateCode = 523,
        /// <summary>
        ///  [响应类] 通知活动改变状态
        /// </summary>
        ResChangeActivityStateCode = 524,
        /// <summary>
        ///  [请求类] 活动传送
        /// </summary>
        ReqActivityTransferCode = 525,
        /// <summary>
        ///  [响应类] 活动传送
        /// </summary>
        ResActivityTransferCode = 526,
        /// <summary>
        ///  [请求类] 战神信息
        /// </summary>
        ReqGetPetInfoCode = 527,
        /// <summary>
        ///  [响应类] 战神信息
        /// </summary>
        ResGetPetInfoCode = 528,
        /// <summary>
        ///  [请求类] 角色死亡
        /// </summary>
        ReqNoticePlayerDeadCode = 529,
        /// <summary>
        ///  [响应类] 角色死亡
        /// </summary>
        ResNoticePlayerDeadCode = 530,
        /// <summary>
        ///  [请求类] 死亡掉落物品
        /// </summary>
        ReqNoticeDeadDropItemsCode = 531,
        /// <summary>
        ///  [响应类] 死亡掉落物品
        /// </summary>
        ResNoticeDeadDropItemsCode = 532,
        /// <summary>
        ///  [请求类] 通知初始化活动地图
        /// </summary>
        ReqNoticeInitActivityMapCode = 533,
        /// <summary>
        ///  [响应类] 通知初始化活动地图
        /// </summary>
        ResNoticeInitActivityMapCode = 534,
        /// <summary>
        ///  [请求类] 领取经验领奖者红包奖励
        /// </summary>
        ReqLinghongbaoCode = 535,
        /// <summary>
        ///  [响应类] 领取经验领奖者红包奖励
        /// </summary>
        ResLinghongbaoCode = 536,
        /// <summary>
        ///  [请求类] 发红包
        /// </summary>
        ReqFahongbaoCode = 537,
        /// <summary>
        ///  [响应类] 发红包
        /// </summary>
        ResFahongbaoCode = 538,
        /// <summary>
        ///  [请求类] 传送到Npc旁边
        /// </summary>
        ReqTransferToNpcCode = 539,
        /// <summary>
        ///  [响应类] 传送到Npc旁边
        /// </summary>
        ResTransferToNpcCode = 540,
        /// <summary>
        ///  [请求类] 通知缓存服是否禁言
        /// </summary>
        ReqNoticeForbiddenLanguageCode = 541,
        /// <summary>
        ///  [响应类] 通知缓存服是否禁言
        /// </summary>
        ResNoticeForbiddenLanguageCode = 542,
        /// <summary>
        ///  [请求类] 通知缓存服封账号
        /// </summary>
        ReqNoticeFreezeAccountCode = 543,
        /// <summary>
        ///  [响应类] 通知缓存服封账号
        /// </summary>
        ResNoticeFreezeAccountCode = 544,
        /// <summary>
        ///  [请求类] 是否封IP
        /// </summary>
        ReqNoticeFreezeIPCode = 545,
        /// <summary>
        ///  [响应类] 是否封IP
        /// </summary>
        ResNoticeFreezeIPCode = 546,
        /// <summary>
        ///  [请求类] 使用强化卷
        /// </summary>
        ReqUseStrengthItemCode = 547,
        /// <summary>
        ///  [响应类] 使用强化卷
        /// </summary>
        ResUseStrengthItemCode = 548,
        /// <summary>
        ///  [请求类] 通知客户端对象在保护级别内
        /// </summary>
        ReqObjectInProtectCode = 549,
        /// <summary>
        ///  [响应类] 通知客户端对象在保护级别内
        /// </summary>
        ResObjectInProtectCode = 550,
        /// <summary>
        ///  [请求类] 获得神炉物品
        /// </summary>
        ReqGetGodFurnaceCode = 551,
        /// <summary>
        ///  [响应类] 获得神炉物品
        /// </summary>
        ResGetGodFurnaceCode = 552,
        /// <summary>
        ///  [请求类] 心跳包
        /// </summary>
        ReqHeartBeatCode = 553,
        /// <summary>
        ///  [响应类] 心跳包
        /// </summary>
        ResHeartBeatCode = 554,
        /// <summary>
        ///  [请求类] 通知活动开启或关闭时间倒计时
        /// </summary>
        ReqNoticeActiveTimeCode = 555,
        /// <summary>
        ///  [响应类] 通知活动开启或关闭时间倒计时
        /// </summary>
        ResNoticeActiveTimeCode = 556,
        /// <summary>
        ///  [请求类] 玩家退出活动
        /// </summary>
        ReqPlayerExitActivityCode = 557,
        /// <summary>
        ///  [响应类] 玩家退出活动
        /// </summary>
        ResPlayerExitActivityCode = 558,
        /// <summary>
        ///  [请求类] 通知活动地图boss信息
        /// </summary>
        ReqUpdateActivityBossInfoCode = 559,
        /// <summary>
        ///  [响应类] 通知活动地图boss信息
        /// </summary>
        ResUpdateActivityBossInfoCode = 560,
        /// <summary>
        ///  [请求类] 更新死战到底玩家排行
        /// </summary>
        ReqUpdateSZDDPlayerRankCode = 561,
        /// <summary>
        ///  [响应类] 更新死战到底玩家排行
        /// </summary>
        ResUpdateSZDDPlayerRankCode = 562,
        /// <summary>
        ///  [请求类] 更新玩家杀人数量
        /// </summary>
        ReqUpdatePlayerKillNumCode = 563,
        /// <summary>
        ///  [响应类] 更新玩家杀人数量
        /// </summary>
        ResUpdatePlayerKillNumCode = 564,
        /// <summary>
        ///  [请求类] 更新当前活动玩家数量
        /// </summary>
        ReqUpdatePlayerNowNumCode = 565,
        /// <summary>
        ///  [响应类] 更新当前活动玩家数量
        /// </summary>
        ResUpdatePlayerNowNumCode = 566,
        /// <summary>
        ///  [请求类] 领取每日充值奖励
        /// </summary>
        ReqGetDailyPayAwardCode = 567,
        /// <summary>
        ///  [响应类] 领取每日充值奖励
        /// </summary>
        ResGetDailyPayAwardCode = 568,
        /// <summary>
        ///  [请求类] 有人申请行会
        /// </summary>
        ReqUpdateApplyGuildCode = 569,
        /// <summary>
        ///  [响应类] 有人申请行会
        /// </summary>
        ResUpdateApplyGuildCode = 570,
        /// <summary>
        ///  [请求类] 通知服务器正常退出
        /// </summary>
        ReqNoticeShutdownCode = 571,
        /// <summary>
        ///  [响应类] 通知服务器正常退出
        /// </summary>
        ResNoticeShutdownCode = 572,
        /// <summary>
        ///  [请求类] 玩家提建议
        /// </summary>
        ReqGiveAdviceCode = 573,
        /// <summary>
        ///  [响应类] 玩家提建议
        /// </summary>
        ResGiveAdviceCode = 574,
        /// <summary>
        ///  [请求类] 通知缓存服玩家充值
        /// </summary>
        ReqNoticePayMoneyCode = 575,
        /// <summary>
        ///  [响应类] 通知缓存服玩家充值
        /// </summary>
        ResNoticePayMoneyCode = 576,
        /// <summary>
        ///  [请求类] 加入行会设置
        /// </summary>
        ReqJoinGuildSetCode = 577,
        /// <summary>
        ///  [响应类] 加入行会设置
        /// </summary>
        ResJoinGuildSetCode = 578,
        /// <summary>
        ///  [请求类] 通知世界服boss死亡状态
        /// </summary>
        ReqNoticeBossStateCode = 579,
        /// <summary>
        ///  [响应类] 通知世界服boss死亡状态
        /// </summary>
        ResNoticeBossStateCode = 580,
        /// <summary>
        ///  [请求类] 设置自动组队
        /// </summary>
        ReqSetAutoTeamCode = 581,
        /// <summary>
        ///  [响应类] 设置自动组队
        /// </summary>
        ResSetAutoTeamCode = 582,
        /// <summary>
        ///  [请求类] 通知缓存服更新数据统计
        /// </summary>
        ReqNoticeDataStatisticsCode = 583,
        /// <summary>
        ///  [响应类] 通知缓存服更新数据统计
        /// </summary>
        ResNoticeDataStatisticsCode = 584,
        /// <summary>
        ///  [请求类] 通知map服更新行会Guid
        /// </summary>
        ReqNoticeMapGuildGuidCode = 585,
        /// <summary>
        ///  [响应类] 通知map服更新行会Guid
        /// </summary>
        ResNoticeMapGuildGuidCode = 586,
        /// <summary>
        ///  [请求类] 测试服务器通讯时间
        /// </summary>
        ReqTestSerMsgTimeCode = 587,
        /// <summary>
        ///  [响应类] 测试服务器通讯时间
        /// </summary>
        ResTestSerMsgTimeCode = 588,
        /// <summary>
        ///  [请求类] 得到队伍信息
        /// </summary>
        ReqGetTeamInfoCode = 589,
        /// <summary>
        ///  [响应类] 得到队伍信息
        /// </summary>
        ResGetTeamInfoCode = 590,
        /// <summary>
        ///  [请求类] 领取微端奖励
        /// </summary>
        ReqGetMicroendAwardCode = 591,
        /// <summary>
        ///  [响应类] 领取微端奖励
        /// </summary>
        ResGetMicroendAwardCode = 592,
        /// <summary>
        ///  [请求类] 行会发红包
        /// </summary>
        ReqSendGuildRedBagCode = 593,
        /// <summary>
        ///  [响应类] 行会发红包
        /// </summary>
        ResSendGuildRedBagCode = 594,
        /// <summary>
        ///  [请求类] 行会抢红包
        /// </summary>
        ReqGrabGuildRedBagCode = 595,
        /// <summary>
        ///  [响应类] 行会抢红包
        /// </summary>
        ResGrabGuildRedBagCode = 596,
        /// <summary>
        ///  [请求类] 单条增加行会红包
        /// </summary>
        ReqAddGuildRedBagCode = 597,
        /// <summary>
        ///  [响应类] 单条增加行会红包
        /// </summary>
        ResAddGuildRedBagCode = 598,
        /// <summary>
        ///  [请求类] 初始化全局数据：行会红包
        /// </summary>
        ReqInitializeServer008Code = 599,
        /// <summary>
        ///  [响应类] 初始化全局数据：行会红包
        /// </summary>
        ResInitializeServer008Code = 600,
        /// <summary>
        ///  [请求类] 通知更新行会红包
        /// </summary>
        ReqNoticeUpdataGuildRedBagCode = 601,
        /// <summary>
        ///  [响应类] 通知更新行会红包
        /// </summary>
        ResNoticeUpdataGuildRedBagCode = 602,
        /// <summary>
        ///  [请求类] 更新沙巴克行会GUID
        /// </summary>
        ReqUpDateShaBaKeGuildGuidCode = 603,
        /// <summary>
        ///  [响应类] 更新沙巴克行会GUID
        /// </summary>
        ResUpDateShaBaKeGuildGuidCode = 604,
        /// <summary>
        ///  [请求类] 登陆地图第9步
        /// </summary>
        ReqEnterMap009Code = 605,
        /// <summary>
        ///  [响应类] 登陆地图第9步
        /// </summary>
        ResEnterMap009Code = 606,
        /// <summary>
        ///  [请求类] 特殊物品信息统计
        /// </summary>
        ReqNoticeItemLogCode = 607,
        /// <summary>
        ///  [响应类] 特殊物品信息统计
        /// </summary>
        ResNoticeItemLogCode = 608,
        /// <summary>
        ///  [请求类] 怪物爆出物品统计
        /// </summary>
        ReqMonsterDropItemLogCode = 609,
        /// <summary>
        ///  [响应类] 怪物爆出物品统计
        /// </summary>
        ResMonsterDropItemLogCode = 610,
        /// <summary>
        ///  [请求类] 改变玩家地图ID和地图坐标
        /// </summary>
        ReqChangeMapXYCode = 611,
        /// <summary>
        ///  [响应类] 改变玩家地图ID和地图坐标
        /// </summary>
        ResChangeMapXYCode = 612,
        /// <summary>
        ///  [请求类] 通知缓存服在线人数
        /// </summary>
        ReqUpDateOnlinePlayerCountCode = 613,
        /// <summary>
        ///  [响应类] 通知缓存服在线人数
        /// </summary>
        ResUpDateOnlinePlayerCountCode = 614,
        /// <summary>
        ///  [请求类] 游戏货币统计协议
        /// </summary>
        ReqNoticeMoneyLogCode = 615,
        /// <summary>
        ///  [响应类] 游戏货币统计协议
        /// </summary>
        ResNoticeMoneyLogCode = 616,
        /// <summary>
        ///  [请求类] 请求附近最近的怪物
        /// </summary>
        ReqNearMonsterCode = 617,
        /// <summary>
        ///  [响应类] 请求附近最近的怪物
        /// </summary>
        ResNearMonsterCode = 618,
        /// <summary>
        ///  [请求类] 更新服务器时间
        /// </summary>
        ReqChangeDayCode = 619,
        /// <summary>
        ///  [响应类] 更新服务器时间
        /// </summary>
        ResChangeDayCode = 620,
        /// <summary>
        ///  [请求类] 完成主线任务（新手一段间隔时间没动，自动完成主线任务）
        /// </summary>
        ReqFinishCurTaskCode = 621,
        /// <summary>
        ///  [响应类] 完成主线任务（新手一段间隔时间没动，自动完成主线任务）
        /// </summary>
        ResFinishCurTaskCode = 622,
        /// <summary>
        ///  [请求类] 发送领奖码
        /// </summary>
        ReqAwardCodeCode = 623,
        /// <summary>
        ///  [响应类] 发送领奖码
        /// </summary>
        ResAwardCodeCode = 624,
        /// <summary>
        ///  [请求类] 活动奖励
        /// </summary>
        ReqActivityAwardCode = 625,
        /// <summary>
        ///  [响应类] 活动奖励
        /// </summary>
        ResActivityAwardCode = 626,
        /// <summary>
        ///  [请求类] 活动购买物品
        /// </summary>
        ReqActivityBuyItemCode = 627,
        /// <summary>
        ///  [响应类] 活动购买物品
        /// </summary>
        ResActivityBuyItemCode = 628,
        /// <summary>
        ///  [请求类] 暗殿内请求找到boss
        /// </summary>
        ReqAnDianFindBossCode = 629,
        /// <summary>
        ///  [响应类] 暗殿内请求找到boss
        /// </summary>
        ResAnDianFindBossCode = 630,
        /// <summary>
        ///  [请求类] 回城
        /// </summary>
        ReqBackToCityCode = 631,
        /// <summary>
        ///  [响应类] 回城
        /// </summary>
        ResBackToCityCode = 632,
        /// <summary>
        ///  [请求类] 删除所有日常任务
        /// </summary>
        ReqDeleteDailyTaskCode = 633,
        /// <summary>
        ///  [响应类] 删除所有日常任务
        /// </summary>
        ResDeleteDailyTaskCode = 634,
        /// <summary>
        ///  [请求类] 请求离线经验
        /// </summary>
        ReqGetOfftimeExpCode = 635,
        /// <summary>
        ///  [响应类] 请求离线经验
        /// </summary>
        ResGetOfftimeExpCode = 636,
        /// <summary>
        ///  [请求类] 英雄免费次数和时间
        /// </summary>
        ReqUpdateHeroTimesInfoCode = 637,
        /// <summary>
        ///  [响应类] 英雄免费次数和时间
        /// </summary>
        ResUpdateHeroTimesInfoCode = 638,
        /// <summary>
        ///  [请求类] 采集物品协议
        /// </summary>
        ReqCollectionItemCode = 639,
        /// <summary>
        ///  [响应类] 采集物品协议
        /// </summary>
        ResCollectionItemCode = 640,
        /// <summary>
        ///  [请求类] 通知客户端触发被动技能
        /// </summary>
        ReqNoticeObjectTriggerSkillCode = 641,
        /// <summary>
        ///  [响应类] 通知客户端触发被动技能
        /// </summary>
        ResNoticeObjectTriggerSkillCode = 642,
        /// <summary>
        ///  [请求类] 通知缓存服重新加载玩家信息
        /// </summary>
        ReqNoticeReloadPlayerCode = 643,
        /// <summary>
        ///  [响应类] 通知缓存服重新加载玩家信息
        /// </summary>
        ResNoticeReloadPlayerCode = 644,
        /// <summary>
        ///  [请求类] 通知缓存服更新物品Data1属性
        /// </summary>
        ReqNoticeUpdateItemData1Code = 645,
        /// <summary>
        ///  [响应类] 通知缓存服更新物品Data1属性
        /// </summary>
        ResNoticeUpdateItemData1Code = 646,
        /// <summary>
        ///  [请求类] 通知world摆摊信息
        /// </summary>
        ReqNoticeWorldRetailCode = 647,
        /// <summary>
        ///  [响应类] 通知world摆摊信息
        /// </summary>
        ResNoticeWorldRetailCode = 648,
        /// <summary>
        ///  [请求类] 通知前端开传送阵
        /// </summary>
        ReqSetTrasferArrayStateCode = 649,
        /// <summary>
        ///  [响应类] 通知前端开传送阵
        /// </summary>
        ResSetTrasferArrayStateCode = 650,
        /// <summary>
        ///  [请求类] 出售所有矿石
        /// </summary>
        ReqSellAllMineralCode = 651,
        /// <summary>
        ///  [响应类] 出售所有矿石
        /// </summary>
        ResSellAllMineralCode = 652,
        /// <summary>
        ///  [请求类] 通知缓存服给所有玩家发邮件
        /// </summary>
        ReqSendMailToAllPlayerCode = 653,
        /// <summary>
        ///  [响应类] 通知缓存服给所有玩家发邮件
        /// </summary>
        ResSendMailToAllPlayerCode = 654,
        /// <summary>
        ///  [请求类] 更新烧猪信息
        /// </summary>
        ReqUpdataFirPigInfoCode = 655,
        /// <summary>
        ///  [响应类] 更新烧猪信息
        /// </summary>
        ResUpdataFirPigInfoCode = 656,
        /// <summary>
        ///  [请求类] 更新暗殿门票过期时间
        /// </summary>
        ReqUpdateAnDianExpireTimeCode = 657,
        /// <summary>
        ///  [响应类] 更新暗殿门票过期时间
        /// </summary>
        ResUpdateAnDianExpireTimeCode = 658,
        /// <summary>
        ///  [请求类] 更改物品Data1属性
        /// </summary>
        ReqUpDateItemData1Code = 659,
        /// <summary>
        ///  [响应类] 更改物品Data1属性
        /// </summary>
        ResUpDateItemData1Code = 660,
        /// <summary>
        ///  [请求类] 更新战神属性
        /// </summary>
        ReqUpdateMarsPropertyCode = 661,
        /// <summary>
        ///  [响应类] 更新战神属性
        /// </summary>
        ResUpdateMarsPropertyCode = 662,
        /// <summary>
        ///  [请求类] 通知客户端更新挑战boss剩余次数
        /// </summary>
        ReqUpdatePersonBossTimesCode = 663,
        /// <summary>
        ///  [响应类] 通知客户端更新挑战boss剩余次数
        /// </summary>
        ResUpdatePersonBossTimesCode = 664,
        /// <summary>
        ///  [请求类] 活动地图是否领取奖励标识
        /// </summary>
        ReqActivityMapAwardFlagCode = 665,
        /// <summary>
        ///  [响应类] 活动地图是否领取奖励标识
        /// </summary>
        ResActivityMapAwardFlagCode = 666,
        /// <summary>
        ///  [请求类] 通知客户端刷新
        /// </summary>
        ReqClientRefreshCode = 667,
        /// <summary>
        ///  [响应类] 通知客户端刷新
        /// </summary>
        ResClientRefreshCode = 668,
        /// <summary>
        ///  [请求类] 更新玩家属性
        /// </summary>
        ReqUpdatePlayerPropertyCode = 669,
        /// <summary>
        ///  [响应类] 更新玩家属性
        /// </summary>
        ResUpdatePlayerPropertyCode = 670,
        /// <summary>
        ///  [请求类] 请求开启行会战
        /// </summary>
        ReqStartGuildWarCode = 671,
        /// <summary>
        ///  [响应类] 请求开启行会战
        /// </summary>
        ResStartGuildWarCode = 672,
        /// <summary>
        ///  [请求类] 合成物品
        /// </summary>
        ReqComposeItemCode = 673,
        /// <summary>
        ///  [响应类] 合成物品
        /// </summary>
        ResComposeItemCode = 674,
        /// <summary>
        ///  [请求类] 开启一个系统补偿
        /// </summary>
        ReqOpenOneSystemCompensateCode = 675,
        /// <summary>
        ///  [响应类] 开启一个系统补偿
        /// </summary>
        ResOpenOneSystemCompensateCode = 676,
        /// <summary>
        ///  [请求类] 请求领取系统补偿
        /// </summary>
        ReqReceiveSystemCompensateCode = 677,
        /// <summary>
        ///  [响应类] 请求领取系统补偿
        /// </summary>
        ResReceiveSystemCompensateCode = 678,
        /// <summary>
        ///  [请求类] 通知客户端更新公告
        /// </summary>
        ReqNoticeUpdateBroadcastCode = 679,
        /// <summary>
        ///  [响应类] 通知客户端更新公告
        /// </summary>
        ResNoticeUpdateBroadcastCode = 680,
        /// <summary>
        ///  [请求类] 通知缓存服记录聊天
        /// </summary>
        ReqChatLogCode = 681,
        /// <summary>
        ///  [响应类] 通知缓存服记录聊天
        /// </summary>
        ResChatLogCode = 682,
        /// <summary>
        ///  [请求类] 通知客户端该账号是否为GM账号
        /// </summary>
        ReqNoticeGMAccountCode = 683,
        /// <summary>
        ///  [响应类] 通知客户端该账号是否为GM账号
        /// </summary>
        ResNoticeGMAccountCode = 684,
        /// <summary>
        ///  [请求类] 
        /// </summary>
        ReqPlayerMoveCode = 685,
        /// <summary>
        ///  [响应类] 
        /// </summary>
        ResPlayerMoveCode = 686,
        /// <summary>
        ///  [请求类] 升级传奇之魂系统
        /// </summary>
        ReqUpgradeLegendSoulCode = 687,
        /// <summary>
        ///  [响应类] 升级传奇之魂系统
        /// </summary>
        ResUpgradeLegendSoulCode = 688,
        /// <summary>
        ///  [请求类] 更新传奇之魂信息
        /// </summary>
        ReqUpdateLegendSoulInfoCode = 689,
        /// <summary>
        ///  [响应类] 更新传奇之魂信息
        /// </summary>
        ResUpdateLegendSoulInfoCode = 690,
        /// <summary>
        ///  [请求类] 当怪物死亡
        /// </summary>
        ReqOnMonsterDieCode = 691,
        /// <summary>
        ///  [响应类] 当怪物死亡
        /// </summary>
        ResOnMonsterDieCode = 692,
        /// <summary>
        ///  [请求类] 更新服务器时间
        /// </summary>
        ReqUpdateServerTimeCode = 693,
        /// <summary>
        ///  [响应类] 更新服务器时间
        /// </summary>
        ResUpdateServerTimeCode = 694,
        /// <summary>
        ///  [请求类] 请求领奖
        /// </summary>
        ReqSYMYTakeAwardCode = 695,
        /// <summary>
        ///  [响应类] 请求领奖
        /// </summary>
        ResSYMYTakeAwardCode = 696,
        /// <summary>
        ///  [请求类] 更新任务
        /// </summary>
        ReqSYMYUpdateTaskCode = 697,
        /// <summary>
        ///  [响应类] 更新任务
        /// </summary>
        ResSYMYUpdateTaskCode = 698,
        /// <summary>
        ///  [请求类] 深渊魔域召唤boss
        /// </summary>
        ReqSYMYCCallBossCode = 699,
        /// <summary>
        ///  [响应类] 深渊魔域召唤boss
        /// </summary>
        ResSYMYCCallBossCode = 700,
        /// <summary>
        ///  [请求类] 更新行会成员信息
        /// </summary>
        ReqNoticeUpdateGuildMemberInfoCode = 701,
        /// <summary>
        ///  [响应类] 更新行会成员信息
        /// </summary>
        ResNoticeUpdateGuildMemberInfoCode = 702,
        /// <summary>
        ///  [请求类] 跨服战系统兑换物品
        /// </summary>
        ReqServiceWarTakeItemCode = 703,
        /// <summary>
        ///  [响应类] 跨服战系统兑换物品
        /// </summary>
        ResServiceWarTakeItemCode = 704,
        /// <summary>
        ///  [请求类] 更新跨服战荣誉值
        /// </summary>
        ReqUpdateHonorValueCode = 705,
        /// <summary>
        ///  [响应类] 更新跨服战荣誉值
        /// </summary>
        ResUpdateHonorValueCode = 706,
        /// <summary>
        ///  [请求类] 通知跨服战服务器匹配结果
        /// </summary>
        ReqNoticeServiceWarServerInfoCode = 707,
        /// <summary>
        ///  [响应类] 通知跨服战服务器匹配结果
        /// </summary>
        ResNoticeServiceWarServerInfoCode = 708,
        /// <summary>
        ///  [请求类] 进入跨服战场
        /// </summary>
        ReqEnterServiceWarCode = 709,
        /// <summary>
        ///  [响应类] 进入跨服战场
        /// </summary>
        ResEnterServiceWarCode = 710,
        /// <summary>
        ///  [请求类] 通知服务器跨服战玩家信息
        /// </summary>
        ReqNoticeServiceWarPlayerInfoCode = 711,
        /// <summary>
        ///  [响应类] 通知服务器跨服战玩家信息
        /// </summary>
        ResNoticeServiceWarPlayerInfoCode = 712,
        /// <summary>
        ///  [请求类] 通知跨服战活动状态切换
        /// </summary>
        ReqNoticeSWActivityChangeStateCode = 713,
        /// <summary>
        ///  [响应类] 通知跨服战活动状态切换
        /// </summary>
        ResNoticeSWActivityChangeStateCode = 714,
        /// <summary>
        ///  [请求类] 跨服战积分排行榜
        /// </summary>
        ReqNoticeSWActivityPointRankInfoCode = 715,
        /// <summary>
        ///  [响应类] 跨服战积分排行榜
        /// </summary>
        ResNoticeSWActivityPointRankInfoCode = 716,
        /// <summary>
        ///  [请求类] 跨服战系统增加玩家奖励（经验，积分，排行数据值，物品组）
        /// </summary>
        ReqUpdatePlayerActivityDataCode = 717,
        /// <summary>
        ///  [响应类] 跨服战系统增加玩家奖励（经验，积分，排行数据值，物品组）
        /// </summary>
        ResUpdatePlayerActivityDataCode = 718,
        /// <summary>
        ///  [请求类] 当背包满了跨服战挨雷劈没给物品时给提示
        /// </summary>
        ReqOnBagFullCode = 719,
        /// <summary>
        ///  [响应类] 当背包满了跨服战挨雷劈没给物品时给提示
        /// </summary>
        ResOnBagFullCode = 720,
        /// <summary>
        ///  [请求类] 请求社交信息
        /// </summary>
        ReqGetSocietyInfoCode = 721,
        /// <summary>
        ///  [响应类] 请求社交信息
        /// </summary>
        ResGetSocietyInfoCode = 722,
        /// <summary>
        ///  [请求类] 更新社交关系信息
        /// </summary>
        ReqUpDateSocietyInfoCode = 723,
        /// <summary>
        ///  [响应类] 更新社交关系信息
        /// </summary>
        ResUpDateSocietyInfoCode = 724,
        /// <summary>
        ///  [请求类] 添加社交关系
        /// </summary>
        ReqAddSocietyRelationCode = 725,
        /// <summary>
        ///  [响应类] 添加社交关系
        /// </summary>
        ResAddSocietyRelationCode = 726,
        /// <summary>
        ///  [请求类] 退出行会
        /// </summary>
        ReqNoticeRemoveGuildMemberCode = 727,
        /// <summary>
        ///  [响应类] 退出行会
        /// </summary>
        ResNoticeRemoveGuildMemberCode = 728,
        /// <summary>
        ///  [请求类] 删除关系
        /// </summary>
        ReqRemoveSocietyRelationCode = 729,
        /// <summary>
        ///  [响应类] 删除关系
        /// </summary>
        ResRemoveSocietyRelationCode = 730,
        /// <summary>
        ///  [请求类] 更新拾取者名字
        /// </summary>
        ReqUpdatePickUpObjectNameCode = 731,
        /// <summary>
        ///  [响应类] 更新拾取者名字
        /// </summary>
        ResUpdatePickUpObjectNameCode = 732,
        /// <summary>
        ///  [请求类] 追踪仇人
        /// </summary>
        ReqTrackEnemyCode = 733,
        /// <summary>
        ///  [响应类] 追踪仇人
        /// </summary>
        ResTrackEnemyCode = 734,
        /// <summary>
        ///  [请求类] 推荐好友
        /// </summary>
        ReqRecommendFriendsCode = 735,
        /// <summary>
        ///  [响应类] 推荐好友
        /// </summary>
        ResRecommendFriendsCode = 736,
        /// <summary>
        ///  [请求类] 传送复仇
        /// </summary>
        ReqTransferRevengeCode = 737,
        /// <summary>
        ///  [响应类] 传送复仇
        /// </summary>
        ResTransferRevengeCode = 738,
        /// <summary>
        ///  [请求类] 修改签名
        /// </summary>
        ReqModifySignatureCode = 739,
        /// <summary>
        ///  [响应类] 修改签名
        /// </summary>
        ResModifySignatureCode = 740,
        /// <summary>
        ///  [请求类] 购买投资
        /// </summary>
        ReqBuyInvestmentCode = 741,
        /// <summary>
        ///  [响应类] 购买投资
        /// </summary>
        ResBuyInvestmentCode = 742,
        /// <summary>
        ///  [请求类] 领取投资奖励
        /// </summary>
        ReqTakeInvestmentAwardCode = 743,
        /// <summary>
        ///  [响应类] 领取投资奖励
        /// </summary>
        ResTakeInvestmentAwardCode = 744,
        /// <summary>
        ///  [请求类] 分解物品
        /// </summary>
        ReqDecomposeItemCode = 745,
        /// <summary>
        ///  [响应类] 分解物品
        /// </summary>
        ResDecomposeItemCode = 746,
        /// <summary>
        ///  [请求类] 玩家行为记录
        /// </summary>
        ReqNoticeBehaviorLogCode = 747,
        /// <summary>
        ///  [响应类] 玩家行为记录
        /// </summary>
        ResNoticeBehaviorLogCode = 748,
        /// <summary>
        ///  [请求类] 领取至尊贵族奖励（每日奖励，首次奖励）
        /// </summary>
        ReqTakeSuperVIPAwardCode = 749,
        /// <summary>
        ///  [响应类] 领取至尊贵族奖励（每日奖励，首次奖励）
        /// </summary>
        ResTakeSuperVIPAwardCode = 750,
        /// <summary>
        ///  [请求类] 购买至尊贵族
        /// </summary>
        ReqBuySuperVipCode = 751,
        /// <summary>
        ///  [响应类] 购买至尊贵族
        /// </summary>
        ResBuySuperVipCode = 752,
        /// <summary>
        ///  [请求类] 更新至尊VIP信息
        /// </summary>
        ReqUpdateSuperVipInfoCode = 753,
        /// <summary>
        ///  [响应类] 更新至尊VIP信息
        /// </summary>
        ResUpdateSuperVipInfoCode = 754,
        /// <summary>
        ///  [请求类] 快速完成副本（扫荡）
        /// </summary>
        ReqQuicklyFinishDungeonCode = 755,
        /// <summary>
        ///  [响应类] 快速完成副本（扫荡）
        /// </summary>
        ResQuicklyFinishDungeonCode = 756,
        /// <summary>
        ///  [请求类] 快速完成日常任务（降妖除魔）
        /// </summary>
        ReqQuicklyFinishDailyTaskCode = 757,
        /// <summary>
        ///  [响应类] 快速完成日常任务（降妖除魔）
        /// </summary>
        ResQuicklyFinishDailyTaskCode = 758,
        /// <summary>
        ///  [请求类] 展示奖励物品
        /// </summary>
        ReqShowAwardItemCode = 759,
        /// <summary>
        ///  [响应类] 展示奖励物品
        /// </summary>
        ResShowAwardItemCode = 760,
        /// <summary>
        ///  [请求类] 穿戴时装
        /// </summary>
        ReqDressFashionCode = 761,
        /// <summary>
        ///  [响应类] 穿戴时装
        /// </summary>
        ResDressFashionCode = 762,
        /// <summary>
        ///  [请求类] 通知跨服拍卖开启
        /// </summary>
        ReqNoticeSWAuctionOpenCode = 763,
        /// <summary>
        ///  [响应类] 通知跨服拍卖开启
        /// </summary>
        ResNoticeSWAuctionOpenCode = 764,
        /// <summary>
        ///  [请求类] 通知跨服拍卖出价信息
        /// </summary>
        ReqNoticeSWAuctionBidInfoCode = 765,
        /// <summary>
        ///  [响应类] 通知跨服拍卖出价信息
        /// </summary>
        ResNoticeSWAuctionBidInfoCode = 766,
        /// <summary>
        ///  [请求类] 跨服拍卖出价
        /// </summary>
        ReqSeviceWarAuctionBidCode = 767,
        /// <summary>
        ///  [响应类] 跨服拍卖出价
        /// </summary>
        ResSeviceWarAuctionBidCode = 768,
        /// <summary>
        ///  [请求类] 地图服通知世界服务更新机器人状态
        /// </summary>
        ReqUpdateRobotInfoCode = 769,
        /// <summary>
        ///  [响应类] 地图服通知世界服务更新机器人状态
        /// </summary>
        ResUpdateRobotInfoCode = 770,
        /// <summary>
        ///  [请求类] 领取手机验证奖励
        /// </summary>
        ReqTakePhoneVerificationAwardCode = 771,
        /// <summary>
        ///  [响应类] 领取手机验证奖励
        /// </summary>
        ResTakePhoneVerificationAwardCode = 772,
        /// <summary>
        ///  [请求类] 请求开服时间
        /// </summary>
        ReqGetOpenDaysCode = 773,
        /// <summary>
        ///  [响应类] 请求开服时间
        /// </summary>
        ResGetOpenDaysCode = 774,
        /// <summary>
        ///  [请求类] 活动排行榜信息
        /// </summary>
        ReqUpdateActivityRankInfoCode = 775,
        /// <summary>
        ///  [响应类] 活动排行榜信息
        /// </summary>
        ResUpdateActivityRankInfoCode = 776,
        /// <summary>
        ///  [请求类] 通知前端完成第一次系统
        /// </summary>
        ReqFinishFirstSystemCode = 777,
        /// <summary>
        ///  [响应类] 通知前端完成第一次系统
        /// </summary>
        ResFinishFirstSystemCode = 778,
        /// <summary>
        ///  [请求类] 领取七日连续充值奖励
        /// </summary>
        ReqGetContinuityPayAwardCode = 779,
        /// <summary>
        ///  [响应类] 领取七日连续充值奖励
        /// </summary>
        ResGetContinuityPayAwardCode = 780,
        /// <summary>
        ///  [请求类] 服务端重新读取Template表
        /// </summary>
        ReqReloadTemplateCode = 781,
        /// <summary>
        ///  [响应类] 服务端重新读取Template表
        /// </summary>
        ResReloadTemplateCode = 782,
        /// <summary>
        ///  [请求类] 更新物品组信息
        /// </summary>
        ReqUpdateItemGropInfoCode = 783,
        /// <summary>
        ///  [响应类] 更新物品组信息
        /// </summary>
        ResUpdateItemGropInfoCode = 784,
        /// <summary>
        ///  [请求类] 更新投资信息
        /// </summary>
        ReqUpdateInvestmentInfoCode = 785,
        /// <summary>
        ///  [响应类] 更新投资信息
        /// </summary>
        ResUpdateInvestmentInfoCode = 786,
        /// <summary>
        ///  [请求类] 更新日常次数
        /// </summary>
        ReqUpdateDailyNumCode = 787,
        /// <summary>
        ///  [响应类] 更新日常次数
        /// </summary>
        ResUpdateDailyNumCode = 788,
        /// <summary>
        ///  [请求类] 更新每日充值和七日充值信息
        /// </summary>
        ReqUpdatePayInfoCode = 789,
        /// <summary>
        ///  [响应类] 更新每日充值和七日充值信息
        /// </summary>
        ResUpdatePayInfoCode = 790,
        /// <summary>
        ///  [请求类] 更新五气朝元面板信息
        /// </summary>
        ReqWQCYPlayerInfoCode = 791,
        /// <summary>
        ///  [响应类] 更新五气朝元面板信息
        /// </summary>
        ResWQCYPlayerInfoCode = 792,
        /// <summary>
        ///  [请求类] 更新五气朝元雕像公会信息
        /// </summary>
        ReqWQCYGuildInfoCode = 793,
        /// <summary>
        ///  [响应类] 更新五气朝元雕像公会信息
        /// </summary>
        ResWQCYGuildInfoCode = 794,
        /// <summary>
        ///  [请求类] 改名字
        /// </summary>
        ReqChangeNameCode = 795,
        /// <summary>
        ///  [响应类] 改名字
        /// </summary>
        ResChangeNameCode = 796,
        /// <summary>
        ///  [请求类] 成长计划购买和领奖
        /// </summary>
        ReqGrowthPlanCode = 797,
        /// <summary>
        ///  [响应类] 成长计划购买和领奖
        /// </summary>
        ResGrowthPlanCode = 798,
        /// <summary>
        ///  [请求类] 满血
        /// </summary>
        ReqFullHpCode = 799,
        /// <summary>
        ///  [响应类] 满血
        /// </summary>
        ResFullHpCode = 800,
        /// <summary>
        ///  [请求类] 更新限制物品使用次数
        /// </summary>
        ReqUpdateItemGroupTimeCode = 801,
        /// <summary>
        ///  [响应类] 更新限制物品使用次数
        /// </summary>
        ResUpdateItemGroupTimeCode = 802,
        /// <summary>
        ///  [请求类] 当怪物受伤时,服务端用与DPS统计
        /// </summary>
        ReqOnHurtMonsterCode = 803,
        /// <summary>
        ///  [响应类] 当怪物受伤时,服务端用与DPS统计
        /// </summary>
        ResOnHurtMonsterCode = 804,
        /// <summary>
        ///  [请求类] 删除行会物品
        /// </summary>
        ReqDeleteGuildItemCode = 805,
        /// <summary>
        ///  [响应类] 删除行会物品
        /// </summary>
        ResDeleteGuildItemCode = 806,
        /// <summary>
        ///  [请求类] 添加或者更新特殊
        /// </summary>
        ReqAddSpecialEffectCode = 807,
        /// <summary>
        ///  [响应类] 添加或者更新特殊
        /// </summary>
        ResAddSpecialEffectCode = 808,
        /// <summary>
        ///  [请求类] 移除特殊效果
        /// </summary>
        ReqRemoveSpecialEffectsCode = 809,
        /// <summary>
        ///  [响应类] 移除特殊效果
        /// </summary>
        ResRemoveSpecialEffectsCode = 810,
        /// <summary>
        ///  [请求类] 修改特殊效果CD时间
        /// </summary>
        ReqUpdateSpecialEffectsCDCode = 811,
        /// <summary>
        ///  [响应类] 修改特殊效果CD时间
        /// </summary>
        ResUpdateSpecialEffectsCDCode = 812,
        /// <summary>
        ///  [请求类] 服务端查找怪物位置
        /// </summary>
        ReqServerFindMonsterCode = 813,
        /// <summary>
        ///  [响应类] 服务端查找怪物位置
        /// </summary>
        ResServerFindMonsterCode = 814,
        /// <summary>
        ///  [请求类] 获取威望前三玩家的装备外观
        /// </summary>
        ReqGetFamePlayerInfoCode = 815,
        /// <summary>
        ///  [响应类] 获取威望前三玩家的装备外观
        /// </summary>
        ResGetFamePlayerInfoCode = 816,
        /// <summary>
        ///  [请求类] 创建一个物品
        /// </summary>
        ReqSpawnItemCode = 817,
        /// <summary>
        ///  [响应类] 创建一个物品
        /// </summary>
        ResSpawnItemCode = 818,
        /// <summary>
        ///  [请求类] 更新活跃度数据
        /// </summary>
        ReqUpdateLivenessDataCode = 819,
        /// <summary>
        ///  [响应类] 更新活跃度数据
        /// </summary>
        ResUpdateLivenessDataCode = 820,
        /// <summary>
        ///  [请求类] 领取活跃度奖励
        /// </summary>
        ReqTakeLivenessAwardCode = 821,
        /// <summary>
        ///  [响应类] 领取活跃度奖励
        /// </summary>
        ResTakeLivenessAwardCode = 822,
        /// <summary>
        ///  [请求类] 领取经验玉经验
        /// </summary>
        ReqTakeExpJadeExpCode = 823,
        /// <summary>
        ///  [响应类] 领取经验玉经验
        /// </summary>
        ResTakeExpJadeExpCode = 824,
        /// <summary>
        ///  [请求类] 升级行会等级
        /// </summary>
        ReqUpGradeGuildLvCode = 825,
        /// <summary>
        ///  [响应类] 升级行会等级
        /// </summary>
        ResUpGradeGuildLvCode = 826,
        /// <summary>
        ///  [请求类] 弹劾会长
        /// </summary>
        ReqImpeachmentGuildLeaderCode = 827,
        /// <summary>
        ///  [响应类] 弹劾会长
        /// </summary>
        ResImpeachmentGuildLeaderCode = 828,
        /// <summary>
        ///  [请求类] 防沉迷系统通知
        /// </summary>
        ReqAntiAddictionCode = 829,
        /// <summary>
        ///  [响应类] 防沉迷系统通知
        /// </summary>
        ResAntiAddictionCode = 830,
        /// <summary>
        ///  [请求类] 更新防沉迷系统开启状态
        /// </summary>
        ReqUpdateAntiAddictionCode = 831,
        /// <summary>
        ///  [响应类] 更新防沉迷系统开启状态
        /// </summary>
        ResUpdateAntiAddictionCode = 832,
        /// <summary>
        ///  [请求类] 通知行会成员列表
        /// </summary>
        ReqNoticeGuildMemberListCode = 833,
        /// <summary>
        ///  [响应类] 通知行会成员列表
        /// </summary>
        ResNoticeGuildMemberListCode = 834,
        /// <summary>
        ///  [请求类] 增加技能熟练度(返回值也用于更新技能熟练度)
        /// </summary>
        ReqAddSkillExpCode = 835,
        /// <summary>
        ///  [响应类] 增加技能熟练度(返回值也用于更新技能熟练度)
        /// </summary>
        ResAddSkillExpCode = 836,
        /// <summary>
        ///  [请求类] 行会捐钱
        /// </summary>
        ReqGuildDonateMoneyCode = 837,
        /// <summary>
        ///  [响应类] 行会捐钱
        /// </summary>
        ResGuildDonateMoneyCode = 838,
        /// <summary>
        ///  [请求类] 通知缓存服行会战信息
        /// </summary>
        ReqNoticeGuildWarInfoCode = 839,
        /// <summary>
        ///  [响应类] 通知缓存服行会战信息
        /// </summary>
        ResNoticeGuildWarInfoCode = 840,
        /// <summary>
        ///  [请求类] 更新行会申请玩家信息
        /// </summary>
        ReqUpdateGuildApplyPlayerInfoCode = 841,
        /// <summary>
        ///  [响应类] 更新行会申请玩家信息
        /// </summary>
        ResUpdateGuildApplyPlayerInfoCode = 842,
        /// <summary>
        ///  [请求类] 通知玩家行会红包列表
        /// </summary>
        ReqGetGuildRedBagListCode = 843,
        /// <summary>
        ///  [响应类] 通知玩家行会红包列表
        /// </summary>
        ResGetGuildRedBagListCode = 844,
        /// <summary>
        ///  [请求类] 通知玩家移除红包
        /// </summary>
        ReqRemoveRedBagCode = 845,
        /// <summary>
        ///  [响应类] 通知玩家移除红包
        /// </summary>
        ResRemoveRedBagCode = 846,
        /// <summary>
        ///  [请求类] 更新限时任务状态
        /// </summary>
        ReqUpdateLimiteTaskCode = 847,
        /// <summary>
        ///  [响应类] 更新限时任务状态
        /// </summary>
        ResUpdateLimiteTaskCode = 848,
        /// <summary>
        ///  [请求类] 领取限时任务奖励
        /// </summary>
        ReqTakeLimiteTaskAwardCode = 849,
        /// <summary>
        ///  [响应类] 领取限时任务奖励
        /// </summary>
        ResTakeLimiteTaskAwardCode = 850,
        /// <summary>
        ///  [请求类] 解散行会
        /// </summary>
        ReqDeleteGuildCode = 851,
        /// <summary>
        ///  [响应类] 解散行会
        /// </summary>
        ResDeleteGuildCode = 852,
        /// <summary>
        ///  [请求类] 更新限时任务开启时间
        /// </summary>
        ReqUpdateLimiteTaskStartTimeCode = 853,
        /// <summary>
        ///  [响应类] 更新限时任务开启时间
        /// </summary>
        ResUpdateLimiteTaskStartTimeCode = 854,
        /// <summary>
        ///  [请求类] 放弃当前挖宝
        /// </summary>
        ReqGiveUpDailyTaskCode = 855,
        /// <summary>
        ///  [响应类] 放弃当前挖宝
        /// </summary>
        ResGiveUpDailyTaskCode = 856,
        /// <summary>
        ///  [请求类] 播放剧情
        /// </summary>
        ReqTriggerStoryCode = 857,
        /// <summary>
        ///  [响应类] 播放剧情
        /// </summary>
        ResTriggerStoryCode = 858,
        /// <summary>
        ///  [请求类] 一键使用背包物品
        /// </summary>
        ReqOneKeyUseBagItemCode = 859,
        /// <summary>
        ///  [响应类] 一键使用背包物品
        /// </summary>
        ResOneKeyUseBagItemCode = 860,
        /// <summary>
        ///  [请求类] 更新物品洗炼属性
        /// </summary>
        ReqUpdateBaptizeEquipAttributesCode = 861,
        /// <summary>
        ///  [响应类] 更新物品洗炼属性
        /// </summary>
        ResUpdateBaptizeEquipAttributesCode = 862,
        /// <summary>
        ///  [请求类] 通知周期活动列表
        /// </summary>
        ReqAssembleActivityListCode = 863,
        /// <summary>
        ///  [响应类] 通知周期活动列表
        /// </summary>
        ResAssembleActivityListCode = 864,
        /// <summary>
        ///  [请求类] 更新组装活动信息
        /// </summary>
        ReqUpdateAssembleActivityDataCode = 865,
        /// <summary>
        ///  [响应类] 更新组装活动信息
        /// </summary>
        ResUpdateAssembleActivityDataCode = 866,
        /// <summary>
        ///  [请求类] 领取组装活动奖励
        /// </summary>
        ReqTakeAssembleActivityAwardCode = 867,
        /// <summary>
        ///  [响应类] 领取组装活动奖励
        /// </summary>
        ResTakeAssembleActivityAwardCode = 868,
        /// <summary>
        ///  [请求类] 更新组装活动信息
        /// </summary>
        ReqUpdateAssembleActivityInfoCode = 869,
        /// <summary>
        ///  [响应类] 更新组装活动信息
        /// </summary>
        ResUpdateAssembleActivityInfoCode = 870,
        /// <summary>
        ///  [请求类] 清空组装活动信息
        /// </summary>
        ReqClearAssembleActivityDataCode = 871,
        /// <summary>
        ///  [响应类] 清空组装活动信息
        /// </summary>
        ResClearAssembleActivityDataCode = 872,
        /// <summary>
        ///  [请求类] 清空幸运转盘日志
        /// </summary>
        ReqClearLuckDiscLogCode = 873,
        /// <summary>
        ///  [响应类] 清空幸运转盘日志
        /// </summary>
        ResClearLuckDiscLogCode = 874,
        /// <summary>
        ///  [请求类] 强化装备位置
        /// </summary>
        ReqStrengthenEquipCode = 875,
        /// <summary>
        ///  [响应类] 强化装备位置
        /// </summary>
        ResStrengthenEquipCode = 876,
        /// <summary>
        ///  [请求类] 重置传奇之魂
        /// </summary>
        ReqRestLegendSoulCode = 877,
        /// <summary>
        ///  [响应类] 重置传奇之魂
        /// </summary>
        ResRestLegendSoulCode = 878,
        /// <summary>
        ///  [请求类] 领取通天塔奖励
        /// </summary>
        ReqTakeBabelAwardCode = 879,
        /// <summary>
        ///  [响应类] 领取通天塔奖励
        /// </summary>
        ResTakeBabelAwardCode = 880,
        /// <summary>
        ///  [请求类] 平台VIP领奖
        /// </summary>
        ReqPlatformVIPTakeAwardCode = 881,
        /// <summary>
        ///  [响应类] 平台VIP领奖
        /// </summary>
        ResPlatformVIPTakeAwardCode = 882,
        /// <summary>
        ///  [请求类] 玩家点击Icon用于数据统计
        /// </summary>
        ReqPlayerClickIconCode = 883,
        /// <summary>
        ///  [响应类] 玩家点击Icon用于数据统计
        /// </summary>
        ResPlayerClickIconCode = 884,
        /// <summary>
        ///  [请求类] 物品提升品质（注灵）
        /// </summary>
        ReqUpgradeItemFixLvCode = 885,
        /// <summary>
        ///  [响应类] 物品提升品质（注灵）
        /// </summary>
        ResUpgradeItemFixLvCode = 886,
        /// <summary>
        ///  [请求类] 更新功能引导的完成信息
        /// </summary>
        ReqUpdateFunctionGuideCode = 887,
        /// <summary>
        ///  [响应类] 更新功能引导的完成信息
        /// </summary>
        ResUpdateFunctionGuideCode = 888,
        /// <summary>
        ///  [请求类] 购买每日任务次数
        /// </summary>
        ReqBuyDailyTaskTimeCode = 889,
        /// <summary>
        ///  [响应类] 购买每日任务次数
        /// </summary>
        ResBuyDailyTaskTimeCode = 890,
        /// <summary>
        ///  [请求类] 领取威望积分奖励
        /// </summary>
        ReqTakeDailyTaskPointAwardCode = 891,
        /// <summary>
        ///  [响应类] 领取威望积分奖励
        /// </summary>
        ResTakeDailyTaskPointAwardCode = 892,
        /// <summary>
        ///  [请求类] 膜拜
        /// </summary>
        ReqWorshipNPCCode = 893,
        /// <summary>
        ///  [响应类] 膜拜
        /// </summary>
        ResWorshipNPCCode = 894,
        /// <summary>
        ///  [请求类] 更新雕像可膜拜时间
        /// </summary>
        ReqUpdateNextWorshipTimeCode = 895,
        /// <summary>
        ///  [响应类] 更新雕像可膜拜时间
        /// </summary>
        ResUpdateNextWorshipTimeCode = 896,
        /// <summary>
        ///  [请求类] 领取引导奖励
        /// </summary>
        ReqTakeGuideAwardCode = 897,
        /// <summary>
        ///  [响应类] 领取引导奖励
        /// </summary>
        ResTakeGuideAwardCode = 898,
        /// <summary>
        ///  [请求类] 更新手动开启的活动信息
        /// </summary>
        ReqUpdateActivityInfoCode = 899,
        /// <summary>
        ///  [响应类] 更新手动开启的活动信息
        /// </summary>
        ResUpdateActivityInfoCode = 900,
        /// <summary>
        ///  [请求类] 行会保卫战更新信息
        /// </summary>
        ReqHHBWZUpdateInfoCode = 901,
        /// <summary>
        ///  [响应类] 行会保卫战更新信息
        /// </summary>
        ResHHBWZUpdateInfoCode = 902,
        /// <summary>
        ///  [请求类] 开启活动
        /// </summary>
        ReqOpenActivityCode = 903,
        /// <summary>
        ///  [响应类] 开启活动
        /// </summary>
        ResOpenActivityCode = 904,
        /// <summary>
        ///  [请求类] 通知删除副本
        /// </summary>
        ReqNoticeDeleteDungeonCode = 905,
        /// <summary>
        ///  [响应类] 通知删除副本
        /// </summary>
        ResNoticeDeleteDungeonCode = 906,
        /// <summary>
        ///  [请求类] 击杀本地图所有敌对怪物
        /// </summary>
        ReqKillAllMonsterCode = 907,
        /// <summary>
        ///  [响应类] 击杀本地图所有敌对怪物
        /// </summary>
        ResKillAllMonsterCode = 908,
        /// <summary>
        ///  [请求类] 更新行会保卫战会长雕像血量
        /// </summary>
        ReqUpdateGuildBossHpCode = 909,
        /// <summary>
        ///  [响应类] 更新行会保卫战会长雕像血量
        /// </summary>
        ResUpdateGuildBossHpCode = 910,
        /// <summary>
        ///  [请求类] 给某个地图上所有对象加buff
        /// </summary>
        ReqMapAllObjectAddBuffCode = 911,
        /// <summary>
        ///  [响应类] 给某个地图上所有对象加buff
        /// </summary>
        ResMapAllObjectAddBuffCode = 912,
        /// <summary>
        ///  [请求类] 领取资源找回奖励
        /// </summary>
        ReqTakeGetBackAwardCode = 913,
        /// <summary>
        ///  [响应类] 领取资源找回奖励
        /// </summary>
        ResTakeGetBackAwardCode = 914,
        /// <summary>
        ///  [请求类] 刷新某个周期活动
        /// </summary>
        ReqRefreshAssembleActivityCode = 915,
        /// <summary>
        ///  [响应类] 刷新某个周期活动
        /// </summary>
        ResRefreshAssembleActivityCode = 916,
        /// <summary>
        ///  [请求类] 更新组装活动排行信息
        /// </summary>
        ReqUpdateAssembleActivityRankInfoCode = 917,
        /// <summary>
        ///  [响应类] 更新组装活动排行信息
        /// </summary>
        ResUpdateAssembleActivityRankInfoCode = 918,
        /// <summary>
        ///  [请求类] 组装活动信息
        /// </summary>
        ReqInitAssembleActivityInfoCode = 919,
        /// <summary>
        ///  [响应类] 组装活动信息
        /// </summary>
        ResInitAssembleActivityInfoCode = 920,
        /// <summary>
        ///  [请求类] 通知客户端全服奖励剩余次数
        /// </summary>
        ReqUpdateAssembleActivityAwardTimesCode = 921,
        /// <summary>
        ///  [响应类] 通知客户端全服奖励剩余次数
        /// </summary>
        ResUpdateAssembleActivityAwardTimesCode = 922,
        /// <summary>
        ///  [请求类] 装备噬魂
        /// </summary>
        ReqSoulEaterCode = 923,
        /// <summary>
        ///  [响应类] 装备噬魂
        /// </summary>
        ResSoulEaterCode = 924,
        /// <summary>
        ///  [请求类] 通知增加活动日志
        /// </summary>
        ReqAddAssembleActivityLogCode = 925,
        /// <summary>
        ///  [响应类] 通知增加活动日志
        /// </summary>
        ResAddAssembleActivityLogCode = 926,
        /// <summary>
        ///  [请求类] 通知客户端日志列表
        /// </summary>
        ReqNoticeAssembleActivityListCode = 927,
        /// <summary>
        ///  [响应类] 通知客户端日志列表
        /// </summary>
        ResNoticeAssembleActivityListCode = 928,
        /// <summary>
        ///  [请求类] 领取首充奖励
        /// </summary>
        ReqTakeFirstPayAwardCode = 929,
        /// <summary>
        ///  [响应类] 领取首充奖励
        /// </summary>
        ResTakeFirstPayAwardCode = 930,
        /// <summary>
        ///  [请求类] 更新装备强化等级
        /// </summary>
        ReqNoticeUpdateItemStrengthCode = 931,
        /// <summary>
        ///  [响应类] 更新装备强化等级
        /// </summary>
        ResNoticeUpdateItemStrengthCode = 932,
        /// <summary>
        ///  [请求类] 通知客户端增加或者删除活动
        /// </summary>
        ReqAddAssembleActivityCode = 933,
        /// <summary>
        ///  [响应类] 通知客户端增加或者删除活动
        /// </summary>
        ResAddAssembleActivityCode = 934,
        /// <summary>
        ///  [请求类] 通知客户端删除一个组装活动
        /// </summary>
        ReqDelAssembleActivityCode = 935,
        /// <summary>
        ///  [响应类] 通知客户端删除一个组装活动
        /// </summary>
        ResDelAssembleActivityCode = 936,
        /// <summary>
        ///  [请求类] 发送行会救援令
        /// </summary>
        ReqGuildSOSCode = 937,
        /// <summary>
        ///  [响应类] 发送行会救援令
        /// </summary>
        ResGuildSOSCode = 938,
        /// <summary>
        ///  [请求类] 请求祈福
        /// </summary>
        ReqPrayCode = 939,
        /// <summary>
        ///  [响应类] 请求祈福
        /// </summary>
        ResPrayCode = 940,
        /// <summary>
        ///  [请求类] 升级内功
        /// </summary>
        ReqUpGradeInternalWorkCode = 941,
        /// <summary>
        ///  [响应类] 升级内功
        /// </summary>
        ResUpGradeInternalWorkCode = 942,
        /// <summary>
        ///  [请求类] 更新成就信息
        /// </summary>
        ReqUpdateAchievementInfoCode = 943,
        /// <summary>
        ///  [响应类] 更新成就信息
        /// </summary>
        ResUpdateAchievementInfoCode = 944,
        /// <summary>
        ///  [请求类] 通知世界服怪物坐标
        /// </summary>
        ReqUpdateMonsterPointCode = 945,
        /// <summary>
        ///  [响应类] 通知世界服怪物坐标
        /// </summary>
        ResUpdateMonsterPointCode = 946,
        /// <summary>
        ///  [请求类] 使用活动技能
        /// </summary>
        ReqUseActivitySkillCode = 947,
        /// <summary>
        ///  [响应类] 使用活动技能
        /// </summary>
        ResUseActivitySkillCode = 948,
        /// <summary>
        ///  [请求类] 回收注灵等级
        /// </summary>
        ReqRecycleItemFixLvCode = 949,
        /// <summary>
        ///  [响应类] 回收注灵等级
        /// </summary>
        ResRecycleItemFixLvCode = 950,
        /// <summary>
        ///  [请求类] 擒龙手更新目标位置和自身朝向
        /// </summary>
        ReqQinLongShouSkillCode = 951,
        /// <summary>
        ///  [响应类] 擒龙手更新目标位置和自身朝向
        /// </summary>
        ResQinLongShouSkillCode = 952,
        /// <summary>
        ///  [请求类] 更新巡城任务状态
        /// </summary>
        ReqNoticePatrolCityTaskStateCode = 953,
        /// <summary>
        ///  [响应类] 更新巡城任务状态
        /// </summary>
        ResNoticePatrolCityTaskStateCode = 954,
        /// <summary>
        ///  [请求类] 圣器副本的boss顺序
        /// </summary>
        ReqMaterialBossInfoCode = 955,
        /// <summary>
        ///  [响应类] 圣器副本的boss顺序
        /// </summary>
        ResMaterialBossInfoCode = 956,
        /// <summary>
        ///  [请求类] 当巡城怪被击杀
        /// </summary>
        ReqOnPlayerMonsterDieCode = 957,
        /// <summary>
        ///  [响应类] 当巡城怪被击杀
        /// </summary>
        ResOnPlayerMonsterDieCode = 958,
        /// <summary>
        ///  [请求类] 角色等级兑换其他系统经验
        /// </summary>
        ReqLevelExchangeSysExpCode = 959,
        /// <summary>
        ///  [响应类] 角色等级兑换其他系统经验
        /// </summary>
        ResLevelExchangeSysExpCode = 960,
        /// <summary>
        ///  [请求类] 请求自己的巡城怪位置
        /// </summary>
        ReqFindMyPatrolCityMonsterCode = 961,
        /// <summary>
        ///  [响应类] 请求自己的巡城怪位置
        /// </summary>
        ResFindMyPatrolCityMonsterCode = 962,
        /// <summary>
        ///  [请求类] 玩家下线需要删除特殊怪
        /// </summary>
        ReqDelPlayerMonsterCode = 963,
        /// <summary>
        ///  [响应类] 玩家下线需要删除特殊怪
        /// </summary>
        ResDelPlayerMonsterCode = 964,
        /// <summary>
        ///  [请求类] 更新魔法阵信息
        /// </summary>
        ReqUpdateMagicCircleInfoCode = 965,
        /// <summary>
        ///  [响应类] 更新魔法阵信息
        /// </summary>
        ResUpdateMagicCircleInfoCode = 966,
        /// <summary>
        ///  [请求类] 更新魔法阵数量
        /// </summary>
        ReqUpdateMagicCountCode = 967,
        /// <summary>
        ///  [响应类] 更新魔法阵数量
        /// </summary>
        ResUpdateMagicCountCode = 968,
        /// <summary>
        ///  [请求类] 更新服务器数值
        /// </summary>
        ReqUpdateWorldDataCode = 969,
        /// <summary>
        ///  [响应类] 更新服务器数值
        /// </summary>
        ResUpdateWorldDataCode = 970,
        /// <summary>
        ///  [请求类] 删除活动日志
        /// </summary>
        ReqDelAssembleActivityLogCode = 971,
        /// <summary>
        ///  [响应类] 删除活动日志
        /// </summary>
        ResDelAssembleActivityLogCode = 972,
        /// <summary>
        ///  [请求类] 请求签到
        /// </summary>
        ReqSignInCode = 973,
        /// <summary>
        ///  [响应类] 请求签到
        /// </summary>
        ResSignInCode = 974,
        /// <summary>
        ///  [请求类] 请求补签
        /// </summary>
        ReqRegistrationSignCode = 975,
        /// <summary>
        ///  [响应类] 请求补签
        /// </summary>
        ResRegistrationSignCode = 976,
        /// <summary>
        ///  [请求类] 请求七日登陆奖励
        /// </summary>
        ReqTakeSevenDayLoginAwardCode = 977,
        /// <summary>
        ///  [响应类] 请求七日登陆奖励
        /// </summary>
        ResTakeSevenDayLoginAwardCode = 978,
        /// <summary>
        ///  [请求类] 幻境传送
        /// </summary>
        ReqDreamlandTransferCode = 979,
        /// <summary>
        ///  [响应类] 幻境传送
        /// </summary>
        ResDreamlandTransferCode = 980,
        /// <summary>
        ///  [请求类] 通知缓存服更新沙巴克所属行会
        /// </summary>
        ReqNoticeBattleShabakWinerCode = 981,
        /// <summary>
        ///  [响应类] 通知缓存服更新沙巴克所属行会
        /// </summary>
        ResNoticeBattleShabakWinerCode = 982,
        /// <summary>
        ///  [请求类] 沙城活动信息
        /// </summary>
        ReqUpdateShabakActivityInfoCode = 983,
        /// <summary>
        ///  [响应类] 沙城活动信息
        /// </summary>
        ResUpdateShabakActivityInfoCode = 984,
        /// <summary>
        ///  [请求类] 更新地图Flag
        /// </summary>
        ReqUpdateMapCellFlagCode = 985,
        /// <summary>
        ///  [响应类] 更新地图Flag
        /// </summary>
        ResUpdateMapCellFlagCode = 986,
        /// <summary>
        ///  [请求类] 通知世界服膜拜事件
        /// </summary>
        ReqNoticePlayerWorshipCode = 987,
        /// <summary>
        ///  [响应类] 通知世界服膜拜事件
        /// </summary>
        ResNoticePlayerWorshipCode = 988,
        /// <summary>
        ///  [请求类] 设置自动拾取
        /// </summary>
        ReqSetAutoPickupCode = 989,
        /// <summary>
        ///  [响应类] 设置自动拾取
        /// </summary>
        ResSetAutoPickupCode = 990,
        /// <summary>
        ///  [请求类] 悟道排行榜
        /// </summary>
        ReqNoticeSWActivityWuDaoRankInfoCode = 991,
        /// <summary>
        ///  [响应类] 悟道排行榜
        /// </summary>
        ResNoticeSWActivityWuDaoRankInfoCode = 992,
        /// <summary>
        ///  [请求类] 更新buff信息
        /// </summary>
        ReqUpdateEffectInfoCode = 993,
        /// <summary>
        ///  [响应类] 更新buff信息
        /// </summary>
        ResUpdateEffectInfoCode = 994,
        /// <summary>
        ///  [请求类] 更新引导信息
        /// </summary>
        ReqUpdateGuideInfoCode = 995,
        /// <summary>
        ///  [响应类] 更新引导信息
        /// </summary>
        ResUpdateGuideInfoCode = 996,
        /// <summary>
        ///  [请求类] 增加时装
        /// </summary>
        ReqAddFashionCode = 997,
        /// <summary>
        ///  [响应类] 增加时装
        /// </summary>
        ResAddFashionCode = 998,
        /// <summary>
        ///  [请求类] 移除时装
        /// </summary>
        ReqRemoveFashionCode = 999,
        /// <summary>
        ///  [响应类] 移除时装
        /// </summary>
        ResRemoveFashionCode = 1000,
        /// <summary>
        ///  [请求类] 三圣步武三倍点信息
        /// </summary>
        ReqUpdateSSBWPointInfoCode = 1001,
        /// <summary>
        ///  [响应类] 三圣步武三倍点信息
        /// </summary>
        ResUpdateSSBWPointInfoCode = 1002,
        /// <summary>
        ///  [请求类] 修改连击技能组合
        /// </summary>
        ReqChangeComboSkillCode = 1003,
        /// <summary>
        ///  [响应类] 修改连击技能组合
        /// </summary>
        ResChangeComboSkillCode = 1004,
        /// <summary>
        ///  [请求类] 通知地图服更新连击技能列表
        /// </summary>
        ReqUpdateComboSkilInfoCode = 1005,
        /// <summary>
        ///  [响应类] 通知地图服更新连击技能列表
        /// </summary>
        ResUpdateComboSkilInfoCode = 1006,
        /// <summary>
        ///  [请求类] 请求修改当前激活的连击技能
        /// </summary>
        ReqChangeActiveComboSkillCode = 1007,
        /// <summary>
        ///  [响应类] 请求修改当前激活的连击技能
        /// </summary>
        ResChangeActiveComboSkillCode = 1008,
        /// <summary>
        ///  [请求类] 通知客户端播放吸血特效
        /// </summary>
        ReqPlayAddHpEffectCode = 1009,
        /// <summary>
        ///  [响应类] 通知客户端播放吸血特效
        /// </summary>
        ResPlayAddHpEffectCode = 1010,
        /// <summary>
        ///  [请求类] 更新炼狱剩余时间
        /// </summary>
        ReqUpdateLianYuTimeCode = 1011,
        /// <summary>
        ///  [响应类] 更新炼狱剩余时间
        /// </summary>
        ResUpdateLianYuTimeCode = 1012,
        /// <summary>
        ///  [请求类] 转移强化等级
        /// </summary>
        ReqMoveEquipStrengthenCode = 1013,
        /// <summary>
        ///  [响应类] 转移强化等级
        /// </summary>
        ResMoveEquipStrengthenCode = 1014,
        /// <summary>
        ///  [请求类] 通知世界服玩家使用技能
        /// </summary>
        ReqNoticeUseSkillCode = 1015,
        /// <summary>
        ///  [响应类] 通知世界服玩家使用技能
        /// </summary>
        ResNoticeUseSkillCode = 1016,
        /// <summary>
        ///  [请求类] 
        /// </summary>
        ReqServerValidateCode = 1017,
        /// <summary>
        ///  [响应类] 
        /// </summary>
        ResServerValidateCode = 1018,
        /// <summary>
        ///  [请求类] 领取日常活动奖励
        /// </summary>
        ReqTakeDayActivityAwardCode = 1019,
        /// <summary>
        ///  [响应类] 领取日常活动奖励
        /// </summary>
        ResTakeDayActivityAwardCode = 1020,
        /// <summary>
        ///  [请求类] 刷新日常活动
        /// </summary>
        ReqRefreshDayActivityCode = 1021,
        /// <summary>
        ///  [响应类] 刷新日常活动
        /// </summary>
        ResRefreshDayActivityCode = 1022,
        /// <summary>
        ///  [请求类] 领取行会福利
        /// </summary>
        ReqTakeGuildWelfareCode = 1023,
        /// <summary>
        ///  [响应类] 领取行会福利
        /// </summary>
        ResTakeGuildWelfareCode = 1024,
        /// <summary>
        ///  [请求类] 进入魔法阵副本
        /// </summary>
        ReqEnterMagicDungeonCode = 1025,
        /// <summary>
        ///  [响应类] 进入魔法阵副本
        /// </summary>
        ResEnterMagicDungeonCode = 1026,
        /// <summary>
        ///  [请求类] 更新临时Vip等级
        /// </summary>
        ReqUpdateVipTimeCode = 1027,
        /// <summary>
        ///  [响应类] 更新临时Vip等级
        /// </summary>
        ResUpdateVipTimeCode = 1028,
        /// <summary>
        ///  [请求类] 播放地雷的特效
        /// </summary>
        ReqPlaySkillEffectCode = 1029,
        /// <summary>
        ///  [响应类] 播放地雷的特效
        /// </summary>
        ResPlaySkillEffectCode = 1030,
        /// <summary>
        ///  [请求类] 和NPC对话
        /// </summary>
        ReqTalkWithNPCCode = 1031,
        /// <summary>
        ///  [响应类] 和NPC对话
        /// </summary>
        ResTalkWithNPCCode = 1032,
        /// <summary>
        ///  [请求类] 通知玩家变蝙蝠
        /// </summary>
        ReqNoticePlayerFlyCode = 1033,
        /// <summary>
        ///  [响应类] 通知玩家变蝙蝠
        /// </summary>
        ResNoticePlayerFlyCode = 1034,
        /// <summary>
        ///  [请求类] 升级天赋
        /// </summary>
        ReqUpgradeTalentCode = 1035,
        /// <summary>
        ///  [响应类] 升级天赋
        /// </summary>
        ResUpgradeTalentCode = 1036,
        /// <summary>
        ///  [请求类] 重置天赋
        /// </summary>
        ReqResetTalentCode = 1037,
        /// <summary>
        ///  [响应类] 重置天赋
        /// </summary>
        ResResetTalentCode = 1038,
        /// <summary>
        ///  [请求类] 开始挖矿
        /// </summary>
        ReqStartMineralCode = 1039,
        /// <summary>
        ///  [响应类] 开始挖矿
        /// </summary>
        ResStartMineralCode = 1040,
        /// <summary>
        ///  [请求类] 更新物品最大星级
        /// </summary>
        ReqUpdateItemMaxStrengthCode = 1041,
        /// <summary>
        ///  [响应类] 更新物品最大星级
        /// </summary>
        ResUpdateItemMaxStrengthCode = 1042,
        /// <summary>
        ///  [请求类] 增加装备最大强化等级
        /// </summary>
        ReqAddEquipMaxStrengthCode = 1043,
        /// <summary>
        ///  [响应类] 增加装备最大强化等级
        /// </summary>
        ResAddEquipMaxStrengthCode = 1044,
        /// <summary>
        ///  [请求类] 设置快捷键
        /// </summary>
        ReqSetHotKeyCode = 1045,
        /// <summary>
        ///  [响应类] 设置快捷键
        /// </summary>
        ResSetHotKeyCode = 1046,
        /// <summary>
        ///  [请求类] 添加红包
        /// </summary>
        ReqAddRedBagInfoCode = 1047,
        /// <summary>
        ///  [响应类] 添加红包
        /// </summary>
        ResAddRedBagInfoCode = 1048,
        /// <summary>
        ///  [请求类] 更新全民红包信息
        /// </summary>
        ReqUpdateRedBagInfoCode = 1049,
        /// <summary>
        ///  [响应类] 更新全民红包信息
        /// </summary>
        ResUpdateRedBagInfoCode = 1050,
        /// <summary>
        ///  [请求类] 请求全民红包基本信息
        /// </summary>
        ReqGetPlayerRedBagInfoCode = 1051,
        /// <summary>
        ///  [响应类] 请求全民红包基本信息
        /// </summary>
        ResGetPlayerRedBagInfoCode = 1052,
        /// <summary>
        ///  [请求类] 增加全民红包日志
        /// </summary>
        ReqAddRedBagLogCode = 1053,
        /// <summary>
        ///  [响应类] 增加全民红包日志
        /// </summary>
        ResAddRedBagLogCode = 1054,
        /// <summary>
        ///  [请求类] 领取全民红包
        /// </summary>
        ReqTakePlayerRedBagCode = 1055,
        /// <summary>
        ///  [响应类] 领取全民红包
        /// </summary>
        ResTakePlayerRedBagCode = 1056,
        /// <summary>
        ///  [请求类] 通知客户端全民红包日志
        /// </summary>
        ReqUpdateRedBagLogCode = 1057,
        /// <summary>
        ///  [响应类] 通知客户端全民红包日志
        /// </summary>
        ResUpdateRedBagLogCode = 1058,
        /// <summary>
        ///  [请求类] 给红包容器加钱
        /// </summary>
        ReqAddMoneyToRedBagVecCode = 1059,
        /// <summary>
        ///  [响应类] 给红包容器加钱
        /// </summary>
        ResAddMoneyToRedBagVecCode = 1060,
        /// <summary>
        ///  [请求类] 更新红包口令
        /// </summary>
        ReqUpdateRedBagCodeCode = 1061,
        /// <summary>
        ///  [响应类] 更新红包口令
        /// </summary>
        ResUpdateRedBagCodeCode = 1062,
        /// <summary>
        ///  [请求类] 删除行会红包
        /// </summary>
        ReqRemoveGuildRedBagCode = 1063,
        /// <summary>
        ///  [响应类] 删除行会红包
        /// </summary>
        ResRemoveGuildRedBagCode = 1064,
        /// <summary>
        ///  [请求类] 领取排行榜奖励
        /// </summary>
        ReqTakeRankAwardCode = 1065,
        /// <summary>
        ///  [响应类] 领取排行榜奖励
        /// </summary>
        ResTakeRankAwardCode = 1066,
        /// <summary>
        ///  [请求类] 更新排行榜领奖信息
        /// </summary>
        ReqUpdateRankAwardInfoCode = 1067,
        /// <summary>
        ///  [响应类] 更新排行榜领奖信息
        /// </summary>
        ResUpdateRankAwardInfoCode = 1068,
        /// <summary>
        ///  [请求类] 通知客户端开始倒计时
        /// </summary>
        ReqNotcieCountDownCode = 1069,
        /// <summary>
        ///  [响应类] 通知客户端开始倒计时
        /// </summary>
        ResNotcieCountDownCode = 1070,
        /// <summary>
        ///  [请求类] 收购物品
        /// </summary>
        ReqPurchaseItemCode = 1071,
        /// <summary>
        ///  [响应类] 收购物品
        /// </summary>
        ResPurchaseItemCode = 1072,
        /// <summary>
        ///  [请求类] 出售物品
        /// </summary>
        ReqSellItemCode = 1073,
        /// <summary>
        ///  [响应类] 出售物品
        /// </summary>
        ResSellItemCode = 1074,
        /// <summary>
        ///  [请求类] 取消收购
        /// </summary>
        ReqCancelPurchaseCode = 1075,
        /// <summary>
        ///  [响应类] 取消收购
        /// </summary>
        ResCancelPurchaseCode = 1076,
        /// <summary>
        ///  [请求类] 添加收购信息
        /// </summary>
        ReqAddPurchaseInfoCode = 1077,
        /// <summary>
        ///  [响应类] 添加收购信息
        /// </summary>
        ResAddPurchaseInfoCode = 1078,
        /// <summary>
        ///  [请求类] 删除收购信息
        /// </summary>
        ReqRemovePurchaseInfoCode = 1079,
        /// <summary>
        ///  [响应类] 删除收购信息
        /// </summary>
        ResRemovePurchaseInfoCode = 1080,
        /// <summary>
        ///  [请求类] 更新商店信息
        /// </summary>
        ReqUpdatePurchaseInfoCode = 1081,
        /// <summary>
        ///  [响应类] 更新商店信息
        /// </summary>
        ResUpdatePurchaseInfoCode = 1082,
        /// <summary>
        ///  [请求类] 收购列表
        /// </summary>
        ReqPurchaseInfoListCode = 1083,
        /// <summary>
        ///  [响应类] 收购列表
        /// </summary>
        ResPurchaseInfoListCode = 1084,
        /// <summary>
        ///  [请求类] 通知前端怪物播放出场动画
        /// </summary>
        ReqPlayDrilledActionCode = 1085,
        /// <summary>
        ///  [响应类] 通知前端怪物播放出场动画
        /// </summary>
        ResPlayDrilledActionCode = 1086,
        /// <summary>
        ///  [请求类] 通知地图服肉身添加BUFF
        /// </summary>
        ReqAddBuffToRouShenCode = 1087,
        /// <summary>
        ///  [响应类] 通知地图服肉身添加BUFF
        /// </summary>
        ResAddBuffToRouShenCode = 1088,
        /// <summary>
        ///  [请求类] 刷新玩家功能怪（镖车，心魔）
        /// </summary>
        ReqSpawnPlayerMonsterCode = 1089,
        /// <summary>
        ///  [响应类] 刷新玩家功能怪（镖车，心魔）
        /// </summary>
        ResSpawnPlayerMonsterCode = 1090,
        /// <summary>
        ///  [请求类] 升级心魔等级
        /// </summary>
        ReqUpgradeInnerDemonsLvCode = 1091,
        /// <summary>
        ///  [响应类] 升级心魔等级
        /// </summary>
        ResUpgradeInnerDemonsLvCode = 1092,
        /// <summary>
        ///  [请求类] 通知世界服因boss掉落添加心魔经验
        /// </summary>
        ReqAddInnerDemonsExpCode = 1093,
        /// <summary>
        ///  [响应类] 通知世界服因boss掉落添加心魔经验
        /// </summary>
        ResAddInnerDemonsExpCode = 1094,
        /// <summary>
        ///  [请求类] 激活心魔buff
        /// </summary>
        ReqActiveInnerDemonsBuffCode = 1095,
        /// <summary>
        ///  [响应类] 激活心魔buff
        /// </summary>
        ResActiveInnerDemonsBuffCode = 1096,
        /// <summary>
        ///  [请求类] 变身心魔
        /// </summary>
        ReqShapeshiftInnerDemonsCode = 1097,
        /// <summary>
        ///  [响应类] 变身心魔
        /// </summary>
        ResShapeshiftInnerDemonsCode = 1098,
        /// <summary>
        ///  [请求类] 更新副本波数信息
        /// </summary>
        ReqUpdateWaveInfoCode = 1099,
        /// <summary>
        ///  [响应类] 更新副本波数信息
        /// </summary>
        ResUpdateWaveInfoCode = 1100,
        /// <summary>
        ///  [请求类] 通知前端尸体被玩家采集
        /// </summary>
        ReqUpdateCollectTimesCode = 1101,
        /// <summary>
        ///  [响应类] 通知前端尸体被玩家采集
        /// </summary>
        ResUpdateCollectTimesCode = 1102,
        /// <summary>
        ///  [请求类] 获取心魔地图密码
        /// </summary>
        ReqGetInnerDDemonsMapInfoCode = 1103,
        /// <summary>
        ///  [响应类] 获取心魔地图密码
        /// </summary>
        ResGetInnerDDemonsMapInfoCode = 1104,
        /// <summary>
        ///  [请求类] 心魔传送
        /// </summary>
        ReqInnerDemonsTransferCode = 1105,
        /// <summary>
        ///  [响应类] 心魔传送
        /// </summary>
        ResInnerDemonsTransferCode = 1106,
        /// <summary>
        ///  [请求类] 后台更新聊天等级信息
        /// </summary>
        ReqUpdateChatLvInfoCode = 1107,
        /// <summary>
        ///  [响应类] 后台更新聊天等级信息
        /// </summary>
        ResUpdateChatLvInfoCode = 1108,
        /// <summary>
        ///  [请求类] 通知地图服添加新的boss活动掉落
        /// </summary>
        ReqAddDropInfoCode = 1109,
        /// <summary>
        ///  [响应类] 通知地图服添加新的boss活动掉落
        /// </summary>
        ResAddDropInfoCode = 1110,
        /// <summary>
        ///  [请求类] 移除活动掉落
        /// </summary>
        ReqRemoveDropInfoCode = 1111,
        /// <summary>
        ///  [响应类] 移除活动掉落
        /// </summary>
        ResRemoveDropInfoCode = 1112,
        /// <summary>
        ///  [请求类] 申请添加关系确认
        /// </summary>
        ReqAddSocietyRelationReplyCode = 1113,
        /// <summary>
        ///  [响应类] 申请添加关系确认
        /// </summary>
        ResAddSocietyRelationReplyCode = 1114,
        /// <summary>
        ///  [请求类] 升级国家宝藏
        /// </summary>
        ReqDropCollectUpgradeCode = 1115,
        /// <summary>
        ///  [响应类] 升级国家宝藏
        /// </summary>
        ResDropCollectUpgradeCode = 1116,
        /// <summary>
        ///  [请求类] 兑换国家宝藏宝箱
        /// </summary>
        ReqExchangeDropCollectArrCode = 1117,
        /// <summary>
        ///  [响应类] 兑换国家宝藏宝箱
        /// </summary>
        ResExchangeDropCollectArrCode = 1118,
        /// <summary>
        ///  [请求类] 领取在线关系亲密度
        /// </summary>
        ReqTakeBrotherRelationValueCode = 1119,
        /// <summary>
        ///  [响应类] 领取在线关系亲密度
        /// </summary>
        ResTakeBrotherRelationValueCode = 1120,
        /// <summary>
        ///  [请求类] 赠送鲜花
        /// </summary>
        ReqSendFlowerCode = 1121,
        /// <summary>
        ///  [响应类] 赠送鲜花
        /// </summary>
        ResSendFlowerCode = 1122,
        /// <summary>
        ///  [请求类] 升级金兰帖
        /// </summary>
        ReqUpgradeJinLanTieCode = 1123,
        /// <summary>
        ///  [响应类] 升级金兰帖
        /// </summary>
        ResUpgradeJinLanTieCode = 1124,
        /// <summary>
        ///  [请求类] 通知杀怪增加的好友度
        /// </summary>
        ReqNoticeKillMonsterAddRelationValueCode = 1125,
        /// <summary>
        ///  [响应类] 通知杀怪增加的好友度
        /// </summary>
        ResNoticeKillMonsterAddRelationValueCode = 1126,
        /// <summary>
        ///  [请求类] 请求传奇骰子
        /// </summary>
        ReqChuanQiShaiZiCode = 1127,
        /// <summary>
        ///  [响应类] 请求传奇骰子
        /// </summary>
        ResChuanQiShaiZiCode = 1128,
        /// <summary>
        ///  [请求类] 更新服务器点数
        /// </summary>
        ReqUpdateServerShaiZiPointCode = 1129,
        /// <summary>
        ///  [响应类] 更新服务器点数
        /// </summary>
        ResUpdateServerShaiZiPointCode = 1130,
        /// <summary>
        ///  [请求类] 更新奖池元宝
        /// </summary>
        ReqUpdateServerShaiZiMoneyCode = 1131,
        /// <summary>
        ///  [响应类] 更新奖池元宝
        /// </summary>
        ResUpdateServerShaiZiMoneyCode = 1132,
        /// <summary>
        ///  [请求类] 花钱传送到藏宝图地图
        /// </summary>
        ReqTransferToTreasureMapCode = 1133,
        /// <summary>
        ///  [响应类] 花钱传送到藏宝图地图
        /// </summary>
        ResTransferToTreasureMapCode = 1134,
        /// <summary>
        ///  [请求类] 增加传奇筛子日志
        /// </summary>
        ReqAddChuanQiShaiZiLogCode = 1135,
        /// <summary>
        ///  [响应类] 增加传奇筛子日志
        /// </summary>
        ResAddChuanQiShaiZiLogCode = 1136,
        /// <summary>
        ///  [请求类] 发送传奇骰子日志给客户端
        /// </summary>
        ReqSendChuanQiShaiZiLogCode = 1137,
        /// <summary>
        ///  [响应类] 发送传奇骰子日志给客户端
        /// </summary>
        ResSendChuanQiShaiZiLogCode = 1138,
        /// <summary>
        ///  [请求类] 通知服务器打开UI
        /// </summary>
        ReqGuideOpenUICode = 1139,
        /// <summary>
        ///  [响应类] 通知服务器打开UI
        /// </summary>
        ResGuideOpenUICode = 1140,
        /// <summary>
        ///  [请求类] 增加免费骰子次数
        /// </summary>
        ReqAddFreeShaiZiTimeCode = 1141,
        /// <summary>
        ///  [响应类] 增加免费骰子次数
        /// </summary>
        ResAddFreeShaiZiTimeCode = 1142,
        /// <summary>
        ///  [请求类] 增加日常活动日志
        /// </summary>
        ReqAddActivityLogCode = 1143,
        /// <summary>
        ///  [响应类] 增加日常活动日志
        /// </summary>
        ResAddActivityLogCode = 1144,
        /// <summary>
        ///  [请求类] 升级烧猪守卫
        /// </summary>
        ReqUpgradeFirePigMonsterCode = 1145,
        /// <summary>
        ///  [响应类] 升级烧猪守卫
        /// </summary>
        ResUpgradeFirePigMonsterCode = 1146,
        /// <summary>
        ///  [请求类] 领取全民红包奖励
        /// </summary>
        ReqTakeRedBagMoneyCode = 1147,
        /// <summary>
        ///  [响应类] 领取全民红包奖励
        /// </summary>
        ResTakeRedBagMoneyCode = 1148,
        /// <summary>
        ///  [请求类] 更新玩家头像
        /// </summary>
        ReqUpdatePlayerHeadSculptureCode = 1149,
        /// <summary>
        ///  [响应类] 更新玩家头像
        /// </summary>
        ResUpdatePlayerHeadSculptureCode = 1150,
        /// <summary>
        ///  [请求类] 更新玩家是否能上榜
        /// </summary>
        ReqChangePlayerRankingCode = 1151,
        /// <summary>
        ///  [响应类] 更新玩家是否能上榜
        /// </summary>
        ResChangePlayerRankingCode = 1152,
        /// <summary>
        ///  [请求类] 领取限时任务阶段奖励
        /// </summary>
        ReqTakeLimiteTaskTypeAwardCode = 1153,
        /// <summary>
        ///  [响应类] 领取限时任务阶段奖励
        /// </summary>
        ResTakeLimiteTaskTypeAwardCode = 1154,
        /// <summary>
        ///  [请求类] 更新坐骑ID
        /// </summary>
        ReqUpdateMountsIDCode = 1155,
        /// <summary>
        ///  [响应类] 更新坐骑ID
        /// </summary>
        ResUpdateMountsIDCode = 1156,
        /// <summary>
        ///  [请求类] 更新心魔变身时间
        /// </summary>
        ReqUpdateShapeshiftInnerDemonsTimesCode = 1157,
        /// <summary>
        ///  [响应类] 更新心魔变身时间
        /// </summary>
        ResUpdateShapeshiftInnerDemonsTimesCode = 1158,
        /// <summary>
        ///  [请求类] 更新完成限时任务玩家数量
        /// </summary>
        ReqUpdateLimiteTaskPlayerCountCode = 1159,
        /// <summary>
        ///  [响应类] 更新完成限时任务玩家数量
        /// </summary>
        ResUpdateLimiteTaskPlayerCountCode = 1160,
        /// <summary>
        ///  [请求类] 通知客户端宝藏任务兑换信息
        /// </summary>
        ReqNoticeTreasureMapTaskInfoCode = 1161,
        /// <summary>
        ///  [响应类] 通知客户端宝藏任务兑换信息
        /// </summary>
        ResNoticeTreasureMapTaskInfoCode = 1162,
        /// <summary>
        ///  [请求类] 更新技能冷却时间
        /// </summary>
        ReqUpdateSkillCDTimeCode = 1163,
        /// <summary>
        ///  [响应类] 更新技能冷却时间
        /// </summary>
        ResUpdateSkillCDTimeCode = 1164,
        /// <summary>
        ///  [请求类] 更新玩家vip等级
        /// </summary>
        ReqUpdateVipLvCode = 1165,
        /// <summary>
        ///  [响应类] 更新玩家vip等级
        /// </summary>
        ResUpdateVipLvCode = 1166,
        /// <summary>
        ///  [请求类] 自动移动到哪里
        /// </summary>
        ReqAutoMoveToPointCode = 1167,
        /// <summary>
        ///  [响应类] 自动移动到哪里
        /// </summary>
        ResAutoMoveToPointCode = 1168,
        /// <summary>
        ///  [请求类] 清除自动移动
        /// </summary>
        ReqClearAutoMoveCode = 1169,
        /// <summary>
        ///  [响应类] 清除自动移动
        /// </summary>
        ResClearAutoMoveCode = 1170,
        /// <summary>
        ///  [请求类] 随机角色名
        /// </summary>
        ReqRandomRoleNameCode = 1171,
        /// <summary>
        ///  [响应类] 随机角色名
        /// </summary>
        ResRandomRoleNameCode = 1172,
        /// <summary>
        ///  [请求类] 更新天下第一名字
        /// </summary>
        ReqUpdateTianXiaDiYiNameCode = 1173,
        /// <summary>
        ///  [响应类] 更新天下第一名字
        /// </summary>
        ResUpdateTianXiaDiYiNameCode = 1174,
        /// <summary>
        ///  [请求类] 删除离线挂机雕像
        /// </summary>
        ReqDeleteOffLineGuaJiPlayerCode = 1175,
        /// <summary>
        ///  [响应类] 删除离线挂机雕像
        /// </summary>
        ResDeleteOffLineGuaJiPlayerCode = 1176,
        /// <summary>
        ///  [请求类] 增加离线挂机玩家
        /// </summary>
        ReqAddOffLineGuaJiPlayerCode = 1177,
        /// <summary>
        ///  [响应类] 增加离线挂机玩家
        /// </summary>
        ResAddOffLineGuaJiPlayerCode = 1178,
        /// <summary>
        ///  [请求类] 领取开服离线挂机经验
        /// </summary>
        ReqGetOpenDayOfftimeExpCode = 1179,
        /// <summary>
        ///  [响应类] 领取开服离线挂机经验
        /// </summary>
        ResGetOpenDayOfftimeExpCode = 1180,
        /// <summary>
        ///  [请求类] 通知客户端大刀跪下
        /// </summary>
        ReqNoticeDaDaoGuiXiaCode = 1181,
        /// <summary>
        ///  [响应类] 通知客户端大刀跪下
        /// </summary>
        ResNoticeDaDaoGuiXiaCode = 1182,
        /// <summary>
        ///  [请求类] 更新是否是沙巴克城主
        /// </summary>
        ReqUpdateIsShaBakeOwnerCode = 1183,
        /// <summary>
        ///  [响应类] 更新是否是沙巴克城主
        /// </summary>
        ResUpdateIsShaBakeOwnerCode = 1184,
        /// <summary>
        ///  [请求类] 更新雕像类怪物状态
        /// </summary>
        ReqUpdateMonsterStateCode = 1185,
        /// <summary>
        ///  [响应类] 更新雕像类怪物状态
        /// </summary>
        ResUpdateMonsterStateCode = 1186,
        /// <summary>
        ///  [请求类] 通知地图删除怪物
        /// </summary>
        ReqDeleteMonsterCode = 1187,
        /// <summary>
        ///  [响应类] 通知地图删除怪物
        /// </summary>
        ResDeleteMonsterCode = 1188,
        /// <summary>
        ///  [请求类] 传送玩家到新地图
        /// </summary>
        ReqNoticeTransferPlayerToMapCode = 1189,
        /// <summary>
        ///  [响应类] 传送玩家到新地图
        /// </summary>
        ResNoticeTransferPlayerToMapCode = 1190,
        /// <summary>
        ///  [请求类] 升级魔器系统
        /// </summary>
        ReqUpgradeGemEquipLvCode = 1191,
        /// <summary>
        ///  [响应类] 升级魔器系统
        /// </summary>
        ResUpgradeGemEquipLvCode = 1192,
        /// <summary>
        ///  [请求类] 更新队友坐标
        /// </summary>
        ReqUpdateGroupMemberXYCode = 1193,
        /// <summary>
        ///  [响应类] 更新队友坐标
        /// </summary>
        ResUpdateGroupMemberXYCode = 1194,
        /// <summary>
        ///  [请求类] 通知跨服胜利ID
        /// </summary>
        ReqNoticeServiceWarWinnerIDCode = 1195,
        /// <summary>
        ///  [响应类] 通知跨服胜利ID
        /// </summary>
        ResNoticeServiceWarWinnerIDCode = 1196,
        /// <summary>
        ///  [请求类] 发送红包口令
        /// </summary>
        ReqSendRedBagCodeCode = 1197,
        /// <summary>
        ///  [响应类] 发送红包口令
        /// </summary>
        ResSendRedBagCodeCode = 1198,
        /// <summary>
        ///  [请求类] 自动任务
        /// </summary>
        ReqAutoMainTaskCode = 1199,
        /// <summary>
        ///  [响应类] 自动任务
        /// </summary>
        ResAutoMainTaskCode = 1200,
        /// <summary>
        ///  [请求类] 
        /// </summary>
        ReqNoticeHeartIDCode = 1201,
        /// <summary>
        ///  [响应类] 
        /// </summary>
        ResNoticeHeartIDCode = 1202,
        /// <summary>
        ///  [请求类] 宝藏仓库全部经验丹
        /// </summary>
        ReqUseTreasureAllExpItemCode = 1203,
        /// <summary>
        ///  [响应类] 宝藏仓库全部经验丹
        /// </summary>
        ResUseTreasureAllExpItemCode = 1204,
        /// <summary>
        ///  [请求类] 修改检测参数
        /// </summary>
        ReqUpDateDeviationTimeCode = 1205,
        /// <summary>
        ///  [响应类] 修改检测参数
        /// </summary>
        ResUpDateDeviationTimeCode = 1206,
        /// <summary>
        ///  [请求类] 修改屏蔽信息
        /// </summary>
        ReqSetScreenInfoCode = 1207,
        /// <summary>
        ///  [响应类] 修改屏蔽信息
        /// </summary>
        ResSetScreenInfoCode = 1208,
        /// <summary>
        ///  [请求类] 刷新杀手
        /// </summary>
        ReqSpawnKillerCode = 1209,
        /// <summary>
        ///  [响应类] 刷新杀手
        /// </summary>
        ResSpawnKillerCode = 1210,
        /// <summary>
        ///  [请求类] 购买心魔派遣VIP
        /// </summary>
        ReqBuyXinMoPaiQianVipCode = 1211,
        /// <summary>
        ///  [响应类] 购买心魔派遣VIP
        /// </summary>
        ResBuyXinMoPaiQianVipCode = 1212,
        /// <summary>
        ///  [请求类] 心魔派遣
        /// </summary>
        ReqXinMoPaiQianCode = 1213,
        /// <summary>
        ///  [响应类] 心魔派遣
        /// </summary>
        ResXinMoPaiQianCode = 1214,
        /// <summary>
        ///  [请求类] 领取心魔派遣奖励
        /// </summary>
        ReqTakeXinMoPaiQianAwardCode = 1215,
        /// <summary>
        ///  [响应类] 领取心魔派遣奖励
        /// </summary>
        ResTakeXinMoPaiQianAwardCode = 1216,
        /// <summary>
        ///  [请求类] 心魔派遣时间结束
        /// </summary>
        ReqXinMoPaiQianTimeEndCode = 1217,
        /// <summary>
        ///  [响应类] 心魔派遣时间结束
        /// </summary>
        ResXinMoPaiQianTimeEndCode = 1218,
        /// <summary>
        ///  [请求类] 怪物最后一击
        /// </summary>
        ReqKillMonsterCode = 1219,
        /// <summary>
        ///  [响应类] 怪物最后一击
        /// </summary>
        ResKillMonsterCode = 1220,
        /// <summary>
        ///  [请求类] 更新翅膀技能
        /// </summary>
        ReqUpdateWingSkillCode = 1221,
        /// <summary>
        ///  [响应类] 更新翅膀技能
        /// </summary>
        ResUpdateWingSkillCode = 1222,
        /// <summary>
        ///  [请求类] 设置行会操作物品权限
        /// </summary>
        ReqSetGuildTreatedItemInfoCode = 1223,
        /// <summary>
        ///  [响应类] 设置行会操作物品权限
        /// </summary>
        ResSetGuildTreatedItemInfoCode = 1224,
        /// <summary>
        ///  [请求类] 进入炼狱地图
        /// </summary>
        ReqLianYuTransferCode = 1225,
        /// <summary>
        ///  [响应类] 进入炼狱地图
        /// </summary>
        ResLianYuTransferCode = 1226,
        /// <summary>
        ///  [请求类] 购买肉身无敌buff
        /// </summary>
        ReqBuyRouShenBuffCode = 1227,
        /// <summary>
        ///  [响应类] 购买肉身无敌buff
        /// </summary>
        ResBuyRouShenBuffCode = 1228,
        /// <summary>
        ///  [请求类] 通知玩家已经购买了几次肉身无敌buff
        /// </summary>
        ReqNoticeBuyRouShenTimesCode = 1229,
        /// <summary>
        ///  [响应类] 通知玩家已经购买了几次肉身无敌buff
        /// </summary>
        ResNoticeBuyRouShenTimesCode = 1230,
        /// <summary>
        ///  [请求类] 通知经验红包元宝属性
        /// </summary>
        ReqUpdateRedBagMoneyCode = 1231,
        /// <summary>
        ///  [响应类] 通知经验红包元宝属性
        /// </summary>
        ResUpdateRedBagMoneyCode = 1232,
        /// <summary>
        ///  [请求类] 通知经验红包中奖了
        /// </summary>
        ReqNotcieRedBagLuckyCode = 1233,
        /// <summary>
        ///  [响应类] 通知经验红包中奖了
        /// </summary>
        ResNotcieRedBagLuckyCode = 1234,
        /// <summary>
        ///  [请求类] 玩家使用活动物品
        /// </summary>
        ReqPlayerUseActivityItemCode = 1235,
        /// <summary>
        ///  [响应类] 玩家使用活动物品
        /// </summary>
        ResPlayerUseActivityItemCode = 1236,
        /// <summary>
        ///  [请求类] 后台设置平台VIP信息
        /// </summary>
        ReqGMSetPlatFormVIPCode = 1237,
        /// <summary>
        ///  [响应类] 后台设置平台VIP信息
        /// </summary>
        ResGMSetPlatFormVIPCode = 1238,
        /// <summary>
        ///  [请求类] 请求文件
        /// </summary>
        ReqGetDumpFileCode = 1239,
        /// <summary>
        ///  [响应类] 请求文件
        /// </summary>
        ResGetDumpFileCode = 1240,
        /// <summary>
        ///  [请求类] 通知创建行会
        /// </summary>
        ReqNoticeCreateGuildCode = 1241,
        /// <summary>
        ///  [响应类] 通知创建行会
        /// </summary>
        ResNoticeCreateGuildCode = 1242,
        /// <summary>
        ///  [请求类] 欢乐猜拳出拳
        /// </summary>
        ReqHappyGuessCode = 1243,
        /// <summary>
        ///  [响应类] 欢乐猜拳出拳
        /// </summary>
        ResHappyGuessCode = 1244,
        /// <summary>
        ///  [请求类] 提取猜拳钱包
        /// </summary>
        ReqTakeGuessMoneyCode = 1245,
        /// <summary>
        ///  [响应类] 提取猜拳钱包
        /// </summary>
        ResTakeGuessMoneyCode = 1246,
        /// <summary>
        ///  [请求类] 猜拳玩家信息
        /// </summary>
        ReqGuessPlayerInfoCode = 1247,
        /// <summary>
        ///  [响应类] 猜拳玩家信息
        /// </summary>
        ResGuessPlayerInfoCode = 1248,
        /// <summary>
        ///  [请求类] 更新猜拳任务信息
        /// </summary>
        ReqUpdateGuessTaskInfoCode = 1249,
        /// <summary>
        ///  [响应类] 更新猜拳任务信息
        /// </summary>
        ResUpdateGuessTaskInfoCode = 1250,
        /// <summary>
        ///  [请求类] 更新猜拳奖池
        /// </summary>
        ReqUpdateGuessMoneyPoolCode = 1251,
        /// <summary>
        ///  [响应类] 更新猜拳奖池
        /// </summary>
        ResUpdateGuessMoneyPoolCode = 1252,
        /// <summary>
        ///  [请求类] 更新猜拳玩家所得元宝
        /// </summary>
        ReqUpdateGuessPlayerMoneyCode = 1253,
        /// <summary>
        ///  [响应类] 更新猜拳玩家所得元宝
        /// </summary>
        ResUpdateGuessPlayerMoneyCode = 1254,
        /// <summary>
        ///  [请求类] 
        /// </summary>
        ReqSuperAddMoneyCode = 1255,
        /// <summary>
        ///  [响应类] 
        /// </summary>
        ResSuperAddMoneyCode = 1256,
        /// <summary>
        ///  [请求类] 更新卧龙山庄BOSS信息
        /// </summary>
        ReqUpdateWolongBossInfoCode = 1257,
        /// <summary>
        ///  [响应类] 更新卧龙山庄BOSS信息
        /// </summary>
        ResUpdateWolongBossInfoCode = 1258,
        /// <summary>
        ///  [请求类] 卧龙山庄宝箱信息
        /// </summary>
        ReqWolongBoxInfoCode = 1259,
        /// <summary>
        ///  [响应类] 卧龙山庄宝箱信息
        /// </summary>
        ResWolongBoxInfoCode = 1260,
        /// <summary>
        ///  [请求类] 进入奇遇副本
        /// </summary>
        ReqEnterAdventureMapCode = 1261,
        /// <summary>
        ///  [响应类] 进入奇遇副本
        /// </summary>
        ResEnterAdventureMapCode = 1262,
        /// <summary>
        ///  [请求类] 购买奇遇商店商品
        /// </summary>
        ReqBuyAdventureItemCode = 1263,
        /// <summary>
        ///  [响应类] 购买奇遇商店商品
        /// </summary>
        ResBuyAdventureItemCode = 1264,
        /// <summary>
        ///  [请求类] 奇遇副本已生成
        /// </summary>
        ReqAdventureRefreshCode = 1265,
        /// <summary>
        ///  [响应类] 奇遇副本已生成
        /// </summary>
        ResAdventureRefreshCode = 1266,
        /// <summary>
        ///  [请求类] 设置副本是否自动双倍
        /// </summary>
        ReqSetDoubleDungeonCode = 1267,
        /// <summary>
        ///  [响应类] 设置副本是否自动双倍
        /// </summary>
        ResSetDoubleDungeonCode = 1268,
        /// <summary>
        ///  [请求类] 进入超玩副本
        /// </summary>
        ReqEnterYYSuperDungeonCode = 1269,
        /// <summary>
        ///  [响应类] 进入超玩副本
        /// </summary>
        ResEnterYYSuperDungeonCode = 1270,
        /// <summary>
        ///  [请求类] 转换职业
        /// </summary>
        ReqChangeCareerCode = 1271,
        /// <summary>
        ///  [响应类] 转换职业
        /// </summary>
        ResChangeCareerCode = 1272,
        /// <summary>
        ///  [请求类] 拍卖行上架(worldserver通知cacheserver)
        /// </summary>
        ReqAddAuctionItemCode = 1273,
        /// <summary>
        ///  [响应类] 拍卖行上架(worldserver通知cacheserver)
        /// </summary>
        ResAddAuctionItemCode = 1274,
        /// <summary>
        ///  [请求类] 拍卖行物品下架/被买走
        /// </summary>
        ReqDelAuctionItemCode = 1275,
        /// <summary>
        ///  [响应类] 拍卖行物品下架/被买走
        /// </summary>
        ResDelAuctionItemCode = 1276,
        /// <summary>
        ///  [请求类] 更换竞拍者信息(竞拍)
        /// </summary>
        ReqUpdateAuctionItemCode = 1277,
        /// <summary>
        ///  [响应类] 更换竞拍者信息(竞拍)
        /// </summary>
        ResUpdateAuctionItemCode = 1278,
        /// <summary>
        ///  [请求类] 购买拍卖行物品（一口价）
        /// </summary>
        ReqBuyAuctionItemCode = 1279,
        /// <summary>
        ///  [响应类] 购买拍卖行物品（一口价）
        /// </summary>
        ResBuyAuctionItemCode = 1280,
        /// <summary>
        ///  [请求类] 获取拍卖行物品列表
        /// </summary>
        ReqGetAuctionItemsCode = 1281,
        /// <summary>
        ///  [响应类] 获取拍卖行物品列表
        /// </summary>
        ResGetAuctionItemsCode = 1282,
        /// <summary>
        ///  [请求类] 拍卖行上架（客户端请求服务器）
        /// </summary>
        ReqPlayerAddAuctionItemCode = 1283,
        /// <summary>
        ///  [响应类] 拍卖行上架（客户端请求服务器）
        /// </summary>
        ResPlayerAddAuctionItemCode = 1284,
        /// <summary>
        ///  [请求类] 金刚石回收
        /// </summary>
        ReqDiamondRecycleCode = 1285,
        /// <summary>
        ///  [响应类] 金刚石回收
        /// </summary>
        ResDiamondRecycleCode = 1286,
        /// <summary>
        ///  [请求类] 开宝箱(转圈模式)
        /// </summary>
        ReqOpenCircleChestCode = 1287,
        /// <summary>
        ///  [响应类] 开宝箱(转圈模式)
        /// </summary>
        ResOpenCircleChestCode = 1288,
        /// <summary>
        ///  [请求类] 更改物品信息
        /// </summary>
        ReqUpDateItemInfoCode = 1289,
        /// <summary>
        ///  [响应类] 更改物品信息
        /// </summary>
        ResUpDateItemInfoCode = 1290,
        /// <summary>
        ///  [请求类] 通知缓存服更新物品Data3属性
        /// </summary>
        ReqNoticeUpdateItemData3Code = 1291,
        /// <summary>
        ///  [响应类] 通知缓存服更新物品Data3属性
        /// </summary>
        ResNoticeUpdateItemData3Code = 1292,
        /// <summary>
        ///  [请求类] 购买行会buff
        /// </summary>
        ReqBuyGuildBuffCode = 1293,
        /// <summary>
        ///  [响应类] 购买行会buff
        /// </summary>
        ResBuyGuildBuffCode = 1294,
        /// <summary>
        ///  [请求类] 行会无尽地狱活动信息
        /// </summary>
        ReqHHWJDYActivityInfoCode = 1295,
        /// <summary>
        ///  [响应类] 行会无尽地狱活动信息
        /// </summary>
        ResHHWJDYActivityInfoCode = 1296,
        /// <summary>
        ///  [请求类] 请求行会祭坛祭祀
        /// </summary>
        ReqAltarSacrificeCode = 1297,
        /// <summary>
        ///  [响应类] 请求行会祭坛祭祀
        /// </summary>
        ResAltarSacrificeCode = 1298,
        /// <summary>
        ///  [请求类] 世界服通知地图夫，玩家购买行会buff
        /// </summary>
        ReqOnPlayerBuyGuildBuffCode = 1299,
        /// <summary>
        ///  [响应类] 世界服通知地图夫，玩家购买行会buff
        /// </summary>
        ResOnPlayerBuyGuildBuffCode = 1300,
        /// <summary>
        ///  [请求类] 通知世界服发公告
        /// </summary>
        ReqNoticeWorldSendSystemMessageCode = 1301,
        /// <summary>
        ///  [响应类] 通知世界服发公告
        /// </summary>
        ResNoticeWorldSendSystemMessageCode = 1302,
        /// <summary>
        ///  [请求类] 行会buff信息
        /// </summary>
        ReqNoticeGuildBuffListCode = 1303,
        /// <summary>
        ///  [响应类] 行会buff信息
        /// </summary>
        ResNoticeGuildBuffListCode = 1304,
        /// <summary>
        ///  [请求类] 上架物品到拍卖行
        /// </summary>
        ReqAddItemToAuctionCode = 1305,
        /// <summary>
        ///  [响应类] 上架物品到拍卖行
        /// </summary>
        ResAddItemToAuctionCode = 1306,
        /// <summary>
        ///  [请求类] 装备重铸
        /// </summary>
        ReqRecastEquipCode = 1307,
        /// <summary>
        ///  [响应类] 装备重铸
        /// </summary>
        ResRecastEquipCode = 1308,
        /// <summary>
        ///  [请求类] 开放下一层入口
        /// </summary>
        ReqAllowTransferToNextMapCode = 1309,
        /// <summary>
        ///  [响应类] 开放下一层入口
        /// </summary>
        ResAllowTransferToNextMapCode = 1310,
        /// <summary>
        ///  [请求类] 通知缓存服添加物品（非玩家）
        /// </summary>
        ReqNoticeAddPublicItemCode = 1311,
        /// <summary>
        ///  [响应类] 通知缓存服添加物品（非玩家）
        /// </summary>
        ResNoticeAddPublicItemCode = 1312,
        /// <summary>
        ///  [请求类] 通知缓存服删除物品
        /// </summary>
        ReqNoticeDelPublicItemCode = 1313,
        /// <summary>
        ///  [响应类] 通知缓存服删除物品
        /// </summary>
        ResNoticeDelPublicItemCode = 1314,
        /// <summary>
        ///  [请求类] 初始化拍卖行物品
        /// </summary>
        ReqInitializeAuctionItemCode = 1315,
        /// <summary>
        ///  [响应类] 初始化拍卖行物品
        /// </summary>
        ResInitializeAuctionItemCode = 1316,
        /// <summary>
        ///  [请求类] 矿工雇佣
        /// </summary>
        ReqMinerHireCode = 1317,
        /// <summary>
        ///  [响应类] 矿工雇佣
        /// </summary>
        ResMinerHireCode = 1318,
        /// <summary>
        ///  [请求类] 通知采矿信息
        /// </summary>
        ReqNoticeMinerInfoCode = 1319,
        /// <summary>
        ///  [响应类] 通知采矿信息
        /// </summary>
        ResNoticeMinerInfoCode = 1320,
        /// <summary>
        ///  [请求类] 变更矿工自动复活信息
        /// </summary>
        ReqChangeMinerAutoReviveStatusCode = 1321,
        /// <summary>
        ///  [响应类] 变更矿工自动复活信息
        /// </summary>
        ResChangeMinerAutoReviveStatusCode = 1322,
        /// <summary>
        ///  [请求类] 挖矿结果
        /// </summary>
        ReqNoticeDigOreResultCode = 1323,
        /// <summary>
        ///  [响应类] 挖矿结果
        /// </summary>
        ResNoticeDigOreResultCode = 1324,
        /// <summary>
        ///  [请求类] 在地图上刷新矿工
        /// </summary>
        ReqSpwanMinerCode = 1325,
        /// <summary>
        ///  [响应类] 在地图上刷新矿工
        /// </summary>
        ResSpwanMinerCode = 1326,
        /// <summary>
        ///  [请求类] 变更矿工状态
        /// </summary>
        ReqChangeMapMinerStateCode = 1327,
        /// <summary>
        ///  [响应类] 变更矿工状态
        /// </summary>
        ResChangeMapMinerStateCode = 1328,
        /// <summary>
        ///  [请求类] 一键提取矿工包裹
        /// </summary>
        ReqExtractMinerItemCode = 1329,
        /// <summary>
        ///  [响应类] 一键提取矿工包裹
        /// </summary>
        ResExtractMinerItemCode = 1330,
        /// <summary>
        ///  [请求类] 挖矿结束通过邮件发放矿石
        /// </summary>
        ReqMinerAddItemByMailCode = 1331,
        /// <summary>
        ///  [响应类] 挖矿结束通过邮件发放矿石
        /// </summary>
        ResMinerAddItemByMailCode = 1332,
        /// <summary>
        ///  [请求类] 新增矿工日志
        /// </summary>
        ReqNoticeAddMinerLogCode = 1333,
        /// <summary>
        ///  [响应类] 新增矿工日志
        /// </summary>
        ResNoticeAddMinerLogCode = 1334,
        /// <summary>
        ///  [请求类] 矿工日志列表
        /// </summary>
        ReqGetMinerLogListCode = 1335,
        /// <summary>
        ///  [响应类] 矿工日志列表
        /// </summary>
        ResGetMinerLogListCode = 1336,
        /// <summary>
        ///  [请求类] 矿工日志初始化
        /// </summary>
        ReqInitMinerLogCode = 1337,
        /// <summary>
        ///  [响应类] 矿工日志初始化
        /// </summary>
        ResInitMinerLogCode = 1338,
        /// <summary>
        ///  [请求类] 矿工信息初始化
        /// </summary>
        ReqInitMinerDataCode = 1339,
        /// <summary>
        ///  [响应类] 矿工信息初始化
        /// </summary>
        ResInitMinerDataCode = 1340,
        /// <summary>
        ///  [请求类] 通知缓存服新增矿工信息
        /// </summary>
        ReqAddMinerInfoCode = 1341,
        /// <summary>
        ///  [响应类] 通知缓存服新增矿工信息
        /// </summary>
        ResAddMinerInfoCode = 1342,
        /// <summary>
        ///  [请求类] 通知矿工背包物品数量
        /// </summary>
        ReqUpdateMinerBagCountCode = 1343,
        /// <summary>
        ///  [响应类] 通知矿工背包物品数量
        /// </summary>
        ResUpdateMinerBagCountCode = 1344,
        /// <summary>
        ///  [请求类] 通知缓存服刷新物品额外属性
        /// </summary>
        ReqNoticeUpdateItemAdditionalAttributesCode = 1345,
        /// <summary>
        ///  [响应类] 通知缓存服刷新物品额外属性
        /// </summary>
        ResNoticeUpdateItemAdditionalAttributesCode = 1346,
        /// <summary>
        ///  [请求类] 更改装备来源信息
        /// </summary>
        ReqChangeItemSourceInfoCode = 1347,
        /// <summary>
        ///  [响应类] 更改装备来源信息
        /// </summary>
        ResChangeItemSourceInfoCode = 1348,
        /// <summary>
        ///  [请求类] 购买泡点buff
        /// </summary>
        ReqBuyBubbleBuffCode = 1349,
        /// <summary>
        ///  [响应类] 购买泡点buff
        /// </summary>
        ResBuyBubbleBuffCode = 1350,
        /// <summary>
        ///  [请求类] 获取会员特权礼包领取状态
        /// </summary>
        ReqMembershipAwardsStateCode = 1351,
        /// <summary>
        ///  [响应类] 获取会员特权礼包领取状态
        /// </summary>
        ResMembershipAwardsStateCode = 1352,
        /// <summary>
        ///  [请求类] 领取会员礼包奖励
        /// </summary>
        ReqGetMembershipAwardsCode = 1353,
        /// <summary>
        ///  [响应类] 领取会员礼包奖励
        /// </summary>
        ResGetMembershipAwardsCode = 1354,
        /// <summary>
        ///  [请求类] 购买会员(秒升会员)
        /// </summary>
        ReqBuyMembershipCode = 1355,
        /// <summary>
        ///  [响应类] 购买会员(秒升会员)
        /// </summary>
        ResBuyMembershipCode = 1356,
        /// <summary>
        ///  [请求类] 更新会员等级(购买和使用会员卡)
        /// </summary>
        ReqUpdateMembershipLvCode = 1357,
        /// <summary>
        ///  [响应类] 更新会员等级(购买和使用会员卡)
        /// </summary>
        ResUpdateMembershipLvCode = 1358,
        /// <summary>
        ///  [请求类] 溅射通知
        /// </summary>
        ReqNoticeSpreadCode = 1359,
        /// <summary>
        ///  [响应类] 溅射通知
        /// </summary>
        ResNoticeSpreadCode = 1360,
        /// <summary>
        ///  [请求类] 通知地图服根据规则刷新怪物
        /// </summary>
        ReqNoticeSpwanMonByTemplateCode = 1361,
        /// <summary>
        ///  [响应类] 通知地图服根据规则刷新怪物
        /// </summary>
        ResNoticeSpwanMonByTemplateCode = 1362,
        /// <summary>
        ///  [请求类] 发布悬赏任务
        /// </summary>
        ReqIssueOfferTaskCode = 1363,
        /// <summary>
        ///  [响应类] 发布悬赏任务
        /// </summary>
        ResIssueOfferTaskCode = 1364,
        /// <summary>
        ///  [请求类] 领取悬赏任务
        /// </summary>
        ReqReceiveOfferTaskCode = 1365,
        /// <summary>
        ///  [响应类] 领取悬赏任务
        /// </summary>
        ResReceiveOfferTaskCode = 1366,
        /// <summary>
        ///  [请求类] 获取悬赏任务列表
        /// </summary>
        ReqGetOfferTaskListCode = 1367,
        /// <summary>
        ///  [响应类] 获取悬赏任务列表
        /// </summary>
        ResGetOfferTaskListCode = 1368,
        /// <summary>
        ///  [请求类] 刷新悬赏任务进度（接取方）
        /// </summary>
        ReqUpdateOfferTaskProgressCode = 1369,
        /// <summary>
        ///  [响应类] 刷新悬赏任务进度（接取方）
        /// </summary>
        ResUpdateOfferTaskProgressCode = 1370,
        /// <summary>
        ///  [请求类] 放弃悬赏任务
        /// </summary>
        ReqGiveUpOfferTaskCode = 1371,
        /// <summary>
        ///  [响应类] 放弃悬赏任务
        /// </summary>
        ResGiveUpOfferTaskCode = 1372,
        /// <summary>
        ///  [请求类] 通知缓存服刷新任务信息
        /// </summary>
        ReqUpdateOfferTaskDataCode = 1373,
        /// <summary>
        ///  [响应类] 通知缓存服刷新任务信息
        /// </summary>
        ResUpdateOfferTaskDataCode = 1374,
        /// <summary>
        ///  [请求类] 玩家悬赏任务信息初始化
        /// </summary>
        ReqInitPlayerOfferTaskDataCode = 1375,
        /// <summary>
        ///  [响应类] 玩家悬赏任务信息初始化
        /// </summary>
        ResInitPlayerOfferTaskDataCode = 1376,
        /// <summary>
        ///  [请求类] 悬赏任务模块初始化，拉取任务列表
        /// </summary>
        ReqInitOfferTaskModuleCode = 1377,
        /// <summary>
        ///  [响应类] 悬赏任务模块初始化，拉取任务列表
        /// </summary>
        ResInitOfferTaskModuleCode = 1378,
        /// <summary>
        ///  [请求类] 存储客户端自定义信息
        /// </summary>
        ReqStoreClientDefinedInfoCode = 1379,
        /// <summary>
        ///  [响应类] 存储客户端自定义信息
        /// </summary>
        ResStoreClientDefinedInfoCode = 1380,
        /// <summary>
        ///  [请求类] 更新世界服挑战Boss信息
        /// </summary>
        ReqUpdateWorldBossChallengeInfoCode = 1381,
        /// <summary>
        ///  [响应类] 更新世界服挑战Boss信息
        /// </summary>
        ResUpdateWorldBossChallengeInfoCode = 1382,
        /// <summary>
        ///  [请求类] 获取地图中某些Boss的数量
        /// </summary>
        ReqGetMapBossChallengeNumCode = 1383,
        /// <summary>
        ///  [响应类] 获取地图中某些Boss的数量
        /// </summary>
        ResGetMapBossChallengeNumCode = 1384,
        /// <summary>
        ///  [请求类] 通知发布方任务信息（发布任务信息，发布次数，发布任务完成情况）
        /// </summary>
        ReqNoticePublisherTaskInfoCode = 1385,
        /// <summary>
        ///  [响应类] 通知发布方任务信息（发布任务信息，发布次数，发布任务完成情况）
        /// </summary>
        ResNoticePublisherTaskInfoCode = 1386,
        /// <summary>
        ///  [请求类] 新击杀Boss传送
        /// </summary>
        ReqNewBossTransferCode = 1387,
        /// <summary>
        ///  [响应类] 新击杀Boss传送
        /// </summary>
        ResNewBossTransferCode = 1388,
        /// <summary>
        ///  [请求类] 清理周常历练值信息
        /// </summary>
        ReqUpdateLivenessWeeklyInfoCode = 1389,
        /// <summary>
        ///  [响应类] 清理周常历练值信息
        /// </summary>
        ResUpdateLivenessWeeklyInfoCode = 1390,
        /// <summary>
        ///  [请求类] 更新商城限购物品信息(礼包类分栏)
        /// </summary>
        ReqUpdateLimitTimeShopItemCode = 1391,
        /// <summary>
        ///  [响应类] 更新商城限购物品信息(礼包类分栏)
        /// </summary>
        ResUpdateLimitTimeShopItemCode = 1392,
        /// <summary>
        ///  [请求类] 从市场购买道具
        /// </summary>
        ReqBuyItemFromMarketCode = 1393,
        /// <summary>
        ///  [响应类] 从市场购买道具
        /// </summary>
        ResBuyItemFromMarketCode = 1394,
        /// <summary>
        ///  [请求类] 更新黑市集市道具信息
        /// </summary>
        ReqUpdateBRMarketItemInfoCode = 1395,
        /// <summary>
        ///  [响应类] 更新黑市集市道具信息
        /// </summary>
        ResUpdateBRMarketItemInfoCode = 1396,
        /// <summary>
        ///  [请求类] 玩家炼体
        /// </summary>
        ReqRefiningBodyCode = 1397,
        /// <summary>
        ///  [响应类] 玩家炼体
        /// </summary>
        ResRefiningBodyCode = 1398,
        /// <summary>
        ///  [请求类] 物品回收设置
        /// </summary>
        ReqItemRecycleSetCode = 1399,
        /// <summary>
        ///  [响应类] 物品回收设置
        /// </summary>
        ResItemRecycleSetCode = 1400,
        /// <summary>
        ///  [请求类] 物品回收
        /// </summary>
        ReqItemRecycleCode = 1401,
        /// <summary>
        ///  [响应类] 物品回收
        /// </summary>
        ResItemRecycleCode = 1402,
        /// <summary>
        ///  [请求类] 道具自动回收设置
        /// </summary>
        ReqItemAutoRecycleCode = 1403,
        /// <summary>
        ///  [响应类] 道具自动回收设置
        /// </summary>
        ResItemAutoRecycleCode = 1404,
        /// <summary>
        ///  [请求类] 通知更新练功房时间
        /// </summary>
        ReqUpdateLianGongFangTimeCode = 1405,
        /// <summary>
        ///  [响应类] 通知更新练功房时间
        /// </summary>
        ResUpdateLianGongFangTimeCode = 1406,
        /// <summary>
        ///  [请求类] 进入练功房地图
        /// </summary>
        ReqLianGongFangTransferCode = 1407,
        /// <summary>
        ///  [响应类] 进入练功房地图
        /// </summary>
        ResLianGongFangTransferCode = 1408,
        /// <summary>
        ///  [请求类] 轮回装备升级
        /// </summary>
        ReqReincarnationEquipUpgradeCode = 1409,
        /// <summary>
        ///  [响应类] 轮回装备升级
        /// </summary>
        ResReincarnationEquipUpgradeCode = 1410,
        /// <summary>
        ///  [请求类] 轮回装备分解
        /// </summary>
        ReqReincarnationEquipDecomposeCode = 1411,
        /// <summary>
        ///  [响应类] 轮回装备分解
        /// </summary>
        ResReincarnationEquipDecomposeCode = 1412,
        /// <summary>
        ///  [请求类] 更新每周刷新的日常活动
        /// </summary>
        ReqUpdateDailyActivityCode = 1413,
        /// <summary>
        ///  [响应类] 更新每周刷新的日常活动
        /// </summary>
        ResUpdateDailyActivityCode = 1414,
        /// <summary>
        ///  [请求类] 领取日常活动补签奖励
        /// </summary>
        ReqGetDailyActivitySignAwardsCode = 1415,
        /// <summary>
        ///  [响应类] 领取日常活动补签奖励
        /// </summary>
        ResGetDailyActivitySignAwardsCode = 1416,
        /// <summary>
        ///  [请求类] 更新单个日常活动补签信息
        /// </summary>
        ReqUpdateDailyActivitySignStateCode = 1417,
        /// <summary>
        ///  [响应类] 更新单个日常活动补签信息
        /// </summary>
        ResUpdateDailyActivitySignStateCode = 1418,
        /// <summary>
        ///  [请求类] 创建活动副本
        /// </summary>
        ReqCreateAssembleActivityDungeonCode = 1419,
        /// <summary>
        ///  [响应类] 创建活动副本
        /// </summary>
        ResCreateAssembleActivityDungeonCode = 1420,
        /// <summary>
        ///  [请求类] 替换日常活动展示信息
        /// </summary>
        ReqReplaceDailyActivityShowInfoCode = 1421,
        /// <summary>
        ///  [响应类] 替换日常活动展示信息
        /// </summary>
        ResReplaceDailyActivityShowInfoCode = 1422,
        /// <summary>
        ///  [请求类] 获取世界前**名玩家境界平均等级
        /// </summary>
        ReqGetWorldStateMeanLvCode = 1423,
        /// <summary>
        ///  [响应类] 获取世界前**名玩家境界平均等级
        /// </summary>
        ResGetWorldStateMeanLvCode = 1424,
        /// <summary>
        ///  [请求类] 通知答题奖励信息
        /// </summary>
        ReqNoticeDTAwardCode = 1425,
        /// <summary>
        ///  [响应类] 通知答题奖励信息
        /// </summary>
        ResNoticeDTAwardCode = 1426,
        /// <summary>
        ///  [请求类] 活动传送
        /// </summary>
        ReqAssembleActivityTransferCode = 1427,
        /// <summary>
        ///  [响应类] 活动传送
        /// </summary>
        ResAssembleActivityTransferCode = 1428,
        /// <summary>
        ///  [请求类] 生成境界对应怪,此协议产生的怪物无法重生
        /// </summary>
        ReqSpawnStateMonsterCode = 1429,
        /// <summary>
        ///  [响应类] 生成境界对应怪,此协议产生的怪物无法重生
        /// </summary>
        ResSpawnStateMonsterCode = 1430,
        /// <summary>
        ///  [请求类] 通知怪物统计数量
        /// </summary>
        ReqNotieMonsterStatCountCode = 1431,
        /// <summary>
        ///  [响应类] 通知怪物统计数量
        /// </summary>
        ResNotieMonsterStatCountCode = 1432,
        /// <summary>
        ///  [请求类] 刷新玩家跨服活动信息
        /// </summary>
        ReqNoticeSWPlayerInfoCode = 1433,
        /// <summary>
        ///  [响应类] 刷新玩家跨服活动信息
        /// </summary>
        ResNoticeSWPlayerInfoCode = 1434,
        /// <summary>
        ///  [请求类] 领取跨服活动奖励
        /// </summary>
        ReqServiceWarTakeAwardCode = 1435,
        /// <summary>
        ///  [响应类] 领取跨服活动奖励
        /// </summary>
        ResServiceWarTakeAwardCode = 1436,
        /// <summary>
        ///  [请求类] 改变日常活动补签信息
        /// </summary>
        ReqChangeDailyActivitySignCode = 1437,
        /// <summary>
        ///  [响应类] 改变日常活动补签信息
        /// </summary>
        ResChangeDailyActivitySignCode = 1438,
        /// <summary>
        ///  [请求类] 跨服活动最强王者商店购买
        /// </summary>
        ReqBuyZQWZShopItemCode = 1439,
        /// <summary>
        ///  [响应类] 跨服活动最强王者商店购买
        /// </summary>
        ResBuyZQWZShopItemCode = 1440,
        /// <summary>
        ///  [请求类] 通知跨服地图服新增跨服服务器信息
        /// </summary>
        ReqNoticeAddServiceWarServerInfoCode = 1441,
        /// <summary>
        ///  [响应类] 通知跨服地图服新增跨服服务器信息
        /// </summary>
        ResNoticeAddServiceWarServerInfoCode = 1442,
        /// <summary>
        ///  [请求类] 跨服活动阵营积分变更
        /// </summary>
        ReqOnSWCampPointChangeCode = 1443,
        /// <summary>
        ///  [响应类] 跨服活动阵营积分变更
        /// </summary>
        ResOnSWCampPointChangeCode = 1444,
        /// <summary>
        ///  [请求类] 跨服战阵营积分信息
        /// </summary>
        ReqNoticeSWActivityCampInfoCode = 1445,
        /// <summary>
        ///  [响应类] 跨服战阵营积分信息
        /// </summary>
        ResNoticeSWActivityCampInfoCode = 1446,
        /// <summary>
        ///  [请求类] 击杀其他玩家
        /// </summary>
        ReqNoticeKillOtherCode = 1447,
        /// <summary>
        ///  [响应类] 击杀其他玩家
        /// </summary>
        ResNoticeKillOtherCode = 1448,
        /// <summary>
        ///  [请求类] 通知地图服刷新服务器境界等级
        /// </summary>
        ReqNoticeServerStateLevelCode = 1449,
        /// <summary>
        ///  [响应类] 通知地图服刷新服务器境界等级
        /// </summary>
        ResNoticeServerStateLevelCode = 1450,
        /// <summary>
        ///  [请求类] 通知地图服刷新怪物模板
        /// </summary>
        ReqReviveAllMonsterCode = 1451,
        /// <summary>
        ///  [响应类] 通知地图服刷新怪物模板
        /// </summary>
        ResReviveAllMonsterCode = 1452,
        /// <summary>
        ///  [请求类] 通知物品掉落统计
        /// </summary>
        ReqItemDropStatisticsCode = 1453,
        /// <summary>
        ///  [响应类] 通知物品掉落统计
        /// </summary>
        ResItemDropStatisticsCode = 1454,
        /// <summary>
        ///  [请求类] 通知玩家装备首次掉落
        /// </summary>
        ReqNoticeEquipFirstDropCode = 1455,
        /// <summary>
        ///  [响应类] 通知玩家装备首次掉落
        /// </summary>
        ResNoticeEquipFirstDropCode = 1456,
        /// <summary>
        ///  [请求类] 开启仓库页
        /// </summary>
        ReqOpenStoreHousePageCode = 1457,
        /// <summary>
        ///  [响应类] 开启仓库页
        /// </summary>
        ResOpenStoreHousePageCode = 1458,
        /// <summary>
        ///  [请求类] 开启仓库格子
        /// </summary>
        ReqOpenStroreHousePosCode = 1459,
        /// <summary>
        ///  [响应类] 开启仓库格子
        /// </summary>
        ResOpenStroreHousePosCode = 1460,
        /// <summary>
        ///  [请求类] 更新玩家装备强化失败附加成功率
        /// </summary>
        ReqUpdateStrengthFailExtraRateCode = 1461,
        /// <summary>
        ///  [响应类] 更新玩家装备强化失败附加成功率
        /// </summary>
        ResUpdateStrengthFailExtraRateCode = 1462,
        /// <summary>
        ///  [请求类] 通知行会淘金活动镖车状态变更
        /// </summary>
        ReqNoticeHHTJEscortCartStateChangedCode = 1463,
        /// <summary>
        ///  [响应类] 通知行会淘金活动镖车状态变更
        /// </summary>
        ResNoticeHHTJEscortCartStateChangedCode = 1464,
        /// <summary>
        ///  [请求类] 活动事件通知
        /// </summary>
        ReqNoticeDailyActivityEventCode = 1465,
        /// <summary>
        ///  [响应类] 活动事件通知
        /// </summary>
        ResNoticeDailyActivityEventCode = 1466,
        /// <summary>
        ///  [请求类] 行会淘金购买加倍buff
        /// </summary>
        ReqHHTJBuyDoubleBuffCode = 1467,
        /// <summary>
        ///  [响应类] 行会淘金购买加倍buff
        /// </summary>
        ResHHTJBuyDoubleBuffCode = 1468,
        /// <summary>
        ///  [请求类] 创建活动副本
        /// </summary>
        ReqNoticeCreateActivityDungeonCode = 1469,
        /// <summary>
        ///  [响应类] 创建活动副本
        /// </summary>
        ResNoticeCreateActivityDungeonCode = 1470,
        /// <summary>
        ///  [请求类] 强化装备位
        /// </summary>
        ReqStrengthenEquipPosCode = 1471,
        /// <summary>
        ///  [响应类] 强化装备位
        /// </summary>
        ResStrengthenEquipPosCode = 1472,
        /// <summary>
        ///  [请求类] 刷新装备位强化信息
        /// </summary>
        ReqUpdateEquipPosStrengthenInfoCode = 1473,
        /// <summary>
        ///  [响应类] 刷新装备位强化信息
        /// </summary>
        ResUpdateEquipPosStrengthenInfoCode = 1474,
        /// <summary>
        ///  [请求类] 神器合成
        /// </summary>
        ReqArtifactComposeCode = 1475,
        /// <summary>
        ///  [响应类] 神器合成
        /// </summary>
        ResArtifactComposeCode = 1476,
        /// <summary>
        ///  [请求类] 地图福利数据初始化
        /// </summary>
        ReqInitPlayerMapWelfareCode = 1477,
        /// <summary>
        ///  [响应类] 地图福利数据初始化
        /// </summary>
        ResInitPlayerMapWelfareCode = 1478,
        /// <summary>
        ///  [请求类] 地图福利数据刷新
        /// </summary>
        ReqUpdatePlayerMapWelfareCode = 1479,
        /// <summary>
        ///  [响应类] 地图福利数据刷新
        /// </summary>
        ResUpdatePlayerMapWelfareCode = 1480,
        /// <summary>
        ///  [请求类] 更新玩家(道士)宠物信息
        /// </summary>
        ReqUpdatePlayerPetInfoCode = 1481,
        /// <summary>
        ///  [响应类] 更新玩家(道士)宠物信息
        /// </summary>
        ResUpdatePlayerPetInfoCode = 1482,
        /// <summary>
        ///  [请求类] 通知玩家宠物信息
        /// </summary>
        ReqInitPlayerPetInfoCode = 1483,
        /// <summary>
        ///  [响应类] 通知玩家宠物信息
        /// </summary>
        ResInitPlayerPetInfoCode = 1484,
        /// <summary>
        ///  [请求类] 更新当前待召唤魂宠Group
        /// </summary>
        ReqUpdateSoulPetGroupCode = 1485,
        /// <summary>
        ///  [响应类] 更新当前待召唤魂宠Group
        /// </summary>
        ResUpdateSoulPetGroupCode = 1486,
        /// <summary>
        ///  [请求类] 官印升级
        /// </summary>
        ReqUpgradeOfficalSealCode = 1487,
        /// <summary>
        ///  [响应类] 官印升级
        /// </summary>
        ResUpgradeOfficalSealCode = 1488,
        /// <summary>
        ///  [请求类] 通知玩家成就信息
        /// </summary>
        ReqInitPlayerAchievementInfoCode = 1489,
        /// <summary>
        ///  [响应类] 通知玩家成就信息
        /// </summary>
        ResInitPlayerAchievementInfoCode = 1490,
        /// <summary>
        ///  [请求类] 更新玩家成就信息
        /// </summary>
        ReqUpdatePlayerAchievementInfoCode = 1491,
        /// <summary>
        ///  [响应类] 更新玩家成就信息
        /// </summary>
        ResUpdatePlayerAchievementInfoCode = 1492,
        /// <summary>
        ///  [请求类] 触发惊龙
        /// </summary>
        ReqJingLongTakeEffectCode = 1493,
        /// <summary>
        ///  [响应类] 触发惊龙
        /// </summary>
        ResJingLongTakeEffectCode = 1494,
        /// <summary>
        ///  [请求类] 变身能量变更
        /// </summary>
        ReqUpdateShapeShiftEnergyCode = 1495,
        /// <summary>
        ///  [响应类] 变身能量变更
        /// </summary>
        ResUpdateShapeShiftEnergyCode = 1496,
        /// <summary>
        ///  [请求类] 更新成就限额信息
        /// </summary>
        ReqUpdateAchievementQuotaInfoCode = 1497,
        /// <summary>
        ///  [响应类] 更新成就限额信息
        /// </summary>
        ResUpdateAchievementQuotaInfoCode = 1498,
        /// <summary>
        ///  [请求类] 通知世界成就信息
        /// </summary>
        ReqInitWorldAchievementInfoCode = 1499,
        /// <summary>
        ///  [响应类] 通知世界成就信息
        /// </summary>
        ResInitWorldAchievementInfoCode = 1500,
        /// <summary>
        ///  [请求类] 藏宝图信息（幸运/当日开启次数）变更通知
        /// </summary>
        ReqNoticeTreasureMapDataCode = 1501,
        /// <summary>
        ///  [响应类] 藏宝图信息（幸运/当日开启次数）变更通知
        /// </summary>
        ResNoticeTreasureMapDataCode = 1502,
        /// <summary>
        ///  [请求类] 获取成就信息
        /// </summary>
        ReqGetAchievementInfoCode = 1503,
        /// <summary>
        ///  [响应类] 获取成就信息
        /// </summary>
        ResGetAchievementInfoCode = 1504,
        /// <summary>
        ///  [请求类] 查看更多成就达成排名
        /// </summary>
        ReqGetAchievementMoreRankCode = 1505,
        /// <summary>
        ///  [响应类] 查看更多成就达成排名
        /// </summary>
        ResGetAchievementMoreRankCode = 1506,
        /// <summary>
        ///  [请求类] 创建副本地图
        /// </summary>
        ReqCreateDungeonMapCode = 1507,
        /// <summary>
        ///  [响应类] 创建副本地图
        /// </summary>
        ResCreateDungeonMapCode = 1508,
        /// <summary>
        ///  [请求类] 通知玩家休闲(短期)活动结束时间
        /// </summary>
        ReqNoticeLeisureActiveTimeCode = 1509,
        /// <summary>
        ///  [响应类] 通知玩家休闲(短期)活动结束时间
        /// </summary>
        ResNoticeLeisureActiveTimeCode = 1510,
        /// <summary>
        ///  [请求类] 藏宝图副本内传送
        /// </summary>
        ReqTreasureMapDungeonTransferCode = 1511,
        /// <summary>
        ///  [响应类] 藏宝图副本内传送
        /// </summary>
        ResTreasureMapDungeonTransferCode = 1512,
        /// <summary>
        ///  [请求类] 藏宝图副本类购买次数
        /// </summary>
        ReqTreasureMapDungeonBuyCode = 1513,
        /// <summary>
        ///  [响应类] 藏宝图副本类购买次数
        /// </summary>
        ResTreasureMapDungeonBuyCode = 1514,
        /// <summary>
        ///  [请求类] 采集指定地图所有宝箱
        /// </summary>
        ReqCollectAllChestCode = 1515,
        /// <summary>
        ///  [响应类] 采集指定地图所有宝箱
        /// </summary>
        ResCollectAllChestCode = 1516,
        /// <summary>
        ///  [请求类] 藏宝图副本信息
        /// </summary>
        ReqTreasureMapDungeonInfoCode = 1517,
        /// <summary>
        ///  [响应类] 藏宝图副本信息
        /// </summary>
        ResTreasureMapDungeonInfoCode = 1518,
        /// <summary>
        ///  [请求类] 藏宝图副本奖励通知
        /// </summary>
        ReqNoticeTreasureMapDungeonRewardCode = 1519,
        /// <summary>
        ///  [响应类] 藏宝图副本奖励通知
        /// </summary>
        ResNoticeTreasureMapDungeonRewardCode = 1520,
        /// <summary>
        ///  [请求类] 密文名号切换
        /// </summary>
        ReqCiphertextFameChangeCode = 1521,
        /// <summary>
        ///  [响应类] 密文名号切换
        /// </summary>
        ResCiphertextFameChangeCode = 1522,
        /// <summary>
        ///  [请求类] 领取活跃度
        /// </summary>
        ReqTakeLivenessCode = 1523,
        /// <summary>
        ///  [响应类] 领取活跃度
        /// </summary>
        ResTakeLivenessCode = 1524,
        /// <summary>
        ///  [请求类] 通知玩家活跃信息
        /// </summary>
        ReqInitPlayerLivenessInfoCode = 1525,
        /// <summary>
        ///  [响应类] 通知玩家活跃信息
        /// </summary>
        ResInitPlayerLivenessInfoCode = 1526,
        /// <summary>
        ///  [请求类] 藏宝图副本抽签
        /// </summary>
        ReqTreasureMapDungeonDrawCode = 1527,
        /// <summary>
        ///  [响应类] 藏宝图副本抽签
        /// </summary>
        ResTreasureMapDungeonDrawCode = 1528,
        /// <summary>
        ///  [请求类] 购买开启通天塔额外掉落
        /// </summary>
        ReqBuyBabelDropCode = 1529,
        /// <summary>
        ///  [响应类] 购买开启通天塔额外掉落
        /// </summary>
        ResBuyBabelDropCode = 1530,
        /// <summary>
        ///  [请求类] 升级神器盒子
        /// </summary>
        ReqUpgradeArtifactBoxCode = 1531,
        /// <summary>
        ///  [响应类] 升级神器盒子
        /// </summary>
        ResUpgradeArtifactBoxCode = 1532,
        /// <summary>
        ///  [请求类] 刷新降妖除魔任务
        /// </summary>
        ReqRefreshDailyTaskCode = 1533,
        /// <summary>
        ///  [响应类] 刷新降妖除魔任务
        /// </summary>
        ResRefreshDailyTaskCode = 1534,
        /// <summary>
        ///  [请求类] 移动到怪物身边
        /// </summary>
        ReqMoveToMonsterCode = 1535,
        /// <summary>
        ///  [响应类] 移动到怪物身边
        /// </summary>
        ResMoveToMonsterCode = 1536,
        /// <summary>
        ///  [请求类] 命魂合成
        /// </summary>
        ReqMingHunComposeCode = 1537,
        /// <summary>
        ///  [响应类] 命魂合成
        /// </summary>
        ResMingHunComposeCode = 1538,
        /// <summary>
        ///  [请求类] 转转盘
        /// </summary>
        ReqPlayTurntableCode = 1539,
        /// <summary>
        ///  [响应类] 转转盘
        /// </summary>
        ResPlayTurntableCode = 1540,
        /// <summary>
        ///  [请求类] 玩家免费会员数据初始化
        /// </summary>
        ReqInitPlayerMembershipDataCode = 1541,
        /// <summary>
        ///  [响应类] 玩家免费会员数据初始化
        /// </summary>
        ResInitPlayerMembershipDataCode = 1542,
        /// <summary>
        ///  [请求类] 刷新转盘信息
        /// </summary>
        ReqUpdateTurntableInfoCode = 1543,
        /// <summary>
        ///  [响应类] 刷新转盘信息
        /// </summary>
        ResUpdateTurntableInfoCode = 1544,
        /// <summary>
        ///  [请求类] 刷新免费会员信息
        /// </summary>
        ReqUpdatePlayerMembershipDataCode = 1545,
        /// <summary>
        ///  [响应类] 刷新免费会员信息
        /// </summary>
        ResUpdatePlayerMembershipDataCode = 1546,
        /// <summary>
        ///  [请求类] 触发玩家事件
        /// </summary>
        ReqTriggerPlayerEventCode = 1547,
        /// <summary>
        ///  [响应类] 触发玩家事件
        /// </summary>
        ResTriggerPlayerEventCode = 1548,
        /// <summary>
        ///  [请求类] 初始化玩家事件信息
        /// </summary>
        ReqInitPlayerEventCode = 1549,
        /// <summary>
        ///  [响应类] 初始化玩家事件信息
        /// </summary>
        ResInitPlayerEventCode = 1550,
        /// <summary>
        ///  [请求类] 刷新玩家境界信息
        /// </summary>
        ReqUpdatePlayerStateDataCode = 1551,
        /// <summary>
        ///  [响应类] 刷新玩家境界信息
        /// </summary>
        ResUpdatePlayerStateDataCode = 1552,
        /// <summary>
        ///  [请求类] 境界升级通知
        /// </summary>
        ReqStateUpgradedNoticeCode = 1553,
        /// <summary>
        ///  [响应类] 境界升级通知
        /// </summary>
        ResStateUpgradedNoticeCode = 1554,
        /// <summary>
        ///  [请求类] 通知定时刷新的怪物存活情况
        /// </summary>
        ReqNoticeFixedTimeRefreshMonDataCode = 1555,
        /// <summary>
        ///  [响应类] 通知定时刷新的怪物存活情况
        /// </summary>
        ResNoticeFixedTimeRefreshMonDataCode = 1556,
        /// <summary>
        ///  [请求类] 通知前端刷新定时刷新怪物存活情况
        /// </summary>
        ReqUpdateFixedTimeRefreshMonDataCode = 1557,
        /// <summary>
        ///  [响应类] 通知前端刷新定时刷新怪物存活情况
        /// </summary>
        ResUpdateFixedTimeRefreshMonDataCode = 1558,
        /// <summary>
        ///  [请求类] 升级打宝精灵
        /// </summary>
        ReqUpgradeElvsCode = 1559,
        /// <summary>
        ///  [响应类] 升级打宝精灵
        /// </summary>
        ResUpgradeElvsCode = 1560,
        /// <summary>
        ///  [请求类] 激活打宝精灵
        /// </summary>
        ReqActivateElvsCode = 1561,
        /// <summary>
        ///  [响应类] 激活打宝精灵
        /// </summary>
        ResActivateElvsCode = 1562,
        /// <summary>
        ///  [请求类] 玩家刷新黑市物品(市场)
        /// </summary>
        ReqRefreshBlackMarketItemCode = 1563,
        /// <summary>
        ///  [响应类] 玩家刷新黑市物品(市场)
        /// </summary>
        ResRefreshBlackMarketItemCode = 1564,
        /// <summary>
        ///  [请求类] 通知打宝精灵等级
        /// </summary>
        ReqNoticeElvesLvCode = 1565,
        /// <summary>
        ///  [响应类] 通知打宝精灵等级
        /// </summary>
        ResNoticeElvesLvCode = 1566,
        /// <summary>
        ///  [请求类] 变更打宝精灵跟随状态
        /// </summary>
        ReqChangeElvesFollowStatusCode = 1567,
        /// <summary>
        ///  [响应类] 变更打宝精灵跟随状态
        /// </summary>
        ResChangeElvesFollowStatusCode = 1568,
        /// <summary>
        ///  [请求类] 变更打宝精灵外观
        /// </summary>
        ReqChangeElvesAppearenceCode = 1569,
        /// <summary>
        ///  [响应类] 变更打宝精灵外观
        /// </summary>
        ResChangeElvesAppearenceCode = 1570,
        /// <summary>
        ///  [请求类] 通知玩家杀怪首爆
        /// </summary>
        ReqPlayerFirstDropCode = 1571,
        /// <summary>
        ///  [响应类] 通知玩家杀怪首爆
        /// </summary>
        ResPlayerFirstDropCode = 1572,
        /// <summary>
        ///  [请求类] 初始化玩家首爆数据
        /// </summary>
        ReqInitPlayerFirstDropCode = 1573,
        /// <summary>
        ///  [响应类] 初始化玩家首爆数据
        /// </summary>
        ResInitPlayerFirstDropCode = 1574,
        /// <summary>
        ///  [请求类] 新增机器人信息
        /// </summary>
        ReqAddRobotDataCode = 1575,
        /// <summary>
        ///  [响应类] 新增机器人信息
        /// </summary>
        ResAddRobotDataCode = 1576,
        /// <summary>
        ///  [请求类] 删除机器人信息
        /// </summary>
        ReqDelRobotDataCode = 1577,
        /// <summary>
        ///  [响应类] 删除机器人信息
        /// </summary>
        ResDelRobotDataCode = 1578,
        /// <summary>
        ///  [请求类] 初始化加载机器人信息
        /// </summary>
        ReqInitRobotDataCode = 1579,
        /// <summary>
        ///  [响应类] 初始化加载机器人信息
        /// </summary>
        ResInitRobotDataCode = 1580,
        /// <summary>
        ///  [请求类] 升级铭文石
        /// </summary>
        ReqUpgradeInscriptionStoneCode = 1581,
        /// <summary>
        ///  [响应类] 升级铭文石
        /// </summary>
        ResUpgradeInscriptionStoneCode = 1582,
        /// <summary>
        ///  [请求类] 玩家完成组装活动
        /// </summary>
        ReqCompleteAssembleActivityCode = 1583,
        /// <summary>
        ///  [响应类] 玩家完成组装活动
        /// </summary>
        ResCompleteAssembleActivityCode = 1584,
        /// <summary>
        ///  [请求类] 卸下铭文石
        /// </summary>
        ReqUnequipInscriptionStoneCode = 1585,
        /// <summary>
        ///  [响应类] 卸下铭文石
        /// </summary>
        ResUnequipInscriptionStoneCode = 1586,
        /// <summary>
        ///  [请求类] 通知刷新铭文石套装等级
        /// </summary>
        ReqNoticeUpdateInscriptionLevelCode = 1587,
        /// <summary>
        ///  [响应类] 通知刷新铭文石套装等级
        /// </summary>
        ResNoticeUpdateInscriptionLevelCode = 1588,
        /// <summary>
        ///  [请求类] 刷新安全区挂机机器人
        /// </summary>
        ReqAddSafePointRobotCode = 1589,
        /// <summary>
        ///  [响应类] 刷新安全区挂机机器人
        /// </summary>
        ResAddSafePointRobotCode = 1590,
        /// <summary>
        ///  [请求类] 删除安全区挂机机器人
        /// </summary>
        ReqDelSafePointRobotCode = 1591,
        /// <summary>
        ///  [响应类] 删除安全区挂机机器人
        /// </summary>
        ResDelSafePointRobotCode = 1592,
        /// <summary>
        ///  [请求类] 领取累充每日充值奖励
        /// </summary>
        ReqGetDailyRechargeAwardCode = 1593,
        /// <summary>
        ///  [响应类] 领取累充每日充值奖励
        /// </summary>
        ResGetDailyRechargeAwardCode = 1594,
        /// <summary>
        ///  [请求类] 获取累充奖励
        /// </summary>
        ReqGetCumulRechargeAwardCode = 1595,
        /// <summary>
        ///  [响应类] 获取累充奖励
        /// </summary>
        ResGetCumulRechargeAwardCode = 1596,
        /// <summary>
        ///  [请求类] 更新累充充值信息
        /// </summary>
        ReqUpdateRechargeInfoCode = 1597,
        /// <summary>
        ///  [响应类] 更新累充充值信息
        /// </summary>
        ResUpdateRechargeInfoCode = 1598,
        /// <summary>
        ///  [请求类] 刷新机器人信息
        /// </summary>
        ReqUpdateRobotDataCode = 1599,
        /// <summary>
        ///  [响应类] 刷新机器人信息
        /// </summary>
        ResUpdateRobotDataCode = 1600,
        /// <summary>
        ///  [请求类] 通知地图服怪物死亡刷新
        /// </summary>
        ReqNoticeMonsterDeadRefreshCode = 1601,
        /// <summary>
        ///  [响应类] 通知地图服怪物死亡刷新
        /// </summary>
        ResNoticeMonsterDeadRefreshCode = 1602,
        /// <summary>
        ///  [请求类] 初始化玩家累计充值
        /// </summary>
        ReqInitPlayerRechargeCode = 1603,
        /// <summary>
        ///  [响应类] 初始化玩家累计充值
        /// </summary>
        ResInitPlayerRechargeCode = 1604,
        /// <summary>
        ///  [请求类] 熔炉抽奖
        /// </summary>
        ReqSmelterdrawCode = 1605,
        /// <summary>
        ///  [响应类] 熔炉抽奖
        /// </summary>
        ResSmelterdrawCode = 1606,
        /// <summary>
        ///  [请求类] 升级帮会战旗
        /// </summary>
        ReqUpgradeGuildFlagLvCode = 1607,
        /// <summary>
        ///  [响应类] 升级帮会战旗
        /// </summary>
        ResUpgradeGuildFlagLvCode = 1608,
        /// <summary>
        ///  [请求类] 进入帮会驻地
        /// </summary>
        ReqEnterGuildStationCode = 1609,
        /// <summary>
        ///  [响应类] 进入帮会驻地
        /// </summary>
        ResEnterGuildStationCode = 1610,
        /// <summary>
        ///  [请求类] 激活熔炉兵骨
        /// </summary>
        ReqActivateSmelterBoneCode = 1611,
        /// <summary>
        ///  [响应类] 激活熔炉兵骨
        /// </summary>
        ResActivateSmelterBoneCode = 1612,
        /// <summary>
        ///  [请求类] 兵骨部位升级
        /// </summary>
        ReqUpgradeSmelterBoneRegionCode = 1613,
        /// <summary>
        ///  [响应类] 兵骨部位升级
        /// </summary>
        ResUpgradeSmelterBoneRegionCode = 1614,
        /// <summary>
        ///  [请求类] 创建帮会驻地
        /// </summary>
        ReqCreateGuildStationCode = 1615,
        /// <summary>
        ///  [响应类] 创建帮会驻地
        /// </summary>
        ResCreateGuildStationCode = 1616,
        /// <summary>
        ///  [请求类] 熔炼物品
        /// </summary>
        ReqSmeltItemCode = 1617,
        /// <summary>
        ///  [响应类] 熔炼物品
        /// </summary>
        ResSmeltItemCode = 1618,
        /// <summary>
        ///  [请求类] 开始竞技场匹配
        /// </summary>
        ReqStartArenaMatchingCode = 1619,
        /// <summary>
        ///  [响应类] 开始竞技场匹配
        /// </summary>
        ResStartArenaMatchingCode = 1620,
        /// <summary>
        ///  [请求类] 结束竞技场匹配
        /// </summary>
        ReqStopArenaMatchingCode = 1621,
        /// <summary>
        ///  [响应类] 结束竞技场匹配
        /// </summary>
        ResStopArenaMatchingCode = 1622,
        /// <summary>
        ///  [请求类] 领取竞技场段位奖励
        /// </summary>
        ReqTakeArenaLevelAwardCode = 1623,
        /// <summary>
        ///  [响应类] 领取竞技场段位奖励
        /// </summary>
        ResTakeArenaLevelAwardCode = 1624,
        /// <summary>
        ///  [请求类] 取消竞技场匹配
        /// </summary>
        ReqCancleArenaMatchCode = 1625,
        /// <summary>
        ///  [响应类] 取消竞技场匹配
        /// </summary>
        ResCancleArenaMatchCode = 1626,
        /// <summary>
        ///  [请求类] 领取竞技场结算奖励
        /// </summary>
        ReqTakeArenaSettlementAwardCode = 1627,
        /// <summary>
        ///  [响应类] 领取竞技场结算奖励
        /// </summary>
        ResTakeArenaSettlementAwardCode = 1628,
        /// <summary>
        ///  [请求类] 获取竞技场排名信息
        /// </summary>
        ReqGetArenaRankInfoCode = 1629,
        /// <summary>
        ///  [响应类] 获取竞技场排名信息
        /// </summary>
        ResGetArenaRankInfoCode = 1630,
        /// <summary>
        ///  [请求类] 竞技场战斗结果
        /// </summary>
        ReqArenaFightResultCode = 1631,
        /// <summary>
        ///  [响应类] 竞技场战斗结果
        /// </summary>
        ResArenaFightResultCode = 1632,
        /// <summary>
        ///  [请求类] 刷新竞技场机器人
        /// </summary>
        ReqSpwanRobotInArenaCode = 1633,
        /// <summary>
        ///  [响应类] 刷新竞技场机器人
        /// </summary>
        ResSpwanRobotInArenaCode = 1634,
        /// <summary>
        ///  [请求类] 刷新玩家竞技场信息
        /// </summary>
        ReqUpdatePlayerArenaDataCode = 1635,
        /// <summary>
        ///  [响应类] 刷新玩家竞技场信息
        /// </summary>
        ResUpdatePlayerArenaDataCode = 1636,
        /// <summary>
        ///  [请求类] 初始话竞技场模块
        /// </summary>
        ReqInitArenaModuleDataCode = 1637,
        /// <summary>
        ///  [响应类] 初始话竞技场模块
        /// </summary>
        ResInitArenaModuleDataCode = 1638,
        /// <summary>
        ///  [请求类] 竞技场购买尊享奖励资格
        /// </summary>
        ReqArenaBuyExAwardCode = 1639,
        /// <summary>
        ///  [响应类] 竞技场购买尊享奖励资格
        /// </summary>
        ResArenaBuyExAwardCode = 1640,
        /// <summary>
        ///  [请求类] 更新跨服活动小地图信息
        /// </summary>
        ReqUpdateTURBMiniMapInfoCode = 1641,
        /// <summary>
        ///  [响应类] 更新跨服活动小地图信息
        /// </summary>
        ResUpdateTURBMiniMapInfoCode = 1642,
        /// <summary>
        ///  [请求类] 召唤圣兽
        /// </summary>
        ReqSummonTherionCode = 1643,
        /// <summary>
        ///  [响应类] 召唤圣兽
        /// </summary>
        ResSummonTherionCode = 1644,
        /// <summary>
        ///  [请求类] 客户端打开/关闭界面记录
        /// </summary>
        ReqClientPageCode = 1645,
        /// <summary>
        ///  [响应类] 客户端打开/关闭界面记录
        /// </summary>
        ResClientPageCode = 1646,
        /// <summary>
        ///  [请求类] 充值资格校验
        /// </summary>
        ReqCanRechargeBuyCode = 1647,
        /// <summary>
        ///  [响应类] 充值资格校验
        /// </summary>
        ResCanRechargeBuyCode = 1648,
        /// <summary>
        ///  [请求类] 直充可领取奖励次数
        /// </summary>
        ReqUpdateRechargeBuyCountCode = 1649,
        /// <summary>
        ///  [响应类] 直充可领取奖励次数
        /// </summary>
        ResUpdateRechargeBuyCountCode = 1650,
        /// <summary>
        ///  [请求类] 领取直充奖励
        /// </summary>
        ReqTakeRechargeBuyAwardCode = 1651,
        /// <summary>
        ///  [响应类] 领取直充奖励
        /// </summary>
        ResTakeRechargeBuyAwardCode = 1652,
        /// <summary>
        ///  [请求类] 通知缓存服务器，直充周期结束，清除相关数据
        /// </summary>
        ReqRechargeBuyEndCode = 1653,
        /// <summary>
        ///  [响应类] 通知缓存服务器，直充周期结束，清除相关数据
        /// </summary>
        ResRechargeBuyEndCode = 1654,
        /// <summary>
        ///  [请求类] 初始化档位首充状态
        /// </summary>
        ReqUpdateGearRechargeInfoDataCode = 1655,
        /// <summary>
        ///  [响应类] 初始化档位首充状态
        /// </summary>
        ResUpdateGearRechargeInfoDataCode = 1656,
        /// <summary>
        ///  [请求类] 通知玩家充值档位信息
        /// </summary>
        ReqNoticeGearRechargeInfoCode = 1657,
        /// <summary>
        ///  [响应类] 通知玩家充值档位信息
        /// </summary>
        ResNoticeGearRechargeInfoCode = 1658,
        /// <summary>
        ///  [请求类] 升级五行系统
        /// </summary>
        ReqUpgradeFiveElementsLvCode = 1659,
        /// <summary>
        ///  [响应类] 升级五行系统
        /// </summary>
        ResUpgradeFiveElementsLvCode = 1660,
        /// <summary>
        ///  [请求类] 五行系统解锁
        /// </summary>
        ReqUnlockFiveElementsCode = 1661,
        /// <summary>
        ///  [响应类] 五行系统解锁
        /// </summary>
        ResUnlockFiveElementsCode = 1662,
        /// <summary>
        ///  [请求类] 更新充值信息到缓存服(不在线玩家)
        /// </summary>
        ReqPlayerRechargeMoneyCode = 1663,
        /// <summary>
        ///  [响应类] 更新充值信息到缓存服(不在线玩家)
        /// </summary>
        ResPlayerRechargeMoneyCode = 1664,
        /// <summary>
        ///  [请求类] 保存五行系统信息
        /// </summary>
        ReqSaveFiveElementsCode = 1665,
        /// <summary>
        ///  [响应类] 保存五行系统信息
        /// </summary>
        ResSaveFiveElementsCode = 1666,
        /// <summary>
        ///  [请求类] 通知系统解锁
        /// </summary>
        ReqNoticeUnlockFunctionCode = 1667,
        /// <summary>
        ///  [响应类] 通知系统解锁
        /// </summary>
        ResNoticeUnlockFunctionCode = 1668,
        /// <summary>
        ///  [请求类] 通知怪物复活时间
        /// </summary>
        ReqNoticeMonReviveTimeCode = 1669,
        /// <summary>
        ///  [响应类] 通知怪物复活时间
        /// </summary>
        ResNoticeMonReviveTimeCode = 1670,
        /// <summary>
        ///  [请求类] 怪物复活时间，用于进地图通知
        /// </summary>
        ReqMapMonReviveTimeListCode = 1671,
        /// <summary>
        ///  [响应类] 怪物复活时间，用于进地图通知
        /// </summary>
        ResMapMonReviveTimeListCode = 1672,
        /// <summary>
        ///  [请求类] 辅助设置
        /// </summary>
        ReqAssistSettingCode = 1673,
        /// <summary>
        ///  [响应类] 辅助设置
        /// </summary>
        ResAssistSettingCode = 1674,
        /// <summary>
        ///  [请求类] 播放场景特效
        /// </summary>
        ReqPlayEffectToSceneCode = 1675,
        /// <summary>
        ///  [响应类] 播放场景特效
        /// </summary>
        ResPlayEffectToSceneCode = 1676,
        /// <summary>
        ///  [请求类] 通知签到信息
        /// </summary>
        ReqNoticeSignInInfoCode = 1677,
        /// <summary>
        ///  [响应类] 通知签到信息
        /// </summary>
        ResNoticeSignInInfoCode = 1678,
        /// <summary>
        ///  [请求类] 玩家离线数据统计
        /// </summary>
        ReqNoticeDataStatisticsOfflineCode = 1679,
        /// <summary>
        ///  [响应类] 玩家离线数据统计
        /// </summary>
        ResNoticeDataStatisticsOfflineCode = 1680,
        /// <summary>
        ///  [请求类] 刷新背包格子状态
        /// </summary>
        ReqUpdateBagPosStatusCode = 1681,
        /// <summary>
        ///  [响应类] 刷新背包格子状态
        /// </summary>
        ResUpdateBagPosStatusCode = 1682,
        /// <summary>
        ///  [请求类] 解锁背包格子
        /// </summary>
        ReqUnlockBagPosCode = 1683,
        /// <summary>
        ///  [响应类] 解锁背包格子
        /// </summary>
        ResUnlockBagPosCode = 1684,
        /// <summary>
        ///  [请求类] 藏宝图事件通知
        /// </summary>
        ReqNoticeTreasureMapEventCode = 1685,
        /// <summary>
        ///  [响应类] 藏宝图事件通知
        /// </summary>
        ResNoticeTreasureMapEventCode = 1686,
        /// <summary>
        ///  [请求类] 更新藏宝图地图等级
        /// </summary>
        ReqUpdateTreasureMapLvCode = 1687,
        /// <summary>
        ///  [响应类] 更新藏宝图地图等级
        /// </summary>
        ResUpdateTreasureMapLvCode = 1688,
        /// <summary>
        ///  [请求类] 初始化玩家充值数据
        /// </summary>
        ReqInitPlayerRechargeDataCode = 1689,
        /// <summary>
        ///  [响应类] 初始化玩家充值数据
        /// </summary>
        ResInitPlayerRechargeDataCode = 1690,
        /// <summary>
        ///  [请求类] 刷新藏宝图地图怪物信息
        /// </summary>
        ReqUpdateTreasureMapDataCode = 1691,
        /// <summary>
        ///  [响应类] 刷新藏宝图地图怪物信息
        /// </summary>
        ResUpdateTreasureMapDataCode = 1692,
        /// <summary>
        ///  [请求类] 初始化客户端自定义数据
        /// </summary>
        ReqInitClientDefinedInfoCode = 1693,
        /// <summary>
        ///  [响应类] 初始化客户端自定义数据
        /// </summary>
        ResInitClientDefinedInfoCode = 1694,
        /// <summary>
        ///  [请求类] 更新玩家设置信息
        /// </summary>
        ReqUpdatePlayerSetInfoCode = 1695,
        /// <summary>
        ///  [响应类] 更新玩家设置信息
        /// </summary>
        ResUpdatePlayerSetInfoCode = 1696,
        /// <summary>
        ///  [请求类] 熔炉抽奖日志
        /// </summary>
        ReqSmelterdrawLogCode = 1697,
        /// <summary>
        ///  [响应类] 熔炉抽奖日志
        /// </summary>
        ResSmelterdrawLogCode = 1698,
        /// <summary>
        ///  [请求类] 导入抽奖日志
        /// </summary>
        ReqLoadSmelterdrawLogCode = 1699,
        /// <summary>
        ///  [响应类] 导入抽奖日志
        /// </summary>
        ResLoadSmelterdrawLogCode = 1700,
        /// <summary>
        ///  [请求类] 积分兑换
        /// </summary>
        ReqIntegralExchangeCode = 1701,
        /// <summary>
        ///  [响应类] 积分兑换
        /// </summary>
        ResIntegralExchangeCode = 1702,
        /// <summary>
        ///  [请求类] 聚灵大阵信息通知
        /// </summary>
        ReqNoticeCollectSpiritDataCode = 1703,
        /// <summary>
        ///  [响应类] 聚灵大阵信息通知
        /// </summary>
        ResNoticeCollectSpiritDataCode = 1704,
        /// <summary>
        ///  [请求类] 进入聚灵大阵地图
        /// </summary>
        ReqEnterCollectSpiritMapCode = 1705,
        /// <summary>
        ///  [响应类] 进入聚灵大阵地图
        /// </summary>
        ResEnterCollectSpiritMapCode = 1706,
        /// <summary>
        ///  [请求类] 创建聚灵阵副本
        /// </summary>
        ReqCreateCollectSpiritDungeonCode = 1707,
        /// <summary>
        ///  [响应类] 创建聚灵阵副本
        /// </summary>
        ResCreateCollectSpiritDungeonCode = 1708,
        /// <summary>
        ///  [请求类] 通知不朽魔王副本信息
        /// </summary>
        ReqNoticeDevilDungeonInfoCode = 1709,
        /// <summary>
        ///  [响应类] 通知不朽魔王副本信息
        /// </summary>
        ResNoticeDevilDungeonInfoCode = 1710,
        /// <summary>
        ///  [请求类] 购买聚灵阵密室商品
        /// </summary>
        ReqBuyCollectSpiritItemCode = 1711,
        /// <summary>
        ///  [响应类] 购买聚灵阵密室商品
        /// </summary>
        ResBuyCollectSpiritItemCode = 1712,
        /// <summary>
        ///  [请求类] 通知聚灵阵密市事件限购数据
        /// </summary>
        ReqNoticeSecretStoreLimitBuyInfoCode = 1713,
        /// <summary>
        ///  [响应类] 通知聚灵阵密市事件限购数据
        /// </summary>
        ResNoticeSecretStoreLimitBuyInfoCode = 1714,
        /// <summary>
        ///  [请求类] 物品熔炼设置
        /// </summary>
        ReqItemSmelterSetCode = 1715,
        /// <summary>
        ///  [响应类] 物品熔炼设置
        /// </summary>
        ResItemSmelterSetCode = 1716,
        /// <summary>
        ///  [请求类] 物品自动熔炼
        /// </summary>
        ReqItemAutoSmelterCode = 1717,
        /// <summary>
        ///  [响应类] 物品自动熔炼
        /// </summary>
        ResItemAutoSmelterCode = 1718,
        /// <summary>
        ///  [请求类] 聚灵阵密市个人限购信息
        /// </summary>
        ReqSecretStorePersonLimitCode = 1719,
        /// <summary>
        ///  [响应类] 聚灵阵密市个人限购信息
        /// </summary>
        ResSecretStorePersonLimitCode = 1720,
        /// <summary>
        ///  [请求类] 通知精灵特效生效状态
        /// </summary>
        ReqNoticeElvesEffectStatusCode = 1721,
        /// <summary>
        ///  [响应类] 通知精灵特效生效状态
        /// </summary>
        ResNoticeElvesEffectStatusCode = 1722,
        /// <summary>
        ///  [请求类] 刷新玩家初始化完成状态
        /// </summary>
        ReqUpdatePlayerInitStatusCode = 1723,
        /// <summary>
        ///  [响应类] 刷新玩家初始化完成状态
        /// </summary>
        ResUpdatePlayerInitStatusCode = 1724,
        /// <summary>
        ///  [请求类] 升级图腾
        /// </summary>
        ReqUpgradeTotemCode = 1725,
        /// <summary>
        ///  [响应类] 升级图腾
        /// </summary>
        ResUpgradeTotemCode = 1726,
        /// <summary>
        ///  [请求类] 兑换图腾经验
        /// </summary>
        ReqExchangeTotemExpCode = 1727,
        /// <summary>
        ///  [响应类] 兑换图腾经验
        /// </summary>
        ResExchangeTotemExpCode = 1728,
        /// <summary>
        ///  [请求类] 图腾任务初始化
        /// </summary>
        ReqInitTotemTaskCode = 1729,
        /// <summary>
        ///  [响应类] 图腾任务初始化
        /// </summary>
        ResInitTotemTaskCode = 1730,
        /// <summary>
        ///  [请求类] 刷新图腾任务进度
        /// </summary>
        ReqUpdateTotemTaskDataCode = 1731,
        /// <summary>
        ///  [响应类] 刷新图腾任务进度
        /// </summary>
        ResUpdateTotemTaskDataCode = 1732,
        /// <summary>
        ///  [请求类] 初始化主宰者特权信息
        /// </summary>
        ReqInitPlayerDominaterDataCode = 1733,
        /// <summary>
        ///  [响应类] 初始化主宰者特权信息
        /// </summary>
        ResInitPlayerDominaterDataCode = 1734,
        /// <summary>
        ///  [请求类] 刷新限时礼包信息
        /// </summary>
        ReqRefreshTimeLimitedGiftPackInfoCode = 1735,
        /// <summary>
        ///  [响应类] 刷新限时礼包信息
        /// </summary>
        ResRefreshTimeLimitedGiftPackInfoCode = 1736,
        /// <summary>
        ///  [请求类] 购买狂暴之力
        /// </summary>
        ReqBuyRagePowerCode = 1737,
        /// <summary>
        ///  [响应类] 购买狂暴之力
        /// </summary>
        ResBuyRagePowerCode = 1738,
        /// <summary>
        ///  [请求类] 更新玩家主宰者信息
        /// </summary>
        ReqUpdatePlayerDominaterDataCode = 1739,
        /// <summary>
        ///  [响应类] 更新玩家主宰者信息
        /// </summary>
        ResUpdatePlayerDominaterDataCode = 1740,
        /// <summary>
        ///  [请求类] 通知前端刷新游戏
        /// </summary>
        ReqNoticeUpdateGameCode = 1741,
        /// <summary>
        ///  [响应类] 通知前端刷新游戏
        /// </summary>
        ResNoticeUpdateGameCode = 1742,
        /// <summary>
        ///  [请求类] 限时直购礼包购买成功
        /// </summary>
        ReqBuyTimeLimitedGiftPackSuccessCode = 1743,
        /// <summary>
        ///  [响应类] 限时直购礼包购买成功
        /// </summary>
        ResBuyTimeLimitedGiftPackSuccessCode = 1744,
        /// <summary>
        ///  [请求类] 限时目标
        /// </summary>
        ReqRefreshTimelimitedttargetInfoCode = 1745,
        /// <summary>
        ///  [响应类] 限时目标
        /// </summary>
        ResRefreshTimelimitedttargetInfoCode = 1746,
        /// <summary>
        ///  [请求类] 限时目标，领取奖励
        /// </summary>
        ReqTimelimitedttargetAwardCode = 1747,
        /// <summary>
        ///  [响应类] 限时目标，领取奖励
        /// </summary>
        ResTimelimitedttargetAwardCode = 1748,
        /// <summary>
        ///  [请求类] 通知狂暴之力状态
        /// </summary>
        ReqNoticeRagePowerStateCode = 1749,
        /// <summary>
        ///  [响应类] 通知狂暴之力状态
        /// </summary>
        ResNoticeRagePowerStateCode = 1750,
        /// <summary>
        ///  [请求类] 沙城捐赠
        /// </summary>
        ReqShachengDonationCode = 1751,
        /// <summary>
        ///  [响应类] 沙城捐赠
        /// </summary>
        ResShachengDonationCode = 1752,
        /// <summary>
        ///  [请求类] 清空沙城捐赠
        /// </summary>
        ReqClearShachengDonationCode = 1753,
        /// <summary>
        ///  [响应类] 清空沙城捐赠
        /// </summary>
        ResClearShachengDonationCode = 1754,
        /// <summary>
        ///  [请求类] 十二宫副本购买道具
        /// </summary>
        ReqZodiacDungeonBuyItemCode = 1755,
        /// <summary>
        ///  [响应类] 十二宫副本购买道具
        /// </summary>
        ResZodiacDungeonBuyItemCode = 1756,
        /// <summary>
        ///  [请求类] 十二宫副本奖励
        /// </summary>
        ReqNoticeZodiacDungeonAwardCode = 1757,
        /// <summary>
        ///  [响应类] 十二宫副本奖励
        /// </summary>
        ResNoticeZodiacDungeonAwardCode = 1758,
        /// <summary>
        ///  [请求类] 初始化玩家超级VIP信息
        /// </summary>
        ReqInitPlayerSuperVipDataCode = 1759,
        /// <summary>
        ///  [响应类] 初始化玩家超级VIP信息
        /// </summary>
        ResInitPlayerSuperVipDataCode = 1760,
        /// <summary>
        ///  [请求类] 更新玩家超级VIP信息
        /// </summary>
        ReqUpdatePlayerSuperVipDataCode = 1761,
        /// <summary>
        ///  [响应类] 更新玩家超级VIP信息
        /// </summary>
        ResUpdatePlayerSuperVipDataCode = 1762,
        /// <summary>
        ///  [请求类] 开启技能释放(旧ReqPlayerAttack开启附加技能逻辑暂不变更)
        /// </summary>
        ReqChangeSkillStateCode = 1763,
        /// <summary>
        ///  [响应类] 开启技能释放(旧ReqPlayerAttack开启附加技能逻辑暂不变更)
        /// </summary>
        ResChangeSkillStateCode = 1764,
        /// <summary>
        ///  [请求类] 获取补偿奖励
        /// </summary>
        ReqGetNewCompensateAwardsCode = 1765,
        /// <summary>
        ///  [响应类] 获取补偿奖励
        /// </summary>
        ResGetNewCompensateAwardsCode = 1766,
        /// <summary>
        ///  [请求类] 经验炼制
        /// </summary>
        ReqExpRefineCode = 1767,
        /// <summary>
        ///  [响应类] 经验炼制
        /// </summary>
        ResExpRefineCode = 1768,
        /// <summary>
        ///  [请求类] 点击按钮经验炼制
        /// </summary>
        ReqDoExpRefineCode = 1769,
        /// <summary>
        ///  [响应类] 点击按钮经验炼制
        /// </summary>
        ResDoExpRefineCode = 1770,
        /// <summary>
        ///  [请求类] 通知重置玩家十二宫通关层数
        /// </summary>
        ReqNoticePlayerZodiaceLayerCode = 1771,
        /// <summary>
        ///  [响应类] 通知重置玩家十二宫通关层数
        /// </summary>
        ResNoticePlayerZodiaceLayerCode = 1772,
        /// <summary>
        ///  [请求类] 刷新玩家活动积分
        /// </summary>
        ReqUpdatePlayerActivityScoreCode = 1773,
        /// <summary>
        ///  [响应类] 刷新玩家活动积分
        /// </summary>
        ResUpdatePlayerActivityScoreCode = 1774,
        /// <summary>
        ///  [请求类] 条件刷怪物
        /// </summary>
        ReqSpawnMonsterExCode = 1775,
        /// <summary>
        ///  [响应类] 条件刷怪物
        /// </summary>
        ResSpawnMonsterExCode = 1776,
        /// <summary>
        ///  [请求类] 世界服向地图服查询怪物数量
        /// </summary>
        ReqQueryMonsterCode = 1777,
        /// <summary>
        ///  [响应类] 世界服向地图服查询怪物数量
        /// </summary>
        ResQueryMonsterCode = 1778,
        /// <summary>
        ///  [请求类] （被）抢夺跨服战积分
        /// </summary>
        ReqServerWarRobScoreCode = 1779,
        /// <summary>
        ///  [响应类] （被）抢夺跨服战积分
        /// </summary>
        ResServerWarRobScoreCode = 1780,
        /// <summary>
        ///  [请求类] 增加跨服积分
        /// </summary>
        ReqAddServerWarScoreCode = 1781,
        /// <summary>
        ///  [响应类] 增加跨服积分
        /// </summary>
        ResAddServerWarScoreCode = 1782,
        /// <summary>
        ///  [请求类] 清理跨服活动玩家活动信息
        /// </summary>
        ReqClearSWPlayerInfoCode = 1783,
        /// <summary>
        ///  [响应类] 清理跨服活动玩家活动信息
        /// </summary>
        ResClearSWPlayerInfoCode = 1784,
        /// <summary>
        ///  [请求类] 押镖元宝刷新次数
        /// </summary>
        ReqNoticePatrolCityTaskInfoCode = 1785,
        /// <summary>
        ///  [响应类] 押镖元宝刷新次数
        /// </summary>
        ResNoticePatrolCityTaskInfoCode = 1786,
        /// <summary>
        ///  [请求类] 跨服战服务器积分变动
        /// </summary>
        ReqOnSWServerPointChangeCode = 1787,
        /// <summary>
        ///  [响应类] 跨服战服务器积分变动
        /// </summary>
        ResOnSWServerPointChangeCode = 1788,
        /// <summary>
        ///  [请求类] 通知刷新玩家跨服战积分
        /// </summary>
        ReqNoticeUpdatePlayerSWPointCode = 1789,
        /// <summary>
        ///  [响应类] 通知刷新玩家跨服战积分
        /// </summary>
        ResNoticeUpdatePlayerSWPointCode = 1790,
        /// <summary>
        ///  [请求类] 通知刷新玩家跨服战当天积分
        /// </summary>
        ReqNoticeUpdatePlayerSWCurDayPointCode = 1791,
        /// <summary>
        ///  [响应类] 通知刷新玩家跨服战当天积分
        /// </summary>
        ResNoticeUpdatePlayerSWCurDayPointCode = 1792,
        /// <summary>
        ///  [请求类] 跨服战场捐赠
        /// </summary>
        ReqServerWarDonationCode = 1793,
        /// <summary>
        ///  [响应类] 跨服战场捐赠
        /// </summary>
        ResServerWarDonationCode = 1794,
        /// <summary>
        ///  [请求类] 通知跨服捐赠信息
        /// </summary>
        ReqNoticeServerWarDonationCode = 1795,
        /// <summary>
        ///  [响应类] 通知跨服捐赠信息
        /// </summary>
        ResNoticeServerWarDonationCode = 1796,
        /// <summary>
        ///  [请求类] 刷新玩家泡点经验加成
        /// </summary>
        ReqUpdatePlayerBubbleUpPctCode = 1797,
        /// <summary>
        ///  [响应类] 刷新玩家泡点经验加成
        /// </summary>
        ResUpdatePlayerBubbleUpPctCode = 1798,
        /// <summary>
        ///  [请求类] 秘宝持有者
        /// </summary>
        ReqUpdateTreasureOwnersCode = 1799,
        /// <summary>
        ///  [响应类] 秘宝持有者
        /// </summary>
        ResUpdateTreasureOwnersCode = 1800,
        /// <summary>
        ///  [请求类] 掉落秘宝
        /// </summary>
        ReqDropTreasureCode = 1801,
        /// <summary>
        ///  [响应类] 掉落秘宝
        /// </summary>
        ResDropTreasureCode = 1802,
        /// <summary>
        ///  [请求类] 玩家申请打孔，安装，卸下，替换神石
        /// </summary>
        ReqGemStoneActionCode = 1803,
        /// <summary>
        ///  [响应类] 玩家申请打孔，安装，卸下，替换神石
        /// </summary>
        ResGemStoneActionCode = 1804,
        /// <summary>
        ///  [请求类] 75个孔信息
        /// </summary>
        ReqGemStoneHoleInfoCode = 1805,
        /// <summary>
        ///  [响应类] 75个孔信息
        /// </summary>
        ResGemStoneHoleInfoCode = 1806,
        /// <summary>
        ///  [请求类] 创建跨服活动副本
        /// </summary>
        ReqCreateSWActivityDungeonCode = 1807,
        /// <summary>
        ///  [响应类] 创建跨服活动副本
        /// </summary>
        ResCreateSWActivityDungeonCode = 1808,
        /// <summary>
        ///  [请求类] 通知世界服初始化跨服活动副本guid
        /// </summary>
        ReqInitSWActivityDungeonGuidCode = 1809,
        /// <summary>
        ///  [响应类] 通知世界服初始化跨服活动副本guid
        /// </summary>
        ResInitSWActivityDungeonGuidCode = 1810,
        /// <summary>
        ///  [请求类] 刷新副本Flag
        /// </summary>
        ReqUpdateDungeonCellFlagCode = 1811,
        /// <summary>
        ///  [响应类] 刷新副本Flag
        /// </summary>
        ResUpdateDungeonCellFlagCode = 1812,
        /// <summary>
        ///  [请求类] 跨服活动传送
        /// </summary>
        ReqSWActivityTransferCode = 1813,
        /// <summary>
        ///  [响应类] 跨服活动传送
        /// </summary>
        ResSWActivityTransferCode = 1814,
        /// <summary>
        ///  [请求类] 上报玩家活动数据到跨服匹配服
        /// </summary>
        ReqEscalationSWPlayerInfoCode = 1815,
        /// <summary>
        ///  [响应类] 上报玩家活动数据到跨服匹配服
        /// </summary>
        ResEscalationSWPlayerInfoCode = 1816,
        /// <summary>
        ///  [请求类] 跨服匹配服广播龙城归属行会
        /// </summary>
        ReqBroadcastLongChengOwnerCode = 1817,
        /// <summary>
        ///  [响应类] 跨服匹配服广播龙城归属行会
        /// </summary>
        ResBroadcastLongChengOwnerCode = 1818,
        /// <summary>
        ///  [请求类] 跨服匹配服广播跨服龙城旗子归属行会
        /// </summary>
        ReqBroadcastBannerOwnerCode = 1819,
        /// <summary>
        ///  [响应类] 跨服匹配服广播跨服龙城旗子归属行会
        /// </summary>
        ResBroadcastBannerOwnerCode = 1820,
        /// <summary>
        ///  [请求类] 活动行会排行榜
        /// </summary>
        ReqNoticeActivityGuildRankInfoCode = 1821,
        /// <summary>
        ///  [响应类] 活动行会排行榜
        /// </summary>
        ResNoticeActivityGuildRankInfoCode = 1822,
        /// <summary>
        ///  [请求类] 跨服龙城开启密道
        /// </summary>
        ReqKFLCOpenCellarCode = 1823,
        /// <summary>
        ///  [响应类] 跨服龙城开启密道
        /// </summary>
        ResKFLCOpenCellarCode = 1824,
        /// <summary>
        ///  [请求类] 通知缓存服更新龙城归属
        /// </summary>
        ReqNoticeLongChengWinerCode = 1825,
        /// <summary>
        ///  [响应类] 通知缓存服更新龙城归属
        /// </summary>
        ResNoticeLongChengWinerCode = 1826,
        /// <summary>
        ///  [请求类] 通知更新跨服星空三倍点信息
        /// </summary>
        ReqUpdateKFSSTreblePointCode = 1827,
        /// <summary>
        ///  [响应类] 通知更新跨服星空三倍点信息
        /// </summary>
        ResUpdateKFSSTreblePointCode = 1828,
        /// <summary>
        ///  [请求类] 玩家退出跨服活动
        /// </summary>
        ReqPlayerExitSWActivityCode = 1829,
        /// <summary>
        ///  [响应类] 玩家退出跨服活动
        /// </summary>
        ResPlayerExitSWActivityCode = 1830,
        /// <summary>
        ///  [请求类] 通知更新跨服星空各倍率泡点玩家数量
        /// </summary>
        ReqNoticeKFSSPointInfoCode = 1831,
        /// <summary>
        ///  [响应类] 通知更新跨服星空各倍率泡点玩家数量
        /// </summary>
        ResNoticeKFSSPointInfoCode = 1832,
        /// <summary>
        ///  [请求类] 跨服龙城满血
        /// </summary>
        ReqKFLCFullHpCode = 1833,
        /// <summary>
        ///  [响应类] 跨服龙城满血
        /// </summary>
        ResKFLCFullHpCode = 1834,
        /// <summary>
        ///  [请求类] 通知地图服,给对象附加压制属性
        /// </summary>
        ReqNoticeSuppressAttrCode = 1835,
        /// <summary>
        ///  [响应类] 通知地图服,给对象附加压制属性
        /// </summary>
        ResNoticeSuppressAttrCode = 1836,
        /// <summary>
        ///  [请求类] 神兵法宝合成
        /// </summary>
        ReqSBFBComposeItemCode = 1837,
        /// <summary>
        ///  [响应类] 神兵法宝合成
        /// </summary>
        ResSBFBComposeItemCode = 1838,
        /// <summary>
        ///  [请求类] 通知客户端更新法宝星级祝福值
        /// </summary>
        ReqUpdateItemStarBlessingCode = 1839,
        /// <summary>
        ///  [响应类] 通知客户端更新法宝星级祝福值
        /// </summary>
        ResUpdateItemStarBlessingCode = 1840,
        /// <summary>
        ///  [请求类] 更新法宝星级祝福值
        /// </summary>
        ReqNoticeUpdateItemStarBlessingCode = 1841,
        /// <summary>
        ///  [响应类] 更新法宝星级祝福值
        /// </summary>
        ResNoticeUpdateItemStarBlessingCode = 1842,
        /// <summary>
        ///  [请求类] 原石切割
        /// </summary>
        ReqDivideRawstoneCode = 1843,
        /// <summary>
        ///  [响应类] 原石切割
        /// </summary>
        ResDivideRawstoneCode = 1844,
        /// <summary>
        ///  [请求类] 跨服竞技场模块初始化
        /// </summary>
        ReqCSArenaInitModuleDataCode = 1845,
        /// <summary>
        ///  [响应类] 跨服竞技场模块初始化
        /// </summary>
        ResCSArenaInitModuleDataCode = 1846,
        /// <summary>
        ///  [请求类] 跨服竞技场开始匹配
        /// </summary>
        ReqCSArenaStartMatchingCode = 1847,
        /// <summary>
        ///  [响应类] 跨服竞技场开始匹配
        /// </summary>
        ResCSArenaStartMatchingCode = 1848,
        /// <summary>
        ///  [请求类] 跨服竞技场结束匹配
        /// </summary>
        ReqCSArenaStopMatchingCode = 1849,
        /// <summary>
        ///  [响应类] 跨服竞技场结束匹配
        /// </summary>
        ResCSArenaStopMatchingCode = 1850,
        /// <summary>
        ///  [请求类] 强化宝玉
        /// </summary>
        ReqStrengthenJadeStoneCode = 1851,
        /// <summary>
        ///  [响应类] 强化宝玉
        /// </summary>
        ResStrengthenJadeStoneCode = 1852,
        /// <summary>
        ///  [请求类] 领取跨服竞技场段位（战令）奖励
        /// </summary>
        ReqCSArenaTakeLevelAwardCode = 1853,
        /// <summary>
        ///  [响应类] 领取跨服竞技场段位（战令）奖励
        /// </summary>
        ResCSArenaTakeLevelAwardCode = 1854,
        /// <summary>
        ///  [请求类] 跨服竞技场战斗结果
        /// </summary>
        ReqCSArenaFightResultCode = 1855,
        /// <summary>
        ///  [响应类] 跨服竞技场战斗结果
        /// </summary>
        ResCSArenaFightResultCode = 1856,
        /// <summary>
        ///  [请求类] 跨服竞技场刷新玩家信息
        /// </summary>
        ReqCSArenaUpdatePlayerDataCode = 1857,
        /// <summary>
        ///  [响应类] 跨服竞技场刷新玩家信息
        /// </summary>
        ResCSArenaUpdatePlayerDataCode = 1858,
        /// <summary>
        ///  [请求类] 跨服竞技场购买尊享奖励
        /// </summary>
        ReqCSArenaBuyExAwardCode = 1859,
        /// <summary>
        ///  [响应类] 跨服竞技场购买尊享奖励
        /// </summary>
        ResCSArenaBuyExAwardCode = 1860,
        /// <summary>
        ///  [请求类] 跨服竞技场通知匹配结果
        /// </summary>
        ReqCSArenaMatchResultCode = 1861,
        /// <summary>
        ///  [响应类] 跨服竞技场通知匹配结果
        /// </summary>
        ResCSArenaMatchResultCode = 1862,
        /// <summary>
        ///  [请求类] 解锁宝玉装备位
        /// </summary>
        ReqUnlockJadeStonePosCode = 1863,
        /// <summary>
        ///  [响应类] 解锁宝玉装备位
        /// </summary>
        ResUnlockJadeStonePosCode = 1864,
        /// <summary>
        ///  [请求类] 跨服竞技场创建战斗副本
        /// </summary>
        ReqCSArenaCreateDungeonCode = 1865,
        /// <summary>
        ///  [响应类] 跨服竞技场创建战斗副本
        /// </summary>
        ResCSArenaCreateDungeonCode = 1866,
        /// <summary>
        ///  [请求类] 广播通知玩家进入竞技场
        /// </summary>
        ReqBroadcastEnterDungeonCode = 1867,
        /// <summary>
        ///  [响应类] 广播通知玩家进入竞技场
        /// </summary>
        ResBroadcastEnterDungeonCode = 1868,
        /// <summary>
        ///  [请求类] 跨服竞技场购买匹配次数
        /// </summary>
        ReqCSArenaBuyMatchTimeCode = 1869,
        /// <summary>
        ///  [响应类] 跨服竞技场购买匹配次数
        /// </summary>
        ResCSArenaBuyMatchTimeCode = 1870,
        /// <summary>
        ///  [请求类] 镶嵌卸下宝玉
        /// </summary>
        ReqInlayJadeStoneCode = 1871,
        /// <summary>
        ///  [响应类] 镶嵌卸下宝玉
        /// </summary>
        ResInlayJadeStoneCode = 1872,
        /// <summary>
        ///  [请求类] 竞技场副本战斗信息
        /// </summary>
        ReqCSArenaDungeonFightDataCode = 1873,
        /// <summary>
        ///  [响应类] 竞技场副本战斗信息
        /// </summary>
        ResCSArenaDungeonFightDataCode = 1874,
        /// <summary>
        ///  [请求类] 跨服竞技场上报机器人信息
        /// </summary>
        ReqCSArenaEscalationRobotDataCode = 1875,
        /// <summary>
        ///  [响应类] 跨服竞技场上报机器人信息
        /// </summary>
        ResCSArenaEscalationRobotDataCode = 1876,
        /// <summary>
        ///  [请求类] 跨服竞技场获取排行信息
        /// </summary>
        ReqCSArenaGetRankInfoCode = 1877,
        /// <summary>
        ///  [响应类] 跨服竞技场获取排行信息
        /// </summary>
        ResCSArenaGetRankInfoCode = 1878,
        /// <summary>
        ///  [请求类] 跨服竞技场刷新机器人
        /// </summary>
        ReqCSArenaSpwanRobotCode = 1879,
        /// <summary>
        ///  [响应类] 跨服竞技场刷新机器人
        /// </summary>
        ResCSArenaSpwanRobotCode = 1880,
        /// <summary>
        ///  [请求类] 跨服竞技场上报玩家排行信息
        /// </summary>
        ReqCSArenaEscalationPlayerRankScoreCode = 1881,
        /// <summary>
        ///  [响应类] 跨服竞技场上报玩家排行信息
        /// </summary>
        ResCSArenaEscalationPlayerRankScoreCode = 1882,
        /// <summary>
        ///  [请求类] 十二宫剩余通关次数
        /// </summary>
        ReqZodiacCorssTimesCode = 1883,
        /// <summary>
        ///  [响应类] 十二宫剩余通关次数
        /// </summary>
        ResZodiacCorssTimesCode = 1884,
        /// <summary>
        ///  [请求类] gm修改开服天数
        /// </summary>
        ReqGMChangeOpenDaysCode = 1885,
        /// <summary>
        ///  [响应类] gm修改开服天数
        /// </summary>
        ResGMChangeOpenDaysCode = 1886,
        /// <summary>
        ///  [请求类] 时装升星
        /// </summary>
        ReqUpgradeFashionStarCode = 1887,
        /// <summary>
        ///  [响应类] 时装升星
        /// </summary>
        ResUpgradeFashionStarCode = 1888,
        /// <summary>
        ///  [请求类] gm修改合服天数
        /// </summary>
        ReqGMChangeUnionDaysCode = 1889,
        /// <summary>
        ///  [响应类] gm修改合服天数
        /// </summary>
        ResGMChangeUnionDaysCode = 1890,
        /// <summary>
        ///  [请求类] 保存玩家时装信息
        /// </summary>
        ReqSaveFashionInfoCode = 1891,
        /// <summary>
        ///  [响应类] 保存玩家时装信息
        /// </summary>
        ResSaveFashionInfoCode = 1892,
        /// <summary>
        ///  [请求类] 通知缓存服解封账号
        /// </summary>
        ReqNoticeReleaseAccountCode = 1893,
        /// <summary>
        ///  [响应类] 通知缓存服解封账号
        /// </summary>
        ResNoticeReleaseAccountCode = 1894,
        /// <summary>
        ///  [请求类] 加载龙族宝藏日志
        /// </summary>
        ReqLoadDragonTreasureDrawLogCode = 1895,
        /// <summary>
        ///  [响应类] 加载龙族宝藏日志
        /// </summary>
        ResLoadDragonTreasureDrawLogCode = 1896,
        /// <summary>
        ///  [请求类] 一键提取龙族宝藏仓库物品
        /// </summary>
        ReqExtractDragonTreasureCode = 1897,
        /// <summary>
        ///  [响应类] 一键提取龙族宝藏仓库物品
        /// </summary>
        ResExtractDragonTreasureCode = 1898,
        /// <summary>
        ///  [请求类] 龙族宝藏探宝
        /// </summary>
        ReqDragonTreasureDrawCode = 1899,
        /// <summary>
        ///  [响应类] 龙族宝藏探宝
        /// </summary>
        ResDragonTreasureDrawCode = 1900,
        /// <summary>
        ///  [请求类] 龙族宝藏兑换
        /// </summary>
        ReqDragonTreasureExchangeCode = 1901,
        /// <summary>
        ///  [响应类] 龙族宝藏兑换
        /// </summary>
        ResDragonTreasureExchangeCode = 1902,
        /// <summary>
        ///  [请求类] 龙族宝藏探宝日志
        /// </summary>
        ReqDragonTreasureDrawLogCode = 1903,
        /// <summary>
        ///  [响应类] 龙族宝藏探宝日志
        /// </summary>
        ResDragonTreasureDrawLogCode = 1904,
        /// <summary>
        ///  [请求类] 龙族宝藏仓库经验丹一键使用
        /// </summary>
        ReqUseDragonTreasureAllExpItemCode = 1905,
        /// <summary>
        ///  [响应类] 龙族宝藏仓库经验丹一键使用
        /// </summary>
        ResUseDragonTreasureAllExpItemCode = 1906,
        /// <summary>
        ///  [请求类] 测试starttool和其他服务器通信
        /// </summary>
        ReqTestStartToolCode = 1907,
        /// <summary>
        ///  [响应类] 测试starttool和其他服务器通信
        /// </summary>
        ResTestStartToolCode = 1908,
        /// <summary>
        ///  [请求类] 跨服竞技场通知周期结束时间
        /// </summary>
        ReqCSArenaNoticeEndTimeCode = 1909,
        /// <summary>
        ///  [响应类] 跨服竞技场通知周期结束时间
        /// </summary>
        ResCSArenaNoticeEndTimeCode = 1910,
        /// <summary>
        ///  [请求类] 屠魔福利
        /// </summary>
        ReqKillMonsterBenefitsCode = 1911,
        /// <summary>
        ///  [响应类] 屠魔福利
        /// </summary>
        ResKillMonsterBenefitsCode = 1912,
        /// <summary>
        ///  [请求类] 通知重新加载服务器配置
        /// </summary>
        ReqNoticeReloadServerConfigCode = 1913,
        /// <summary>
        ///  [响应类] 通知重新加载服务器配置
        /// </summary>
        ResNoticeReloadServerConfigCode = 1914,
        /// <summary>
        ///  [请求类] 屠魔福利信息刷新
        /// </summary>
        ReqKillMonsterBenefitsInfoCode = 1915,
        /// <summary>
        ///  [响应类] 屠魔福利信息刷新
        /// </summary>
        ResKillMonsterBenefitsInfoCode = 1916,
        /// <summary>
        ///  [请求类] 用来单独对新增的模仿8类型的子活动初始化时记录它的开启活动时的开服时间
        /// </summary>
        ReqUpdateAssembleActivityDataOpenDaysCode = 1917,
        /// <summary>
        ///  [响应类] 用来单独对新增的模仿8类型的子活动初始化时记录它的开启活动时的开服时间
        /// </summary>
        ResUpdateAssembleActivityDataOpenDaysCode = 1918,
        /// <summary>
        ///  [请求类] 平台释放封禁的ip
        /// </summary>
        ReqNoticeReleaseIpCode = 1919,
        /// <summary>
        ///  [响应类] 平台释放封禁的ip
        /// </summary>
        ResNoticeReleaseIpCode = 1920,
        /// <summary>
        ///  [请求类] 服务器健康度管理心跳包
        /// </summary>
        ReqHeartBeatExCode = 1921,
        /// <summary>
        ///  [响应类] 服务器健康度管理心跳包
        /// </summary>
        ResHeartBeatExCode = 1922,
        /// <summary>
        ///  [请求类] 跨服竞技场周期结束
        /// </summary>
        ReqCSArenaCycleEndCode = 1923,
        /// <summary>
        ///  [响应类] 跨服竞技场周期结束
        /// </summary>
        ResCSArenaCycleEndCode = 1924,
        /// <summary>
        ///  [请求类] 服务器健康度有问题上报
        /// </summary>
        ReqServerHealthAlarmCode = 1925,
        /// <summary>
        ///  [响应类] 服务器健康度有问题上报
        /// </summary>
        ResServerHealthAlarmCode = 1926,
        /// <summary>
        ///  [请求类] 服务器健康度各exe版本号
        /// </summary>
        ReqServerHealthVersionCode = 1927,
        /// <summary>
        ///  [响应类] 服务器健康度各exe版本号
        /// </summary>
        ResServerHealthVersionCode = 1928,
        /// <summary>
        ///  [请求类] 存储玩家头像框信息
        /// </summary>
        ReqSaveHeadShotFrameInfoCode = 1929,
        /// <summary>
        ///  [响应类] 存储玩家头像框信息
        /// </summary>
        ResSaveHeadShotFrameInfoCode = 1930,
        /// <summary>
        ///  [请求类] 穿脱头像框操作
        /// </summary>
        ReqWareHeadShotFrameCode = 1931,
        /// <summary>
        ///  [响应类] 穿脱头像框操作
        /// </summary>
        ResWareHeadShotFrameCode = 1932,
        /// <summary>
        ///  [请求类] 获得头像框
        /// </summary>
        ReqAddHeadShotFrameCode = 1933,
        /// <summary>
        ///  [响应类] 获得头像框
        /// </summary>
        ResAddHeadShotFrameCode = 1934,
        /// <summary>
        ///  [请求类] 移除头像框
        /// </summary>
        ReqRemoveHeadShotFrameCode = 1935,
        /// <summary>
        ///  [响应类] 移除头像框
        /// </summary>
        ResRemoveHeadShotFrameCode = 1936,
        /// <summary>
        ///  [请求类] 健康度信息改变
        /// </summary>
        ReqHealthInfoChangeCode = 1937,
        /// <summary>
        ///  [响应类] 健康度信息改变
        /// </summary>
        ResHealthInfoChangeCode = 1938,
        /// <summary>
        ///  [请求类] 健康度模块-world服初始化时给center服发的消息
        /// </summary>
        ReqHealthWorldInitCode = 1939,
        /// <summary>
        ///  [响应类] 健康度模块-world服初始化时给center服发的消息
        /// </summary>
        ResHealthWorldInitCode = 1940,
        /// <summary>
        ///  [请求类] 初始化玩家信息
        /// </summary>
        ReqInitPlayerDataCode = 1941,
        /// <summary>
        ///  [响应类] 初始化玩家信息
        /// </summary>
        ResInitPlayerDataCode = 1942,
        /// <summary>
        ///  [请求类] 保存玩家信息
        /// </summary>
        ReqSavePlayerDataCode = 1943,
        /// <summary>
        ///  [响应类] 保存玩家信息
        /// </summary>
        ResSavePlayerDataCode = 1944,
        /// <summary>
        ///  [请求类] 获取满足指定条件的玩家数量
        /// </summary>
        ReqGetPlayerNumByConditionCode = 1945,
        /// <summary>
        ///  [响应类] 获取满足指定条件的玩家数量
        /// </summary>
        ResGetPlayerNumByConditionCode = 1946,
        /// <summary>
        ///  [请求类] 跨服竞技场报名
        /// </summary>
        ReqCSArenaEnrollCode = 1947,
        /// <summary>
        ///  [响应类] 跨服竞技场报名
        /// </summary>
        ResCSArenaEnrollCode = 1948,
        /// <summary>
        ///  [请求类] 平台相关奖励领取(或购买)
        /// </summary>
        ReqPlatformTakeAwardCode = 1949,
        /// <summary>
        ///  [响应类] 平台相关奖励领取(或购买)
        /// </summary>
        ResPlatformTakeAwardCode = 1950,
        /// <summary>
        ///  [请求类] 领取每日礼包奖励
        /// </summary>
        ReqTakeDailyGiftAwardCode = 1951,
        /// <summary>
        ///  [响应类] 领取每日礼包奖励
        /// </summary>
        ResTakeDailyGiftAwardCode = 1952,
        /// <summary>
        ///  [请求类] 用gm道具充值
        /// </summary>
        ReqRechargeUseItemCode = 1953,
        /// <summary>
        ///  [响应类] 用gm道具充值
        /// </summary>
        ResRechargeUseItemCode = 1954,
        /// <summary>
        ///  [请求类] 健康度模块-world服或StartTool给center服发的消息
        /// </summary>
        ReqHealthStartStopServerCode = 1955,
        /// <summary>
        ///  [响应类] 健康度模块-world服或StartTool给center服发的消息
        /// </summary>
        ResHealthStartStopServerCode = 1956,
        /// <summary>
        ///  [请求类] 跨服龙城泡点信息
        /// </summary>
        ReqKFLCMapInfoCode = 1957,
        /// <summary>
        ///  [响应类] 跨服龙城泡点信息
        /// </summary>
        ResKFLCMapInfoCode = 1958,
        /// <summary>
        ///  [请求类] 跨服龙城活动信息
        /// </summary>
        ReqUpdateKFLCActivityInfoCode = 1959,
        /// <summary>
        ///  [响应类] 跨服龙城活动信息
        /// </summary>
        ResUpdateKFLCActivityInfoCode = 1960,
        /// <summary>
        ///  [请求类] 跨服匹配服广播新跨服龙城旗子归属行会
        /// </summary>
        ReqKFLCBroadcastBannerOwnerCode = 1961,
        /// <summary>
        ///  [响应类] 跨服匹配服广播新跨服龙城旗子归属行会
        /// </summary>
        ResKFLCBroadcastBannerOwnerCode = 1962,
        /// <summary>
        ///  [请求类] 跨服匹配服广播龙城归属行会
        /// </summary>
        ReqKFLCBroadcastLongChengOwnerCode = 1963,
        /// <summary>
        ///  [响应类] 跨服匹配服广播龙城归属行会
        /// </summary>
        ResKFLCBroadcastLongChengOwnerCode = 1964,
        /// <summary>
        ///  [请求类] 跨服龙城开启城门
        /// </summary>
        ReqNKFLCOpenCellarCode = 1965,
        /// <summary>
        ///  [响应类] 跨服龙城开启城门
        /// </summary>
        ResNKFLCOpenCellarCode = 1966,
        /// <summary>
        ///  [请求类] 移除并刷新跨服龙城怪物
        /// </summary>
        ReqDelKFLCMonsterCode = 1967,
        /// <summary>
        ///  [响应类] 移除并刷新跨服龙城怪物
        /// </summary>
        ResDelKFLCMonsterCode = 1968,
        /// <summary>
        ///  [请求类] 龙城归属变更
        /// </summary>
        ReqKFLCOwnerChangeCode = 1969,
        /// <summary>
        ///  [响应类] 龙城归属变更
        /// </summary>
        ResKFLCOwnerChangeCode = 1970,
        /// <summary>
        ///  [请求类] 更新直冲皇宫时间
        /// </summary>
        ReqUpdateRushImperialCode = 1971,
        /// <summary>
        ///  [响应类] 更新直冲皇宫时间
        /// </summary>
        ResUpdateRushImperialCode = 1972,
        /// <summary>
        ///  [请求类] 刷新魔龙
        /// </summary>
        ReqReflashKFLCMonsterCode = 1973,
        /// <summary>
        ///  [响应类] 刷新魔龙
        /// </summary>
        ResReflashKFLCMonsterCode = 1974,
        /// <summary>
        ///  [请求类] 跨服龙城直冲皇宫技能信息
        /// </summary>
        ReqUpdateKFLCSkillInfoCode = 1975,
        /// <summary>
        ///  [响应类] 跨服龙城直冲皇宫技能信息
        /// </summary>
        ResUpdateKFLCSkillInfoCode = 1976,
        /// <summary>
        ///  [请求类] 更新魔龙奖励数量
        /// </summary>
        ReqUpdateKFLCMoLongRewardsCode = 1977,
        /// <summary>
        ///  [响应类] 更新魔龙奖励数量
        /// </summary>
        ResUpdateKFLCMoLongRewardsCode = 1978,
        /// <summary>
        ///  [请求类] 通知地图服更新跨服龙城魔龙奖励
        /// </summary>
        ReqNKFLCMoLongRewardsCode = 1979,
        /// <summary>
        ///  [响应类] 通知地图服更新跨服龙城魔龙奖励
        /// </summary>
        ResNKFLCMoLongRewardsCode = 1980,
        /// <summary>
        ///  [请求类] 不在线改玩家名(GM)
        /// </summary>
        ReqOfflineChangeNameCode = 1981,
        /// <summary>
        ///  [响应类] 不在线改玩家名(GM)
        /// </summary>
        ResOfflineChangeNameCode = 1982,
        /// <summary>
        ///  [请求类] 实名验证成功通知
        /// </summary>
        ReqRealVerificationCode = 1983,
        /// <summary>
        ///  [响应类] 实名验证成功通知
        /// </summary>
        ResRealVerificationCode = 1984,
        /// <summary>
        ///  [请求类] 帮派改名
        /// </summary>
        ReqGuildChangeNameCode = 1985,
        /// <summary>
        ///  [响应类] 帮派改名
        /// </summary>
        ResGuildChangeNameCode = 1986,
        /// <summary>
        ///  [请求类] 用于记录gm平台发过来的禁止开启节日庆典活动的时间
        /// </summary>
        ReqForBidCelActTimeCode = 1987,
        /// <summary>
        ///  [响应类] 用于记录gm平台发过来的禁止开启节日庆典活动的时间
        /// </summary>
        ResForBidCelActTimeCode = 1988,
        /// <summary>
        ///  [请求类] 龙城击杀数量同步到地图服
        /// </summary>
        ReqNKFLCKillNumCode = 1989,
        /// <summary>
        ///  [响应类] 龙城击杀数量同步到地图服
        /// </summary>
        ResNKFLCKillNumCode = 1990,
        /// <summary>
        ///  [请求类] 领取地狱打怪增加的经验池，必须用n倍卡
        /// </summary>
        ReqPurgatoryExpCode = 1991,
        /// <summary>
        ///  [响应类] 领取地狱打怪增加的经验池，必须用n倍卡
        /// </summary>
        ResPurgatoryExpCode = 1992,
        /// <summary>
        ///  [请求类] 跨服国战模块初始化
        /// </summary>
        ReqCSNationalInitModuleDataCode = 1993,
        /// <summary>
        ///  [响应类] 跨服国战模块初始化
        /// </summary>
        ResCSNationalInitModuleDataCode = 1994,
        /// <summary>
        ///  [请求类] 国战粮草购买
        /// </summary>
        ReqCSNationalBuyProvisionCode = 1995,
        /// <summary>
        ///  [响应类] 国战粮草购买
        /// </summary>
        ResCSNationalBuyProvisionCode = 1996,
        /// <summary>
        ///  [请求类] 跨服国战周期结束
        /// </summary>
        ReqCSNationalCycleEndCode = 1997,
        /// <summary>
        ///  [响应类] 跨服国战周期结束
        /// </summary>
        ResCSNationalCycleEndCode = 1998,
        /// <summary>
        ///  [请求类] 国战通知周期结束时间
        /// </summary>
        ReqCSNationalNoticeEndTimeCode = 1999,
        /// <summary>
        ///  [响应类] 国战通知周期结束时间
        /// </summary>
        ResCSNationalNoticeEndTimeCode = 2000,
        /// <summary>
        ///  [请求类] 国战刷新玩家信息
        /// </summary>
        ReqCSNationalUpdatePlayerDataCode = 2001,
        /// <summary>
        ///  [响应类] 国战刷新玩家信息
        /// </summary>
        ResCSNationalUpdatePlayerDataCode = 2002,
        /// <summary>
        ///  [请求类] 跨服国战排行信息(玩家/行会)
        /// </summary>
        ReqCSNationalRankInfoCode = 2003,
        /// <summary>
        ///  [响应类] 跨服国战排行信息(玩家/行会)
        /// </summary>
        ResCSNationalRankInfoCode = 2004,
        /// <summary>
        ///  [请求类] 跨服国战报名
        /// </summary>
        ReqCSNationalEnrollCode = 2005,
        /// <summary>
        ///  [响应类] 跨服国战报名
        /// </summary>
        ResCSNationalEnrollCode = 2006,
        /// <summary>
        ///  [请求类] 跨服国战开始行军
        /// </summary>
        ReqCSNationalMarchCode = 2007,
        /// <summary>
        ///  [响应类] 跨服国战开始行军
        /// </summary>
        ResCSNationalMarchCode = 2008,
        /// <summary>
        ///  [请求类] 跨服国战弃城
        /// </summary>
        ReqCSNationalAbandonCityCode = 2009,
        /// <summary>
        ///  [响应类] 跨服国战弃城
        /// </summary>
        ResCSNationalAbandonCityCode = 2010,
        /// <summary>
        ///  [请求类] 获取跨服国战城池信息
        /// </summary>
        ReqGetCSNationalCityInfoCode = 2011,
        /// <summary>
        ///  [响应类] 获取跨服国战城池信息
        /// </summary>
        ResGetCSNationalCityInfoCode = 2012,
        /// <summary>
        ///  [请求类] 跨服国战传送
        /// </summary>
        ReqCSNationalTransferCode = 2013,
        /// <summary>
        ///  [响应类] 跨服国战传送
        /// </summary>
        ResCSNationalTransferCode = 2014,
        /// <summary>
        ///  [请求类] 通知国战帮派阵营更新
        /// </summary>
        ReqUpdateCSNationalCampInfoCode = 2015,
        /// <summary>
        ///  [响应类] 通知国战帮派阵营更新
        /// </summary>
        ResUpdateCSNationalCampInfoCode = 2016,
        /// <summary>
        ///  [请求类] 国战-国币商店购买
        /// </summary>
        ReqBuyNationalShopItemCode = 2017,
        /// <summary>
        ///  [响应类] 国战-国币商店购买
        /// </summary>
        ResBuyNationalShopItemCode = 2018,
        /// <summary>
        ///  [请求类] 国战-获取当前赛季世界境界等级
        /// </summary>
        ReqGetCurrSeasonJJLvCode = 2019,
        /// <summary>
        ///  [响应类] 国战-获取当前赛季世界境界等级
        /// </summary>
        ResGetCurrSeasonJJLvCode = 2020,
        /// <summary>
        ///  [请求类] 跨服国战创建副本
        /// </summary>
        ReqCSNationalCreateDungeonCode = 2021,
        /// <summary>
        ///  [响应类] 跨服国战创建副本
        /// </summary>
        ResCSNationalCreateDungeonCode = 2022,
        /// <summary>
        ///  [请求类] 初始化国战城池信息(世界服)
        /// </summary>
        ReqInitCSNationalCityInfoCode = 2023,
        /// <summary>
        ///  [响应类] 初始化国战城池信息(世界服)
        /// </summary>
        ResInitCSNationalCityInfoCode = 2024,
        /// <summary>
        ///  [请求类] 跨服红包，排行榜
        /// </summary>
        ReqTransferRedbagRankCode = 2025,
        /// <summary>
        ///  [响应类] 跨服红包，排行榜
        /// </summary>
        ResTransferRedbagRankCode = 2026,
        /// <summary>
        ///  [请求类] 跨服红包，领取
        /// </summary>
        ReqTransferRedbagOpenCode = 2027,
        /// <summary>
        ///  [响应类] 跨服红包，领取
        /// </summary>
        ResTransferRedbagOpenCode = 2028,
        /// <summary>
        ///  [请求类] 跨服红包，查询状态
        /// </summary>
        ReqTransferRedbagQueryCode = 2029,
        /// <summary>
        ///  [响应类] 跨服红包，查询状态
        /// </summary>
        ResTransferRedbagQueryCode = 2030,
        /// <summary>
        ///  [请求类] 初始化国战帮派数据
        /// </summary>
        ReqCSNationalGuildDataCode = 2031,
        /// <summary>
        ///  [响应类] 初始化国战帮派数据
        /// </summary>
        ResCSNationalGuildDataCode = 2032,
        /// <summary>
        ///  [请求类] 更新保存国战帮派信息
        /// </summary>
        ReqUpdateCSNationalGuildDataCode = 2033,
        /// <summary>
        ///  [响应类] 更新保存国战帮派信息
        /// </summary>
        ResUpdateCSNationalGuildDataCode = 2034,
        /// <summary>
        ///  [请求类] 跨服国战撤销行军
        /// </summary>
        ReqCSNationalCancelMarchCode = 2035,
        /// <summary>
        ///  [响应类] 跨服国战撤销行军
        /// </summary>
        ResCSNationalCancelMarchCode = 2036,
        /// <summary>
        ///  [请求类] 国战升级军备
        /// </summary>
        ReqCSNationalUpgradeArmsCode = 2037,
        /// <summary>
        ///  [响应类] 国战升级军备
        /// </summary>
        ResCSNationalUpgradeArmsCode = 2038,
        /// <summary>
        ///  [请求类] 国战军备信息
        /// </summary>
        ReqCSNationalArmsInfoCode = 2039,
        /// <summary>
        ///  [响应类] 国战军备信息
        /// </summary>
        ResCSNationalArmsInfoCode = 2040,
        /// <summary>
        ///  [请求类] 更新国战城池信息
        /// </summary>
        ReqEscalationCSNationalCityCode = 2041,
        /// <summary>
        ///  [响应类] 更新国战城池信息
        /// </summary>
        ResEscalationCSNationalCityCode = 2042,
        /// <summary>
        ///  [请求类] 通知跨服国战活动状态切换
        /// </summary>
        ReqNoticeCSNationalChangeStateCode = 2043,
        /// <summary>
        ///  [响应类] 通知跨服国战活动状态切换
        /// </summary>
        ResNoticeCSNationalChangeStateCode = 2044,
        /// <summary>
        ///  [请求类] 通知城池归属
        /// </summary>
        ReqNationalNoticeCityOwnerCode = 2045,
        /// <summary>
        ///  [响应类] 通知城池归属
        /// </summary>
        ResNationalNoticeCityOwnerCode = 2046,
        /// <summary>
        ///  [请求类] 国战通知破门
        /// </summary>
        ReqNationalOpenDoorCode = 2047,
        /// <summary>
        ///  [响应类] 国战通知破门
        /// </summary>
        ResNationalOpenDoorCode = 2048,
        /// <summary>
        ///  [请求类] 
        /// </summary>
        ReqTransferRedbagAwardCode = 2049,
        /// <summary>
        ///  [响应类] 
        /// </summary>
        ResTransferRedbagAwardCode = 2050,
        /// <summary>
        ///  [请求类] 上报行会列表
        /// </summary>
        ReqEscalationGuildListCode = 2051,
        /// <summary>
        ///  [响应类] 上报行会列表
        /// </summary>
        ResEscalationGuildListCode = 2052,
        /// <summary>
        ///  [请求类] 国战召唤战旗车
        /// </summary>
        ReqNationalSpawZhanQiCarCode = 2053,
        /// <summary>
        ///  [响应类] 国战召唤战旗车
        /// </summary>
        ResNationalSpawZhanQiCarCode = 2054,
        /// <summary>
        ///  [请求类] 刷新阵营怪物
        /// </summary>
        ReqSpawnMonsterCampCode = 2055,
        /// <summary>
        ///  [响应类] 刷新阵营怪物
        /// </summary>
        ResSpawnMonsterCampCode = 2056,
        /// <summary>
        ///  [请求类] 增加白名单ip
        /// </summary>
        ReqAddWhiteListIpCode = 2057,
        /// <summary>
        ///  [响应类] 增加白名单ip
        /// </summary>
        ResAddWhiteListIpCode = 2058,
        /// <summary>
        ///  [请求类] 通知世界服玩家国战传送城池
        /// </summary>
        ReqNoticeCSNationalCityTransferCode = 2059,
        /// <summary>
        ///  [响应类] 通知世界服玩家国战传送城池
        /// </summary>
        ResNoticeCSNationalCityTransferCode = 2060,
        /// <summary>
        ///  [请求类] 更新跨服活动玩家信息
        /// </summary>
        ReqUpdatePlayerSWActivityInfoCode = 2061,
        /// <summary>
        ///  [响应类] 更新跨服活动玩家信息
        /// </summary>
        ResUpdatePlayerSWActivityInfoCode = 2062,
        /// <summary>
        ///  [请求类] 跨服足球改变化身
        /// </summary>
        ReqKFZQChangeAvatarCode = 2063,
        /// <summary>
        ///  [响应类] 跨服足球改变化身
        /// </summary>
        ResKFZQChangeAvatarCode = 2064,
        /// <summary>
        ///  [请求类] 
        /// </summary>
        ReqSWUseActivitySkillCode = 2065,
        /// <summary>
        ///  [响应类] 
        /// </summary>
        ResSWUseActivitySkillCode = 2066,
        /// <summary>
        ///  [请求类] 国战上报玩家积分
        /// </summary>
        ReqCSNationalReportPlayerScoreCode = 2067,
        /// <summary>
        ///  [响应类] 国战上报玩家积分
        /// </summary>
        ResCSNationalReportPlayerScoreCode = 2068,
        /// <summary>
        ///  [请求类] 跨服国战阵营排行信息
        /// </summary>
        ReqCSNatoinalCampRankInfoCode = 2069,
        /// <summary>
        ///  [响应类] 跨服国战阵营排行信息
        /// </summary>
        ResCSNatoinalCampRankInfoCode = 2070,
        /// <summary>
        ///  [请求类] 获取行会的国战阵营
        /// </summary>
        ReqAcquireGuildCSNationalCampCode = 2071,
        /// <summary>
        ///  [响应类] 获取行会的国战阵营
        /// </summary>
        ResAcquireGuildCSNationalCampCode = 2072,
        /// <summary>
        ///  [请求类] 通知当前阵营视野城池
        /// </summary>
        ReqCSNationalNoticeCampViewCityCode = 2073,
        /// <summary>
        ///  [响应类] 通知当前阵营视野城池
        /// </summary>
        ResCSNationalNoticeCampViewCityCode = 2074,
        /// <summary>
        ///  [请求类] 通知国战攻城信息
        /// </summary>
        ReqNoticeCSNationalExpeditionFightInfoCode = 2075,
        /// <summary>
        ///  [响应类] 通知国战攻城信息
        /// </summary>
        ResNoticeCSNationalExpeditionFightInfoCode = 2076,
        /// <summary>
        ///  [请求类] 天下第一武道会通知阶段信息
        /// </summary>
        ReqNoticeBudokaiStageCode = 2077,
        /// <summary>
        ///  [响应类] 天下第一武道会通知阶段信息
        /// </summary>
        ResNoticeBudokaiStageCode = 2078,
        /// <summary>
        ///  [请求类] 天下第一武道会报名
        /// </summary>
        ReqBudokaiSignUpCode = 2079,
        /// <summary>
        ///  [响应类] 天下第一武道会报名
        /// </summary>
        ResBudokaiSignUpCode = 2080,
        /// <summary>
        ///  [请求类] 国战上报行军信息
        /// </summary>
        ReqEscalationCSNationalMarchCode = 2081,
        /// <summary>
        ///  [响应类] 国战上报行军信息
        /// </summary>
        ResEscalationCSNationalMarchCode = 2082,
        /// <summary>
        ///  [请求类] 国战上报弃城信息
        /// </summary>
        ReqEscalationCSNationalAbandonCityCode = 2083,
        /// <summary>
        ///  [响应类] 国战上报弃城信息
        /// </summary>
        ResEscalationCSNationalAbandonCityCode = 2084,
        /// <summary>
        ///  [请求类] 通知跨服竞技场战区id
        /// </summary>
        ReqNoticeCSArenaZoneIDCode = 2085,
        /// <summary>
        ///  [响应类] 通知跨服竞技场战区id
        /// </summary>
        ResNoticeCSArenaZoneIDCode = 2086,
        /// <summary>
        ///  [请求类] 开始钓鱼
        /// </summary>
        ReqFishingStartCode = 2087,
        /// <summary>
        ///  [响应类] 开始钓鱼
        /// </summary>
        ResFishingStartCode = 2088,
        /// <summary>
        ///  [请求类] 钓鱼收线
        /// </summary>
        ReqFishingReelUpCode = 2089,
        /// <summary>
        ///  [响应类] 钓鱼收线
        /// </summary>
        ResFishingReelUpCode = 2090,
        /// <summary>
        ///  [请求类] 购买钓鱼体力
        /// </summary>
        ReqFishingBuyPhysicalStrengthCode = 2091,
        /// <summary>
        ///  [响应类] 购买钓鱼体力
        /// </summary>
        ResFishingBuyPhysicalStrengthCode = 2092,
        /// <summary>
        ///  [请求类] 钓鱼-请求锦鲤排行榜
        /// </summary>
        ReqFishingKoiRankCode = 2093,
        /// <summary>
        ///  [响应类] 钓鱼-请求锦鲤排行榜
        /// </summary>
        ResFishingKoiRankCode = 2094,
        /// <summary>
        ///  [请求类] 钓鱼-升级渔具
        /// </summary>
        ReqFishingGearUpgradeCode = 2095,
        /// <summary>
        ///  [响应类] 钓鱼-升级渔具
        /// </summary>
        ResFishingGearUpgradeCode = 2096,
        /// <summary>
        ///  [请求类] 获得锦鲤
        /// </summary>
        ReqFishingGetKoiCode = 2097,
        /// <summary>
        ///  [响应类] 获得锦鲤
        /// </summary>
        ResFishingGetKoiCode = 2098,
        /// <summary>
        ///  [请求类] 钓鱼-锦鲤兑换
        /// </summary>
        ReqFishingKoiExchangeCode = 2099,
        /// <summary>
        ///  [响应类] 钓鱼-锦鲤兑换
        /// </summary>
        ResFishingKoiExchangeCode = 2100,
        /// <summary>
        ///  [请求类] 钓鱼模块初始化数据
        /// </summary>
        ReqFishingInitModuleDataCode = 2101,
        /// <summary>
        ///  [响应类] 钓鱼模块初始化数据
        /// </summary>
        ResFishingInitModuleDataCode = 2102,
        /// <summary>
        ///  [请求类] 新版每日礼包
        /// </summary>
        ReqDailyGiftConfCode = 2103,
        /// <summary>
        ///  [响应类] 新版每日礼包
        /// </summary>
        ResDailyGiftConfCode = 2104,
        /// <summary>
        ///  [请求类] 聊天框无过滤显示信息
        /// </summary>
        ReqChatBoardMessageCode = 2105,
        /// <summary>
        ///  [响应类] 聊天框无过滤显示信息
        /// </summary>
        ResChatBoardMessageCode = 2106,
        /// <summary>
        ///  [请求类] 钓鱼鱼王排行榜更新
        /// </summary>
        ReqFishingUpdateKingRankCode = 2107,
        /// <summary>
        ///  [响应类] 钓鱼鱼王排行榜更新
        /// </summary>
        ResFishingUpdateKingRankCode = 2108,
        /// <summary>
        ///  [请求类] 鱼王排行榜
        /// </summary>
        ReqFishingKingRankCode = 2109,
        /// <summary>
        ///  [响应类] 鱼王排行榜
        /// </summary>
        ResFishingKingRankCode = 2110,
        /// <summary>
        ///  [请求类] 多个物品数量更新
        /// </summary>
        ReqUpdateItemListNumCode = 2111,
        /// <summary>
        ///  [响应类] 多个物品数量更新
        /// </summary>
        ResUpdateItemListNumCode = 2112,
        /// <summary>
        ///  [请求类] 国战战斗副本完成
        /// </summary>
        ReqCSNationalDungeonFinishCode = 2113,
        /// <summary>
        ///  [响应类] 国战战斗副本完成
        /// </summary>
        ResCSNationalDungeonFinishCode = 2114,
        /// <summary>
        ///  [请求类] 天下第一武道会分组信息
        /// </summary>
        ReqBudokaiRoomsInfoCode = 2115,
        /// <summary>
        ///  [响应类] 天下第一武道会分组信息
        /// </summary>
        ResBudokaiRoomsInfoCode = 2116,
        /// <summary>
        ///  [请求类] 创建天下第一武道会对战副本
        /// </summary>
        ReqCreateBudokaiDungeonCode = 2117,
        /// <summary>
        ///  [响应类] 创建天下第一武道会对战副本
        /// </summary>
        ResCreateBudokaiDungeonCode = 2118,
        /// <summary>
        ///  [请求类] 通知天下第一武道会对局地图唯一id
        /// </summary>
        ReqNoticeBudokaiMapGuidCode = 2119,
        /// <summary>
        ///  [响应类] 通知天下第一武道会对局地图唯一id
        /// </summary>
        ResNoticeBudokaiMapGuidCode = 2120,
        /// <summary>
        ///  [请求类] 天下第一武道会玩家进入对战地图
        /// </summary>
        ReqBudokaiEntermapCode = 2121,
        /// <summary>
        ///  [响应类] 天下第一武道会玩家进入对战地图
        /// </summary>
        ResBudokaiEntermapCode = 2122,
        /// <summary>
        ///  [请求类] 天下第一武道会对战结果
        /// </summary>
        ReqBudokaiFightReslutCode = 2123,
        /// <summary>
        ///  [响应类] 天下第一武道会对战结果
        /// </summary>
        ResBudokaiFightReslutCode = 2124,
        /// <summary>
        ///  [请求类] 国战阵营行军记录
        /// </summary>
        ReqCSNationalMarchRecordCode = 2125,
        /// <summary>
        ///  [响应类] 国战阵营行军记录
        /// </summary>
        ResCSNationalMarchRecordCode = 2126,
        /// <summary>
        ///  [请求类] 通知世界服发放武道会对战奖励
        /// </summary>
        ReqBudokaiSendFightAwardCode = 2127,
        /// <summary>
        ///  [响应类] 通知世界服发放武道会对战奖励
        /// </summary>
        ResBudokaiSendFightAwardCode = 2128,
        /// <summary>
        ///  [请求类] 天下第一武道会押注
        /// </summary>
        ReqBudokaiBetCode = 2129,
        /// <summary>
        ///  [响应类] 天下第一武道会押注
        /// </summary>
        ResBudokaiBetCode = 2130,
        /// <summary>
        ///  [请求类] 钓鱼-更新钓鱼信息
        /// </summary>
        ReqUpdateFishingInfoCode = 2131,
        /// <summary>
        ///  [响应类] 钓鱼-更新钓鱼信息
        /// </summary>
        ResUpdateFishingInfoCode = 2132,
        /// <summary>
        ///  [请求类] 锦鲤排行
        /// </summary>
        ReqFishingUpdateKoiRankCode = 2133,
        /// <summary>
        ///  [响应类] 锦鲤排行
        /// </summary>
        ResFishingUpdateKoiRankCode = 2134,
        /// <summary>
        ///  [请求类] 通知国战战区相关数据
        /// </summary>
        ReqCSNationalZeroDataCode = 2135,
        /// <summary>
        ///  [响应类] 通知国战战区相关数据
        /// </summary>
        ResCSNationalZeroDataCode = 2136,
        /// <summary>
        ///  [请求类] 天下第一武道会,进入对局的玩家列表
        /// </summary>
        ReqBudokaiEnterRoomPlayersCode = 2137,
        /// <summary>
        ///  [响应类] 天下第一武道会,进入对局的玩家列表
        /// </summary>
        ResBudokaiEnterRoomPlayersCode = 2138,
        /// <summary>
        ///  [请求类] 刷新NPC
        /// </summary>
        ReqSpawnNPCExCode = 2139,
        /// <summary>
        ///  [响应类] 刷新NPC
        /// </summary>
        ResSpawnNPCExCode = 2140,
        /// <summary>
        ///  [请求类] 寻找最近的敌对玩家
        /// </summary>
        ReqGetNearestEenemyCode = 2141,
        /// <summary>
        ///  [响应类] 寻找最近的敌对玩家
        /// </summary>
        ResGetNearestEenemyCode = 2142,
        /// <summary>
        ///  [请求类] 通知地图删除NPC
        /// </summary>
        ReqDeleteNpcCode = 2143,
        /// <summary>
        ///  [响应类] 通知地图删除NPC
        /// </summary>
        ResDeleteNpcCode = 2144,
        /// <summary>
        ///  [请求类] 通知国战行军记录
        /// </summary>
        ReqNoticeCSNationalMarchRecordCode = 2145,
        /// <summary>
        ///  [响应类] 通知国战行军记录
        /// </summary>
        ResNoticeCSNationalMarchRecordCode = 2146,
        /// <summary>
        ///  [请求类] 功能预告
        /// </summary>
        ReqFunctionNoticeCode = 2147,
        /// <summary>
        ///  [响应类] 功能预告
        /// </summary>
        ResFunctionNoticeCode = 2148,
        /// <summary>
        ///  [请求类] 跨服钓鱼报名
        /// </summary>
        ReqCSFishingEnrollCode = 2149,
        /// <summary>
        ///  [响应类] 跨服钓鱼报名
        /// </summary>
        ResCSFishingEnrollCode = 2150,
        /// <summary>
        ///  [请求类] 召唤分身
        /// </summary>
        ReqSpwanMirrorCode = 2151,
        /// <summary>
        ///  [响应类] 召唤分身
        /// </summary>
        ResSpwanMirrorCode = 2152,
        /// <summary>
        ///  [请求类] 武道会已报名玩家列表
        /// </summary>
        ReqBudokaiSignUpPlayersCode = 2153,
        /// <summary>
        ///  [响应类] 武道会已报名玩家列表
        /// </summary>
        ResBudokaiSignUpPlayersCode = 2154,
        /// <summary>
        ///  [请求类] 跨服钓鱼创建副本
        /// </summary>
        ReqCSFishingCreateDungeonCode = 2155,
        /// <summary>
        ///  [响应类] 跨服钓鱼创建副本
        /// </summary>
        ResCSFishingCreateDungeonCode = 2156,
        /// <summary>
        ///  [请求类] map服通知world服钓鱼结果
        /// </summary>
        ReqFishingResultCode = 2157,
        /// <summary>
        ///  [响应类] map服通知world服钓鱼结果
        /// </summary>
        ResFishingResultCode = 2158,
        /// <summary>
        ///  [请求类] 跨服活动状态更改
        /// </summary>
        ReqNoticeCSChangeStateCode = 2159,
        /// <summary>
        ///  [响应类] 跨服活动状态更改
        /// </summary>
        ResNoticeCSChangeStateCode = 2160,
        /// <summary>
        ///  [请求类] 国战急行军
        /// </summary>
        ReqCSNationalRapidMarchCode = 2161,
        /// <summary>
        ///  [响应类] 国战急行军
        /// </summary>
        ResCSNationalRapidMarchCode = 2162,
        /// <summary>
        ///  [请求类] world服向map服更新钓鱼数据
        /// </summary>
        ReqFishingDataUpdateCode = 2163,
        /// <summary>
        ///  [响应类] world服向map服更新钓鱼数据
        /// </summary>
        ResFishingDataUpdateCode = 2164,
        /// <summary>
        ///  [请求类] 拉杆操作
        /// </summary>
        ReqFishingPullCode = 2165,
        /// <summary>
        ///  [响应类] 拉杆操作
        /// </summary>
        ResFishingPullCode = 2166,
        /// <summary>
        ///  [请求类] 取消钓鱼
        /// </summary>
        ReqFishingCancelCode = 2167,
        /// <summary>
        ///  [响应类] 取消钓鱼
        /// </summary>
        ResFishingCancelCode = 2168
    }

}