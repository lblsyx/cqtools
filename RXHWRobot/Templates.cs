using System;
using System.Text;
using System.Collections.Generic;

using UnityLight.Tpls;
using UnityLight.Internets;

namespace RXHWRobot
{
public class AITemplate : Tpl
    {
        /// <summary>
        /// AI备注
        /// </summary>
        public string BeiZhu;
        /// <summary>
        /// 阵营
        /// </summary>
        public int Camp;
        /// <summary>
        /// AI类型(1是木桩AI，2是普通怪物AI，3是人形怪（比普通的多了点智商ai间隔=移动间隔=215），4是镖车，石墓烧猪的AI，5是宠物AI，6是英雄AI(ai间隔=移动间隔=215)，7是弓箭手AI，8人形怪挖矿ai（不用了），9矿洞心魔,10战宠ai)，11努力挖矿的矿工，12 分身子怪(取主体怪AI视野攻击距离追击距离)
        /// </summary>
        public int Type;
        /// <summary>
        /// 0跑1走
        /// </summary>
        public int WalkType;
        /// <summary>
        /// 挨打了停多久（单位毫秒）
        /// </summary>
        public int BeatenWait;
        /// <summary>
        /// 主人在才移动
        /// </summary>
        public int FollowOwner;
        /// <summary>
        /// 目标点X
        /// </summary>
        public int TargetPointX;
        /// <summary>
        /// 目标点Y
        /// </summary>
        public int TargetPointY;
        /// <summary>
        /// 默认技能CD
        /// </summary>
        public int AttackInterval;
        /// <summary>
        /// AI间隔
        /// </summary>
        public int ThinkInterval;
        /// <summary>
        /// 移动间隔
        /// </summary>
        public int MoveInterval;
        /// <summary>
        /// 待机时间下限
        /// </summary>
        public int StandbyTimeMin;
        /// <summary>
        /// 待机时间上限
        /// </summary>
        public int StandbyTimeMax;
        /// <summary>
        /// 暂缓移动（ 每移动5步之后，下一次移动间隔增加时间**毫秒）
        /// </summary>
        public int DelayMove;
        /// <summary>
        /// 是否能移动
        /// </summary>
        public int IsCanMove;
        /// <summary>
        /// 追击范围
        /// </summary>
        public int PursuitDistance;
        /// <summary>
        /// 被攻击时，追击时间
        /// </summary>
        public int ChaseTime;
        /// <summary>
        /// 视野范围/警戒范围
        /// </summary>
        public int Ken;
        /// <summary>
        /// 巡逻半径
        /// </summary>
        public int PatrolDistance;
        /// <summary>
        /// 逃跑几率
        /// </summary>
        public int RunAwayProb;
        /// <summary>
        /// 每次逃跑距离
        /// </summary>
        public int RunAwayDistance;
        /// <summary>
        /// 钻地相关（0不钻出，1钻出不回）
        /// </summary>
        public int UndergroundDrilled;
        /// <summary>
        /// 随机传送血线
        /// （万分比）
        /// </summary>
        public int RandomTranHp;
        /// <summary>
        /// 随机传送触发概率
        /// （万分比）
        /// </summary>
        public int RandomTranPct;
        /// <summary>
        /// 原地消失血线
        /// （万分比）
        /// </summary>
        public int DisappearHp;
        /// <summary>
        /// 原地消失触发概率
        /// （万分比）
        /// </summary>
        public int DisappearPct;
        /// <summary>
        /// 血量低于x%后还击
        /// （万分比）
        /// </summary>
        public int CounterAttHp;
        /// <summary>
        /// 死亡后释放技能（0,代表不释放技能,其它则代表技能id）
        /// </summary>
        public int DeathSkill;
        /// <summary>
        /// 普通攻击技能ID
        /// </summary>
        public int NormalAttackSkillID;
        /// <summary>
        /// 附带攻击技能（近战类普攻姿势技能）
        /// </summary>
        public int AppendSkillID;
        /// <summary>
        /// 攻击模式（0主动,1被动，2不会攻击）
        /// </summary>
        public int AttackMode;
        /// <summary>
        /// 狂暴血量百分比
        /// </summary>
        public int EnrageHpProb;
        /// <summary>
        /// 狂暴后怪物模板ID（不继承模板中血量）
        /// </summary>
        public int EnrageTID;
        /// <summary>
        /// 事件触发血量百分比2
        /// </summary>
        public int EventTriggerHpProb;
        /// <summary>
        /// 事件ID
        /// </summary>
        public int EventID;
        /// <summary>
        /// 被动技能
        /// </summary>
        public string PassiveSkill;
        /// <summary>
        /// 技能1ID
        /// </summary>
        public int Skill1ID;
        /// <summary>
        /// 技能1CD
        /// </summary>
        public int Skill1CD;
        /// <summary>
        /// 释放技能1的条件（0没有，1血量，2攻击概率触发,3范围内有玩家则释放）
        /// </summary>
        public int UseSkill1Condition;
        /// <summary>
        /// 释放技能1的条件值(条件为1时，值为万分比，条件为3时，填范围格子数
        /// </summary>
        public int UseSkill1ConditonValue;
        /// <summary>
        /// 技能2ID
        /// </summary>
        public int Skill2ID;
        /// <summary>
        /// 技能2CD
        /// </summary>
        public int Skill2CD;
        /// <summary>
        /// 释放技能2的条件（0没有，1血量，2攻击概率触发）2
        /// </summary>
        public int UseSkill2Condition;
        /// <summary>
        /// 释放技能2的条件值
        /// </summary>
        public int UseSkill2ConditonValue;
        /// <summary>
        /// 技能3ID
        /// </summary>
        public int Skill3ID;
        /// <summary>
        /// 技能3CD
        /// </summary>
        public int Skill3CD;
        /// <summary>
        /// 释放技能3的条件（0没有，1血量）22
        /// </summary>
        public int UseSkill3Condition;
        /// <summary>
        /// 释放技能3的条件值
        /// </summary>
        public int UseSkill3ConditonValue;
        /// <summary>
        /// 技能4ID
        /// </summary>
        public int Skill4ID;
        /// <summary>
        /// 技能4CD
        /// </summary>
        public int Skill4CD;
        /// <summary>
        /// 释放技能4的条件（0没有，1血量）23
        /// </summary>
        public int UseSkill4Condition;
        /// <summary>
        /// 释放技能4的条件值
        /// </summary>
        public int UseSkill4ConditonValue;
        /// <summary>
        /// 技能5ID
        /// </summary>
        public int Skill5ID;
        /// <summary>
        /// 技能5CD
        /// </summary>
        public int Skill5CD;
        /// <summary>
        /// 释放技能5的条件（0没有，1血量）3
        /// </summary>
        public int UseSkill5Condition;
        /// <summary>
        /// 释放技能5的条件值
        /// </summary>
        public int UseSkill5ConditonValue;
        /// <summary>
        /// NPC初始方向random=0eLeft = 1,
        ///  eRight = 2,
        ///  eUp = 3,
        ///  eDown = 4,
        ///  eLeftUp = 13,
        ///  eLeftDown = 14,
        ///  eRightUp = 23,
        ///  eRightDown = 24
        /// </summary>
        public int Direct;
        /// <summary>
        /// x1|y1,x2|y2
        /// </summary>
        public string MovePoint;
        /// <summary>
        /// 怪物以什么类型为优先攻击目标
        /// </summary>
        public int TargetGoal;
        /// <summary>
        /// 被攻击是否会跑
        /// </summary>
        public int IsEscape;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            BeiZhu = bytes.ReadUTF();
            Camp = bytes.ReadInt();
            Type = bytes.ReadInt();
            WalkType = bytes.ReadInt();
            BeatenWait = bytes.ReadInt();
            FollowOwner = bytes.ReadInt();
            TargetPointX = bytes.ReadInt();
            TargetPointY = bytes.ReadInt();
            AttackInterval = bytes.ReadInt();
            ThinkInterval = bytes.ReadInt();
            MoveInterval = bytes.ReadInt();
            StandbyTimeMin = bytes.ReadInt();
            StandbyTimeMax = bytes.ReadInt();
            DelayMove = bytes.ReadInt();
            IsCanMove = bytes.ReadInt();
            PursuitDistance = bytes.ReadInt();
            ChaseTime = bytes.ReadInt();
            Ken = bytes.ReadInt();
            PatrolDistance = bytes.ReadInt();
            RunAwayProb = bytes.ReadInt();
            RunAwayDistance = bytes.ReadInt();
            UndergroundDrilled = bytes.ReadInt();
            RandomTranHp = bytes.ReadInt();
            RandomTranPct = bytes.ReadInt();
            DisappearHp = bytes.ReadInt();
            DisappearPct = bytes.ReadInt();
            CounterAttHp = bytes.ReadInt();
            DeathSkill = bytes.ReadInt();
            NormalAttackSkillID = bytes.ReadInt();
            AppendSkillID = bytes.ReadInt();
            AttackMode = bytes.ReadInt();
            EnrageHpProb = bytes.ReadInt();
            EnrageTID = bytes.ReadInt();
            EventTriggerHpProb = bytes.ReadInt();
            EventID = bytes.ReadInt();
            PassiveSkill = bytes.ReadUTF();
            Skill1ID = bytes.ReadInt();
            Skill1CD = bytes.ReadInt();
            UseSkill1Condition = bytes.ReadInt();
            UseSkill1ConditonValue = bytes.ReadInt();
            Skill2ID = bytes.ReadInt();
            Skill2CD = bytes.ReadInt();
            UseSkill2Condition = bytes.ReadInt();
            UseSkill2ConditonValue = bytes.ReadInt();
            Skill3ID = bytes.ReadInt();
            Skill3CD = bytes.ReadInt();
            UseSkill3Condition = bytes.ReadInt();
            UseSkill3ConditonValue = bytes.ReadInt();
            Skill4ID = bytes.ReadInt();
            Skill4CD = bytes.ReadInt();
            UseSkill4Condition = bytes.ReadInt();
            UseSkill4ConditonValue = bytes.ReadInt();
            Skill5ID = bytes.ReadInt();
            Skill5CD = bytes.ReadInt();
            UseSkill5Condition = bytes.ReadInt();
            UseSkill5ConditonValue = bytes.ReadInt();
            Direct = bytes.ReadInt();
            MovePoint = bytes.ReadUTF();
            TargetGoal = bytes.ReadInt();
            IsEscape = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(BeiZhu);
            bytes.WriteInt(Camp);
            bytes.WriteInt(Type);
            bytes.WriteInt(WalkType);
            bytes.WriteInt(BeatenWait);
            bytes.WriteInt(FollowOwner);
            bytes.WriteInt(TargetPointX);
            bytes.WriteInt(TargetPointY);
            bytes.WriteInt(AttackInterval);
            bytes.WriteInt(ThinkInterval);
            bytes.WriteInt(MoveInterval);
            bytes.WriteInt(StandbyTimeMin);
            bytes.WriteInt(StandbyTimeMax);
            bytes.WriteInt(DelayMove);
            bytes.WriteInt(IsCanMove);
            bytes.WriteInt(PursuitDistance);
            bytes.WriteInt(ChaseTime);
            bytes.WriteInt(Ken);
            bytes.WriteInt(PatrolDistance);
            bytes.WriteInt(RunAwayProb);
            bytes.WriteInt(RunAwayDistance);
            bytes.WriteInt(UndergroundDrilled);
            bytes.WriteInt(RandomTranHp);
            bytes.WriteInt(RandomTranPct);
            bytes.WriteInt(DisappearHp);
            bytes.WriteInt(DisappearPct);
            bytes.WriteInt(CounterAttHp);
            bytes.WriteInt(DeathSkill);
            bytes.WriteInt(NormalAttackSkillID);
            bytes.WriteInt(AppendSkillID);
            bytes.WriteInt(AttackMode);
            bytes.WriteInt(EnrageHpProb);
            bytes.WriteInt(EnrageTID);
            bytes.WriteInt(EventTriggerHpProb);
            bytes.WriteInt(EventID);
            bytes.WriteUTF(PassiveSkill);
            bytes.WriteInt(Skill1ID);
            bytes.WriteInt(Skill1CD);
            bytes.WriteInt(UseSkill1Condition);
            bytes.WriteInt(UseSkill1ConditonValue);
            bytes.WriteInt(Skill2ID);
            bytes.WriteInt(Skill2CD);
            bytes.WriteInt(UseSkill2Condition);
            bytes.WriteInt(UseSkill2ConditonValue);
            bytes.WriteInt(Skill3ID);
            bytes.WriteInt(Skill3CD);
            bytes.WriteInt(UseSkill3Condition);
            bytes.WriteInt(UseSkill3ConditonValue);
            bytes.WriteInt(Skill4ID);
            bytes.WriteInt(Skill4CD);
            bytes.WriteInt(UseSkill4Condition);
            bytes.WriteInt(UseSkill4ConditonValue);
            bytes.WriteInt(Skill5ID);
            bytes.WriteInt(Skill5CD);
            bytes.WriteInt(UseSkill5Condition);
            bytes.WriteInt(UseSkill5ConditonValue);
            bytes.WriteInt(Direct);
            bytes.WriteUTF(MovePoint);
            bytes.WriteInt(TargetGoal);
            bytes.WriteInt(IsEscape);
        }
    }

    public class AITemplateMode : TplMode
    {
        private IList<AITemplate> mList = null;

        public AITemplateMode(int step) : base("AITemplate", typeof(AITemplate), step) { }

        public AITemplate this[int id]
        {
            get { return Find<AITemplate>(id); }
        }

        public AITemplate Find(int id)
        {
            return Find<AITemplate>(id);
        }

        public IList<AITemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AITemplate>();
            return mList;
        }
    }

public class HalfmoonTemplate : Tpl
    {
        /// <summary>
        /// 半月朝向
        /// </summary>
        public int Orientation;
        /// <summary>
        /// 半月范围
        /// </summary>
        public string Range;
        /// <summary>
        /// 圆月剑法额外范围
        /// </summary>
        public string ExRange;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Orientation = bytes.ReadInt();
            Range = bytes.ReadUTF();
            ExRange = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Orientation);
            bytes.WriteUTF(Range);
            bytes.WriteUTF(ExRange);
        }
    }

    public class HalfmoonTemplateMode : TplMode
    {
        private IList<HalfmoonTemplate> mList = null;

        public HalfmoonTemplateMode(int step) : base("HalfmoonTemplate", typeof(HalfmoonTemplate), step) { }

        public HalfmoonTemplate this[int id]
        {
            get { return Find<HalfmoonTemplate>(id); }
        }

        public HalfmoonTemplate Find(int id)
        {
            return Find<HalfmoonTemplate>(id);
        }

        public IList<HalfmoonTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<HalfmoonTemplate>();
            return mList;
        }
    }

public class DemonsChangeTemplate : Tpl
    {
        /// <summary>
        /// 变身BUFF
        /// </summary>
        public int ChangeBuffID;
        /// <summary>
        /// 最大能量值
        /// </summary>
        public int ChangeNum;
        /// <summary>
        /// 变身消耗/S
        /// </summary>
        public int ChangeCost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ChangeBuffID = bytes.ReadInt();
            ChangeNum = bytes.ReadInt();
            ChangeCost = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ChangeBuffID);
            bytes.WriteInt(ChangeNum);
            bytes.WriteInt(ChangeCost);
        }
    }

    public class DemonsChangeTemplateMode : TplMode
    {
        private IList<DemonsChangeTemplate> mList = null;

        public DemonsChangeTemplateMode(int step) : base("DemonsChangeTemplate", typeof(DemonsChangeTemplate), step) { }

        public DemonsChangeTemplate this[int id]
        {
            get { return Find<DemonsChangeTemplate>(id); }
        }

        public DemonsChangeTemplate Find(int id)
        {
            return Find<DemonsChangeTemplate>(id);
        }

        public IList<DemonsChangeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DemonsChangeTemplate>();
            return mList;
        }
    }

public class ChangeBodyTemplate : Tpl
    {
        /// <summary>
        /// 注释（备注）
        /// </summary>
        public string Describe;
        /// <summary>
        /// 变身类型(1是心魔，2是热血足球，3是无限进化，4是行尸走肉，5是心魔英雄)
        /// </summary>
        public int Type;
        /// <summary>
        /// 是否满血
        /// </summary>
        public int IsFullHP;
        /// <summary>
        /// 下一级BUFFTID
        /// </summary>
        public int NextID;
        /// <summary>
        /// 等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 形象展示
        /// </summary>
        public int ClothID;
        /// <summary>
        /// 武器
        /// </summary>
        public int WeapenID;
        /// <summary>
        /// 翅膀
        /// </summary>
        public int WingID;
        /// <summary>
        /// 称号
        /// </summary>
        public int TitleID;
        /// <summary>
        /// 名字
        /// </summary>
        public string NickName;
        /// <summary>
        /// 名字颜色（html格式）
        /// </summary>
        public string NameColor;
        /// <summary>
        /// 行会
        /// </summary>
        public string GuildTitle;
        /// <summary>
        /// 品阶
        /// </summary>
        public int Character;
        /// <summary>
        /// 资源高度
        /// </summary>
        public int AssetHigh;
        /// <summary>
        /// 是否变技能
        /// </summary>
        public int ChangeSkill;
        /// <summary>
        /// 是否变属性
        /// </summary>
        public int ChangeAttribute;
        /// <summary>
        /// 技能
        /// </summary>
        public string Skill;
        /// <summary>
        /// 血量
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 最小攻击
        /// </summary>
        public int MinAtk;
        /// <summary>
        /// 最大攻击
        /// </summary>
        public int MaxAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 升级经验
        /// </summary>
        public int UpgradeExp;
        /// <summary>
        /// 被杀是否有公告
        /// </summary>
        public int NoticeKill;
        /// <summary>
        /// 是否自动追击
        /// </summary>
        public int IsChase;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Describe = bytes.ReadUTF();
            Type = bytes.ReadInt();
            IsFullHP = bytes.ReadInt();
            NextID = bytes.ReadInt();
            Lv = bytes.ReadInt();
            ClothID = bytes.ReadInt();
            WeapenID = bytes.ReadInt();
            WingID = bytes.ReadInt();
            TitleID = bytes.ReadInt();
            NickName = bytes.ReadUTF();
            NameColor = bytes.ReadUTF();
            GuildTitle = bytes.ReadUTF();
            Character = bytes.ReadInt();
            AssetHigh = bytes.ReadInt();
            ChangeSkill = bytes.ReadInt();
            ChangeAttribute = bytes.ReadInt();
            Skill = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinAtk = bytes.ReadInt();
            MaxAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            UpgradeExp = bytes.ReadInt();
            NoticeKill = bytes.ReadInt();
            IsChase = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Describe);
            bytes.WriteInt(Type);
            bytes.WriteInt(IsFullHP);
            bytes.WriteInt(NextID);
            bytes.WriteInt(Lv);
            bytes.WriteInt(ClothID);
            bytes.WriteInt(WeapenID);
            bytes.WriteInt(WingID);
            bytes.WriteInt(TitleID);
            bytes.WriteUTF(NickName);
            bytes.WriteUTF(NameColor);
            bytes.WriteUTF(GuildTitle);
            bytes.WriteInt(Character);
            bytes.WriteInt(AssetHigh);
            bytes.WriteInt(ChangeSkill);
            bytes.WriteInt(ChangeAttribute);
            bytes.WriteUTF(Skill);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinAtk);
            bytes.WriteInt(MaxAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(UpgradeExp);
            bytes.WriteInt(NoticeKill);
            bytes.WriteInt(IsChase);
        }
    }

    public class ChangeBodyTemplateMode : TplMode
    {
        private IList<ChangeBodyTemplate> mList = null;

        public ChangeBodyTemplateMode(int step) : base("ChangeBodyTemplate", typeof(ChangeBodyTemplate), step) { }

        public ChangeBodyTemplate this[int id]
        {
            get { return Find<ChangeBodyTemplate>(id); }
        }

        public ChangeBodyTemplate Find(int id)
        {
            return Find<ChangeBodyTemplate>(id);
        }

        public IList<ChangeBodyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ChangeBodyTemplate>();
            return mList;
        }
    }

public class EvilEquipTemplate : Tpl
    {
        /// <summary>
        /// 装备组
        /// </summary>
        public int EquipGroup;
        /// <summary>
        /// 阶数
        /// </summary>
        public int Grade;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EquipGroup = bytes.ReadInt();
            Grade = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EquipGroup);
            bytes.WriteInt(Grade);
        }
    }

    public class EvilEquipTemplateMode : TplMode
    {
        private IList<EvilEquipTemplate> mList = null;

        public EvilEquipTemplateMode(int step) : base("EvilEquipTemplate", typeof(EvilEquipTemplate), step) { }

        public EvilEquipTemplate this[int id]
        {
            get { return Find<EvilEquipTemplate>(id); }
        }

        public EvilEquipTemplate Find(int id)
        {
            return Find<EvilEquipTemplate>(id);
        }

        public IList<EvilEquipTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<EvilEquipTemplate>();
            return mList;
        }
    }

public class JadeStoneTemplate : Tpl
    {
        /// <summary>
        /// 宝玉备注
        /// </summary>
        public string StoneName;
        /// <summary>
        /// 宝玉属性组
        /// </summary>
        public int AttrGroup;
        /// <summary>
        /// 对应职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 强化等级
        /// </summary>
        public int StrengthLV;
        /// <summary>
        /// 升级消耗货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 进阶消耗元宝
        /// </summary>
        public int MoneyNum;
        /// <summary>
        /// 强化消耗道具
        /// </summary>
        public int NeedItem;
        /// <summary>
        /// 进阶消耗材料
        /// </summary>
        public int ItemNumber;
        /// <summary>
        /// 主属性描述
        /// </summary>
        public string AttrName;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 生命值万分比
        /// </summary>
        public int HpCent;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最小物攻万分比
        /// </summary>
        public int MinPhysicAtkPencent;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最大物攻万分比
        /// </summary>
        public int MaxPhysicAtkPencent;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最小魔攻万分比
        /// </summary>
        public int MinMagicAtkPencent;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最大魔攻万分比
        /// </summary>
        public int MaxMagicAtkPencent;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最小道攻万分比
        /// </summary>
        public int MinTaoistAtkPencent;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最大道术攻击万分比
        /// </summary>
        public int MaxTaoistAtkPencent;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最小物理防御万分比
        /// </summary>
        public int MinPhysicDefPencent;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最大物理防御万分比
        /// </summary>
        public int MaxPhysicDefPencent;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最小魔法防御万分比
        /// </summary>
        public int MinMagicDefPencent;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 最大魔法防御万分比
        /// </summary>
        public int MaxMagicDefPencent;
        /// <summary>
        /// 初始词条数量权重
        /// </summary>
        public string RespawnRand;
        /// <summary>
        /// 词条组ID
        /// </summary>
        public int PhysicRandJob;
        /// <summary>
        /// 词条组ID
        /// </summary>
        public int MagicRandJob;
        /// <summary>
        /// 词条组ID
        /// </summary>
        public int TaoistRandJob;
        /// <summary>
        /// 战士前缀组
        /// </summary>
        public string PhysicTitle;
        /// <summary>
        /// 法师前缀组
        /// </summary>
        public string MagicTitle;
        /// <summary>
        /// 道士前缀组
        /// </summary>
        public string TaoistTitle;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            StoneName = bytes.ReadUTF();
            AttrGroup = bytes.ReadInt();
            Job = bytes.ReadInt();
            StrengthLV = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNum = bytes.ReadInt();
            NeedItem = bytes.ReadInt();
            ItemNumber = bytes.ReadInt();
            AttrName = bytes.ReadUTF();
            HP = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            HpCent = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MinPhysicAtkPencent = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MaxPhysicAtkPencent = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MinMagicAtkPencent = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MaxMagicAtkPencent = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MinTaoistAtkPencent = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MaxTaoistAtkPencent = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MinPhysicDefPencent = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MaxPhysicDefPencent = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MinMagicDefPencent = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            MaxMagicDefPencent = bytes.ReadInt();
            RespawnRand = bytes.ReadUTF();
            PhysicRandJob = bytes.ReadInt();
            MagicRandJob = bytes.ReadInt();
            TaoistRandJob = bytes.ReadInt();
            PhysicTitle = bytes.ReadUTF();
            MagicTitle = bytes.ReadUTF();
            TaoistTitle = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(StoneName);
            bytes.WriteInt(AttrGroup);
            bytes.WriteInt(Job);
            bytes.WriteInt(StrengthLV);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNum);
            bytes.WriteInt(NeedItem);
            bytes.WriteInt(ItemNumber);
            bytes.WriteUTF(AttrName);
            bytes.WriteInt(HP);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(HpCent);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MinPhysicAtkPencent);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MaxPhysicAtkPencent);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MinMagicAtkPencent);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MaxMagicAtkPencent);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MinTaoistAtkPencent);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MaxTaoistAtkPencent);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MinPhysicDefPencent);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MaxPhysicDefPencent);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MinMagicDefPencent);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(MaxMagicDefPencent);
            bytes.WriteUTF(RespawnRand);
            bytes.WriteInt(PhysicRandJob);
            bytes.WriteInt(MagicRandJob);
            bytes.WriteInt(TaoistRandJob);
            bytes.WriteUTF(PhysicTitle);
            bytes.WriteUTF(MagicTitle);
            bytes.WriteUTF(TaoistTitle);
        }
    }

    public class JadeStoneTemplateMode : TplMode
    {
        private IList<JadeStoneTemplate> mList = null;

        public JadeStoneTemplateMode(int step) : base("JadeStoneTemplate", typeof(JadeStoneTemplate), step) { }

        public JadeStoneTemplate this[int id]
        {
            get { return Find<JadeStoneTemplate>(id); }
        }

        public JadeStoneTemplate Find(int id)
        {
            return Find<JadeStoneTemplate>(id);
        }

        public IList<JadeStoneTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JadeStoneTemplate>();
            return mList;
        }
    }

public class JadeStoneRandAttrTemplate : Tpl
    {
        /// <summary>
        /// 词条组ID
        /// </summary>
        public int RandAttrGroup;
        /// <summary>
        /// 词条描述
        /// </summary>
        public string Name;
        /// <summary>
        /// 属性描述是否百分比
        /// </summary>
        public int AttrPct;
        /// <summary>
        /// 词条类型
        /// </summary>
        public int RandType;
        /// <summary>
        /// 属性枚举表id
        /// </summary>
        public int AttributesListID;
        /// <summary>
        /// 属性值
        /// </summary>
        public int AttrNumber;
        /// <summary>
        /// 加成BUFFID
        /// </summary>
        public int BUFFID;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weights;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RandAttrGroup = bytes.ReadInt();
            Name = bytes.ReadUTF();
            AttrPct = bytes.ReadInt();
            RandType = bytes.ReadInt();
            AttributesListID = bytes.ReadInt();
            AttrNumber = bytes.ReadInt();
            BUFFID = bytes.ReadInt();
            Weights = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(RandAttrGroup);
            bytes.WriteUTF(Name);
            bytes.WriteInt(AttrPct);
            bytes.WriteInt(RandType);
            bytes.WriteInt(AttributesListID);
            bytes.WriteInt(AttrNumber);
            bytes.WriteInt(BUFFID);
            bytes.WriteInt(Weights);
        }
    }

    public class JadeStoneRandAttrTemplateMode : TplMode
    {
        private IList<JadeStoneRandAttrTemplate> mList = null;

        public JadeStoneRandAttrTemplateMode(int step) : base("JadeStoneRandAttrTemplate", typeof(JadeStoneRandAttrTemplate), step) { }

        public JadeStoneRandAttrTemplate this[int id]
        {
            get { return Find<JadeStoneRandAttrTemplate>(id); }
        }

        public JadeStoneRandAttrTemplate Find(int id)
        {
            return Find<JadeStoneRandAttrTemplate>(id);
        }

        public IList<JadeStoneRandAttrTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JadeStoneRandAttrTemplate>();
            return mList;
        }
    }

public class JadeStonePerTemplate : Tpl
    {
        /// <summary>
        /// 前缀名
        /// </summary>
        public string PreName;
        /// <summary>
        /// 词条1
        /// </summary>
        public int Entry1;
        /// <summary>
        /// 词条2
        /// </summary>
        public int Entry2;
        /// <summary>
        /// 词条3
        /// </summary>
        public int Entry3;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PreName = bytes.ReadUTF();
            Entry1 = bytes.ReadInt();
            Entry2 = bytes.ReadInt();
            Entry3 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(PreName);
            bytes.WriteInt(Entry1);
            bytes.WriteInt(Entry2);
            bytes.WriteInt(Entry3);
        }
    }

    public class JadeStonePerTemplateMode : TplMode
    {
        private IList<JadeStonePerTemplate> mList = null;

        public JadeStonePerTemplateMode(int step) : base("JadeStonePerTemplate", typeof(JadeStonePerTemplate), step) { }

        public JadeStonePerTemplate this[int id]
        {
            get { return Find<JadeStonePerTemplate>(id); }
        }

        public JadeStonePerTemplate Find(int id)
        {
            return Find<JadeStonePerTemplate>(id);
        }

        public IList<JadeStonePerTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JadeStonePerTemplate>();
            return mList;
        }
    }

public class JadeStoneUnlockTemplate : Tpl
    {
        /// <summary>
        /// 宝玉槽位
        /// </summary>
        public string Name;
        /// <summary>
        /// 初始解锁状态
        /// </summary>
        public int UnLock;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int MoneyNum;
        /// <summary>
        /// 消耗道具
        /// </summary>
        public int NeedItem;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int ItemNum;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            UnLock = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNum = bytes.ReadInt();
            NeedItem = bytes.ReadInt();
            ItemNum = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(UnLock);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNum);
            bytes.WriteInt(NeedItem);
            bytes.WriteInt(ItemNum);
        }
    }

    public class JadeStoneUnlockTemplateMode : TplMode
    {
        private IList<JadeStoneUnlockTemplate> mList = null;

        public JadeStoneUnlockTemplateMode(int step) : base("JadeStoneUnlockTemplate", typeof(JadeStoneUnlockTemplate), step) { }

        public JadeStoneUnlockTemplate this[int id]
        {
            get { return Find<JadeStoneUnlockTemplate>(id); }
        }

        public JadeStoneUnlockTemplate Find(int id)
        {
            return Find<JadeStoneUnlockTemplate>(id);
        }

        public IList<JadeStoneUnlockTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JadeStoneUnlockTemplate>();
            return mList;
        }
    }

public class DivideRawstoneTemplate : Tpl
    {
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int MoneyNum;
        /// <summary>
        /// 消耗道具ID
        /// </summary>
        public int NeedItem;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int ItemNum;
        /// <summary>
        /// 奖励展示
        /// </summary>
        public string RewardShow;
        /// <summary>
        /// 获取途径
        /// </summary>
        public string ThisWay;
        /// <summary>
        /// 必出道具数量
        /// </summary>
        public int FixedNum;
        /// <summary>
        /// 必出道具权重
        /// </summary>
        public string FixedProduce;
        /// <summary>
        /// 随机数量
        /// </summary>
        public string RandNum;
        /// <summary>
        /// 随机道具权重
        /// </summary>
        public string RandProduce;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MoneyType = bytes.ReadInt();
            MoneyNum = bytes.ReadInt();
            NeedItem = bytes.ReadInt();
            ItemNum = bytes.ReadInt();
            RewardShow = bytes.ReadUTF();
            ThisWay = bytes.ReadUTF();
            FixedNum = bytes.ReadInt();
            FixedProduce = bytes.ReadUTF();
            RandNum = bytes.ReadUTF();
            RandProduce = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNum);
            bytes.WriteInt(NeedItem);
            bytes.WriteInt(ItemNum);
            bytes.WriteUTF(RewardShow);
            bytes.WriteUTF(ThisWay);
            bytes.WriteInt(FixedNum);
            bytes.WriteUTF(FixedProduce);
            bytes.WriteUTF(RandNum);
            bytes.WriteUTF(RandProduce);
        }
    }

    public class DivideRawstoneTemplateMode : TplMode
    {
        private IList<DivideRawstoneTemplate> mList = null;

        public DivideRawstoneTemplateMode(int step) : base("DivideRawstoneTemplate", typeof(DivideRawstoneTemplate), step) { }

        public DivideRawstoneTemplate this[int id]
        {
            get { return Find<DivideRawstoneTemplate>(id); }
        }

        public DivideRawstoneTemplate Find(int id)
        {
            return Find<DivideRawstoneTemplate>(id);
        }

        public IList<DivideRawstoneTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DivideRawstoneTemplate>();
            return mList;
        }
    }

public class JadeStoneSlotTemplate : Tpl
    {
        /// <summary>
        /// 宝玉槽位上限
        /// </summary>
        public int PosNum;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// 装备位名称
        /// </summary>
        public string EquipName;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PosNum = bytes.ReadInt();
            Sort = bytes.ReadInt();
            EquipName = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(PosNum);
            bytes.WriteInt(Sort);
            bytes.WriteUTF(EquipName);
        }
    }

    public class JadeStoneSlotTemplateMode : TplMode
    {
        private IList<JadeStoneSlotTemplate> mList = null;

        public JadeStoneSlotTemplateMode(int step) : base("JadeStoneSlotTemplate", typeof(JadeStoneSlotTemplate), step) { }

        public JadeStoneSlotTemplate this[int id]
        {
            get { return Find<JadeStoneSlotTemplate>(id); }
        }

        public JadeStoneSlotTemplate Find(int id)
        {
            return Find<JadeStoneSlotTemplate>(id);
        }

        public IList<JadeStoneSlotTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JadeStoneSlotTemplate>();
            return mList;
        }
    }

public class TreasureExchangeTemplate : Tpl
    {
        /// <summary>
        /// 宝藏积分分栏
        /// </summary>
        public int Type;
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 性别
        /// </summary>
        public int Sex;
        /// <summary>
        /// 显示需要境界等级
        /// </summary>
        public int ShowNeedState;
        /// <summary>
        /// 需要境界等级
        /// </summary>
        public int NeedState;
        /// <summary>
        /// 兑换物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 消耗物品ID（0代表无消耗物品）
        /// </summary>
        public int CostGoodsID;
        /// <summary>
        /// 消耗积分数量
        /// </summary>
        public int CostNumb;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Job = bytes.ReadInt();
            Sex = bytes.ReadInt();
            ShowNeedState = bytes.ReadInt();
            NeedState = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            CostGoodsID = bytes.ReadInt();
            CostNumb = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Job);
            bytes.WriteInt(Sex);
            bytes.WriteInt(ShowNeedState);
            bytes.WriteInt(NeedState);
            bytes.WriteInt(GoodsID);
            bytes.WriteInt(CostGoodsID);
            bytes.WriteInt(CostNumb);
        }
    }

    public class TreasureExchangeTemplateMode : TplMode
    {
        private IList<TreasureExchangeTemplate> mList = null;

        public TreasureExchangeTemplateMode(int step) : base("TreasureExchangeTemplate", typeof(TreasureExchangeTemplate), step) { }

        public TreasureExchangeTemplate this[int id]
        {
            get { return Find<TreasureExchangeTemplate>(id); }
        }

        public TreasureExchangeTemplate Find(int id)
        {
            return Find<TreasureExchangeTemplate>(id);
        }

        public IList<TreasureExchangeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TreasureExchangeTemplate>();
            return mList;
        }
    }

public class NewBuffTemplate : Tpl
    {
        /// <summary>
        /// Buff名称
        /// </summary>
        public string BuffName;
        /// <summary>
        /// 等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 冷却时间(s)
        /// </summary>
        public int CDTime;
        /// <summary>
        /// 概率（万分比）
        /// </summary>
        public int Probability;
        /// <summary>
        /// 客户端展示连击属性
        /// </summary>
        public int Show;
        /// <summary>
        /// 是否显示
        /// </summary>
        public int Visible;
        /// <summary>
        /// 是否计入排行榜，
        /// </summary>
        public int RankList;
        /// <summary>
        /// Buff图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// Buff特效
        /// </summary>
        public int BuffEffect;
        /// <summary>
        /// 1级特效
        /// </summary>
        public int EffectOne;
        /// <summary>
        /// 魔法盾破碎特效
        /// </summary>
        public int BreakEffect;
        /// <summary>
        /// buff变色
        /// </summary>
        public int Colour;
        /// <summary>
        /// Buff类型
        /// </summary>
        public int BuffType;
        /// <summary>
        /// 特效子类型
        /// </summary>
        public int SubType;
        /// <summary>
        /// 持续时间(毫秒)
        /// </summary>
        public long Duration;
        /// <summary>
        /// 间隔时间(毫秒)
        /// </summary>
        public int Interval;
        /// <summary>
        /// 消失特性
        /// </summary>
        public int Feature;
        /// <summary>
        /// 互斥规则（无效）
        /// </summary>
        public int MutexRule;
        /// <summary>
        /// Buff互斥组
        /// </summary>
        public int BuffGroup;
        /// <summary>
        /// 小组
        /// </summary>
        public int MiniGroup;
        /// <summary>
        /// 叠加类型
        /// </summary>
        public int StackType;
        /// <summary>
        /// buff属性叠加层数上限
        /// </summary>
        public int StackNum;
        /// <summary>
        /// 叠加
        /// 判断血量条件
        /// </summary>
        public int StackHealth;
        /// <summary>
        /// buff效果列表
        /// </summary>
        public string BuffList;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Param1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Param2;
        /// <summary>
        /// 参数3
        /// </summary>
        public int Param3;
        /// <summary>
        /// 参数4
        /// </summary>
        public int Param4;
        /// <summary>
        /// Buff描述
        /// </summary>
        public string Summary;
        /// <summary>
        /// 添加buff时是否立即生效
        /// </summary>
        public int ImmediateAction;
        /// <summary>
        /// 技能类型
        /// </summary>
        public int Param5;
        /// <summary>
        /// 参数6
        /// </summary>
        public int Param6;
        /// <summary>
        /// 参数7
        /// </summary>
        public string Param7;
        /// <summary>
        /// 是否判定等级（仅类型4有效）
        /// </summary>
        public int IsLv;
        /// <summary>
        /// 角色头顶特效
        /// </summary>
        public int TopEffect;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            BuffName = bytes.ReadUTF();
            Lv = bytes.ReadInt();
            CDTime = bytes.ReadInt();
            Probability = bytes.ReadInt();
            Show = bytes.ReadInt();
            Visible = bytes.ReadInt();
            RankList = bytes.ReadInt();
            Icon = bytes.ReadInt();
            BuffEffect = bytes.ReadInt();
            EffectOne = bytes.ReadInt();
            BreakEffect = bytes.ReadInt();
            Colour = bytes.ReadInt();
            BuffType = bytes.ReadInt();
            SubType = bytes.ReadInt();
            Duration = bytes.ReadInt64();
            Interval = bytes.ReadInt();
            Feature = bytes.ReadInt();
            MutexRule = bytes.ReadInt();
            BuffGroup = bytes.ReadInt();
            MiniGroup = bytes.ReadInt();
            StackType = bytes.ReadInt();
            StackNum = bytes.ReadInt();
            StackHealth = bytes.ReadInt();
            BuffList = bytes.ReadUTF();
            Param1 = bytes.ReadInt();
            Param2 = bytes.ReadInt();
            Param3 = bytes.ReadInt();
            Param4 = bytes.ReadInt();
            Summary = bytes.ReadUTF();
            ImmediateAction = bytes.ReadInt();
            Param5 = bytes.ReadInt();
            Param6 = bytes.ReadInt();
            Param7 = bytes.ReadUTF();
            IsLv = bytes.ReadInt();
            TopEffect = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(BuffName);
            bytes.WriteInt(Lv);
            bytes.WriteInt(CDTime);
            bytes.WriteInt(Probability);
            bytes.WriteInt(Show);
            bytes.WriteInt(Visible);
            bytes.WriteInt(RankList);
            bytes.WriteInt(Icon);
            bytes.WriteInt(BuffEffect);
            bytes.WriteInt(EffectOne);
            bytes.WriteInt(BreakEffect);
            bytes.WriteInt(Colour);
            bytes.WriteInt(BuffType);
            bytes.WriteInt(SubType);
            bytes.WriteInt64(Duration);
            bytes.WriteInt(Interval);
            bytes.WriteInt(Feature);
            bytes.WriteInt(MutexRule);
            bytes.WriteInt(BuffGroup);
            bytes.WriteInt(MiniGroup);
            bytes.WriteInt(StackType);
            bytes.WriteInt(StackNum);
            bytes.WriteInt(StackHealth);
            bytes.WriteUTF(BuffList);
            bytes.WriteInt(Param1);
            bytes.WriteInt(Param2);
            bytes.WriteInt(Param3);
            bytes.WriteInt(Param4);
            bytes.WriteUTF(Summary);
            bytes.WriteInt(ImmediateAction);
            bytes.WriteInt(Param5);
            bytes.WriteInt(Param6);
            bytes.WriteUTF(Param7);
            bytes.WriteInt(IsLv);
            bytes.WriteInt(TopEffect);
        }
    }

    public class NewBuffTemplateMode : TplMode
    {
        private IList<NewBuffTemplate> mList = null;

        public NewBuffTemplateMode(int step) : base("NewBuffTemplate", typeof(NewBuffTemplate), step) { }

        public NewBuffTemplate this[int id]
        {
            get { return Find<NewBuffTemplate>(id); }
        }

        public NewBuffTemplate Find(int id)
        {
            return Find<NewBuffTemplate>(id);
        }

        public IList<NewBuffTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NewBuffTemplate>();
            return mList;
        }
    }

public class BagUpdateTemplate : Tpl
    {
        /// <summary>
        /// 开启需要在线时间（s）
        /// </summary>
        public int NeedTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedTime = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedTime);
        }
    }

    public class BagUpdateTemplateMode : TplMode
    {
        private IList<BagUpdateTemplate> mList = null;

        public BagUpdateTemplateMode(int step) : base("BagUpdateTemplate", typeof(BagUpdateTemplate), step) { }

        public BagUpdateTemplate this[int id]
        {
            get { return Find<BagUpdateTemplate>(id); }
        }

        public BagUpdateTemplate Find(int id)
        {
            return Find<BagUpdateTemplate>(id);
        }

        public IList<BagUpdateTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<BagUpdateTemplate>();
            return mList;
        }
    }

public class PartStrengthTemplate : Tpl
    {
        /// <summary>
        /// 强化部位
        /// </summary>
        public int Type;
        /// <summary>
        /// 强化等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 境界需求
        /// </summary>
        public int StateLevel;
        /// <summary>
        /// 消耗强化材料ID
        /// </summary>
        public int CostItemID;
        /// <summary>
        /// 消耗强化材料数量
        /// </summary>
        public int CostItemNum;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int CostMoneyNum;
        /// <summary>
        /// 显示强化成功率
        /// </summary>
        public int ProbabilityShow;
        /// <summary>
        /// 真实强化成功率
        /// </summary>
        public int Probability;
        /// <summary>
        /// 必定成功花费货币类型
        /// </summary>
        public int MustSucceedMoneyType;
        /// <summary>
        /// 必定成功花费货币数量
        /// </summary>
        public int MustSucceedMoneyNum;
        /// <summary>
        /// 失败掉级
        /// </summary>
        public int LevelDrop;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 基础装备最小物理攻击（万分比）
        /// </summary>
        public int EBMinPhysicAtkPencent;
        /// <summary>
        /// 基础装备最大物理攻击（万分比）
        /// </summary>
        public int EBMaxPhysicAtkPencent;
        /// <summary>
        /// 基础装备最小魔法攻击（万分比）
        /// </summary>
        public int EBMinMagicAtkPencent;
        /// <summary>
        /// 基础装备最大魔法攻击（万分比）
        /// </summary>
        public int EBMaxMagicAtkPencent;
        /// <summary>
        /// 基础装备最小道术攻击（万分比）
        /// </summary>
        public int EBMinTaoistAtkPencent;
        /// <summary>
        /// 基础装备最大道术攻击（万分比）
        /// </summary>
        public int EBMaxTaoistAtkPencent;
        /// <summary>
        /// 基础装备攻击加成（万分比）
        /// </summary>
        public int EquipBaseAtkPencent;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击伤害
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对怪减免
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK免伤
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 伤害加成
        /// </summary>
        public int AddHurtPercent;
        /// <summary>
        /// 伤害减免
        /// </summary>
        public int ReduceHurtPercent;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 真实伤害抵抗
        /// </summary>
        public int RealDiscount;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 吸血
        /// </summary>
        public int Vampire;
        /// <summary>
        /// 提示
        /// </summary>
        public string Tips;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Lv = bytes.ReadInt();
            StateLevel = bytes.ReadInt();
            CostItemID = bytes.ReadInt();
            CostItemNum = bytes.ReadInt();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
            ProbabilityShow = bytes.ReadInt();
            Probability = bytes.ReadInt();
            MustSucceedMoneyType = bytes.ReadInt();
            MustSucceedMoneyNum = bytes.ReadInt();
            LevelDrop = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            EBMinPhysicAtkPencent = bytes.ReadInt();
            EBMaxPhysicAtkPencent = bytes.ReadInt();
            EBMinMagicAtkPencent = bytes.ReadInt();
            EBMaxMagicAtkPencent = bytes.ReadInt();
            EBMinTaoistAtkPencent = bytes.ReadInt();
            EBMaxTaoistAtkPencent = bytes.ReadInt();
            EquipBaseAtkPencent = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            AddHurtPercent = bytes.ReadInt();
            ReduceHurtPercent = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RealDiscount = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            Vampire = bytes.ReadInt();
            Tips = bytes.ReadUTF();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Lv);
            bytes.WriteInt(StateLevel);
            bytes.WriteInt(CostItemID);
            bytes.WriteInt(CostItemNum);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
            bytes.WriteInt(ProbabilityShow);
            bytes.WriteInt(Probability);
            bytes.WriteInt(MustSucceedMoneyType);
            bytes.WriteInt(MustSucceedMoneyNum);
            bytes.WriteInt(LevelDrop);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(EBMinPhysicAtkPencent);
            bytes.WriteInt(EBMaxPhysicAtkPencent);
            bytes.WriteInt(EBMinMagicAtkPencent);
            bytes.WriteInt(EBMaxMagicAtkPencent);
            bytes.WriteInt(EBMinTaoistAtkPencent);
            bytes.WriteInt(EBMaxTaoistAtkPencent);
            bytes.WriteInt(EquipBaseAtkPencent);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(AddHurtPercent);
            bytes.WriteInt(ReduceHurtPercent);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RealDiscount);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(Vampire);
            bytes.WriteUTF(Tips);
            bytes.WriteInt(NoticeID);
        }
    }

    public class PartStrengthTemplateMode : TplMode
    {
        private IList<PartStrengthTemplate> mList = null;

        public PartStrengthTemplateMode(int step) : base("PartStrengthTemplate", typeof(PartStrengthTemplate), step) { }

        public PartStrengthTemplate this[int id]
        {
            get { return Find<PartStrengthTemplate>(id); }
        }

        public PartStrengthTemplate Find(int id)
        {
            return Find<PartStrengthTemplate>(id);
        }

        public IList<PartStrengthTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PartStrengthTemplate>();
            return mList;
        }
    }

public class EquipBaWangListTemplate : Tpl
    {
        /// <summary>
        /// 部位类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 阶数
        /// </summary>
        public int Grade;
        /// <summary>
        /// 物品id
        /// </summary>
        public int NextID;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 合成ID
        /// </summary>
        public int CompoundID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Grade = bytes.ReadInt();
            NextID = bytes.ReadInt();
            Name = bytes.ReadUTF();
            CompoundID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Grade);
            bytes.WriteInt(NextID);
            bytes.WriteUTF(Name);
            bytes.WriteInt(CompoundID);
        }
    }

    public class EquipBaWangListTemplateMode : TplMode
    {
        private IList<EquipBaWangListTemplate> mList = null;

        public EquipBaWangListTemplateMode(int step) : base("EquipBaWangListTemplate", typeof(EquipBaWangListTemplate), step) { }

        public EquipBaWangListTemplate this[int id]
        {
            get { return Find<EquipBaWangListTemplate>(id); }
        }

        public EquipBaWangListTemplate Find(int id)
        {
            return Find<EquipBaWangListTemplate>(id);
        }

        public IList<EquipBaWangListTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<EquipBaWangListTemplate>();
            return mList;
        }
    }

public class WarehouseConfigTemplate : Tpl
    {
        /// <summary>
        /// 单页格子数量
        /// </summary>
        public int Number;
        /// <summary>
        /// 默认开启格子数
        /// </summary>
        public int Default;
        /// <summary>
        /// 页签购买货币
        /// </summary>
        public int Decimal;
        /// <summary>
        /// 页签购买价格
        /// </summary>
        public int Price;
        /// <summary>
        /// 格子开启所需道具
        /// </summary>
        public int ItemID;
        /// <summary>
        /// 格子开启所需数量
        /// </summary>
        public int ItemNumber;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Number = bytes.ReadInt();
            Default = bytes.ReadInt();
            Decimal = bytes.ReadInt();
            Price = bytes.ReadInt();
            ItemID = bytes.ReadInt();
            ItemNumber = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Number);
            bytes.WriteInt(Default);
            bytes.WriteInt(Decimal);
            bytes.WriteInt(Price);
            bytes.WriteInt(ItemID);
            bytes.WriteInt(ItemNumber);
        }
    }

    public class WarehouseConfigTemplateMode : TplMode
    {
        private IList<WarehouseConfigTemplate> mList = null;

        public WarehouseConfigTemplateMode(int step) : base("WarehouseConfigTemplate", typeof(WarehouseConfigTemplate), step) { }

        public WarehouseConfigTemplate this[int id]
        {
            get { return Find<WarehouseConfigTemplate>(id); }
        }

        public WarehouseConfigTemplate Find(int id)
        {
            return Find<WarehouseConfigTemplate>(id);
        }

        public IList<WarehouseConfigTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WarehouseConfigTemplate>();
            return mList;
        }
    }

public class LegendPropertyTemplate : Tpl
    {
        /// <summary>
        /// 战士生命
        /// </summary>
        public int MaxHP;
        /// <summary>
        /// 法师生命
        /// </summary>
        public int MaxHP2;
        /// <summary>
        /// 道士生命
        /// </summary>
        public int MaxHP3;
        /// <summary>
        /// 最大生命值需要魂值
        /// </summary>
        public int HPNeedSoul;
        /// <summary>
        /// 最小攻击力
        /// </summary>
        public int MinAtk;
        /// <summary>
        /// 最大攻击力
        /// </summary>
        public int MaxAtk;
        /// <summary>
        /// 攻击力需要魂值
        /// </summary>
        public int AtkNeedSoul;
        /// <summary>
        /// 最大内力值
        /// </summary>
        public int MaxSP;
        /// <summary>
        /// 内力值需要魂值
        /// </summary>
        public int SPNeedSoul;
        /// <summary>
        /// 最小物理防御力
        /// </summary>
        public int MinPhyDef;
        /// <summary>
        /// 最大物理防御力
        /// </summary>
        public int MaxPhyDef;
        /// <summary>
        /// 防御力需要魂值
        /// </summary>
        public int PhyNeedSoul;
        /// <summary>
        /// 最小魔法防御力
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御力
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 魔法防御力需要魂值
        /// </summary>
        public int MagicNeedDef;
        /// <summary>
        /// 对怪伤害加成（万分比）
        /// </summary>
        public int MonsterDamage;
        /// <summary>
        /// 对怪伤害需要魂值
        /// </summary>
        public int MonsterDamageNeedSoul;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MaxHP = bytes.ReadInt();
            MaxHP2 = bytes.ReadInt();
            MaxHP3 = bytes.ReadInt();
            HPNeedSoul = bytes.ReadInt();
            MinAtk = bytes.ReadInt();
            MaxAtk = bytes.ReadInt();
            AtkNeedSoul = bytes.ReadInt();
            MaxSP = bytes.ReadInt();
            SPNeedSoul = bytes.ReadInt();
            MinPhyDef = bytes.ReadInt();
            MaxPhyDef = bytes.ReadInt();
            PhyNeedSoul = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            MagicNeedDef = bytes.ReadInt();
            MonsterDamage = bytes.ReadInt();
            MonsterDamageNeedSoul = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MaxHP);
            bytes.WriteInt(MaxHP2);
            bytes.WriteInt(MaxHP3);
            bytes.WriteInt(HPNeedSoul);
            bytes.WriteInt(MinAtk);
            bytes.WriteInt(MaxAtk);
            bytes.WriteInt(AtkNeedSoul);
            bytes.WriteInt(MaxSP);
            bytes.WriteInt(SPNeedSoul);
            bytes.WriteInt(MinPhyDef);
            bytes.WriteInt(MaxPhyDef);
            bytes.WriteInt(PhyNeedSoul);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(MagicNeedDef);
            bytes.WriteInt(MonsterDamage);
            bytes.WriteInt(MonsterDamageNeedSoul);
        }
    }

    public class LegendPropertyTemplateMode : TplMode
    {
        private IList<LegendPropertyTemplate> mList = null;

        public LegendPropertyTemplateMode(int step) : base("LegendPropertyTemplate", typeof(LegendPropertyTemplate), step) { }

        public LegendPropertyTemplate this[int id]
        {
            get { return Find<LegendPropertyTemplate>(id); }
        }

        public LegendPropertyTemplate Find(int id)
        {
            return Find<LegendPropertyTemplate>(id);
        }

        public IList<LegendPropertyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LegendPropertyTemplate>();
            return mList;
        }
    }

public class LegendSoulTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 下一等级TID
        /// </summary>
        public int NextLevelTid;
        /// <summary>
        /// 下一阶需要总等级
        /// </summary>
        public int NextLevelNeed;
        /// <summary>
        /// 花费货币类型（1元宝，2绑定元宝，3绑定金币，4金币）
        /// </summary>
        public int CostType;
        /// <summary>
        /// 花费货币数额
        /// </summary>
        public int CostValue;
        /// <summary>
        /// 花费传奇之魂数值
        /// </summary>
        public int CostSoulValue;
        /// <summary>
        /// 最高生命等级
        /// </summary>
        public int MaxHpLv;
        /// <summary>
        /// 最高攻击等级
        /// </summary>
        public int MaxAtkLv;
        /// <summary>
        /// 最高内力等级
        /// </summary>
        public int MaxSpLv;
        /// <summary>
        /// 最高物理防御等级
        /// </summary>
        public int MaxPhyDefLv;
        /// <summary>
        /// 最高魔法防御等级
        /// </summary>
        public int MaxMagicDefLv;
        /// <summary>
        /// 对怪伤害等级
        /// </summary>
        public int MaxMonsterDamage;
        /// <summary>
        /// 美术资源ID
        /// </summary>
        public int AssetID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            NextLevelTid = bytes.ReadInt();
            NextLevelNeed = bytes.ReadInt();
            CostType = bytes.ReadInt();
            CostValue = bytes.ReadInt();
            CostSoulValue = bytes.ReadInt();
            MaxHpLv = bytes.ReadInt();
            MaxAtkLv = bytes.ReadInt();
            MaxSpLv = bytes.ReadInt();
            MaxPhyDefLv = bytes.ReadInt();
            MaxMagicDefLv = bytes.ReadInt();
            MaxMonsterDamage = bytes.ReadInt();
            AssetID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(NextLevelTid);
            bytes.WriteInt(NextLevelNeed);
            bytes.WriteInt(CostType);
            bytes.WriteInt(CostValue);
            bytes.WriteInt(CostSoulValue);
            bytes.WriteInt(MaxHpLv);
            bytes.WriteInt(MaxAtkLv);
            bytes.WriteInt(MaxSpLv);
            bytes.WriteInt(MaxPhyDefLv);
            bytes.WriteInt(MaxMagicDefLv);
            bytes.WriteInt(MaxMonsterDamage);
            bytes.WriteInt(AssetID);
        }
    }

    public class LegendSoulTemplateMode : TplMode
    {
        private IList<LegendSoulTemplate> mList = null;

        public LegendSoulTemplateMode(int step) : base("LegendSoulTemplate", typeof(LegendSoulTemplate), step) { }

        public LegendSoulTemplate this[int id]
        {
            get { return Find<LegendSoulTemplate>(id); }
        }

        public LegendSoulTemplate Find(int id)
        {
            return Find<LegendSoulTemplate>(id);
        }

        public IList<LegendSoulTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LegendSoulTemplate>();
            return mList;
        }
    }

public class RechargeTemplate : Tpl
    {
        /// <summary>
        /// 充值钱数
        /// </summary>
        public int RechargeMoney;
        /// <summary>
        /// 获得钻石
        /// </summary>
        public int AcquisitionGameMoney;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RechargeMoney = bytes.ReadInt();
            AcquisitionGameMoney = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(RechargeMoney);
            bytes.WriteInt(AcquisitionGameMoney);
        }
    }

    public class RechargeTemplateMode : TplMode
    {
        private IList<RechargeTemplate> mList = null;

        public RechargeTemplateMode(int step) : base("RechargeTemplate", typeof(RechargeTemplate), step) { }

        public RechargeTemplate this[int id]
        {
            get { return Find<RechargeTemplate>(id); }
        }

        public RechargeTemplate Find(int id)
        {
            return Find<RechargeTemplate>(id);
        }

        public IList<RechargeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RechargeTemplate>();
            return mList;
        }
    }

public class RechargeAwardsTemplate : Tpl
    {
        /// <summary>
        /// 充值档位ID
        /// </summary>
        public int RechargeID;
        /// <summary>
        /// 首充奖励类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 月份
        /// </summary>
        public int Month;
        /// <summary>
        /// 额外钻石数量
        /// </summary>
        public int ExtraMoneyNum;
        /// <summary>
        /// 额外奖励物品组
        /// </summary>
        public string ExtraItems;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RechargeID = bytes.ReadInt();
            Type = bytes.ReadInt();
            Month = bytes.ReadInt();
            ExtraMoneyNum = bytes.ReadInt();
            ExtraItems = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(RechargeID);
            bytes.WriteInt(Type);
            bytes.WriteInt(Month);
            bytes.WriteInt(ExtraMoneyNum);
            bytes.WriteUTF(ExtraItems);
        }
    }

    public class RechargeAwardsTemplateMode : TplMode
    {
        private IList<RechargeAwardsTemplate> mList = null;

        public RechargeAwardsTemplateMode(int step) : base("RechargeAwardsTemplate", typeof(RechargeAwardsTemplate), step) { }

        public RechargeAwardsTemplate this[int id]
        {
            get { return Find<RechargeAwardsTemplate>(id); }
        }

        public RechargeAwardsTemplate Find(int id)
        {
            return Find<RechargeAwardsTemplate>(id);
        }

        public IList<RechargeAwardsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RechargeAwardsTemplate>();
            return mList;
        }
    }

public class CreatRoleGiftTemplate : Tpl
    {
        /// <summary>
        /// 装备战士男
        /// </summary>
        public string Item1;
        /// <summary>
        /// 装备战士女
        /// </summary>
        public string Item2;
        /// <summary>
        /// 装备法师男
        /// </summary>
        public string Item3;
        /// <summary>
        /// 装备法师女
        /// </summary>
        public string Item4;
        /// <summary>
        /// 装备道士男
        /// </summary>
        public string Item5;
        /// <summary>
        /// 装备道士女
        /// </summary>
        public string Item6;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Item1 = bytes.ReadUTF();
            Item2 = bytes.ReadUTF();
            Item3 = bytes.ReadUTF();
            Item4 = bytes.ReadUTF();
            Item5 = bytes.ReadUTF();
            Item6 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Item1);
            bytes.WriteUTF(Item2);
            bytes.WriteUTF(Item3);
            bytes.WriteUTF(Item4);
            bytes.WriteUTF(Item5);
            bytes.WriteUTF(Item6);
        }
    }

    public class CreatRoleGiftTemplateMode : TplMode
    {
        private IList<CreatRoleGiftTemplate> mList = null;

        public CreatRoleGiftTemplateMode(int step) : base("CreatRoleGiftTemplate", typeof(CreatRoleGiftTemplate), step) { }

        public CreatRoleGiftTemplate this[int id]
        {
            get { return Find<CreatRoleGiftTemplate>(id); }
        }

        public CreatRoleGiftTemplate Find(int id)
        {
            return Find<CreatRoleGiftTemplate>(id);
        }

        public IList<CreatRoleGiftTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CreatRoleGiftTemplate>();
            return mList;
        }
    }

public class AchievementTemplate : Tpl
    {
        /// <summary>
        /// 标题
        /// </summary>
        public string Title;
        /// <summary>
        /// 名称1
        /// </summary>
        public string Name1;
        /// <summary>
        /// 名称2
        /// </summary>
        public string Name2;
        /// <summary>
        /// 名称3
        /// </summary>
        public string Name3;
        /// <summary>
        /// 子类型
        /// </summary>
        public int subType;
        /// <summary>
        /// 子类型名称
        /// </summary>
        public string subTypeName;
        /// <summary>
        /// 描述
        /// </summary>
        public string Description;
        /// <summary>
        /// 补充描述
        /// </summary>
        public string SupplementDesc;
        /// <summary>
        /// 页签
        /// </summary>
        public int Tab;
        /// <summary>
        /// 页签名
        /// </summary>
        public string Tabname;
        /// <summary>
        /// UI类型
        /// </summary>
        public int UIType;
        /// <summary>
        /// 隐藏成就
        /// </summary>
        public int IsHidden;
        /// <summary>
        /// Icon
        /// </summary>
        public int Icon;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 条件
        /// </summary>
        public int Time;
        /// <summary>
        /// 附加条件1
        /// </summary>
        public string AttachTime;
        /// <summary>
        /// 模式
        /// </summary>
        public int Mold;
        /// <summary>
        /// 成就积分
        /// </summary>
        public int score_award;
        /// <summary>
        /// 完成次数
        /// </summary>
        public int AchieveTiems;
        /// <summary>
        /// 开始时间
        /// </summary>
        public int StartTime;
        /// <summary>
        /// 持续时间
        /// </summary>
        public int DelayDay;
        /// <summary>
        /// 展示道具id
        /// </summary>
        public int ShowID;
        /// <summary>
        /// 可领取奖励等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 可领取奖励境界
        /// </summary>
        public int State;
        /// <summary>
        /// 奖励道具
        /// </summary>
        public string Award;
        /// <summary>
        /// 绑定金币（废弃）
        /// </summary>
        public int money_award;
        /// <summary>
        /// 对应链接
        /// </summary>
        public string Link;
        /// <summary>
        /// 完成公告
        /// </summary>
        public int Notice;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBinding;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Title = bytes.ReadUTF();
            Name1 = bytes.ReadUTF();
            Name2 = bytes.ReadUTF();
            Name3 = bytes.ReadUTF();
            subType = bytes.ReadInt();
            subTypeName = bytes.ReadUTF();
            Description = bytes.ReadUTF();
            SupplementDesc = bytes.ReadUTF();
            Tab = bytes.ReadInt();
            Tabname = bytes.ReadUTF();
            UIType = bytes.ReadInt();
            IsHidden = bytes.ReadInt();
            Icon = bytes.ReadInt();
            Type = bytes.ReadInt();
            Time = bytes.ReadInt();
            AttachTime = bytes.ReadUTF();
            Mold = bytes.ReadInt();
            score_award = bytes.ReadInt();
            AchieveTiems = bytes.ReadInt();
            StartTime = bytes.ReadInt();
            DelayDay = bytes.ReadInt();
            ShowID = bytes.ReadInt();
            Lv = bytes.ReadInt();
            State = bytes.ReadInt();
            Award = bytes.ReadUTF();
            money_award = bytes.ReadInt();
            Link = bytes.ReadUTF();
            Notice = bytes.ReadInt();
            IsBinding = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Title);
            bytes.WriteUTF(Name1);
            bytes.WriteUTF(Name2);
            bytes.WriteUTF(Name3);
            bytes.WriteInt(subType);
            bytes.WriteUTF(subTypeName);
            bytes.WriteUTF(Description);
            bytes.WriteUTF(SupplementDesc);
            bytes.WriteInt(Tab);
            bytes.WriteUTF(Tabname);
            bytes.WriteInt(UIType);
            bytes.WriteInt(IsHidden);
            bytes.WriteInt(Icon);
            bytes.WriteInt(Type);
            bytes.WriteInt(Time);
            bytes.WriteUTF(AttachTime);
            bytes.WriteInt(Mold);
            bytes.WriteInt(score_award);
            bytes.WriteInt(AchieveTiems);
            bytes.WriteInt(StartTime);
            bytes.WriteInt(DelayDay);
            bytes.WriteInt(ShowID);
            bytes.WriteInt(Lv);
            bytes.WriteInt(State);
            bytes.WriteUTF(Award);
            bytes.WriteInt(money_award);
            bytes.WriteUTF(Link);
            bytes.WriteInt(Notice);
            bytes.WriteInt(IsBinding);
        }
    }

    public class AchievementTemplateMode : TplMode
    {
        private IList<AchievementTemplate> mList = null;

        public AchievementTemplateMode(int step) : base("AchievementTemplate", typeof(AchievementTemplate), step) { }

        public AchievementTemplate this[int id]
        {
            get { return Find<AchievementTemplate>(id); }
        }

        public AchievementTemplate Find(int id)
        {
            return Find<AchievementTemplate>(id);
        }

        public IList<AchievementTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AchievementTemplate>();
            return mList;
        }
    }

public class GrowthPlanTemplate : Tpl
    {
        /// <summary>
        /// 职业0-通用，1-战士，2-法师，3-道士
        /// </summary>
        public int Job;
        /// <summary>
        /// 判定条件1-等级，2-境界等级
        /// </summary>
        public int NeedType;
        /// <summary>
        /// 
        /// </summary>
        public int NeedValue;
        /// <summary>
        /// 奖励元宝数
        /// </summary>
        public int AwardMoney;
        /// <summary>
        /// 奖励物品
        /// </summary>
        public string AwardItem;
        /// <summary>
        /// 领奖结束日期（开服天数）
        /// </summary>
        public int EndTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            NeedType = bytes.ReadInt();
            NeedValue = bytes.ReadInt();
            AwardMoney = bytes.ReadInt();
            AwardItem = bytes.ReadUTF();
            EndTime = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(NeedType);
            bytes.WriteInt(NeedValue);
            bytes.WriteInt(AwardMoney);
            bytes.WriteUTF(AwardItem);
            bytes.WriteInt(EndTime);
        }
    }

    public class GrowthPlanTemplateMode : TplMode
    {
        private IList<GrowthPlanTemplate> mList = null;

        public GrowthPlanTemplateMode(int step) : base("GrowthPlanTemplate", typeof(GrowthPlanTemplate), step) { }

        public GrowthPlanTemplate this[int id]
        {
            get { return Find<GrowthPlanTemplate>(id); }
        }

        public GrowthPlanTemplate Find(int id)
        {
            return Find<GrowthPlanTemplate>(id);
        }

        public IList<GrowthPlanTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GrowthPlanTemplate>();
            return mList;
        }
    }

public class CsTemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int LV;
        /// <summary>
        /// 境界等级
        /// </summary>
        public int JJlv;
        /// <summary>
        /// 内功等级
        /// </summary>
        public int SpLv;
        /// <summary>
        /// 翅膀等级
        /// </summary>
        public int Wing;
        /// <summary>
        /// 龙血等级
        /// </summary>
        public int Long1;
        /// <summary>
        /// 龙鳞等级
        /// </summary>
        public int Long2;
        /// <summary>
        /// 龙晶等级
        /// </summary>
        public int Long3;
        /// <summary>
        /// 龙元等级
        /// </summary>
        public int Long4;
        /// <summary>
        /// 龙魄等级
        /// </summary>
        public int Long5;
        /// <summary>
        /// 官职
        /// </summary>
        public int Guanzhi;
        /// <summary>
        /// 官印
        /// </summary>
        public int Guanyi;
        /// <summary>
        /// 神器盒子
        /// </summary>
        public int Shenqihezi;
        /// <summary>
        /// 威名
        /// </summary>
        public int WmTid;
        /// <summary>
        /// 帮派战旗
        /// </summary>
        public int Zhanqi;
        /// <summary>
        /// TID|lv,TID|lv
        /// </summary>
        public string Jingling;
        /// <summary>
        /// 国家宝藏
        /// </summary>
        public string Baozang;
        /// <summary>
        /// 装备战士男
        /// </summary>
        public string Equip1;
        /// <summary>
        /// 装备战士女
        /// </summary>
        public string Equip2;
        /// <summary>
        /// 装备法师男
        /// </summary>
        public string Equip3;
        /// <summary>
        /// 装备法师女
        /// </summary>
        public string Equip4;
        /// <summary>
        /// 装备道士男
        /// </summary>
        public string Equip5;
        /// <summary>
        /// 装备道士女
        /// </summary>
        public string Equip6;
        /// <summary>
        /// 强化等级
        /// </summary>
        public int Strength;
        /// <summary>
        /// 技能ID|技能ID|技能ID
        /// </summary>
        public string SkillJob1;
        /// <summary>
        /// 技能ID|技能ID|技能ID
        /// </summary>
        public string SkillJob2;
        /// <summary>
        /// 技能ID|技能ID|技能ID
        /// </summary>
        public string SkillJob3;
        /// <summary>
        /// 通天塔层数
        /// </summary>
        public int TttTid;
        /// <summary>
        /// 战士男
        /// </summary>
        public string Item1;
        /// <summary>
        /// 战士女
        /// </summary>
        public string Item2;
        /// <summary>
        /// 法师男
        /// </summary>
        public string Item3;
        /// <summary>
        /// 法师女
        /// </summary>
        public string Item4;
        /// <summary>
        /// 道士男
        /// </summary>
        public string Item5;
        /// <summary>
        /// 道士女
        /// </summary>
        public string Item6;
        /// <summary>
        /// 货币
        /// </summary>
        public string Money;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LV = bytes.ReadInt();
            JJlv = bytes.ReadInt();
            SpLv = bytes.ReadInt();
            Wing = bytes.ReadInt();
            Long1 = bytes.ReadInt();
            Long2 = bytes.ReadInt();
            Long3 = bytes.ReadInt();
            Long4 = bytes.ReadInt();
            Long5 = bytes.ReadInt();
            Guanzhi = bytes.ReadInt();
            Guanyi = bytes.ReadInt();
            Shenqihezi = bytes.ReadInt();
            WmTid = bytes.ReadInt();
            Zhanqi = bytes.ReadInt();
            Jingling = bytes.ReadUTF();
            Baozang = bytes.ReadUTF();
            Equip1 = bytes.ReadUTF();
            Equip2 = bytes.ReadUTF();
            Equip3 = bytes.ReadUTF();
            Equip4 = bytes.ReadUTF();
            Equip5 = bytes.ReadUTF();
            Equip6 = bytes.ReadUTF();
            Strength = bytes.ReadInt();
            SkillJob1 = bytes.ReadUTF();
            SkillJob2 = bytes.ReadUTF();
            SkillJob3 = bytes.ReadUTF();
            TttTid = bytes.ReadInt();
            Item1 = bytes.ReadUTF();
            Item2 = bytes.ReadUTF();
            Item3 = bytes.ReadUTF();
            Item4 = bytes.ReadUTF();
            Item5 = bytes.ReadUTF();
            Item6 = bytes.ReadUTF();
            Money = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(LV);
            bytes.WriteInt(JJlv);
            bytes.WriteInt(SpLv);
            bytes.WriteInt(Wing);
            bytes.WriteInt(Long1);
            bytes.WriteInt(Long2);
            bytes.WriteInt(Long3);
            bytes.WriteInt(Long4);
            bytes.WriteInt(Long5);
            bytes.WriteInt(Guanzhi);
            bytes.WriteInt(Guanyi);
            bytes.WriteInt(Shenqihezi);
            bytes.WriteInt(WmTid);
            bytes.WriteInt(Zhanqi);
            bytes.WriteUTF(Jingling);
            bytes.WriteUTF(Baozang);
            bytes.WriteUTF(Equip1);
            bytes.WriteUTF(Equip2);
            bytes.WriteUTF(Equip3);
            bytes.WriteUTF(Equip4);
            bytes.WriteUTF(Equip5);
            bytes.WriteUTF(Equip6);
            bytes.WriteInt(Strength);
            bytes.WriteUTF(SkillJob1);
            bytes.WriteUTF(SkillJob2);
            bytes.WriteUTF(SkillJob3);
            bytes.WriteInt(TttTid);
            bytes.WriteUTF(Item1);
            bytes.WriteUTF(Item2);
            bytes.WriteUTF(Item3);
            bytes.WriteUTF(Item4);
            bytes.WriteUTF(Item5);
            bytes.WriteUTF(Item6);
            bytes.WriteUTF(Money);
        }
    }

    public class CsTemplateMode : TplMode
    {
        private IList<CsTemplate> mList = null;

        public CsTemplateMode(int step) : base("CsTemplate", typeof(CsTemplate), step) { }

        public CsTemplate this[int id]
        {
            get { return Find<CsTemplate>(id); }
        }

        public CsTemplate Find(int id)
        {
            return Find<CsTemplate>(id);
        }

        public IList<CsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CsTemplate>();
            return mList;
        }
    }

public class HappyGuessTemplate : Tpl
    {
        /// <summary>
        /// 任务描述
        /// </summary>
        public string name;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 需要开服天数
        /// </summary>
        public int NeedOpenDay;
        /// <summary>
        /// 完成次数
        /// </summary>
        public int Count;
        /// <summary>
        /// 进入地图ID
        /// </summary>
        public int Data1;
        /// <summary>
        /// 数据2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 对应链接
        /// </summary>
        public string Link;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            NeedOpenDay = bytes.ReadInt();
            Count = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Link = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(name);
            bytes.WriteInt(Type);
            bytes.WriteInt(NeedOpenDay);
            bytes.WriteInt(Count);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteUTF(Link);
        }
    }

    public class HappyGuessTemplateMode : TplMode
    {
        private IList<HappyGuessTemplate> mList = null;

        public HappyGuessTemplateMode(int step) : base("HappyGuessTemplate", typeof(HappyGuessTemplate), step) { }

        public HappyGuessTemplate this[int id]
        {
            get { return Find<HappyGuessTemplate>(id); }
        }

        public HappyGuessTemplate Find(int id)
        {
            return Find<HappyGuessTemplate>(id);
        }

        public IList<HappyGuessTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<HappyGuessTemplate>();
            return mList;
        }
    }

public class TitleTemplate : Tpl
    {
        /// <summary>
        /// 称号名
        /// </summary>
        public string Name;
        /// <summary>
        /// 美术资源ID
        /// </summary>
        public int Icon;
        /// <summary>
        /// 称号类型
        /// </summary>
        public int Column;
        /// <summary>
        /// 平台显示
        /// </summary>
        public int Platform;
        /// <summary>
        /// 剩余时间描述
        /// </summary>
        public string TimeDescribe;
        /// <summary>
        /// 星级
        /// </summary>
        public int Star;
        /// <summary>
        /// 升星花费
        /// </summary>
        public string UpCost;
        /// <summary>
        /// 升星概率
        /// </summary>
        public int UpProbability;
        /// <summary>
        /// 最大星级
        /// </summary>
        public int MaxStar;
        /// <summary>
        /// 是否激活显示
        /// </summary>
        public int IsActivationShow;
        /// <summary>
        /// 星级归属显示
        /// </summary>
        public int BelongStarShow;
        /// <summary>
        /// 升星归属
        /// </summary>
        public int UpBelong;
        /// <summary>
        /// 获得方式
        /// </summary>
        public string Display;
        /// <summary>
        /// 来源
        /// </summary>
        public int Approach;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 数值
        /// </summary>
        public int Number;
        /// <summary>
        /// 属性描述
        /// </summary>
        public string Lore;
        /// <summary>
        /// 文本描述
        /// </summary>
        public string TextLore;
        /// <summary>
        /// 称号玩家上线播报
        /// </summary>
        public int TitleBroadCast;
        /// <summary>
        /// 是否非道具获得
        /// </summary>
        public int IsForever;
        /// <summary>
        /// 战士生命
        /// </summary>
        public int HP1;
        /// <summary>
        /// 法师生命
        /// </summary>
        public int HP2;
        /// <summary>
        /// 道士生命
        /// </summary>
        public int HP3;
        /// <summary>
        /// 战士魔法
        /// </summary>
        public int MP1;
        /// <summary>
        /// 法师魔法
        /// </summary>
        public int MP2;
        /// <summary>
        /// 道士魔法
        /// </summary>
        public int MP3;
        /// <summary>
        /// 神盾
        /// </summary>
        public int Energy;
        /// <summary>
        /// 攻击min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 攻击max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 攻击min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 攻击max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 攻击min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 攻击max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 防御min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 防御max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 防御min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 防御max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 攻击速度
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 攻击速度加成万分比
        /// </summary>
        public int AttackSpeedPct;
        /// <summary>
        /// 对怪伤害增加（万分比）
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// PK增伤（万分比）
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK减伤（万分比）
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 角色附加等级
        /// </summary>
        public int RoleAddLv;
        /// <summary>
        /// 打怪爆率
        /// </summary>
        public int BossDiaoluo;
        /// <summary>
        /// 经验增幅
        /// </summary>
        public int ExperienceGain;
        /// <summary>
        /// 是否自动使用
        /// </summary>
        public int AutoUse;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Icon = bytes.ReadInt();
            Column = bytes.ReadInt();
            Platform = bytes.ReadInt();
            TimeDescribe = bytes.ReadUTF();
            Star = bytes.ReadInt();
            UpCost = bytes.ReadUTF();
            UpProbability = bytes.ReadInt();
            MaxStar = bytes.ReadInt();
            IsActivationShow = bytes.ReadInt();
            BelongStarShow = bytes.ReadInt();
            UpBelong = bytes.ReadInt();
            Display = bytes.ReadUTF();
            Approach = bytes.ReadInt();
            Type = bytes.ReadInt();
            Number = bytes.ReadInt();
            Lore = bytes.ReadUTF();
            TextLore = bytes.ReadUTF();
            TitleBroadCast = bytes.ReadInt();
            IsForever = bytes.ReadInt();
            HP1 = bytes.ReadInt();
            HP2 = bytes.ReadInt();
            HP3 = bytes.ReadInt();
            MP1 = bytes.ReadInt();
            MP2 = bytes.ReadInt();
            MP3 = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            AttackSpeedPct = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            RoleAddLv = bytes.ReadInt();
            BossDiaoluo = bytes.ReadInt();
            ExperienceGain = bytes.ReadInt();
            AutoUse = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Icon);
            bytes.WriteInt(Column);
            bytes.WriteInt(Platform);
            bytes.WriteUTF(TimeDescribe);
            bytes.WriteInt(Star);
            bytes.WriteUTF(UpCost);
            bytes.WriteInt(UpProbability);
            bytes.WriteInt(MaxStar);
            bytes.WriteInt(IsActivationShow);
            bytes.WriteInt(BelongStarShow);
            bytes.WriteInt(UpBelong);
            bytes.WriteUTF(Display);
            bytes.WriteInt(Approach);
            bytes.WriteInt(Type);
            bytes.WriteInt(Number);
            bytes.WriteUTF(Lore);
            bytes.WriteUTF(TextLore);
            bytes.WriteInt(TitleBroadCast);
            bytes.WriteInt(IsForever);
            bytes.WriteInt(HP1);
            bytes.WriteInt(HP2);
            bytes.WriteInt(HP3);
            bytes.WriteInt(MP1);
            bytes.WriteInt(MP2);
            bytes.WriteInt(MP3);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(AttackSpeedPct);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(RoleAddLv);
            bytes.WriteInt(BossDiaoluo);
            bytes.WriteInt(ExperienceGain);
            bytes.WriteInt(AutoUse);
        }
    }

    public class TitleTemplateMode : TplMode
    {
        private IList<TitleTemplate> mList = null;

        public TitleTemplateMode(int step) : base("TitleTemplate", typeof(TitleTemplate), step) { }

        public TitleTemplate this[int id]
        {
            get { return Find<TitleTemplate>(id); }
        }

        public TitleTemplate Find(int id)
        {
            return Find<TitleTemplate>(id);
        }

        public IList<TitleTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TitleTemplate>();
            return mList;
        }
    }

public class TextTipsTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 类型（0弹窗提示,1鼠标旁提示）
        /// </summary>
        public int Type;
        /// <summary>
        /// 事件名
        /// </summary>
        public string eventName;
        /// <summary>
        /// 事件提示码
        /// </summary>
        public int Result;
        /// <summary>
        /// Type类型下的第几类（类型相同的Set大的兼容Set小的）
        /// </summary>
        public string content;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            eventName = bytes.ReadUTF();
            Result = bytes.ReadInt();
            content = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteUTF(eventName);
            bytes.WriteInt(Result);
            bytes.WriteUTF(content);
        }
    }

    public class TextTipsTemplateMode : TplMode
    {
        private IList<TextTipsTemplate> mList = null;

        public TextTipsTemplateMode(int step) : base("TextTipsTemplate", typeof(TextTipsTemplate), step) { }

        public TextTipsTemplate this[int id]
        {
            get { return Find<TextTipsTemplate>(id); }
        }

        public TextTipsTemplate Find(int id)
        {
            return Find<TextTipsTemplate>(id);
        }

        public IList<TextTipsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TextTipsTemplate>();
            return mList;
        }
    }

public class WingTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 物品品质
        /// </summary>
        public int Quality;
        /// <summary>
        /// 消耗道具ID
        /// </summary>
        public int Item;
        /// <summary>
        /// 单次消耗数量
        /// </summary>
        public int WingNeedItemNum;
        /// <summary>
        /// 总经验低于多少必然不成功
        /// </summary>
        public int MinLevelUpExp;
        /// <summary>
        /// 升级成功概率
        /// </summary>
        public int Probability;
        /// <summary>
        /// 总需经验
        /// </summary>
        public int ExpNum;
        /// <summary>
        /// 单次增加经验
        /// </summary>
        public int WingNeedExp;
        /// <summary>
        /// 跨天是否清空祝福值
        /// </summary>
        public int ChangeDayClear;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 美术资源ID
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 获得的新技能ID
        /// </summary>
        public int AddSkillID;
        /// <summary>
        /// 进阶参考值
        /// </summary>
        public int Reference;
        /// <summary>
        /// 开启装备栏
        /// </summary>
        public string OpenEquip;
        /// <summary>
        /// 战斗力
        /// </summary>
        public int ComatEffectiveness;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Career = bytes.ReadInt();
            Quality = bytes.ReadInt();
            Item = bytes.ReadInt();
            WingNeedItemNum = bytes.ReadInt();
            MinLevelUpExp = bytes.ReadInt();
            Probability = bytes.ReadInt();
            ExpNum = bytes.ReadInt();
            WingNeedExp = bytes.ReadInt();
            ChangeDayClear = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            AssetID = bytes.ReadInt();
            AddSkillID = bytes.ReadInt();
            Reference = bytes.ReadInt();
            OpenEquip = bytes.ReadUTF();
            ComatEffectiveness = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Career);
            bytes.WriteInt(Quality);
            bytes.WriteInt(Item);
            bytes.WriteInt(WingNeedItemNum);
            bytes.WriteInt(MinLevelUpExp);
            bytes.WriteInt(Probability);
            bytes.WriteInt(ExpNum);
            bytes.WriteInt(WingNeedExp);
            bytes.WriteInt(ChangeDayClear);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(AddSkillID);
            bytes.WriteInt(Reference);
            bytes.WriteUTF(OpenEquip);
            bytes.WriteInt(ComatEffectiveness);
            bytes.WriteInt(NoticeID);
        }
    }

    public class WingTemplateMode : TplMode
    {
        private IList<WingTemplate> mList = null;

        public WingTemplateMode(int step) : base("WingTemplate", typeof(WingTemplate), step) { }

        public WingTemplate this[int id]
        {
            get { return Find<WingTemplate>(id); }
        }

        public WingTemplate Find(int id)
        {
            return Find<WingTemplate>(id);
        }

        public IList<WingTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WingTemplate>();
            return mList;
        }
    }

public class TreasureMapTemplate : Tpl
    {
        /// <summary>
        /// 宝图等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 挖宝地图id
        /// </summary>
        public int MapId;
        /// <summary>
        /// 挖宝点X
        /// </summary>
        public int CbtX;
        /// <summary>
        /// 挖宝点Y
        /// </summary>
        public int Cbty;
        /// <summary>
        /// 图标位置X(像素)
        /// </summary>
        public int IconX;
        /// <summary>
        /// 图标位置Y(像素)
        /// </summary>
        public int IconY;
        /// <summary>
        /// 偏移格
        /// </summary>
        public int PianYi;
        /// <summary>
        /// 前端展示
        /// </summary>
        public string Awards;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            MapId = bytes.ReadInt();
            CbtX = bytes.ReadInt();
            Cbty = bytes.ReadInt();
            IconX = bytes.ReadInt();
            IconY = bytes.ReadInt();
            PianYi = bytes.ReadInt();
            Awards = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteInt(MapId);
            bytes.WriteInt(CbtX);
            bytes.WriteInt(Cbty);
            bytes.WriteInt(IconX);
            bytes.WriteInt(IconY);
            bytes.WriteInt(PianYi);
            bytes.WriteUTF(Awards);
        }
    }

    public class TreasureMapTemplateMode : TplMode
    {
        private IList<TreasureMapTemplate> mList = null;

        public TreasureMapTemplateMode(int step) : base("TreasureMapTemplate", typeof(TreasureMapTemplate), step) { }

        public TreasureMapTemplate this[int id]
        {
            get { return Find<TreasureMapTemplate>(id); }
        }

        public TreasureMapTemplate Find(int id)
        {
            return Find<TreasureMapTemplate>(id);
        }

        public IList<TreasureMapTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TreasureMapTemplate>();
            return mList;
        }
    }

public class ChangeTreasureTemplate : Tpl
    {
        /// <summary>
        /// 开服天数
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 任务顺序
        /// </summary>
        public int Order;
        /// <summary>
        /// 兑换所需物品随机组
        /// </summary>
        public string ChangeGoods;
        /// <summary>
        /// 兑换奖励
        /// </summary>
        public string Reward;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            OpenDay = bytes.ReadInt();
            Order = bytes.ReadInt();
            ChangeGoods = bytes.ReadUTF();
            Reward = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(OpenDay);
            bytes.WriteInt(Order);
            bytes.WriteUTF(ChangeGoods);
            bytes.WriteUTF(Reward);
        }
    }

    public class ChangeTreasureTemplateMode : TplMode
    {
        private IList<ChangeTreasureTemplate> mList = null;

        public ChangeTreasureTemplateMode(int step) : base("ChangeTreasureTemplate", typeof(ChangeTreasureTemplate), step) { }

        public ChangeTreasureTemplate this[int id]
        {
            get { return Find<ChangeTreasureTemplate>(id); }
        }

        public ChangeTreasureTemplate Find(int id)
        {
            return Find<ChangeTreasureTemplate>(id);
        }

        public IList<ChangeTreasureTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ChangeTreasureTemplate>();
            return mList;
        }
    }

public class TreasureMapMonsterTemplate : Tpl
    {
        /// <summary>
        /// BOSS等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 要求世界等级
        /// </summary>
        public int NeedWorldLevel;
        /// <summary>
        /// 守卫信息
        /// </summary>
        public string MainMonster;
        /// <summary>
        /// 守护信息
        /// </summary>
        public string LinkMonster;
        /// <summary>
        /// 刷新时间
        /// </summary>
        public int AdvanceTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            NeedWorldLevel = bytes.ReadInt();
            MainMonster = bytes.ReadUTF();
            LinkMonster = bytes.ReadUTF();
            AdvanceTime = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteInt(NeedWorldLevel);
            bytes.WriteUTF(MainMonster);
            bytes.WriteUTF(LinkMonster);
            bytes.WriteInt(AdvanceTime);
        }
    }

    public class TreasureMapMonsterTemplateMode : TplMode
    {
        private IList<TreasureMapMonsterTemplate> mList = null;

        public TreasureMapMonsterTemplateMode(int step) : base("TreasureMapMonsterTemplate", typeof(TreasureMapMonsterTemplate), step) { }

        public TreasureMapMonsterTemplate this[int id]
        {
            get { return Find<TreasureMapMonsterTemplate>(id); }
        }

        public TreasureMapMonsterTemplate Find(int id)
        {
            return Find<TreasureMapMonsterTemplate>(id);
        }

        public IList<TreasureMapMonsterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TreasureMapMonsterTemplate>();
            return mList;
        }
    }

public class AffixTemplate : Tpl
    {
        /// <summary>
        /// 词缀名称
        /// </summary>
        public string AffixName;
        /// <summary>
        /// 词缀类型
        /// </summary>
        public int AffixType;
        /// <summary>
        /// 属性加成
        /// </summary>
        public int NatureAddition;
        /// <summary>
        /// 词缀美术资源
        /// </summary>
        public int ShowAffix;
        /// <summary>
        /// 词缀名字旁美术资源
        /// </summary>
        public int ShowAffixBeside;
        /// <summary>
        /// 词缀光环
        /// </summary>
        public int AffixEffect;
        /// <summary>
        /// 大爆增加概率（弃用）
        /// </summary>
        public int AddDoubleDrop;
        /// <summary>
        /// 大爆补充次数（弃用）
        /// </summary>
        public int DoubleDropNumber;
        /// <summary>
        /// 极品附加次数
        /// </summary>
        public int DoubleBestNumber;
        /// <summary>
        /// 随机掉落附加次数
        /// </summary>
        public int AddRandomDrop;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            AffixName = bytes.ReadUTF();
            AffixType = bytes.ReadInt();
            NatureAddition = bytes.ReadInt();
            ShowAffix = bytes.ReadInt();
            ShowAffixBeside = bytes.ReadInt();
            AffixEffect = bytes.ReadInt();
            AddDoubleDrop = bytes.ReadInt();
            DoubleDropNumber = bytes.ReadInt();
            DoubleBestNumber = bytes.ReadInt();
            AddRandomDrop = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(AffixName);
            bytes.WriteInt(AffixType);
            bytes.WriteInt(NatureAddition);
            bytes.WriteInt(ShowAffix);
            bytes.WriteInt(ShowAffixBeside);
            bytes.WriteInt(AffixEffect);
            bytes.WriteInt(AddDoubleDrop);
            bytes.WriteInt(DoubleDropNumber);
            bytes.WriteInt(DoubleBestNumber);
            bytes.WriteInt(AddRandomDrop);
        }
    }

    public class AffixTemplateMode : TplMode
    {
        private IList<AffixTemplate> mList = null;

        public AffixTemplateMode(int step) : base("AffixTemplate", typeof(AffixTemplate), step) { }

        public AffixTemplate this[int id]
        {
            get { return Find<AffixTemplate>(id); }
        }

        public AffixTemplate Find(int id)
        {
            return Find<AffixTemplate>(id);
        }

        public IList<AffixTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AffixTemplate>();
            return mList;
        }
    }

public class CollectionTemplate : Tpl
    {
        /// <summary>
        /// 采集类型
        /// </summary>
        public int Type;
        /// <summary>
        /// ID|权重,ID|权重
        /// </summary>
        public string AddItemInfo1;
        /// <summary>
        /// 物品|数量,物品|数量
        /// </summary>
        public string AddItemInfo2;
        /// <summary>
        /// BuffID
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 采集时间(秒)
        /// </summary>
        public int AddTime;
        /// <summary>
        /// 采集技能
        /// </summary>
        public int AddSkill;
        /// <summary>
        /// 掉落类型
        /// </summary>
        public int DropType;
        /// <summary>
        /// 采集需要物品
        /// </summary>
        public int ItemID;
        /// <summary>
        /// 消耗物品数量
        /// </summary>
        public int AwardCost;
        /// <summary>
        /// 采集是否可打断
        /// </summary>
        public int IsInterrupt;
        /// <summary>
        /// 采集次数
        /// </summary>
        public int CollectNum;
        /// <summary>
        /// 是否可购买
        /// </summary>
        public int IsBuy;
        /// <summary>
        /// 采集公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            AddItemInfo1 = bytes.ReadUTF();
            AddItemInfo2 = bytes.ReadUTF();
            BuffID = bytes.ReadInt();
            AddTime = bytes.ReadInt();
            AddSkill = bytes.ReadInt();
            DropType = bytes.ReadInt();
            ItemID = bytes.ReadInt();
            AwardCost = bytes.ReadInt();
            IsInterrupt = bytes.ReadInt();
            CollectNum = bytes.ReadInt();
            IsBuy = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteUTF(AddItemInfo1);
            bytes.WriteUTF(AddItemInfo2);
            bytes.WriteInt(BuffID);
            bytes.WriteInt(AddTime);
            bytes.WriteInt(AddSkill);
            bytes.WriteInt(DropType);
            bytes.WriteInt(ItemID);
            bytes.WriteInt(AwardCost);
            bytes.WriteInt(IsInterrupt);
            bytes.WriteInt(CollectNum);
            bytes.WriteInt(IsBuy);
            bytes.WriteInt(NoticeID);
        }
    }

    public class CollectionTemplateMode : TplMode
    {
        private IList<CollectionTemplate> mList = null;

        public CollectionTemplateMode(int step) : base("CollectionTemplate", typeof(CollectionTemplate), step) { }

        public CollectionTemplate this[int id]
        {
            get { return Find<CollectionTemplate>(id); }
        }

        public CollectionTemplate Find(int id)
        {
            return Find<CollectionTemplate>(id);
        }

        public IList<CollectionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CollectionTemplate>();
            return mList;
        }
    }

public class LoadErrorTemplate : Tpl
    {
        /// <summary>
        /// URL
        /// </summary>
        public string URL;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            URL = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(URL);
        }
    }

    public class LoadErrorTemplateMode : TplMode
    {
        private IList<LoadErrorTemplate> mList = null;

        public LoadErrorTemplateMode(int step) : base("LoadErrorTemplate", typeof(LoadErrorTemplate), step) { }

        public LoadErrorTemplate this[int id]
        {
            get { return Find<LoadErrorTemplate>(id); }
        }

        public LoadErrorTemplate Find(int id)
        {
            return Find<LoadErrorTemplate>(id);
        }

        public IList<LoadErrorTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LoadErrorTemplate>();
            return mList;
        }
    }

public class MapEventTemplate : Tpl
    {
        /// <summary>
        /// 事件所在场景
        /// </summary>
        public int EventMapID;
        /// <summary>
        /// 事件编号
        /// </summary>
        public int EventID;
        /// <summary>
        /// 任务ID|任务状态（0接取，1完成）或
        /// </summary>
        public string TaskID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EventMapID = bytes.ReadInt();
            EventID = bytes.ReadInt();
            TaskID = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EventMapID);
            bytes.WriteInt(EventID);
            bytes.WriteUTF(TaskID);
        }
    }

    public class MapEventTemplateMode : TplMode
    {
        private IList<MapEventTemplate> mList = null;

        public MapEventTemplateMode(int step) : base("MapEventTemplate", typeof(MapEventTemplate), step) { }

        public MapEventTemplate this[int id]
        {
            get { return Find<MapEventTemplate>(id); }
        }

        public MapEventTemplate Find(int id)
        {
            return Find<MapEventTemplate>(id);
        }

        public IList<MapEventTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MapEventTemplate>();
            return mList;
        }
    }

public class MapLinkTemplate : Tpl
    {
        /// <summary>
        /// 关联场景ID
        /// </summary>
        public string LinkID;
        /// <summary>
        /// 当前场景事件点所在坐标
        /// </summary>
        public string Coord;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LinkID = bytes.ReadUTF();
            Coord = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(LinkID);
            bytes.WriteUTF(Coord);
        }
    }

    public class MapLinkTemplateMode : TplMode
    {
        private IList<MapLinkTemplate> mList = null;

        public MapLinkTemplateMode(int step) : base("MapLinkTemplate", typeof(MapLinkTemplate), step) { }

        public MapLinkTemplate this[int id]
        {
            get { return Find<MapLinkTemplate>(id); }
        }

        public MapLinkTemplate Find(int id)
        {
            return Find<MapLinkTemplate>(id);
        }

        public IList<MapLinkTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MapLinkTemplate>();
            return mList;
        }
    }

public class MonsterRefreshTemplate : Tpl
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public int MapId;
        /// <summary>
        /// 刷新类型（1.初始刷新  2.定时刷新 3.触发刷新，全服某个怪物击杀n次后触发，每日有触发上限 ）
        /// </summary>
        public int RefreshType;
        /// <summary>
        /// 是否定点刷新
        /// 1.定点刷新
        /// </summary>
        public int IsFixedPoint;
        /// <summary>
        /// 单位类型
        /// </summary>
        public int ObjectType;
        /// <summary>
        /// 单位ID
        /// </summary>
        public int ObjectTmplId;
        /// <summary>
        /// 批次刷怪
        /// </summary>
        public int Batch;
        /// <summary>
        /// 刷怪数量
        /// </summary>
        public int Num;
        /// <summary>
        /// 是否在小地图上显示
        /// </summary>
        public int IsShowMap;
        /// <summary>
        /// 是否开启小地图倒计时
        /// </summary>
        public int IsShowTime;
        /// <summary>
        /// x坐标
        /// </summary>
        public int MapX;
        /// <summary>
        /// y坐标
        /// </summary>
        public int MapY;
        /// <summary>
        /// Param1
        /// </summary>
        public string Param1;
        /// <summary>
        /// Param2
        /// </summary>
        public int Param2;
        /// <summary>
        /// Param3
        /// </summary>
        public int Param3;
        /// <summary>
        /// Param4
        /// </summary>
        public int Param4;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MapId = bytes.ReadInt();
            RefreshType = bytes.ReadInt();
            IsFixedPoint = bytes.ReadInt();
            ObjectType = bytes.ReadInt();
            ObjectTmplId = bytes.ReadInt();
            Batch = bytes.ReadInt();
            Num = bytes.ReadInt();
            IsShowMap = bytes.ReadInt();
            IsShowTime = bytes.ReadInt();
            MapX = bytes.ReadInt();
            MapY = bytes.ReadInt();
            Param1 = bytes.ReadUTF();
            Param2 = bytes.ReadInt();
            Param3 = bytes.ReadInt();
            Param4 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MapId);
            bytes.WriteInt(RefreshType);
            bytes.WriteInt(IsFixedPoint);
            bytes.WriteInt(ObjectType);
            bytes.WriteInt(ObjectTmplId);
            bytes.WriteInt(Batch);
            bytes.WriteInt(Num);
            bytes.WriteInt(IsShowMap);
            bytes.WriteInt(IsShowTime);
            bytes.WriteInt(MapX);
            bytes.WriteInt(MapY);
            bytes.WriteUTF(Param1);
            bytes.WriteInt(Param2);
            bytes.WriteInt(Param3);
            bytes.WriteInt(Param4);
        }
    }

    public class MonsterRefreshTemplateMode : TplMode
    {
        private IList<MonsterRefreshTemplate> mList = null;

        public MonsterRefreshTemplateMode(int step) : base("MonsterRefreshTemplate", typeof(MonsterRefreshTemplate), step) { }

        public MonsterRefreshTemplate this[int id]
        {
            get { return Find<MonsterRefreshTemplate>(id); }
        }

        public MonsterRefreshTemplate Find(int id)
        {
            return Find<MonsterRefreshTemplate>(id);
        }

        public IList<MonsterRefreshTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MonsterRefreshTemplate>();
            return mList;
        }
    }

public class MapConditionTemplate : Tpl
    {
        /// <summary>
        /// 真名
        /// </summary>
        public string ConditionName;
        /// <summary>
        /// 基础属性进入条件
        /// </summary>
        public string BasicProperties;
        /// <summary>
        /// 养成属性进入条件
        /// </summary>
        public string NurturanceAttribute;
        /// <summary>
        /// 角色等级下限
        /// </summary>
        public int LvLMinLimit;
        /// <summary>
        /// 角色等级上限
        /// </summary>
        public int LvMaxLimit;
        /// <summary>
        /// 宝物
        /// </summary>
        public int AllMoQiLv;
        /// <summary>
        /// 铭文
        /// </summary>
        public string AllMingWen;
        /// <summary>
        /// 精灵
        /// </summary>
        public string ElvsCondition;
        /// <summary>
        /// 是否判断打金卡BUFF
        /// </summary>
        public int GoldCard;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int MoneyCost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ConditionName = bytes.ReadUTF();
            BasicProperties = bytes.ReadUTF();
            NurturanceAttribute = bytes.ReadUTF();
            LvLMinLimit = bytes.ReadInt();
            LvMaxLimit = bytes.ReadInt();
            AllMoQiLv = bytes.ReadInt();
            AllMingWen = bytes.ReadUTF();
            ElvsCondition = bytes.ReadUTF();
            GoldCard = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyCost = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(ConditionName);
            bytes.WriteUTF(BasicProperties);
            bytes.WriteUTF(NurturanceAttribute);
            bytes.WriteInt(LvLMinLimit);
            bytes.WriteInt(LvMaxLimit);
            bytes.WriteInt(AllMoQiLv);
            bytes.WriteUTF(AllMingWen);
            bytes.WriteUTF(ElvsCondition);
            bytes.WriteInt(GoldCard);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyCost);
        }
    }

    public class MapConditionTemplateMode : TplMode
    {
        private IList<MapConditionTemplate> mList = null;

        public MapConditionTemplateMode(int step) : base("MapConditionTemplate", typeof(MapConditionTemplate), step) { }

        public MapConditionTemplate this[int id]
        {
            get { return Find<MapConditionTemplate>(id); }
        }

        public MapConditionTemplate Find(int id)
        {
            return Find<MapConditionTemplate>(id);
        }

        public IList<MapConditionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MapConditionTemplate>();
            return mList;
        }
    }

public class MapTemplate : Tpl
    {
        /// <summary>
        /// 地图编号(美术资源ID（策划备注用））
        /// </summary>
        public int MapID;
        /// <summary>
        /// 地图名称（实际地图名称）
        /// </summary>
        public string MapName;
        /// <summary>
        /// 地图名字美术字
        /// </summary>
        public int MapNameID;
        /// <summary>
        /// 地图组（用于活动地图框的渲染）
        /// </summary>
        public int MapGrop;
        /// <summary>
        /// 能否使用回城卷轴
        /// </summary>
        public int CanTransfer1;
        /// <summary>
        /// 能否使用随机卷
        /// </summary>
        public int CanTransfer2;
        /// <summary>
        /// 能否使用行会传送
        /// </summary>
        public int CanTransfer3;
        /// <summary>
        /// 能否原地复活
        /// </summary>
        public int CanPlaceRevival;
        /// <summary>
        /// 1=读取配置表复活 2=活动复活
        /// </summary>
        public int RevivalRule;
        /// <summary>
        /// 是否可以召唤战宠
        /// </summary>
        public int CanCallMars;
        /// <summary>
        /// 是否可以变身心魔
        /// </summary>
        public int CanChange;
        /// <summary>
        /// 是否可以骑坐骑
        /// </summary>
        public int CanRide;
        /// <summary>
        /// 攻击模式
        /// </summary>
        public int AttackMode;
        /// <summary>
        /// 是否锁定攻击模式
        /// </summary>
        public int IsLockAttackMode;
        /// <summary>
        /// 地图是否匿名
        /// </summary>
        public int IsNoName;
        /// <summary>
        /// 杀人是否红名
        /// </summary>
        public int IsRedName;
        /// <summary>
        /// 是否掉落装备
        /// </summary>
        public int IsDropEquip;
        /// <summary>
        /// 是否允许地编事件无条件通过
        /// </summary>
        public int IsMapEditorEvent;
        /// <summary>
        /// 后端用来播报的NPCID：xxx通过未知暗殿传送员进入未知暗殿....
        /// </summary>
        public int NPCID;
        /// <summary>
        /// 进入地图显示文本（卷轴提示）
        /// </summary>
        public string mapEnterStr;
        /// <summary>
        /// 传送地图（副本完成或者下线是否回城）
        /// </summary>
        public int Transmit;
        /// <summary>
        /// 传送X坐标
        /// </summary>
        public int TransmitX;
        /// <summary>
        /// 传送y坐标
        /// </summary>
        public int TransmitY;
        /// <summary>
        /// 是否被击杀掉落狂暴之力
        /// </summary>
        public int IsDropViolent;
        /// <summary>
        /// 0是副本 1是世界地图
        /// </summary>
        public int SceneType;
        /// <summary>
        /// 地图类型
        /// </summary>
        public int MapType;
        /// <summary>
        /// 地图子类型
        /// </summary>
        public int SubType;
        /// <summary>
        /// 镜像副本
        /// </summary>
        public int MirrorDungeon;
        /// <summary>
        /// 是否是跨服地图
        /// </summary>
        public int IsCrossServerMap;
        /// <summary>
        /// Vip大于等于多少可以进
        /// </summary>
        public int VipLimit;
        /// <summary>
        /// 碰撞类型
        /// </summary>
        public int CollideType;
        /// <summary>
        /// 拾取规则
        /// </summary>
        public int DropType;
        /// <summary>
        /// 出生点X
        /// </summary>
        public int BornX;
        /// <summary>
        /// 服务器分组
        /// </summary>
        public int ServerGroup;
        /// <summary>
        /// 出生点Y
        /// </summary>
        public int BornY;
        /// <summary>
        /// 死亡复活地图ID
        /// </summary>
        public int RevievMapID;
        /// <summary>
        /// 重生点X
        /// </summary>
        public int ReviveX;
        /// <summary>
        /// 重生点Y
        /// </summary>
        public int ReviveY;
        /// <summary>
        /// 回城地图
        /// </summary>
        public int BackMap;
        /// <summary>
        /// 回城X
        /// </summary>
        public int BackX;
        /// <summary>
        /// 回城Y
        /// </summary>
        public int BackY;
        /// <summary>
        /// 转职等级
        /// </summary>
        public int TransferLv;
        /// <summary>
        /// 显示枚举组合
        /// </summary>
        public string ShowLimit;
        /// <summary>
        /// 转职显示等级
        /// </summary>
        public int ShowTransferLv;
        /// <summary>
        /// 地图进入条件（地图条件表ID）
        /// </summary>
        public string MapCondition;
        /// <summary>
        /// 地图同条件显示
        /// </summary>
        public int ShowSameCondition;
        /// <summary>
        /// 地图进入条件显示（地图条件表ID）
        /// </summary>
        public string ShowMapCondition;
        /// <summary>
        /// 是否在小地图上显示NPC位置
        /// </summary>
        public int IsShowNpc;
        /// <summary>
        /// 刷新BOSS类型(超级BOSS之家用）（怪物表BOSS子类型）
        /// </summary>
        public int RefreshMonType;
        /// <summary>
        /// 刷新BOSS上限（超级BOSS之家用）
        /// </summary>
        public int MonUperLimit;
        /// <summary>
        /// 进入消耗物品
        /// </summary>
        public int JoinGoodsCost;
        /// <summary>
        /// 进入消耗物品数量
        /// </summary>
        public int JoinGoodsCostNumber;
        /// <summary>
        /// 进入地图消耗货币类型
        /// </summary>
        public int JoinMoneyCostType;
        /// <summary>
        /// 进入消耗数量
        /// </summary>
        public int JoinMoneyCost;
        /// <summary>
        /// 跨阶消耗货币类型
        /// </summary>
        public int AcrossType;
        /// <summary>
        /// 跨界消耗数量
        /// </summary>
        public int AcrossNumber;
        /// <summary>
        /// 跨阶前判定(地图ID）
        /// </summary>
        public int AcrossDecide;
        /// <summary>
        /// 是否开启跨阶（0，不开启 1，开启
        /// </summary>
        public int OpenAcross;
        /// <summary>
        /// 怪物经验分配
        /// </summary>
        public int MonsterExp;
        /// <summary>
        /// 游戏背景音乐
        /// </summary>
        public int MapBgM;
        /// <summary>
        /// 是否自动组队
        /// </summary>
        public int IsAutomaticTeam;
        /// <summary>
        /// 是否发击杀邮件
        /// </summary>
        public int IsSendDeadMail;
        /// <summary>
        /// 是否记录
        /// </summary>
        public int NeedLog;
        /// <summary>
        /// 是否在小地图上显示boss
        /// </summary>
        public int NotDisplayedBoss;
        /// <summary>
        /// 地图默认buffid
        /// </summary>
        public int DefaultAtkAndBuff;
        /// <summary>
        /// 后续增加buffid
        /// </summary>
        public string NeedAtkAndBuff;
        /// <summary>
        /// 玩家加buff
        /// </summary>
        public int PlayerBuff;
        /// <summary>
        /// 是否是泡点地图
        /// </summary>
        public int BubbleBuff;
        /// <summary>
        /// 推荐战力
        /// </summary>
        public int NeedAtk;
        /// <summary>
        /// 是否显示BOSS刷新状态
        /// </summary>
        public int IsShowBossState;
        /// <summary>
        /// 开服几天后开启
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 地图允许进入时间
        /// </summary>
        public string OpenTime;
        /// <summary>
        /// 掉落是否绑定
        /// </summary>
        public int IsBinding;
        /// <summary>
        /// 掉落衰减转生等级
        /// </summary>
        public int DropMinusJJlv;
        /// <summary>
        /// 掉落衰减系数
        /// （万分比）
        /// </summary>
        public int DropMinusSet;
        /// <summary>
        /// 是否显示坟头
        /// </summary>
        public int ShowGrave;
        /// <summary>
        /// 是否在小地图展示精英位置（0，不展示；1，展示）
        /// </summary>
        public int MiniShow;
        /// <summary>
        /// 是否展示小地图（0，展示，1不展示）
        /// </summary>
        public int MiniMapShow;
        /// <summary>
        /// 当前地图是否可查看其他玩家（0可以查看，1不可以查看）
        /// </summary>
        public int SeeOtherPlayer;
        /// <summary>
        /// 是否DPS统计
        /// </summary>
        public int IsDPSCount;
        /// <summary>
        /// 需要至尊贵族等级
        /// </summary>
        public int SuperLv;
        /// <summary>
        /// 是否显示坟头
        /// </summary>
        public int ShowEliteGrave;
        /// <summary>
        /// 是否禁用技能
        /// </summary>
        public int IsStopskill;
        /// <summary>
        /// 是否禁用连击技能
        /// </summary>
        public int IsCombom;
        /// <summary>
        /// 是否禁止移动（0，不禁止，1禁止）
        /// </summary>
        public int IsMove;
        /// <summary>
        /// 是否禁用回血
        /// </summary>
        public int IsRestorehp;
        /// <summary>
        /// 复活倒计时（秒）
        /// </summary>
        public int ReviveTime;
        /// <summary>
        /// 进入地图是否自动战斗（0否，1是）
        /// </summary>
        public int GetIntoAuto;
        /// <summary>
        /// 能否自动战斗（0=能1=不能）
        /// </summary>
        public int IsAutomaticity;
        /// <summary>
        /// 每隔多久刷新一个机器人（s）
        /// </summary>
        public int RobotTime;
        /// <summary>
        /// 地图玩家数少于多少开始刷新机器人
        /// </summary>
        public int RobotNum;
        /// <summary>
        /// 地图机器人上限
        /// </summary>
        public int RobotMaxNum;
        /// <summary>
        /// 机器人与地图玩家比例
        /// </summary>
        public int RobotBornRite;
        /// <summary>
        /// 进入地图公告ID
        /// </summary>
        public int EnterMapBroadCast;
        /// <summary>
        /// 怪物杀死是否掉落
        /// </summary>
        public int MonsterKill;
        /// <summary>
        /// 是否可携带宠物
        /// </summary>
        public int IsPet;
        /// <summary>
        /// 是否可以传送（0=可以1=不可）
        /// </summary>
        public int IsTransfer;
        /// <summary>
        /// 是否有迷雾（0-没有，1=普通迷雾,2=加强迷雾）
        /// </summary>
        public int IsFog;
        /// <summary>
        /// 地图上同一坐标道具可以叠加几件（1是1件，2是2件）
        /// </summary>
        public int SposeNum;
        /// <summary>
        /// 地图内是否显示玩家称号（1是显示）
        /// </summary>
        public int IsShowTitle;
        /// <summary>
        /// 地图内怪物是否被控制（只对封印，诱惑，净化，压制生效）
        /// </summary>
        public int MonsterControl;
        /// <summary>
        /// 地图怪物附加BUFF
        /// </summary>
        public string MonsterBuff;
        /// <summary>
        /// 地图每日免费时长|消耗货币类型|每3秒消耗货币数量
        /// </summary>
        public string MapCost;
        /// <summary>
        /// 进入地图前几个BOSS数量|额外掉率增加（万分比）
        /// </summary>
        public string DropBenefit;
        /// <summary>
        /// 进入地图前几个BOSS数量|第一刀之后所剩血量（万分比）
        /// </summary>
        public string HurtBenefit;
        /// <summary>
        /// 该地图是否激活词缀
        /// </summary>
        public int IsOpenAffix;
        /// <summary>
        /// 标签|纸娃娃ID
        /// </summary>
        public string ShowRaceShowAssetID;
        /// <summary>
        /// 地图危险系数
        /// </summary>
        public int Dange;
        /// <summary>
        /// 地图特点信息栏
        /// </summary>
        public string MapPoint;
        /// <summary>
        /// 怪物掉落预览（填怪物表ID）
        /// </summary>
        public int ShowMonDrop;
        /// <summary>
        /// 地图掉落预览
        /// </summary>
        public string ShowMapDrop;
        /// <summary>
        /// boss地图掉落包
        /// </summary>
        public string MapDrop1;
        /// <summary>
        /// 小怪地图掉落包
        /// </summary>
        public string MapDrop2;
        /// <summary>
        /// 是否关闭怪物掉落
        /// </summary>
        public int CloseMonsterDrop;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MapID = bytes.ReadInt();
            MapName = bytes.ReadUTF();
            MapNameID = bytes.ReadInt();
            MapGrop = bytes.ReadInt();
            CanTransfer1 = bytes.ReadInt();
            CanTransfer2 = bytes.ReadInt();
            CanTransfer3 = bytes.ReadInt();
            CanPlaceRevival = bytes.ReadInt();
            RevivalRule = bytes.ReadInt();
            CanCallMars = bytes.ReadInt();
            CanChange = bytes.ReadInt();
            CanRide = bytes.ReadInt();
            AttackMode = bytes.ReadInt();
            IsLockAttackMode = bytes.ReadInt();
            IsNoName = bytes.ReadInt();
            IsRedName = bytes.ReadInt();
            IsDropEquip = bytes.ReadInt();
            IsMapEditorEvent = bytes.ReadInt();
            NPCID = bytes.ReadInt();
            mapEnterStr = bytes.ReadUTF();
            Transmit = bytes.ReadInt();
            TransmitX = bytes.ReadInt();
            TransmitY = bytes.ReadInt();
            IsDropViolent = bytes.ReadInt();
            SceneType = bytes.ReadInt();
            MapType = bytes.ReadInt();
            SubType = bytes.ReadInt();
            MirrorDungeon = bytes.ReadInt();
            IsCrossServerMap = bytes.ReadInt();
            VipLimit = bytes.ReadInt();
            CollideType = bytes.ReadInt();
            DropType = bytes.ReadInt();
            BornX = bytes.ReadInt();
            ServerGroup = bytes.ReadInt();
            BornY = bytes.ReadInt();
            RevievMapID = bytes.ReadInt();
            ReviveX = bytes.ReadInt();
            ReviveY = bytes.ReadInt();
            BackMap = bytes.ReadInt();
            BackX = bytes.ReadInt();
            BackY = bytes.ReadInt();
            TransferLv = bytes.ReadInt();
            ShowLimit = bytes.ReadUTF();
            ShowTransferLv = bytes.ReadInt();
            MapCondition = bytes.ReadUTF();
            ShowSameCondition = bytes.ReadInt();
            ShowMapCondition = bytes.ReadUTF();
            IsShowNpc = bytes.ReadInt();
            RefreshMonType = bytes.ReadInt();
            MonUperLimit = bytes.ReadInt();
            JoinGoodsCost = bytes.ReadInt();
            JoinGoodsCostNumber = bytes.ReadInt();
            JoinMoneyCostType = bytes.ReadInt();
            JoinMoneyCost = bytes.ReadInt();
            AcrossType = bytes.ReadInt();
            AcrossNumber = bytes.ReadInt();
            AcrossDecide = bytes.ReadInt();
            OpenAcross = bytes.ReadInt();
            MonsterExp = bytes.ReadInt();
            MapBgM = bytes.ReadInt();
            IsAutomaticTeam = bytes.ReadInt();
            IsSendDeadMail = bytes.ReadInt();
            NeedLog = bytes.ReadInt();
            NotDisplayedBoss = bytes.ReadInt();
            DefaultAtkAndBuff = bytes.ReadInt();
            NeedAtkAndBuff = bytes.ReadUTF();
            PlayerBuff = bytes.ReadInt();
            BubbleBuff = bytes.ReadInt();
            NeedAtk = bytes.ReadInt();
            IsShowBossState = bytes.ReadInt();
            OpenDay = bytes.ReadInt();
            OpenTime = bytes.ReadUTF();
            IsBinding = bytes.ReadInt();
            DropMinusJJlv = bytes.ReadInt();
            DropMinusSet = bytes.ReadInt();
            ShowGrave = bytes.ReadInt();
            MiniShow = bytes.ReadInt();
            MiniMapShow = bytes.ReadInt();
            SeeOtherPlayer = bytes.ReadInt();
            IsDPSCount = bytes.ReadInt();
            SuperLv = bytes.ReadInt();
            ShowEliteGrave = bytes.ReadInt();
            IsStopskill = bytes.ReadInt();
            IsCombom = bytes.ReadInt();
            IsMove = bytes.ReadInt();
            IsRestorehp = bytes.ReadInt();
            ReviveTime = bytes.ReadInt();
            GetIntoAuto = bytes.ReadInt();
            IsAutomaticity = bytes.ReadInt();
            RobotTime = bytes.ReadInt();
            RobotNum = bytes.ReadInt();
            RobotMaxNum = bytes.ReadInt();
            RobotBornRite = bytes.ReadInt();
            EnterMapBroadCast = bytes.ReadInt();
            MonsterKill = bytes.ReadInt();
            IsPet = bytes.ReadInt();
            IsTransfer = bytes.ReadInt();
            IsFog = bytes.ReadInt();
            SposeNum = bytes.ReadInt();
            IsShowTitle = bytes.ReadInt();
            MonsterControl = bytes.ReadInt();
            MonsterBuff = bytes.ReadUTF();
            MapCost = bytes.ReadUTF();
            DropBenefit = bytes.ReadUTF();
            HurtBenefit = bytes.ReadUTF();
            IsOpenAffix = bytes.ReadInt();
            ShowRaceShowAssetID = bytes.ReadUTF();
            Dange = bytes.ReadInt();
            MapPoint = bytes.ReadUTF();
            ShowMonDrop = bytes.ReadInt();
            ShowMapDrop = bytes.ReadUTF();
            MapDrop1 = bytes.ReadUTF();
            MapDrop2 = bytes.ReadUTF();
            CloseMonsterDrop = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MapID);
            bytes.WriteUTF(MapName);
            bytes.WriteInt(MapNameID);
            bytes.WriteInt(MapGrop);
            bytes.WriteInt(CanTransfer1);
            bytes.WriteInt(CanTransfer2);
            bytes.WriteInt(CanTransfer3);
            bytes.WriteInt(CanPlaceRevival);
            bytes.WriteInt(RevivalRule);
            bytes.WriteInt(CanCallMars);
            bytes.WriteInt(CanChange);
            bytes.WriteInt(CanRide);
            bytes.WriteInt(AttackMode);
            bytes.WriteInt(IsLockAttackMode);
            bytes.WriteInt(IsNoName);
            bytes.WriteInt(IsRedName);
            bytes.WriteInt(IsDropEquip);
            bytes.WriteInt(IsMapEditorEvent);
            bytes.WriteInt(NPCID);
            bytes.WriteUTF(mapEnterStr);
            bytes.WriteInt(Transmit);
            bytes.WriteInt(TransmitX);
            bytes.WriteInt(TransmitY);
            bytes.WriteInt(IsDropViolent);
            bytes.WriteInt(SceneType);
            bytes.WriteInt(MapType);
            bytes.WriteInt(SubType);
            bytes.WriteInt(MirrorDungeon);
            bytes.WriteInt(IsCrossServerMap);
            bytes.WriteInt(VipLimit);
            bytes.WriteInt(CollideType);
            bytes.WriteInt(DropType);
            bytes.WriteInt(BornX);
            bytes.WriteInt(ServerGroup);
            bytes.WriteInt(BornY);
            bytes.WriteInt(RevievMapID);
            bytes.WriteInt(ReviveX);
            bytes.WriteInt(ReviveY);
            bytes.WriteInt(BackMap);
            bytes.WriteInt(BackX);
            bytes.WriteInt(BackY);
            bytes.WriteInt(TransferLv);
            bytes.WriteUTF(ShowLimit);
            bytes.WriteInt(ShowTransferLv);
            bytes.WriteUTF(MapCondition);
            bytes.WriteInt(ShowSameCondition);
            bytes.WriteUTF(ShowMapCondition);
            bytes.WriteInt(IsShowNpc);
            bytes.WriteInt(RefreshMonType);
            bytes.WriteInt(MonUperLimit);
            bytes.WriteInt(JoinGoodsCost);
            bytes.WriteInt(JoinGoodsCostNumber);
            bytes.WriteInt(JoinMoneyCostType);
            bytes.WriteInt(JoinMoneyCost);
            bytes.WriteInt(AcrossType);
            bytes.WriteInt(AcrossNumber);
            bytes.WriteInt(AcrossDecide);
            bytes.WriteInt(OpenAcross);
            bytes.WriteInt(MonsterExp);
            bytes.WriteInt(MapBgM);
            bytes.WriteInt(IsAutomaticTeam);
            bytes.WriteInt(IsSendDeadMail);
            bytes.WriteInt(NeedLog);
            bytes.WriteInt(NotDisplayedBoss);
            bytes.WriteInt(DefaultAtkAndBuff);
            bytes.WriteUTF(NeedAtkAndBuff);
            bytes.WriteInt(PlayerBuff);
            bytes.WriteInt(BubbleBuff);
            bytes.WriteInt(NeedAtk);
            bytes.WriteInt(IsShowBossState);
            bytes.WriteInt(OpenDay);
            bytes.WriteUTF(OpenTime);
            bytes.WriteInt(IsBinding);
            bytes.WriteInt(DropMinusJJlv);
            bytes.WriteInt(DropMinusSet);
            bytes.WriteInt(ShowGrave);
            bytes.WriteInt(MiniShow);
            bytes.WriteInt(MiniMapShow);
            bytes.WriteInt(SeeOtherPlayer);
            bytes.WriteInt(IsDPSCount);
            bytes.WriteInt(SuperLv);
            bytes.WriteInt(ShowEliteGrave);
            bytes.WriteInt(IsStopskill);
            bytes.WriteInt(IsCombom);
            bytes.WriteInt(IsMove);
            bytes.WriteInt(IsRestorehp);
            bytes.WriteInt(ReviveTime);
            bytes.WriteInt(GetIntoAuto);
            bytes.WriteInt(IsAutomaticity);
            bytes.WriteInt(RobotTime);
            bytes.WriteInt(RobotNum);
            bytes.WriteInt(RobotMaxNum);
            bytes.WriteInt(RobotBornRite);
            bytes.WriteInt(EnterMapBroadCast);
            bytes.WriteInt(MonsterKill);
            bytes.WriteInt(IsPet);
            bytes.WriteInt(IsTransfer);
            bytes.WriteInt(IsFog);
            bytes.WriteInt(SposeNum);
            bytes.WriteInt(IsShowTitle);
            bytes.WriteInt(MonsterControl);
            bytes.WriteUTF(MonsterBuff);
            bytes.WriteUTF(MapCost);
            bytes.WriteUTF(DropBenefit);
            bytes.WriteUTF(HurtBenefit);
            bytes.WriteInt(IsOpenAffix);
            bytes.WriteUTF(ShowRaceShowAssetID);
            bytes.WriteInt(Dange);
            bytes.WriteUTF(MapPoint);
            bytes.WriteInt(ShowMonDrop);
            bytes.WriteUTF(ShowMapDrop);
            bytes.WriteUTF(MapDrop1);
            bytes.WriteUTF(MapDrop2);
            bytes.WriteInt(CloseMonsterDrop);
        }
    }

    public class MapTemplateMode : TplMode
    {
        private IList<MapTemplate> mList = null;

        public MapTemplateMode(int step) : base("MapTemplate", typeof(MapTemplate), step) { }

        public MapTemplate this[int id]
        {
            get { return Find<MapTemplate>(id); }
        }

        public MapTemplate Find(int id)
        {
            return Find<MapTemplate>(id);
        }

        public IList<MapTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MapTemplate>();
            return mList;
        }
    }

public class DailyActivityTemplate : Tpl
    {
        /// <summary>
        /// 活动名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 活动类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 是否开启
        /// </summary>
        public int IsValid;
        /// <summary>
        /// 美术资源
        /// </summary>
        public string Image;
        /// <summary>
        /// 活动时间
        /// </summary>
        public string Time;
        /// <summary>
        /// 对应跨服定时活动ID
        /// </summary>
        public int CrossserverActive;
        /// <summary>
        /// 是否是行会活动
        /// </summary>
        public int GuildActivity;
        /// <summary>
        /// 是否手动开启
        /// </summary>
        public int ManualOpening;
        /// <summary>
        /// 左侧活动图标是否显示
        /// </summary>
        public int IconShow;
        /// <summary>
        /// 活动面板是否展示活动
        /// </summary>
        public int ActivityShow;
        /// <summary>
        /// 活动开启提前预告时间
        /// </summary>
        public string ActiveWillOpen;
        /// <summary>
        /// 活动起始时间
        /// </summary>
        public string TimeStart;
        /// <summary>
        /// 活动报名结束提前预告时间
        /// </summary>
        public string RegistEndNotice;
        /// <summary>
        /// 活动快结束时提前预报
        /// </summary>
        public string RealEndNotice;
        /// <summary>
        /// 活动报名结束时间
        /// </summary>
        public string EndEinlass;
        /// <summary>
        /// 活动结束时间
        /// </summary>
        public string TimeEnd;
        /// <summary>
        /// 周几开
        /// </summary>
        public string WeekDay;
        /// <summary>
        /// 参加条件等级
        /// </summary>
        public int CoP;
        /// <summary>
        /// 进入花费
        /// </summary>
        public string Cost;
        /// <summary>
        /// 奖励
        /// </summary>
        public string Awards;
        /// <summary>
        /// 周期活动奖励
        /// </summary>
        public string CycleAwards;
        /// <summary>
        /// 是否支持补签
        /// </summary>
        public int IsSign;
        /// <summary>
        /// 是否支持双倍补签
        /// </summary>
        public int IsDoubleSign;
        /// <summary>
        /// 补签消耗货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 补签消耗货币数量
        /// </summary>
        public int Number;
        /// <summary>
        /// 前端显示用奖励
        /// </summary>
        public string AwardsShow;
        /// <summary>
        /// 前端显示用奖励文本
        /// </summary>
        public string AwardsTxt;
        /// <summary>
        /// 活动NPCID
        /// </summary>
        public int NPCID;
        /// <summary>
        /// 活动入口描述
        /// </summary>
        public string EnterString;
        /// <summary>
        /// 活动介绍
        /// </summary>
        public string Introduction;
        /// <summary>
        /// 场景编号
        /// </summary>
        public string transfer;
        /// <summary>
        /// 活动描述
        /// </summary>
        public string EntranceDes;
        /// <summary>
        /// 活动说明
        /// </summary>
        public string NPCInstruction;
        /// <summary>
        /// 活动内右侧面板描述1
        /// </summary>
        public string InDescribe1;
        /// <summary>
        /// 活动内右侧面板描述2
        /// </summary>
        public string InDescribe2;
        /// <summary>
        /// 其他
        /// </summary>
        public string Other;
        /// <summary>
        /// 其他2
        /// </summary>
        public string CycleOther;
        /// <summary>
        /// 参与活动可得奖时长
        /// </summary>
        public int AwardNeedActiveTime;
        /// <summary>
        /// 获得多少积分可上榜
        /// </summary>
        public int IntegralRanking;
        /// <summary>
        /// 结束后传送点
        /// </summary>
        public string EndTransfer;
        /// <summary>
        /// 开服第几天开启
        /// </summary>
        public string OpenDay;
        /// <summary>
        /// 合服第几天开启
        /// </summary>
        public string UnionDay;
        /// <summary>
        /// 活动间隔
        /// </summary>
        public int GapDay;
        /// <summary>
        /// 上榜玩家数量
        /// </summary>
        public int RankCount;
        /// <summary>
        /// 服务器用1
        /// </summary>
        public string Other1;
        /// <summary>
        /// 服务器用2
        /// </summary>
        public string Other2;
        /// <summary>
        /// 服务器用3
        /// </summary>
        public string Other3;
        /// <summary>
        /// 即将开始公告
        /// </summary>
        public int KaiShi1;
        /// <summary>
        /// 已经开始公告
        /// </summary>
        public int KaiShi2;
        /// <summary>
        /// 即将结束公告
        /// </summary>
        public int JieShu1;
        /// <summary>
        /// 已经结束公告
        /// </summary>
        public int JieShu2;
        /// <summary>
        /// 入口关闭预告
        /// </summary>
        public int Close1;
        /// <summary>
        /// 入口关闭公告
        /// </summary>
        public int Close2;
        /// <summary>
        /// 是否显示传送
        /// </summary>
        public int SendDisplay;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            IsValid = bytes.ReadInt();
            Image = bytes.ReadUTF();
            Time = bytes.ReadUTF();
            CrossserverActive = bytes.ReadInt();
            GuildActivity = bytes.ReadInt();
            ManualOpening = bytes.ReadInt();
            IconShow = bytes.ReadInt();
            ActivityShow = bytes.ReadInt();
            ActiveWillOpen = bytes.ReadUTF();
            TimeStart = bytes.ReadUTF();
            RegistEndNotice = bytes.ReadUTF();
            RealEndNotice = bytes.ReadUTF();
            EndEinlass = bytes.ReadUTF();
            TimeEnd = bytes.ReadUTF();
            WeekDay = bytes.ReadUTF();
            CoP = bytes.ReadInt();
            Cost = bytes.ReadUTF();
            Awards = bytes.ReadUTF();
            CycleAwards = bytes.ReadUTF();
            IsSign = bytes.ReadInt();
            IsDoubleSign = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            Number = bytes.ReadInt();
            AwardsShow = bytes.ReadUTF();
            AwardsTxt = bytes.ReadUTF();
            NPCID = bytes.ReadInt();
            EnterString = bytes.ReadUTF();
            Introduction = bytes.ReadUTF();
            transfer = bytes.ReadUTF();
            EntranceDes = bytes.ReadUTF();
            NPCInstruction = bytes.ReadUTF();
            InDescribe1 = bytes.ReadUTF();
            InDescribe2 = bytes.ReadUTF();
            Other = bytes.ReadUTF();
            CycleOther = bytes.ReadUTF();
            AwardNeedActiveTime = bytes.ReadInt();
            IntegralRanking = bytes.ReadInt();
            EndTransfer = bytes.ReadUTF();
            OpenDay = bytes.ReadUTF();
            UnionDay = bytes.ReadUTF();
            GapDay = bytes.ReadInt();
            RankCount = bytes.ReadInt();
            Other1 = bytes.ReadUTF();
            Other2 = bytes.ReadUTF();
            Other3 = bytes.ReadUTF();
            KaiShi1 = bytes.ReadInt();
            KaiShi2 = bytes.ReadInt();
            JieShu1 = bytes.ReadInt();
            JieShu2 = bytes.ReadInt();
            Close1 = bytes.ReadInt();
            Close2 = bytes.ReadInt();
            SendDisplay = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(IsValid);
            bytes.WriteUTF(Image);
            bytes.WriteUTF(Time);
            bytes.WriteInt(CrossserverActive);
            bytes.WriteInt(GuildActivity);
            bytes.WriteInt(ManualOpening);
            bytes.WriteInt(IconShow);
            bytes.WriteInt(ActivityShow);
            bytes.WriteUTF(ActiveWillOpen);
            bytes.WriteUTF(TimeStart);
            bytes.WriteUTF(RegistEndNotice);
            bytes.WriteUTF(RealEndNotice);
            bytes.WriteUTF(EndEinlass);
            bytes.WriteUTF(TimeEnd);
            bytes.WriteUTF(WeekDay);
            bytes.WriteInt(CoP);
            bytes.WriteUTF(Cost);
            bytes.WriteUTF(Awards);
            bytes.WriteUTF(CycleAwards);
            bytes.WriteInt(IsSign);
            bytes.WriteInt(IsDoubleSign);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(Number);
            bytes.WriteUTF(AwardsShow);
            bytes.WriteUTF(AwardsTxt);
            bytes.WriteInt(NPCID);
            bytes.WriteUTF(EnterString);
            bytes.WriteUTF(Introduction);
            bytes.WriteUTF(transfer);
            bytes.WriteUTF(EntranceDes);
            bytes.WriteUTF(NPCInstruction);
            bytes.WriteUTF(InDescribe1);
            bytes.WriteUTF(InDescribe2);
            bytes.WriteUTF(Other);
            bytes.WriteUTF(CycleOther);
            bytes.WriteInt(AwardNeedActiveTime);
            bytes.WriteInt(IntegralRanking);
            bytes.WriteUTF(EndTransfer);
            bytes.WriteUTF(OpenDay);
            bytes.WriteUTF(UnionDay);
            bytes.WriteInt(GapDay);
            bytes.WriteInt(RankCount);
            bytes.WriteUTF(Other1);
            bytes.WriteUTF(Other2);
            bytes.WriteUTF(Other3);
            bytes.WriteInt(KaiShi1);
            bytes.WriteInt(KaiShi2);
            bytes.WriteInt(JieShu1);
            bytes.WriteInt(JieShu2);
            bytes.WriteInt(Close1);
            bytes.WriteInt(Close2);
            bytes.WriteInt(SendDisplay);
        }
    }

    public class DailyActivityTemplateMode : TplMode
    {
        private IList<DailyActivityTemplate> mList = null;

        public DailyActivityTemplateMode(int step) : base("DailyActivityTemplate", typeof(DailyActivityTemplate), step) { }

        public DailyActivityTemplate this[int id]
        {
            get { return Find<DailyActivityTemplate>(id); }
        }

        public DailyActivityTemplate Find(int id)
        {
            return Find<DailyActivityTemplate>(id);
        }

        public IList<DailyActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DailyActivityTemplate>();
            return mList;
        }
    }

public class DailyActivityShowTemplate : Tpl
    {
        /// <summary>
        /// 周几
        /// </summary>
        public int WeeklyTime;
        /// <summary>
        /// 活动顺序
        /// </summary>
        public int DailyList;
        /// <summary>
        /// 随机活动组
        /// </summary>
        public string Randomgroup;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            WeeklyTime = bytes.ReadInt();
            DailyList = bytes.ReadInt();
            Randomgroup = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(WeeklyTime);
            bytes.WriteInt(DailyList);
            bytes.WriteUTF(Randomgroup);
        }
    }

    public class DailyActivityShowTemplateMode : TplMode
    {
        private IList<DailyActivityShowTemplate> mList = null;

        public DailyActivityShowTemplateMode(int step) : base("DailyActivityShowTemplate", typeof(DailyActivityShowTemplate), step) { }

        public DailyActivityShowTemplate this[int id]
        {
            get { return Find<DailyActivityShowTemplate>(id); }
        }

        public DailyActivityShowTemplate Find(int id)
        {
            return Find<DailyActivityShowTemplate>(id);
        }

        public IList<DailyActivityShowTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DailyActivityShowTemplate>();
            return mList;
        }
    }

public class DailyActivityBossAwardTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int Statelv;
        /// <summary>
        /// 补签奖励
        /// </summary>
        public string SignAwards;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Statelv = bytes.ReadInt();
            SignAwards = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Statelv);
            bytes.WriteUTF(SignAwards);
        }
    }

    public class DailyActivityBossAwardTemplateMode : TplMode
    {
        private IList<DailyActivityBossAwardTemplate> mList = null;

        public DailyActivityBossAwardTemplateMode(int step) : base("DailyActivityBossAwardTemplate", typeof(DailyActivityBossAwardTemplate), step) { }

        public DailyActivityBossAwardTemplate this[int id]
        {
            get { return Find<DailyActivityBossAwardTemplate>(id); }
        }

        public DailyActivityBossAwardTemplate Find(int id)
        {
            return Find<DailyActivityBossAwardTemplate>(id);
        }

        public IList<DailyActivityBossAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DailyActivityBossAwardTemplate>();
            return mList;
        }
    }

public class DropTemplate : Tpl
    {
        /// <summary>
        /// 掉落包名
        /// </summary>
        public string DropName;
        /// <summary>
        /// 
        /// </summary>
        public string ItemList;
        /// <summary>
        /// 战士
        /// </summary>
        public string ManWarriorItemList;
        /// <summary>
        /// 法师
        /// </summary>
        public string ManWizardItemList;
        /// <summary>
        /// 道士
        /// </summary>
        public string ManTaoistItemList;
        /// <summary>
        /// 女战士
        /// </summary>
        public string WomanWarriorItemList;
        /// <summary>
        /// 女法师
        /// </summary>
        public string WomanWizardItemList;
        /// <summary>
        /// 女道士
        /// </summary>
        public string WomanTaoistItemList;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            DropName = bytes.ReadUTF();
            ItemList = bytes.ReadUTF();
            ManWarriorItemList = bytes.ReadUTF();
            ManWizardItemList = bytes.ReadUTF();
            ManTaoistItemList = bytes.ReadUTF();
            WomanWarriorItemList = bytes.ReadUTF();
            WomanWizardItemList = bytes.ReadUTF();
            WomanTaoistItemList = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(DropName);
            bytes.WriteUTF(ItemList);
            bytes.WriteUTF(ManWarriorItemList);
            bytes.WriteUTF(ManWizardItemList);
            bytes.WriteUTF(ManTaoistItemList);
            bytes.WriteUTF(WomanWarriorItemList);
            bytes.WriteUTF(WomanWizardItemList);
            bytes.WriteUTF(WomanTaoistItemList);
        }
    }

    public class DropTemplateMode : TplMode
    {
        private IList<DropTemplate> mList = null;

        public DropTemplateMode(int step) : base("DropTemplate", typeof(DropTemplate), step) { }

        public DropTemplate this[int id]
        {
            get { return Find<DropTemplate>(id); }
        }

        public DropTemplate Find(int id)
        {
            return Find<DropTemplate>(id);
        }

        public IList<DropTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DropTemplate>();
            return mList;
        }
    }

public class ShortActivityTemplate : Tpl
    {
        /// <summary>
        /// 短期活动名称
        /// </summary>
        public string ShortName;
        /// <summary>
        /// 持续时间
        /// </summary>
        public int Duration;
        /// <summary>
        /// 翅膀开启
        /// </summary>
        public int OpenWings;
        /// <summary>
        /// 经验加成
        /// </summary>
        public int AddExp;
        /// <summary>
        /// 祈福绑元加成
        /// </summary>
        public int PrayAdd;
        /// <summary>
        /// 按钮资源
        /// </summary>
        public string Btn;
        /// <summary>
        /// 跳转界面
        /// </summary>
        public string TurnFrom;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ShortName = bytes.ReadUTF();
            Duration = bytes.ReadInt();
            OpenWings = bytes.ReadInt();
            AddExp = bytes.ReadInt();
            PrayAdd = bytes.ReadInt();
            Btn = bytes.ReadUTF();
            TurnFrom = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(ShortName);
            bytes.WriteInt(Duration);
            bytes.WriteInt(OpenWings);
            bytes.WriteInt(AddExp);
            bytes.WriteInt(PrayAdd);
            bytes.WriteUTF(Btn);
            bytes.WriteUTF(TurnFrom);
        }
    }

    public class ShortActivityTemplateMode : TplMode
    {
        private IList<ShortActivityTemplate> mList = null;

        public ShortActivityTemplateMode(int step) : base("ShortActivityTemplate", typeof(ShortActivityTemplate), step) { }

        public ShortActivityTemplate this[int id]
        {
            get { return Find<ShortActivityTemplate>(id); }
        }

        public ShortActivityTemplate Find(int id)
        {
            return Find<ShortActivityTemplate>(id);
        }

        public IList<ShortActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ShortActivityTemplate>();
            return mList;
        }
    }

public class FirstSysTemTemplate : Tpl
    {
        /// <summary>
        /// 注释
        /// </summary>
        public string SystemName;
        /// <summary>
        /// 参数1
        /// </summary>
        public int parm1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int parm2;
        /// <summary>
        /// 参数3
        /// </summary>
        public int parm3;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            SystemName = bytes.ReadUTF();
            parm1 = bytes.ReadInt();
            parm2 = bytes.ReadInt();
            parm3 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(SystemName);
            bytes.WriteInt(parm1);
            bytes.WriteInt(parm2);
            bytes.WriteInt(parm3);
        }
    }

    public class FirstSysTemTemplateMode : TplMode
    {
        private IList<FirstSysTemTemplate> mList = null;

        public FirstSysTemTemplateMode(int step) : base("FirstSysTemTemplate", typeof(FirstSysTemTemplate), step) { }

        public FirstSysTemTemplate this[int id]
        {
            get { return Find<FirstSysTemTemplate>(id); }
        }

        public FirstSysTemTemplate Find(int id)
        {
            return Find<FirstSysTemTemplate>(id);
        }

        public IList<FirstSysTemTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FirstSysTemTemplate>();
            return mList;
        }
    }

public class PropItemTemplate : Tpl
    {
        /// <summary>
        /// 道具分类
        /// </summary>
        public string Notes1;
        /// <summary>
        /// 道具名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 引用列
        /// </summary>
        public int Notes2;
        /// <summary>
        /// 效果类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 货币
        /// </summary>
        public int SubType;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 参数3
        /// </summary>
        public int Data3;
        /// <summary>
        /// 参数4
        /// </summary>
        public int Data4;
        /// <summary>
        /// 参数5
        /// </summary>
        public string Data5;
        /// <summary>
        /// 拾取类型(1.金币 2.药品 3.材料 4.其他)
        /// </summary>
        public int GetTpye;
        /// <summary>
        /// 使用后关联界面ID
        /// </summary>
        public string LinkedUI;
        /// <summary>
        /// 物品说明
        /// </summary>
        public string Lore;
        /// <summary>
        /// 使用等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int State;
        /// <summary>
        /// VIP等级
        /// </summary>
        public int VipLv;
        /// <summary>
        /// 使用次数限制组
        /// </summary>
        public int ItemGrop;
        /// <summary>
        /// 是否一键使用
        /// </summary>
        public int OneKeyUse;
        /// <summary>
        /// 是否批量使用
        /// </summary>
        public int BatchUse;
        /// <summary>
        /// 获得来源
        /// </summary>
        public string GetWay;
        /// <summary>
        /// 是否自动使用
        /// </summary>
        public int IsAutoUse;
        /// <summary>
        /// 是否推送
        /// </summary>
        public int IsPush;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Notes1 = bytes.ReadUTF();
            Name = bytes.ReadUTF();
            Notes2 = bytes.ReadInt();
            Type = bytes.ReadInt();
            SubType = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Data3 = bytes.ReadInt();
            Data4 = bytes.ReadInt();
            Data5 = bytes.ReadUTF();
            GetTpye = bytes.ReadInt();
            LinkedUI = bytes.ReadUTF();
            Lore = bytes.ReadUTF();
            Lv = bytes.ReadInt();
            State = bytes.ReadInt();
            VipLv = bytes.ReadInt();
            ItemGrop = bytes.ReadInt();
            OneKeyUse = bytes.ReadInt();
            BatchUse = bytes.ReadInt();
            GetWay = bytes.ReadUTF();
            IsAutoUse = bytes.ReadInt();
            IsPush = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Notes1);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Notes2);
            bytes.WriteInt(Type);
            bytes.WriteInt(SubType);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Data3);
            bytes.WriteInt(Data4);
            bytes.WriteUTF(Data5);
            bytes.WriteInt(GetTpye);
            bytes.WriteUTF(LinkedUI);
            bytes.WriteUTF(Lore);
            bytes.WriteInt(Lv);
            bytes.WriteInt(State);
            bytes.WriteInt(VipLv);
            bytes.WriteInt(ItemGrop);
            bytes.WriteInt(OneKeyUse);
            bytes.WriteInt(BatchUse);
            bytes.WriteUTF(GetWay);
            bytes.WriteInt(IsAutoUse);
            bytes.WriteInt(IsPush);
        }
    }

    public class PropItemTemplateMode : TplMode
    {
        private IList<PropItemTemplate> mList = null;

        public PropItemTemplateMode(int step) : base("PropItemTemplate", typeof(PropItemTemplate), step) { }

        public PropItemTemplate this[int id]
        {
            get { return Find<PropItemTemplate>(id); }
        }

        public PropItemTemplate Find(int id)
        {
            return Find<PropItemTemplate>(id);
        }

        public IList<PropItemTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PropItemTemplate>();
            return mList;
        }
    }

public class PlayerEventTemplate : Tpl
    {
        /// <summary>
        /// 计次时间
        /// </summary>
        public int CountDate;
        /// <summary>
        /// 触发次数
        /// </summary>
        public int TriggerTimes;
        /// <summary>
        /// 提示文本
        /// </summary>
        public string ShowTxt;
        /// <summary>
        /// 弹窗UI
        /// </summary>
        public string ShowWindow;
        /// <summary>
        /// 弹窗文本
        /// </summary>
        public string WindowTxt;
        /// <summary>
        /// 获得物品
        /// </summary>
        public string Items;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 参数3
        /// </summary>
        public string Data3;
        /// <summary>
        /// 参数4
        /// </summary>
        public string Data4;
        /// <summary>
        /// 备注
        /// </summary>
        public string Remake;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            CountDate = bytes.ReadInt();
            TriggerTimes = bytes.ReadInt();
            ShowTxt = bytes.ReadUTF();
            ShowWindow = bytes.ReadUTF();
            WindowTxt = bytes.ReadUTF();
            Items = bytes.ReadUTF();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Data3 = bytes.ReadUTF();
            Data4 = bytes.ReadUTF();
            Remake = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(CountDate);
            bytes.WriteInt(TriggerTimes);
            bytes.WriteUTF(ShowTxt);
            bytes.WriteUTF(ShowWindow);
            bytes.WriteUTF(WindowTxt);
            bytes.WriteUTF(Items);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteUTF(Data3);
            bytes.WriteUTF(Data4);
            bytes.WriteUTF(Remake);
        }
    }

    public class PlayerEventTemplateMode : TplMode
    {
        private IList<PlayerEventTemplate> mList = null;

        public PlayerEventTemplateMode(int step) : base("PlayerEventTemplate", typeof(PlayerEventTemplate), step) { }

        public PlayerEventTemplate this[int id]
        {
            get { return Find<PlayerEventTemplate>(id); }
        }

        public PlayerEventTemplate Find(int id)
        {
            return Find<PlayerEventTemplate>(id);
        }

        public IList<PlayerEventTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PlayerEventTemplate>();
            return mList;
        }
    }

public class DungeonTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 提示美术字id
        /// </summary>
        public int TitleAssetID;
        /// <summary>
        /// 是否开启
        /// </summary>
        public int IsShow;
        /// <summary>
        /// 每日进入次数
        /// </summary>
        public int DayTime;
        /// <summary>
        /// 副本排序
        /// （材料副本用）
        /// </summary>
        public int DungeonSort;
        /// <summary>
        /// 1为单人副本,0是非单人的，队伍模版，其他数字为限定数字
        /// </summary>
        public int IsSingleDungeon;
        /// <summary>
        /// 创建副本队长花费
        /// </summary>
        public int CreateDungeonCost;
        /// <summary>
        /// 进入副本赠送物品
        /// </summary>
        public string JoinGoodSGet;
        /// <summary>
        /// 副本奖励
        /// </summary>
        public string Bonus;
        /// <summary>
        /// 扫荡道具奖励
        /// </summary>
        public string SweepBonus;
        /// <summary>
        /// 参数1
        /// </summary>
        public int param1;
        /// <summary>
        /// 经验奖励
        /// </summary>
        public int ExpBonus;
        /// <summary>
        /// 绑定金币奖励
        /// </summary>
        public int BindGoinBonus;
        /// <summary>
        /// 扫荡消耗
        /// 货币类型
        /// </summary>
        public int SweepBonusCost;
        /// <summary>
        /// 普通扫荡消耗
        /// 货币数量
        /// </summary>
        public int SweepBonusCost1;
        /// <summary>
        /// 2倍奖励消耗
        /// </summary>
        public int DoubleCost;
        /// <summary>
        /// 3倍奖励消耗
        /// </summary>
        public int TripleCost;
        /// <summary>
        /// 4倍领奖消耗
        /// </summary>
        public int FourfoldCost;
        /// <summary>
        /// 5倍领奖消耗
        /// </summary>
        public int FivefoldCost;
        /// <summary>
        /// 6倍领奖消耗
        /// </summary>
        public int SixfoldCost;
        /// <summary>
        /// 8倍领奖消耗
        /// </summary>
        public int EightfoldCost;
        /// <summary>
        /// 随机奖励
        /// </summary>
        public string RandomBonus;
        /// <summary>
        /// 额外奖励
        /// </summary>
        public string Additional;
        /// <summary>
        /// 副本时间(秒)
        /// </summary>
        public int DungeonTime;
        /// <summary>
        /// 副本完成后传送时间(秒)
        /// </summary>
        public int TransmitTime;
        /// <summary>
        /// 副本额外目标
        /// </summary>
        public string Date;
        /// <summary>
        /// 传送阵是否默认为开
        /// </summary>
        public int IsTransferMatrixOpen;
        /// <summary>
        /// 出来后是否回到进入前坐标
        /// （0，代表不会到进入前坐标，回到配置点，1，代表回到进入副本前坐标）
        /// </summary>
        public int BackPosition;
        /// <summary>
        /// 离开副本时需要清楚的道具
        /// </summary>
        public string LeaveGoodSClean;
        /// <summary>
        /// 副本弹出提示
        /// （通天塔用）
        /// </summary>
        public string TowerTxt;
        /// <summary>
        /// 扫荡掉落包组
        /// </summary>
        public string SweepDropGroup;
        /// <summary>
        /// 扫荡怪物掉落
        /// </summary>
        public string SweepBossDrop;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            TitleAssetID = bytes.ReadInt();
            IsShow = bytes.ReadInt();
            DayTime = bytes.ReadInt();
            DungeonSort = bytes.ReadInt();
            IsSingleDungeon = bytes.ReadInt();
            CreateDungeonCost = bytes.ReadInt();
            JoinGoodSGet = bytes.ReadUTF();
            Bonus = bytes.ReadUTF();
            SweepBonus = bytes.ReadUTF();
            param1 = bytes.ReadInt();
            ExpBonus = bytes.ReadInt();
            BindGoinBonus = bytes.ReadInt();
            SweepBonusCost = bytes.ReadInt();
            SweepBonusCost1 = bytes.ReadInt();
            DoubleCost = bytes.ReadInt();
            TripleCost = bytes.ReadInt();
            FourfoldCost = bytes.ReadInt();
            FivefoldCost = bytes.ReadInt();
            SixfoldCost = bytes.ReadInt();
            EightfoldCost = bytes.ReadInt();
            RandomBonus = bytes.ReadUTF();
            Additional = bytes.ReadUTF();
            DungeonTime = bytes.ReadInt();
            TransmitTime = bytes.ReadInt();
            Date = bytes.ReadUTF();
            IsTransferMatrixOpen = bytes.ReadInt();
            BackPosition = bytes.ReadInt();
            LeaveGoodSClean = bytes.ReadUTF();
            TowerTxt = bytes.ReadUTF();
            SweepDropGroup = bytes.ReadUTF();
            SweepBossDrop = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(TitleAssetID);
            bytes.WriteInt(IsShow);
            bytes.WriteInt(DayTime);
            bytes.WriteInt(DungeonSort);
            bytes.WriteInt(IsSingleDungeon);
            bytes.WriteInt(CreateDungeonCost);
            bytes.WriteUTF(JoinGoodSGet);
            bytes.WriteUTF(Bonus);
            bytes.WriteUTF(SweepBonus);
            bytes.WriteInt(param1);
            bytes.WriteInt(ExpBonus);
            bytes.WriteInt(BindGoinBonus);
            bytes.WriteInt(SweepBonusCost);
            bytes.WriteInt(SweepBonusCost1);
            bytes.WriteInt(DoubleCost);
            bytes.WriteInt(TripleCost);
            bytes.WriteInt(FourfoldCost);
            bytes.WriteInt(FivefoldCost);
            bytes.WriteInt(SixfoldCost);
            bytes.WriteInt(EightfoldCost);
            bytes.WriteUTF(RandomBonus);
            bytes.WriteUTF(Additional);
            bytes.WriteInt(DungeonTime);
            bytes.WriteInt(TransmitTime);
            bytes.WriteUTF(Date);
            bytes.WriteInt(IsTransferMatrixOpen);
            bytes.WriteInt(BackPosition);
            bytes.WriteUTF(LeaveGoodSClean);
            bytes.WriteUTF(TowerTxt);
            bytes.WriteUTF(SweepDropGroup);
            bytes.WriteUTF(SweepBossDrop);
        }
    }

    public class DungeonTemplateMode : TplMode
    {
        private IList<DungeonTemplate> mList = null;

        public DungeonTemplateMode(int step) : base("DungeonTemplate", typeof(DungeonTemplate), step) { }

        public DungeonTemplate this[int id]
        {
            get { return Find<DungeonTemplate>(id); }
        }

        public DungeonTemplate Find(int id)
        {
            return Find<DungeonTemplate>(id);
        }

        public IList<DungeonTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DungeonTemplate>();
            return mList;
        }
    }

public class OptionTemplate : Tpl
    {
        /// <summary>
        /// 页签类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 页签子类型
        /// </summary>
        public int SubType;
        /// <summary>
        /// 职业显示
        /// </summary>
        public int Job;
        /// <summary>
        /// 是否默认勾选
        /// </summary>
        public int Select;
        /// <summary>
        /// 自动使用
        /// </summary>
        public string AutoUse;
        /// <summary>
        /// 高级自动使用
        /// </summary>
        public string AdvancedAutoUse;
        /// <summary>
        /// 下拉可显示的物品
        /// </summary>
        public string ItemSelect;
        /// <summary>
        /// 自动使用默认显示的血量万分比
        /// </summary>
        public int Percent;
        /// <summary>
        /// 外显选项使用资源
        /// </summary>
        public string ShowResources;
        /// <summary>
        /// 选项描述
        /// </summary>
        public string Txt;
        /// <summary>
        /// 选项说明tips
        /// </summary>
        public string TipsTxt;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            SubType = bytes.ReadInt();
            Job = bytes.ReadInt();
            Select = bytes.ReadInt();
            AutoUse = bytes.ReadUTF();
            AdvancedAutoUse = bytes.ReadUTF();
            ItemSelect = bytes.ReadUTF();
            Percent = bytes.ReadInt();
            ShowResources = bytes.ReadUTF();
            Txt = bytes.ReadUTF();
            TipsTxt = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(SubType);
            bytes.WriteInt(Job);
            bytes.WriteInt(Select);
            bytes.WriteUTF(AutoUse);
            bytes.WriteUTF(AdvancedAutoUse);
            bytes.WriteUTF(ItemSelect);
            bytes.WriteInt(Percent);
            bytes.WriteUTF(ShowResources);
            bytes.WriteUTF(Txt);
            bytes.WriteUTF(TipsTxt);
        }
    }

    public class OptionTemplateMode : TplMode
    {
        private IList<OptionTemplate> mList = null;

        public OptionTemplateMode(int step) : base("OptionTemplate", typeof(OptionTemplate), step) { }

        public OptionTemplate this[int id]
        {
            get { return Find<OptionTemplate>(id); }
        }

        public OptionTemplate Find(int id)
        {
            return Find<OptionTemplate>(id);
        }

        public IList<OptionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<OptionTemplate>();
            return mList;
        }
    }

public class NoticeParameterColorTemplate : Tpl
    {
        /// <summary>
        /// 备注
        /// </summary>
        public string Remarks;
        /// <summary>
        /// 颜色
        /// </summary>
        public string Color;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Remarks = bytes.ReadUTF();
            Color = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Remarks);
            bytes.WriteUTF(Color);
        }
    }

    public class NoticeParameterColorTemplateMode : TplMode
    {
        private IList<NoticeParameterColorTemplate> mList = null;

        public NoticeParameterColorTemplateMode(int step) : base("NoticeParameterColorTemplate", typeof(NoticeParameterColorTemplate), step) { }

        public NoticeParameterColorTemplate this[int id]
        {
            get { return Find<NoticeParameterColorTemplate>(id); }
        }

        public NoticeParameterColorTemplate Find(int id)
        {
            return Find<NoticeParameterColorTemplate>(id);
        }

        public IList<NoticeParameterColorTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NoticeParameterColorTemplate>();
            return mList;
        }
    }

public class NewNoticeTemplate : Tpl
    {
        /// <summary>
        /// 种类
        /// </summary>
        public int BroadCastType;
        /// <summary>
        /// 颜色类型（0.没有颜色1.金黄色2.红色）
        /// </summary>
        public int ColorType;
        /// <summary>
        /// 公告类型
        /// </summary>
        public int NoticeType;
        /// <summary>
        /// 播报次数（0-循环）
        /// </summary>
        public int BroadCastFrequency;
        /// <summary>
        /// 开服第几天停止播放
        /// </summary>
        public int StopPlay;
        /// <summary>
        /// 请看批注
        /// </summary>
        public int NeedType;
        /// <summary>
        /// 播报需求前端显示
        /// </summary>
        public string BroadCastParameterType;
        /// <summary>
        /// 显示文本
        /// </summary>
        public string RealText;
        /// <summary>
        /// 事件描述备注
        /// （策划用）
        /// </summary>
        public string EventLore;
        /// <summary>
        /// 事件文本
        /// </summary>
        public string EventText;
        /// <summary>
        /// 事件ID
        /// </summary>
        public int EventID;
        /// <summary>
        /// 事件参数
        /// </summary>
        public string EventDate;
        /// <summary>
        /// 事件ID
        /// 1.传送至NPC身边并打开面板
        /// ①神器密库
        /// ②深渊魔域
        /// ③跨服天下布武
        /// </summary>
        public int NpcUI;
        /// <summary>
        /// 打开界面参数
        /// </summary>
        public string OpenUI;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            BroadCastType = bytes.ReadInt();
            ColorType = bytes.ReadInt();
            NoticeType = bytes.ReadInt();
            BroadCastFrequency = bytes.ReadInt();
            StopPlay = bytes.ReadInt();
            NeedType = bytes.ReadInt();
            BroadCastParameterType = bytes.ReadUTF();
            RealText = bytes.ReadUTF();
            EventLore = bytes.ReadUTF();
            EventText = bytes.ReadUTF();
            EventID = bytes.ReadInt();
            EventDate = bytes.ReadUTF();
            NpcUI = bytes.ReadInt();
            OpenUI = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(BroadCastType);
            bytes.WriteInt(ColorType);
            bytes.WriteInt(NoticeType);
            bytes.WriteInt(BroadCastFrequency);
            bytes.WriteInt(StopPlay);
            bytes.WriteInt(NeedType);
            bytes.WriteUTF(BroadCastParameterType);
            bytes.WriteUTF(RealText);
            bytes.WriteUTF(EventLore);
            bytes.WriteUTF(EventText);
            bytes.WriteInt(EventID);
            bytes.WriteUTF(EventDate);
            bytes.WriteInt(NpcUI);
            bytes.WriteUTF(OpenUI);
        }
    }

    public class NewNoticeTemplateMode : TplMode
    {
        private IList<NewNoticeTemplate> mList = null;

        public NewNoticeTemplateMode(int step) : base("NewNoticeTemplate", typeof(NewNoticeTemplate), step) { }

        public NewNoticeTemplate this[int id]
        {
            get { return Find<NewNoticeTemplate>(id); }
        }

        public NewNoticeTemplate Find(int id)
        {
            return Find<NewNoticeTemplate>(id);
        }

        public IList<NewNoticeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NewNoticeTemplate>();
            return mList;
        }
    }

public class FunctionUseTipTemplate : Tpl
    {
        /// <summary>
        /// 功能名称
        /// </summary>
        public string FunctionName;
        /// <summary>
        /// 按钮资源
        /// </summary>
        public string ButtonAsset;
        /// <summary>
        /// 打开ui面板
        /// </summary>
        public int OpenUI;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            FunctionName = bytes.ReadUTF();
            ButtonAsset = bytes.ReadUTF();
            OpenUI = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(FunctionName);
            bytes.WriteUTF(ButtonAsset);
            bytes.WriteInt(OpenUI);
        }
    }

    public class FunctionUseTipTemplateMode : TplMode
    {
        private IList<FunctionUseTipTemplate> mList = null;

        public FunctionUseTipTemplateMode(int step) : base("FunctionUseTipTemplate", typeof(FunctionUseTipTemplate), step) { }

        public FunctionUseTipTemplate this[int id]
        {
            get { return Find<FunctionUseTipTemplate>(id); }
        }

        public FunctionUseTipTemplate Find(int id)
        {
            return Find<FunctionUseTipTemplate>(id);
        }

        public IList<FunctionUseTipTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FunctionUseTipTemplate>();
            return mList;
        }
    }

public class FunctionOpenTemplate : Tpl
    {
        /// <summary>
        /// 功能名称
        /// </summary>
        public string FunctionName;
        /// <summary>
        /// 开放等级
        /// </summary>
        public int OpenLV;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int StateLevel;
        /// <summary>
        /// Vip等级
        /// </summary>
        public int OpenVipLV;
        /// <summary>
        /// 行会等级
        /// </summary>
        public int GuildLV;
        /// <summary>
        /// 任务ID
        /// </summary>
        public int MainTask;
        /// <summary>
        /// 是否合服后开启（1，代表需要合服开启，0代表不需要合服就能开启）
        /// </summary>
        public int CombinedService;
        /// <summary>
        /// 开服第几天开启
        /// </summary>
        public int NeedOpenDay;
        /// <summary>
        /// 等级达到多少关闭（0代表不关闭）
        /// </summary>
        public int CloseLV;
        /// <summary>
        /// 开服第几天关闭（0代表不关闭）
        /// </summary>
        public int CloseDay;
        /// <summary>
        /// 功能开启提示方式
        /// 0=无提示 1=左侧提示 2=左上提示
        /// </summary>
        public int TipType;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 左侧下一个提示
        /// </summary>
        public int NextFunctionID;
        /// <summary>
        /// 提前多少级提示
        /// </summary>
        public int LvShow;
        /// <summary>
        /// 功能开启美术资源图标
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 功能展示图片资源ID
        /// </summary>
        public int ShowID;
        /// <summary>
        /// 按钮资源ID
        /// </summary>
        public string ButtonImageID;
        /// <summary>
        /// 功能名称资源ID
        /// </summary>
        public int NameID;
        /// <summary>
        /// Tips文本
        /// </summary>
        public string TipsText;
        /// <summary>
        /// 屏幕中小提醒停留时间（秒）
        /// </summary>
        public int DelayTime;
        /// <summary>
        /// 心魔等阶要求
        /// </summary>
        public int DemoLv;
        /// <summary>
        /// 官职等级
        /// </summary>
        public int OfficalLV;
        /// <summary>
        /// 是否开启飞框提示
        /// </summary>
        public int IsPointOut;
        /// <summary>
        /// 提示按钮名称
        /// </summary>
        public string PointOutButton;
        /// <summary>
        /// 引导步骤
        /// </summary>
        public string GuidStep;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            FunctionName = bytes.ReadUTF();
            OpenLV = bytes.ReadInt();
            StateLevel = bytes.ReadInt();
            OpenVipLV = bytes.ReadInt();
            GuildLV = bytes.ReadInt();
            MainTask = bytes.ReadInt();
            CombinedService = bytes.ReadInt();
            NeedOpenDay = bytes.ReadInt();
            CloseLV = bytes.ReadInt();
            CloseDay = bytes.ReadInt();
            TipType = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            NextFunctionID = bytes.ReadInt();
            LvShow = bytes.ReadInt();
            AssetID = bytes.ReadInt();
            ShowID = bytes.ReadInt();
            ButtonImageID = bytes.ReadUTF();
            NameID = bytes.ReadInt();
            TipsText = bytes.ReadUTF();
            DelayTime = bytes.ReadInt();
            DemoLv = bytes.ReadInt();
            OfficalLV = bytes.ReadInt();
            IsPointOut = bytes.ReadInt();
            PointOutButton = bytes.ReadUTF();
            GuidStep = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(FunctionName);
            bytes.WriteInt(OpenLV);
            bytes.WriteInt(StateLevel);
            bytes.WriteInt(OpenVipLV);
            bytes.WriteInt(GuildLV);
            bytes.WriteInt(MainTask);
            bytes.WriteInt(CombinedService);
            bytes.WriteInt(NeedOpenDay);
            bytes.WriteInt(CloseLV);
            bytes.WriteInt(CloseDay);
            bytes.WriteInt(TipType);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(NextFunctionID);
            bytes.WriteInt(LvShow);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(ShowID);
            bytes.WriteUTF(ButtonImageID);
            bytes.WriteInt(NameID);
            bytes.WriteUTF(TipsText);
            bytes.WriteInt(DelayTime);
            bytes.WriteInt(DemoLv);
            bytes.WriteInt(OfficalLV);
            bytes.WriteInt(IsPointOut);
            bytes.WriteUTF(PointOutButton);
            bytes.WriteUTF(GuidStep);
        }
    }

    public class FunctionOpenTemplateMode : TplMode
    {
        private IList<FunctionOpenTemplate> mList = null;

        public FunctionOpenTemplateMode(int step) : base("FunctionOpenTemplate", typeof(FunctionOpenTemplate), step) { }

        public FunctionOpenTemplate this[int id]
        {
            get { return Find<FunctionOpenTemplate>(id); }
        }

        public FunctionOpenTemplate Find(int id)
        {
            return Find<FunctionOpenTemplate>(id);
        }

        public IList<FunctionOpenTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FunctionOpenTemplate>();
            return mList;
        }
    }

public class FunctionOpen1Template : Tpl
    {
        /// <summary>
        /// 功能名称
        /// </summary>
        public string FunctionName;
        /// <summary>
        /// 开放等级
        /// </summary>
        public int OpenLV;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int StateLevel;
        /// <summary>
        /// Vip等级
        /// </summary>
        public int OpenVipLV;
        /// <summary>
        /// 行会等级
        /// </summary>
        public int GuildLV;
        /// <summary>
        /// 任务ID
        /// </summary>
        public int MainTask;
        /// <summary>
        /// 是否合服后开启（1，代表需要合服开启，0代表不需要合服就能开启）
        /// </summary>
        public int CombinedService;
        /// <summary>
        /// 开服第几天开启
        /// </summary>
        public int NeedOpenDay;
        /// <summary>
        /// 等级达到多少关闭（0代表不关闭）
        /// </summary>
        public int CloseLV;
        /// <summary>
        /// 开服第几天关闭（0代表不关闭）
        /// </summary>
        public int CloseDay;
        /// <summary>
        /// 功能开启提示方式
        /// 0=无提示 1=左侧提示 2=左上提示
        /// </summary>
        public int TipType;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 左侧下一个提示
        /// </summary>
        public int NextFunctionID;
        /// <summary>
        /// 提前多少级提示
        /// </summary>
        public int LvShow;
        /// <summary>
        /// 功能开启美术资源图标
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 功能展示图片资源ID
        /// </summary>
        public int ShowID;
        /// <summary>
        /// 按钮资源ID
        /// </summary>
        public string ButtonImageID;
        /// <summary>
        /// 功能名称资源ID
        /// </summary>
        public int NameID;
        /// <summary>
        /// Tips文本
        /// </summary>
        public string TipsText;
        /// <summary>
        /// 屏幕中小提醒停留时间（秒）
        /// </summary>
        public int DelayTime;
        /// <summary>
        /// 心魔等阶要求
        /// </summary>
        public int DemoLv;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            FunctionName = bytes.ReadUTF();
            OpenLV = bytes.ReadInt();
            StateLevel = bytes.ReadInt();
            OpenVipLV = bytes.ReadInt();
            GuildLV = bytes.ReadInt();
            MainTask = bytes.ReadInt();
            CombinedService = bytes.ReadInt();
            NeedOpenDay = bytes.ReadInt();
            CloseLV = bytes.ReadInt();
            CloseDay = bytes.ReadInt();
            TipType = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            NextFunctionID = bytes.ReadInt();
            LvShow = bytes.ReadInt();
            AssetID = bytes.ReadInt();
            ShowID = bytes.ReadInt();
            ButtonImageID = bytes.ReadUTF();
            NameID = bytes.ReadInt();
            TipsText = bytes.ReadUTF();
            DelayTime = bytes.ReadInt();
            DemoLv = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(FunctionName);
            bytes.WriteInt(OpenLV);
            bytes.WriteInt(StateLevel);
            bytes.WriteInt(OpenVipLV);
            bytes.WriteInt(GuildLV);
            bytes.WriteInt(MainTask);
            bytes.WriteInt(CombinedService);
            bytes.WriteInt(NeedOpenDay);
            bytes.WriteInt(CloseLV);
            bytes.WriteInt(CloseDay);
            bytes.WriteInt(TipType);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(NextFunctionID);
            bytes.WriteInt(LvShow);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(ShowID);
            bytes.WriteUTF(ButtonImageID);
            bytes.WriteInt(NameID);
            bytes.WriteUTF(TipsText);
            bytes.WriteInt(DelayTime);
            bytes.WriteInt(DemoLv);
        }
    }

    public class FunctionOpen1TemplateMode : TplMode
    {
        private IList<FunctionOpen1Template> mList = null;

        public FunctionOpen1TemplateMode(int step) : base("FunctionOpen1Template", typeof(FunctionOpen1Template), step) { }

        public FunctionOpen1Template this[int id]
        {
            get { return Find<FunctionOpen1Template>(id); }
        }

        public FunctionOpen1Template Find(int id)
        {
            return Find<FunctionOpen1Template>(id);
        }

        public IList<FunctionOpen1Template> FindAll()
        {
            if (mList == null) mList = FindAll<FunctionOpen1Template>();
            return mList;
        }
    }

public class FunctionGuideTemplate : Tpl
    {
        /// <summary>
        /// 下一个TID
        /// </summary>
        public int Rank;
        /// <summary>
        /// 策划备注
        /// </summary>
        public string Remarks;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 特效ID
        /// </summary>
        public string EffectID;
        /// <summary>
        /// 打开对应界面
        /// </summary>
        public int OpenUI;
        /// <summary>
        /// 页签索引
        /// </summary>
        public int TabIndex;
        /// <summary>
        /// 引导步骤
        /// </summary>
        public string GuideStep;
        /// <summary>
        /// 完成条件
        /// </summary>
        public int data1;
        /// <summary>
        /// 功能开启表ID
        /// </summary>
        public int data2;
        /// <summary>
        /// 描述
        /// </summary>
        public string Describe;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Rank = bytes.ReadInt();
            Remarks = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            EffectID = bytes.ReadUTF();
            OpenUI = bytes.ReadInt();
            TabIndex = bytes.ReadInt();
            GuideStep = bytes.ReadUTF();
            data1 = bytes.ReadInt();
            data2 = bytes.ReadInt();
            Describe = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Rank);
            bytes.WriteUTF(Remarks);
            bytes.WriteInt(Type);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteUTF(EffectID);
            bytes.WriteInt(OpenUI);
            bytes.WriteInt(TabIndex);
            bytes.WriteUTF(GuideStep);
            bytes.WriteInt(data1);
            bytes.WriteInt(data2);
            bytes.WriteUTF(Describe);
        }
    }

    public class FunctionGuideTemplateMode : TplMode
    {
        private IList<FunctionGuideTemplate> mList = null;

        public FunctionGuideTemplateMode(int step) : base("FunctionGuideTemplate", typeof(FunctionGuideTemplate), step) { }

        public FunctionGuideTemplate this[int id]
        {
            get { return Find<FunctionGuideTemplate>(id); }
        }

        public FunctionGuideTemplate Find(int id)
        {
            return Find<FunctionGuideTemplate>(id);
        }

        public IList<FunctionGuideTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FunctionGuideTemplate>();
            return mList;
        }
    }

public class NationalTreasureTemplate : Tpl
    {
        /// <summary>
        /// 分页
        /// </summary>
        public int Type;
        /// <summary>
        /// 图鉴编号
        /// </summary>
        public int SubType;
        /// <summary>
        /// 图鉴等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 描述
        /// </summary>
        public string Describe;
        /// <summary>
        /// 升级所需物品及个数
        /// </summary>
        public string GoodsNum;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int Notice;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            SubType = bytes.ReadInt();
            Lv = bytes.ReadInt();
            Icon = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Describe = bytes.ReadUTF();
            GoodsNum = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Notice = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(SubType);
            bytes.WriteInt(Lv);
            bytes.WriteInt(Icon);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Describe);
            bytes.WriteUTF(GoodsNum);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Notice);
        }
    }

    public class NationalTreasureTemplateMode : TplMode
    {
        private IList<NationalTreasureTemplate> mList = null;

        public NationalTreasureTemplateMode(int step) : base("NationalTreasureTemplate", typeof(NationalTreasureTemplate), step) { }

        public NationalTreasureTemplate this[int id]
        {
            get { return Find<NationalTreasureTemplate>(id); }
        }

        public NationalTreasureTemplate Find(int id)
        {
            return Find<NationalTreasureTemplate>(id);
        }

        public IList<NationalTreasureTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NationalTreasureTemplate>();
            return mList;
        }
    }

public class NationalTreasureSuitTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 等级需求
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 数量
        /// </summary>
        public int Num;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 经验加成
        /// </summary>
        public int ExtraAddExp;
        /// <summary>
        /// 套装描述
        /// </summary>
        public string Des;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            Num = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            ExtraAddExp = bytes.ReadInt();
            Des = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(Num);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(ExtraAddExp);
            bytes.WriteUTF(Des);
        }
    }

    public class NationalTreasureSuitTemplateMode : TplMode
    {
        private IList<NationalTreasureSuitTemplate> mList = null;

        public NationalTreasureSuitTemplateMode(int step) : base("NationalTreasureSuitTemplate", typeof(NationalTreasureSuitTemplate), step) { }

        public NationalTreasureSuitTemplate this[int id]
        {
            get { return Find<NationalTreasureSuitTemplate>(id); }
        }

        public NationalTreasureSuitTemplate Find(int id)
        {
            return Find<NationalTreasureSuitTemplate>(id);
        }

        public IList<NationalTreasureSuitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NationalTreasureSuitTemplate>();
            return mList;
        }
    }

public class OfficialSealTemplate : Tpl
    {
        /// <summary>
        /// 消耗俸禄
        /// </summary>
        public int ExpLv;
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 展示icon
        /// </summary>
        public int ShowIcon;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 需要道具id
        /// </summary>
        public int NeedItem;
        /// <summary>
        /// 需要道具数目
        /// </summary>
        public int NeedItemNum;
        /// <summary>
        /// 所需货币类型
        /// </summary>
        public int NeedCurrency;
        /// <summary>
        /// 所需货币数量
        /// </summary>
        public int NeedCurrencyNum;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ExpLv = bytes.ReadInt();
            Name = bytes.ReadUTF();
            ShowIcon = bytes.ReadInt();
            Level = bytes.ReadInt();
            NeedItem = bytes.ReadInt();
            NeedItemNum = bytes.ReadInt();
            NeedCurrency = bytes.ReadInt();
            NeedCurrencyNum = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ExpLv);
            bytes.WriteUTF(Name);
            bytes.WriteInt(ShowIcon);
            bytes.WriteInt(Level);
            bytes.WriteInt(NeedItem);
            bytes.WriteInt(NeedItemNum);
            bytes.WriteInt(NeedCurrency);
            bytes.WriteInt(NeedCurrencyNum);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(NoticeID);
        }
    }

    public class OfficialSealTemplateMode : TplMode
    {
        private IList<OfficialSealTemplate> mList = null;

        public OfficialSealTemplateMode(int step) : base("OfficialSealTemplate", typeof(OfficialSealTemplate), step) { }

        public OfficialSealTemplate this[int id]
        {
            get { return Find<OfficialSealTemplate>(id); }
        }

        public OfficialSealTemplate Find(int id)
        {
            return Find<OfficialSealTemplate>(id);
        }

        public IList<OfficialSealTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<OfficialSealTemplate>();
            return mList;
        }
    }

public class OfficialTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 展示icon
        /// </summary>
        public int ShowIcon;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 描述
        /// </summary>
        public string Detail;
        /// <summary>
        /// 认证装备境界
        /// </summary>
        public int EquipLevel;
        /// <summary>
        /// 装备数量
        /// </summary>
        public int EquipNumber;
        /// <summary>
        /// 需要道具id
        /// </summary>
        public int NeedItem;
        /// <summary>
        /// 需要道具数目
        /// </summary>
        public int NeedItemNum;
        /// <summary>
        /// 战士名称
        /// </summary>
        public string Name1;
        /// <summary>
        /// 法师名称
        /// </summary>
        public string Name2;
        /// <summary>
        /// 道士名称
        /// </summary>
        public string Name3;
        /// <summary>
        /// 消耗功勋
        /// </summary>
        public int ExpLv;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int CostGoldType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int CostGold;
        /// <summary>
        /// 战士对应图标
        /// </summary>
        public int Icon1;
        /// <summary>
        /// 法师对应图标
        /// </summary>
        public int Icon2;
        /// <summary>
        /// 道士对应图标
        /// </summary>
        public int Icon3;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 魔攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 魔攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 对BOSS增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 额外内力经验
        /// </summary>
        public int AddEnergyExp;
        /// <summary>
        /// 生命百分比
        /// </summary>
        public int HpCent;
        /// <summary>
        /// 诱惑等级
        /// </summary>
        public int ConfuseLv;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            ShowIcon = bytes.ReadInt();
            Level = bytes.ReadInt();
            Career = bytes.ReadInt();
            Detail = bytes.ReadUTF();
            EquipLevel = bytes.ReadInt();
            EquipNumber = bytes.ReadInt();
            NeedItem = bytes.ReadInt();
            NeedItemNum = bytes.ReadInt();
            Name1 = bytes.ReadUTF();
            Name2 = bytes.ReadUTF();
            Name3 = bytes.ReadUTF();
            ExpLv = bytes.ReadInt();
            CostGoldType = bytes.ReadInt();
            CostGold = bytes.ReadInt();
            Icon1 = bytes.ReadInt();
            Icon2 = bytes.ReadInt();
            Icon3 = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            AddEnergyExp = bytes.ReadInt();
            HpCent = bytes.ReadInt();
            ConfuseLv = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(ShowIcon);
            bytes.WriteInt(Level);
            bytes.WriteInt(Career);
            bytes.WriteUTF(Detail);
            bytes.WriteInt(EquipLevel);
            bytes.WriteInt(EquipNumber);
            bytes.WriteInt(NeedItem);
            bytes.WriteInt(NeedItemNum);
            bytes.WriteUTF(Name1);
            bytes.WriteUTF(Name2);
            bytes.WriteUTF(Name3);
            bytes.WriteInt(ExpLv);
            bytes.WriteInt(CostGoldType);
            bytes.WriteInt(CostGold);
            bytes.WriteInt(Icon1);
            bytes.WriteInt(Icon2);
            bytes.WriteInt(Icon3);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(AddEnergyExp);
            bytes.WriteInt(HpCent);
            bytes.WriteInt(ConfuseLv);
            bytes.WriteInt(NoticeID);
        }
    }

    public class OfficialTemplateMode : TplMode
    {
        private IList<OfficialTemplate> mList = null;

        public OfficialTemplateMode(int step) : base("OfficialTemplate", typeof(OfficialTemplate), step) { }

        public OfficialTemplate this[int id]
        {
            get { return Find<OfficialTemplate>(id); }
        }

        public OfficialTemplate Find(int id)
        {
            return Find<OfficialTemplate>(id);
        }

        public IList<OfficialTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<OfficialTemplate>();
            return mList;
        }
    }

public class MonsterTeamTemplate : Tpl
    {
        /// <summary>
        /// 怪物id组
        /// </summary>
        public string MonsterID;
        /// <summary>
        /// 前端显示名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 前端显示等级
        /// </summary>
        public int ShowLv;
        /// <summary>
        /// 备注（策划用
        /// </summary>
        public string Detail;
        /// <summary>
        /// 小地图显示名称
        /// </summary>
        public string MapName;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MonsterID = bytes.ReadUTF();
            Name = bytes.ReadUTF();
            ShowLv = bytes.ReadInt();
            Detail = bytes.ReadUTF();
            MapName = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(MonsterID);
            bytes.WriteUTF(Name);
            bytes.WriteInt(ShowLv);
            bytes.WriteUTF(Detail);
            bytes.WriteUTF(MapName);
        }
    }

    public class MonsterTeamTemplateMode : TplMode
    {
        private IList<MonsterTeamTemplate> mList = null;

        public MonsterTeamTemplateMode(int step) : base("MonsterTeamTemplate", typeof(MonsterTeamTemplate), step) { }

        public MonsterTeamTemplate this[int id]
        {
            get { return Find<MonsterTeamTemplate>(id); }
        }

        public MonsterTeamTemplate Find(int id)
        {
            return Find<MonsterTeamTemplate>(id);
        }

        public IList<MonsterTeamTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MonsterTeamTemplate>();
            return mList;
        }
    }

public class MonsterTemplate : Tpl
    {
        /// <summary>
        /// 怪物资源ID
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 泡泡规则
        /// （0：没有泡泡
        /// 1：见面说话
        /// 2：随机说话）前端优化性能已经修改了规则，现在1已经无效，2只会在第一次加载的时候判定是否会说话，如果会则每个8秒说一次，如果不会，则在重新加载前不会再说话
        /// 3：下跪说话：大刀守卫用
        /// </summary>
        public int SpeakType;
        /// <summary>
        /// 说话随机几率
        /// (50代表每秒有1/（50+1）几率说话)
        /// </summary>
        public int SpeakOdds;
        /// <summary>
        /// boss大类
        /// </summary>
        public int Type;
        /// <summary>
        /// 怪物光环
        /// </summary>
        public int Halo;
        /// <summary>
        /// BOSS子类型
        /// </summary>
        public int SubType;
        /// <summary>
        /// （手动填）怪物种族:
        /// 1.生物系
        /// 2.妖魔系
        /// 3.神灵系
        /// </summary>
        public int RaceType;
        /// <summary>
        /// 等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 怪物组
        /// </summary>
        public int GroupID;
        /// <summary>
        /// 对应魂兽组
        /// （道士还魂术）
        /// </summary>
        public int PetGroupID;
        /// <summary>
        /// 场景资源镜像（0不使用镜像，1使用镜像）
        /// </summary>
        public int IsMirror;
        /// <summary>
        /// 游戏内怪物显示名称
        /// </summary>
        public string MonName;
        /// <summary>
        /// 挑战列表名称
        /// </summary>
        public string BossListMonName;
        /// <summary>
        /// 策划用名/备注
        /// </summary>
        public string MonName2;
        /// <summary>
        /// 怪物影子
        /// </summary>
        public int MonShadow;
        /// <summary>
        /// 广播类型
        /// (0-无需广播
        /// 1-中央滚动 
        /// 2-聊天框 
        /// 2-中上方弹出式公告 
        /// 8-怪物无地图提示)
        /// </summary>
        public int NoticeType;
        /// <summary>
        /// 广播文本
        /// </summary>
        public string NoticeStr;
        /// <summary>
        /// 随机冒泡文本
        /// </summary>
        public string PaoPao;
        /// <summary>
        /// 血量
        /// </summary>
        public long HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 生命恢复(每3秒)
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 魔法闪避
        /// </summary>
        public int MagicDodge;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 真实伤害
        /// </summary>
        public int RealDamage;
        /// <summary>
        /// 伤害减免（万分比）
        /// </summary>
        public int ReduceHurt;
        /// <summary>
        /// 吸血效果减免（万分比）
        /// </summary>
        public int ReduceVampirePct;
        /// <summary>
        /// 推荐战斗力
        /// </summary>
        public int NeedAtk;
        /// <summary>
        /// 战力低于推荐高于推荐的90%
        /// </summary>
        public int AddDamage1;
        /// <summary>
        /// 战力低于推荐战力90%
        /// </summary>
        public int AddDamage2;
        /// <summary>
        /// 经验
        /// </summary>
        public int Exp;
        /// <summary>
        /// 内功
        /// </summary>
        public int InnerExp;
        /// <summary>
        /// 击杀魔念值
        /// </summary>
        public int DemoValue;
        /// <summary>
        /// 击杀灵气值
        /// </summary>
        public int AuraValue;
        /// <summary>
        /// 击杀boss属性点
        /// </summary>
        public int BossPoints;
        /// <summary>
        /// 装备掉落
        /// </summary>
        public int ShowDrop;
        /// <summary>
        /// 极品掉落1
        /// </summary>
        public string BestDrop1;
        /// <summary>
        /// 掉落1限制
        /// </summary>
        public int BestDropLimit1;
        /// <summary>
        /// 极品掉落2
        /// </summary>
        public string BestDrop2;
        /// <summary>
        /// 掉落2限制
        /// </summary>
        public int BestDropLimit2;
        /// <summary>
        /// 极品掉落3
        /// </summary>
        public string BestDrop3;
        /// <summary>
        /// 掉落3限制
        /// </summary>
        public int BestDropLimit3;
        /// <summary>
        /// 随机掉落
        /// </summary>
        public string AllRandomDrop;
        /// <summary>
        /// 可以触发首杀的玩家等级范围范围
        /// </summary>
        public string PlayerFirstDropStateGap;
        /// <summary>
        /// 首杀掉落
        /// </summary>
        public string PlayerFirstDropID;
        /// <summary>
        /// 保底掉落1
        /// </summary>
        public int PublicDropID;
        /// <summary>
        /// 掉落次数1
        /// </summary>
        public int PublicDropNumb;
        /// <summary>
        /// 保底掉落2
        /// </summary>
        public int PublicDropID2;
        /// <summary>
        /// 掉落次数2
        /// </summary>
        public int PublicDropNumb2;
        /// <summary>
        /// 保底掉落3
        /// </summary>
        public int PublicDropID3;
        /// <summary>
        /// 掉落次数3
        /// </summary>
        public int PublicDropNumb3;
        /// <summary>
        /// 保底掉落4
        /// </summary>
        public int PublicDropID4;
        /// <summary>
        /// 掉落次数4
        /// </summary>
        public int PublicDropNumb4;
        /// <summary>
        /// 保底掉落5
        /// </summary>
        public int PublicDropID5;
        /// <summary>
        /// 掉落次数5
        /// </summary>
        public int PublicDropNumb5;
        /// <summary>
        /// 遍历掉落
        /// </summary>
        public int AllDropID;
        /// <summary>
        /// 大爆概率
        /// </summary>
        public int DoubleDrop;
        /// <summary>
        /// 大爆极品
        /// </summary>
        public string DoubleBestDrop;
        /// <summary>
        /// 大爆极品限制
        /// </summary>
        public int DoubleBestDropLimi;
        /// <summary>
        /// 大爆保底1
        /// </summary>
        public int DoublePublicDropID;
        /// <summary>
        /// 大爆保底次数1
        /// </summary>
        public int DoublePublicDropNumb;
        /// <summary>
        /// 大爆保底2
        /// </summary>
        public int DoublePublicDropID2;
        /// <summary>
        /// 大爆保底次数2
        /// </summary>
        public int DoublePublicDropNumb2;
        /// <summary>
        /// 大爆遍历
        /// </summary>
        public int DoubleAllDropID;
        /// <summary>
        /// 补充掉落次数
        /// </summary>
        public int AddDropNum;
        /// <summary>
        /// 大爆补充次数
        /// </summary>
        public int DoubleAddDropNum;
        /// <summary>
        /// 补充掉落
        /// </summary>
        public int AddDropID;
        /// <summary>
        /// 精灵掉落
        /// </summary>
        public string TreasureElvesDrop;
        /// <summary>
        /// 活动掉落几率(万分比）
        /// </summary>
        public int ActivityDropChance;
        /// <summary>
        /// 活动掉落包
        /// </summary>
        public int ActivityDrop;
        /// <summary>
        /// 残血掉落
        /// </summary>
        public string HpDrop;
        /// <summary>
        /// aiid
        /// </summary>
        public int AITmplID;
        /// <summary>
        /// 死亡刷新地图ID(超级BOSS之家用）
        /// </summary>
        public int DeadRefreshMap;
        /// <summary>
        /// 死亡刷新概率（超级BOSS之家用，万分比）
        /// </summary>
        public int DeadRefreshChance;
        /// <summary>
        /// 词缀|权重
        /// </summary>
        public string Affix;
        /// <summary>
        /// 姓名板高度
        /// </summary>
        public int High;
        /// <summary>
        /// 是否人形怪
        /// </summary>
        public int IsHuman;
        /// <summary>
        /// 人形怪武器ID
        /// </summary>
        public int WeapenID;
        /// <summary>
        /// 特殊称号ID
        /// </summary>
        public int TitleID;
        /// <summary>
        /// 威名ID（搁置字段）
        /// </summary>
        public int Character;
        /// <summary>
        /// 职业[人形怪]
        /// </summary>
        public int Career;
        /// <summary>
        /// 性别
        /// </summary>
        public int Sex;
        /// <summary>
        /// 人形怪翅膀ID
        /// </summary>
        public int WingID;
        /// <summary>
        /// 怪物公会姓名板文本
        /// </summary>
        public string GuildTitle;
        /// <summary>
        /// 击杀获得积分（跨服无限进化活动）
        /// </summary>
        public int MagicPiece;
        /// <summary>
        /// 动作向锁定
        /// 如配置一个方向，则怪物所有动作都只有这一个方向
        /// [无：0代表八方向
        /// 左：1，右：2，
        /// 上：3，下：4，
        /// 左上：13，左下：14，
        /// 右上：23，右下：24]
        /// </summary>
        public int onlyDirection;
        /// <summary>
        /// 击杀后邮件奖励
        /// (邮件id:物品ID,物品数量|物品ID,物品数量）
        /// </summary>
        public string KillAward;
        /// <summary>
        /// 掉落物品冻结时间
        /// （区别与掉落保护时间，在此时间内任何人无法拾取）
        /// </summary>
        public int FreezeTime;
        /// <summary>
        /// 被攻击是否强制扣血         （0-不生效
        /// 数字代表扣多少。
        /// </summary>
        public int FirstBlood;
        /// <summary>
        /// 是否免疫最大生命值百分比伤害
        /// </summary>
        public int IsDesMaxhpPct;
        /// <summary>
        /// 怪物复活播报ID
        /// （新公告表）
        /// </summary>
        public int MonsterRevive;
        /// <summary>
        /// 怪物死亡播报ID
        /// （新公告表）
        /// </summary>
        public int MonsterDeath;
        /// <summary>
        /// 是否是隐形怪
        /// (0-是
        /// 1-不是）
        /// </summary>
        public int IsInvisible;
        /// <summary>
        /// 待机音效
        /// </summary>
        public string StandbyMusic;
        /// <summary>
        /// 受击音效
        /// </summary>
        public string StrilkeMusic;
        /// <summary>
        /// 攻击音效
        /// </summary>
        public string AttackMusic;
        /// <summary>
        /// 死亡音效
        /// </summary>
        public string DeathMusic;
        /// <summary>
        /// 头顶美术字（0-无美术字
        /// 1700-精英
        /// 1701-BOSS
        /// 1702-稀有）
        /// </summary>
        public int ArtisticText;
        /// <summary>
        /// 怪物头像icon
        /// </summary>
        public int HeadIcon;
        /// <summary>
        /// 击杀怪物获得BUFF
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 跨服战场根据境界刷不同怪物配置   境界|怪物ID
        /// </summary>
        public string State;
        /// <summary>
        /// 开服后同样怪物位置刷不同怪物配置
        /// 开服后第几天|怪物ID
        /// </summary>
        public string ChangeMonsterID;
        /// <summary>
        /// 产出技能点百分比
        /// </summary>
        public int GetPointPercent;
        /// <summary>
        /// 怪物尸体消失时间（ms）
        /// 0是永久存在
        /// </summary>
        public int MissTime;
        /// <summary>
        /// 是否贴身攻击有效
        /// </summary>
        public int PersonalAttack;
        /// <summary>
        /// 真实反伤
        /// （只针对玩家）
        /// </summary>
        public int ReturnHurt;
        /// <summary>
        /// 是否可重叠（0=否 1=是）
        /// </summary>
        public int IsOverlap;
        /// <summary>
        /// 是否魔法阵充能
        /// </summary>
        public int IsCharged;
        /// <summary>
        /// 尸体挖掘次数
        /// </summary>
        public int CollectTimes;
        /// <summary>
        /// 是否可以被位移技能撞开（0是不能，1是能）
        /// </summary>
        public int Move;
        /// <summary>
        /// 是否显示生命值（0=显示 1=不显示）
        /// </summary>
        public int IsHP;
        /// <summary>
        /// 怪物出现伴随特效
        /// </summary>
        public int AppearEffect;
        /// <summary>
        /// 特效持续时间
        /// </summary>
        public int EffectLastTime;
        /// <summary>
        /// 怪物名字颜色（空为不变）
        /// </summary>
        public string NameColor;
        /// <summary>
        /// 刷新时间（秒）
        /// </summary>
        public int AdvanceTime;
        /// <summary>
        /// 最大刷新时间
        /// </summary>
        public int PostponeTime;
        /// <summary>
        /// 是否有免伤buff
        /// </summary>
        public int IsMianBuff;
        /// <summary>
        /// 怒气掉落概率（%）
        /// </summary>
        public int AngerChance;
        /// <summary>
        /// 怒气掉落值
        /// </summary>
        public int AngerDDrop;
        /// <summary>
        /// 火龙经验值
        /// </summary>
        public int HuoLongEXP;
        /// <summary>
        /// 战宠经验(作废)
        /// </summary>
        public int PetEXP;
        /// <summary>
        /// 关联主体怪物ID
        /// </summary>
        public int MainMonster;
        /// <summary>
        /// 场景怪物显示层级
        /// （数值越大层级越高）
        /// </summary>
        public int ShowSort;
        /// <summary>
        /// 相对主体怪刷新偏移X
        /// </summary>
        public int IndexX;
        /// <summary>
        /// 相对主体怪刷新偏离偏移Y
        /// </summary>
        public int IndexY;
        /// <summary>
        /// 掉落宠物蛋id
        /// </summary>
        public int DropPetID;
        /// <summary>
        /// 掉落概率
        /// </summary>
        public int DropPetChance;
        /// <summary>
        /// 本名
        /// </summary>
        public string OriginalName;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            AssetID = bytes.ReadInt();
            SpeakType = bytes.ReadInt();
            SpeakOdds = bytes.ReadInt();
            Type = bytes.ReadInt();
            Halo = bytes.ReadInt();
            SubType = bytes.ReadInt();
            RaceType = bytes.ReadInt();
            Lv = bytes.ReadInt();
            GroupID = bytes.ReadInt();
            PetGroupID = bytes.ReadInt();
            IsMirror = bytes.ReadInt();
            MonName = bytes.ReadUTF();
            BossListMonName = bytes.ReadUTF();
            MonName2 = bytes.ReadUTF();
            MonShadow = bytes.ReadInt();
            NoticeType = bytes.ReadInt();
            NoticeStr = bytes.ReadUTF();
            PaoPao = bytes.ReadUTF();
            HP = bytes.ReadInt64();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
            Hits = bytes.ReadInt();
            MagicDodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            RealDamage = bytes.ReadInt();
            ReduceHurt = bytes.ReadInt();
            ReduceVampirePct = bytes.ReadInt();
            NeedAtk = bytes.ReadInt();
            AddDamage1 = bytes.ReadInt();
            AddDamage2 = bytes.ReadInt();
            Exp = bytes.ReadInt();
            InnerExp = bytes.ReadInt();
            DemoValue = bytes.ReadInt();
            AuraValue = bytes.ReadInt();
            BossPoints = bytes.ReadInt();
            ShowDrop = bytes.ReadInt();
            BestDrop1 = bytes.ReadUTF();
            BestDropLimit1 = bytes.ReadInt();
            BestDrop2 = bytes.ReadUTF();
            BestDropLimit2 = bytes.ReadInt();
            BestDrop3 = bytes.ReadUTF();
            BestDropLimit3 = bytes.ReadInt();
            AllRandomDrop = bytes.ReadUTF();
            PlayerFirstDropStateGap = bytes.ReadUTF();
            PlayerFirstDropID = bytes.ReadUTF();
            PublicDropID = bytes.ReadInt();
            PublicDropNumb = bytes.ReadInt();
            PublicDropID2 = bytes.ReadInt();
            PublicDropNumb2 = bytes.ReadInt();
            PublicDropID3 = bytes.ReadInt();
            PublicDropNumb3 = bytes.ReadInt();
            PublicDropID4 = bytes.ReadInt();
            PublicDropNumb4 = bytes.ReadInt();
            PublicDropID5 = bytes.ReadInt();
            PublicDropNumb5 = bytes.ReadInt();
            AllDropID = bytes.ReadInt();
            DoubleDrop = bytes.ReadInt();
            DoubleBestDrop = bytes.ReadUTF();
            DoubleBestDropLimi = bytes.ReadInt();
            DoublePublicDropID = bytes.ReadInt();
            DoublePublicDropNumb = bytes.ReadInt();
            DoublePublicDropID2 = bytes.ReadInt();
            DoublePublicDropNumb2 = bytes.ReadInt();
            DoubleAllDropID = bytes.ReadInt();
            AddDropNum = bytes.ReadInt();
            DoubleAddDropNum = bytes.ReadInt();
            AddDropID = bytes.ReadInt();
            TreasureElvesDrop = bytes.ReadUTF();
            ActivityDropChance = bytes.ReadInt();
            ActivityDrop = bytes.ReadInt();
            HpDrop = bytes.ReadUTF();
            AITmplID = bytes.ReadInt();
            DeadRefreshMap = bytes.ReadInt();
            DeadRefreshChance = bytes.ReadInt();
            Affix = bytes.ReadUTF();
            High = bytes.ReadInt();
            IsHuman = bytes.ReadInt();
            WeapenID = bytes.ReadInt();
            TitleID = bytes.ReadInt();
            Character = bytes.ReadInt();
            Career = bytes.ReadInt();
            Sex = bytes.ReadInt();
            WingID = bytes.ReadInt();
            GuildTitle = bytes.ReadUTF();
            MagicPiece = bytes.ReadInt();
            onlyDirection = bytes.ReadInt();
            KillAward = bytes.ReadUTF();
            FreezeTime = bytes.ReadInt();
            FirstBlood = bytes.ReadInt();
            IsDesMaxhpPct = bytes.ReadInt();
            MonsterRevive = bytes.ReadInt();
            MonsterDeath = bytes.ReadInt();
            IsInvisible = bytes.ReadInt();
            StandbyMusic = bytes.ReadUTF();
            StrilkeMusic = bytes.ReadUTF();
            AttackMusic = bytes.ReadUTF();
            DeathMusic = bytes.ReadUTF();
            ArtisticText = bytes.ReadInt();
            HeadIcon = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            State = bytes.ReadUTF();
            ChangeMonsterID = bytes.ReadUTF();
            GetPointPercent = bytes.ReadInt();
            MissTime = bytes.ReadInt();
            PersonalAttack = bytes.ReadInt();
            ReturnHurt = bytes.ReadInt();
            IsOverlap = bytes.ReadInt();
            IsCharged = bytes.ReadInt();
            CollectTimes = bytes.ReadInt();
            Move = bytes.ReadInt();
            IsHP = bytes.ReadInt();
            AppearEffect = bytes.ReadInt();
            EffectLastTime = bytes.ReadInt();
            NameColor = bytes.ReadUTF();
            AdvanceTime = bytes.ReadInt();
            PostponeTime = bytes.ReadInt();
            IsMianBuff = bytes.ReadInt();
            AngerChance = bytes.ReadInt();
            AngerDDrop = bytes.ReadInt();
            HuoLongEXP = bytes.ReadInt();
            PetEXP = bytes.ReadInt();
            MainMonster = bytes.ReadInt();
            ShowSort = bytes.ReadInt();
            IndexX = bytes.ReadInt();
            IndexY = bytes.ReadInt();
            DropPetID = bytes.ReadInt();
            DropPetChance = bytes.ReadInt();
            OriginalName = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(SpeakType);
            bytes.WriteInt(SpeakOdds);
            bytes.WriteInt(Type);
            bytes.WriteInt(Halo);
            bytes.WriteInt(SubType);
            bytes.WriteInt(RaceType);
            bytes.WriteInt(Lv);
            bytes.WriteInt(GroupID);
            bytes.WriteInt(PetGroupID);
            bytes.WriteInt(IsMirror);
            bytes.WriteUTF(MonName);
            bytes.WriteUTF(BossListMonName);
            bytes.WriteUTF(MonName2);
            bytes.WriteInt(MonShadow);
            bytes.WriteInt(NoticeType);
            bytes.WriteUTF(NoticeStr);
            bytes.WriteUTF(PaoPao);
            bytes.WriteInt64(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(Hits);
            bytes.WriteInt(MagicDodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(RealDamage);
            bytes.WriteInt(ReduceHurt);
            bytes.WriteInt(ReduceVampirePct);
            bytes.WriteInt(NeedAtk);
            bytes.WriteInt(AddDamage1);
            bytes.WriteInt(AddDamage2);
            bytes.WriteInt(Exp);
            bytes.WriteInt(InnerExp);
            bytes.WriteInt(DemoValue);
            bytes.WriteInt(AuraValue);
            bytes.WriteInt(BossPoints);
            bytes.WriteInt(ShowDrop);
            bytes.WriteUTF(BestDrop1);
            bytes.WriteInt(BestDropLimit1);
            bytes.WriteUTF(BestDrop2);
            bytes.WriteInt(BestDropLimit2);
            bytes.WriteUTF(BestDrop3);
            bytes.WriteInt(BestDropLimit3);
            bytes.WriteUTF(AllRandomDrop);
            bytes.WriteUTF(PlayerFirstDropStateGap);
            bytes.WriteUTF(PlayerFirstDropID);
            bytes.WriteInt(PublicDropID);
            bytes.WriteInt(PublicDropNumb);
            bytes.WriteInt(PublicDropID2);
            bytes.WriteInt(PublicDropNumb2);
            bytes.WriteInt(PublicDropID3);
            bytes.WriteInt(PublicDropNumb3);
            bytes.WriteInt(PublicDropID4);
            bytes.WriteInt(PublicDropNumb4);
            bytes.WriteInt(PublicDropID5);
            bytes.WriteInt(PublicDropNumb5);
            bytes.WriteInt(AllDropID);
            bytes.WriteInt(DoubleDrop);
            bytes.WriteUTF(DoubleBestDrop);
            bytes.WriteInt(DoubleBestDropLimi);
            bytes.WriteInt(DoublePublicDropID);
            bytes.WriteInt(DoublePublicDropNumb);
            bytes.WriteInt(DoublePublicDropID2);
            bytes.WriteInt(DoublePublicDropNumb2);
            bytes.WriteInt(DoubleAllDropID);
            bytes.WriteInt(AddDropNum);
            bytes.WriteInt(DoubleAddDropNum);
            bytes.WriteInt(AddDropID);
            bytes.WriteUTF(TreasureElvesDrop);
            bytes.WriteInt(ActivityDropChance);
            bytes.WriteInt(ActivityDrop);
            bytes.WriteUTF(HpDrop);
            bytes.WriteInt(AITmplID);
            bytes.WriteInt(DeadRefreshMap);
            bytes.WriteInt(DeadRefreshChance);
            bytes.WriteUTF(Affix);
            bytes.WriteInt(High);
            bytes.WriteInt(IsHuman);
            bytes.WriteInt(WeapenID);
            bytes.WriteInt(TitleID);
            bytes.WriteInt(Character);
            bytes.WriteInt(Career);
            bytes.WriteInt(Sex);
            bytes.WriteInt(WingID);
            bytes.WriteUTF(GuildTitle);
            bytes.WriteInt(MagicPiece);
            bytes.WriteInt(onlyDirection);
            bytes.WriteUTF(KillAward);
            bytes.WriteInt(FreezeTime);
            bytes.WriteInt(FirstBlood);
            bytes.WriteInt(IsDesMaxhpPct);
            bytes.WriteInt(MonsterRevive);
            bytes.WriteInt(MonsterDeath);
            bytes.WriteInt(IsInvisible);
            bytes.WriteUTF(StandbyMusic);
            bytes.WriteUTF(StrilkeMusic);
            bytes.WriteUTF(AttackMusic);
            bytes.WriteUTF(DeathMusic);
            bytes.WriteInt(ArtisticText);
            bytes.WriteInt(HeadIcon);
            bytes.WriteInt(BuffID);
            bytes.WriteUTF(State);
            bytes.WriteUTF(ChangeMonsterID);
            bytes.WriteInt(GetPointPercent);
            bytes.WriteInt(MissTime);
            bytes.WriteInt(PersonalAttack);
            bytes.WriteInt(ReturnHurt);
            bytes.WriteInt(IsOverlap);
            bytes.WriteInt(IsCharged);
            bytes.WriteInt(CollectTimes);
            bytes.WriteInt(Move);
            bytes.WriteInt(IsHP);
            bytes.WriteInt(AppearEffect);
            bytes.WriteInt(EffectLastTime);
            bytes.WriteUTF(NameColor);
            bytes.WriteInt(AdvanceTime);
            bytes.WriteInt(PostponeTime);
            bytes.WriteInt(IsMianBuff);
            bytes.WriteInt(AngerChance);
            bytes.WriteInt(AngerDDrop);
            bytes.WriteInt(HuoLongEXP);
            bytes.WriteInt(PetEXP);
            bytes.WriteInt(MainMonster);
            bytes.WriteInt(ShowSort);
            bytes.WriteInt(IndexX);
            bytes.WriteInt(IndexY);
            bytes.WriteInt(DropPetID);
            bytes.WriteInt(DropPetChance);
            bytes.WriteUTF(OriginalName);
        }
    }

    public class MonsterTemplateMode : TplMode
    {
        private IList<MonsterTemplate> mList = null;

        public MonsterTemplateMode(int step) : base("MonsterTemplate", typeof(MonsterTemplate), step) { }

        public MonsterTemplate this[int id]
        {
            get { return Find<MonsterTemplate>(id); }
        }

        public MonsterTemplate Find(int id)
        {
            return Find<MonsterTemplate>(id);
        }

        public IList<MonsterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MonsterTemplate>();
            return mList;
        }
    }

public class PersonBoss : Tpl
    {
        /// <summary>
        /// 类型（1.个人boss，2.贵族BOSS)
        /// </summary>
        public int Type;
        /// <summary>
        /// 挑战名
        /// </summary>
        public string Name;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonID;
        /// <summary>
        /// 场景ID
        /// </summary>
        public int DungeonID;
        /// <summary>
        /// 界面展示纸娃娃ID
        /// </summary>
        public int ShowAssetID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Name = bytes.ReadUTF();
            MonID = bytes.ReadInt();
            DungeonID = bytes.ReadInt();
            ShowAssetID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteUTF(Name);
            bytes.WriteInt(MonID);
            bytes.WriteInt(DungeonID);
            bytes.WriteInt(ShowAssetID);
        }
    }

    public class PersonBossMode : TplMode
    {
        private IList<PersonBoss> mList = null;

        public PersonBossMode(int step) : base("PersonBoss", typeof(PersonBoss), step) { }

        public PersonBoss this[int id]
        {
            get { return Find<PersonBoss>(id); }
        }

        public PersonBoss Find(int id)
        {
            return Find<PersonBoss>(id);
        }

        public IList<PersonBoss> FindAll()
        {
            if (mList == null) mList = FindAll<PersonBoss>();
            return mList;
        }
    }

public class AdvancedIdentifyTemplate : Tpl
    {
        /// <summary>
        /// 分类索引
        /// </summary>
        public int TabType;
        /// <summary>
        /// 分类名称
        /// </summary>
        public string TabTypeName;
        /// <summary>
        /// 项索引
        /// </summary>
        public int SubType;
        /// <summary>
        /// 项名称
        /// </summary>
        public string SubTypeName;
        /// <summary>
        /// 源装备ID
        /// </summary>
        public int SourceEquipID;
        /// <summary>
        /// 源装备数量
        /// </summary>
        public int SourceEquipNum;
        /// <summary>
        /// 材料ID
        /// </summary>
        public int CostItemID;
        /// <summary>
        /// 材料数量
        /// </summary>
        public int CostItemNum;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int CostMoneyNum;
        /// <summary>
        /// 鉴定成功率（万分比）
        /// </summary>
        public int SuccessRate;
        /// <summary>
        /// 鉴定结果目标池
        /// </summary>
        public string TargetIDList;
        /// <summary>
        /// 鉴定结果数量
        /// </summary>
        public int TargetNum;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TabType = bytes.ReadInt();
            TabTypeName = bytes.ReadUTF();
            SubType = bytes.ReadInt();
            SubTypeName = bytes.ReadUTF();
            SourceEquipID = bytes.ReadInt();
            SourceEquipNum = bytes.ReadInt();
            CostItemID = bytes.ReadInt();
            CostItemNum = bytes.ReadInt();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
            SuccessRate = bytes.ReadInt();
            TargetIDList = bytes.ReadUTF();
            TargetNum = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(TabType);
            bytes.WriteUTF(TabTypeName);
            bytes.WriteInt(SubType);
            bytes.WriteUTF(SubTypeName);
            bytes.WriteInt(SourceEquipID);
            bytes.WriteInt(SourceEquipNum);
            bytes.WriteInt(CostItemID);
            bytes.WriteInt(CostItemNum);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
            bytes.WriteInt(SuccessRate);
            bytes.WriteUTF(TargetIDList);
            bytes.WriteInt(TargetNum);
        }
    }

    public class AdvancedIdentifyTemplateMode : TplMode
    {
        private IList<AdvancedIdentifyTemplate> mList = null;

        public AdvancedIdentifyTemplateMode(int step) : base("AdvancedIdentifyTemplate", typeof(AdvancedIdentifyTemplate), step) { }

        public AdvancedIdentifyTemplate this[int id]
        {
            get { return Find<AdvancedIdentifyTemplate>(id); }
        }

        public AdvancedIdentifyTemplate Find(int id)
        {
            return Find<AdvancedIdentifyTemplate>(id);
        }

        public IList<AdvancedIdentifyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AdvancedIdentifyTemplate>();
            return mList;
        }
    }

public class AltarTemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 名称
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 展示资源
        /// </summary>
        public int Icon;
        /// <summary>
        /// 经验值消耗
        /// </summary>
        public int EXP;
        /// <summary>
        /// 地狱层数
        /// </summary>
        public int UnlockFloor;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 暴击值
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴伤
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            Career = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            Icon = bytes.ReadInt();
            EXP = bytes.ReadInt();
            UnlockFloor = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteInt(Career);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(Icon);
            bytes.WriteInt(EXP);
            bytes.WriteInt(UnlockFloor);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
        }
    }

    public class AltarTemplateMode : TplMode
    {
        private IList<AltarTemplate> mList = null;

        public AltarTemplateMode(int step) : base("AltarTemplate", typeof(AltarTemplate), step) { }

        public AltarTemplate this[int id]
        {
            get { return Find<AltarTemplate>(id); }
        }

        public AltarTemplate Find(int id)
        {
            return Find<AltarTemplate>(id);
        }

        public IList<AltarTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AltarTemplate>();
            return mList;
        }
    }

public class AltarDonateTemplate : Tpl
    {
        /// <summary>
        /// 消耗
        /// </summary>
        public int Cost;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 奖励道具
        /// </summary>
        public string Rewards;
        /// <summary>
        /// 行会贡献
        /// </summary>
        public int Value;
        /// <summary>
        /// 祭坛经验
        /// </summary>
        public int AltarExp;
        /// <summary>
        /// 次数限制
        /// </summary>
        public int TimeLimit;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Cost = bytes.ReadInt();
            Type = bytes.ReadInt();
            Rewards = bytes.ReadUTF();
            Value = bytes.ReadInt();
            AltarExp = bytes.ReadInt();
            TimeLimit = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Cost);
            bytes.WriteInt(Type);
            bytes.WriteUTF(Rewards);
            bytes.WriteInt(Value);
            bytes.WriteInt(AltarExp);
            bytes.WriteInt(TimeLimit);
        }
    }

    public class AltarDonateTemplateMode : TplMode
    {
        private IList<AltarDonateTemplate> mList = null;

        public AltarDonateTemplateMode(int step) : base("AltarDonateTemplate", typeof(AltarDonateTemplate), step) { }

        public AltarDonateTemplate this[int id]
        {
            get { return Find<AltarDonateTemplate>(id); }
        }

        public AltarDonateTemplate Find(int id)
        {
            return Find<AltarDonateTemplate>(id);
        }

        public IList<AltarDonateTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AltarDonateTemplate>();
            return mList;
        }
    }

public class GuildHongbaoTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 发放道具id
        /// </summary>
        public int ItemID;
        /// <summary>
        /// 数量
        /// </summary>
        public int Number;
        /// <summary>
        /// 消耗金刚石
        /// </summary>
        public int Cost;
        /// <summary>
        /// icon资源
        /// </summary>
        public int Icon;
        /// <summary>
        /// 红包资源
        /// </summary>
        public int Icon2;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            ItemID = bytes.ReadInt();
            Number = bytes.ReadInt();
            Cost = bytes.ReadInt();
            Icon = bytes.ReadInt();
            Icon2 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(ItemID);
            bytes.WriteInt(Number);
            bytes.WriteInt(Cost);
            bytes.WriteInt(Icon);
            bytes.WriteInt(Icon2);
        }
    }

    public class GuildHongbaoTemplateMode : TplMode
    {
        private IList<GuildHongbaoTemplate> mList = null;

        public GuildHongbaoTemplateMode(int step) : base("GuildHongbaoTemplate", typeof(GuildHongbaoTemplate), step) { }

        public GuildHongbaoTemplate this[int id]
        {
            get { return Find<GuildHongbaoTemplate>(id); }
        }

        public GuildHongbaoTemplate Find(int id)
        {
            return Find<GuildHongbaoTemplate>(id);
        }

        public IList<GuildHongbaoTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildHongbaoTemplate>();
            return mList;
        }
    }

public class GuildLeaderNoticeTemplate : Tpl
    {
        /// <summary>
        /// 开服天数
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 内容
        /// </summary>
        public string Content;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            OpenDay = bytes.ReadInt();
            Content = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(OpenDay);
            bytes.WriteUTF(Content);
        }
    }

    public class GuildLeaderNoticeTemplateMode : TplMode
    {
        private IList<GuildLeaderNoticeTemplate> mList = null;

        public GuildLeaderNoticeTemplateMode(int step) : base("GuildLeaderNoticeTemplate", typeof(GuildLeaderNoticeTemplate), step) { }

        public GuildLeaderNoticeTemplate this[int id]
        {
            get { return Find<GuildLeaderNoticeTemplate>(id); }
        }

        public GuildLeaderNoticeTemplate Find(int id)
        {
            return Find<GuildLeaderNoticeTemplate>(id);
        }

        public IList<GuildLeaderNoticeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildLeaderNoticeTemplate>();
            return mList;
        }
    }

public class CompoundTemplate : Tpl
    {
        /// <summary>
        /// 产出物品ID
        /// </summary>
        public string Produce;
        /// <summary>
        /// 产出物名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 消耗品名称
        /// </summary>
        public string Name2;
        /// <summary>
        /// 合成分解类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 锻造合成对应页签
        /// </summary>
        public int Tab;
        /// <summary>
        /// 锻造合成对应页签名称
        /// </summary>
        public string TabName;
        /// <summary>
        /// 合成产出类型
        /// </summary>
        public int ProduceType;
        /// <summary>
        /// 合成项所属类别
        /// </summary>
        public int Category;
        /// <summary>
        /// 显示需要系统等级
        /// </summary>
        public string ShowNeedSystemLv;
        /// <summary>
        /// 显示需要开服天数
        /// </summary>
        public int ShowNeedDays;
        /// <summary>
        /// 是否合服后开启（1，代表需要合服开启，0代表不需要合服就能开启）
        /// </summary>
        public int CombinedService;
        /// <summary>
        /// 合成需要等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 合成需要官职等级
        /// </summary>
        public int NeedofficialLv;
        /// <summary>
        /// 合成需要境界
        /// </summary>
        public int NeedState;
        /// <summary>
        /// 合成需要vip等级
        /// </summary>
        public int NeedVip;
        /// <summary>
        /// 合成需要系统等级
        /// </summary>
        public string NeedSystemLv;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 合成需要货币
        /// </summary>
        public int CostMoneyNum;
        /// <summary>
        /// 合成消耗物品和数量
        /// </summary>
        public string AdvanceCostItemID;
        /// <summary>
        /// 供自选的合成材料1
        /// </summary>
        public string OptionalItem1;
        /// <summary>
        /// 框体下方文字1
        /// </summary>
        public string OptionalTxt1;
        /// <summary>
        /// 供自选的合成材料2
        /// </summary>
        public string OptionalItem2;
        /// <summary>
        /// 框体下方文字2
        /// </summary>
        public string OptionalTxt2;
        /// <summary>
        /// 合成消耗物品和数量2
        /// </summary>
        public string AdvanceCostItemID2;
        /// <summary>
        /// 特殊消耗物品和数量
        /// </summary>
        public string SpecialCostItem;
        /// <summary>
        /// 分解获得物品和数目
        /// </summary>
        public string ResolveItemID;
        /// <summary>
        /// 分解获得的货币类型
        /// </summary>
        public int ResolveMoneyType;
        /// <summary>
        /// 分解获得的货币数值
        /// </summary>
        public int ResolveMoneyValue;
        /// <summary>
        /// 显示等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 对应职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 合成品是否绑定（1=绑定）
        /// </summary>
        public int IsBinding;
        /// <summary>
        /// 法宝祝福值升级获得物品
        /// </summary>
        public int NextID;
        /// <summary>
        /// 法宝合成展示
        /// </summary>
        public int ProduceShow;
        /// <summary>
        /// 法宝祝福值节点产出概率
        /// </summary>
        public string StarUpData;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Produce = bytes.ReadUTF();
            Name = bytes.ReadUTF();
            Name2 = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Tab = bytes.ReadInt();
            TabName = bytes.ReadUTF();
            ProduceType = bytes.ReadInt();
            Category = bytes.ReadInt();
            ShowNeedSystemLv = bytes.ReadUTF();
            ShowNeedDays = bytes.ReadInt();
            CombinedService = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            NeedofficialLv = bytes.ReadInt();
            NeedState = bytes.ReadInt();
            NeedVip = bytes.ReadInt();
            NeedSystemLv = bytes.ReadUTF();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
            AdvanceCostItemID = bytes.ReadUTF();
            OptionalItem1 = bytes.ReadUTF();
            OptionalTxt1 = bytes.ReadUTF();
            OptionalItem2 = bytes.ReadUTF();
            OptionalTxt2 = bytes.ReadUTF();
            AdvanceCostItemID2 = bytes.ReadUTF();
            SpecialCostItem = bytes.ReadUTF();
            ResolveItemID = bytes.ReadUTF();
            ResolveMoneyType = bytes.ReadInt();
            ResolveMoneyValue = bytes.ReadInt();
            Level = bytes.ReadInt();
            Job = bytes.ReadInt();
            IsBinding = bytes.ReadInt();
            NextID = bytes.ReadInt();
            ProduceShow = bytes.ReadInt();
            StarUpData = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Produce);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Name2);
            bytes.WriteInt(Type);
            bytes.WriteInt(Tab);
            bytes.WriteUTF(TabName);
            bytes.WriteInt(ProduceType);
            bytes.WriteInt(Category);
            bytes.WriteUTF(ShowNeedSystemLv);
            bytes.WriteInt(ShowNeedDays);
            bytes.WriteInt(CombinedService);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(NeedofficialLv);
            bytes.WriteInt(NeedState);
            bytes.WriteInt(NeedVip);
            bytes.WriteUTF(NeedSystemLv);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
            bytes.WriteUTF(AdvanceCostItemID);
            bytes.WriteUTF(OptionalItem1);
            bytes.WriteUTF(OptionalTxt1);
            bytes.WriteUTF(OptionalItem2);
            bytes.WriteUTF(OptionalTxt2);
            bytes.WriteUTF(AdvanceCostItemID2);
            bytes.WriteUTF(SpecialCostItem);
            bytes.WriteUTF(ResolveItemID);
            bytes.WriteInt(ResolveMoneyType);
            bytes.WriteInt(ResolveMoneyValue);
            bytes.WriteInt(Level);
            bytes.WriteInt(Job);
            bytes.WriteInt(IsBinding);
            bytes.WriteInt(NextID);
            bytes.WriteInt(ProduceShow);
            bytes.WriteUTF(StarUpData);
        }
    }

    public class CompoundTemplateMode : TplMode
    {
        private IList<CompoundTemplate> mList = null;

        public CompoundTemplateMode(int step) : base("CompoundTemplate", typeof(CompoundTemplate), step) { }

        public CompoundTemplate this[int id]
        {
            get { return Find<CompoundTemplate>(id); }
        }

        public CompoundTemplate Find(int id)
        {
            return Find<CompoundTemplate>(id);
        }

        public IList<CompoundTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CompoundTemplate>();
            return mList;
        }
    }

public class MingHunCompTemplate : Tpl
    {
        /// <summary>
        /// 分类
        /// </summary>
        public int Class;
        /// <summary>
        /// 分类名
        /// </summary>
        public string ClassName;
        /// <summary>
        /// 阶数
        /// </summary>
        public int Grade;
        /// <summary>
        /// 子类名
        /// </summary>
        public string GradeName;
        /// <summary>
        /// 合成等级
        /// </summary>
        public int NeedGrade;
        /// <summary>
        /// 自选消耗ID
        /// </summary>
        public string OptionalItem;
        /// <summary>
        /// 显示名称
        /// </summary>
        public string OptionalName;
        /// <summary>
        /// 材料消耗
        /// </summary>
        public string AdvCostItem;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int CostMoneyNum;
        /// <summary>
        /// 产出池
        /// </summary>
        public string Produce;
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Class = bytes.ReadInt();
            ClassName = bytes.ReadUTF();
            Grade = bytes.ReadInt();
            GradeName = bytes.ReadUTF();
            NeedGrade = bytes.ReadInt();
            OptionalItem = bytes.ReadUTF();
            OptionalName = bytes.ReadUTF();
            AdvCostItem = bytes.ReadUTF();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
            Produce = bytes.ReadUTF();
            Job = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Class);
            bytes.WriteUTF(ClassName);
            bytes.WriteInt(Grade);
            bytes.WriteUTF(GradeName);
            bytes.WriteInt(NeedGrade);
            bytes.WriteUTF(OptionalItem);
            bytes.WriteUTF(OptionalName);
            bytes.WriteUTF(AdvCostItem);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
            bytes.WriteUTF(Produce);
            bytes.WriteInt(Job);
        }
    }

    public class MingHunCompTemplateMode : TplMode
    {
        private IList<MingHunCompTemplate> mList = null;

        public MingHunCompTemplateMode(int step) : base("MingHunCompTemplate", typeof(MingHunCompTemplate), step) { }

        public MingHunCompTemplate this[int id]
        {
            get { return Find<MingHunCompTemplate>(id); }
        }

        public MingHunCompTemplate Find(int id)
        {
            return Find<MingHunCompTemplate>(id);
        }

        public IList<MingHunCompTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MingHunCompTemplate>();
            return mList;
        }
    }

public class CombineTemplate : Tpl
    {
        /// <summary>
        /// 待合成物品
        /// </summary>
        public string TargetDisplay;
        /// <summary>
        /// 合成物品ID
        /// </summary>
        public int CombineID;
        /// <summary>
        /// 目标物品组
        /// </summary>
        public int TargetLv;
        /// <summary>
        /// 职业（1战士，2法师，3道士）
        /// </summary>
        public int Job;
        /// <summary>
        /// 合成装等级
        /// </summary>
        public int CostLv;
        /// <summary>
        /// 等级装备数量
        /// </summary>
        public int CostNumb;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int GoodsNumb;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int AnotherGoodsID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int AnotherGoodsNumb;
        /// <summary>
        /// 合成需要货币类型
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 合成需要货币
        /// </summary>
        public int CostMoneyNum;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TargetDisplay = bytes.ReadUTF();
            CombineID = bytes.ReadInt();
            TargetLv = bytes.ReadInt();
            Job = bytes.ReadInt();
            CostLv = bytes.ReadInt();
            CostNumb = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            GoodsNumb = bytes.ReadInt();
            AnotherGoodsID = bytes.ReadInt();
            AnotherGoodsNumb = bytes.ReadInt();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(TargetDisplay);
            bytes.WriteInt(CombineID);
            bytes.WriteInt(TargetLv);
            bytes.WriteInt(Job);
            bytes.WriteInt(CostLv);
            bytes.WriteInt(CostNumb);
            bytes.WriteInt(GoodsID);
            bytes.WriteInt(GoodsNumb);
            bytes.WriteInt(AnotherGoodsID);
            bytes.WriteInt(AnotherGoodsNumb);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
        }
    }

    public class CombineTemplateMode : TplMode
    {
        private IList<CombineTemplate> mList = null;

        public CombineTemplateMode(int step) : base("CombineTemplate", typeof(CombineTemplate), step) { }

        public CombineTemplate this[int id]
        {
            get { return Find<CombineTemplate>(id); }
        }

        public CombineTemplate Find(int id)
        {
            return Find<CombineTemplate>(id);
        }

        public IList<CombineTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CombineTemplate>();
            return mList;
        }
    }

public class CategoryTemplate : Tpl
    {
        /// <summary>
        /// 页签类别
        /// </summary>
        public string TabType;
        /// <summary>
        /// 类别名称
        /// </summary>
        public string TypeName;
        /// <summary>
        /// 子类别名称
        /// </summary>
        public string SubTypeName;
        /// <summary>
        /// 启用所需开服天数
        /// </summary>
        public int ShowNeedDay;
        /// <summary>
        /// 显示需要系统等级
        /// </summary>
        public string ShowNeedSystemLv;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TabType = bytes.ReadUTF();
            TypeName = bytes.ReadUTF();
            SubTypeName = bytes.ReadUTF();
            ShowNeedDay = bytes.ReadInt();
            ShowNeedSystemLv = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(TabType);
            bytes.WriteUTF(TypeName);
            bytes.WriteUTF(SubTypeName);
            bytes.WriteInt(ShowNeedDay);
            bytes.WriteUTF(ShowNeedSystemLv);
        }
    }

    public class CategoryTemplateMode : TplMode
    {
        private IList<CategoryTemplate> mList = null;

        public CategoryTemplateMode(int step) : base("CategoryTemplate", typeof(CategoryTemplate), step) { }

        public CategoryTemplate this[int id]
        {
            get { return Find<CategoryTemplate>(id); }
        }

        public CategoryTemplate Find(int id)
        {
            return Find<CategoryTemplate>(id);
        }

        public IList<CategoryTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CategoryTemplate>();
            return mList;
        }
    }

public class RecyclingTaskTemplate : Tpl
    {
        /// <summary>
        /// 任务名
        /// </summary>
        public string Name;
        /// <summary>
        /// 任务目标描述
        /// </summary>
        public string Txt;
        /// <summary>
        /// 下个任务
        /// </summary>
        public int Next;
        /// <summary>
        /// 任务需求类型
        /// </summary>
        public int TaskNeedType;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 参数3
        /// </summary>
        public int Data3;
        /// <summary>
        /// 任务需求前端显示推荐
        /// </summary>
        public string TaskUnFinish;
        /// <summary>
        /// 未完成任务传送点
        /// </summary>
        public string UnFinishPoint;
        /// <summary>
        /// 未完成寻路点
        /// </summary>
        public string UnFinishSeekPoint;
        /// <summary>
        /// 经验奖励
        /// </summary>
        public int Exp;
        /// <summary>
        /// 绑定金币奖励
        /// </summary>
        public int Money;
        /// <summary>
        /// 通用物品奖励
        /// </summary>
        public string Bonus;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Txt = bytes.ReadUTF();
            Next = bytes.ReadInt();
            TaskNeedType = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Data3 = bytes.ReadInt();
            TaskUnFinish = bytes.ReadUTF();
            UnFinishPoint = bytes.ReadUTF();
            UnFinishSeekPoint = bytes.ReadUTF();
            Exp = bytes.ReadInt();
            Money = bytes.ReadInt();
            Bonus = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Txt);
            bytes.WriteInt(Next);
            bytes.WriteInt(TaskNeedType);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Data3);
            bytes.WriteUTF(TaskUnFinish);
            bytes.WriteUTF(UnFinishPoint);
            bytes.WriteUTF(UnFinishSeekPoint);
            bytes.WriteInt(Exp);
            bytes.WriteInt(Money);
            bytes.WriteUTF(Bonus);
        }
    }

    public class RecyclingTaskTemplateMode : TplMode
    {
        private IList<RecyclingTaskTemplate> mList = null;

        public RecyclingTaskTemplateMode(int step) : base("RecyclingTaskTemplate", typeof(RecyclingTaskTemplate), step) { }

        public RecyclingTaskTemplate this[int id]
        {
            get { return Find<RecyclingTaskTemplate>(id); }
        }

        public RecyclingTaskTemplate Find(int id)
        {
            return Find<RecyclingTaskTemplate>(id);
        }

        public IList<RecyclingTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RecyclingTaskTemplate>();
            return mList;
        }
    }

public class ChangeDiamondTemplate : Tpl
    {
        /// <summary>
        /// 回收物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 回收获得福利金刚石
        /// </summary>
        public int RewardDiamond;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            GoodsID = bytes.ReadInt();
            RewardDiamond = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(GoodsID);
            bytes.WriteInt(RewardDiamond);
        }
    }

    public class ChangeDiamondTemplateMode : TplMode
    {
        private IList<ChangeDiamondTemplate> mList = null;

        public ChangeDiamondTemplateMode(int step) : base("ChangeDiamondTemplate", typeof(ChangeDiamondTemplate), step) { }

        public ChangeDiamondTemplate this[int id]
        {
            get { return Find<ChangeDiamondTemplate>(id); }
        }

        public ChangeDiamondTemplate Find(int id)
        {
            return Find<ChangeDiamondTemplate>(id);
        }

        public IList<ChangeDiamondTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ChangeDiamondTemplate>();
            return mList;
        }
    }

public class SignTemplate : Tpl
    {
        /// <summary>
        /// 签名内容
        /// </summary>
        public string Text;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Text = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Text);
        }
    }

    public class SignTemplateMode : TplMode
    {
        private IList<SignTemplate> mList = null;

        public SignTemplateMode(int step) : base("SignTemplate", typeof(SignTemplate), step) { }

        public SignTemplate this[int id]
        {
            get { return Find<SignTemplate>(id); }
        }

        public SignTemplate Find(int id)
        {
            return Find<SignTemplate>(id);
        }

        public IList<SignTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SignTemplate>();
            return mList;
        }
    }

public class WeddingRingTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 所需亲密值
        /// </summary>
        public int NeedIntimate;
        /// <summary>
        /// 消耗道具ID
        /// </summary>
        public int Item;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int ItemNum;
        /// <summary>
        /// 物品名颜色(1-白（垃圾装备，杂物），2-淡橙（传奇稀罕小物件），3-绿（30-40装备），4-黄（元宝金币类道具），5-青（50-70装备），6-蓝（80装备），7-紫（成长线类道具），8-橙（神器），9-红（境界装备），10-淡紫（稀有高价值道具）)
        /// </summary>
        public int Color;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 特殊属性
        /// </summary>
        public int Special;
        /// <summary>
        /// 图片资源
        /// </summary>
        public int Icon;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            GoodsName = bytes.ReadUTF();
            NeedIntimate = bytes.ReadInt();
            Item = bytes.ReadInt();
            ItemNum = bytes.ReadInt();
            Color = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Special = bytes.ReadInt();
            Icon = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(NeedIntimate);
            bytes.WriteInt(Item);
            bytes.WriteInt(ItemNum);
            bytes.WriteInt(Color);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Special);
            bytes.WriteInt(Icon);
        }
    }

    public class WeddingRingTemplateMode : TplMode
    {
        private IList<WeddingRingTemplate> mList = null;

        public WeddingRingTemplateMode(int step) : base("WeddingRingTemplate", typeof(WeddingRingTemplate), step) { }

        public WeddingRingTemplate this[int id]
        {
            get { return Find<WeddingRingTemplate>(id); }
        }

        public WeddingRingTemplate Find(int id)
        {
            return Find<WeddingRingTemplate>(id);
        }

        public IList<WeddingRingTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WeddingRingTemplate>();
            return mList;
        }
    }

public class HuanMapTemplate : Tpl
    {
        /// <summary>
        /// 地图进入等级限制
        /// </summary>
        public int LvLimite;
        /// <summary>
        /// 地图进入最高等级限定（0代表没最高等级限定）
        /// </summary>
        public int LvMaxLimite;
        /// <summary>
        /// 进入境界等级
        /// </summary>
        public int JJLvLimite;
        /// <summary>
        /// 最高境界等级
        /// </summary>
        public int JJLvMaxLimite;
        /// <summary>
        /// 进入消耗物品
        /// </summary>
        public int JoinGoodsCost;
        /// <summary>
        /// 进入消耗物品数量
        /// </summary>
        public int JoinGoodsCostNumber;
        /// <summary>
        /// 界面等级限制显示
        /// </summary>
        public string LvTxt;
        /// <summary>
        /// 地图刷的BOSSid
        /// </summary>
        public string BossId;
        /// <summary>
        /// 进入地图消耗货币类型
        /// </summary>
        public int JoinMoneyCostType;
        /// <summary>
        /// 进入消耗数量
        /// </summary>
        public int JoinMoneyCost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LvLimite = bytes.ReadInt();
            LvMaxLimite = bytes.ReadInt();
            JJLvLimite = bytes.ReadInt();
            JJLvMaxLimite = bytes.ReadInt();
            JoinGoodsCost = bytes.ReadInt();
            JoinGoodsCostNumber = bytes.ReadInt();
            LvTxt = bytes.ReadUTF();
            BossId = bytes.ReadUTF();
            JoinMoneyCostType = bytes.ReadInt();
            JoinMoneyCost = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(LvLimite);
            bytes.WriteInt(LvMaxLimite);
            bytes.WriteInt(JJLvLimite);
            bytes.WriteInt(JJLvMaxLimite);
            bytes.WriteInt(JoinGoodsCost);
            bytes.WriteInt(JoinGoodsCostNumber);
            bytes.WriteUTF(LvTxt);
            bytes.WriteUTF(BossId);
            bytes.WriteInt(JoinMoneyCostType);
            bytes.WriteInt(JoinMoneyCost);
        }
    }

    public class HuanMapTemplateMode : TplMode
    {
        private IList<HuanMapTemplate> mList = null;

        public HuanMapTemplateMode(int step) : base("HuanMapTemplate", typeof(HuanMapTemplate), step) { }

        public HuanMapTemplate this[int id]
        {
            get { return Find<HuanMapTemplate>(id); }
        }

        public HuanMapTemplate Find(int id)
        {
            return Find<HuanMapTemplate>(id);
        }

        public IList<HuanMapTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<HuanMapTemplate>();
            return mList;
        }
    }

public class OpenFireTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 需要的物品
        /// </summary>
        public int NeedItem;
        /// <summary>
        /// 可替代物品
        /// </summary>
        public int Replacetem;
        /// <summary>
        /// 需要的物品数量
        /// </summary>
        public int NeedItemNum;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Job = bytes.ReadInt();
            NeedItem = bytes.ReadInt();
            Replacetem = bytes.ReadInt();
            NeedItemNum = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Job);
            bytes.WriteInt(NeedItem);
            bytes.WriteInt(Replacetem);
            bytes.WriteInt(NeedItemNum);
        }
    }

    public class OpenFireTemplateMode : TplMode
    {
        private IList<OpenFireTemplate> mList = null;

        public OpenFireTemplateMode(int step) : base("OpenFireTemplate", typeof(OpenFireTemplate), step) { }

        public OpenFireTemplate this[int id]
        {
            get { return Find<OpenFireTemplate>(id); }
        }

        public OpenFireTemplate Find(int id)
        {
            return Find<OpenFireTemplate>(id);
        }

        public IList<OpenFireTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<OpenFireTemplate>();
            return mList;
        }
    }

public class ApproachTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 功能
        /// </summary>
        public int Function;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Function = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(Function);
        }
    }

    public class ApproachTemplateMode : TplMode
    {
        private IList<ApproachTemplate> mList = null;

        public ApproachTemplateMode(int step) : base("ApproachTemplate", typeof(ApproachTemplate), step) { }

        public ApproachTemplate this[int id]
        {
            get { return Find<ApproachTemplate>(id); }
        }

        public ApproachTemplate Find(int id)
        {
            return Find<ApproachTemplate>(id);
        }

        public IList<ApproachTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ApproachTemplate>();
            return mList;
        }
    }

public class GuildTaskTemplate : Tpl
    {
        /// <summary>
        /// 任务名
        /// </summary>
        public string Name;
        /// <summary>
        /// 任务目标描述
        /// </summary>
        public string Txt;
        /// <summary>
        /// 下个任务
        /// </summary>
        public int Next;
        /// <summary>
        /// 任务需求类型
        /// </summary>
        public int TaskNeedType;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 数量
        /// </summary>
        public int Data3;
        /// <summary>
        /// 任务需求前端显示推荐
        /// </summary>
        public string TaskUnFinish;
        /// <summary>
        /// 未完成任务传送点
        /// </summary>
        public string UnFinishPoint;
        /// <summary>
        /// 未完成寻路点
        /// </summary>
        public string UnFinishSeekPoint;
        /// <summary>
        /// 经验奖励
        /// </summary>
        public int Exp;
        /// <summary>
        /// 绑定金币奖励
        /// </summary>
        public int Money;
        /// <summary>
        /// 通用物品奖励
        /// </summary>
        public string Bonus;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Txt = bytes.ReadUTF();
            Next = bytes.ReadInt();
            TaskNeedType = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Data3 = bytes.ReadInt();
            TaskUnFinish = bytes.ReadUTF();
            UnFinishPoint = bytes.ReadUTF();
            UnFinishSeekPoint = bytes.ReadUTF();
            Exp = bytes.ReadInt();
            Money = bytes.ReadInt();
            Bonus = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Txt);
            bytes.WriteInt(Next);
            bytes.WriteInt(TaskNeedType);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Data3);
            bytes.WriteUTF(TaskUnFinish);
            bytes.WriteUTF(UnFinishPoint);
            bytes.WriteUTF(UnFinishSeekPoint);
            bytes.WriteInt(Exp);
            bytes.WriteInt(Money);
            bytes.WriteUTF(Bonus);
        }
    }

    public class GuildTaskTemplateMode : TplMode
    {
        private IList<GuildTaskTemplate> mList = null;

        public GuildTaskTemplateMode(int step) : base("GuildTaskTemplate", typeof(GuildTaskTemplate), step) { }

        public GuildTaskTemplate this[int id]
        {
            get { return Find<GuildTaskTemplate>(id); }
        }

        public GuildTaskTemplate Find(int id)
        {
            return Find<GuildTaskTemplate>(id);
        }

        public IList<GuildTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildTaskTemplate>();
            return mList;
        }
    }

public class GuildFlagTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 阶
        /// </summary>
        public int Grade;
        /// <summary>
        /// 星级
        /// </summary>
        public int Stars;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 消耗数量
        /// </summary>
        public int MoneyNum;
        /// <summary>
        /// 升级材料消耗
        /// </summary>
        public string CostItem;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Grade = bytes.ReadInt();
            Stars = bytes.ReadInt();
            Level = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNum = bytes.ReadInt();
            CostItem = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Grade);
            bytes.WriteInt(Stars);
            bytes.WriteInt(Level);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNum);
            bytes.WriteUTF(CostItem);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
        }
    }

    public class GuildFlagTemplateMode : TplMode
    {
        private IList<GuildFlagTemplate> mList = null;

        public GuildFlagTemplateMode(int step) : base("GuildFlagTemplate", typeof(GuildFlagTemplate), step) { }

        public GuildFlagTemplate this[int id]
        {
            get { return Find<GuildFlagTemplate>(id); }
        }

        public GuildFlagTemplate Find(int id)
        {
            return Find<GuildFlagTemplate>(id);
        }

        public IList<GuildFlagTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildFlagTemplate>();
            return mList;
        }
    }

public class GuildPatrolTemplate : Tpl
    {
        /// <summary>
        /// 镖车id
        /// </summary>
        public int MonsterTID;
        /// <summary>
        /// 镖车名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 镖车泡点范围
        /// </summary>
        public int Range;
        /// <summary>
        /// 镖车泡点奖励经验（10秒1次）
        /// </summary>
        public int NearExp;
        /// <summary>
        /// 镖车金币奖励
        /// </summary>
        public int MoneyAward;
        /// <summary>
        /// 镖车经验奖励
        /// </summary>
        public int ExpAward;
        /// <summary>
        /// 增加行会资金
        /// </summary>
        public int GuildMoney;
        /// <summary>
        /// 镖车金币奖励
        /// </summary>
        public int LoseMoneyAward;
        /// <summary>
        /// 镖车经验奖励
        /// </summary>
        public int LoseExpAward;
        /// <summary>
        /// 增加行会资金
        /// </summary>
        public int LoseGuildMoney;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonsterID;
        /// <summary>
        /// X坐标
        /// </summary>
        public int MapX;
        /// <summary>
        /// Y坐标
        /// </summary>
        public int MapY;
        /// <summary>
        /// 花费的行会资金
        /// </summary>
        public int Cost;
        /// <summary>
        /// 镖车X坐标
        /// </summary>
        public int BeginX;
        /// <summary>
        /// 镖车Y坐标
        /// </summary>
        public int BeginY;
        /// <summary>
        /// 镖车结束X坐标
        /// </summary>
        public int EndX;
        /// <summary>
        /// 结束Y坐标
        /// </summary>
        public int EndY;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MonsterTID = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Range = bytes.ReadInt();
            NearExp = bytes.ReadInt();
            MoneyAward = bytes.ReadInt();
            ExpAward = bytes.ReadInt();
            GuildMoney = bytes.ReadInt();
            LoseMoneyAward = bytes.ReadInt();
            LoseExpAward = bytes.ReadInt();
            LoseGuildMoney = bytes.ReadInt();
            MonsterID = bytes.ReadInt();
            MapX = bytes.ReadInt();
            MapY = bytes.ReadInt();
            Cost = bytes.ReadInt();
            BeginX = bytes.ReadInt();
            BeginY = bytes.ReadInt();
            EndX = bytes.ReadInt();
            EndY = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MonsterTID);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Range);
            bytes.WriteInt(NearExp);
            bytes.WriteInt(MoneyAward);
            bytes.WriteInt(ExpAward);
            bytes.WriteInt(GuildMoney);
            bytes.WriteInt(LoseMoneyAward);
            bytes.WriteInt(LoseExpAward);
            bytes.WriteInt(LoseGuildMoney);
            bytes.WriteInt(MonsterID);
            bytes.WriteInt(MapX);
            bytes.WriteInt(MapY);
            bytes.WriteInt(Cost);
            bytes.WriteInt(BeginX);
            bytes.WriteInt(BeginY);
            bytes.WriteInt(EndX);
            bytes.WriteInt(EndY);
        }
    }

    public class GuildPatrolTemplateMode : TplMode
    {
        private IList<GuildPatrolTemplate> mList = null;

        public GuildPatrolTemplateMode(int step) : base("GuildPatrolTemplate", typeof(GuildPatrolTemplate), step) { }

        public GuildPatrolTemplate this[int id]
        {
            get { return Find<GuildPatrolTemplate>(id); }
        }

        public GuildPatrolTemplate Find(int id)
        {
            return Find<GuildPatrolTemplate>(id);
        }

        public IList<GuildPatrolTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildPatrolTemplate>();
            return mList;
        }
    }

public class GuildActivityMonsterTemplate : Tpl
    {
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonsterID;
        /// <summary>
        /// 怪物出生点X
        /// </summary>
        public int MapX;
        /// <summary>
        /// 怪物出生点Y
        /// </summary>
        public int MapY;
        /// <summary>
        /// 怪物刷新后多少秒刷下一只
        /// </summary>
        public int Time;
        /// <summary>
        /// 击杀之后的BUFF
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 波数
        /// </summary>
        public int Wave;
        /// <summary>
        /// 是否是BOSS
        /// </summary>
        public int IsBoss;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MonsterID = bytes.ReadInt();
            MapX = bytes.ReadInt();
            MapY = bytes.ReadInt();
            Time = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            Wave = bytes.ReadInt();
            IsBoss = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MonsterID);
            bytes.WriteInt(MapX);
            bytes.WriteInt(MapY);
            bytes.WriteInt(Time);
            bytes.WriteInt(BuffID);
            bytes.WriteInt(Wave);
            bytes.WriteInt(IsBoss);
            bytes.WriteInt(BroadCast);
        }
    }

    public class GuildActivityMonsterTemplateMode : TplMode
    {
        private IList<GuildActivityMonsterTemplate> mList = null;

        public GuildActivityMonsterTemplateMode(int step) : base("GuildActivityMonsterTemplate", typeof(GuildActivityMonsterTemplate), step) { }

        public GuildActivityMonsterTemplate this[int id]
        {
            get { return Find<GuildActivityMonsterTemplate>(id); }
        }

        public GuildActivityMonsterTemplate Find(int id)
        {
            return Find<GuildActivityMonsterTemplate>(id);
        }

        public IList<GuildActivityMonsterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildActivityMonsterTemplate>();
            return mList;
        }
    }

public class GuildConfigTemplate : Tpl
    {
        /// <summary>
        /// 自动晋升时间
        /// </summary>
        public int AutoPromotionDate;
        /// <summary>
        /// 自动晋升邮件
        /// </summary>
        public int AutoPromotionMail;
        /// <summary>
        /// 帮派驻地地图ID
        /// </summary>
        public int GuildMap;
        /// <summary>
        /// 充值方式增加绑钻（填万分比）
        /// </summary>
        public int GuildMonPay;
        /// <summary>
        /// 登录方式增加绑钻
        /// </summary>
        public int GuildMonRegister;
        /// <summary>
        /// 帮派拍卖方式增加绑钻（填万分比）
        /// </summary>
        public int GuildMonAuction;
        /// <summary>
        /// 攻占沙城方式增加绑钻
        /// </summary>
        public int GuildMonCapture;
        /// <summary>
        /// 行会红包随机金额最大值喝最小值相差倍数
        /// </summary>
        public string RedPacketRandomScatter;
        /// <summary>
        /// 
        /// </summary>
        public int RedPacketSaveTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            AutoPromotionDate = bytes.ReadInt();
            AutoPromotionMail = bytes.ReadInt();
            GuildMap = bytes.ReadInt();
            GuildMonPay = bytes.ReadInt();
            GuildMonRegister = bytes.ReadInt();
            GuildMonAuction = bytes.ReadInt();
            GuildMonCapture = bytes.ReadInt();
            RedPacketRandomScatter = bytes.ReadUTF();
            RedPacketSaveTime = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(AutoPromotionDate);
            bytes.WriteInt(AutoPromotionMail);
            bytes.WriteInt(GuildMap);
            bytes.WriteInt(GuildMonPay);
            bytes.WriteInt(GuildMonRegister);
            bytes.WriteInt(GuildMonAuction);
            bytes.WriteInt(GuildMonCapture);
            bytes.WriteUTF(RedPacketRandomScatter);
            bytes.WriteInt(RedPacketSaveTime);
        }
    }

    public class GuildConfigTemplateMode : TplMode
    {
        private IList<GuildConfigTemplate> mList = null;

        public GuildConfigTemplateMode(int step) : base("GuildConfigTemplate", typeof(GuildConfigTemplate), step) { }

        public GuildConfigTemplate this[int id]
        {
            get { return Find<GuildConfigTemplate>(id); }
        }

        public GuildConfigTemplate Find(int id)
        {
            return Find<GuildConfigTemplate>(id);
        }

        public IList<GuildConfigTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildConfigTemplate>();
            return mList;
        }
    }

public class GuildWelfareTemplate : Tpl
    {
        /// <summary>
        /// 会长奖励
        /// </summary>
        public string HzAward;
        /// <summary>
        /// 会长奖励元宝基础值
        /// </summary>
        public int HzGold;
        /// <summary>
        /// 会长奖励充值元宝万分比
        /// </summary>
        public int HzGold2;
        /// <summary>
        /// 副会长奖励
        /// </summary>
        public string FhzAward;
        /// <summary>
        /// 副会长奖励元宝基础值
        /// </summary>
        public int FhzGold;
        /// <summary>
        /// 副会长奖励元宝万分比
        /// </summary>
        public int FhzGold2;
        /// <summary>
        /// 会员奖励
        /// </summary>
        public string HyAward;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            HzAward = bytes.ReadUTF();
            HzGold = bytes.ReadInt();
            HzGold2 = bytes.ReadInt();
            FhzAward = bytes.ReadUTF();
            FhzGold = bytes.ReadInt();
            FhzGold2 = bytes.ReadInt();
            HyAward = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(HzAward);
            bytes.WriteInt(HzGold);
            bytes.WriteInt(HzGold2);
            bytes.WriteUTF(FhzAward);
            bytes.WriteInt(FhzGold);
            bytes.WriteInt(FhzGold2);
            bytes.WriteUTF(HyAward);
        }
    }

    public class GuildWelfareTemplateMode : TplMode
    {
        private IList<GuildWelfareTemplate> mList = null;

        public GuildWelfareTemplateMode(int step) : base("GuildWelfareTemplate", typeof(GuildWelfareTemplate), step) { }

        public GuildWelfareTemplate this[int id]
        {
            get { return Find<GuildWelfareTemplate>(id); }
        }

        public GuildWelfareTemplate Find(int id)
        {
            return Find<GuildWelfareTemplate>(id);
        }

        public IList<GuildWelfareTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildWelfareTemplate>();
            return mList;
        }
    }

public class GuildLvTemplate : Tpl
    {
        /// <summary>
        /// 升级需要的行会资金
        /// </summary>
        public int NeedMoney;
        /// <summary>
        /// 维护资金
        /// </summary>
        public int FixedMoney;
        /// <summary>
        /// 成员人数
        /// </summary>
        public int MemberNum;
        /// <summary>
        /// 效果
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 仓库格子数
        /// </summary>
        public int GuildBagCount;
        /// <summary>
        /// 帮派升级方式增加绑钻
        /// </summary>
        public int GuildMonUp;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedMoney = bytes.ReadInt();
            FixedMoney = bytes.ReadInt();
            MemberNum = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            GuildBagCount = bytes.ReadInt();
            GuildMonUp = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedMoney);
            bytes.WriteInt(FixedMoney);
            bytes.WriteInt(MemberNum);
            bytes.WriteInt(BuffID);
            bytes.WriteInt(GuildBagCount);
            bytes.WriteInt(GuildMonUp);
        }
    }

    public class GuildLvTemplateMode : TplMode
    {
        private IList<GuildLvTemplate> mList = null;

        public GuildLvTemplateMode(int step) : base("GuildLvTemplate", typeof(GuildLvTemplate), step) { }

        public GuildLvTemplate this[int id]
        {
            get { return Find<GuildLvTemplate>(id); }
        }

        public GuildLvTemplate Find(int id)
        {
            return Find<GuildLvTemplate>(id);
        }

        public IList<GuildLvTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildLvTemplate>();
            return mList;
        }
    }

public class GuildPositionTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string PositionName;
        /// <summary>
        /// 是否有权限宣战
        /// </summary>
        public int IsWar;
        /// <summary>
        /// 是否有操作权限（加人）
        /// </summary>
        public int IsRootIn;
        /// <summary>
        /// 是否有权限（踢人）
        /// </summary>
        public int IsRootOut;
        /// <summary>
        /// 是否有权删除行会道具
        /// </summary>
        public int IsRootGuildDelItem;
        /// <summary>
        /// 是否有权限修改公告
        /// </summary>
        public int IsRootGuildNotice;
        /// <summary>
        /// 是否有权限升级行会
        /// </summary>
        public int IsRootLvupGuild;
        /// <summary>
        /// 是否有任命权限
        /// </summary>
        public int IsRootGuildHr;
        /// <summary>
        /// 是否有权限设置加入
        /// </summary>
        public int IsRootSetJoin;
        /// <summary>
        /// 最大人数限制（0-不限）
        /// </summary>
        public int MaxNum;
        /// <summary>
        /// 会长离线多久可以对其弹劾（秒）
        /// </summary>
        public int ImpeachmentTime;
        /// <summary>
        /// 是否有权限开启行会活动
        /// </summary>
        public int OpenGuildActivity;
        /// <summary>
        /// 是否有权限开启行会圣兽
        /// </summary>
        public int GuildMonActivity;
        /// <summary>
        /// 是否可设置仓库兑换权限
        /// </summary>
        public int IsExchange;
        /// <summary>
        /// 行会战旗属性增益（万分比）
        /// </summary>
        public int GuildFlagGain;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PositionName = bytes.ReadUTF();
            IsWar = bytes.ReadInt();
            IsRootIn = bytes.ReadInt();
            IsRootOut = bytes.ReadInt();
            IsRootGuildDelItem = bytes.ReadInt();
            IsRootGuildNotice = bytes.ReadInt();
            IsRootLvupGuild = bytes.ReadInt();
            IsRootGuildHr = bytes.ReadInt();
            IsRootSetJoin = bytes.ReadInt();
            MaxNum = bytes.ReadInt();
            ImpeachmentTime = bytes.ReadInt();
            OpenGuildActivity = bytes.ReadInt();
            GuildMonActivity = bytes.ReadInt();
            IsExchange = bytes.ReadInt();
            GuildFlagGain = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(PositionName);
            bytes.WriteInt(IsWar);
            bytes.WriteInt(IsRootIn);
            bytes.WriteInt(IsRootOut);
            bytes.WriteInt(IsRootGuildDelItem);
            bytes.WriteInt(IsRootGuildNotice);
            bytes.WriteInt(IsRootLvupGuild);
            bytes.WriteInt(IsRootGuildHr);
            bytes.WriteInt(IsRootSetJoin);
            bytes.WriteInt(MaxNum);
            bytes.WriteInt(ImpeachmentTime);
            bytes.WriteInt(OpenGuildActivity);
            bytes.WriteInt(GuildMonActivity);
            bytes.WriteInt(IsExchange);
            bytes.WriteInt(GuildFlagGain);
        }
    }

    public class GuildPositionTemplateMode : TplMode
    {
        private IList<GuildPositionTemplate> mList = null;

        public GuildPositionTemplateMode(int step) : base("GuildPositionTemplate", typeof(GuildPositionTemplate), step) { }

        public GuildPositionTemplate this[int id]
        {
            get { return Find<GuildPositionTemplate>(id); }
        }

        public GuildPositionTemplate Find(int id)
        {
            return Find<GuildPositionTemplate>(id);
        }

        public IList<GuildPositionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildPositionTemplate>();
            return mList;
        }
    }

public class LivenessLvtemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 名称
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// icon展示
        /// </summary>
        public int ShowIcon;
        /// <summary>
        /// 数值
        /// </summary>
        public int Numb;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 战斗力
        /// </summary>
        public int ComatEffectiveness;
        /// <summary>
        /// 奖励字符串
        /// </summary>
        public string Award;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            Career = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            ShowIcon = bytes.ReadInt();
            Numb = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            ComatEffectiveness = bytes.ReadInt();
            Award = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteInt(Career);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(ShowIcon);
            bytes.WriteInt(Numb);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(ComatEffectiveness);
            bytes.WriteUTF(Award);
        }
    }

    public class LivenessLvtemplateMode : TplMode
    {
        private IList<LivenessLvtemplate> mList = null;

        public LivenessLvtemplateMode(int step) : base("LivenessLvtemplate", typeof(LivenessLvtemplate), step) { }

        public LivenessLvtemplate this[int id]
        {
            get { return Find<LivenessLvtemplate>(id); }
        }

        public LivenessLvtemplate Find(int id)
        {
            return Find<LivenessLvtemplate>(id);
        }

        public IList<LivenessLvtemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LivenessLvtemplate>();
            return mList;
        }
    }

public class StoneLevelTemplate : Tpl
    {
        /// <summary>
        /// 装备部位
        /// </summary>
        public int Type;
        /// <summary>
        /// 境界需求
        /// </summary>
        public int NeedState;
        /// <summary>
        /// 等级需求
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 装备名称
        /// </summary>
        public string EquipName;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            NeedState = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            EquipName = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(NeedState);
            bytes.WriteInt(NeedLv);
            bytes.WriteUTF(EquipName);
        }
    }

    public class StoneLevelTemplateMode : TplMode
    {
        private IList<StoneLevelTemplate> mList = null;

        public StoneLevelTemplateMode(int step) : base("StoneLevelTemplate", typeof(StoneLevelTemplate), step) { }

        public StoneLevelTemplate this[int id]
        {
            get { return Find<StoneLevelTemplate>(id); }
        }

        public StoneLevelTemplate Find(int id)
        {
            return Find<StoneLevelTemplate>(id);
        }

        public IList<StoneLevelTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<StoneLevelTemplate>();
            return mList;
        }
    }

public class StoryTemplate : Tpl
    {
        /// <summary>
        /// 属于哪个剧情ID
        /// </summary>
        public int StoryID;
        /// <summary>
        /// 在剧情中排序
        /// </summary>
        public int SequenceID;
        /// <summary>
        /// 持续时间（开始执行多久后执行下一条）
        /// </summary>
        public int Duration;
        /// <summary>
        /// 客户端是否向服务端发送协议(1发，0不发）
        /// </summary>
        public int Transmission;
        /// <summary>
        /// 是否需要遮挡
        /// </summary>
        public int IsShadow;
        /// <summary>
        /// 玩家是否可以操作
        /// </summary>
        public int IsContrl;
        /// <summary>
        /// 是否停止地图AI（0不停止，1停止）
        /// </summary>
        public int IsStopAI;
        /// <summary>
        /// 事件类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 参数3
        /// </summary>
        public int Data3;
        /// <summary>
        /// 参数4
        /// </summary>
        public int Data4;
        /// <summary>
        /// 参数5
        /// </summary>
        public string Data5;
        /// <summary>
        /// 参数6
        /// </summary>
        public string Data6;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            StoryID = bytes.ReadInt();
            SequenceID = bytes.ReadInt();
            Duration = bytes.ReadInt();
            Transmission = bytes.ReadInt();
            IsShadow = bytes.ReadInt();
            IsContrl = bytes.ReadInt();
            IsStopAI = bytes.ReadInt();
            Type = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Data3 = bytes.ReadInt();
            Data4 = bytes.ReadInt();
            Data5 = bytes.ReadUTF();
            Data6 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(StoryID);
            bytes.WriteInt(SequenceID);
            bytes.WriteInt(Duration);
            bytes.WriteInt(Transmission);
            bytes.WriteInt(IsShadow);
            bytes.WriteInt(IsContrl);
            bytes.WriteInt(IsStopAI);
            bytes.WriteInt(Type);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Data3);
            bytes.WriteInt(Data4);
            bytes.WriteUTF(Data5);
            bytes.WriteUTF(Data6);
        }
    }

    public class StoryTemplateMode : TplMode
    {
        private IList<StoryTemplate> mList = null;

        public StoryTemplateMode(int step) : base("StoryTemplate", typeof(StoryTemplate), step) { }

        public StoryTemplate this[int id]
        {
            get { return Find<StoryTemplate>(id); }
        }

        public StoryTemplate Find(int id)
        {
            return Find<StoryTemplate>(id);
        }

        public IList<StoryTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<StoryTemplate>();
            return mList;
        }
    }

public class NEWJJTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int JJLV;
        /// <summary>
        /// 职业判断
        /// </summary>
        public int Job;
        /// <summary>
        /// 兑换修为需达到等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 填充所需修为值
        /// </summary>
        public long NeedExp;
        /// <summary>
        /// 主要预览
        /// 内容类型
        /// </summary>
        public int MainPreviewType;
        /// <summary>
        /// 主要预览图标
        /// </summary>
        public int MainPreviewIcon;
        /// <summary>
        /// 主要预览文本
        /// </summary>
        public string MainPreviewText;
        /// <summary>
        /// 次要预览内容1
        /// 类型
        /// </summary>
        public int PreviewType1;
        /// <summary>
        /// 次要预览图标1
        /// </summary>
        public int PreviewIcon1;
        /// <summary>
        /// 次要预览文本1
        /// </summary>
        public string PreviewText1;
        /// <summary>
        /// 次要预览内容2
        /// 类型
        /// </summary>
        public int PreviewType2;
        /// <summary>
        /// 次要预览图标2
        /// </summary>
        public int PreviewIcon2;
        /// <summary>
        /// 次要预览文本2
        /// </summary>
        public string PreviewText2;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法值
        /// </summary>
        public int MP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 转生奖励道具
        /// </summary>
        public string ItemReward;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            JJLV = bytes.ReadInt();
            Job = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            NeedExp = bytes.ReadInt64();
            MainPreviewType = bytes.ReadInt();
            MainPreviewIcon = bytes.ReadInt();
            MainPreviewText = bytes.ReadUTF();
            PreviewType1 = bytes.ReadInt();
            PreviewIcon1 = bytes.ReadInt();
            PreviewText1 = bytes.ReadUTF();
            PreviewType2 = bytes.ReadInt();
            PreviewIcon2 = bytes.ReadInt();
            PreviewText2 = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            ItemReward = bytes.ReadUTF();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(JJLV);
            bytes.WriteInt(Job);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt64(NeedExp);
            bytes.WriteInt(MainPreviewType);
            bytes.WriteInt(MainPreviewIcon);
            bytes.WriteUTF(MainPreviewText);
            bytes.WriteInt(PreviewType1);
            bytes.WriteInt(PreviewIcon1);
            bytes.WriteUTF(PreviewText1);
            bytes.WriteInt(PreviewType2);
            bytes.WriteInt(PreviewIcon2);
            bytes.WriteUTF(PreviewText2);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteUTF(ItemReward);
            bytes.WriteInt(NoticeID);
        }
    }

    public class NEWJJTemplateMode : TplMode
    {
        private IList<NEWJJTemplate> mList = null;

        public NEWJJTemplateMode(int step) : base("NEWJJTemplate", typeof(NEWJJTemplate), step) { }

        public NEWJJTemplate this[int id]
        {
            get { return Find<NEWJJTemplate>(id); }
        }

        public NEWJJTemplate Find(int id)
        {
            return Find<NEWJJTemplate>(id);
        }

        public IList<NEWJJTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NEWJJTemplate>();
            return mList;
        }
    }

public class JJTaskTemplate : Tpl
    {
        /// <summary>
        /// 怪物组和权重
        /// </summary>
        public string GroupID;
        /// <summary>
        /// 数量
        /// </summary>
        public int Number;
        /// <summary>
        /// 炼体任务真名
        /// </summary>
        public string Detail;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            GroupID = bytes.ReadUTF();
            Number = bytes.ReadInt();
            Detail = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(GroupID);
            bytes.WriteInt(Number);
            bytes.WriteUTF(Detail);
        }
    }

    public class JJTaskTemplateMode : TplMode
    {
        private IList<JJTaskTemplate> mList = null;

        public JJTaskTemplateMode(int step) : base("JJTaskTemplate", typeof(JJTaskTemplate), step) { }

        public JJTaskTemplate this[int id]
        {
            get { return Find<JJTaskTemplate>(id); }
        }

        public JJTaskTemplate Find(int id)
        {
            return Find<JJTaskTemplate>(id);
        }

        public IList<JJTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JJTaskTemplate>();
            return mList;
        }
    }

public class JJAttrTemplate : Tpl
    {
        /// <summary>
        /// 属性组编号
        /// </summary>
        public int Type;
        /// <summary>
        /// 点亮位置
        /// </summary>
        public int Place;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 暴击值
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴伤
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Place = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Place);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
        }
    }

    public class JJAttrTemplateMode : TplMode
    {
        private IList<JJAttrTemplate> mList = null;

        public JJAttrTemplateMode(int step) : base("JJAttrTemplate", typeof(JJAttrTemplate), step) { }

        public JJAttrTemplate this[int id]
        {
            get { return Find<JJAttrTemplate>(id); }
        }

        public JJAttrTemplate Find(int id)
        {
            return Find<JJAttrTemplate>(id);
        }

        public IList<JJAttrTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JJAttrTemplate>();
            return mList;
        }
    }

public class StateTemplate : Tpl
    {
        /// <summary>
        /// 职业判定
        /// </summary>
        public int Job;
        /// <summary>
        /// 需求点数
        /// </summary>
        public int Point;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法值
        /// </summary>
        public int MP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Point = bytes.ReadInt();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Point);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(NoticeID);
        }
    }

    public class StateTemplateMode : TplMode
    {
        private IList<StateTemplate> mList = null;

        public StateTemplateMode(int step) : base("StateTemplate", typeof(StateTemplate), step) { }

        public StateTemplate this[int id]
        {
            get { return Find<StateTemplate>(id); }
        }

        public StateTemplate Find(int id)
        {
            return Find<StateTemplate>(id);
        }

        public IList<StateTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<StateTemplate>();
            return mList;
        }
    }

public class AwardHallTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 时间
        /// </summary>
        public int Time;
        /// <summary>
        /// 奖励1
        /// </summary>
        public string AwardItems;
        /// <summary>
        /// 奖励2
        /// </summary>
        public string VIPAwardItems;
        /// <summary>
        /// 抽奖权重
        /// </summary>
        public string Value;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Time = bytes.ReadInt();
            AwardItems = bytes.ReadUTF();
            VIPAwardItems = bytes.ReadUTF();
            Value = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(Time);
            bytes.WriteUTF(AwardItems);
            bytes.WriteUTF(VIPAwardItems);
            bytes.WriteUTF(Value);
        }
    }

    public class AwardHallTemplateMode : TplMode
    {
        private IList<AwardHallTemplate> mList = null;

        public AwardHallTemplateMode(int step) : base("AwardHallTemplate", typeof(AwardHallTemplate), step) { }

        public AwardHallTemplate this[int id]
        {
            get { return Find<AwardHallTemplate>(id); }
        }

        public AwardHallTemplate Find(int id)
        {
            return Find<AwardHallTemplate>(id);
        }

        public IList<AwardHallTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AwardHallTemplate>();
            return mList;
        }
    }

public class SignInTemplate : Tpl
    {
        /// <summary>
        /// 轮次
        /// </summary>
        public int Circle;
        /// <summary>
        /// 循环次数
        /// </summary>
        public int Loop;
        /// <summary>
        /// 天
        /// </summary>
        public int Day;
        /// <summary>
        /// 奖励
        /// </summary>
        public string Awards;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 累签奖励
        /// </summary>
        public string ExtraAwards;
        /// <summary>
        /// 是否绑定2
        /// </summary>
        public int IsBind2;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Circle = bytes.ReadInt();
            Loop = bytes.ReadInt();
            Day = bytes.ReadInt();
            Awards = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
            ExtraAwards = bytes.ReadUTF();
            IsBind2 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Circle);
            bytes.WriteInt(Loop);
            bytes.WriteInt(Day);
            bytes.WriteUTF(Awards);
            bytes.WriteInt(IsBind);
            bytes.WriteUTF(ExtraAwards);
            bytes.WriteInt(IsBind2);
        }
    }

    public class SignInTemplateMode : TplMode
    {
        private IList<SignInTemplate> mList = null;

        public SignInTemplateMode(int step) : base("SignInTemplate", typeof(SignInTemplate), step) { }

        public SignInTemplate this[int id]
        {
            get { return Find<SignInTemplate>(id); }
        }

        public SignInTemplate Find(int id)
        {
            return Find<SignInTemplate>(id);
        }

        public IList<SignInTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SignInTemplate>();
            return mList;
        }
    }

public class ShopTemplate : Tpl
    {
        /// <summary>
        /// 收购名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 1吃货2五彩神石3杀戮宝珠4宝藏材料
        /// </summary>
        public int Type;
        /// <summary>
        /// 最低数量
        /// </summary>
        public int MinCount;
        /// <summary>
        /// 最高数量
        /// </summary>
        public int MaxCount;
        /// <summary>
        /// 1等级2TID3TID
        /// </summary>
        public int Data1;
        /// <summary>
        /// 1经验丹TID
        /// </summary>
        public int Data2;
        /// <summary>
        /// 最低价格
        /// </summary>
        public int MinPrice;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            MinCount = bytes.ReadInt();
            MaxCount = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            MinPrice = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(MinCount);
            bytes.WriteInt(MaxCount);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(MinPrice);
        }
    }

    public class ShopTemplateMode : TplMode
    {
        private IList<ShopTemplate> mList = null;

        public ShopTemplateMode(int step) : base("ShopTemplate", typeof(ShopTemplate), step) { }

        public ShopTemplate this[int id]
        {
            get { return Find<ShopTemplate>(id); }
        }

        public ShopTemplate Find(int id)
        {
            return Find<ShopTemplate>(id);
        }

        public IList<ShopTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ShopTemplate>();
            return mList;
        }
    }

public class SkillEffectTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 方向
        /// </summary>
        public string Direction;
        /// <summary>
        /// 偏移坐标
        /// </summary>
        public string Position;
        /// <summary>
        /// 距离
        /// </summary>
        public int Distance;
        /// <summary>
        /// 数量
        /// </summary>
        public int Count;
        /// <summary>
        /// 延迟时间
        /// </summary>
        public int Time;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Direction = bytes.ReadUTF();
            Position = bytes.ReadUTF();
            Distance = bytes.ReadInt();
            Count = bytes.ReadInt();
            Time = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteUTF(Direction);
            bytes.WriteUTF(Position);
            bytes.WriteInt(Distance);
            bytes.WriteInt(Count);
            bytes.WriteInt(Time);
        }
    }

    public class SkillEffectTemplateMode : TplMode
    {
        private IList<SkillEffectTemplate> mList = null;

        public SkillEffectTemplateMode(int step) : base("SkillEffectTemplate", typeof(SkillEffectTemplate), step) { }

        public SkillEffectTemplate this[int id]
        {
            get { return Find<SkillEffectTemplate>(id); }
        }

        public SkillEffectTemplate Find(int id)
        {
            return Find<SkillEffectTemplate>(id);
        }

        public IList<SkillEffectTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SkillEffectTemplate>();
            return mList;
        }
    }

public class SkillTemplate : Tpl
    {
        /// <summary>
        /// 技能名称
        /// </summary>
        public string SkillName;
        /// <summary>
        /// 是否为
        /// 奥义效果
        /// 0否1是
        /// </summary>
        public int Ultimate;
        /// <summary>
        /// 奥义所需道具
        /// </summary>
        public string UltimateNeedItem;
        /// <summary>
        /// 奥义所需专精等级
        /// </summary>
        public int UltimateNeedTalentLV;
        /// <summary>
        /// 是否暴击（1是暴击，0是不暴击）
        /// </summary>
        public int Crit;
        /// <summary>
        /// 是否触发麻痹(0是1否)
        /// </summary>
        public int Paralysis;
        /// <summary>
        /// 技能附加暴击率
        /// </summary>
        public int SkillCrit;
        /// <summary>
        /// 暴击时
        /// 触发技能
        /// </summary>
        public int CritToSkill;
        /// <summary>
        /// 是否可闪避（0是可闪避，1是不可闪避）
        /// </summary>
        public int IgnoreMiss;
        /// <summary>
        /// 是否无视防御（0是不可无视防御，1是无视防御）
        /// </summary>
        public int IgnoreDefend;
        /// <summary>
        /// 是否无视法师魔法盾（0是不可无视，1是无视魔法盾）
        /// </summary>
        public int IgnoreEgg;
        /// <summary>
        /// 基础攻击加成的万分比
        /// </summary>
        public string BaseAtkPercent;
        /// <summary>
        /// 技能受攻击加成的万分比
        /// </summary>
        public string SkillPercent;
        /// <summary>
        /// 技能加成的常数值
        /// </summary>
        public int SkillConstant;
        /// <summary>
        /// 最大生命值伤害万分比
        /// </summary>
        public int SkillMaxhpPct;
        /// <summary>
        /// 当前生命值伤害万分比
        /// </summary>
        public int SkillCurhpPct;
        /// <summary>
        /// 附加自身最大生命值伤害万分比额外伤害
        /// </summary>
        public int SelfMaxhpPctDamage;
        /// <summary>
        /// 附加自身当前生命值伤害万分比额外伤害
        /// </summary>
        public int SelfCurhpPctDamage;
        /// <summary>
        /// 生命值低于x时
        /// 技能伤害加成
        /// </summary>
        public string HealthDamagePct;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 技能职业（0通用，1战士，2法师，3道士，4行会技能）
        /// </summary>
        public int SkillJob;
        /// <summary>
        /// 释放距离
        /// </summary>
        public int CastDist;
        /// <summary>
        /// 攻击技能硬直（毫秒）
        /// 时间不结束，不能释放任何技能
        /// </summary>
        public int ActionTime;
        /// <summary>
        /// 动作播放时间
        /// 倒计时结束后恢复待机状态
        /// </summary>
        public int ClientActionTime;
        /// <summary>
        /// 攻击移动硬直（毫秒）
        /// 时间不结束，不能移动
        /// 硬直时间受攻速影响
        /// </summary>
        public int ClientActionTime2;
        /// <summary>
        /// 技能造成伤害延迟时间（用于配合施法动作和特效）单位毫秒
        /// </summary>
        public int WaitTime;
        /// <summary>
        /// 客户端飘血延迟时间（毫秒）
        /// </summary>
        public int PiaoXueTime;
        /// <summary>
        /// 前端用来判定施法动作
        /// </summary>
        public int CastingAction;
        /// <summary>
        /// 技能类型
        /// </summary>
        public int SkillType;
        /// <summary>
        /// 技能是否锁定目标（针对所有技能生效）
        /// </summary>
        public int LockingTwo;
        /// <summary>
        /// 是否锁定自身为目标 1是锁定自身，0是非锁定自身 2是随机找个人放但是不锁定
        /// 锁定自身的技能不判断释放距离
        /// </summary>
        public int SkillTarget;
        /// <summary>
        /// 是否优先
        /// 鼠标指向为目标
        /// （0是；1否）
        /// </summary>
        public int MouseTarget;
        /// <summary>
        /// 无指向目标时
        /// 是否锁定自身为目标
        /// （0是；1否）
        /// </summary>
        public int NoMouseObjectLockSelf;
        /// <summary>
        /// 是否可选作尸体为有效目标
        /// 0否 1是
        /// </summary>
        public int CorpseTarget;
        /// <summary>
        /// 是否有效目标才可释放
        /// </summary>
        public int IsEffectiveGoals;
        /// <summary>
        /// 技能子类型
        /// </summary>
        public int SubType;
        /// <summary>
        /// 释放方式（选取目标范围 0单个目标 1视野范围目标）
        /// </summary>
        public int ReleaseMode;
        /// <summary>
        /// 技能组
        /// </summary>
        public int SkillGroup;
        /// <summary>
        /// 伴生技能组
        /// </summary>
        public string DerivedSkillGroup;
        /// <summary>
        /// 伴生技能等级
        /// </summary>
        public string DerivedSkillLevel;
        /// <summary>
        /// 技能小阶
        /// </summary>
        public int SkillClass;
        /// <summary>
        /// 技能等级
        /// </summary>
        public int SkillLevel;
        /// <summary>
        /// 升级熟练度
        /// </summary>
        public int NeedExp;
        /// <summary>
        /// 技能解锁条件
        /// </summary>
        public string NeedTxt;
        /// <summary>
        /// 解锁条件文本
        /// 变色所需转生等级
        /// </summary>
        public int NeedTxtChange;
        /// <summary>
        /// 升阶所需条件
        /// </summary>
        public string ClassNeedtxt;
        /// <summary>
        /// 提升熟练度需要道具
        /// </summary>
        public string OnceNeedGoods;
        /// <summary>
        /// 单次提升熟练度的值
        /// </summary>
        public int OnceExp;
        /// <summary>
        /// 升级技能需要开服天数
        /// </summary>
        public int NeedOpenDay;
        /// <summary>
        /// 升级需要玩家转生等级
        /// </summary>
        public int NeedReLv;
        /// <summary>
        /// 升级需要玩家等级
        /// </summary>
        public int RiseNeedLv;
        /// <summary>
        /// 升级需要道具
        /// </summary>
        public string RiseNeedGoods;
        /// <summary>
        /// 1增益
        /// 2减益
        /// </summary>
        public int GainDebuff;
        /// <summary>
        /// 参数备注
        /// </summary>
        public string Remarks;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Param1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Param2;
        /// <summary>
        /// 参数3
        /// </summary>
        public int Param3;
        /// <summary>
        /// 参数4
        /// </summary>
        public int Param4;
        /// <summary>
        /// 参数5
        /// </summary>
        public int Param5;
        /// <summary>
        /// 参数6
        /// 吸血比例
        /// </summary>
        public int Param6;
        /// <summary>
        /// 参数7
        /// X偏量
        /// </summary>
        public int Param7;
        /// <summary>
        /// 参数8
        /// Y偏量
        /// </summary>
        public int Param8;
        /// <summary>
        /// 参数9
        /// </summary>
        public string Param9;
        /// <summary>
        /// 使用时
        /// 触发额外技能概率
        /// </summary>
        public int AdditionalSkillPct;
        /// <summary>
        /// 使用时
        /// 触发额外技能
        /// </summary>
        public int AdditionalSkill;
        /// <summary>
        /// 1物理攻击，2魔法攻击，3道术攻击
        /// </summary>
        public int HurtType;
        /// <summary>
        /// 作为场景上特效是否具有八方向（0是没有，1是有）
        /// </summary>
        public int EightDirection;
        /// <summary>
        /// 场景上特效
        /// </summary>
        public int EffUpScene;
        /// <summary>
        /// 施法特效八方向
        /// </summary>
        public int UpRoleDirection;
        /// <summary>
        /// 人物施法上特效
        /// </summary>
        public int EffUpRole;
        /// <summary>
        /// 人物施法下特效
        /// </summary>
        public int EffBelowRole;
        /// <summary>
        /// 人物脚底特效
        /// </summary>
        public int EffDownRole;
        /// <summary>
        /// 飞行特效
        /// </summary>
        public int EffFlight;
        /// <summary>
        /// 飞行速度（每帧飞行距离）
        /// </summary>
        public int FlySpeed;
        /// <summary>
        /// 爆炸特效
        /// </summary>
        public string EffExplode;
        /// <summary>
        /// 多次伤害时使用爆炸特效
        /// </summary>
        public int EffExplode1;
        /// <summary>
        /// 爆炸特效
        /// 中心点位置
        /// </summary>
        public int BodyPos;
        /// <summary>
        /// 爆炸特效的位置（0在场景中，1在被攻击者身上）
        /// </summary>
        public int Position;
        /// <summary>
        /// 针对飞行特效是否开启八方向（1开启，0不开启）
        /// </summary>
        public int OpenAllRound;
        /// <summary>
        /// 调用的组合特效ID
        /// </summary>
        public int EffectId;
        /// <summary>
        /// 提升熟练度需要玩家等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 使用增加该技能熟练度（攻杀、基本通过普通攻击获得）
        /// </summary>
        public int UseAddExp;
        /// <summary>
        /// 需要魔法值
        /// </summary>
        public int NeedMP;
        /// <summary>
        /// 冷却时间（ms）
        /// </summary>
        public int CDTime;
        /// <summary>
        /// 施法速度
        /// 是否受攻速影响
        /// </summary>
        public int SpeedEffectCD;
        /// <summary>
        /// 下一级模板ID
        /// </summary>
        public int NextTID;
        /// <summary>
        /// 技能描述
        /// </summary>
        public string SkillSummary;
        /// <summary>
        /// 伤害描述
        /// </summary>
        public string HurtSummary;
        /// <summary>
        /// 技能图标
        /// </summary>
        public int SkillIcon;
        /// <summary>
        /// BuffID
        /// </summary>
        public string BuffID;
        /// <summary>
        /// 是否触发吸血
        /// </summary>
        public int CanVampire;
        /// <summary>
        /// 吸血效果折损万分比
        /// </summary>
        public int VampireReducePct;
        /// <summary>
        /// 人物身上的声音 
        /// </summary>
        public string RoleSound;
        /// <summary>
        /// 飞行的声音
        /// </summary>
        public string FlightSound;
        /// <summary>
        /// 爆炸的声音
        /// </summary>
        public string ExplodeSound;
        /// <summary>
        /// 是否有默认快捷键（0没有，1有）
        /// </summary>
        public int IsHaveHotKey;
        /// <summary>
        /// 下一阶技能展示
        /// </summary>
        public int NextIcon;
        /// <summary>
        /// 升阶总共几级
        /// </summary>
        public int RiseBase;
        /// <summary>
        /// 当前有几级
        /// </summary>
        public int RiseLevel;
        /// <summary>
        /// 技能等级展示
        /// </summary>
        public int LevelShow;
        /// <summary>
        /// 是否触发致命
        /// （含神剑、匕首）
        /// 0=触发 1=不触发
        /// </summary>
        public int IsFatal;
        /// <summary>
        /// 是否触发被动（0=触发1=不触发）
        /// </summary>
        public int IsPassive;
        /// <summary>
        /// 是否触发特效（0=触发1=不触发）特效包括斩杀、混沌、封印、诱惑、净化、压制、溅射、野性
        /// </summary>
        public int IsLeadEffect;
        /// <summary>
        /// 是否触发减速（0=触发1=不触发）
        /// </summary>
        public int IsLeadReduceSpeed;
        /// <summary>
        /// 是否触发神盾（0=触发1=不触发）
        /// </summary>
        public int IsLeadEnergy;
        /// <summary>
        /// 升级奖励天赋点
        /// </summary>
        public int PraisePoint;
        /// <summary>
        /// 是否需要英雄满级激活
        /// </summary>
        public int IsNeedHero;
        /// <summary>
        /// 公告
        /// </summary>
        public int NoticeID;
        /// <summary>
        /// 是否无视当前动作立即释放
        /// </summary>
        public int RespondImmediately;
        /// <summary>
        /// 施法者死亡后是否生效（0不生效，1生效）
        /// </summary>
        public int DeathEffective;
        /// <summary>
        /// 技能展示
        /// </summary>
        public int skillShow;
        /// <summary>
        /// 是否有公共CD(0=有，1=没有)
        /// </summary>
        public int PublicCD;
        /// <summary>
        /// 是否是活动技能(0=不是，1=是)
        /// </summary>
        public int IsActivitySkill;
        /// <summary>
        /// 心魔展示技能ID
        /// </summary>
        public int DemoSkill;
        /// <summary>
        /// 技能icon特殊角标贴图id（0为不使用，id对应为morn\assets\newComp\common\itemBg路径下贴图编号）
        /// </summary>
        public int MarkImageID;
        /// <summary>
        /// 技能可使用的天赋ID（目前仅作用于技能激活天赋后其tips显示天赋相关内容）
        /// </summary>
        public string GeniusID;
        /// <summary>
        /// 造成二段伤害时播放的命中特效
        /// </summary>
        public int ExtraEffect;
        /// <summary>
        /// 二段伤害特效及飘字延迟时间（毫秒）
        /// </summary>
        public int ExtraDelay;
        /// <summary>
        /// 是否在技能书中展示
        /// </summary>
        public int SkillBook;
        /// <summary>
        /// 是否群攻
        /// </summary>
        public int IsCover;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            SkillName = bytes.ReadUTF();
            Ultimate = bytes.ReadInt();
            UltimateNeedItem = bytes.ReadUTF();
            UltimateNeedTalentLV = bytes.ReadInt();
            Crit = bytes.ReadInt();
            Paralysis = bytes.ReadInt();
            SkillCrit = bytes.ReadInt();
            CritToSkill = bytes.ReadInt();
            IgnoreMiss = bytes.ReadInt();
            IgnoreDefend = bytes.ReadInt();
            IgnoreEgg = bytes.ReadInt();
            BaseAtkPercent = bytes.ReadUTF();
            SkillPercent = bytes.ReadUTF();
            SkillConstant = bytes.ReadInt();
            SkillMaxhpPct = bytes.ReadInt();
            SkillCurhpPct = bytes.ReadInt();
            SelfMaxhpPctDamage = bytes.ReadInt();
            SelfCurhpPctDamage = bytes.ReadInt();
            HealthDamagePct = bytes.ReadUTF();
            HolyDamage = bytes.ReadInt();
            SkillJob = bytes.ReadInt();
            CastDist = bytes.ReadInt();
            ActionTime = bytes.ReadInt();
            ClientActionTime = bytes.ReadInt();
            ClientActionTime2 = bytes.ReadInt();
            WaitTime = bytes.ReadInt();
            PiaoXueTime = bytes.ReadInt();
            CastingAction = bytes.ReadInt();
            SkillType = bytes.ReadInt();
            LockingTwo = bytes.ReadInt();
            SkillTarget = bytes.ReadInt();
            MouseTarget = bytes.ReadInt();
            NoMouseObjectLockSelf = bytes.ReadInt();
            CorpseTarget = bytes.ReadInt();
            IsEffectiveGoals = bytes.ReadInt();
            SubType = bytes.ReadInt();
            ReleaseMode = bytes.ReadInt();
            SkillGroup = bytes.ReadInt();
            DerivedSkillGroup = bytes.ReadUTF();
            DerivedSkillLevel = bytes.ReadUTF();
            SkillClass = bytes.ReadInt();
            SkillLevel = bytes.ReadInt();
            NeedExp = bytes.ReadInt();
            NeedTxt = bytes.ReadUTF();
            NeedTxtChange = bytes.ReadInt();
            ClassNeedtxt = bytes.ReadUTF();
            OnceNeedGoods = bytes.ReadUTF();
            OnceExp = bytes.ReadInt();
            NeedOpenDay = bytes.ReadInt();
            NeedReLv = bytes.ReadInt();
            RiseNeedLv = bytes.ReadInt();
            RiseNeedGoods = bytes.ReadUTF();
            GainDebuff = bytes.ReadInt();
            Remarks = bytes.ReadUTF();
            Param1 = bytes.ReadInt();
            Param2 = bytes.ReadInt();
            Param3 = bytes.ReadInt();
            Param4 = bytes.ReadInt();
            Param5 = bytes.ReadInt();
            Param6 = bytes.ReadInt();
            Param7 = bytes.ReadInt();
            Param8 = bytes.ReadInt();
            Param9 = bytes.ReadUTF();
            AdditionalSkillPct = bytes.ReadInt();
            AdditionalSkill = bytes.ReadInt();
            HurtType = bytes.ReadInt();
            EightDirection = bytes.ReadInt();
            EffUpScene = bytes.ReadInt();
            UpRoleDirection = bytes.ReadInt();
            EffUpRole = bytes.ReadInt();
            EffBelowRole = bytes.ReadInt();
            EffDownRole = bytes.ReadInt();
            EffFlight = bytes.ReadInt();
            FlySpeed = bytes.ReadInt();
            EffExplode = bytes.ReadUTF();
            EffExplode1 = bytes.ReadInt();
            BodyPos = bytes.ReadInt();
            Position = bytes.ReadInt();
            OpenAllRound = bytes.ReadInt();
            EffectId = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            UseAddExp = bytes.ReadInt();
            NeedMP = bytes.ReadInt();
            CDTime = bytes.ReadInt();
            SpeedEffectCD = bytes.ReadInt();
            NextTID = bytes.ReadInt();
            SkillSummary = bytes.ReadUTF();
            HurtSummary = bytes.ReadUTF();
            SkillIcon = bytes.ReadInt();
            BuffID = bytes.ReadUTF();
            CanVampire = bytes.ReadInt();
            VampireReducePct = bytes.ReadInt();
            RoleSound = bytes.ReadUTF();
            FlightSound = bytes.ReadUTF();
            ExplodeSound = bytes.ReadUTF();
            IsHaveHotKey = bytes.ReadInt();
            NextIcon = bytes.ReadInt();
            RiseBase = bytes.ReadInt();
            RiseLevel = bytes.ReadInt();
            LevelShow = bytes.ReadInt();
            IsFatal = bytes.ReadInt();
            IsPassive = bytes.ReadInt();
            IsLeadEffect = bytes.ReadInt();
            IsLeadReduceSpeed = bytes.ReadInt();
            IsLeadEnergy = bytes.ReadInt();
            PraisePoint = bytes.ReadInt();
            IsNeedHero = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
            RespondImmediately = bytes.ReadInt();
            DeathEffective = bytes.ReadInt();
            skillShow = bytes.ReadInt();
            PublicCD = bytes.ReadInt();
            IsActivitySkill = bytes.ReadInt();
            DemoSkill = bytes.ReadInt();
            MarkImageID = bytes.ReadInt();
            GeniusID = bytes.ReadUTF();
            ExtraEffect = bytes.ReadInt();
            ExtraDelay = bytes.ReadInt();
            SkillBook = bytes.ReadInt();
            IsCover = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(SkillName);
            bytes.WriteInt(Ultimate);
            bytes.WriteUTF(UltimateNeedItem);
            bytes.WriteInt(UltimateNeedTalentLV);
            bytes.WriteInt(Crit);
            bytes.WriteInt(Paralysis);
            bytes.WriteInt(SkillCrit);
            bytes.WriteInt(CritToSkill);
            bytes.WriteInt(IgnoreMiss);
            bytes.WriteInt(IgnoreDefend);
            bytes.WriteInt(IgnoreEgg);
            bytes.WriteUTF(BaseAtkPercent);
            bytes.WriteUTF(SkillPercent);
            bytes.WriteInt(SkillConstant);
            bytes.WriteInt(SkillMaxhpPct);
            bytes.WriteInt(SkillCurhpPct);
            bytes.WriteInt(SelfMaxhpPctDamage);
            bytes.WriteInt(SelfCurhpPctDamage);
            bytes.WriteUTF(HealthDamagePct);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(SkillJob);
            bytes.WriteInt(CastDist);
            bytes.WriteInt(ActionTime);
            bytes.WriteInt(ClientActionTime);
            bytes.WriteInt(ClientActionTime2);
            bytes.WriteInt(WaitTime);
            bytes.WriteInt(PiaoXueTime);
            bytes.WriteInt(CastingAction);
            bytes.WriteInt(SkillType);
            bytes.WriteInt(LockingTwo);
            bytes.WriteInt(SkillTarget);
            bytes.WriteInt(MouseTarget);
            bytes.WriteInt(NoMouseObjectLockSelf);
            bytes.WriteInt(CorpseTarget);
            bytes.WriteInt(IsEffectiveGoals);
            bytes.WriteInt(SubType);
            bytes.WriteInt(ReleaseMode);
            bytes.WriteInt(SkillGroup);
            bytes.WriteUTF(DerivedSkillGroup);
            bytes.WriteUTF(DerivedSkillLevel);
            bytes.WriteInt(SkillClass);
            bytes.WriteInt(SkillLevel);
            bytes.WriteInt(NeedExp);
            bytes.WriteUTF(NeedTxt);
            bytes.WriteInt(NeedTxtChange);
            bytes.WriteUTF(ClassNeedtxt);
            bytes.WriteUTF(OnceNeedGoods);
            bytes.WriteInt(OnceExp);
            bytes.WriteInt(NeedOpenDay);
            bytes.WriteInt(NeedReLv);
            bytes.WriteInt(RiseNeedLv);
            bytes.WriteUTF(RiseNeedGoods);
            bytes.WriteInt(GainDebuff);
            bytes.WriteUTF(Remarks);
            bytes.WriteInt(Param1);
            bytes.WriteInt(Param2);
            bytes.WriteInt(Param3);
            bytes.WriteInt(Param4);
            bytes.WriteInt(Param5);
            bytes.WriteInt(Param6);
            bytes.WriteInt(Param7);
            bytes.WriteInt(Param8);
            bytes.WriteUTF(Param9);
            bytes.WriteInt(AdditionalSkillPct);
            bytes.WriteInt(AdditionalSkill);
            bytes.WriteInt(HurtType);
            bytes.WriteInt(EightDirection);
            bytes.WriteInt(EffUpScene);
            bytes.WriteInt(UpRoleDirection);
            bytes.WriteInt(EffUpRole);
            bytes.WriteInt(EffBelowRole);
            bytes.WriteInt(EffDownRole);
            bytes.WriteInt(EffFlight);
            bytes.WriteInt(FlySpeed);
            bytes.WriteUTF(EffExplode);
            bytes.WriteInt(EffExplode1);
            bytes.WriteInt(BodyPos);
            bytes.WriteInt(Position);
            bytes.WriteInt(OpenAllRound);
            bytes.WriteInt(EffectId);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(UseAddExp);
            bytes.WriteInt(NeedMP);
            bytes.WriteInt(CDTime);
            bytes.WriteInt(SpeedEffectCD);
            bytes.WriteInt(NextTID);
            bytes.WriteUTF(SkillSummary);
            bytes.WriteUTF(HurtSummary);
            bytes.WriteInt(SkillIcon);
            bytes.WriteUTF(BuffID);
            bytes.WriteInt(CanVampire);
            bytes.WriteInt(VampireReducePct);
            bytes.WriteUTF(RoleSound);
            bytes.WriteUTF(FlightSound);
            bytes.WriteUTF(ExplodeSound);
            bytes.WriteInt(IsHaveHotKey);
            bytes.WriteInt(NextIcon);
            bytes.WriteInt(RiseBase);
            bytes.WriteInt(RiseLevel);
            bytes.WriteInt(LevelShow);
            bytes.WriteInt(IsFatal);
            bytes.WriteInt(IsPassive);
            bytes.WriteInt(IsLeadEffect);
            bytes.WriteInt(IsLeadReduceSpeed);
            bytes.WriteInt(IsLeadEnergy);
            bytes.WriteInt(PraisePoint);
            bytes.WriteInt(IsNeedHero);
            bytes.WriteInt(NoticeID);
            bytes.WriteInt(RespondImmediately);
            bytes.WriteInt(DeathEffective);
            bytes.WriteInt(skillShow);
            bytes.WriteInt(PublicCD);
            bytes.WriteInt(IsActivitySkill);
            bytes.WriteInt(DemoSkill);
            bytes.WriteInt(MarkImageID);
            bytes.WriteUTF(GeniusID);
            bytes.WriteInt(ExtraEffect);
            bytes.WriteInt(ExtraDelay);
            bytes.WriteInt(SkillBook);
            bytes.WriteInt(IsCover);
        }
    }

    public class SkillTemplateMode : TplMode
    {
        private IList<SkillTemplate> mList = null;

        public SkillTemplateMode(int step) : base("SkillTemplate", typeof(SkillTemplate), step) { }

        public SkillTemplate this[int id]
        {
            get { return Find<SkillTemplate>(id); }
        }

        public SkillTemplate Find(int id)
        {
            return Find<SkillTemplate>(id);
        }

        public IList<SkillTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SkillTemplate>();
            return mList;
        }
    }

public class AttackCityDoanteTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 排名
        /// </summary>
        public int Rank;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 最大生命值
        /// </summary>
        public int HpCent;
        /// <summary>
        /// 对怪伤害增加
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 最小物理防御万分比
        /// </summary>
        public int MinPhysicDefPencent;
        /// <summary>
        /// 最大物理防御万分比
        /// </summary>
        public int MaxPhysicDefPencent;
        /// <summary>
        /// 最小魔法防御万分比
        /// </summary>
        public int MinMagicDefPencent;
        /// <summary>
        /// 最大魔法防御万分比
        /// </summary>
        public int MaxMagicDefPencent;
        /// <summary>
        /// 伤害加成
        /// </summary>
        public int AddAllHurt;
        /// <summary>
        /// PK增伤万分比
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// 战场功绩泡点效率加成万分比
        /// </summary>
        public int BubbleUpPct;
        /// <summary>
        /// 描述
        /// </summary>
        public string Describe;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Rank = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            HpCent = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            MinPhysicDefPencent = bytes.ReadInt();
            MaxPhysicDefPencent = bytes.ReadInt();
            MinMagicDefPencent = bytes.ReadInt();
            MaxMagicDefPencent = bytes.ReadInt();
            AddAllHurt = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            BubbleUpPct = bytes.ReadInt();
            Describe = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Rank);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(HpCent);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(MinPhysicDefPencent);
            bytes.WriteInt(MaxPhysicDefPencent);
            bytes.WriteInt(MinMagicDefPencent);
            bytes.WriteInt(MaxMagicDefPencent);
            bytes.WriteInt(AddAllHurt);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(BubbleUpPct);
            bytes.WriteUTF(Describe);
        }
    }

    public class AttackCityDoanteTemplateMode : TplMode
    {
        private IList<AttackCityDoanteTemplate> mList = null;

        public AttackCityDoanteTemplateMode(int step) : base("AttackCityDoanteTemplate", typeof(AttackCityDoanteTemplate), step) { }

        public AttackCityDoanteTemplate this[int id]
        {
            get { return Find<AttackCityDoanteTemplate>(id); }
        }

        public AttackCityDoanteTemplate Find(int id)
        {
            return Find<AttackCityDoanteTemplate>(id);
        }

        public IList<AttackCityDoanteTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AttackCityDoanteTemplate>();
            return mList;
        }
    }

public class RobotTaskTemplate : Tpl
    {
        /// <summary>
        /// 任务类型
        /// </summary>
        public int TaskType;
        /// <summary>
        /// 人数比例（万分比）
        /// </summary>
        public int Proportion;
        /// <summary>
        /// 使用时间（秒）
        /// </summary>
        public int UseTime;
        /// <summary>
        /// 最少公告数
        /// </summary>
        public int LeastBroadcast;
        /// <summary>
        /// 开服第几天开始
        /// </summary>
        public int BeginDay;
        /// <summary>
        /// 开服第几天停止
        /// </summary>
        public int EndDay;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 参数3
        /// </summary>
        public int Data3;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TaskType = bytes.ReadInt();
            Proportion = bytes.ReadInt();
            UseTime = bytes.ReadInt();
            LeastBroadcast = bytes.ReadInt();
            BeginDay = bytes.ReadInt();
            EndDay = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Data3 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(TaskType);
            bytes.WriteInt(Proportion);
            bytes.WriteInt(UseTime);
            bytes.WriteInt(LeastBroadcast);
            bytes.WriteInt(BeginDay);
            bytes.WriteInt(EndDay);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Data3);
        }
    }

    public class RobotTaskTemplateMode : TplMode
    {
        private IList<RobotTaskTemplate> mList = null;

        public RobotTaskTemplateMode(int step) : base("RobotTaskTemplate", typeof(RobotTaskTemplate), step) { }

        public RobotTaskTemplate this[int id]
        {
            get { return Find<RobotTaskTemplate>(id); }
        }

        public RobotTaskTemplate Find(int id)
        {
            return Find<RobotTaskTemplate>(id);
        }

        public IList<RobotTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RobotTaskTemplate>();
            return mList;
        }
    }

public class RobotAttrObtainTemplate : Tpl
    {
        /// <summary>
        /// 抓取等级（下限）
        /// </summary>
        public int MinLv;
        /// <summary>
        /// 抓取等级（上限）
        /// </summary>
        public int MaxLv;
        /// <summary>
        /// 抓取境界等级（下限）
        /// </summary>
        public int MinStateLv;
        /// <summary>
        /// 抓取境界等级（上限）
        /// </summary>
        public int MaxstateLv;
        /// <summary>
        /// 战士数据保存量
        /// </summary>
        public int WarriorCount;
        /// <summary>
        /// 法师数据保存量
        /// </summary>
        public int MasterCount;
        /// <summary>
        /// 道士数据保存量
        /// </summary>
        public int TaoistCount;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MinLv = bytes.ReadInt();
            MaxLv = bytes.ReadInt();
            MinStateLv = bytes.ReadInt();
            MaxstateLv = bytes.ReadInt();
            WarriorCount = bytes.ReadInt();
            MasterCount = bytes.ReadInt();
            TaoistCount = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MinLv);
            bytes.WriteInt(MaxLv);
            bytes.WriteInt(MinStateLv);
            bytes.WriteInt(MaxstateLv);
            bytes.WriteInt(WarriorCount);
            bytes.WriteInt(MasterCount);
            bytes.WriteInt(TaoistCount);
        }
    }

    public class RobotAttrObtainTemplateMode : TplMode
    {
        private IList<RobotAttrObtainTemplate> mList = null;

        public RobotAttrObtainTemplateMode(int step) : base("RobotAttrObtainTemplate", typeof(RobotAttrObtainTemplate), step) { }

        public RobotAttrObtainTemplate this[int id]
        {
            get { return Find<RobotAttrObtainTemplate>(id); }
        }

        public RobotAttrObtainTemplate Find(int id)
        {
            return Find<RobotAttrObtainTemplate>(id);
        }

        public IList<RobotAttrObtainTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RobotAttrObtainTemplate>();
            return mList;
        }
    }

public class RobotTemplate : Tpl
    {
        /// <summary>
        /// 机器人真名
        /// </summary>
        public string RealName;
        /// <summary>
        /// 机器人名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 地图ID
        /// </summary>
        public int MapID;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 性别
        /// </summary>
        public int Sex;
        /// <summary>
        /// 机器人携带英雄id
        /// </summary>
        public int AddHeroID;
        /// <summary>
        /// AIID
        /// </summary>
        public int AiTmpID;
        /// <summary>
        /// 机器人出生坐标X
        /// </summary>
        public int BeginX;
        /// <summary>
        /// 机器人出生坐标Y
        /// </summary>
        public int BeginY;
        /// <summary>
        /// 机器人结束坐标X
        /// </summary>
        public int EndX;
        /// <summary>
        /// 机器人结束坐标Y
        /// </summary>
        public int EndY;
        /// <summary>
        /// 机器人复活时间
        /// （s）
        /// </summary>
        public int RebornTime;
        /// <summary>
        /// 显示境界等级
        /// </summary>
        public int JJLV;
        /// <summary>
        /// 巡逻路线
        /// </summary>
        public string Road;
        /// <summary>
        /// 机器人等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 生命值回复（s）
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 魔法值
        /// </summary>
        public int MP;
        /// <summary>
        /// 内功等级
        /// </summary>
        public int SPLv;
        /// <summary>
        /// 攻击速度
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 奇装1等级
        /// （图标展示）
        /// </summary>
        public int Stove1Lv;
        /// <summary>
        /// 奇装2等级
        /// （图标展示）
        /// </summary>
        public int Stove2Lv;
        /// <summary>
        /// 奇装3等级
        /// （图标展示）
        /// </summary>
        public int Stove3Lv;
        /// <summary>
        /// 奇装4等级
        /// （图标展示）
        /// </summary>
        public int Stove4Lv;
        /// <summary>
        /// 奇装5等级
        /// （图标展示）
        /// </summary>
        public int Stove5Lv;
        /// <summary>
        /// 机器人官职
        /// 称号显示
        /// </summary>
        public int OfficialLv;
        /// <summary>
        /// 机器人武器外显
        /// </summary>
        public int WeaponID;
        /// <summary>
        /// 机器人衣服外显
        /// </summary>
        public int ClothesID;
        /// <summary>
        /// 机器人装备展示
        /// </summary>
        public string ShowEquip;
        /// <summary>
        /// 机器人使用技能
        /// </summary>
        public string Skill;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RealName = bytes.ReadUTF();
            Name = bytes.ReadUTF();
            MapID = bytes.ReadInt();
            Type = bytes.ReadInt();
            Job = bytes.ReadInt();
            Sex = bytes.ReadInt();
            AddHeroID = bytes.ReadInt();
            AiTmpID = bytes.ReadInt();
            BeginX = bytes.ReadInt();
            BeginY = bytes.ReadInt();
            EndX = bytes.ReadInt();
            EndY = bytes.ReadInt();
            RebornTime = bytes.ReadInt();
            JJLV = bytes.ReadInt();
            Road = bytes.ReadUTF();
            Level = bytes.ReadInt();
            HP = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
            MP = bytes.ReadInt();
            SPLv = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Stove1Lv = bytes.ReadInt();
            Stove2Lv = bytes.ReadInt();
            Stove3Lv = bytes.ReadInt();
            Stove4Lv = bytes.ReadInt();
            Stove5Lv = bytes.ReadInt();
            OfficialLv = bytes.ReadInt();
            WeaponID = bytes.ReadInt();
            ClothesID = bytes.ReadInt();
            ShowEquip = bytes.ReadUTF();
            Skill = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(RealName);
            bytes.WriteUTF(Name);
            bytes.WriteInt(MapID);
            bytes.WriteInt(Type);
            bytes.WriteInt(Job);
            bytes.WriteInt(Sex);
            bytes.WriteInt(AddHeroID);
            bytes.WriteInt(AiTmpID);
            bytes.WriteInt(BeginX);
            bytes.WriteInt(BeginY);
            bytes.WriteInt(EndX);
            bytes.WriteInt(EndY);
            bytes.WriteInt(RebornTime);
            bytes.WriteInt(JJLV);
            bytes.WriteUTF(Road);
            bytes.WriteInt(Level);
            bytes.WriteInt(HP);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(MP);
            bytes.WriteInt(SPLv);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Stove1Lv);
            bytes.WriteInt(Stove2Lv);
            bytes.WriteInt(Stove3Lv);
            bytes.WriteInt(Stove4Lv);
            bytes.WriteInt(Stove5Lv);
            bytes.WriteInt(OfficialLv);
            bytes.WriteInt(WeaponID);
            bytes.WriteInt(ClothesID);
            bytes.WriteUTF(ShowEquip);
            bytes.WriteUTF(Skill);
        }
    }

    public class RobotTemplateMode : TplMode
    {
        private IList<RobotTemplate> mList = null;

        public RobotTemplateMode(int step) : base("RobotTemplate", typeof(RobotTemplate), step) { }

        public RobotTemplate this[int id]
        {
            get { return Find<RobotTemplate>(id); }
        }

        public RobotTemplate Find(int id)
        {
            return Find<RobotTemplate>(id);
        }

        public IList<RobotTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RobotTemplate>();
            return mList;
        }
    }

public class BaptizeRandomAttributesTemplate : Tpl
    {
        /// <summary>
        /// 装备等级（策划用）
        /// </summary>
        public string cehuayong;
        /// <summary>
        /// 属性组ID
        /// </summary>
        public int BaseType;
        /// <summary>
        /// 词条名称（策划用）
        /// </summary>
        public string Name;
        /// <summary>
        /// 属性枚举表id
        /// </summary>
        public int AttributesListID;
        /// <summary>
        /// 鉴定/洗练属性最小值
        /// </summary>
        public int InitialRandomMin;
        /// <summary>
        /// 鉴定/洗练属性最大值
        /// </summary>
        public int InitialRandomMax;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weights;
        /// <summary>
        /// 是否橙色属性
        /// </summary>
        public int Special;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            cehuayong = bytes.ReadUTF();
            BaseType = bytes.ReadInt();
            Name = bytes.ReadUTF();
            AttributesListID = bytes.ReadInt();
            InitialRandomMin = bytes.ReadInt();
            InitialRandomMax = bytes.ReadInt();
            Weights = bytes.ReadInt();
            Special = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(cehuayong);
            bytes.WriteInt(BaseType);
            bytes.WriteUTF(Name);
            bytes.WriteInt(AttributesListID);
            bytes.WriteInt(InitialRandomMin);
            bytes.WriteInt(InitialRandomMax);
            bytes.WriteInt(Weights);
            bytes.WriteInt(Special);
        }
    }

    public class BaptizeRandomAttributesTemplateMode : TplMode
    {
        private IList<BaptizeRandomAttributesTemplate> mList = null;

        public BaptizeRandomAttributesTemplateMode(int step) : base("BaptizeRandomAttributesTemplate", typeof(BaptizeRandomAttributesTemplate), step) { }

        public BaptizeRandomAttributesTemplate this[int id]
        {
            get { return Find<BaptizeRandomAttributesTemplate>(id); }
        }

        public BaptizeRandomAttributesTemplate Find(int id)
        {
            return Find<BaptizeRandomAttributesTemplate>(id);
        }

        public IList<BaptizeRandomAttributesTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<BaptizeRandomAttributesTemplate>();
            return mList;
        }
    }

public class IdentifyTemplate : Tpl
    {
        /// <summary>
        /// 开孔数量
        /// </summary>
        public int IdentifyTime;
        /// <summary>
        /// 鉴定消耗货币类型
        /// </summary>
        public int Money1;
        /// <summary>
        /// 鉴定消耗货币数量
        /// </summary>
        public int Cost1;
        /// <summary>
        /// 开孔消耗类型
        /// </summary>
        public int Money2;
        /// <summary>
        /// 开孔消耗
        /// </summary>
        public int Cost2;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            IdentifyTime = bytes.ReadInt();
            Money1 = bytes.ReadInt();
            Cost1 = bytes.ReadInt();
            Money2 = bytes.ReadInt();
            Cost2 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(IdentifyTime);
            bytes.WriteInt(Money1);
            bytes.WriteInt(Cost1);
            bytes.WriteInt(Money2);
            bytes.WriteInt(Cost2);
        }
    }

    public class IdentifyTemplateMode : TplMode
    {
        private IList<IdentifyTemplate> mList = null;

        public IdentifyTemplateMode(int step) : base("IdentifyTemplate", typeof(IdentifyTemplate), step) { }

        public IdentifyTemplate this[int id]
        {
            get { return Find<IdentifyTemplate>(id); }
        }

        public IdentifyTemplate Find(int id)
        {
            return Find<IdentifyTemplate>(id);
        }

        public IList<IdentifyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<IdentifyTemplate>();
            return mList;
        }
    }

public class AwakenTemplate : Tpl
    {
        /// <summary>
        /// 觉醒
        /// 当前极品属性
        /// 加成(万分比)
        /// </summary>
        public string AwakenPro;
        /// <summary>
        /// 觉醒消耗（金刚石）
        /// </summary>
        public int AwakenCost;
        /// <summary>
        /// 终极觉醒
        /// 当前极品属性
        /// 加成(万分比)
        /// </summary>
        public int TopAwakenPro;
        /// <summary>
        /// 终极觉醒前端描述
        /// (当前属性，支持文本编辑)
        /// </summary>
        public string TopAwakenProDes;
        /// <summary>
        /// 终极觉醒：额外属性
        /// </summary>
        public string TopAwakenEnum;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            AwakenPro = bytes.ReadUTF();
            AwakenCost = bytes.ReadInt();
            TopAwakenPro = bytes.ReadInt();
            TopAwakenProDes = bytes.ReadUTF();
            TopAwakenEnum = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(AwakenPro);
            bytes.WriteInt(AwakenCost);
            bytes.WriteInt(TopAwakenPro);
            bytes.WriteUTF(TopAwakenProDes);
            bytes.WriteUTF(TopAwakenEnum);
        }
    }

    public class AwakenTemplateMode : TplMode
    {
        private IList<AwakenTemplate> mList = null;

        public AwakenTemplateMode(int step) : base("AwakenTemplate", typeof(AwakenTemplate), step) { }

        public AwakenTemplate this[int id]
        {
            get { return Find<AwakenTemplate>(id); }
        }

        public AwakenTemplate Find(int id)
        {
            return Find<AwakenTemplate>(id);
        }

        public IList<AwakenTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AwakenTemplate>();
            return mList;
        }
    }

public class UIPageCount : Tpl
    {
        /// <summary>
        /// ui代号
        /// </summary>
        public string UiCode;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            UiCode = bytes.ReadUTF();
            Name = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(UiCode);
            bytes.WriteUTF(Name);
        }
    }

    public class UIPageCountMode : TplMode
    {
        private IList<UIPageCount> mList = null;

        public UIPageCountMode(int step) : base("UIPageCount", typeof(UIPageCount), step) { }

        public UIPageCount this[int id]
        {
            get { return Find<UIPageCount>(id); }
        }

        public UIPageCount Find(int id)
        {
            return Find<UIPageCount>(id);
        }

        public IList<UIPageCount> FindAll()
        {
            if (mList == null) mList = FindAll<UIPageCount>();
            return mList;
        }
    }

public class WindowTemplate : Tpl
    {
        /// <summary>
        /// UI对应Key
        /// </summary>
        public string UIString;
        /// <summary>
        /// 界面名称
        /// </summary>
        public string Name;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            UIString = bytes.ReadUTF();
            Name = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(UIString);
            bytes.WriteUTF(Name);
        }
    }

    public class WindowTemplateMode : TplMode
    {
        private IList<WindowTemplate> mList = null;

        public WindowTemplateMode(int step) : base("WindowTemplate", typeof(WindowTemplate), step) { }

        public WindowTemplate this[int id]
        {
            get { return Find<WindowTemplate>(id); }
        }

        public WindowTemplate Find(int id)
        {
            return Find<WindowTemplate>(id);
        }

        public IList<WindowTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WindowTemplate>();
            return mList;
        }
    }

public class ArenaRankTemplate : Tpl
    {
        /// <summary>
        /// 段位名称
        /// </summary>
        public string RankName;
        /// <summary>
        /// 段位资源名
        /// </summary>
        public string ArtName;
        /// <summary>
        /// 段位起始积分
        /// </summary>
        public int RankStartRating;
        /// <summary>
        /// 段位结束积分
        /// </summary>
        public int RankEndRating;
        /// <summary>
        /// 普通段位奖励
        /// </summary>
        public string RankReward;
        /// <summary>
        /// 尊享段位奖励
        /// </summary>
        public string ExRankReward;
        /// <summary>
        /// 段位保护分值
        /// </summary>
        public int Rankprotect;
        /// <summary>
        /// 胜场基础加分值
        /// </summary>
        public int WinRating;
        /// <summary>
        /// 连胜加成万分比
        /// </summary>
        public int WinReward;
        /// <summary>
        /// 击杀耗时加成（胜场）
        /// </summary>
        public string TTKReward;
        /// <summary>
        /// 负场基础扣分值
        /// </summary>
        public int DefeatRating;
        /// <summary>
        /// 连败加成万分比
        /// </summary>
        public int DefeatReward;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RankName = bytes.ReadUTF();
            ArtName = bytes.ReadUTF();
            RankStartRating = bytes.ReadInt();
            RankEndRating = bytes.ReadInt();
            RankReward = bytes.ReadUTF();
            ExRankReward = bytes.ReadUTF();
            Rankprotect = bytes.ReadInt();
            WinRating = bytes.ReadInt();
            WinReward = bytes.ReadInt();
            TTKReward = bytes.ReadUTF();
            DefeatRating = bytes.ReadInt();
            DefeatReward = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(RankName);
            bytes.WriteUTF(ArtName);
            bytes.WriteInt(RankStartRating);
            bytes.WriteInt(RankEndRating);
            bytes.WriteUTF(RankReward);
            bytes.WriteUTF(ExRankReward);
            bytes.WriteInt(Rankprotect);
            bytes.WriteInt(WinRating);
            bytes.WriteInt(WinReward);
            bytes.WriteUTF(TTKReward);
            bytes.WriteInt(DefeatRating);
            bytes.WriteInt(DefeatReward);
        }
    }

    public class ArenaRankTemplateMode : TplMode
    {
        private IList<ArenaRankTemplate> mList = null;

        public ArenaRankTemplateMode(int step) : base("ArenaRankTemplate", typeof(ArenaRankTemplate), step) { }

        public ArenaRankTemplate this[int id]
        {
            get { return Find<ArenaRankTemplate>(id); }
        }

        public ArenaRankTemplate Find(int id)
        {
            return Find<ArenaRankTemplate>(id);
        }

        public IList<ArenaRankTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ArenaRankTemplate>();
            return mList;
        }
    }

public class ArenaBotTemplate : Tpl
    {
        /// <summary>
        /// 机器人Tid
        /// </summary>
        public string RobotTid;
        /// <summary>
        /// 机器人可用AI
        /// </summary>
        public string RobotAITid;
        /// <summary>
        /// 机器人适用段位分下限
        /// </summary>
        public int RobotRankMin;
        /// <summary>
        /// 机器人适用段位分上限
        /// </summary>
        public int RobotRankMax;
        /// <summary>
        /// 机器人自身段位分（用于计算分差加成）
        /// </summary>
        public int RobotRank;
        /// <summary>
        /// 机器人基础属性加成（玩家段位分差）
        /// </summary>
        public int RobotAttrAddition;
        /// <summary>
        /// 机器人基础属性加成（连胜影响）
        /// </summary>
        public int WinAttrAddition;
        /// <summary>
        /// 机器人基础属性加成（连败影响）
        /// </summary>
        public int DefeatAttrAddition;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RobotTid = bytes.ReadUTF();
            RobotAITid = bytes.ReadUTF();
            RobotRankMin = bytes.ReadInt();
            RobotRankMax = bytes.ReadInt();
            RobotRank = bytes.ReadInt();
            RobotAttrAddition = bytes.ReadInt();
            WinAttrAddition = bytes.ReadInt();
            DefeatAttrAddition = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(RobotTid);
            bytes.WriteUTF(RobotAITid);
            bytes.WriteInt(RobotRankMin);
            bytes.WriteInt(RobotRankMax);
            bytes.WriteInt(RobotRank);
            bytes.WriteInt(RobotAttrAddition);
            bytes.WriteInt(WinAttrAddition);
            bytes.WriteInt(DefeatAttrAddition);
        }
    }

    public class ArenaBotTemplateMode : TplMode
    {
        private IList<ArenaBotTemplate> mList = null;

        public ArenaBotTemplateMode(int step) : base("ArenaBotTemplate", typeof(ArenaBotTemplate), step) { }

        public ArenaBotTemplate this[int id]
        {
            get { return Find<ArenaBotTemplate>(id); }
        }

        public ArenaBotTemplate Find(int id)
        {
            return Find<ArenaBotTemplate>(id);
        }

        public IList<ArenaBotTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ArenaBotTemplate>();
            return mList;
        }
    }

public class ArenaInfoTemplate : Tpl
    {
        /// <summary>
        /// 玩家初始分数
        /// </summary>
        public int PlayerStartMMR;
        /// <summary>
        /// 尊享奖励购买消耗
        /// </summary>
        public string ExtraBonusCost;
        /// <summary>
        /// 匹配时间范围
        /// </summary>
        public string EnterTime;
        /// <summary>
        /// 匹配完成倒计时
        /// </summary>
        public int ReadyTime;
        /// <summary>
        /// 准备阶段时长
        /// </summary>
        public int PreparationTime;
        /// <summary>
        /// 战斗阶段时长
        /// </summary>
        public int FightTime;
        /// <summary>
        /// 活动周期
        /// </summary>
        public string SeasonCycle;
        /// <summary>
        /// 赛季时间过少时 不开放新赛季
        /// </summary>
        public int SeasonClose;
        /// <summary>
        /// 排名奖励
        /// </summary>
        public string CycleReward;
        /// <summary>
        /// 竞技场副本id
        /// </summary>
        public int DungeonID;
        /// <summary>
        /// 竞技场传送点
        /// </summary>
        public string FightTranSpot;
        /// <summary>
        /// 竞技场传送点1
        /// </summary>
        public string FightTranSpot1;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PlayerStartMMR = bytes.ReadInt();
            ExtraBonusCost = bytes.ReadUTF();
            EnterTime = bytes.ReadUTF();
            ReadyTime = bytes.ReadInt();
            PreparationTime = bytes.ReadInt();
            FightTime = bytes.ReadInt();
            SeasonCycle = bytes.ReadUTF();
            SeasonClose = bytes.ReadInt();
            CycleReward = bytes.ReadUTF();
            DungeonID = bytes.ReadInt();
            FightTranSpot = bytes.ReadUTF();
            FightTranSpot1 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(PlayerStartMMR);
            bytes.WriteUTF(ExtraBonusCost);
            bytes.WriteUTF(EnterTime);
            bytes.WriteInt(ReadyTime);
            bytes.WriteInt(PreparationTime);
            bytes.WriteInt(FightTime);
            bytes.WriteUTF(SeasonCycle);
            bytes.WriteInt(SeasonClose);
            bytes.WriteUTF(CycleReward);
            bytes.WriteInt(DungeonID);
            bytes.WriteUTF(FightTranSpot);
            bytes.WriteUTF(FightTranSpot1);
        }
    }

    public class ArenaInfoTemplateMode : TplMode
    {
        private IList<ArenaInfoTemplate> mList = null;

        public ArenaInfoTemplateMode(int step) : base("ArenaInfoTemplate", typeof(ArenaInfoTemplate), step) { }

        public ArenaInfoTemplate this[int id]
        {
            get { return Find<ArenaInfoTemplate>(id); }
        }

        public ArenaInfoTemplate Find(int id)
        {
            return Find<ArenaInfoTemplate>(id);
        }

        public IList<ArenaInfoTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ArenaInfoTemplate>();
            return mList;
        }
    }

public class ExperienceRefineTemplate : Tpl
    {
        /// <summary>
        /// 目标名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 消耗钻石
        /// </summary>
        public int NeedDiamond;
        /// <summary>
        /// 经验奖励
        /// </summary>
        public int ExpAward;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            NeedDiamond = bytes.ReadInt();
            ExpAward = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(NeedDiamond);
            bytes.WriteInt(ExpAward);
            bytes.WriteInt(NoticeID);
        }
    }

    public class ExperienceRefineTemplateMode : TplMode
    {
        private IList<ExperienceRefineTemplate> mList = null;

        public ExperienceRefineTemplateMode(int step) : base("ExperienceRefineTemplate", typeof(ExperienceRefineTemplate), step) { }

        public ExperienceRefineTemplate this[int id]
        {
            get { return Find<ExperienceRefineTemplate>(id); }
        }

        public ExperienceRefineTemplate Find(int id)
        {
            return Find<ExperienceRefineTemplate>(id);
        }

        public IList<ExperienceRefineTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ExperienceRefineTemplate>();
            return mList;
        }
    }

public class ExpRedBagTemplate : Tpl
    {
        /// <summary>
        /// 活动名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 消耗元宝数量
        /// </summary>
        public int EIgnotsNum;
        /// <summary>
        /// 获得经验
        /// </summary>
        public int Exp;
        /// <summary>
        /// 获得魔器元力
        /// </summary>
        public int Yuanli;
        /// <summary>
        /// 单个红包元宝数量
        /// </summary>
        public int RedBagMoney;
        /// <summary>
        /// 领取红包的icon
        /// </summary>
        public int RedBagIcon;
        /// <summary>
        /// 可领取红包数量
        /// </summary>
        public int RedBagCount;
        /// <summary>
        /// 被领完的邮件ID
        /// </summary>
        public int MailID;
        /// <summary>
        /// 额外奖励
        /// </summary>
        public string AwardItem;
        /// <summary>
        /// 发送公告ID
        /// </summary>
        public int SendNoticeID;
        /// <summary>
        /// 领取公告ID
        /// </summary>
        public int TakeNoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            EIgnotsNum = bytes.ReadInt();
            Exp = bytes.ReadInt();
            Yuanli = bytes.ReadInt();
            RedBagMoney = bytes.ReadInt();
            RedBagIcon = bytes.ReadInt();
            RedBagCount = bytes.ReadInt();
            MailID = bytes.ReadInt();
            AwardItem = bytes.ReadUTF();
            SendNoticeID = bytes.ReadInt();
            TakeNoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(EIgnotsNum);
            bytes.WriteInt(Exp);
            bytes.WriteInt(Yuanli);
            bytes.WriteInt(RedBagMoney);
            bytes.WriteInt(RedBagIcon);
            bytes.WriteInt(RedBagCount);
            bytes.WriteInt(MailID);
            bytes.WriteUTF(AwardItem);
            bytes.WriteInt(SendNoticeID);
            bytes.WriteInt(TakeNoticeID);
        }
    }

    public class ExpRedBagTemplateMode : TplMode
    {
        private IList<ExpRedBagTemplate> mList = null;

        public ExpRedBagTemplateMode(int step) : base("ExpRedBagTemplate", typeof(ExpRedBagTemplate), step) { }

        public ExpRedBagTemplate this[int id]
        {
            get { return Find<ExpRedBagTemplate>(id); }
        }

        public ExpRedBagTemplate Find(int id)
        {
            return Find<ExpRedBagTemplate>(id);
        }

        public IList<ExpRedBagTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ExpRedBagTemplate>();
            return mList;
        }
    }

public class SwornTemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 结义名称
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 物品类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 金兰帖展示图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 描述
        /// </summary>
        public string Lore;
        /// <summary>
        /// 品质
        /// </summary>
        public int Quality;
        /// <summary>
        /// icon上特效
        /// </summary>
        public int IconEffect;
        /// <summary>
        /// 升级需要亲密度
        /// </summary>
        public int GoldType;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 战士魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 神盾
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            Career = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Icon = bytes.ReadInt();
            Lore = bytes.ReadUTF();
            Quality = bytes.ReadInt();
            IconEffect = bytes.ReadInt();
            GoldType = bytes.ReadInt();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteInt(Career);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(Type);
            bytes.WriteInt(Icon);
            bytes.WriteUTF(Lore);
            bytes.WriteInt(Quality);
            bytes.WriteInt(IconEffect);
            bytes.WriteInt(GoldType);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
        }
    }

    public class SwornTemplateMode : TplMode
    {
        private IList<SwornTemplate> mList = null;

        public SwornTemplateMode(int step) : base("SwornTemplate", typeof(SwornTemplate), step) { }

        public SwornTemplate this[int id]
        {
            get { return Find<SwornTemplate>(id); }
        }

        public SwornTemplate Find(int id)
        {
            return Find<SwornTemplate>(id);
        }

        public IList<SwornTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SwornTemplate>();
            return mList;
        }
    }

public class MarryTemplate : Tpl
    {
        /// <summary>
        /// 前端按钮名字
        /// </summary>
        public string Display;
        /// <summary>
        /// 货币类型（1.元宝，2.绑元，3.绑金，4.金币）
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 奖励
        /// </summary>
        public int Bonus;
        /// <summary>
        /// 新人奖励类型
        /// </summary>
        public int ExtraBonusType;
        /// <summary>
        /// 新人奖励
        /// </summary>
        public int ExtraBonus;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Display = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Bonus = bytes.ReadInt();
            ExtraBonusType = bytes.ReadInt();
            ExtraBonus = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Display);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(Bonus);
            bytes.WriteInt(ExtraBonusType);
            bytes.WriteInt(ExtraBonus);
        }
    }

    public class MarryTemplateMode : TplMode
    {
        private IList<MarryTemplate> mList = null;

        public MarryTemplateMode(int step) : base("MarryTemplate", typeof(MarryTemplate), step) { }

        public MarryTemplate this[int id]
        {
            get { return Find<MarryTemplate>(id); }
        }

        public MarryTemplate Find(int id)
        {
            return Find<MarryTemplate>(id);
        }

        public IList<MarryTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MarryTemplate>();
            return mList;
        }
    }

public class ExpJadeTemplate : Tpl
    {
        /// <summary>
        /// 倍数
        /// </summary>
        public int Mulite;
        /// <summary>
        /// 需要的货币类型
        /// </summary>
        public int NeedMoneyType;
        /// <summary>
        /// 需要的货币数量
        /// </summary>
        public int NeedMoney;
        /// <summary>
        /// VIP可以免费领取0-不可以，1可以
        /// </summary>
        public int VipCanFree;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Mulite = bytes.ReadInt();
            NeedMoneyType = bytes.ReadInt();
            NeedMoney = bytes.ReadInt();
            VipCanFree = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Mulite);
            bytes.WriteInt(NeedMoneyType);
            bytes.WriteInt(NeedMoney);
            bytes.WriteInt(VipCanFree);
        }
    }

    public class ExpJadeTemplateMode : TplMode
    {
        private IList<ExpJadeTemplate> mList = null;

        public ExpJadeTemplateMode(int step) : base("ExpJadeTemplate", typeof(ExpJadeTemplate), step) { }

        public ExpJadeTemplate this[int id]
        {
            get { return Find<ExpJadeTemplate>(id); }
        }

        public ExpJadeTemplate Find(int id)
        {
            return Find<ExpJadeTemplate>(id);
        }

        public IList<ExpJadeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ExpJadeTemplate>();
            return mList;
        }
    }

public class AuraEventTemplate : Tpl
    {
        /// <summary>
        /// 转生等级
        /// </summary>
        public int ZSLv;
        /// <summary>
        /// 不朽魔王怪物组
        /// </summary>
        public string DevilGroup;
        /// <summary>
        /// 不朽魔王击杀后公告
        /// </summary>
        public int DevilNotice;
        /// <summary>
        /// 重复刷新血量加成BuffID
        /// </summary>
        public int DevilRefreshHP;
        /// <summary>
        /// 不朽魔王活动奖励
        /// </summary>
        public string DevilReward;
        /// <summary>
        /// 不朽魔王奖励邮件
        /// </summary>
        public int DevilMail;
        /// <summary>
        /// 秘境一层BOSS
        /// </summary>
        public string Dungeon1Monster;
        /// <summary>
        /// 秘境一层通关奖励
        /// </summary>
        public string Dungeon1Reward;
        /// <summary>
        /// 秘境二层BOSS刷新
        /// </summary>
        public string Dungeon2Monster;
        /// <summary>
        /// 秘境二层通关奖励
        /// </summary>
        public string Dungeon2Reward;
        /// <summary>
        /// 秘境二层怪物刷新数
        /// </summary>
        public int MonsterQuantity;
        /// <summary>
        /// 秘境三层地图id
        /// </summary>
        public int Dungeon3Map;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ZSLv = bytes.ReadInt();
            DevilGroup = bytes.ReadUTF();
            DevilNotice = bytes.ReadInt();
            DevilRefreshHP = bytes.ReadInt();
            DevilReward = bytes.ReadUTF();
            DevilMail = bytes.ReadInt();
            Dungeon1Monster = bytes.ReadUTF();
            Dungeon1Reward = bytes.ReadUTF();
            Dungeon2Monster = bytes.ReadUTF();
            Dungeon2Reward = bytes.ReadUTF();
            MonsterQuantity = bytes.ReadInt();
            Dungeon3Map = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ZSLv);
            bytes.WriteUTF(DevilGroup);
            bytes.WriteInt(DevilNotice);
            bytes.WriteInt(DevilRefreshHP);
            bytes.WriteUTF(DevilReward);
            bytes.WriteInt(DevilMail);
            bytes.WriteUTF(Dungeon1Monster);
            bytes.WriteUTF(Dungeon1Reward);
            bytes.WriteUTF(Dungeon2Monster);
            bytes.WriteUTF(Dungeon2Reward);
            bytes.WriteInt(MonsterQuantity);
            bytes.WriteInt(Dungeon3Map);
        }
    }

    public class AuraEventTemplateMode : TplMode
    {
        private IList<AuraEventTemplate> mList = null;

        public AuraEventTemplateMode(int step) : base("AuraEventTemplate", typeof(AuraEventTemplate), step) { }

        public AuraEventTemplate this[int id]
        {
            get { return Find<AuraEventTemplate>(id); }
        }

        public AuraEventTemplate Find(int id)
        {
            return Find<AuraEventTemplate>(id);
        }

        public IList<AuraEventTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AuraEventTemplate>();
            return mList;
        }
    }

public class AuraTemplate : Tpl
    {
        /// <summary>
        /// 触发事件所需灵气值
        /// </summary>
        public string EventNeedAura;
        /// <summary>
        /// 事件随机概率
        /// </summary>
        public string EventRandom;
        /// <summary>
        /// 每日触发事件次数
        /// </summary>
        public int AuraLimit;
        /// <summary>
        /// 每日登录获得灵气值
        /// </summary>
        public int LoginAura;
        /// <summary>
        /// 日常活跃获得灵气值
        /// </summary>
        public int DailyAura;
        /// <summary>
        /// 时间推移获得灵气值
        /// </summary>
        public string SeverTimeAura;
        /// <summary>
        /// 完成充值获得灵气值
        /// </summary>
        public int PayAura;
        /// <summary>
        /// 不朽魔王副本id
        /// </summary>
        public int DevilEventID;
        /// <summary>
        /// 不朽魔王刷新坐标
        /// </summary>
        public string DevilRefresh;
        /// <summary>
        /// 不朽魔王副本奖励展示
        /// </summary>
        public string DevilEventRewardShow;
        /// <summary>
        /// 不朽魔王副本
        /// 持续时间（s）
        /// </summary>
        public int DevilEventTime;
        /// <summary>
        /// 时空秘境奖励展示
        /// </summary>
        public string DungeonRewardShow;
        /// <summary>
        /// 秘境一层副本ID
        /// </summary>
        public int Dungeon1ID;
        /// <summary>
        /// 秘境一层BOSS
        /// 刷新坐标
        /// </summary>
        public string Dungeon1Refresh;
        /// <summary>
        /// 秘境一层
        /// 通关奖励邮件
        /// </summary>
        public int Dungeon1Mail;
        /// <summary>
        /// 秘境二层副本ID
        /// </summary>
        public int Dungeon2ID;
        /// <summary>
        /// 秘境二层
        /// 通关奖励邮件
        /// </summary>
        public int Dungeon2Mail;
        /// <summary>
        /// 秘境玩法说明
        /// </summary>
        public string DungeonTxt;
        /// <summary>
        /// 时空秘境
        /// 持续时间（s）
        /// </summary>
        public int DungeonTime;
        /// <summary>
        /// 神秘集市
        /// 持续时间（s）
        /// </summary>
        public int StoreTime;
        /// <summary>
        /// 聚灵阵指向tips
        /// </summary>
        public string AuraTips;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EventNeedAura = bytes.ReadUTF();
            EventRandom = bytes.ReadUTF();
            AuraLimit = bytes.ReadInt();
            LoginAura = bytes.ReadInt();
            DailyAura = bytes.ReadInt();
            SeverTimeAura = bytes.ReadUTF();
            PayAura = bytes.ReadInt();
            DevilEventID = bytes.ReadInt();
            DevilRefresh = bytes.ReadUTF();
            DevilEventRewardShow = bytes.ReadUTF();
            DevilEventTime = bytes.ReadInt();
            DungeonRewardShow = bytes.ReadUTF();
            Dungeon1ID = bytes.ReadInt();
            Dungeon1Refresh = bytes.ReadUTF();
            Dungeon1Mail = bytes.ReadInt();
            Dungeon2ID = bytes.ReadInt();
            Dungeon2Mail = bytes.ReadInt();
            DungeonTxt = bytes.ReadUTF();
            DungeonTime = bytes.ReadInt();
            StoreTime = bytes.ReadInt();
            AuraTips = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(EventNeedAura);
            bytes.WriteUTF(EventRandom);
            bytes.WriteInt(AuraLimit);
            bytes.WriteInt(LoginAura);
            bytes.WriteInt(DailyAura);
            bytes.WriteUTF(SeverTimeAura);
            bytes.WriteInt(PayAura);
            bytes.WriteInt(DevilEventID);
            bytes.WriteUTF(DevilRefresh);
            bytes.WriteUTF(DevilEventRewardShow);
            bytes.WriteInt(DevilEventTime);
            bytes.WriteUTF(DungeonRewardShow);
            bytes.WriteInt(Dungeon1ID);
            bytes.WriteUTF(Dungeon1Refresh);
            bytes.WriteInt(Dungeon1Mail);
            bytes.WriteInt(Dungeon2ID);
            bytes.WriteInt(Dungeon2Mail);
            bytes.WriteUTF(DungeonTxt);
            bytes.WriteInt(DungeonTime);
            bytes.WriteInt(StoreTime);
            bytes.WriteUTF(AuraTips);
        }
    }

    public class AuraTemplateMode : TplMode
    {
        private IList<AuraTemplate> mList = null;

        public AuraTemplateMode(int step) : base("AuraTemplate", typeof(AuraTemplate), step) { }

        public AuraTemplate this[int id]
        {
            get { return Find<AuraTemplate>(id); }
        }

        public AuraTemplate Find(int id)
        {
            return Find<AuraTemplate>(id);
        }

        public IList<AuraTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AuraTemplate>();
            return mList;
        }
    }

public class SeparationTemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 名字显示
        /// </summary>
        public string Name;
        /// <summary>
        /// 所属类别
        /// </summary>
        public int Type;
        /// <summary>
        /// 所属组
        /// </summary>
        public int Group;
        /// <summary>
        /// 分身所用资源
        /// </summary>
        public int AssetID;
        /// <summary>
        /// AI模板
        /// </summary>
        public int AITmlpID;
        /// <summary>
        /// 分身攻击继承玩家攻击力万分比
        /// </summary>
        public int InheritCoefficient;
        /// <summary>
        /// 分身生命值继承玩家万分比
        /// </summary>
        public int InheritHealth;
        /// <summary>
        /// 分身内功值继承玩家万分比
        /// </summary>
        public int InheritInter;
        /// <summary>
        /// 物防属性
        /// 继承万分比
        /// </summary>
        public int InheritPhydef;
        /// <summary>
        /// 魔防属性
        /// 继承万分比
        /// </summary>
        public int InheritMagicdef;
        /// <summary>
        /// 血量
        /// </summary>
        public int HealthPoint;
        /// <summary>
        /// 生命恢复(每3秒)
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 真实伤害
        /// </summary>
        public int SacredIHurt;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Group = bytes.ReadInt();
            AssetID = bytes.ReadInt();
            AITmlpID = bytes.ReadInt();
            InheritCoefficient = bytes.ReadInt();
            InheritHealth = bytes.ReadInt();
            InheritInter = bytes.ReadInt();
            InheritPhydef = bytes.ReadInt();
            InheritMagicdef = bytes.ReadInt();
            HealthPoint = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            SacredIHurt = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            Hits = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(Group);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(AITmlpID);
            bytes.WriteInt(InheritCoefficient);
            bytes.WriteInt(InheritHealth);
            bytes.WriteInt(InheritInter);
            bytes.WriteInt(InheritPhydef);
            bytes.WriteInt(InheritMagicdef);
            bytes.WriteInt(HealthPoint);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(SacredIHurt);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(Hits);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
        }
    }

    public class SeparationTemplateMode : TplMode
    {
        private IList<SeparationTemplate> mList = null;

        public SeparationTemplateMode(int step) : base("SeparationTemplate", typeof(SeparationTemplate), step) { }

        public SeparationTemplate this[int id]
        {
            get { return Find<SeparationTemplate>(id); }
        }

        public SeparationTemplate Find(int id)
        {
            return Find<SeparationTemplate>(id);
        }

        public IList<SeparationTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SeparationTemplate>();
            return mList;
        }
    }

public class PetAttrTemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 名字显示
        /// </summary>
        public string Name;
        /// <summary>
        /// 所属召唤类别
        /// </summary>
        public int PetType;
        /// <summary>
        /// 宠物组
        /// </summary>
        public int PetGroup;
        /// <summary>
        /// 怪物真名
        /// </summary>
        public string RealName;
        /// <summary>
        /// 根据怪物真名 映射怪物表对应的 资源ID（AssetID）
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 根据怪物真名 映射怪物表对应怪物名称
        /// </summary>
        public string NameInGame;
        /// <summary>
        /// AI模板
        /// </summary>
        public int AITmlpID;
        /// <summary>
        /// 下一级
        /// 所需攻击次数
        /// </summary>
        public int NextLvExp;
        /// <summary>
        /// 宠物攻击继承玩家攻击力系数（万分比）
        /// </summary>
        public int InheritCoefficient;
        /// <summary>
        /// 血量
        /// </summary>
        public long HealthPoint;
        /// <summary>
        /// 生命恢复(每3秒)
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 真实伤害
        /// </summary>
        public int SacredIHurt;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 武器美术资源ID
        /// </summary>
        public int WeapenID;
        /// <summary>
        /// 名字版高度
        /// </summary>
        public int High;
        /// <summary>
        /// 说话随机率：50代表每秒有50分之一几率说话
        /// </summary>
        public int SpeakOdds;
        /// <summary>
        /// 1级ID
        /// </summary>
        public int PetOne;
        /// <summary>
        /// 普通说话库
        /// </summary>
        public string PaoPao;
        /// <summary>
        /// 血达到多少说的话
        /// </summary>
        public string HPPaoPao;
        /// <summary>
        /// 对应怪物ID
        /// （策划备注）
        /// </summary>
        public string Monsterid;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            Name = bytes.ReadUTF();
            PetType = bytes.ReadInt();
            PetGroup = bytes.ReadInt();
            RealName = bytes.ReadUTF();
            AssetID = bytes.ReadInt();
            NameInGame = bytes.ReadUTF();
            AITmlpID = bytes.ReadInt();
            NextLvExp = bytes.ReadInt();
            InheritCoefficient = bytes.ReadInt();
            HealthPoint = bytes.ReadInt64();
            RestoreHP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            SacredIHurt = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            Hits = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            WeapenID = bytes.ReadInt();
            High = bytes.ReadInt();
            SpeakOdds = bytes.ReadInt();
            PetOne = bytes.ReadInt();
            PaoPao = bytes.ReadUTF();
            HPPaoPao = bytes.ReadUTF();
            Monsterid = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteUTF(Name);
            bytes.WriteInt(PetType);
            bytes.WriteInt(PetGroup);
            bytes.WriteUTF(RealName);
            bytes.WriteInt(AssetID);
            bytes.WriteUTF(NameInGame);
            bytes.WriteInt(AITmlpID);
            bytes.WriteInt(NextLvExp);
            bytes.WriteInt(InheritCoefficient);
            bytes.WriteInt64(HealthPoint);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(SacredIHurt);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(Hits);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(WeapenID);
            bytes.WriteInt(High);
            bytes.WriteInt(SpeakOdds);
            bytes.WriteInt(PetOne);
            bytes.WriteUTF(PaoPao);
            bytes.WriteUTF(HPPaoPao);
            bytes.WriteUTF(Monsterid);
        }
    }

    public class PetAttrTemplateMode : TplMode
    {
        private IList<PetAttrTemplate> mList = null;

        public PetAttrTemplateMode(int step) : base("PetAttrTemplate", typeof(PetAttrTemplate), step) { }

        public PetAttrTemplate this[int id]
        {
            get { return Find<PetAttrTemplate>(id); }
        }

        public PetAttrTemplate Find(int id)
        {
            return Find<PetAttrTemplate>(id);
        }

        public IList<PetAttrTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PetAttrTemplate>();
            return mList;
        }
    }

public class LevelUpTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法值
        /// </summary>
        public int MP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 暴击伤害附加系数万分比
        /// </summary>
        public int CritHurtPct;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 致命伤害附加系数万分比
        /// </summary>
        public int AccurateHurtPct;
        /// <summary>
        /// 对怪致命附加系数万分比
        /// </summary>
        public int DeadlyToMonMultiple;
        /// <summary>
        /// 生命恢复(秒)
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 魔法恢复(秒)
        /// </summary>
        public int RestoreMP;
        /// <summary>
        /// 攻击速度
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 移速
        /// </summary>
        public int MoveSpeed;
        /// <summary>
        /// 诱惑等级
        /// </summary>
        public int ConfuseLv;
        /// <summary>
        /// 净化等级
        /// </summary>
        public int CleanLv;
        /// <summary>
        /// 压制等级
        /// </summary>
        public int ControlLv;
        /// <summary>
        /// 最低伤害系数
        /// </summary>
        public int MinDmgSet;
        /// <summary>
        /// 伤害波动系数
        /// </summary>
        public int DmgRndSet;
        /// <summary>
        /// 升级经验组
        /// </summary>
        public string ExpGroup;
        /// <summary>
        /// 升级经验
        /// </summary>
        public long Exp;
        /// <summary>
        /// 活动泡点经验
        /// </summary>
        public int SSBWExp;
        /// <summary>
        /// 膜拜城主泡点经验
        /// </summary>
        public int MBCZExp;
        /// <summary>
        /// 离线挂机泡点经验
        /// </summary>
        public int OfflineExp;
        /// <summary>
        /// 离线经验
        /// </summary>
        public int OfflineExp2;
        /// <summary>
        /// 兑换修为
        /// </summary>
        public long AcquireValue;
        /// <summary>
        /// 消耗元宝
        /// </summary>
        public int ReincarnationGold;
        /// <summary>
        /// 兑换获得魔器元力
        /// </summary>
        public int AcquireYuanli;
        /// <summary>
        /// 兑换获得突破点
        /// </summary>
        public int AcquireTupo;
        /// <summary>
        /// 兑换原力金币消耗
        /// </summary>
        public int YuanliGold;
        /// <summary>
        /// 兑换突破点金币消耗
        /// </summary>
        public int TopoGold;
        /// <summary>
        /// 连击技能总能量
        /// </summary>
        public int MaxEnergy;
        /// <summary>
        /// 连击技能回复
        /// </summary>
        public int EnergyRecover;
        /// <summary>
        /// 击杀获得煞气值
        /// </summary>
        public int KillShaqi;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Lv = bytes.ReadInt();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            CritHurtPct = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            AccurateHurtPct = bytes.ReadInt();
            DeadlyToMonMultiple = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
            RestoreMP = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            MoveSpeed = bytes.ReadInt();
            ConfuseLv = bytes.ReadInt();
            CleanLv = bytes.ReadInt();
            ControlLv = bytes.ReadInt();
            MinDmgSet = bytes.ReadInt();
            DmgRndSet = bytes.ReadInt();
            ExpGroup = bytes.ReadUTF();
            Exp = bytes.ReadInt64();
            SSBWExp = bytes.ReadInt();
            MBCZExp = bytes.ReadInt();
            OfflineExp = bytes.ReadInt();
            OfflineExp2 = bytes.ReadInt();
            AcquireValue = bytes.ReadInt64();
            ReincarnationGold = bytes.ReadInt();
            AcquireYuanli = bytes.ReadInt();
            AcquireTupo = bytes.ReadInt();
            YuanliGold = bytes.ReadInt();
            TopoGold = bytes.ReadInt();
            MaxEnergy = bytes.ReadInt();
            EnergyRecover = bytes.ReadInt();
            KillShaqi = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Lv);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(CritHurtPct);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(AccurateHurtPct);
            bytes.WriteInt(DeadlyToMonMultiple);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(RestoreMP);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(MoveSpeed);
            bytes.WriteInt(ConfuseLv);
            bytes.WriteInt(CleanLv);
            bytes.WriteInt(ControlLv);
            bytes.WriteInt(MinDmgSet);
            bytes.WriteInt(DmgRndSet);
            bytes.WriteUTF(ExpGroup);
            bytes.WriteInt64(Exp);
            bytes.WriteInt(SSBWExp);
            bytes.WriteInt(MBCZExp);
            bytes.WriteInt(OfflineExp);
            bytes.WriteInt(OfflineExp2);
            bytes.WriteInt64(AcquireValue);
            bytes.WriteInt(ReincarnationGold);
            bytes.WriteInt(AcquireYuanli);
            bytes.WriteInt(AcquireTupo);
            bytes.WriteInt(YuanliGold);
            bytes.WriteInt(TopoGold);
            bytes.WriteInt(MaxEnergy);
            bytes.WriteInt(EnergyRecover);
            bytes.WriteInt(KillShaqi);
            bytes.WriteInt(NoticeID);
        }
    }

    public class LevelUpTemplateMode : TplMode
    {
        private IList<LevelUpTemplate> mList = null;

        public LevelUpTemplateMode(int step) : base("LevelUpTemplate", typeof(LevelUpTemplate), step) { }

        public LevelUpTemplate this[int id]
        {
            get { return Find<LevelUpTemplate>(id); }
        }

        public LevelUpTemplate Find(int id)
        {
            return Find<LevelUpTemplate>(id);
        }

        public IList<LevelUpTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LevelUpTemplate>();
            return mList;
        }
    }

public class FashionTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 是否在金装列表展示（0不展示1展示）
        /// </summary>
        public int IsShow;
        /// <summary>
        /// 剩余时间描述
        /// </summary>
        public string TimeDescribe;
        /// <summary>
        /// 星级
        /// </summary>
        public int Star;
        /// <summary>
        /// 升星花费
        /// </summary>
        public string UpCost;
        /// <summary>
        /// 升星概率
        /// </summary>
        public int UpProbability;
        /// <summary>
        /// 最大星级
        /// </summary>
        public int MaxStar;
        /// <summary>
        /// 是否激活显示
        /// </summary>
        public int IsActivationShow;
        /// <summary>
        /// 星级归属显示
        /// </summary>
        public int BelongStarShow;
        /// <summary>
        /// 升星归属
        /// </summary>
        public int UpBelong;
        /// <summary>
        /// 足迹帧数
        /// </summary>
        public int FootFrame;
        /// <summary>
        /// 时装套装
        /// </summary>
        public int Fashionsuit;
        /// <summary>
        /// 男性形象
        /// </summary>
        public int Male;
        /// <summary>
        /// 女性形象
        /// </summary>
        public int Female;
        /// <summary>
        /// 战士生命
        /// </summary>
        public int HP1;
        /// <summary>
        /// 法师生命
        /// </summary>
        public int HP2;
        /// <summary>
        /// 道士生命
        /// </summary>
        public int HP3;
        /// <summary>
        /// 战士魔法
        /// </summary>
        public int MP1;
        /// <summary>
        /// 法师魔法
        /// </summary>
        public int MP2;
        /// <summary>
        /// 道士魔法
        /// </summary>
        public int MP3;
        /// <summary>
        /// 神盾
        /// </summary>
        public int Energy;
        /// <summary>
        /// 攻击min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 攻击max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 攻击min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 攻击max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 攻击min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 攻击max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 防御min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 防御max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 防御min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 防御max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 攻击速度加成万分比
        /// </summary>
        public int AttackSpeedPct;
        /// <summary>
        /// 移动速度万分比
        /// </summary>
        public int MoveSpeedPct;
        /// <summary>
        /// 对怪伤害增加（万分比）
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// PK增伤（万分比）
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK减伤（万分比）
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 来源
        /// </summary>
        public int Approach;
        /// <summary>
        /// 来源文字描述
        /// </summary>
        public string Describe;
        /// <summary>
        /// X偏移值
        /// </summary>
        public int OffsetX;
        /// <summary>
        /// Y偏移值
        /// </summary>
        public int OffsetY;
        /// <summary>
        /// 特效偏移值
        /// </summary>
        public int EffectY;
        /// <summary>
        /// 坐骑哪几个方向需要头部覆盖
        /// </summary>
        public string Direction;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Name = bytes.ReadUTF();
            IsShow = bytes.ReadInt();
            TimeDescribe = bytes.ReadUTF();
            Star = bytes.ReadInt();
            UpCost = bytes.ReadUTF();
            UpProbability = bytes.ReadInt();
            MaxStar = bytes.ReadInt();
            IsActivationShow = bytes.ReadInt();
            BelongStarShow = bytes.ReadInt();
            UpBelong = bytes.ReadInt();
            FootFrame = bytes.ReadInt();
            Fashionsuit = bytes.ReadInt();
            Male = bytes.ReadInt();
            Female = bytes.ReadInt();
            HP1 = bytes.ReadInt();
            HP2 = bytes.ReadInt();
            HP3 = bytes.ReadInt();
            MP1 = bytes.ReadInt();
            MP2 = bytes.ReadInt();
            MP3 = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            AttackSpeedPct = bytes.ReadInt();
            MoveSpeedPct = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            Approach = bytes.ReadInt();
            Describe = bytes.ReadUTF();
            OffsetX = bytes.ReadInt();
            OffsetY = bytes.ReadInt();
            EffectY = bytes.ReadInt();
            Direction = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteUTF(Name);
            bytes.WriteInt(IsShow);
            bytes.WriteUTF(TimeDescribe);
            bytes.WriteInt(Star);
            bytes.WriteUTF(UpCost);
            bytes.WriteInt(UpProbability);
            bytes.WriteInt(MaxStar);
            bytes.WriteInt(IsActivationShow);
            bytes.WriteInt(BelongStarShow);
            bytes.WriteInt(UpBelong);
            bytes.WriteInt(FootFrame);
            bytes.WriteInt(Fashionsuit);
            bytes.WriteInt(Male);
            bytes.WriteInt(Female);
            bytes.WriteInt(HP1);
            bytes.WriteInt(HP2);
            bytes.WriteInt(HP3);
            bytes.WriteInt(MP1);
            bytes.WriteInt(MP2);
            bytes.WriteInt(MP3);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(AttackSpeedPct);
            bytes.WriteInt(MoveSpeedPct);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(Approach);
            bytes.WriteUTF(Describe);
            bytes.WriteInt(OffsetX);
            bytes.WriteInt(OffsetY);
            bytes.WriteInt(EffectY);
            bytes.WriteUTF(Direction);
        }
    }

    public class FashionTemplateMode : TplMode
    {
        private IList<FashionTemplate> mList = null;

        public FashionTemplateMode(int step) : base("FashionTemplate", typeof(FashionTemplate), step) { }

        public FashionTemplate this[int id]
        {
            get { return Find<FashionTemplate>(id); }
        }

        public FashionTemplate Find(int id)
        {
            return Find<FashionTemplate>(id);
        }

        public IList<FashionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FashionTemplate>();
            return mList;
        }
    }

public class OpenChestTemplate : Tpl
    {
        /// <summary>
        /// 奖池编号
        /// </summary>
        public int Muster;
        /// <summary>
        /// 库存类型
        /// </summary>
        public int Rare;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weight;
        /// <summary>
        /// 稀有标识
        /// </summary>
        public int RareType;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Muster = bytes.ReadInt();
            Rare = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            Weight = bytes.ReadInt();
            RareType = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Muster);
            bytes.WriteInt(Rare);
            bytes.WriteInt(GoodsID);
            bytes.WriteInt(Weight);
            bytes.WriteInt(RareType);
        }
    }

    public class OpenChestTemplateMode : TplMode
    {
        private IList<OpenChestTemplate> mList = null;

        public OpenChestTemplateMode(int step) : base("OpenChestTemplate", typeof(OpenChestTemplate), step) { }

        public OpenChestTemplate this[int id]
        {
            get { return Find<OpenChestTemplate>(id); }
        }

        public OpenChestTemplate Find(int id)
        {
            return Find<OpenChestTemplate>(id);
        }

        public IList<OpenChestTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<OpenChestTemplate>();
            return mList;
        }
    }

public class QuickShopTemplate : Tpl
    {
        /// <summary>
        /// 类型（(1随身商店，2转生面板，3神石，4命珠,5成就令牌，6注灵快速购买,7羽毛，8英雄进阶丹，9星之竹篾，10降低pk值，11官职进阶，12神翼精华，13玫瑰，14魔魂令，15强化商店，16魂石商店，18神石商店，19极限之地快速购买，20通天塔快速购买21.矿锄快速购买,23.元素洗练，24.鲜花快速购买.25.行会sos.26.魔器.27.直达券速购，28.突破精华快速购买），29.龙魄碎片
        /// </summary>
        public int Type;
        /// <summary>
        /// 商城ID(取第一个权重最高的值,如果只有1个值，则那个值）
        /// </summary>
        public string MallID;
        /// <summary>
        /// 快速使用（1购买，2购买使用）
        /// </summary>
        public int QuickUse;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            MallID = bytes.ReadUTF();
            QuickUse = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteUTF(MallID);
            bytes.WriteInt(QuickUse);
        }
    }

    public class QuickShopTemplateMode : TplMode
    {
        private IList<QuickShopTemplate> mList = null;

        public QuickShopTemplateMode(int step) : base("QuickShopTemplate", typeof(QuickShopTemplate), step) { }

        public QuickShopTemplate this[int id]
        {
            get { return Find<QuickShopTemplate>(id); }
        }

        public QuickShopTemplate Find(int id)
        {
            return Find<QuickShopTemplate>(id);
        }

        public IList<QuickShopTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<QuickShopTemplate>();
            return mList;
        }
    }

public class ViolentTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 描述
        /// </summary>
        public string Describe;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int MoneyQuantity;
        /// <summary>
        /// 货币掉落
        /// </summary>
        public string DropMoney;
        /// <summary>
        /// BuffId
        /// </summary>
        public int Buff;
        /// <summary>
        /// 击杀可掉落时间段
        /// </summary>
        public string DropTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Describe = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            MoneyQuantity = bytes.ReadInt();
            DropMoney = bytes.ReadUTF();
            Buff = bytes.ReadInt();
            DropTime = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Describe);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyQuantity);
            bytes.WriteUTF(DropMoney);
            bytes.WriteInt(Buff);
            bytes.WriteUTF(DropTime);
        }
    }

    public class ViolentTemplateMode : TplMode
    {
        private IList<ViolentTemplate> mList = null;

        public ViolentTemplateMode(int step) : base("ViolentTemplate", typeof(ViolentTemplate), step) { }

        public ViolentTemplate this[int id]
        {
            get { return Find<ViolentTemplate>(id); }
        }

        public ViolentTemplate Find(int id)
        {
            return Find<ViolentTemplate>(id);
        }

        public IList<ViolentTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ViolentTemplate>();
            return mList;
        }
    }

public class MineralTemplate : Tpl
    {
        /// <summary>
        /// 矿工ID
        /// </summary>
        public int MonsterID;
        /// <summary>
        /// 矿工头像资源
        /// </summary>
        public int ResID;
        /// <summary>
        /// 产出预览（前端界面，逗号隔开）
        /// </summary>
        public string ItemsShow;
        /// <summary>
        /// 采矿产出
        /// </summary>
        public string AddItem;
        /// <summary>
        /// 雇佣矿工，货币类型（1所有金刚石，2绑定元宝，3金币,4绑定金币）
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 雇佣货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 需要显示的矿石ID
        /// （前端界面，竖线隔开）
        /// </summary>
        public string MineralID;
        /// <summary>
        /// 持续挖矿时间（秒）
        /// </summary>
        public int MineTime;
        /// <summary>
        /// 挖矿间隔（秒）
        /// </summary>
        public int Minegap;
        /// <summary>
        /// 默认死亡复活时间（秒）
        /// </summary>
        public int ReviveTimeDefault;
        /// <summary>
        /// 最小死亡复活时间（秒）
        /// </summary>
        public int ReviveTimeMin;
        /// <summary>
        /// 最大死亡复活时间（秒）
        /// </summary>
        public int ReviveTimeMax;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MonsterID = bytes.ReadInt();
            ResID = bytes.ReadInt();
            ItemsShow = bytes.ReadUTF();
            AddItem = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            MineralID = bytes.ReadUTF();
            MineTime = bytes.ReadInt();
            Minegap = bytes.ReadInt();
            ReviveTimeDefault = bytes.ReadInt();
            ReviveTimeMin = bytes.ReadInt();
            ReviveTimeMax = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MonsterID);
            bytes.WriteInt(ResID);
            bytes.WriteUTF(ItemsShow);
            bytes.WriteUTF(AddItem);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteUTF(MineralID);
            bytes.WriteInt(MineTime);
            bytes.WriteInt(Minegap);
            bytes.WriteInt(ReviveTimeDefault);
            bytes.WriteInt(ReviveTimeMin);
            bytes.WriteInt(ReviveTimeMax);
        }
    }

    public class MineralTemplateMode : TplMode
    {
        private IList<MineralTemplate> mList = null;

        public MineralTemplateMode(int step) : base("MineralTemplate", typeof(MineralTemplate), step) { }

        public MineralTemplate this[int id]
        {
            get { return Find<MineralTemplate>(id); }
        }

        public MineralTemplate Find(int id)
        {
            return Find<MineralTemplate>(id);
        }

        public IList<MineralTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MineralTemplate>();
            return mList;
        }
    }

public class ServiceWarItemTemplate : Tpl
    {
        /// <summary>
        /// 道具TID
        /// </summary>
        public int ItemTID;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int ItemNum;
        /// <summary>
        /// 价格
        /// </summary>
        public int Cost;
        /// <summary>
        /// 每日限购次数
        /// </summary>
        public int DailyTimes;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ItemTID = bytes.ReadInt();
            ItemNum = bytes.ReadInt();
            Cost = bytes.ReadInt();
            DailyTimes = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ItemTID);
            bytes.WriteInt(ItemNum);
            bytes.WriteInt(Cost);
            bytes.WriteInt(DailyTimes);
        }
    }

    public class ServiceWarItemTemplateMode : TplMode
    {
        private IList<ServiceWarItemTemplate> mList = null;

        public ServiceWarItemTemplateMode(int step) : base("ServiceWarItemTemplate", typeof(ServiceWarItemTemplate), step) { }

        public ServiceWarItemTemplate this[int id]
        {
            get { return Find<ServiceWarItemTemplate>(id); }
        }

        public ServiceWarItemTemplate Find(int id)
        {
            return Find<ServiceWarItemTemplate>(id);
        }

        public IList<ServiceWarItemTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ServiceWarItemTemplate>();
            return mList;
        }
    }

public class ServiceWarActivityTemplate : Tpl
    {
        /// <summary>
        /// 活动名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 开服几天后开启
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 合服几天后开启（第x+1天）
        /// </summary>
        public int HefuDay;
        /// <summary>
        /// 报名时间
        /// </summary>
        public string BeginApply;
        /// <summary>
        /// 报名结束时间
        /// </summary>
        public string EndApply;
        /// <summary>
        /// 禁止进入活动时间
        /// </summary>
        public string TransferEndTime;
        /// <summary>
        /// 活动起始时间
        /// </summary>
        public string TimeStart;
        /// <summary>
        /// 活动结束时间
        /// </summary>
        public string TimeEnd;
        /// <summary>
        /// 周几开
        /// </summary>
        public string WeekDay;
        /// <summary>
        /// 起始积分
        /// </summary>
        public int Point;
        /// <summary>
        /// 参加境界等级
        /// </summary>
        public int State;
        /// <summary>
        /// 参加条件等级
        /// </summary>
        public int CoP;
        /// <summary>
        /// 活动地图参数
        /// </summary>
        public string MapID;
        /// <summary>
        /// 机制复活坐标点
        /// </summary>
        public string RebornLoc;
        /// <summary>
        /// 活动排名奖励
        /// </summary>
        public string Awards;
        /// <summary>
        /// 公告相关
        /// </summary>
        public string NoticeID;
        /// <summary>
        /// 活动奖励邮件id
        /// </summary>
        public string MailTid;
        /// <summary>
        /// 活动NPCID
        /// [0为不显示NPC]
        /// </summary>
        public int NPCID;
        /// <summary>
        /// 场景编号
        /// [场景ID|X坐标|Y坐标]（NPC面板传送目的地）
        /// </summary>
        public string transfer;
        /// <summary>
        /// （NPC界面）活动描述
        /// </summary>
        public string EntranceDes;
        /// <summary>
        /// （NPC进入界面）活动说明
        /// </summary>
        public string NPCInstruction;
        /// <summary>
        /// 坐标点以及对应数据
        /// </summary>
        public string Other;
        /// <summary>
        /// 活动中奖励
        /// </summary>
        public string Rewards;
        /// <summary>
        /// 伤害技能特效
        /// </summary>
        public string Other1;
        /// <summary>
        /// 备用字段各活动意义不同
        /// </summary>
        public string Other2;
        /// <summary>
        /// 每5秒增加的荣誉
        /// </summary>
        public int Honor;
        /// <summary>
        /// 允许最多人数匹配到一起
        /// </summary>
        public int MaxPlayerCount;
        /// <summary>
        /// 阵营数
        /// </summary>
        public int CampCount;
        /// <summary>
        /// 排行榜玩家数量
        /// </summary>
        public int RankListNum;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            OpenDay = bytes.ReadInt();
            HefuDay = bytes.ReadInt();
            BeginApply = bytes.ReadUTF();
            EndApply = bytes.ReadUTF();
            TransferEndTime = bytes.ReadUTF();
            TimeStart = bytes.ReadUTF();
            TimeEnd = bytes.ReadUTF();
            WeekDay = bytes.ReadUTF();
            Point = bytes.ReadInt();
            State = bytes.ReadInt();
            CoP = bytes.ReadInt();
            MapID = bytes.ReadUTF();
            RebornLoc = bytes.ReadUTF();
            Awards = bytes.ReadUTF();
            NoticeID = bytes.ReadUTF();
            MailTid = bytes.ReadUTF();
            NPCID = bytes.ReadInt();
            transfer = bytes.ReadUTF();
            EntranceDes = bytes.ReadUTF();
            NPCInstruction = bytes.ReadUTF();
            Other = bytes.ReadUTF();
            Rewards = bytes.ReadUTF();
            Other1 = bytes.ReadUTF();
            Other2 = bytes.ReadUTF();
            Honor = bytes.ReadInt();
            MaxPlayerCount = bytes.ReadInt();
            CampCount = bytes.ReadInt();
            RankListNum = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(OpenDay);
            bytes.WriteInt(HefuDay);
            bytes.WriteUTF(BeginApply);
            bytes.WriteUTF(EndApply);
            bytes.WriteUTF(TransferEndTime);
            bytes.WriteUTF(TimeStart);
            bytes.WriteUTF(TimeEnd);
            bytes.WriteUTF(WeekDay);
            bytes.WriteInt(Point);
            bytes.WriteInt(State);
            bytes.WriteInt(CoP);
            bytes.WriteUTF(MapID);
            bytes.WriteUTF(RebornLoc);
            bytes.WriteUTF(Awards);
            bytes.WriteUTF(NoticeID);
            bytes.WriteUTF(MailTid);
            bytes.WriteInt(NPCID);
            bytes.WriteUTF(transfer);
            bytes.WriteUTF(EntranceDes);
            bytes.WriteUTF(NPCInstruction);
            bytes.WriteUTF(Other);
            bytes.WriteUTF(Rewards);
            bytes.WriteUTF(Other1);
            bytes.WriteUTF(Other2);
            bytes.WriteInt(Honor);
            bytes.WriteInt(MaxPlayerCount);
            bytes.WriteInt(CampCount);
            bytes.WriteInt(RankListNum);
        }
    }

    public class ServiceWarActivityTemplateMode : TplMode
    {
        private IList<ServiceWarActivityTemplate> mList = null;

        public ServiceWarActivityTemplateMode(int step) : base("ServiceWarActivityTemplate", typeof(ServiceWarActivityTemplate), step) { }

        public ServiceWarActivityTemplate this[int id]
        {
            get { return Find<ServiceWarActivityTemplate>(id); }
        }

        public ServiceWarActivityTemplate Find(int id)
        {
            return Find<ServiceWarActivityTemplate>(id);
        }

        public IList<ServiceWarActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ServiceWarActivityTemplate>();
            return mList;
        }
    }

public class CycleServiceWarActivityTemplate : Tpl
    {
        /// <summary>
        /// 活动名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 开服几天后开启（第x+1天）
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 合服几天后开启（第x+1天）
        /// </summary>
        public int UnionDay;
        /// <summary>
        /// 首次活动开始时间戳
        /// </summary>
        public int FirstBeginTime;
        /// <summary>
        /// 报名阶段持续时间
        /// </summary>
        public int ApplyTime;
        /// <summary>
        /// 争战期阶段持续时间
        /// </summary>
        public int ActiveTime;
        /// <summary>
        /// 结算期阶段持续时间
        /// </summary>
        public int RestTime;
        /// <summary>
        /// 活动周期
        /// </summary>
        public int Cycle;
        /// <summary>
        /// 战场开放进入天数
        /// （星期x）
        /// </summary>
        public string OpenDays;
        /// <summary>
        /// 进入起始时间
        /// </summary>
        public string StartTime;
        /// <summary>
        /// 进入结束时间
        /// </summary>
        public string EndTime;
        /// <summary>
        /// 起始积分
        /// </summary>
        public int Point;
        /// <summary>
        /// 进入所需转生等级
        /// </summary>
        public int State;
        /// <summary>
        /// 参加条件转生等级
        /// （弃用）
        /// </summary>
        public int CoP;
        /// <summary>
        /// 地图ID
        /// </summary>
        public int Scene;
        /// <summary>
        /// 泡点功绩基础值
        /// </summary>
        public int Bubblepoint;
        /// <summary>
        /// 战场捐献最小值
        /// </summary>
        public int MinDonate;
        /// <summary>
        /// 上榜所需功绩值
        /// </summary>
        public int RankListNeed;
        /// <summary>
        /// 击杀玩家
        /// 掠夺目标积分万分比
        /// </summary>
        public int PlunderPct;
        /// <summary>
        /// 每日掠夺上限值
        /// </summary>
        public int PlunderMax;
        /// <summary>
        /// 掠夺完成公告
        /// </summary>
        public int Notice;
        /// <summary>
        /// 秘宝BOSSID
        /// </summary>
        public int TreasureMonster;
        /// <summary>
        /// 怪物初始刷新坐标
        /// </summary>
        public string MonsterLoc;
        /// <summary>
        /// 怪物初始刷新计时（秒）
        /// </summary>
        public int TreasureMonsterRefresh;
        /// <summary>
        /// 秘宝守护完成后，新秘宝怪刷新时间（秒）
        /// </summary>
        public int TreasureMonsterRefresh1;
        /// <summary>
        /// 秘宝掉落倒计时（秒）
        /// </summary>
        public int TreasureDropTime;
        /// <summary>
        /// 未解封秘宝ID
        /// </summary>
        public int LockTreasureID;
        /// <summary>
        /// 秘宝抢夺相关公告
        /// </summary>
        public string TreasureNotice;
        /// <summary>
        /// 阵营名称
        /// </summary>
        public string CampName;
        /// <summary>
        /// 阵营出生地
        /// [X坐标|Y坐标],[X坐标|Y坐标],[X坐标|Y坐标],[X坐标|Y坐标]
        /// </summary>
        public string transfer;
        /// <summary>
        /// 活动排名奖励
        /// </summary>
        public string Awards;
        /// <summary>
        /// 击杀奖励功绩
        /// </summary>
        public string Other1;
        /// <summary>
        /// 排名奖励邮件
        /// </summary>
        public string Other2;
        /// <summary>
        /// 阵营
        /// </summary>
        public int Camp;
        /// <summary>
        /// 结算及排名配置
        /// </summary>
        public string Other3;
        /// <summary>
        /// 规则说明
        /// </summary>
        public string Explain;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            OpenDay = bytes.ReadInt();
            UnionDay = bytes.ReadInt();
            FirstBeginTime = bytes.ReadInt();
            ApplyTime = bytes.ReadInt();
            ActiveTime = bytes.ReadInt();
            RestTime = bytes.ReadInt();
            Cycle = bytes.ReadInt();
            OpenDays = bytes.ReadUTF();
            StartTime = bytes.ReadUTF();
            EndTime = bytes.ReadUTF();
            Point = bytes.ReadInt();
            State = bytes.ReadInt();
            CoP = bytes.ReadInt();
            Scene = bytes.ReadInt();
            Bubblepoint = bytes.ReadInt();
            MinDonate = bytes.ReadInt();
            RankListNeed = bytes.ReadInt();
            PlunderPct = bytes.ReadInt();
            PlunderMax = bytes.ReadInt();
            Notice = bytes.ReadInt();
            TreasureMonster = bytes.ReadInt();
            MonsterLoc = bytes.ReadUTF();
            TreasureMonsterRefresh = bytes.ReadInt();
            TreasureMonsterRefresh1 = bytes.ReadInt();
            TreasureDropTime = bytes.ReadInt();
            LockTreasureID = bytes.ReadInt();
            TreasureNotice = bytes.ReadUTF();
            CampName = bytes.ReadUTF();
            transfer = bytes.ReadUTF();
            Awards = bytes.ReadUTF();
            Other1 = bytes.ReadUTF();
            Other2 = bytes.ReadUTF();
            Camp = bytes.ReadInt();
            Other3 = bytes.ReadUTF();
            Explain = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(OpenDay);
            bytes.WriteInt(UnionDay);
            bytes.WriteInt(FirstBeginTime);
            bytes.WriteInt(ApplyTime);
            bytes.WriteInt(ActiveTime);
            bytes.WriteInt(RestTime);
            bytes.WriteInt(Cycle);
            bytes.WriteUTF(OpenDays);
            bytes.WriteUTF(StartTime);
            bytes.WriteUTF(EndTime);
            bytes.WriteInt(Point);
            bytes.WriteInt(State);
            bytes.WriteInt(CoP);
            bytes.WriteInt(Scene);
            bytes.WriteInt(Bubblepoint);
            bytes.WriteInt(MinDonate);
            bytes.WriteInt(RankListNeed);
            bytes.WriteInt(PlunderPct);
            bytes.WriteInt(PlunderMax);
            bytes.WriteInt(Notice);
            bytes.WriteInt(TreasureMonster);
            bytes.WriteUTF(MonsterLoc);
            bytes.WriteInt(TreasureMonsterRefresh);
            bytes.WriteInt(TreasureMonsterRefresh1);
            bytes.WriteInt(TreasureDropTime);
            bytes.WriteInt(LockTreasureID);
            bytes.WriteUTF(TreasureNotice);
            bytes.WriteUTF(CampName);
            bytes.WriteUTF(transfer);
            bytes.WriteUTF(Awards);
            bytes.WriteUTF(Other1);
            bytes.WriteUTF(Other2);
            bytes.WriteInt(Camp);
            bytes.WriteUTF(Other3);
            bytes.WriteUTF(Explain);
        }
    }

    public class CycleServiceWarActivityTemplateMode : TplMode
    {
        private IList<CycleServiceWarActivityTemplate> mList = null;

        public CycleServiceWarActivityTemplateMode(int step) : base("CycleServiceWarActivityTemplate", typeof(CycleServiceWarActivityTemplate), step) { }

        public CycleServiceWarActivityTemplate this[int id]
        {
            get { return Find<CycleServiceWarActivityTemplate>(id); }
        }

        public CycleServiceWarActivityTemplate Find(int id)
        {
            return Find<CycleServiceWarActivityTemplate>(id);
        }

        public IList<CycleServiceWarActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CycleServiceWarActivityTemplate>();
            return mList;
        }
    }

public class MultipleArenaInfoTemplate : Tpl
    {
        /// <summary>
        /// 玩家初始分数
        /// </summary>
        public int PlayerStartMMR;
        /// <summary>
        /// 每日初始匹配次数
        /// </summary>
        public int MatchTime;
        /// <summary>
        /// 尊享奖励购买消耗
        /// </summary>
        public string ExtraBonusCost;
        /// <summary>
        /// 匹配次数购买消耗
        /// </summary>
        public string MatchTimePurchase;
        /// <summary>
        /// 匹配次数购买上限
        /// </summary>
        public int PurchaseLimit;
        /// <summary>
        /// 周x开放匹配阶段
        /// </summary>
        public string SeasonCycle;
        /// <summary>
        /// 匹配开放时间
        /// </summary>
        public string MatchBegin;
        /// <summary>
        /// 匹配关闭时间
        /// </summary>
        public string MatchEnd;
        /// <summary>
        /// 匹配时间|玩家分差区间
        /// </summary>
        public string RankSection;
        /// <summary>
        /// 匹配完成倒计时
        /// </summary>
        public int ReadyTime;
        /// <summary>
        /// 准备阶段时长
        /// </summary>
        public int PreparationTime;
        /// <summary>
        /// 战斗阶段时长
        /// </summary>
        public int FightTime;
        /// <summary>
        /// 对局内复活次数
        /// </summary>
        public int RespawnTime;
        /// <summary>
        /// 胜场奖励
        /// </summary>
        public string WinReward;
        /// <summary>
        /// 败场奖励
        /// </summary>
        public string LoseReward;
        /// <summary>
        /// 排行上榜需求段位分
        /// </summary>
        public int ListNeed;
        /// <summary>
        /// 排行榜显示上限
        /// </summary>
        public int ListMax;
        /// <summary>
        /// 排名奖励邮件
        /// </summary>
        public int CycleRewardMail;
        /// <summary>
        /// 排名奖励
        /// </summary>
        public string CycleReward;
        /// <summary>
        /// 竞技场副本id
        /// </summary>
        public int DungeonID;
        /// <summary>
        /// 死亡后复活倒计时
        /// </summary>
        public int RebornTime;
        /// <summary>
        /// 红队传送点
        /// </summary>
        public string FightTranSpot;
        /// <summary>
        /// 蓝队传送点
        /// </summary>
        public string FightTranSpot1;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PlayerStartMMR = bytes.ReadInt();
            MatchTime = bytes.ReadInt();
            ExtraBonusCost = bytes.ReadUTF();
            MatchTimePurchase = bytes.ReadUTF();
            PurchaseLimit = bytes.ReadInt();
            SeasonCycle = bytes.ReadUTF();
            MatchBegin = bytes.ReadUTF();
            MatchEnd = bytes.ReadUTF();
            RankSection = bytes.ReadUTF();
            ReadyTime = bytes.ReadInt();
            PreparationTime = bytes.ReadInt();
            FightTime = bytes.ReadInt();
            RespawnTime = bytes.ReadInt();
            WinReward = bytes.ReadUTF();
            LoseReward = bytes.ReadUTF();
            ListNeed = bytes.ReadInt();
            ListMax = bytes.ReadInt();
            CycleRewardMail = bytes.ReadInt();
            CycleReward = bytes.ReadUTF();
            DungeonID = bytes.ReadInt();
            RebornTime = bytes.ReadInt();
            FightTranSpot = bytes.ReadUTF();
            FightTranSpot1 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(PlayerStartMMR);
            bytes.WriteInt(MatchTime);
            bytes.WriteUTF(ExtraBonusCost);
            bytes.WriteUTF(MatchTimePurchase);
            bytes.WriteInt(PurchaseLimit);
            bytes.WriteUTF(SeasonCycle);
            bytes.WriteUTF(MatchBegin);
            bytes.WriteUTF(MatchEnd);
            bytes.WriteUTF(RankSection);
            bytes.WriteInt(ReadyTime);
            bytes.WriteInt(PreparationTime);
            bytes.WriteInt(FightTime);
            bytes.WriteInt(RespawnTime);
            bytes.WriteUTF(WinReward);
            bytes.WriteUTF(LoseReward);
            bytes.WriteInt(ListNeed);
            bytes.WriteInt(ListMax);
            bytes.WriteInt(CycleRewardMail);
            bytes.WriteUTF(CycleReward);
            bytes.WriteInt(DungeonID);
            bytes.WriteInt(RebornTime);
            bytes.WriteUTF(FightTranSpot);
            bytes.WriteUTF(FightTranSpot1);
        }
    }

    public class MultipleArenaInfoTemplateMode : TplMode
    {
        private IList<MultipleArenaInfoTemplate> mList = null;

        public MultipleArenaInfoTemplateMode(int step) : base("MultipleArenaInfoTemplate", typeof(MultipleArenaInfoTemplate), step) { }

        public MultipleArenaInfoTemplate this[int id]
        {
            get { return Find<MultipleArenaInfoTemplate>(id); }
        }

        public MultipleArenaInfoTemplate Find(int id)
        {
            return Find<MultipleArenaInfoTemplate>(id);
        }

        public IList<MultipleArenaInfoTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MultipleArenaInfoTemplate>();
            return mList;
        }
    }

public class MultipleArenaRankTemplate : Tpl
    {
        /// <summary>
        /// 段位名称
        /// </summary>
        public string RankName;
        /// <summary>
        /// 段位资源名
        /// </summary>
        public string ArtName;
        /// <summary>
        /// 段位起始积分
        /// </summary>
        public int RankStartRating;
        /// <summary>
        /// 段位结束积分
        /// </summary>
        public int RankEndRating;
        /// <summary>
        /// 普通段位奖励
        /// </summary>
        public string RankReward;
        /// <summary>
        /// 尊享段位奖励
        /// </summary>
        public string ExRankReward;
        /// <summary>
        /// 段位每日奖励邮件
        /// </summary>
        public int DailyReward;
        /// <summary>
        /// 段位保护分值
        /// </summary>
        public int Rankprotect;
        /// <summary>
        /// 胜场基础加分值
        /// </summary>
        public int WinRating;
        /// <summary>
        /// 击杀奖励分
        /// </summary>
        public int KillBounsWin;
        /// <summary>
        /// 负场基础扣分值
        /// </summary>
        public int DefeatRating;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RankName = bytes.ReadUTF();
            ArtName = bytes.ReadUTF();
            RankStartRating = bytes.ReadInt();
            RankEndRating = bytes.ReadInt();
            RankReward = bytes.ReadUTF();
            ExRankReward = bytes.ReadUTF();
            DailyReward = bytes.ReadInt();
            Rankprotect = bytes.ReadInt();
            WinRating = bytes.ReadInt();
            KillBounsWin = bytes.ReadInt();
            DefeatRating = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(RankName);
            bytes.WriteUTF(ArtName);
            bytes.WriteInt(RankStartRating);
            bytes.WriteInt(RankEndRating);
            bytes.WriteUTF(RankReward);
            bytes.WriteUTF(ExRankReward);
            bytes.WriteInt(DailyReward);
            bytes.WriteInt(Rankprotect);
            bytes.WriteInt(WinRating);
            bytes.WriteInt(KillBounsWin);
            bytes.WriteInt(DefeatRating);
        }
    }

    public class MultipleArenaRankTemplateMode : TplMode
    {
        private IList<MultipleArenaRankTemplate> mList = null;

        public MultipleArenaRankTemplateMode(int step) : base("MultipleArenaRankTemplate", typeof(MultipleArenaRankTemplate), step) { }

        public MultipleArenaRankTemplate this[int id]
        {
            get { return Find<MultipleArenaRankTemplate>(id); }
        }

        public MultipleArenaRankTemplate Find(int id)
        {
            return Find<MultipleArenaRankTemplate>(id);
        }

        public IList<MultipleArenaRankTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MultipleArenaRankTemplate>();
            return mList;
        }
    }

public class MultipleArenaBotTemplate : Tpl
    {
        /// <summary>
        /// 机器人Tid
        /// </summary>
        public string RobotTid;
        /// <summary>
        /// 机器人可用AI
        /// </summary>
        public string RobotAITid;
        /// <summary>
        /// 机器人适用战斗力下限
        /// </summary>
        public int RobotFightMin;
        /// <summary>
        /// 机器人适用战斗力上限
        /// </summary>
        public int RobotFightMax;
        /// <summary>
        /// 数据库玩家信息容量
        /// </summary>
        public int RobotRank;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RobotTid = bytes.ReadUTF();
            RobotAITid = bytes.ReadUTF();
            RobotFightMin = bytes.ReadInt();
            RobotFightMax = bytes.ReadInt();
            RobotRank = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(RobotTid);
            bytes.WriteUTF(RobotAITid);
            bytes.WriteInt(RobotFightMin);
            bytes.WriteInt(RobotFightMax);
            bytes.WriteInt(RobotRank);
        }
    }

    public class MultipleArenaBotTemplateMode : TplMode
    {
        private IList<MultipleArenaBotTemplate> mList = null;

        public MultipleArenaBotTemplateMode(int step) : base("MultipleArenaBotTemplate", typeof(MultipleArenaBotTemplate), step) { }

        public MultipleArenaBotTemplate this[int id]
        {
            get { return Find<MultipleArenaBotTemplate>(id); }
        }

        public MultipleArenaBotTemplate Find(int id)
        {
            return Find<MultipleArenaBotTemplate>(id);
        }

        public IList<MultipleArenaBotTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MultipleArenaBotTemplate>();
            return mList;
        }
    }

public class ReincarnationTemplate : Tpl
    {
        /// <summary>
        /// 中文名称（策划用）
        /// </summary>
        public string Name;
        /// <summary>
        /// 属性组id
        /// </summary>
        public int AttrGroup;
        /// <summary>
        /// 强化等级
        /// </summary>
        public int IncreaseLV;
        /// <summary>
        /// 职业
        /// </summary>
        public int job;
        /// <summary>
        /// 品质
        /// </summary>
        public int Detail;
        /// <summary>
        /// 强化部位
        /// </summary>
        public int Type;
        /// <summary>
        /// 强化消耗
        /// </summary>
        public int NeedItem;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int ItemNumber;
        /// <summary>
        /// 分解后道具
        /// </summary>
        public int Decompose;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int DecomposeNumber;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 战士轮回属性组
        /// </summary>
        public int PhysicReinJob;
        /// <summary>
        /// 法师轮回属性组
        /// </summary>
        public int MagicReinJob;
        /// <summary>
        /// 道士轮回属性组
        /// </summary>
        public int TaoistReinJob;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            AttrGroup = bytes.ReadInt();
            IncreaseLV = bytes.ReadInt();
            job = bytes.ReadInt();
            Detail = bytes.ReadInt();
            Type = bytes.ReadInt();
            NeedItem = bytes.ReadInt();
            ItemNumber = bytes.ReadInt();
            Decompose = bytes.ReadInt();
            DecomposeNumber = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            PhysicReinJob = bytes.ReadInt();
            MagicReinJob = bytes.ReadInt();
            TaoistReinJob = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(AttrGroup);
            bytes.WriteInt(IncreaseLV);
            bytes.WriteInt(job);
            bytes.WriteInt(Detail);
            bytes.WriteInt(Type);
            bytes.WriteInt(NeedItem);
            bytes.WriteInt(ItemNumber);
            bytes.WriteInt(Decompose);
            bytes.WriteInt(DecomposeNumber);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(PhysicReinJob);
            bytes.WriteInt(MagicReinJob);
            bytes.WriteInt(TaoistReinJob);
        }
    }

    public class ReincarnationTemplateMode : TplMode
    {
        private IList<ReincarnationTemplate> mList = null;

        public ReincarnationTemplateMode(int step) : base("ReincarnationTemplate", typeof(ReincarnationTemplate), step) { }

        public ReincarnationTemplate this[int id]
        {
            get { return Find<ReincarnationTemplate>(id); }
        }

        public ReincarnationTemplate Find(int id)
        {
            return Find<ReincarnationTemplate>(id);
        }

        public IList<ReincarnationTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ReincarnationTemplate>();
            return mList;
        }
    }

public class ReincarnationAttrTemplate : Tpl
    {
        /// <summary>
        /// 装备位置（策划用）
        /// </summary>
        public string cehuayong;
        /// <summary>
        /// 属性组ID
        /// </summary>
        public int BaseType;
        /// <summary>
        /// 词条名称（策划用）
        /// </summary>
        public string Name;
        /// <summary>
        /// 属性枚举表id
        /// </summary>
        public int AttributesListID;
        /// <summary>
        /// 属性值
        /// </summary>
        public int AttrNumber;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weights;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            cehuayong = bytes.ReadUTF();
            BaseType = bytes.ReadInt();
            Name = bytes.ReadUTF();
            AttributesListID = bytes.ReadInt();
            AttrNumber = bytes.ReadInt();
            Weights = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(cehuayong);
            bytes.WriteInt(BaseType);
            bytes.WriteUTF(Name);
            bytes.WriteInt(AttributesListID);
            bytes.WriteInt(AttrNumber);
            bytes.WriteInt(Weights);
        }
    }

    public class ReincarnationAttrTemplateMode : TplMode
    {
        private IList<ReincarnationAttrTemplate> mList = null;

        public ReincarnationAttrTemplateMode(int step) : base("ReincarnationAttrTemplate", typeof(ReincarnationAttrTemplate), step) { }

        public ReincarnationAttrTemplate this[int id]
        {
            get { return Find<ReincarnationAttrTemplate>(id); }
        }

        public ReincarnationAttrTemplate Find(int id)
        {
            return Find<ReincarnationAttrTemplate>(id);
        }

        public IList<ReincarnationAttrTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ReincarnationAttrTemplate>();
            return mList;
        }
    }

public class ReincarnationFilterTemplate : Tpl
    {
        /// <summary>
        /// 枚举名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 筛选装备类型
        /// </summary>
        public string EquipType;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            EquipType = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(EquipType);
        }
    }

    public class ReincarnationFilterTemplateMode : TplMode
    {
        private IList<ReincarnationFilterTemplate> mList = null;

        public ReincarnationFilterTemplateMode(int step) : base("ReincarnationFilterTemplate", typeof(ReincarnationFilterTemplate), step) { }

        public ReincarnationFilterTemplate this[int id]
        {
            get { return Find<ReincarnationFilterTemplate>(id); }
        }

        public ReincarnationFilterTemplate Find(int id)
        {
            return Find<ReincarnationFilterTemplate>(id);
        }

        public IList<ReincarnationFilterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ReincarnationFilterTemplate>();
            return mList;
        }
    }

public class PracticeHouseTemplate : Tpl
    {
        /// <summary>
        /// 练功类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 等级区间
        /// </summary>
        public int Lv;
        /// <summary>
        /// 经验奖励（每3秒）
        /// </summary>
        public int Exp;
        /// <summary>
        /// 衰减系数（万分比）
        /// </summary>
        public int DeletePct;
        /// <summary>
        /// 地图ID
        /// </summary>
        public int MapID;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 消耗活跃点
        /// </summary>
        public int CostActivePoint;
        /// <summary>
        /// 奖励展示
        /// </summary>
        public string ShowAwards;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Lv = bytes.ReadInt();
            Exp = bytes.ReadInt();
            DeletePct = bytes.ReadInt();
            MapID = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            CostActivePoint = bytes.ReadInt();
            ShowAwards = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Lv);
            bytes.WriteInt(Exp);
            bytes.WriteInt(DeletePct);
            bytes.WriteInt(MapID);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(CostActivePoint);
            bytes.WriteUTF(ShowAwards);
        }
    }

    public class PracticeHouseTemplateMode : TplMode
    {
        private IList<PracticeHouseTemplate> mList = null;

        public PracticeHouseTemplateMode(int step) : base("PracticeHouseTemplate", typeof(PracticeHouseTemplate), step) { }

        public PracticeHouseTemplate this[int id]
        {
            get { return Find<PracticeHouseTemplate>(id); }
        }

        public PracticeHouseTemplate Find(int id)
        {
            return Find<PracticeHouseTemplate>(id);
        }

        public IList<PracticeHouseTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PracticeHouseTemplate>();
            return mList;
        }
    }

public class ComboSkillTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 是起手技能的填写技能ID,其他写0
        /// </summary>
        public int ComboGroupID;
        /// <summary>
        /// 连击技能对怪物伤害系数
        /// </summary>
        public int ComboSkillHitMonsterAddHurt;
        /// <summary>
        /// 连击技能对玩家伤害系数
        /// </summary>
        public int ComboSkillHitPlayerAddHurt;
        /// <summary>
        /// 被动buff
        /// </summary>
        public int AddBuffToSelf;
        /// <summary>
        /// 连击技能攻击范围描述
        /// </summary>
        public string FanweiTxt;
        /// <summary>
        /// 特殊效果描述文本
        /// </summary>
        public string TeshuTxt;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Career = bytes.ReadInt();
            ComboGroupID = bytes.ReadInt();
            ComboSkillHitMonsterAddHurt = bytes.ReadInt();
            ComboSkillHitPlayerAddHurt = bytes.ReadInt();
            AddBuffToSelf = bytes.ReadInt();
            FanweiTxt = bytes.ReadUTF();
            TeshuTxt = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Career);
            bytes.WriteInt(ComboGroupID);
            bytes.WriteInt(ComboSkillHitMonsterAddHurt);
            bytes.WriteInt(ComboSkillHitPlayerAddHurt);
            bytes.WriteInt(AddBuffToSelf);
            bytes.WriteUTF(FanweiTxt);
            bytes.WriteUTF(TeshuTxt);
        }
    }

    public class ComboSkillTemplateMode : TplMode
    {
        private IList<ComboSkillTemplate> mList = null;

        public ComboSkillTemplateMode(int step) : base("ComboSkillTemplate", typeof(ComboSkillTemplate), step) { }

        public ComboSkillTemplate this[int id]
        {
            get { return Find<ComboSkillTemplate>(id); }
        }

        public ComboSkillTemplate Find(int id)
        {
            return Find<ComboSkillTemplate>(id);
        }

        public IList<ComboSkillTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ComboSkillTemplate>();
            return mList;
        }
    }

public class FreeVipTemplate : Tpl
    {
        /// <summary>
        /// 会员名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 任务类型1
        /// </summary>
        public int TaskType1;
        /// <summary>
        /// 任务1参数1
        /// </summary>
        public string data1;
        /// <summary>
        /// 任务描述1
        /// </summary>
        public string detail1;
        /// <summary>
        /// 升级奖励道具
        /// </summary>
        public string MissionRewards;
        /// <summary>
        /// 购买消耗货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 消耗数量
        /// </summary>
        public int MoneyCost;
        /// <summary>
        /// 购买升级的奖励
        /// </summary>
        public string PremiumRewards;
        /// <summary>
        /// 每日奖励
        /// </summary>
        public string DailyRewards;
        /// <summary>
        /// 增益BUFFID
        /// </summary>
        public string BuffID;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 打怪爆率
        /// </summary>
        public int BossDiaoluo;
        /// <summary>
        /// 聚灵珠免费双倍领取
        /// </summary>
        public int ExpBallDoubleReceive;
        /// <summary>
        /// 开启随身回收
        /// </summary>
        public int CarryRecycle;
        /// <summary>
        /// 回收金币加成
        /// </summary>
        public int RecycleGoldRise;
        /// <summary>
        /// 开启自动回收
        /// </summary>
        public int AutoRecycle;
        /// <summary>
        /// 开启自动买药
        /// </summary>
        public int AutoBuyMedicine;
        /// <summary>
        /// 开启自动熔炼
        /// </summary>
        public int AutoMelting;
        /// <summary>
        /// 经验增幅
        /// </summary>
        public int ExperienceGain;
        /// <summary>
        /// 技能熟练度增幅
        /// </summary>
        public int SkillMastery;
        /// <summary>
        /// 开启自动使用高级技能
        /// </summary>
        public int AutoSkillUse;
        /// <summary>
        /// 开启自动使用元宝、经验
        /// </summary>
        public int AutoUse1;
        /// <summary>
        /// 开启自动使用材料
        /// </summary>
        public int AutoUse2;
        /// <summary>
        /// 开启自动合成
        /// </summary>
        public int AutoCompound;
        /// <summary>
        /// 开启随身仓库
        /// </summary>
        public int CarryWarehouse;
        /// <summary>
        /// BUFF概率增幅
        /// </summary>
        public string BuffRateAdd;
        /// <summary>
        /// 跳转用怪物组
        /// </summary>
        public int JumpMonsterGroup;
        /// <summary>
        /// 特权文本描述
        /// </summary>
        public string PrivilegeDisplay;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            TaskType1 = bytes.ReadInt();
            data1 = bytes.ReadUTF();
            detail1 = bytes.ReadUTF();
            MissionRewards = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            MoneyCost = bytes.ReadInt();
            PremiumRewards = bytes.ReadUTF();
            DailyRewards = bytes.ReadUTF();
            BuffID = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
            BossDiaoluo = bytes.ReadInt();
            ExpBallDoubleReceive = bytes.ReadInt();
            CarryRecycle = bytes.ReadInt();
            RecycleGoldRise = bytes.ReadInt();
            AutoRecycle = bytes.ReadInt();
            AutoBuyMedicine = bytes.ReadInt();
            AutoMelting = bytes.ReadInt();
            ExperienceGain = bytes.ReadInt();
            SkillMastery = bytes.ReadInt();
            AutoSkillUse = bytes.ReadInt();
            AutoUse1 = bytes.ReadInt();
            AutoUse2 = bytes.ReadInt();
            AutoCompound = bytes.ReadInt();
            CarryWarehouse = bytes.ReadInt();
            BuffRateAdd = bytes.ReadUTF();
            JumpMonsterGroup = bytes.ReadInt();
            PrivilegeDisplay = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(TaskType1);
            bytes.WriteUTF(data1);
            bytes.WriteUTF(detail1);
            bytes.WriteUTF(MissionRewards);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyCost);
            bytes.WriteUTF(PremiumRewards);
            bytes.WriteUTF(DailyRewards);
            bytes.WriteUTF(BuffID);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(BossDiaoluo);
            bytes.WriteInt(ExpBallDoubleReceive);
            bytes.WriteInt(CarryRecycle);
            bytes.WriteInt(RecycleGoldRise);
            bytes.WriteInt(AutoRecycle);
            bytes.WriteInt(AutoBuyMedicine);
            bytes.WriteInt(AutoMelting);
            bytes.WriteInt(ExperienceGain);
            bytes.WriteInt(SkillMastery);
            bytes.WriteInt(AutoSkillUse);
            bytes.WriteInt(AutoUse1);
            bytes.WriteInt(AutoUse2);
            bytes.WriteInt(AutoCompound);
            bytes.WriteInt(CarryWarehouse);
            bytes.WriteUTF(BuffRateAdd);
            bytes.WriteInt(JumpMonsterGroup);
            bytes.WriteUTF(PrivilegeDisplay);
        }
    }

    public class FreeVipTemplateMode : TplMode
    {
        private IList<FreeVipTemplate> mList = null;

        public FreeVipTemplateMode(int step) : base("FreeVipTemplate", typeof(FreeVipTemplate), step) { }

        public FreeVipTemplate this[int id]
        {
            get { return Find<FreeVipTemplate>(id); }
        }

        public FreeVipTemplate Find(int id)
        {
            return Find<FreeVipTemplate>(id);
        }

        public IList<FreeVipTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FreeVipTemplate>();
            return mList;
        }
    }

public class DailyPayTemplate : Tpl
    {
        /// <summary>
        /// 充值金额
        /// </summary>
        public int PayNum;
        /// <summary>
        /// 显示金额要求
        /// </summary>
        public int ShowNum;
        /// <summary>
        /// 第几天
        /// </summary>
        public int Day;
        /// <summary>
        /// 充值奖励物品
        /// </summary>
        public string AwardItem;
        /// <summary>
        /// 礼包价值
        /// </summary>
        public int ShowCost;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NotcieID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PayNum = bytes.ReadInt();
            ShowNum = bytes.ReadInt();
            Day = bytes.ReadInt();
            AwardItem = bytes.ReadUTF();
            ShowCost = bytes.ReadInt();
            IsBind = bytes.ReadInt();
            NotcieID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(PayNum);
            bytes.WriteInt(ShowNum);
            bytes.WriteInt(Day);
            bytes.WriteUTF(AwardItem);
            bytes.WriteInt(ShowCost);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(NotcieID);
        }
    }

    public class DailyPayTemplateMode : TplMode
    {
        private IList<DailyPayTemplate> mList = null;

        public DailyPayTemplateMode(int step) : base("DailyPayTemplate", typeof(DailyPayTemplate), step) { }

        public DailyPayTemplate this[int id]
        {
            get { return Find<DailyPayTemplate>(id); }
        }

        public DailyPayTemplate Find(int id)
        {
            return Find<DailyPayTemplate>(id);
        }

        public IList<DailyPayTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DailyPayTemplate>();
            return mList;
        }
    }

public class QuestionsExtraAwardTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int Statelvl;
        /// <summary>
        /// 奖励配置
        /// </summary>
        public string AwardsConf;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Statelvl = bytes.ReadInt();
            AwardsConf = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Statelvl);
            bytes.WriteUTF(AwardsConf);
        }
    }

    public class QuestionsExtraAwardTemplateMode : TplMode
    {
        private IList<QuestionsExtraAwardTemplate> mList = null;

        public QuestionsExtraAwardTemplateMode(int step) : base("QuestionsExtraAwardTemplate", typeof(QuestionsExtraAwardTemplate), step) { }

        public QuestionsExtraAwardTemplate this[int id]
        {
            get { return Find<QuestionsExtraAwardTemplate>(id); }
        }

        public QuestionsExtraAwardTemplate Find(int id)
        {
            return Find<QuestionsExtraAwardTemplate>(id);
        }

        public IList<QuestionsExtraAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<QuestionsExtraAwardTemplate>();
            return mList;
        }
    }

public class WorshipTemplate : Tpl
    {
        /// <summary>
        /// 是否可以一起膜拜（0不可以）
        /// </summary>
        public int IsCanTogether;
        /// <summary>
        /// 是否可以被打断（0不可以）
        /// </summary>
        public int IsCanBeStop;
        /// <summary>
        /// 膜拜时间(毫秒)
        /// </summary>
        public int Time;
        /// <summary>
        /// 冷却时间(毫秒)
        /// </summary>
        public int CDTime;
        /// <summary>
        /// 灰态的资源id
        /// </summary>
        public int GrayID;
        /// <summary>
        /// 采集技能
        /// </summary>
        public int AddSkill;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            IsCanTogether = bytes.ReadInt();
            IsCanBeStop = bytes.ReadInt();
            Time = bytes.ReadInt();
            CDTime = bytes.ReadInt();
            GrayID = bytes.ReadInt();
            AddSkill = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(IsCanTogether);
            bytes.WriteInt(IsCanBeStop);
            bytes.WriteInt(Time);
            bytes.WriteInt(CDTime);
            bytes.WriteInt(GrayID);
            bytes.WriteInt(AddSkill);
        }
    }

    public class WorshipTemplateMode : TplMode
    {
        private IList<WorshipTemplate> mList = null;

        public WorshipTemplateMode(int step) : base("WorshipTemplate", typeof(WorshipTemplate), step) { }

        public WorshipTemplate this[int id]
        {
            get { return Find<WorshipTemplate>(id); }
        }

        public WorshipTemplate Find(int id)
        {
            return Find<WorshipTemplate>(id);
        }

        public IList<WorshipTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WorshipTemplate>();
            return mList;
        }
    }

public class InscriptionStoneTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 子类型
        /// </summary>
        public int SubType;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 对应部位装备基础属性加成（万分比）
        /// </summary>
        public int BaseAttrAddPencent;
        /// <summary>
        /// 加成名
        /// </summary>
        public string AttrName;
        /// <summary>
        /// 升级货币消耗类型
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 升级消耗货币数量
        /// </summary>
        public int CostMoneyNum;
        /// <summary>
        /// 升级道具消耗
        /// </summary>
        public string CostItem;
        /// <summary>
        /// 下一级道具ID
        /// </summary>
        public int NextLevelID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            SubType = bytes.ReadInt();
            Level = bytes.ReadInt();
            BaseAttrAddPencent = bytes.ReadInt();
            AttrName = bytes.ReadUTF();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
            CostItem = bytes.ReadUTF();
            NextLevelID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(SubType);
            bytes.WriteInt(Level);
            bytes.WriteInt(BaseAttrAddPencent);
            bytes.WriteUTF(AttrName);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
            bytes.WriteUTF(CostItem);
            bytes.WriteInt(NextLevelID);
        }
    }

    public class InscriptionStoneTemplateMode : TplMode
    {
        private IList<InscriptionStoneTemplate> mList = null;

        public InscriptionStoneTemplateMode(int step) : base("InscriptionStoneTemplate", typeof(InscriptionStoneTemplate), step) { }

        public InscriptionStoneTemplate this[int id]
        {
            get { return Find<InscriptionStoneTemplate>(id); }
        }

        public InscriptionStoneTemplate Find(int id)
        {
            return Find<InscriptionStoneTemplate>(id);
        }

        public IList<InscriptionStoneTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<InscriptionStoneTemplate>();
            return mList;
        }
    }

public class MoQiTemplate : Tpl
    {
        /// <summary>
        /// 职业判定
        /// </summary>
        public int Job;
        /// <summary>
        /// 需求点数
        /// </summary>
        public int Point;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 连击增伤
        /// </summary>
        public int ComboAddHurt;
        /// <summary>
        /// 连击免伤
        /// </summary>
        public int ComboReduceHurt;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Point = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            ComboAddHurt = bytes.ReadInt();
            ComboReduceHurt = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Point);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(ComboAddHurt);
            bytes.WriteInt(ComboReduceHurt);
            bytes.WriteInt(NoticeID);
        }
    }

    public class MoQiTemplateMode : TplMode
    {
        private IList<MoQiTemplate> mList = null;

        public MoQiTemplateMode(int step) : base("MoQiTemplate", typeof(MoQiTemplate), step) { }

        public MoQiTemplate this[int id]
        {
            get { return Find<MoQiTemplate>(id); }
        }

        public MoQiTemplate Find(int id)
        {
            return Find<MoQiTemplate>(id);
        }

        public IList<MoQiTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MoQiTemplate>();
            return mList;
        }
    }

public class MagicEquipRandAttrTemplate : Tpl
    {
        /// <summary>
        /// 最大属性条目
        /// </summary>
        public int MaxAttrNum;
        /// <summary>
        /// 洗炼消耗
        /// </summary>
        public int BaptizeCost;
        /// <summary>
        /// 继承消耗元宝
        /// </summary>
        public int InheritCost;
        /// <summary>
        /// 洗炼增加属性概率
        /// </summary>
        public int AddAttrNumProbability;
        /// <summary>
        /// 属性类型|最大值,属性类型|最大值
        /// </summary>
        public string Attributes;
        /// <summary>
        /// 回收魔器精华
        /// </summary>
        public int BackMagic;
        /// <summary>
        /// 回收强化系数
        /// </summary>
        public int BackMagicAdd;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MaxAttrNum = bytes.ReadInt();
            BaptizeCost = bytes.ReadInt();
            InheritCost = bytes.ReadInt();
            AddAttrNumProbability = bytes.ReadInt();
            Attributes = bytes.ReadUTF();
            BackMagic = bytes.ReadInt();
            BackMagicAdd = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MaxAttrNum);
            bytes.WriteInt(BaptizeCost);
            bytes.WriteInt(InheritCost);
            bytes.WriteInt(AddAttrNumProbability);
            bytes.WriteUTF(Attributes);
            bytes.WriteInt(BackMagic);
            bytes.WriteInt(BackMagicAdd);
        }
    }

    public class MagicEquipRandAttrTemplateMode : TplMode
    {
        private IList<MagicEquipRandAttrTemplate> mList = null;

        public MagicEquipRandAttrTemplateMode(int step) : base("MagicEquipRandAttrTemplate", typeof(MagicEquipRandAttrTemplate), step) { }

        public MagicEquipRandAttrTemplate this[int id]
        {
            get { return Find<MagicEquipRandAttrTemplate>(id); }
        }

        public MagicEquipRandAttrTemplate Find(int id)
        {
            return Find<MagicEquipRandAttrTemplate>(id);
        }

        public IList<MagicEquipRandAttrTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MagicEquipRandAttrTemplate>();
            return mList;
        }
    }

public class MagicCircleTemplate : Tpl
    {
        /// <summary>
        /// 进入需要等级
        /// </summary>
        public int EnterLv;
        /// <summary>
        /// 进入需要境界等级
        /// </summary>
        public int EnterStateLv;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonsterID;
        /// <summary>
        /// 前端文本
        /// </summary>
        public string Text;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EnterLv = bytes.ReadInt();
            EnterStateLv = bytes.ReadInt();
            MonsterID = bytes.ReadInt();
            Text = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EnterLv);
            bytes.WriteInt(EnterStateLv);
            bytes.WriteInt(MonsterID);
            bytes.WriteUTF(Text);
        }
    }

    public class MagicCircleTemplateMode : TplMode
    {
        private IList<MagicCircleTemplate> mList = null;

        public MagicCircleTemplateMode(int step) : base("MagicCircleTemplate", typeof(MagicCircleTemplate), step) { }

        public MagicCircleTemplate this[int id]
        {
            get { return Find<MagicCircleTemplate>(id); }
        }

        public MagicCircleTemplate Find(int id)
        {
            return Find<MagicCircleTemplate>(id);
        }

        public IList<MagicCircleTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MagicCircleTemplate>();
            return mList;
        }
    }

public class MoShaTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 资源ID
        /// </summary>
        public int Icon;
        /// <summary>
        /// 特效ID
        /// </summary>
        public int EffectID;
        /// <summary>
        /// 星级
        /// </summary>
        public int Stars;
        /// <summary>
        /// 物品品质
        /// </summary>
        public int Quality;
        /// <summary>
        /// 兑换所需心魔等阶
        /// </summary>
        public int DemoLv;
        /// <summary>
        /// 兑换所需煞气值
        /// </summary>
        public int ShaQiDemand;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK减免
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 持续时间
        /// </summary>
        public int Time;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Icon = bytes.ReadInt();
            EffectID = bytes.ReadInt();
            Stars = bytes.ReadInt();
            Quality = bytes.ReadInt();
            DemoLv = bytes.ReadInt();
            ShaQiDemand = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            Time = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Icon);
            bytes.WriteInt(EffectID);
            bytes.WriteInt(Stars);
            bytes.WriteInt(Quality);
            bytes.WriteInt(DemoLv);
            bytes.WriteInt(ShaQiDemand);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(Time);
        }
    }

    public class MoShaTemplateMode : TplMode
    {
        private IList<MoShaTemplate> mList = null;

        public MoShaTemplateMode(int step) : base("MoShaTemplate", typeof(MoShaTemplate), step) { }

        public MoShaTemplate this[int id]
        {
            get { return Find<MoShaTemplate>(id); }
        }

        public MoShaTemplate Find(int id)
        {
            return Find<MoShaTemplate>(id);
        }

        public IList<MoShaTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MoShaTemplate>();
            return mList;
        }
    }

public class DSattrtemplate : Tpl
    {
        /// <summary>
        /// 策划用
        /// </summary>
        public string Name;
        /// <summary>
        /// 下一级id
        /// </summary>
        public int NextLVID;
        /// <summary>
        /// 合成后是否可交易(0可以1不可以）
        /// </summary>
        public int Synthesis;
        /// <summary>
        /// 升级消耗耐久下限
        /// </summary>
        public int DurabilityMin;
        /// <summary>
        /// 升级消耗耐久上限
        /// </summary>
        public int DurabilityMax;
        /// <summary>
        /// 消耗/获得材料id
        /// </summary>
        public int CostID;
        /// <summary>
        /// 升级消耗材料数量
        /// </summary>
        public int CostNumber;
        /// <summary>
        /// 分解获得材料数量
        /// (没意义，分解在合成分解表配置)
        /// </summary>
        public int ResolveNumber;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            NextLVID = bytes.ReadInt();
            Synthesis = bytes.ReadInt();
            DurabilityMin = bytes.ReadInt();
            DurabilityMax = bytes.ReadInt();
            CostID = bytes.ReadInt();
            CostNumber = bytes.ReadInt();
            ResolveNumber = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(NextLVID);
            bytes.WriteInt(Synthesis);
            bytes.WriteInt(DurabilityMin);
            bytes.WriteInt(DurabilityMax);
            bytes.WriteInt(CostID);
            bytes.WriteInt(CostNumber);
            bytes.WriteInt(ResolveNumber);
        }
    }

    public class DSattrtemplateMode : TplMode
    {
        private IList<DSattrtemplate> mList = null;

        public DSattrtemplateMode(int step) : base("DSattrtemplate", typeof(DSattrtemplate), step) { }

        public DSattrtemplate this[int id]
        {
            get { return Find<DSattrtemplate>(id); }
        }

        public DSattrtemplate Find(int id)
        {
            return Find<DSattrtemplate>(id);
        }

        public IList<DSattrtemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DSattrtemplate>();
            return mList;
        }
    }

public class DSRechargetemplate : Tpl
    {
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int Cost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Cost = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Cost);
        }
    }

    public class DSRechargetemplateMode : TplMode
    {
        private IList<DSRechargetemplate> mList = null;

        public DSRechargetemplateMode(int step) : base("DSRechargetemplate", typeof(DSRechargetemplate), step) { }

        public DSRechargetemplate this[int id]
        {
            get { return Find<DSRechargetemplate>(id); }
        }

        public DSRechargetemplate Find(int id)
        {
            return Find<DSRechargetemplate>(id);
        }

        public IList<DSRechargetemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DSRechargetemplate>();
            return mList;
        }
    }

public class Fillingtemplate : Tpl
    {
        /// <summary>
        /// 进度条属性
        /// </summary>
        public string Name;
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 进度条等级
        /// </summary>
        public int LV;
        /// <summary>
        /// 升级转生等级
        /// </summary>
        public int JJLV;
        /// <summary>
        /// 属性类型
        /// </summary>
        public int AttrType;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int Money;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int CostMoney;
        /// <summary>
        /// 材料id
        /// </summary>
        public int Item;
        /// <summary>
        /// 消耗材料
        /// </summary>
        public int CostItem;
        /// <summary>
        /// 属性随机增加下限
        /// </summary>
        public int AublimationMin;
        /// <summary>
        /// 属性随机增加上限
        /// </summary>
        public int SublimationMax;
        /// <summary>
        /// 页签开启（穿戴7件该等级的魔魂
        /// </summary>
        public int DSLottery;
        /// <summary>
        /// 激活页面
        /// </summary>
        public int DSLively;
        /// <summary>
        /// 属性上限
        /// </summary>
        public int DSMax;
        /// <summary>
        /// 充盈属性
        /// </summary>
        public string DSAttr;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Job = bytes.ReadInt();
            LV = bytes.ReadInt();
            JJLV = bytes.ReadInt();
            AttrType = bytes.ReadInt();
            Money = bytes.ReadInt();
            CostMoney = bytes.ReadInt();
            Item = bytes.ReadInt();
            CostItem = bytes.ReadInt();
            AublimationMin = bytes.ReadInt();
            SublimationMax = bytes.ReadInt();
            DSLottery = bytes.ReadInt();
            DSLively = bytes.ReadInt();
            DSMax = bytes.ReadInt();
            DSAttr = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Job);
            bytes.WriteInt(LV);
            bytes.WriteInt(JJLV);
            bytes.WriteInt(AttrType);
            bytes.WriteInt(Money);
            bytes.WriteInt(CostMoney);
            bytes.WriteInt(Item);
            bytes.WriteInt(CostItem);
            bytes.WriteInt(AublimationMin);
            bytes.WriteInt(SublimationMax);
            bytes.WriteInt(DSLottery);
            bytes.WriteInt(DSLively);
            bytes.WriteInt(DSMax);
            bytes.WriteUTF(DSAttr);
        }
    }

    public class FillingtemplateMode : TplMode
    {
        private IList<Fillingtemplate> mList = null;

        public FillingtemplateMode(int step) : base("Fillingtemplate", typeof(Fillingtemplate), step) { }

        public Fillingtemplate this[int id]
        {
            get { return Find<Fillingtemplate>(id); }
        }

        public Fillingtemplate Find(int id)
        {
            return Find<Fillingtemplate>(id);
        }

        public IList<Fillingtemplate> FindAll()
        {
            if (mList == null) mList = FindAll<Fillingtemplate>();
            return mList;
        }
    }

public class TransferTemplate : Tpl
    {
        /// <summary>
        /// 地图范围类型
        /// </summary>
        public int RangeType;
        /// <summary>
        /// 传送类型
        /// </summary>
        public int TransferType;
        /// <summary>
        /// 地图id
        /// </summary>
        public int MapID;
        /// <summary>
        /// npcid
        /// </summary>
        public int NpcID;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            RangeType = bytes.ReadInt();
            TransferType = bytes.ReadInt();
            MapID = bytes.ReadInt();
            NpcID = bytes.ReadInt();
            Name = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(RangeType);
            bytes.WriteInt(TransferType);
            bytes.WriteInt(MapID);
            bytes.WriteInt(NpcID);
            bytes.WriteUTF(Name);
        }
    }

    public class TransferTemplateMode : TplMode
    {
        private IList<TransferTemplate> mList = null;

        public TransferTemplateMode(int step) : base("TransferTemplate", typeof(TransferTemplate), step) { }

        public TransferTemplate this[int id]
        {
            get { return Find<TransferTemplate>(id); }
        }

        public TransferTemplate Find(int id)
        {
            return Find<TransferTemplate>(id);
        }

        public IList<TransferTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TransferTemplate>();
            return mList;
        }
    }

public class NPCShopTemplate : Tpl
    {
        /// <summary>
        /// 商店类型（3位数以内是普通商店，4位数以上是神秘商店）
        /// </summary>
        public int ShopType;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 商店名
        /// </summary>
        public string ShopName;
        /// <summary>
        /// 货币类型(1元宝，2绑定元宝，3绑定金币或者金币，4金币）
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 限购个数(-1为不限个数）
        /// </summary>
        public int LimitedNumb;
        /// <summary>
        /// 万分比
        /// </summary>
        public int Property;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ShopType = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            ShopName = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            LimitedNumb = bytes.ReadInt();
            Property = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ShopType);
            bytes.WriteInt(GoodsID);
            bytes.WriteUTF(ShopName);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(LimitedNumb);
            bytes.WriteInt(Property);
        }
    }

    public class NPCShopTemplateMode : TplMode
    {
        private IList<NPCShopTemplate> mList = null;

        public NPCShopTemplateMode(int step) : base("NPCShopTemplate", typeof(NPCShopTemplate), step) { }

        public NPCShopTemplate this[int id]
        {
            get { return Find<NPCShopTemplate>(id); }
        }

        public NPCShopTemplate Find(int id)
        {
            return Find<NPCShopTemplate>(id);
        }

        public IList<NPCShopTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NPCShopTemplate>();
            return mList;
        }
    }

public class NPCTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string NPCName;
        /// <summary>
        /// 美术资源
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 头顶美术字资源ID(TID为NPC头顶美术字，没有为0)
        /// </summary>
        public int TitleID;
        /// <summary>
        /// NPC特效（对准NPC中心点）
        /// </summary>
        public int NpcEffect;
        /// <summary>
        /// 备注
        /// </summary>
        public string Beizhu;
        /// <summary>
        /// 功能类型
        /// </summary>
        public int FuntionType;
        /// <summary>
        /// 面板title（类型为2和4的才有用）
        /// </summary>
        public int PanelTitle;
        /// <summary>
        /// 功能名称
        /// </summary>
        public string FunctionName;
        /// <summary>
        /// 打开功能面板
        /// </summary>
        public int OpenPanel;
        /// <summary>
        /// 商店ID
        /// </summary>
        public int ShopID;
        /// <summary>
        /// NPC名字高度
        /// </summary>
        public int NameHeight;
        /// <summary>
        /// 小地图显示
        /// </summary>
        public int Display;
        /// <summary>
        /// 名称显示类型
        /// </summary>
        public int DisplayType;
        /// <summary>
        /// 小地图npc列表是否显示传送
        /// </summary>
        public int DisplayTransfer;
        /// <summary>
        /// 小地图显示名字
        /// </summary>
        public string DisplayName;
        /// <summary>
        /// 面板奖励道具
        /// </summary>
        public string ItemShow;
        /// <summary>
        /// 面板上方描述
        /// </summary>
        public string EntranceDes;
        /// <summary>
        /// 面板中间说明
        /// </summary>
        public string NPCInstruction;
        /// <summary>
        /// 面板按钮名称
        /// </summary>
        public string EnterName;
        /// <summary>
        /// 传送地图id
        /// </summary>
        public int TransMapID;
        /// <summary>
        /// NPC所在地图id
        /// </summary>
        public int TaskMapID;
        /// <summary>
        /// 任务地图X点
        /// </summary>
        public int TaskMapX;
        /// <summary>
        /// 任务地图Y点
        /// </summary>
        public int TaskMapY;
        /// <summary>
        /// 传送到npc附近坐标X1
        /// </summary>
        public int TaskMapX1;
        /// <summary>
        /// 传送到npc附近坐标Y1
        /// </summary>
        public int TaskMapY1;
        /// <summary>
        /// 传送到npc附近坐标X2
        /// </summary>
        public int TaskMapX2;
        /// <summary>
        /// 传送到npc附近坐标Y2
        /// </summary>
        public int TaskMapY2;
        /// <summary>
        /// 传送到npc附近坐标X3
        /// </summary>
        public int TaskMapX3;
        /// <summary>
        /// 传送到npc附近坐标Y3
        /// </summary>
        public int TaskMapY3;
        /// <summary>
        /// 闲谈
        /// </summary>
        public string Talk;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NPCName = bytes.ReadUTF();
            AssetID = bytes.ReadInt();
            TitleID = bytes.ReadInt();
            NpcEffect = bytes.ReadInt();
            Beizhu = bytes.ReadUTF();
            FuntionType = bytes.ReadInt();
            PanelTitle = bytes.ReadInt();
            FunctionName = bytes.ReadUTF();
            OpenPanel = bytes.ReadInt();
            ShopID = bytes.ReadInt();
            NameHeight = bytes.ReadInt();
            Display = bytes.ReadInt();
            DisplayType = bytes.ReadInt();
            DisplayTransfer = bytes.ReadInt();
            DisplayName = bytes.ReadUTF();
            ItemShow = bytes.ReadUTF();
            EntranceDes = bytes.ReadUTF();
            NPCInstruction = bytes.ReadUTF();
            EnterName = bytes.ReadUTF();
            TransMapID = bytes.ReadInt();
            TaskMapID = bytes.ReadInt();
            TaskMapX = bytes.ReadInt();
            TaskMapY = bytes.ReadInt();
            TaskMapX1 = bytes.ReadInt();
            TaskMapY1 = bytes.ReadInt();
            TaskMapX2 = bytes.ReadInt();
            TaskMapY2 = bytes.ReadInt();
            TaskMapX3 = bytes.ReadInt();
            TaskMapY3 = bytes.ReadInt();
            Talk = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(NPCName);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(TitleID);
            bytes.WriteInt(NpcEffect);
            bytes.WriteUTF(Beizhu);
            bytes.WriteInt(FuntionType);
            bytes.WriteInt(PanelTitle);
            bytes.WriteUTF(FunctionName);
            bytes.WriteInt(OpenPanel);
            bytes.WriteInt(ShopID);
            bytes.WriteInt(NameHeight);
            bytes.WriteInt(Display);
            bytes.WriteInt(DisplayType);
            bytes.WriteInt(DisplayTransfer);
            bytes.WriteUTF(DisplayName);
            bytes.WriteUTF(ItemShow);
            bytes.WriteUTF(EntranceDes);
            bytes.WriteUTF(NPCInstruction);
            bytes.WriteUTF(EnterName);
            bytes.WriteInt(TransMapID);
            bytes.WriteInt(TaskMapID);
            bytes.WriteInt(TaskMapX);
            bytes.WriteInt(TaskMapY);
            bytes.WriteInt(TaskMapX1);
            bytes.WriteInt(TaskMapY1);
            bytes.WriteInt(TaskMapX2);
            bytes.WriteInt(TaskMapY2);
            bytes.WriteInt(TaskMapX3);
            bytes.WriteInt(TaskMapY3);
            bytes.WriteUTF(Talk);
        }
    }

    public class NPCTemplateMode : TplMode
    {
        private IList<NPCTemplate> mList = null;

        public NPCTemplateMode(int step) : base("NPCTemplate", typeof(NPCTemplate), step) { }

        public NPCTemplate this[int id]
        {
            get { return Find<NPCTemplate>(id); }
        }

        public NPCTemplate Find(int id)
        {
            return Find<NPCTemplate>(id);
        }

        public IList<NPCTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NPCTemplate>();
            return mList;
        }
    }

public class InterTemplate : Tpl
    {
        /// <summary>
        /// 等级名
        /// </summary>
        public string LvName;
        /// <summary>
        /// 阶
        /// </summary>
        public int Level;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 描述
        /// </summary>
        public string Detail;
        /// <summary>
        /// 展示icon
        /// </summary>
        public int ShowIcon;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 内功
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 魔攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 魔攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 需求内功经验
        /// </summary>
        public int EnergyExp;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int CostGoldType;
        /// <summary>
        /// 货币消耗数量
        /// </summary>
        public int CostGold;
        /// <summary>
        /// 触发几率
        /// (万分比）（作废）
        /// </summary>
        public int ActRate;
        /// <summary>
        /// 有效CD
        /// （毫秒）
        /// （作废）
        /// </summary>
        public int ActCD;
        /// <summary>
        /// 有效次数
        /// （作废）
        /// </summary>
        public int ActTimes;
        /// <summary>
        /// 减伤比
        /// </summary>
        public int DamageDown;
        /// <summary>
        /// 内功回复万分比（3秒1次）
        /// </summary>
        public int EnergyBack;
        /// <summary>
        /// 3秒内功回复值
        /// </summary>
        public int EnergyBack_Num;
        /// <summary>
        /// 内功重新获得CD时间
        /// （毫秒）
        /// （作废）
        /// </summary>
        public int EnergyBackCD;
        /// <summary>
        /// 内功重新获得回复比例
        /// （万分比）
        /// （作废）
        /// </summary>
        public int EnergyBackAfterSeconds;
        /// <summary>
        /// 战斗力显示值
        /// </summary>
        public int Sword;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;
        /// <summary>
        /// 装备id1
        /// </summary>
        public int EquipID1;
        /// <summary>
        /// 装备id2
        /// </summary>
        public int EquipID2;
        /// <summary>
        /// 装备id3
        /// </summary>
        public int EquipID3;
        /// <summary>
        /// 装备id4
        /// </summary>
        public int EquipID4;
        /// <summary>
        /// 开启装备栏
        /// </summary>
        public string OpenEquip;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LvName = bytes.ReadUTF();
            Level = bytes.ReadInt();
            Career = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Detail = bytes.ReadUTF();
            ShowIcon = bytes.ReadInt();
            HP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            EnergyExp = bytes.ReadInt();
            CostGoldType = bytes.ReadInt();
            CostGold = bytes.ReadInt();
            ActRate = bytes.ReadInt();
            ActCD = bytes.ReadInt();
            ActTimes = bytes.ReadInt();
            DamageDown = bytes.ReadInt();
            EnergyBack = bytes.ReadInt();
            EnergyBack_Num = bytes.ReadInt();
            EnergyBackCD = bytes.ReadInt();
            EnergyBackAfterSeconds = bytes.ReadInt();
            Sword = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
            EquipID1 = bytes.ReadInt();
            EquipID2 = bytes.ReadInt();
            EquipID3 = bytes.ReadInt();
            EquipID4 = bytes.ReadInt();
            OpenEquip = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(LvName);
            bytes.WriteInt(Level);
            bytes.WriteInt(Career);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Detail);
            bytes.WriteInt(ShowIcon);
            bytes.WriteInt(HP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(EnergyExp);
            bytes.WriteInt(CostGoldType);
            bytes.WriteInt(CostGold);
            bytes.WriteInt(ActRate);
            bytes.WriteInt(ActCD);
            bytes.WriteInt(ActTimes);
            bytes.WriteInt(DamageDown);
            bytes.WriteInt(EnergyBack);
            bytes.WriteInt(EnergyBack_Num);
            bytes.WriteInt(EnergyBackCD);
            bytes.WriteInt(EnergyBackAfterSeconds);
            bytes.WriteInt(Sword);
            bytes.WriteInt(NoticeID);
            bytes.WriteInt(EquipID1);
            bytes.WriteInt(EquipID2);
            bytes.WriteInt(EquipID3);
            bytes.WriteInt(EquipID4);
            bytes.WriteUTF(OpenEquip);
        }
    }

    public class InterTemplateMode : TplMode
    {
        private IList<InterTemplate> mList = null;

        public InterTemplateMode(int step) : base("InterTemplate", typeof(InterTemplate), step) { }

        public InterTemplate this[int id]
        {
            get { return Find<InterTemplate>(id); }
        }

        public InterTemplate Find(int id)
        {
            return Find<InterTemplate>(id);
        }

        public IList<InterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<InterTemplate>();
            return mList;
        }
    }

public class WuxingRandomTemplate : Tpl
    {
        /// <summary>
        /// 内甲等级
        /// </summary>
        public int LV;
        /// <summary>
        /// 无五行属性
        /// 获得普通五行概率
        /// </summary>
        public int GetWuxing1;
        /// <summary>
        /// 无五行属性
        /// 获得真五行概率
        /// </summary>
        public int GetWuxing2;
        /// <summary>
        /// 普通五行
        /// 装备进阶
        /// 变化概率
        /// </summary>
        public int WuxingChange1;
        /// <summary>
        /// 普通五行
        /// 装备进阶
        /// 五行升级概率
        /// </summary>
        public int WuxingUpRate;
        /// <summary>
        /// 基础五行随机
        /// </summary>
        public int Weight1;
        /// <summary>
        /// 真五行
        /// 装备进阶
        /// 变化概率
        /// </summary>
        public int WuxingChange2;
        /// <summary>
        /// 真五行随机
        /// </summary>
        public int Weight2;
        /// <summary>
        /// 洗练道具id
        /// </summary>
        public int XilianNeed;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int XilianNumber;
        /// <summary>
        /// 普通五行洗练
        /// 出真五行概率
        /// </summary>
        public int WuxingLV2;
        /// <summary>
        /// 出真五行
        /// 保底次数
        /// </summary>
        public int MaxTime1;
        /// <summary>
        /// 真五行洗练
        /// 出大五行概率
        /// </summary>
        public int WuxingLV3;
        /// <summary>
        /// 出大五行
        /// 保底次数
        /// </summary>
        public int MaxTime2;
        /// <summary>
        /// 大五行随机
        /// </summary>
        public int Weight3;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LV = bytes.ReadInt();
            GetWuxing1 = bytes.ReadInt();
            GetWuxing2 = bytes.ReadInt();
            WuxingChange1 = bytes.ReadInt();
            WuxingUpRate = bytes.ReadInt();
            Weight1 = bytes.ReadInt();
            WuxingChange2 = bytes.ReadInt();
            Weight2 = bytes.ReadInt();
            XilianNeed = bytes.ReadInt();
            XilianNumber = bytes.ReadInt();
            WuxingLV2 = bytes.ReadInt();
            MaxTime1 = bytes.ReadInt();
            WuxingLV3 = bytes.ReadInt();
            MaxTime2 = bytes.ReadInt();
            Weight3 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(LV);
            bytes.WriteInt(GetWuxing1);
            bytes.WriteInt(GetWuxing2);
            bytes.WriteInt(WuxingChange1);
            bytes.WriteInt(WuxingUpRate);
            bytes.WriteInt(Weight1);
            bytes.WriteInt(WuxingChange2);
            bytes.WriteInt(Weight2);
            bytes.WriteInt(XilianNeed);
            bytes.WriteInt(XilianNumber);
            bytes.WriteInt(WuxingLV2);
            bytes.WriteInt(MaxTime1);
            bytes.WriteInt(WuxingLV3);
            bytes.WriteInt(MaxTime2);
            bytes.WriteInt(Weight3);
        }
    }

    public class WuxingRandomTemplateMode : TplMode
    {
        private IList<WuxingRandomTemplate> mList = null;

        public WuxingRandomTemplateMode(int step) : base("WuxingRandomTemplate", typeof(WuxingRandomTemplate), step) { }

        public WuxingRandomTemplate this[int id]
        {
            get { return Find<WuxingRandomTemplate>(id); }
        }

        public WuxingRandomTemplate Find(int id)
        {
            return Find<WuxingRandomTemplate>(id);
        }

        public IList<WuxingRandomTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WuxingRandomTemplate>();
            return mList;
        }
    }

public class InnerEquipTemplate : Tpl
    {
        /// <summary>
        /// 目标id
        /// </summary>
        public int EquipID;
        /// <summary>
        /// 消耗道具id
        /// </summary>
        public int NeedItemID;
        /// <summary>
        /// 消耗数量
        /// </summary>
        public int NeedNumber;
        /// <summary>
        /// 材料装备id
        /// </summary>
        public int NeedEquip;
        /// <summary>
        /// 锁定消耗货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int Cost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EquipID = bytes.ReadInt();
            NeedItemID = bytes.ReadInt();
            NeedNumber = bytes.ReadInt();
            NeedEquip = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            Cost = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EquipID);
            bytes.WriteInt(NeedItemID);
            bytes.WriteInt(NeedNumber);
            bytes.WriteInt(NeedEquip);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(Cost);
        }
    }

    public class InnerEquipTemplateMode : TplMode
    {
        private IList<InnerEquipTemplate> mList = null;

        public InnerEquipTemplateMode(int step) : base("InnerEquipTemplate", typeof(InnerEquipTemplate), step) { }

        public InnerEquipTemplate this[int id]
        {
            get { return Find<InnerEquipTemplate>(id); }
        }

        public InnerEquipTemplate Find(int id)
        {
            return Find<InnerEquipTemplate>(id);
        }

        public IList<InnerEquipTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<InnerEquipTemplate>();
            return mList;
        }
    }

public class WuxingGroupTemplate : Tpl
    {
        /// <summary>
        /// 五行名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 五行类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 数量要求
        /// </summary>
        public int PieceRequest;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 暴击值
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴伤
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// 连击伤害减免
        /// </summary>
        public int ReduceComboSkillHurt;
        /// <summary>
        /// 对怪物暴击力
        /// </summary>
        public int MonsterCritForce;
        /// <summary>
        /// 对BOSS暴击
        /// </summary>
        public int BossCritRate;
        /// <summary>
        /// 对BOSS暴击力
        /// </summary>
        public int BossCritForce;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            PieceRequest = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReduceComboSkillHurt = bytes.ReadInt();
            MonsterCritForce = bytes.ReadInt();
            BossCritRate = bytes.ReadInt();
            BossCritForce = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(PieceRequest);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReduceComboSkillHurt);
            bytes.WriteInt(MonsterCritForce);
            bytes.WriteInt(BossCritRate);
            bytes.WriteInt(BossCritForce);
        }
    }

    public class WuxingGroupTemplateMode : TplMode
    {
        private IList<WuxingGroupTemplate> mList = null;

        public WuxingGroupTemplateMode(int step) : base("WuxingGroupTemplate", typeof(WuxingGroupTemplate), step) { }

        public WuxingGroupTemplate this[int id]
        {
            get { return Find<WuxingGroupTemplate>(id); }
        }

        public WuxingGroupTemplate Find(int id)
        {
            return Find<WuxingGroupTemplate>(id);
        }

        public IList<WuxingGroupTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WuxingGroupTemplate>();
            return mList;
        }
    }

public class WuxingWeightsTemplate : Tpl
    {
        /// <summary>
        /// 概率组描述
        /// </summary>
        public string Detail;
        /// <summary>
        /// 金
        /// </summary>
        public int Weights1;
        /// <summary>
        /// 木
        /// </summary>
        public int Weights2;
        /// <summary>
        /// 水
        /// </summary>
        public int Weights3;
        /// <summary>
        /// 火
        /// </summary>
        public int Weights4;
        /// <summary>
        /// 土
        /// </summary>
        public int Weights5;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Detail = bytes.ReadUTF();
            Weights1 = bytes.ReadInt();
            Weights2 = bytes.ReadInt();
            Weights3 = bytes.ReadInt();
            Weights4 = bytes.ReadInt();
            Weights5 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Detail);
            bytes.WriteInt(Weights1);
            bytes.WriteInt(Weights2);
            bytes.WriteInt(Weights3);
            bytes.WriteInt(Weights4);
            bytes.WriteInt(Weights5);
        }
    }

    public class WuxingWeightsTemplateMode : TplMode
    {
        private IList<WuxingWeightsTemplate> mList = null;

        public WuxingWeightsTemplateMode(int step) : base("WuxingWeightsTemplate", typeof(WuxingWeightsTemplate), step) { }

        public WuxingWeightsTemplate this[int id]
        {
            get { return Find<WuxingWeightsTemplate>(id); }
        }

        public WuxingWeightsTemplate Find(int id)
        {
            return Find<WuxingWeightsTemplate>(id);
        }

        public IList<WuxingWeightsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WuxingWeightsTemplate>();
            return mList;
        }
    }

public class PlatFormVIPTemplate : Tpl
    {
        /// <summary>
        /// 平台名
        /// </summary>
        public string Name;
        /// <summary>
        /// VIP等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 新手礼包
        /// </summary>
        public string FirstGift;
        /// <summary>
        /// 每日礼包
        /// </summary>
        public string DailyGift;
        /// <summary>
        /// 豪华蓝钻每日额外礼包
        /// </summary>
        public string DailyGift2;
        /// <summary>
        /// 年费蓝钻每日额外礼包
        /// </summary>
        public string DailyGift3;
        /// <summary>
        /// 等级礼包
        /// </summary>
        public string LVGift;
        /// <summary>
        /// 购买元宝折扣
        /// </summary>
        public int Count;
        /// <summary>
        /// 专属展示
        /// </summary>
        public int ExclusiveShow;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Lv = bytes.ReadInt();
            Type = bytes.ReadInt();
            FirstGift = bytes.ReadUTF();
            DailyGift = bytes.ReadUTF();
            DailyGift2 = bytes.ReadUTF();
            DailyGift3 = bytes.ReadUTF();
            LVGift = bytes.ReadUTF();
            Count = bytes.ReadInt();
            ExclusiveShow = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Lv);
            bytes.WriteInt(Type);
            bytes.WriteUTF(FirstGift);
            bytes.WriteUTF(DailyGift);
            bytes.WriteUTF(DailyGift2);
            bytes.WriteUTF(DailyGift3);
            bytes.WriteUTF(LVGift);
            bytes.WriteInt(Count);
            bytes.WriteInt(ExclusiveShow);
        }
    }

    public class PlatFormVIPTemplateMode : TplMode
    {
        private IList<PlatFormVIPTemplate> mList = null;

        public PlatFormVIPTemplateMode(int step) : base("PlatFormVIPTemplate", typeof(PlatFormVIPTemplate), step) { }

        public PlatFormVIPTemplate this[int id]
        {
            get { return Find<PlatFormVIPTemplate>(id); }
        }

        public PlatFormVIPTemplate Find(int id)
        {
            return Find<PlatFormVIPTemplate>(id);
        }

        public IList<PlatFormVIPTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PlatFormVIPTemplate>();
            return mList;
        }
    }

public class PlatformRechargeTemplate : Tpl
    {
        /// <summary>
        /// Q点购买价格
        /// </summary>
        public int Cost;
        /// <summary>
        /// 蓝钻会员消耗
        /// </summary>
        public int VIPCost;
        /// <summary>
        /// 获得元宝数量
        /// </summary>
        public int Ingots;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Cost = bytes.ReadInt();
            VIPCost = bytes.ReadInt();
            Ingots = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Cost);
            bytes.WriteInt(VIPCost);
            bytes.WriteInt(Ingots);
        }
    }

    public class PlatformRechargeTemplateMode : TplMode
    {
        private IList<PlatformRechargeTemplate> mList = null;

        public PlatformRechargeTemplateMode(int step) : base("PlatformRechargeTemplate", typeof(PlatformRechargeTemplate), step) { }

        public PlatformRechargeTemplate this[int id]
        {
            get { return Find<PlatformRechargeTemplate>(id); }
        }

        public PlatformRechargeTemplate Find(int id)
        {
            return Find<PlatformRechargeTemplate>(id);
        }

        public IList<PlatformRechargeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PlatformRechargeTemplate>();
            return mList;
        }
    }

public class PlatformTemplate : Tpl
    {
        /// <summary>
        /// 游戏名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 策划备注
        /// </summary>
        public string Notes;
        /// <summary>
        /// Logo路径
        /// </summary>
        public string Logo;
        /// <summary>
        /// 聊天是否需要判断实名认证
        /// </summary>
        public int IsChat;
        /// <summary>
        /// 超级VIP客服QQ号码
        /// </summary>
        public string MqqUrl;
        /// <summary>
        /// 超级vip需要元宝数
        /// </summary>
        public int SuperVipNeedGold;
        /// <summary>
        /// 超级vip展示奖励
        /// </summary>
        public string SuperVipAwards;
        /// <summary>
        /// 是否屏蔽手机验证
        /// </summary>
        public int IsPhone;
        /// <summary>
        /// 是否屏蔽你提我改
        /// </summary>
        public int IsBug;
        /// <summary>
        /// 是否屏蔽跨服
        /// </summary>
        public int IsService;
        /// <summary>
        /// 是否屏蔽消费确认弹窗
        /// </summary>
        public int IsOpenConfirm;
        /// <summary>
        /// 是否开启
        /// </summary>
        public int IsOpen;
        /// <summary>
        /// 5元秒杀奖励，空时没有
        /// </summary>
        public string SeckillAward;
        /// <summary>
        /// 新手礼包（微端奖励）
        /// </summary>
        public string FirstGift;
        /// <summary>
        /// 收藏网页奖励
        /// </summary>
        public string KeepAwards;
        /// <summary>
        /// 每日礼包
        /// </summary>
        public string DailyGift;
        /// <summary>
        /// 每周礼包
        /// </summary>
        public string WeekGift;
        /// <summary>
        /// 等级礼包
        /// </summary>
        public string LVGift;
        /// <summary>
        /// 累计登录礼包
        /// </summary>
        public string LoginGift;
        /// <summary>
        /// 平台等级礼包
        /// </summary>
        public string PlatformLVGift;
        /// <summary>
        /// 平台Vip礼包（达对应vip等级即可领取）
        /// </summary>
        public string VipGift;
        /// <summary>
        /// 会员名称
        /// </summary>
        public string VIPName;
        /// <summary>
        /// 货币名称
        /// </summary>
        public string CurrencyName;
        /// <summary>
        /// 手机验证礼包
        /// </summary>
        public string MobileGift;
        /// <summary>
        /// 实名验证礼包
        /// </summary>
        public string RealnameGift;
        /// <summary>
        /// 特别礼包
        /// </summary>
        public string SpecialGift;
        /// <summary>
        /// VIP副本
        /// </summary>
        public string VipBoss;
        /// <summary>
        /// VIPBuff
        /// </summary>
        public string VipBuff;
        /// <summary>
        /// 特权图标tips
        /// </summary>
        public string PrivilegeDes;
        /// <summary>
        /// 平台推广称号(称号ID|称号时限)
        /// </summary>
        public string PlatformTitle;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Notes = bytes.ReadUTF();
            Logo = bytes.ReadUTF();
            IsChat = bytes.ReadInt();
            MqqUrl = bytes.ReadUTF();
            SuperVipNeedGold = bytes.ReadInt();
            SuperVipAwards = bytes.ReadUTF();
            IsPhone = bytes.ReadInt();
            IsBug = bytes.ReadInt();
            IsService = bytes.ReadInt();
            IsOpenConfirm = bytes.ReadInt();
            IsOpen = bytes.ReadInt();
            SeckillAward = bytes.ReadUTF();
            FirstGift = bytes.ReadUTF();
            KeepAwards = bytes.ReadUTF();
            DailyGift = bytes.ReadUTF();
            WeekGift = bytes.ReadUTF();
            LVGift = bytes.ReadUTF();
            LoginGift = bytes.ReadUTF();
            PlatformLVGift = bytes.ReadUTF();
            VipGift = bytes.ReadUTF();
            VIPName = bytes.ReadUTF();
            CurrencyName = bytes.ReadUTF();
            MobileGift = bytes.ReadUTF();
            RealnameGift = bytes.ReadUTF();
            SpecialGift = bytes.ReadUTF();
            VipBoss = bytes.ReadUTF();
            VipBuff = bytes.ReadUTF();
            PrivilegeDes = bytes.ReadUTF();
            PlatformTitle = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Notes);
            bytes.WriteUTF(Logo);
            bytes.WriteInt(IsChat);
            bytes.WriteUTF(MqqUrl);
            bytes.WriteInt(SuperVipNeedGold);
            bytes.WriteUTF(SuperVipAwards);
            bytes.WriteInt(IsPhone);
            bytes.WriteInt(IsBug);
            bytes.WriteInt(IsService);
            bytes.WriteInt(IsOpenConfirm);
            bytes.WriteInt(IsOpen);
            bytes.WriteUTF(SeckillAward);
            bytes.WriteUTF(FirstGift);
            bytes.WriteUTF(KeepAwards);
            bytes.WriteUTF(DailyGift);
            bytes.WriteUTF(WeekGift);
            bytes.WriteUTF(LVGift);
            bytes.WriteUTF(LoginGift);
            bytes.WriteUTF(PlatformLVGift);
            bytes.WriteUTF(VipGift);
            bytes.WriteUTF(VIPName);
            bytes.WriteUTF(CurrencyName);
            bytes.WriteUTF(MobileGift);
            bytes.WriteUTF(RealnameGift);
            bytes.WriteUTF(SpecialGift);
            bytes.WriteUTF(VipBoss);
            bytes.WriteUTF(VipBuff);
            bytes.WriteUTF(PrivilegeDes);
            bytes.WriteUTF(PlatformTitle);
        }
    }

    public class PlatformTemplateMode : TplMode
    {
        private IList<PlatformTemplate> mList = null;

        public PlatformTemplateMode(int step) : base("PlatformTemplate", typeof(PlatformTemplate), step) { }

        public PlatformTemplate this[int id]
        {
            get { return Find<PlatformTemplate>(id); }
        }

        public PlatformTemplate Find(int id)
        {
            return Find<PlatformTemplate>(id);
        }

        public IList<PlatformTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PlatformTemplate>();
            return mList;
        }
    }

public class AuctionListTemplate : Tpl
    {
        /// <summary>
        /// 拍卖行类型
        /// </summary>
        public int AuctionType;
        /// <summary>
        /// 活动类型
        /// </summary>
        public int ActivityType;
        /// <summary>
        /// 行会等级
        /// </summary>
        public int GuildLv;
        /// <summary>
        /// 道具id
        /// </summary>
        public int Id;
        /// <summary>
        /// 道具类型
        /// </summary>
        public string Notes;
        /// <summary>
        /// 道具名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 数量
        /// </summary>
        public int Number;
        /// <summary>
        /// 竞拍价格
        /// </summary>
        public int Payment1;
        /// <summary>
        /// 一口价
        /// </summary>
        public int Payment2;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            AuctionType = bytes.ReadInt();
            ActivityType = bytes.ReadInt();
            GuildLv = bytes.ReadInt();
            Id = bytes.ReadInt();
            Notes = bytes.ReadUTF();
            Name = bytes.ReadUTF();
            Number = bytes.ReadInt();
            Payment1 = bytes.ReadInt();
            Payment2 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(AuctionType);
            bytes.WriteInt(ActivityType);
            bytes.WriteInt(GuildLv);
            bytes.WriteInt(Id);
            bytes.WriteUTF(Notes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Number);
            bytes.WriteInt(Payment1);
            bytes.WriteInt(Payment2);
        }
    }

    public class AuctionListTemplateMode : TplMode
    {
        private IList<AuctionListTemplate> mList = null;

        public AuctionListTemplateMode(int step) : base("AuctionListTemplate", typeof(AuctionListTemplate), step) { }

        public AuctionListTemplate this[int id]
        {
            get { return Find<AuctionListTemplate>(id); }
        }

        public AuctionListTemplate Find(int id)
        {
            return Find<AuctionListTemplate>(id);
        }

        public IList<AuctionListTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AuctionListTemplate>();
            return mList;
        }
    }

public class AuctionFilterTemplate : Tpl
    {
        /// <summary>
        /// 大类名称
        /// </summary>
        public string Name1;
        /// <summary>
        /// 小类名称
        /// </summary>
        public string Name2;
        /// <summary>
        /// 包含类型
        /// </summary>
        public string Type;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name1 = bytes.ReadUTF();
            Name2 = bytes.ReadUTF();
            Type = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name1);
            bytes.WriteUTF(Name2);
            bytes.WriteUTF(Type);
        }
    }

    public class AuctionFilterTemplateMode : TplMode
    {
        private IList<AuctionFilterTemplate> mList = null;

        public AuctionFilterTemplateMode(int step) : base("AuctionFilterTemplate", typeof(AuctionFilterTemplate), step) { }

        public AuctionFilterTemplate this[int id]
        {
            get { return Find<AuctionFilterTemplate>(id); }
        }

        public AuctionFilterTemplate Find(int id)
        {
            return Find<AuctionFilterTemplate>(id);
        }

        public IList<AuctionFilterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AuctionFilterTemplate>();
            return mList;
        }
    }

public class SystemAuctionTemplate : Tpl
    {
        /// <summary>
        /// 氪金力度区间
        /// </summary>
        public string PaySection;
        /// <summary>
        /// 境界
        /// </summary>
        public int JJLV;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int GoodsNumb;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int AuctionType;
        /// <summary>
        /// 总价
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weight;
        /// <summary>
        /// 境界低于世界等级减2时价格
        /// </summary>
        public int JJLessPrice2;
        /// <summary>
        /// 境界高与世界等级时价格
        /// </summary>
        public int JJMorePrice2;
        /// <summary>
        /// 总价【一口】
        /// </summary>
        public int MoneyNumbFixed;
        /// <summary>
        /// 境界低于世界等级减2时价格【一口】
        /// </summary>
        public int JJLessPrice2Fixed;
        /// <summary>
        /// 境界高与世界等级时价格【一口】
        /// </summary>
        public int JJMorePrice2Fixed;
        /// <summary>
        /// 推送类型
        /// </summary>
        public int PushType;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PaySection = bytes.ReadUTF();
            JJLV = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            GoodsNumb = bytes.ReadInt();
            AuctionType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Weight = bytes.ReadInt();
            JJLessPrice2 = bytes.ReadInt();
            JJMorePrice2 = bytes.ReadInt();
            MoneyNumbFixed = bytes.ReadInt();
            JJLessPrice2Fixed = bytes.ReadInt();
            JJMorePrice2Fixed = bytes.ReadInt();
            PushType = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(PaySection);
            bytes.WriteInt(JJLV);
            bytes.WriteInt(GoodsID);
            bytes.WriteInt(GoodsNumb);
            bytes.WriteInt(AuctionType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(Weight);
            bytes.WriteInt(JJLessPrice2);
            bytes.WriteInt(JJMorePrice2);
            bytes.WriteInt(MoneyNumbFixed);
            bytes.WriteInt(JJLessPrice2Fixed);
            bytes.WriteInt(JJMorePrice2Fixed);
            bytes.WriteInt(PushType);
        }
    }

    public class SystemAuctionTemplateMode : TplMode
    {
        private IList<SystemAuctionTemplate> mList = null;

        public SystemAuctionTemplateMode(int step) : base("SystemAuctionTemplate", typeof(SystemAuctionTemplate), step) { }

        public SystemAuctionTemplate this[int id]
        {
            get { return Find<SystemAuctionTemplate>(id); }
        }

        public SystemAuctionTemplate Find(int id)
        {
            return Find<SystemAuctionTemplate>(id);
        }

        public IList<SystemAuctionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SystemAuctionTemplate>();
            return mList;
        }
    }

public class RankingTemplate : Tpl
    {
        /// <summary>
        /// 需要的数值
        /// </summary>
        public int NeedValue;
        /// <summary>
        /// 上榜总数
        /// </summary>
        public int MaxCount;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedValue = bytes.ReadInt();
            MaxCount = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedValue);
            bytes.WriteInt(MaxCount);
        }
    }

    public class RankingTemplateMode : TplMode
    {
        private IList<RankingTemplate> mList = null;

        public RankingTemplateMode(int step) : base("RankingTemplate", typeof(RankingTemplate), step) { }

        public RankingTemplate this[int id]
        {
            get { return Find<RankingTemplate>(id); }
        }

        public RankingTemplate Find(int id)
        {
            return Find<RankingTemplate>(id);
        }

        public IList<RankingTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RankingTemplate>();
            return mList;
        }
    }

public class SevenDayRechargeTemplate : Tpl
    {
        /// <summary>
        /// 条件名称
        /// </summary>
        public string Remarks;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 活动开始时间（0-不限制）
        /// </summary>
        public int StartDay;
        /// <summary>
        /// 活动持续时间(0-永久活动)
        /// </summary>
        public int DelayDay;
        /// <summary>
        /// 活动第几天
        /// </summary>
        public int Day;
        /// <summary>
        /// 补充需要的元宝数
        /// </summary>
        public int CompensateNeedMoney;
        /// <summary>
        /// 当日需要充值的元宝数
        /// </summary>
        public int NeedPayMoney;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public int Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public int Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public int Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public int Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public int Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public int Bonus6;
        /// <summary>
        /// 通用奖励
        /// </summary>
        public string Bonus;
        /// <summary>
        /// 美术字资源
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 邮件
        /// </summary>
        public int MailID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Remarks = bytes.ReadUTF();
            Type = bytes.ReadInt();
            StartDay = bytes.ReadInt();
            DelayDay = bytes.ReadInt();
            Day = bytes.ReadInt();
            CompensateNeedMoney = bytes.ReadInt();
            NeedPayMoney = bytes.ReadInt();
            Bonus1 = bytes.ReadInt();
            Bonus2 = bytes.ReadInt();
            Bonus3 = bytes.ReadInt();
            Bonus4 = bytes.ReadInt();
            Bonus5 = bytes.ReadInt();
            Bonus6 = bytes.ReadInt();
            Bonus = bytes.ReadUTF();
            AssetID = bytes.ReadInt();
            MailID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Remarks);
            bytes.WriteInt(Type);
            bytes.WriteInt(StartDay);
            bytes.WriteInt(DelayDay);
            bytes.WriteInt(Day);
            bytes.WriteInt(CompensateNeedMoney);
            bytes.WriteInt(NeedPayMoney);
            bytes.WriteInt(Bonus1);
            bytes.WriteInt(Bonus2);
            bytes.WriteInt(Bonus3);
            bytes.WriteInt(Bonus4);
            bytes.WriteInt(Bonus5);
            bytes.WriteInt(Bonus6);
            bytes.WriteUTF(Bonus);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(MailID);
        }
    }

    public class SevenDayRechargeTemplateMode : TplMode
    {
        private IList<SevenDayRechargeTemplate> mList = null;

        public SevenDayRechargeTemplateMode(int step) : base("SevenDayRechargeTemplate", typeof(SevenDayRechargeTemplate), step) { }

        public SevenDayRechargeTemplate this[int id]
        {
            get { return Find<SevenDayRechargeTemplate>(id); }
        }

        public SevenDayRechargeTemplate Find(int id)
        {
            return Find<SevenDayRechargeTemplate>(id);
        }

        public IList<SevenDayRechargeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SevenDayRechargeTemplate>();
            return mList;
        }
    }

public class CipherTemplate : Tpl
    {
        /// <summary>
        /// 密文槽位等级
        /// </summary>
        public int CipherLV;
        /// <summary>
        /// 显示需要境界等级
        /// </summary>
        public int NeedJJLV;
        /// <summary>
        /// 显示枚举
        /// </summary>
        public int ShowLimit;
        /// <summary>
        /// 境界要求1
        /// </summary>
        public int EquipJJLV;
        /// <summary>
        /// 心魔等级2
        /// </summary>
        public int AegisLv;
        /// <summary>
        /// 翅膀等级3
        /// </summary>
        public int WingsLv;
        /// <summary>
        /// 神盾等级4
        /// </summary>
        public int ShowAegisLv;
        /// <summary>
        /// 官职等级5
        /// </summary>
        public int OfficialPostionLv;
        /// <summary>
        /// 攻击力6（已废弃）
        /// </summary>
        public int MaxAttack;
        /// <summary>
        /// 穿戴奇装等级（已废弃）
        /// </summary>
        public int NeedTotalLV;
        /// <summary>
        /// 展示icon
        /// </summary>
        public int ShowIcon;
        /// <summary>
        /// 装备id1
        /// </summary>
        public int EquipID1;
        /// <summary>
        /// 装备id2
        /// </summary>
        public int EquipID2;
        /// <summary>
        /// 装备id3
        /// </summary>
        public int EquipID3;
        /// <summary>
        /// 装备id4
        /// </summary>
        public int EquipID4;
        /// <summary>
        /// 套装描述
        /// </summary>
        public string Detail;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 暴击值
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴伤
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 灵性
        /// </summary>
        public int DrugsEffect;
        /// <summary>
        /// 对应名号资源
        /// </summary>
        public int CipherTitle;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            CipherLV = bytes.ReadInt();
            NeedJJLV = bytes.ReadInt();
            ShowLimit = bytes.ReadInt();
            EquipJJLV = bytes.ReadInt();
            AegisLv = bytes.ReadInt();
            WingsLv = bytes.ReadInt();
            ShowAegisLv = bytes.ReadInt();
            OfficialPostionLv = bytes.ReadInt();
            MaxAttack = bytes.ReadInt();
            NeedTotalLV = bytes.ReadInt();
            ShowIcon = bytes.ReadInt();
            EquipID1 = bytes.ReadInt();
            EquipID2 = bytes.ReadInt();
            EquipID3 = bytes.ReadInt();
            EquipID4 = bytes.ReadInt();
            Detail = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            DrugsEffect = bytes.ReadInt();
            CipherTitle = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(CipherLV);
            bytes.WriteInt(NeedJJLV);
            bytes.WriteInt(ShowLimit);
            bytes.WriteInt(EquipJJLV);
            bytes.WriteInt(AegisLv);
            bytes.WriteInt(WingsLv);
            bytes.WriteInt(ShowAegisLv);
            bytes.WriteInt(OfficialPostionLv);
            bytes.WriteInt(MaxAttack);
            bytes.WriteInt(NeedTotalLV);
            bytes.WriteInt(ShowIcon);
            bytes.WriteInt(EquipID1);
            bytes.WriteInt(EquipID2);
            bytes.WriteInt(EquipID3);
            bytes.WriteInt(EquipID4);
            bytes.WriteUTF(Detail);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(DrugsEffect);
            bytes.WriteInt(CipherTitle);
        }
    }

    public class CipherTemplateMode : TplMode
    {
        private IList<CipherTemplate> mList = null;

        public CipherTemplateMode(int step) : base("CipherTemplate", typeof(CipherTemplate), step) { }

        public CipherTemplate this[int id]
        {
            get { return Find<CipherTemplate>(id); }
        }

        public CipherTemplate Find(int id)
        {
            return Find<CipherTemplate>(id);
        }

        public IList<CipherTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CipherTemplate>();
            return mList;
        }
    }

public class SurpriseShopTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 物品TID
        /// </summary>
        public int ItemTID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int ItemCount;
        /// <summary>
        /// 原价货币类型
        /// </summary>
        public int OldCostType;
        /// <summary>
        /// 原价展示
        /// </summary>
        public int OldCostValue;
        /// <summary>
        /// 当前货币类型
        /// </summary>
        public int CostType;
        /// <summary>
        /// 当前货币值
        /// </summary>
        public int CostValue;
        /// <summary>
        /// 购买次数
        /// </summary>
        public int PurchaseTimes;
        /// <summary>
        /// 角标类型
        /// </summary>
        public int IconType;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            ItemTID = bytes.ReadInt();
            ItemCount = bytes.ReadInt();
            OldCostType = bytes.ReadInt();
            OldCostValue = bytes.ReadInt();
            CostType = bytes.ReadInt();
            CostValue = bytes.ReadInt();
            PurchaseTimes = bytes.ReadInt();
            IconType = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(ItemTID);
            bytes.WriteInt(ItemCount);
            bytes.WriteInt(OldCostType);
            bytes.WriteInt(OldCostValue);
            bytes.WriteInt(CostType);
            bytes.WriteInt(CostValue);
            bytes.WriteInt(PurchaseTimes);
            bytes.WriteInt(IconType);
        }
    }

    public class SurpriseShopTemplateMode : TplMode
    {
        private IList<SurpriseShopTemplate> mList = null;

        public SurpriseShopTemplateMode(int step) : base("SurpriseShopTemplate", typeof(SurpriseShopTemplate), step) { }

        public SurpriseShopTemplate this[int id]
        {
            get { return Find<SurpriseShopTemplate>(id); }
        }

        public SurpriseShopTemplate Find(int id)
        {
            return Find<SurpriseShopTemplate>(id);
        }

        public IList<SurpriseShopTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SurpriseShopTemplate>();
            return mList;
        }
    }

public class SurpriseOpenTemplate : Tpl
    {
        /// <summary>
        /// 副本ID
        /// </summary>
        public int MapID;
        /// <summary>
        /// 触发等级要求
        /// </summary>
        public int LV;
        /// <summary>
        /// 转升等级要求
        /// </summary>
        public int StateLevel;
        /// <summary>
        /// 心魔等级要求
        /// </summary>
        public int DemoLv;
        /// <summary>
        /// 其他平台类型
        /// </summary>
        public int OthersType;
        /// <summary>
        /// 腾讯平台类型
        /// </summary>
        public int TXItemsType;
        /// <summary>
        /// 入口开启持续时间
        /// </summary>
        public int OpenTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MapID = bytes.ReadInt();
            LV = bytes.ReadInt();
            StateLevel = bytes.ReadInt();
            DemoLv = bytes.ReadInt();
            OthersType = bytes.ReadInt();
            TXItemsType = bytes.ReadInt();
            OpenTime = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MapID);
            bytes.WriteInt(LV);
            bytes.WriteInt(StateLevel);
            bytes.WriteInt(DemoLv);
            bytes.WriteInt(OthersType);
            bytes.WriteInt(TXItemsType);
            bytes.WriteInt(OpenTime);
        }
    }

    public class SurpriseOpenTemplateMode : TplMode
    {
        private IList<SurpriseOpenTemplate> mList = null;

        public SurpriseOpenTemplateMode(int step) : base("SurpriseOpenTemplate", typeof(SurpriseOpenTemplate), step) { }

        public SurpriseOpenTemplate this[int id]
        {
            get { return Find<SurpriseOpenTemplate>(id); }
        }

        public SurpriseOpenTemplate Find(int id)
        {
            return Find<SurpriseOpenTemplate>(id);
        }

        public IList<SurpriseOpenTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SurpriseOpenTemplate>();
            return mList;
        }
    }

public class StrengthTemplate : Tpl
    {
        /// <summary>
        /// 强化部位
        /// </summary>
        public int Type;
        /// <summary>
        /// 强化等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 加星需要的货币类型
        /// </summary>
        public int AddStarMoneyType;
        /// <summary>
        /// 加星需要的货币数量 0表示满星
        /// </summary>
        public int AddStarMoneyNum;
        /// <summary>
        /// 百分百成功花费的元宝数
        /// </summary>
        public int SuccessCost;
        /// <summary>
        /// 消耗强化材料
        /// </summary>
        public string Cost;
        /// <summary>
        /// 消耗金币
        /// </summary>
        public int CostMoney;
        /// <summary>
        /// 显示强化成功率
        /// </summary>
        public int ProbabilityShow;
        /// <summary>
        /// 真实强化成功率
        /// </summary>
        public int Probability;
        /// <summary>
        /// 成功率材料
        /// </summary>
        public string SuccessRateMaterials;
        /// <summary>
        /// 附加成功率是否生效
        /// </summary>
        public int ExtraSuccessRateOn;
        /// <summary>
        /// 失败附加成功率（万分比）
        /// </summary>
        public int ExtraSuccessRate;
        /// <summary>
        /// 失败附加成功率上限（万分比）
        /// </summary>
        public int ExtraSuccessRateMax;
        /// <summary>
        /// 失败掉级
        /// </summary>
        public int LevelDrop;
        /// <summary>
        /// 转移货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 转移货币数目
        /// </summary>
        public int MoneyNum;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 增加属性万分比
        /// </summary>
        public int AddAttrProp;
        /// <summary>
        /// 基础装备最小物理攻击（万分比）（部位1~8)
        /// </summary>
        public int EBMinPhysicAtkPencent;
        /// <summary>
        /// 基础装备最大物理攻击（万分比）（部位1~8)
        /// </summary>
        public int EBMaxPhysicAtkPencent;
        /// <summary>
        /// 基础装备最小魔法攻击（万分比）（部位1~8)
        /// </summary>
        public int EBMinMagicAtkPencent;
        /// <summary>
        /// 基础装备最大魔法攻击（万分比）（部位1~8)
        /// </summary>
        public int EBMaxMagicAtkPencent;
        /// <summary>
        /// 基础装备最小道术攻击（万分比）（部位1~8)
        /// </summary>
        public int EBMinTaoistAtkPencent;
        /// <summary>
        /// 基础装备最大道术攻击（万分比）（部位1~8)
        /// </summary>
        public int EBMaxTaoistAtkPencent;
        /// <summary>
        /// 基础装备攻击加成（万分比）
        /// </summary>
        public int EquipBaseAtkPencent;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击伤害
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对怪减免
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK免伤
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 伤害加成
        /// </summary>
        public int AddHurtPercent;
        /// <summary>
        /// 伤害减免
        /// </summary>
        public int ReduceHurtPercent;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 真实伤害抵抗
        /// </summary>
        public int RealDiscount;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 吸血
        /// </summary>
        public int Vampire;
        /// <summary>
        /// 提示
        /// </summary>
        public string Tips;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Lv = bytes.ReadInt();
            AddStarMoneyType = bytes.ReadInt();
            AddStarMoneyNum = bytes.ReadInt();
            SuccessCost = bytes.ReadInt();
            Cost = bytes.ReadUTF();
            CostMoney = bytes.ReadInt();
            ProbabilityShow = bytes.ReadInt();
            Probability = bytes.ReadInt();
            SuccessRateMaterials = bytes.ReadUTF();
            ExtraSuccessRateOn = bytes.ReadInt();
            ExtraSuccessRate = bytes.ReadInt();
            ExtraSuccessRateMax = bytes.ReadInt();
            LevelDrop = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNum = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            AddAttrProp = bytes.ReadInt();
            EBMinPhysicAtkPencent = bytes.ReadInt();
            EBMaxPhysicAtkPencent = bytes.ReadInt();
            EBMinMagicAtkPencent = bytes.ReadInt();
            EBMaxMagicAtkPencent = bytes.ReadInt();
            EBMinTaoistAtkPencent = bytes.ReadInt();
            EBMaxTaoistAtkPencent = bytes.ReadInt();
            EquipBaseAtkPencent = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            AddHurtPercent = bytes.ReadInt();
            ReduceHurtPercent = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RealDiscount = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            Vampire = bytes.ReadInt();
            Tips = bytes.ReadUTF();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Lv);
            bytes.WriteInt(AddStarMoneyType);
            bytes.WriteInt(AddStarMoneyNum);
            bytes.WriteInt(SuccessCost);
            bytes.WriteUTF(Cost);
            bytes.WriteInt(CostMoney);
            bytes.WriteInt(ProbabilityShow);
            bytes.WriteInt(Probability);
            bytes.WriteUTF(SuccessRateMaterials);
            bytes.WriteInt(ExtraSuccessRateOn);
            bytes.WriteInt(ExtraSuccessRate);
            bytes.WriteInt(ExtraSuccessRateMax);
            bytes.WriteInt(LevelDrop);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNum);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(AddAttrProp);
            bytes.WriteInt(EBMinPhysicAtkPencent);
            bytes.WriteInt(EBMaxPhysicAtkPencent);
            bytes.WriteInt(EBMinMagicAtkPencent);
            bytes.WriteInt(EBMaxMagicAtkPencent);
            bytes.WriteInt(EBMinTaoistAtkPencent);
            bytes.WriteInt(EBMaxTaoistAtkPencent);
            bytes.WriteInt(EquipBaseAtkPencent);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(AddHurtPercent);
            bytes.WriteInt(ReduceHurtPercent);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RealDiscount);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(Vampire);
            bytes.WriteUTF(Tips);
            bytes.WriteInt(NoticeID);
        }
    }

    public class StrengthTemplateMode : TplMode
    {
        private IList<StrengthTemplate> mList = null;

        public StrengthTemplateMode(int step) : base("StrengthTemplate", typeof(StrengthTemplate), step) { }

        public StrengthTemplate this[int id]
        {
            get { return Find<StrengthTemplate>(id); }
        }

        public StrengthTemplate Find(int id)
        {
            return Find<StrengthTemplate>(id);
        }

        public IList<StrengthTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<StrengthTemplate>();
            return mList;
        }
    }

public class StrengthSuitTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 强化需求
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 特殊效果
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 套装描述
        /// </summary>
        public string Des;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            Hits = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            Des = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(Hits);
            bytes.WriteInt(BuffID);
            bytes.WriteUTF(Des);
        }
    }

    public class StrengthSuitTemplateMode : TplMode
    {
        private IList<StrengthSuitTemplate> mList = null;

        public StrengthSuitTemplateMode(int step) : base("StrengthSuitTemplate", typeof(StrengthSuitTemplate), step) { }

        public StrengthSuitTemplate this[int id]
        {
            get { return Find<StrengthSuitTemplate>(id); }
        }

        public StrengthSuitTemplate Find(int id)
        {
            return Find<StrengthSuitTemplate>(id);
        }

        public IList<StrengthSuitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<StrengthSuitTemplate>();
            return mList;
        }
    }

public class PrayTemplate : Tpl
    {
        /// <summary>
        /// 消耗元宝
        /// </summary>
        public int ConsumptionGold;
        /// <summary>
        /// 祈福绑金
        /// </summary>
        public int GetG;
        /// <summary>
        /// 祈福绑元
        /// </summary>
        public int GetY;
        /// <summary>
        /// 双倍获取几率
        /// </summary>
        public int DoubleChance;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ConsumptionGold = bytes.ReadInt();
            GetG = bytes.ReadInt();
            GetY = bytes.ReadInt();
            DoubleChance = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ConsumptionGold);
            bytes.WriteInt(GetG);
            bytes.WriteInt(GetY);
            bytes.WriteInt(DoubleChance);
        }
    }

    public class PrayTemplateMode : TplMode
    {
        private IList<PrayTemplate> mList = null;

        public PrayTemplateMode(int step) : base("PrayTemplate", typeof(PrayTemplate), step) { }

        public PrayTemplate this[int id]
        {
            get { return Find<PrayTemplate>(id); }
        }

        public PrayTemplate Find(int id)
        {
            return Find<PrayTemplate>(id);
        }

        public IList<PrayTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PrayTemplate>();
            return mList;
        }
    }

public class RewardOrderTemplate : Tpl
    {
        /// <summary>
        /// 系统类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 系统等级
        /// </summary>
        public int LV;
        /// <summary>
        /// 单任务发布奖励
        /// </summary>
        public int PublishRewards;
        /// <summary>
        /// 发布货币类型
        /// </summary>
        public int PublishCost;
        /// <summary>
        /// 发布总价格
        /// </summary>
        public int PublishCostNumber;
        /// <summary>
        /// 衰减比例（万分比）
        /// </summary>
        public int Attenuation;
        /// <summary>
        /// 完成任务奖励道具id
        /// </summary>
        public int CollectMoneyType;
        /// <summary>
        /// 单任务完成奖励
        /// </summary>
        public int CollectMoneyNumber;
        /// <summary>
        /// 其他道具奖励
        /// </summary>
        public int CollectItem;
        /// <summary>
        /// 其他道具奖励数量
        /// </summary>
        public int CollectItemNumber;
        /// <summary>
        /// 任务发布数量
        /// </summary>
        public int TotalCollect;
        /// <summary>
        /// 任务接受冷却
        /// </summary>
        public int CD;
        /// <summary>
        /// 任务id
        /// </summary>
        public int TaskID;
        /// <summary>
        /// 该系统等级可发布任务次数
        /// </summary>
        public int LimitTime;
        /// <summary>
        /// 悬赏令icon展示
        /// </summary>
        public int ShowIcon;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            LV = bytes.ReadInt();
            PublishRewards = bytes.ReadInt();
            PublishCost = bytes.ReadInt();
            PublishCostNumber = bytes.ReadInt();
            Attenuation = bytes.ReadInt();
            CollectMoneyType = bytes.ReadInt();
            CollectMoneyNumber = bytes.ReadInt();
            CollectItem = bytes.ReadInt();
            CollectItemNumber = bytes.ReadInt();
            TotalCollect = bytes.ReadInt();
            CD = bytes.ReadInt();
            TaskID = bytes.ReadInt();
            LimitTime = bytes.ReadInt();
            ShowIcon = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(LV);
            bytes.WriteInt(PublishRewards);
            bytes.WriteInt(PublishCost);
            bytes.WriteInt(PublishCostNumber);
            bytes.WriteInt(Attenuation);
            bytes.WriteInt(CollectMoneyType);
            bytes.WriteInt(CollectMoneyNumber);
            bytes.WriteInt(CollectItem);
            bytes.WriteInt(CollectItemNumber);
            bytes.WriteInt(TotalCollect);
            bytes.WriteInt(CD);
            bytes.WriteInt(TaskID);
            bytes.WriteInt(LimitTime);
            bytes.WriteInt(ShowIcon);
        }
    }

    public class RewardOrderTemplateMode : TplMode
    {
        private IList<RewardOrderTemplate> mList = null;

        public RewardOrderTemplateMode(int step) : base("RewardOrderTemplate", typeof(RewardOrderTemplate), step) { }

        public RewardOrderTemplate this[int id]
        {
            get { return Find<RewardOrderTemplate>(id); }
        }

        public RewardOrderTemplate Find(int id)
        {
            return Find<RewardOrderTemplate>(id);
        }

        public IList<RewardOrderTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RewardOrderTemplate>();
            return mList;
        }
    }

public class OfferTaskTemplate : Tpl
    {
        /// <summary>
        /// 策划用
        /// </summary>
        public string Name;
        /// <summary>
        /// 怪物组和权重
        /// </summary>
        public string GroupID;
        /// <summary>
        /// 数量
        /// </summary>
        public int Number;
        /// <summary>
        /// 描述（发布任务）
        /// </summary>
        public string Detail;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            GroupID = bytes.ReadUTF();
            Number = bytes.ReadInt();
            Detail = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(GroupID);
            bytes.WriteInt(Number);
            bytes.WriteUTF(Detail);
        }
    }

    public class OfferTaskTemplateMode : TplMode
    {
        private IList<OfferTaskTemplate> mList = null;

        public OfferTaskTemplateMode(int step) : base("OfferTaskTemplate", typeof(OfferTaskTemplate), step) { }

        public OfferTaskTemplate this[int id]
        {
            get { return Find<OfferTaskTemplate>(id); }
        }

        public OfferTaskTemplate Find(int id)
        {
            return Find<OfferTaskTemplate>(id);
        }

        public IList<OfferTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<OfferTaskTemplate>();
            return mList;
        }
    }

public class OrderTaskLimitTemplate : Tpl
    {
        /// <summary>
        /// 系统名字（策划用）
        /// </summary>
        public string Name;
        /// <summary>
        /// 开启要求（系统等级）
        /// </summary>
        public int OpenLV;
        /// <summary>
        /// 功能开启id（没有则配0）
        /// </summary>
        public int FunctionOpen;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            OpenLV = bytes.ReadInt();
            FunctionOpen = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(OpenLV);
            bytes.WriteInt(FunctionOpen);
        }
    }

    public class OrderTaskLimitTemplateMode : TplMode
    {
        private IList<OrderTaskLimitTemplate> mList = null;

        public OrderTaskLimitTemplateMode(int step) : base("OrderTaskLimitTemplate", typeof(OrderTaskLimitTemplate), step) { }

        public OrderTaskLimitTemplate this[int id]
        {
            get { return Find<OrderTaskLimitTemplate>(id); }
        }

        public OrderTaskLimitTemplate Find(int id)
        {
            return Find<OrderTaskLimitTemplate>(id);
        }

        public IList<OrderTaskLimitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<OrderTaskLimitTemplate>();
            return mList;
        }
    }

public class LivenessAwardTemplate : Tpl
    {
        /// <summary>
        /// 序列
        /// </summary>
        public int Sort;
        /// <summary>
        /// 需要的活跃度/历练值数量
        /// </summary>
        public int NeedCount;
        /// <summary>
        /// 奖励字符串
        /// </summary>
        public string Award;
        /// <summary>
        /// 类型（日常：1 周常：2 最强王者：3）
        /// </summary>
        public int Type;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Sort = bytes.ReadInt();
            NeedCount = bytes.ReadInt();
            Award = bytes.ReadUTF();
            Type = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Sort);
            bytes.WriteInt(NeedCount);
            bytes.WriteUTF(Award);
            bytes.WriteInt(Type);
        }
    }

    public class LivenessAwardTemplateMode : TplMode
    {
        private IList<LivenessAwardTemplate> mList = null;

        public LivenessAwardTemplateMode(int step) : base("LivenessAwardTemplate", typeof(LivenessAwardTemplate), step) { }

        public LivenessAwardTemplate this[int id]
        {
            get { return Find<LivenessAwardTemplate>(id); }
        }

        public LivenessAwardTemplate Find(int id)
        {
            return Find<LivenessAwardTemplate>(id);
        }

        public IList<LivenessAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LivenessAwardTemplate>();
            return mList;
        }
    }

public class LivenessTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string name;
        /// <summary>
        /// 真名
        /// </summary>
        public string PlanName;
        /// <summary>
        /// 活跃类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 完成次数
        /// </summary>
        public int Count;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 完成奖励活跃度
        /// </summary>
        public int LivenessCount;
        /// <summary>
        /// 对应链接
        /// </summary>
        public string Link;
        /// <summary>
        /// 排序
        /// </summary>
        public int Order;
        /// <summary>
        /// 日常：1  周常：2  最强王者：3
        /// </summary>
        public int Form;
        /// <summary>
        /// 重置
        /// </summary>
        public int Reset;
        /// <summary>
        /// 展示道具
        /// </summary>
        public int ShowGoods;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            name = bytes.ReadUTF();
            PlanName = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Count = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            LivenessCount = bytes.ReadInt();
            Link = bytes.ReadUTF();
            Order = bytes.ReadInt();
            Form = bytes.ReadInt();
            Reset = bytes.ReadInt();
            ShowGoods = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(name);
            bytes.WriteUTF(PlanName);
            bytes.WriteInt(Type);
            bytes.WriteInt(Count);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(LivenessCount);
            bytes.WriteUTF(Link);
            bytes.WriteInt(Order);
            bytes.WriteInt(Form);
            bytes.WriteInt(Reset);
            bytes.WriteInt(ShowGoods);
        }
    }

    public class LivenessTemplateMode : TplMode
    {
        private IList<LivenessTemplate> mList = null;

        public LivenessTemplateMode(int step) : base("LivenessTemplate", typeof(LivenessTemplate), step) { }

        public LivenessTemplate this[int id]
        {
            get { return Find<LivenessTemplate>(id); }
        }

        public LivenessTemplate Find(int id)
        {
            return Find<LivenessTemplate>(id);
        }

        public IList<LivenessTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LivenessTemplate>();
            return mList;
        }
    }

public class HotPushTempalte : Tpl
    {
        /// <summary>
        /// 功能名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 界面背景美术图ID
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 类型（1、根据开服天数推送2、合服后第几天开启3、每天都会推送）
        /// </summary>
        public int Type;
        /// <summary>
        /// 需要天数
        /// </summary>
        public int NeedDay;
        /// <summary>
        /// 下一个功能tid，没有填空(暂时无用)
        /// </summary>
        public string NextID;
        /// <summary>
        /// 事件类型（打开的界面id，填0则表示传送至面板npc，若面板npc也填0，表示界面不显示立即前往链接）
        /// </summary>
        public int EventType;
        /// <summary>
        /// 传送面板NPCid
        /// </summary>
        public int tranceNpcId;
        /// <summary>
        /// 功能描述
        /// </summary>
        public string Des;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            AssetID = bytes.ReadInt();
            Type = bytes.ReadInt();
            NeedDay = bytes.ReadInt();
            NextID = bytes.ReadUTF();
            EventType = bytes.ReadInt();
            tranceNpcId = bytes.ReadInt();
            Des = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(Type);
            bytes.WriteInt(NeedDay);
            bytes.WriteUTF(NextID);
            bytes.WriteInt(EventType);
            bytes.WriteInt(tranceNpcId);
            bytes.WriteUTF(Des);
        }
    }

    public class HotPushTempalteMode : TplMode
    {
        private IList<HotPushTempalte> mList = null;

        public HotPushTempalteMode(int step) : base("HotPushTempalte", typeof(HotPushTempalte), step) { }

        public HotPushTempalte this[int id]
        {
            get { return Find<HotPushTempalte>(id); }
        }

        public HotPushTempalte Find(int id)
        {
            return Find<HotPushTempalte>(id);
        }

        public IList<HotPushTempalte> FindAll()
        {
            if (mList == null) mList = FindAll<HotPushTempalte>();
            return mList;
        }
    }

public class SmelterdrawTemplate : Tpl
    {
        /// <summary>
        /// 道具ID
        /// </summary>
        public int Itemid;
        /// <summary>
        /// 日期|权重,日期|权重,日期|权重
        /// </summary>
        public string DayAndValue;
        /// <summary>
        /// 所属
        /// </summary>
        public int Appear;
        /// <summary>
        /// 所属活动
        /// </summary>
        public string ActivityID;
        /// <summary>
        /// 单抽|十抽|五十抽
        /// </summary>
        public string Clude;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int Itemquantity;
        /// <summary>
        /// 是否显示稀有道具日志
        /// </summary>
        public int IsLog;
        /// <summary>
        /// 展示排序
        /// </summary>
        public int Sort;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Itemid = bytes.ReadInt();
            DayAndValue = bytes.ReadUTF();
            Appear = bytes.ReadInt();
            ActivityID = bytes.ReadUTF();
            Clude = bytes.ReadUTF();
            Itemquantity = bytes.ReadInt();
            IsLog = bytes.ReadInt();
            Sort = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Itemid);
            bytes.WriteUTF(DayAndValue);
            bytes.WriteInt(Appear);
            bytes.WriteUTF(ActivityID);
            bytes.WriteUTF(Clude);
            bytes.WriteInt(Itemquantity);
            bytes.WriteInt(IsLog);
            bytes.WriteInt(Sort);
        }
    }

    public class SmelterdrawTemplateMode : TplMode
    {
        private IList<SmelterdrawTemplate> mList = null;

        public SmelterdrawTemplateMode(int step) : base("SmelterdrawTemplate", typeof(SmelterdrawTemplate), step) { }

        public SmelterdrawTemplate this[int id]
        {
            get { return Find<SmelterdrawTemplate>(id); }
        }

        public SmelterdrawTemplate Find(int id)
        {
            return Find<SmelterdrawTemplate>(id);
        }

        public IList<SmelterdrawTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SmelterdrawTemplate>();
            return mList;
        }
    }

public class SmelterdrawShow : Tpl
    {
        /// <summary>
        /// 宝藏界面展示，开服时间,|展示1|展示2|展示3|展示4|展示5|展示6
        /// </summary>
        public string DayTreasureShow;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            DayTreasureShow = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(DayTreasureShow);
        }
    }

    public class SmelterdrawShowMode : TplMode
    {
        private IList<SmelterdrawShow> mList = null;

        public SmelterdrawShowMode(int step) : base("SmelterdrawShow", typeof(SmelterdrawShow), step) { }

        public SmelterdrawShow this[int id]
        {
            get { return Find<SmelterdrawShow>(id); }
        }

        public SmelterdrawShow Find(int id)
        {
            return Find<SmelterdrawShow>(id);
        }

        public IList<SmelterdrawShow> FindAll()
        {
            if (mList == null) mList = FindAll<SmelterdrawShow>();
            return mList;
        }
    }

public class SmelterBoneTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 阶段
        /// </summary>
        public int Grade;
        /// <summary>
        /// 部位
        /// </summary>
        public int Region;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 升级消耗
        /// </summary>
        public string ItemCost;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Grade = bytes.ReadInt();
            Region = bytes.ReadInt();
            Level = bytes.ReadInt();
            ItemCost = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Grade);
            bytes.WriteInt(Region);
            bytes.WriteInt(Level);
            bytes.WriteUTF(ItemCost);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
        }
    }

    public class SmelterBoneTemplateMode : TplMode
    {
        private IList<SmelterBoneTemplate> mList = null;

        public SmelterBoneTemplateMode(int step) : base("SmelterBoneTemplate", typeof(SmelterBoneTemplate), step) { }

        public SmelterBoneTemplate this[int id]
        {
            get { return Find<SmelterBoneTemplate>(id); }
        }

        public SmelterBoneTemplate Find(int id)
        {
            return Find<SmelterBoneTemplate>(id);
        }

        public IList<SmelterBoneTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SmelterBoneTemplate>();
            return mList;
        }
    }

public class SmelterEffectTemplate : Tpl
    {
        /// <summary>
        /// 已觉醒数
        /// </summary>
        public int Awaken;
        /// <summary>
        /// 效果(BUFFID)
        /// </summary>
        public int EffectID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Awaken = bytes.ReadInt();
            EffectID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Awaken);
            bytes.WriteInt(EffectID);
        }
    }

    public class SmelterEffectTemplateMode : TplMode
    {
        private IList<SmelterEffectTemplate> mList = null;

        public SmelterEffectTemplateMode(int step) : base("SmelterEffectTemplate", typeof(SmelterEffectTemplate), step) { }

        public SmelterEffectTemplate this[int id]
        {
            get { return Find<SmelterEffectTemplate>(id); }
        }

        public SmelterEffectTemplate Find(int id)
        {
            return Find<SmelterEffectTemplate>(id);
        }

        public IList<SmelterEffectTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SmelterEffectTemplate>();
            return mList;
        }
    }

public class WorldLvTemplate : Tpl
    {
        /// <summary>
        /// 经验加成
        /// </summary>
        public int ExpAddPct;
        /// <summary>
        /// 内功加成
        /// </summary>
        public int InnerExpAddPct;
        /// <summary>
        /// BuffID
        /// </summary>
        public int BuffID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ExpAddPct = bytes.ReadInt();
            InnerExpAddPct = bytes.ReadInt();
            BuffID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ExpAddPct);
            bytes.WriteInt(InnerExpAddPct);
            bytes.WriteInt(BuffID);
        }
    }

    public class WorldLvTemplateMode : TplMode
    {
        private IList<WorldLvTemplate> mList = null;

        public WorldLvTemplateMode(int step) : base("WorldLvTemplate", typeof(WorldLvTemplate), step) { }

        public WorldLvTemplate this[int id]
        {
            get { return Find<WorldLvTemplate>(id); }
        }

        public WorldLvTemplate Find(int id)
        {
            return Find<WorldLvTemplate>(id);
        }

        public IList<WorldLvTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WorldLvTemplate>();
            return mList;
        }
    }

public class LVAwardsTemplate : Tpl
    {
        /// <summary>
        /// 开服第几天结束
        /// </summary>
        public int EndDay;
        /// <summary>
        /// 需要等级
        /// </summary>
        public int LV;
        /// <summary>
        /// 需要境界等级
        /// </summary>
        public int StateLV;
        /// <summary>
        /// 奖励
        /// </summary>
        public string Awards;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EndDay = bytes.ReadInt();
            LV = bytes.ReadInt();
            StateLV = bytes.ReadInt();
            Awards = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EndDay);
            bytes.WriteInt(LV);
            bytes.WriteInt(StateLV);
            bytes.WriteUTF(Awards);
        }
    }

    public class LVAwardsTemplateMode : TplMode
    {
        private IList<LVAwardsTemplate> mList = null;

        public LVAwardsTemplateMode(int step) : base("LVAwardsTemplate", typeof(LVAwardsTemplate), step) { }

        public LVAwardsTemplate this[int id]
        {
            get { return Find<LVAwardsTemplate>(id); }
        }

        public LVAwardsTemplate Find(int id)
        {
            return Find<LVAwardsTemplate>(id);
        }

        public IList<LVAwardsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LVAwardsTemplate>();
            return mList;
        }
    }

public class MallTemplate : Tpl
    {
        /// <summary>
        /// 商城页签
        /// </summary>
        public int Column;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 物品名
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int GoodsNumb;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 折扣率（百分比）
        /// </summary>
        public int Discount;
        /// <summary>
        /// 开服第几天零点上架
        /// </summary>
        public int DelaySell;
        /// <summary>
        /// 开服第几天零点下架
        /// </summary>
        public int EndDelaySell;
        /// <summary>
        /// 是否在商城显示
        /// </summary>
        public int showInShop;
        /// <summary>
        /// 是否
        /// 需要打金卡特权
        /// </summary>
        public int GoldAuthority;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// 内部元宝是否可用（1可用，0不可用）
        /// </summary>
        public int WelfareAble;
        /// <summary>
        /// 限购次数（填0不限）
        /// </summary>
        public int ForPurchasing;
        /// <summary>
        /// 转生几级触发
        /// </summary>
        public int ReincarnationLv;
        /// <summary>
        /// 持续时间/秒
        /// </summary>
        public int Time;
        /// <summary>
        /// 对应开启组装活动ID
        /// </summary>
        public int AssembleID;
        /// <summary>
        /// 对应开启短期活动ID
        /// </summary>
        public int ShortActID;
        /// <summary>
        /// 礼包显示字符串
        /// </summary>
        public string PackageContent;
        /// <summary>
        /// 刷新周期
        /// </summary>
        public int GiftRefresh;
        /// <summary>
        /// 职业筛选
        /// </summary>
        public int Job;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Column = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            GoodsNumb = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Discount = bytes.ReadInt();
            DelaySell = bytes.ReadInt();
            EndDelaySell = bytes.ReadInt();
            showInShop = bytes.ReadInt();
            GoldAuthority = bytes.ReadInt();
            Sort = bytes.ReadInt();
            WelfareAble = bytes.ReadInt();
            ForPurchasing = bytes.ReadInt();
            ReincarnationLv = bytes.ReadInt();
            Time = bytes.ReadInt();
            AssembleID = bytes.ReadInt();
            ShortActID = bytes.ReadInt();
            PackageContent = bytes.ReadUTF();
            GiftRefresh = bytes.ReadInt();
            Job = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Column);
            bytes.WriteInt(GoodsID);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(GoodsNumb);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(Discount);
            bytes.WriteInt(DelaySell);
            bytes.WriteInt(EndDelaySell);
            bytes.WriteInt(showInShop);
            bytes.WriteInt(GoldAuthority);
            bytes.WriteInt(Sort);
            bytes.WriteInt(WelfareAble);
            bytes.WriteInt(ForPurchasing);
            bytes.WriteInt(ReincarnationLv);
            bytes.WriteInt(Time);
            bytes.WriteInt(AssembleID);
            bytes.WriteInt(ShortActID);
            bytes.WriteUTF(PackageContent);
            bytes.WriteInt(GiftRefresh);
            bytes.WriteInt(Job);
        }
    }

    public class MallTemplateMode : TplMode
    {
        private IList<MallTemplate> mList = null;

        public MallTemplateMode(int step) : base("MallTemplate", typeof(MallTemplate), step) { }

        public MallTemplate this[int id]
        {
            get { return Find<MallTemplate>(id); }
        }

        public MallTemplate Find(int id)
        {
            return Find<MallTemplate>(id);
        }

        public IList<MallTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MallTemplate>();
            return mList;
        }
    }

public class MarketTemplate : Tpl
    {
        /// <summary>
        /// 分栏
        /// </summary>
        public int Column;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 物品名
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int GoodsNumb;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 总价
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 道具id
        /// </summary>
        public int ItemId;
        /// <summary>
        /// 道具总价
        /// </summary>
        public int ItemNumb;
        /// <summary>
        /// 折扣率（百分比）
        /// </summary>
        public int Discount;
        /// <summary>
        /// 开服第几天零点上架
        /// </summary>
        public int DelaySell;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// 内部元宝是否可用（1可用，0不可用）
        /// </summary>
        public int WelfareAble;
        /// <summary>
        /// 限购类型
        /// </summary>
        public int ForPurchasingType;
        /// <summary>
        /// 限购次数（填0不限）
        /// </summary>
        public int ForPurchasing;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weight;
        /// <summary>
        /// 是否必出
        /// </summary>
        public int Appear;
        /// <summary>
        /// 帮会等级
        /// </summary>
        public int GuildLv;
        /// <summary>
        /// 不同境界等级对应的商店（黑市/集会生效）
        /// </summary>
        public int JJLV;
        /// <summary>
        /// 对应开启组装活动ID
        /// </summary>
        public int AssembleID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Column = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            GoodsNumb = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            ItemId = bytes.ReadInt();
            ItemNumb = bytes.ReadInt();
            Discount = bytes.ReadInt();
            DelaySell = bytes.ReadInt();
            Sort = bytes.ReadInt();
            WelfareAble = bytes.ReadInt();
            ForPurchasingType = bytes.ReadInt();
            ForPurchasing = bytes.ReadInt();
            Weight = bytes.ReadInt();
            Appear = bytes.ReadInt();
            GuildLv = bytes.ReadInt();
            JJLV = bytes.ReadInt();
            AssembleID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Column);
            bytes.WriteInt(GoodsID);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(GoodsNumb);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(ItemId);
            bytes.WriteInt(ItemNumb);
            bytes.WriteInt(Discount);
            bytes.WriteInt(DelaySell);
            bytes.WriteInt(Sort);
            bytes.WriteInt(WelfareAble);
            bytes.WriteInt(ForPurchasingType);
            bytes.WriteInt(ForPurchasing);
            bytes.WriteInt(Weight);
            bytes.WriteInt(Appear);
            bytes.WriteInt(GuildLv);
            bytes.WriteInt(JJLV);
            bytes.WriteInt(AssembleID);
        }
    }

    public class MarketTemplateMode : TplMode
    {
        private IList<MarketTemplate> mList = null;

        public MarketTemplateMode(int step) : base("MarketTemplate", typeof(MarketTemplate), step) { }

        public MarketTemplate this[int id]
        {
            get { return Find<MarketTemplate>(id); }
        }

        public MarketTemplate Find(int id)
        {
            return Find<MarketTemplate>(id);
        }

        public IList<MarketTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MarketTemplate>();
            return mList;
        }
    }

public class CurrencyTemplate : Tpl
    {
        /// <summary>
        /// 分栏
        /// </summary>
        public int Column;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 物品名
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int GoodsNumb;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 总价
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 折扣率（百分比）
        /// </summary>
        public int Discount;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// 限购次数（填0不限）
        /// </summary>
        public int ForPurchasing;
        /// <summary>
        /// 商品可购买次数
        /// （聚灵黑市）
        /// </summary>
        public int PurchaseTime;
        /// <summary>
        /// 不同境界等级对应的商店
        /// </summary>
        public int JJLV;
        /// <summary>
        /// 权重
        /// </summary>
        public int ShowCent;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Column = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            GoodsNumb = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Discount = bytes.ReadInt();
            Sort = bytes.ReadInt();
            ForPurchasing = bytes.ReadInt();
            PurchaseTime = bytes.ReadInt();
            JJLV = bytes.ReadInt();
            ShowCent = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Column);
            bytes.WriteInt(GoodsID);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(GoodsNumb);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(Discount);
            bytes.WriteInt(Sort);
            bytes.WriteInt(ForPurchasing);
            bytes.WriteInt(PurchaseTime);
            bytes.WriteInt(JJLV);
            bytes.WriteInt(ShowCent);
        }
    }

    public class CurrencyTemplateMode : TplMode
    {
        private IList<CurrencyTemplate> mList = null;

        public CurrencyTemplateMode(int step) : base("CurrencyTemplate", typeof(CurrencyTemplate), step) { }

        public CurrencyTemplate this[int id]
        {
            get { return Find<CurrencyTemplate>(id); }
        }

        public CurrencyTemplate Find(int id)
        {
            return Find<CurrencyTemplate>(id);
        }

        public IList<CurrencyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CurrencyTemplate>();
            return mList;
        }
    }

public class MallPlusTemplate : Tpl
    {
        /// <summary>
        /// 商城页签
        /// </summary>
        public int Column;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 物品名
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int GoodsNumb;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 折扣率（百分比）
        /// </summary>
        public int Discount;
        /// <summary>
        /// 开服第几天零点上架
        /// </summary>
        public int DelaySell;
        /// <summary>
        /// 开服第几天零点下架
        /// </summary>
        public int EndDelaySell;
        /// <summary>
        /// 是否在金元商城显示
        /// </summary>
        public int showInShop;
        /// <summary>
        /// 是否
        /// 需要打金卡特权
        /// </summary>
        public int GoldAuthority;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// 内部元宝是否可用（1可用，0不可用）
        /// </summary>
        public int WelfareAble;
        /// <summary>
        /// 限购次数（填0不限）
        /// </summary>
        public int ForPurchasing;
        /// <summary>
        /// 转生几级触发
        /// </summary>
        public int ReincarnationLv;
        /// <summary>
        /// 持续时间/秒
        /// </summary>
        public int Time;
        /// <summary>
        /// 对应开启组装活动ID
        /// </summary>
        public int AssembleID;
        /// <summary>
        /// 对应开启短期活动ID
        /// </summary>
        public int ShortActID;
        /// <summary>
        /// 礼包显示字符串
        /// </summary>
        public string PackageContent;
        /// <summary>
        /// 刷新周期
        /// </summary>
        public int GiftRefresh;
        /// <summary>
        /// 职业筛选
        /// </summary>
        public int Job;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Column = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            GoodsNumb = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Discount = bytes.ReadInt();
            DelaySell = bytes.ReadInt();
            EndDelaySell = bytes.ReadInt();
            showInShop = bytes.ReadInt();
            GoldAuthority = bytes.ReadInt();
            Sort = bytes.ReadInt();
            WelfareAble = bytes.ReadInt();
            ForPurchasing = bytes.ReadInt();
            ReincarnationLv = bytes.ReadInt();
            Time = bytes.ReadInt();
            AssembleID = bytes.ReadInt();
            ShortActID = bytes.ReadInt();
            PackageContent = bytes.ReadUTF();
            GiftRefresh = bytes.ReadInt();
            Job = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Column);
            bytes.WriteInt(GoodsID);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(GoodsNumb);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(Discount);
            bytes.WriteInt(DelaySell);
            bytes.WriteInt(EndDelaySell);
            bytes.WriteInt(showInShop);
            bytes.WriteInt(GoldAuthority);
            bytes.WriteInt(Sort);
            bytes.WriteInt(WelfareAble);
            bytes.WriteInt(ForPurchasing);
            bytes.WriteInt(ReincarnationLv);
            bytes.WriteInt(Time);
            bytes.WriteInt(AssembleID);
            bytes.WriteInt(ShortActID);
            bytes.WriteUTF(PackageContent);
            bytes.WriteInt(GiftRefresh);
            bytes.WriteInt(Job);
        }
    }

    public class MallPlusTemplateMode : TplMode
    {
        private IList<MallPlusTemplate> mList = null;

        public MallPlusTemplateMode(int step) : base("MallPlusTemplate", typeof(MallPlusTemplate), step) { }

        public MallPlusTemplate this[int id]
        {
            get { return Find<MallPlusTemplate>(id); }
        }

        public MallPlusTemplate Find(int id)
        {
            return Find<MallPlusTemplate>(id);
        }

        public IList<MallPlusTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MallPlusTemplate>();
            return mList;
        }
    }

public class GuildAuctionTemplate : Tpl
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public int ItemTID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int ItemNum;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weight;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int PriceType;
        /// <summary>
        /// 拍卖货币类型
        /// </summary>
        public int AuctionPriceType;
        /// <summary>
        /// 总价
        /// </summary>
        public int AuctionPrice;
        /// <summary>
        /// 一口价
        /// </summary>
        public int Price;
        /// <summary>
        /// 帮派等级
        /// </summary>
        public int NeedGuildLv;
        /// <summary>
        /// 玩家境界
        /// </summary>
        public int NeedPlayerStateLv;
        /// <summary>
        /// 世界境界
        /// </summary>
        public int NeedWorldStateLv;
        /// <summary>
        /// 拍卖类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 竞拍加价增幅（万分比）
        /// </summary>
        public int AuctionAddMoneyRate;
        /// <summary>
        /// 商品持续时间（秒）
        /// </summary>
        public int Duration;
        /// <summary>
        /// 竞拍导致拍卖减少的时间（秒）
        /// </summary>
        public int AuctionReduceTime;
        /// <summary>
        /// 刷新时间（小时）
        /// </summary>
        public int RefreshTime;
        /// <summary>
        /// 刷新间隔（天数）
        /// </summary>
        public int RefreshInterval;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ItemTID = bytes.ReadInt();
            ItemNum = bytes.ReadInt();
            Weight = bytes.ReadInt();
            PriceType = bytes.ReadInt();
            AuctionPriceType = bytes.ReadInt();
            AuctionPrice = bytes.ReadInt();
            Price = bytes.ReadInt();
            NeedGuildLv = bytes.ReadInt();
            NeedPlayerStateLv = bytes.ReadInt();
            NeedWorldStateLv = bytes.ReadInt();
            Type = bytes.ReadInt();
            AuctionAddMoneyRate = bytes.ReadInt();
            Duration = bytes.ReadInt();
            AuctionReduceTime = bytes.ReadInt();
            RefreshTime = bytes.ReadInt();
            RefreshInterval = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ItemTID);
            bytes.WriteInt(ItemNum);
            bytes.WriteInt(Weight);
            bytes.WriteInt(PriceType);
            bytes.WriteInt(AuctionPriceType);
            bytes.WriteInt(AuctionPrice);
            bytes.WriteInt(Price);
            bytes.WriteInt(NeedGuildLv);
            bytes.WriteInt(NeedPlayerStateLv);
            bytes.WriteInt(NeedWorldStateLv);
            bytes.WriteInt(Type);
            bytes.WriteInt(AuctionAddMoneyRate);
            bytes.WriteInt(Duration);
            bytes.WriteInt(AuctionReduceTime);
            bytes.WriteInt(RefreshTime);
            bytes.WriteInt(RefreshInterval);
        }
    }

    public class GuildAuctionTemplateMode : TplMode
    {
        private IList<GuildAuctionTemplate> mList = null;

        public GuildAuctionTemplateMode(int step) : base("GuildAuctionTemplate", typeof(GuildAuctionTemplate), step) { }

        public GuildAuctionTemplate this[int id]
        {
            get { return Find<GuildAuctionTemplate>(id); }
        }

        public GuildAuctionTemplate Find(int id)
        {
            return Find<GuildAuctionTemplate>(id);
        }

        public IList<GuildAuctionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuildAuctionTemplate>();
            return mList;
        }
    }

public class TXMallTemplate : Tpl
    {
        /// <summary>
        /// 分栏（1热销，2强化，3功能，4药水，5绑定）
        /// </summary>
        public int Column;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 装备名
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int GoodsNumb;
        /// <summary>
        /// 货币类型（1所有元宝，2绑定元宝，3金币,4绑定金币）
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 折扣率（百分比）
        /// </summary>
        public int Discount;
        /// <summary>
        /// 开服第几天零点上架
        /// </summary>
        public int DelaySell;
        /// <summary>
        /// 开服第几天零点下架
        /// </summary>
        public int EndDelaySell;
        /// <summary>
        /// 是否在商城显示
        /// </summary>
        public int showInShop;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// 内部元宝是否可用（1可用，0不可用）
        /// </summary>
        public int WelfareAble;
        /// <summary>
        /// 限购次数（填0不限）
        /// </summary>
        public int ForPurchasing;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Column = bytes.ReadInt();
            GoodsID = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            GoodsNumb = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Discount = bytes.ReadInt();
            DelaySell = bytes.ReadInt();
            EndDelaySell = bytes.ReadInt();
            showInShop = bytes.ReadInt();
            Sort = bytes.ReadInt();
            WelfareAble = bytes.ReadInt();
            ForPurchasing = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Column);
            bytes.WriteInt(GoodsID);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(GoodsNumb);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteInt(Discount);
            bytes.WriteInt(DelaySell);
            bytes.WriteInt(EndDelaySell);
            bytes.WriteInt(showInShop);
            bytes.WriteInt(Sort);
            bytes.WriteInt(WelfareAble);
            bytes.WriteInt(ForPurchasing);
        }
    }

    public class TXMallTemplateMode : TplMode
    {
        private IList<TXMallTemplate> mList = null;

        public TXMallTemplateMode(int step) : base("TXMallTemplate", typeof(TXMallTemplate), step) { }

        public TXMallTemplate this[int id]
        {
            get { return Find<TXMallTemplate>(id); }
        }

        public TXMallTemplate Find(int id)
        {
            return Find<TXMallTemplate>(id);
        }

        public IList<TXMallTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TXMallTemplate>();
            return mList;
        }
    }

public class AdvanceNewTemplate : Tpl
    {
        /// <summary>
        /// 阶
        /// </summary>
        public int Level;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 名称
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 品质
        /// </summary>
        public int Quality;
        /// <summary>
        /// icon展示
        /// </summary>
        public int Icon;
        /// <summary>
        /// icon上特效
        /// </summary>
        public int IconEffect;
        /// <summary>
        /// 星级
        /// </summary>
        public int Stars;
        /// <summary>
        /// 升级需要等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 升级需要成就
        /// </summary>
        public int NeedTab;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int GoldType;
        /// <summary>
        /// 消耗金币
        /// </summary>
        public int GoldCost;
        /// <summary>
        /// 商城物品ID
        /// </summary>
        public int MallItemID;
        /// <summary>
        /// 精炼所需道具
        /// </summary>
        public int NeedMaterial;
        /// <summary>
        /// 每次消耗
        /// </summary>
        public int MaterialConsume;
        /// <summary>
        /// 升级经验
        /// </summary>
        public int Numb;
        /// <summary>
        /// 精炼所需境界等级
        /// </summary>
        public int NeedJJLv;
        /// <summary>
        /// 描述
        /// </summary>
        public string Lore;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 魔攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 魔攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击伤害
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 暴免
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 连击伤害减免
        /// </summary>
        public int ReduceComboSkillHurt;
        /// <summary>
        /// 对怪物暴击力
        /// </summary>
        public int MonsterCritForce;
        /// <summary>
        /// 对BOSS暴击
        /// </summary>
        public int BossCritRate;
        /// <summary>
        /// 对BOSS暴击力
        /// </summary>
        public int BossCritForce;
        /// <summary>
        /// 对BOSS攻击min
        /// </summary>
        public int BossMinAtk;
        /// <summary>
        /// 对BOSS攻击max
        /// </summary>
        public int BossMaxAtk;
        /// <summary>
        /// BOSS掉率增加
        /// 万分比
        /// </summary>
        public int BossDiaoluo;
        /// <summary>
        /// 战宠对BOSS伤害
        /// </summary>
        public int PetHurtBoss;
        /// <summary>
        /// 控制效果类型
        /// </summary>
        public int ControlType;
        /// <summary>
        /// 诱惑等级
        /// </summary>
        public int ConfuseLv;
        /// <summary>
        /// 净化等级
        /// </summary>
        public int CleanLv;
        /// <summary>
        /// 压制等级
        /// </summary>
        public int ControlLv;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;
        /// <summary>
        /// 来源
        /// </summary>
        public string Approach;
        /// <summary>
        /// 触发被动技能
        /// </summary>
        public string PassiveSkill;
        /// <summary>
        /// 五技能tips
        /// </summary>
        public string SkillTips;
        /// <summary>
        /// 奇装类型
        /// </summary>
        public int StoveType;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            Career = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            Quality = bytes.ReadInt();
            Icon = bytes.ReadInt();
            IconEffect = bytes.ReadInt();
            Stars = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            NeedTab = bytes.ReadInt();
            GoldType = bytes.ReadInt();
            GoldCost = bytes.ReadInt();
            MallItemID = bytes.ReadInt();
            NeedMaterial = bytes.ReadInt();
            MaterialConsume = bytes.ReadInt();
            Numb = bytes.ReadInt();
            NeedJJLv = bytes.ReadInt();
            Lore = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            ReduceComboSkillHurt = bytes.ReadInt();
            MonsterCritForce = bytes.ReadInt();
            BossCritRate = bytes.ReadInt();
            BossCritForce = bytes.ReadInt();
            BossMinAtk = bytes.ReadInt();
            BossMaxAtk = bytes.ReadInt();
            BossDiaoluo = bytes.ReadInt();
            PetHurtBoss = bytes.ReadInt();
            ControlType = bytes.ReadInt();
            ConfuseLv = bytes.ReadInt();
            CleanLv = bytes.ReadInt();
            ControlLv = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
            Approach = bytes.ReadUTF();
            PassiveSkill = bytes.ReadUTF();
            SkillTips = bytes.ReadUTF();
            StoveType = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteInt(Career);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(Quality);
            bytes.WriteInt(Icon);
            bytes.WriteInt(IconEffect);
            bytes.WriteInt(Stars);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(NeedTab);
            bytes.WriteInt(GoldType);
            bytes.WriteInt(GoldCost);
            bytes.WriteInt(MallItemID);
            bytes.WriteInt(NeedMaterial);
            bytes.WriteInt(MaterialConsume);
            bytes.WriteInt(Numb);
            bytes.WriteInt(NeedJJLv);
            bytes.WriteUTF(Lore);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(ReduceComboSkillHurt);
            bytes.WriteInt(MonsterCritForce);
            bytes.WriteInt(BossCritRate);
            bytes.WriteInt(BossCritForce);
            bytes.WriteInt(BossMinAtk);
            bytes.WriteInt(BossMaxAtk);
            bytes.WriteInt(BossDiaoluo);
            bytes.WriteInt(PetHurtBoss);
            bytes.WriteInt(ControlType);
            bytes.WriteInt(ConfuseLv);
            bytes.WriteInt(CleanLv);
            bytes.WriteInt(ControlLv);
            bytes.WriteInt(NoticeID);
            bytes.WriteUTF(Approach);
            bytes.WriteUTF(PassiveSkill);
            bytes.WriteUTF(SkillTips);
            bytes.WriteInt(StoveType);
        }
    }

    public class AdvanceNewTemplateMode : TplMode
    {
        private IList<AdvanceNewTemplate> mList = null;

        public AdvanceNewTemplateMode(int step) : base("AdvanceNewTemplate", typeof(AdvanceNewTemplate), step) { }

        public AdvanceNewTemplate this[int id]
        {
            get { return Find<AdvanceNewTemplate>(id); }
        }

        public AdvanceNewTemplate Find(int id)
        {
            return Find<AdvanceNewTemplate>(id);
        }

        public IList<AdvanceNewTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AdvanceNewTemplate>();
            return mList;
        }
    }

public class DeadChooseTemplate : Tpl
    {
        /// <summary>
        /// 类型（1被玩家击杀2被怪物击杀）
        /// </summary>
        public int Type;
        /// <summary>
        /// 判断类型
        /// </summary>
        public int FunctionType;
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 最低等级条件
        /// </summary>
        public int Lv;
        /// <summary>
        /// 最高等级条件
        /// </summary>
        public int MaxLv;
        /// <summary>
        /// Vip等级
        /// </summary>
        public int VIPLv;
        /// <summary>
        /// 文案提示
        /// </summary>
        public string InfoStr;
        /// <summary>
        /// 事件类型（0传送至npc1打开面板）
        /// </summary>
        public int EventType;
        /// <summary>
        /// 传送面板NPCid
        /// </summary>
        public int tranceNpcId;
        /// <summary>
        /// 对应面板名称
        /// </summary>
        public int Uiname;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            FunctionType = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Lv = bytes.ReadInt();
            MaxLv = bytes.ReadInt();
            VIPLv = bytes.ReadInt();
            InfoStr = bytes.ReadUTF();
            EventType = bytes.ReadInt();
            tranceNpcId = bytes.ReadInt();
            Uiname = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(FunctionType);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Lv);
            bytes.WriteInt(MaxLv);
            bytes.WriteInt(VIPLv);
            bytes.WriteUTF(InfoStr);
            bytes.WriteInt(EventType);
            bytes.WriteInt(tranceNpcId);
            bytes.WriteInt(Uiname);
        }
    }

    public class DeadChooseTemplateMode : TplMode
    {
        private IList<DeadChooseTemplate> mList = null;

        public DeadChooseTemplateMode(int step) : base("DeadChooseTemplate", typeof(DeadChooseTemplate), step) { }

        public DeadChooseTemplate this[int id]
        {
            get { return Find<DeadChooseTemplate>(id); }
        }

        public DeadChooseTemplate Find(int id)
        {
            return Find<DeadChooseTemplate>(id);
        }

        public IList<DeadChooseTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DeadChooseTemplate>();
            return mList;
        }
    }

public class GuardsTemplate : Tpl
    {
        /// <summary>
        /// 下级守卫ID
        /// </summary>
        public int NextID;
        /// <summary>
        /// 升级消耗
        /// </summary>
        public string LvupGoods;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NextID = bytes.ReadInt();
            LvupGoods = bytes.ReadUTF();
            Level = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NextID);
            bytes.WriteUTF(LvupGoods);
            bytes.WriteInt(Level);
        }
    }

    public class GuardsTemplateMode : TplMode
    {
        private IList<GuardsTemplate> mList = null;

        public GuardsTemplateMode(int step) : base("GuardsTemplate", typeof(GuardsTemplate), step) { }

        public GuardsTemplate this[int id]
        {
            get { return Find<GuardsTemplate>(id); }
        }

        public GuardsTemplate Find(int id)
        {
            return Find<GuardsTemplate>(id);
        }

        public IList<GuardsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuardsTemplate>();
            return mList;
        }
    }

public class AttributesNamesTemplate : Tpl
    {
        /// <summary>
        /// 属性资源ID
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 属性名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 关联枚举1
        /// </summary>
        public int Enum1;
        /// <summary>
        /// 关联枚举2
        /// </summary>
        public int Enum2;
        /// <summary>
        /// 是否百分比显示
        /// </summary>
        public int IsPrecent;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// tips属性显示排序
        /// </summary>
        public int SortTips;
        /// <summary>
        /// 特殊颜色展示
        /// </summary>
        public int Special;
        /// <summary>
        /// 职业显示
        /// </summary>
        public int Job;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            AssetID = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Enum1 = bytes.ReadInt();
            Enum2 = bytes.ReadInt();
            IsPrecent = bytes.ReadInt();
            Sort = bytes.ReadInt();
            SortTips = bytes.ReadInt();
            Special = bytes.ReadInt();
            Job = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(AssetID);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Enum1);
            bytes.WriteInt(Enum2);
            bytes.WriteInt(IsPrecent);
            bytes.WriteInt(Sort);
            bytes.WriteInt(SortTips);
            bytes.WriteInt(Special);
            bytes.WriteInt(Job);
        }
    }

    public class AttributesNamesTemplateMode : TplMode
    {
        private IList<AttributesNamesTemplate> mList = null;

        public AttributesNamesTemplateMode(int step) : base("AttributesNamesTemplate", typeof(AttributesNamesTemplate), step) { }

        public AttributesNamesTemplate this[int id]
        {
            get { return Find<AttributesNamesTemplate>(id); }
        }

        public AttributesNamesTemplate Find(int id)
        {
            return Find<AttributesNamesTemplate>(id);
        }

        public IList<AttributesNamesTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AttributesNamesTemplate>();
            return mList;
        }
    }

public class AttributesListTemplate : Tpl
    {
        /// <summary>
        /// 属性名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 是否需要记录
        /// </summary>
        public int NeedLog;
        /// <summary>
        /// 字段名
        /// </summary>
        public string FieldName;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            NeedLog = bytes.ReadInt();
            FieldName = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(NeedLog);
            bytes.WriteUTF(FieldName);
        }
    }

    public class AttributesListTemplateMode : TplMode
    {
        private IList<AttributesListTemplate> mList = null;

        public AttributesListTemplateMode(int step) : base("AttributesListTemplate", typeof(AttributesListTemplate), step) { }

        public AttributesListTemplate this[int id]
        {
            get { return Find<AttributesListTemplate>(id); }
        }

        public AttributesListTemplate Find(int id)
        {
            return Find<AttributesListTemplate>(id);
        }

        public IList<AttributesListTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AttributesListTemplate>();
            return mList;
        }
    }

public class GemstoneListTemplate : Tpl
    {
        /// <summary>
        /// 神石类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 物品id
        /// </summary>
        public int GemID;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Level = bytes.ReadInt();
            GemID = bytes.ReadInt();
            Name = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Level);
            bytes.WriteInt(GemID);
            bytes.WriteUTF(Name);
        }
    }

    public class GemstoneListTemplateMode : TplMode
    {
        private IList<GemstoneListTemplate> mList = null;

        public GemstoneListTemplateMode(int step) : base("GemstoneListTemplate", typeof(GemstoneListTemplate), step) { }

        public GemstoneListTemplate this[int id]
        {
            get { return Find<GemstoneListTemplate>(id); }
        }

        public GemstoneListTemplate Find(int id)
        {
            return Find<GemstoneListTemplate>(id);
        }

        public IList<GemstoneListTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GemstoneListTemplate>();
            return mList;
        }
    }

public class GemstonePosTemplate : Tpl
    {
        /// <summary>
        /// 格子数量
        /// </summary>
        public int PosNum;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// 部位图标
        /// </summary>
        public string PosIcon;
        /// <summary>
        /// 解锁消耗
        /// </summary>
        public string PosCost;
        /// <summary>
        /// 角色等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int StateLv;
        /// <summary>
        /// 装备位名称
        /// </summary>
        public string EquipName;
        /// <summary>
        /// 套装ID组
        /// </summary>
        public string SuitID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PosNum = bytes.ReadInt();
            Sort = bytes.ReadInt();
            PosIcon = bytes.ReadUTF();
            PosCost = bytes.ReadUTF();
            NeedLv = bytes.ReadInt();
            StateLv = bytes.ReadInt();
            EquipName = bytes.ReadUTF();
            SuitID = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(PosNum);
            bytes.WriteInt(Sort);
            bytes.WriteUTF(PosIcon);
            bytes.WriteUTF(PosCost);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(StateLv);
            bytes.WriteUTF(EquipName);
            bytes.WriteUTF(SuitID);
        }
    }

    public class GemstonePosTemplateMode : TplMode
    {
        private IList<GemstonePosTemplate> mList = null;

        public GemstonePosTemplateMode(int step) : base("GemstonePosTemplate", typeof(GemstonePosTemplate), step) { }

        public GemstonePosTemplate this[int id]
        {
            get { return Find<GemstonePosTemplate>(id); }
        }

        public GemstonePosTemplate Find(int id)
        {
            return Find<GemstonePosTemplate>(id);
        }

        public IList<GemstonePosTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GemstonePosTemplate>();
            return mList;
        }
    }

public class GemstoneTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 神石类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击伤害
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 最小物攻万分比
        /// </summary>
        public int MinPhysicAtkPencent;
        /// <summary>
        /// 最大物攻万分比
        /// </summary>
        public int MaxPhysicAtkPencent;
        /// <summary>
        /// 最小魔攻万分比
        /// </summary>
        public int MinMagicAtkPencent;
        /// <summary>
        /// 最大魔攻万分比
        /// </summary>
        public int MaxMagicAtkPencent;
        /// <summary>
        /// 最小道攻万分比
        /// </summary>
        public int MinTaoistAtkPencent;
        /// <summary>
        /// 最大道攻万分比
        /// </summary>
        public int MaxTaoistAtkPencent;
        /// <summary>
        /// 最小物防万分比
        /// </summary>
        public int MinPhysicDefPencent;
        /// <summary>
        /// 最大物防万分比
        /// </summary>
        public int MaxPhysicDefPencent;
        /// <summary>
        /// 最小魔防万分比
        /// </summary>
        public int MinMagicDefPencent;
        /// <summary>
        /// 最大魔防万分比
        /// </summary>
        public int MaxMagicDefPencent;
        /// <summary>
        /// 生命值加成
        /// </summary>
        public int HpCent;
        /// <summary>
        /// 极品爆率
        /// </summary>
        public int BossDiaoluo;
        /// <summary>
        /// 攻击加成
        /// </summary>
        public int AtkCent;
        /// <summary>
        /// 防御加成
        /// </summary>
        public int DefCent;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Type = bytes.ReadInt();
            Level = bytes.ReadInt();
            Name = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            MinPhysicAtkPencent = bytes.ReadInt();
            MaxPhysicAtkPencent = bytes.ReadInt();
            MinMagicAtkPencent = bytes.ReadInt();
            MaxMagicAtkPencent = bytes.ReadInt();
            MinTaoistAtkPencent = bytes.ReadInt();
            MaxTaoistAtkPencent = bytes.ReadInt();
            MinPhysicDefPencent = bytes.ReadInt();
            MaxPhysicDefPencent = bytes.ReadInt();
            MinMagicDefPencent = bytes.ReadInt();
            MaxMagicDefPencent = bytes.ReadInt();
            HpCent = bytes.ReadInt();
            BossDiaoluo = bytes.ReadInt();
            AtkCent = bytes.ReadInt();
            DefCent = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Type);
            bytes.WriteInt(Level);
            bytes.WriteUTF(Name);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(MinPhysicAtkPencent);
            bytes.WriteInt(MaxPhysicAtkPencent);
            bytes.WriteInt(MinMagicAtkPencent);
            bytes.WriteInt(MaxMagicAtkPencent);
            bytes.WriteInt(MinTaoistAtkPencent);
            bytes.WriteInt(MaxTaoistAtkPencent);
            bytes.WriteInt(MinPhysicDefPencent);
            bytes.WriteInt(MaxPhysicDefPencent);
            bytes.WriteInt(MinMagicDefPencent);
            bytes.WriteInt(MaxMagicDefPencent);
            bytes.WriteInt(HpCent);
            bytes.WriteInt(BossDiaoluo);
            bytes.WriteInt(AtkCent);
            bytes.WriteInt(DefCent);
        }
    }

    public class GemstoneTemplateMode : TplMode
    {
        private IList<GemstoneTemplate> mList = null;

        public GemstoneTemplateMode(int step) : base("GemstoneTemplate", typeof(GemstoneTemplate), step) { }

        public GemstoneTemplate this[int id]
        {
            get { return Find<GemstoneTemplate>(id); }
        }

        public GemstoneTemplate Find(int id)
        {
            return Find<GemstoneTemplate>(id);
        }

        public IList<GemstoneTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GemstoneTemplate>();
            return mList;
        }
    }

public class AbyssCallBossTemplate : Tpl
    {
        /// <summary>
        /// 召唤npcID
        /// </summary>
        public int NpcID;
        /// <summary>
        /// 召唤消耗
        /// </summary>
        public int NeedItem;
        /// <summary>
        /// 召唤消耗
        /// </summary>
        public int NeedItemNum;
        /// <summary>
        /// 召唤奖励功勋
        /// </summary>
        public int Reward;
        /// <summary>
        /// 召唤boss
        /// </summary>
        public int CallBoss;
        /// <summary>
        /// 坐标X
        /// </summary>
        public int CoordinateX;
        /// <summary>
        /// 坐标Y
        /// </summary>
        public int CoordinateY;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NpcID = bytes.ReadInt();
            NeedItem = bytes.ReadInt();
            NeedItemNum = bytes.ReadInt();
            Reward = bytes.ReadInt();
            CallBoss = bytes.ReadInt();
            CoordinateX = bytes.ReadInt();
            CoordinateY = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NpcID);
            bytes.WriteInt(NeedItem);
            bytes.WriteInt(NeedItemNum);
            bytes.WriteInt(Reward);
            bytes.WriteInt(CallBoss);
            bytes.WriteInt(CoordinateX);
            bytes.WriteInt(CoordinateY);
        }
    }

    public class AbyssCallBossTemplateMode : TplMode
    {
        private IList<AbyssCallBossTemplate> mList = null;

        public AbyssCallBossTemplateMode(int step) : base("AbyssCallBossTemplate", typeof(AbyssCallBossTemplate), step) { }

        public AbyssCallBossTemplate this[int id]
        {
            get { return Find<AbyssCallBossTemplate>(id); }
        }

        public AbyssCallBossTemplate Find(int id)
        {
            return Find<AbyssCallBossTemplate>(id);
        }

        public IList<AbyssCallBossTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AbyssCallBossTemplate>();
            return mList;
        }
    }

public class AbyssMissonTemplate : Tpl
    {
        /// <summary>
        /// 下一个任务TID
        /// </summary>
        public int NextTID;
        /// <summary>
        /// 奖励物品列表
        /// </summary>
        public string AwardList;
        /// <summary>
        /// 增加功勋值
        /// </summary>
        public int AddFeats;
        /// <summary>
        /// 威望奖励
        /// </summary>
        public int MilitaryAward;
        /// <summary>
        /// 双倍领取需要货币类型
        /// </summary>
        public int DoubleCostType;
        /// <summary>
        /// 双倍领取需要货币值
        /// </summary>
        public int DoubleCostValue;
        /// <summary>
        /// 任务怪1TID
        /// </summary>
        public int TaskMonster1;
        /// <summary>
        /// 任务怪1需要击杀数量
        /// </summary>
        public int TaskMonster1Num;
        /// <summary>
        /// 任务怪2TID
        /// </summary>
        public int TaskMonster2;
        /// <summary>
        /// 任务怪2需要击杀数量
        /// </summary>
        public int TaskMonster2Num;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NextTID = bytes.ReadInt();
            AwardList = bytes.ReadUTF();
            AddFeats = bytes.ReadInt();
            MilitaryAward = bytes.ReadInt();
            DoubleCostType = bytes.ReadInt();
            DoubleCostValue = bytes.ReadInt();
            TaskMonster1 = bytes.ReadInt();
            TaskMonster1Num = bytes.ReadInt();
            TaskMonster2 = bytes.ReadInt();
            TaskMonster2Num = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NextTID);
            bytes.WriteUTF(AwardList);
            bytes.WriteInt(AddFeats);
            bytes.WriteInt(MilitaryAward);
            bytes.WriteInt(DoubleCostType);
            bytes.WriteInt(DoubleCostValue);
            bytes.WriteInt(TaskMonster1);
            bytes.WriteInt(TaskMonster1Num);
            bytes.WriteInt(TaskMonster2);
            bytes.WriteInt(TaskMonster2Num);
        }
    }

    public class AbyssMissonTemplateMode : TplMode
    {
        private IList<AbyssMissonTemplate> mList = null;

        public AbyssMissonTemplateMode(int step) : base("AbyssMissonTemplate", typeof(AbyssMissonTemplate), step) { }

        public AbyssMissonTemplate this[int id]
        {
            get { return Find<AbyssMissonTemplate>(id); }
        }

        public AbyssMissonTemplate Find(int id)
        {
            return Find<AbyssMissonTemplate>(id);
        }

        public IList<AbyssMissonTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AbyssMissonTemplate>();
            return mList;
        }
    }

public class NewFirePig : Tpl
    {
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonsterID;
        /// <summary>
        /// 出生时间
        /// </summary>
        public int BornTime;
        /// <summary>
        /// 波数
        /// </summary>
        public int Wave;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MonsterID = bytes.ReadInt();
            BornTime = bytes.ReadInt();
            Wave = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MonsterID);
            bytes.WriteInt(BornTime);
            bytes.WriteInt(Wave);
        }
    }

    public class NewFirePigMode : TplMode
    {
        private IList<NewFirePig> mList = null;

        public NewFirePigMode(int step) : base("NewFirePig", typeof(NewFirePig), step) { }

        public NewFirePig this[int id]
        {
            get { return Find<NewFirePig>(id); }
        }

        public NewFirePig Find(int id)
        {
            return Find<NewFirePig>(id);
        }

        public IList<NewFirePig> FindAll()
        {
            if (mList == null) mList = FindAll<NewFirePig>();
            return mList;
        }
    }

public class ShiMuAwardTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int Statelvl;
        /// <summary>
        /// 通关排名奖励
        /// </summary>
        public string AwardsConf;
        /// <summary>
        /// 通关排名奖励（周期）
        /// </summary>
        public string CycleAwardsConf;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Statelvl = bytes.ReadInt();
            AwardsConf = bytes.ReadUTF();
            CycleAwardsConf = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Statelvl);
            bytes.WriteUTF(AwardsConf);
            bytes.WriteUTF(CycleAwardsConf);
        }
    }

    public class ShiMuAwardTemplateMode : TplMode
    {
        private IList<ShiMuAwardTemplate> mList = null;

        public ShiMuAwardTemplateMode(int step) : base("ShiMuAwardTemplate", typeof(ShiMuAwardTemplate), step) { }

        public ShiMuAwardTemplate this[int id]
        {
            get { return Find<ShiMuAwardTemplate>(id); }
        }

        public ShiMuAwardTemplate Find(int id)
        {
            return Find<ShiMuAwardTemplate>(id);
        }

        public IList<ShiMuAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ShiMuAwardTemplate>();
            return mList;
        }
    }

public class LibraryTemplate : Tpl
    {
        /// <summary>
        /// 层数
        /// </summary>
        public int Layer;
        /// <summary>
        /// 进入消耗元宝单价
        /// </summary>
        public int IngotPrice;
        /// <summary>
        /// 奖励道具
        /// day,id|num,id|num$day,id|num,id|num
        /// </summary>
        public string RewardID;
        /// <summary>
        /// 经验
        /// </summary>
        public int Exp;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Layer = bytes.ReadInt();
            IngotPrice = bytes.ReadInt();
            RewardID = bytes.ReadUTF();
            Exp = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Layer);
            bytes.WriteInt(IngotPrice);
            bytes.WriteUTF(RewardID);
            bytes.WriteInt(Exp);
        }
    }

    public class LibraryTemplateMode : TplMode
    {
        private IList<LibraryTemplate> mList = null;

        public LibraryTemplateMode(int step) : base("LibraryTemplate", typeof(LibraryTemplate), step) { }

        public LibraryTemplate this[int id]
        {
            get { return Find<LibraryTemplate>(id); }
        }

        public LibraryTemplate Find(int id)
        {
            return Find<LibraryTemplate>(id);
        }

        public IList<LibraryTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LibraryTemplate>();
            return mList;
        }
    }

public class ArtifactBoxTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 所需神器精粹
        /// </summary>
        public int NeedExp;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 神器属性加成万分比
        /// </summary>
        public int ArtifactBuffPct;
        /// <summary>
        /// 神器槽位
        /// </summary>
        public int ArtifactSlot;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            NeedExp = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            ArtifactBuffPct = bytes.ReadInt();
            ArtifactSlot = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(NeedExp);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(ArtifactBuffPct);
            bytes.WriteInt(ArtifactSlot);
            bytes.WriteInt(NoticeID);
        }
    }

    public class ArtifactBoxTemplateMode : TplMode
    {
        private IList<ArtifactBoxTemplate> mList = null;

        public ArtifactBoxTemplateMode(int step) : base("ArtifactBoxTemplate", typeof(ArtifactBoxTemplate), step) { }

        public ArtifactBoxTemplate this[int id]
        {
            get { return Find<ArtifactBoxTemplate>(id); }
        }

        public ArtifactBoxTemplate Find(int id)
        {
            return Find<ArtifactBoxTemplate>(id);
        }

        public IList<ArtifactBoxTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ArtifactBoxTemplate>();
            return mList;
        }
    }

public class JewelResonanceTemplate : Tpl
    {
        /// <summary>
        /// 宝石部位
        /// </summary>
        public int Part;
        /// <summary>
        /// 共鸣类型
        /// </summary>
        public int CultivateType;
        /// <summary>
        /// 共鸣名称
        /// </summary>
        public string CultivateName;
        /// <summary>
        /// 共鸣等级
        /// </summary>
        public int ResonanceLv;
        /// <summary>
        /// 养成等级
        /// </summary>
        public int NeedCultivateLv;
        /// <summary>
        /// 生效条件
        /// （部位所有宝石等级）
        /// </summary>
        public int NeedGemLv;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 内功值
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 准确
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 诅咒
        /// </summary>
        public int Curse;
        /// <summary>
        /// 攻速
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 基础生命万分比
        /// </summary>
        public int BaseHpCent;
        /// <summary>
        /// 最小物理攻击
        /// （万分比）
        /// </summary>
        public int MinPhysicAtkPencent;
        /// <summary>
        /// 最大物理攻击
        /// （万分比）
        /// </summary>
        public int MaxPhysicAtkPencent;
        /// <summary>
        /// 最小魔法攻击
        /// （万分比）
        /// </summary>
        public int MinMagicAtkPencent;
        /// <summary>
        /// 最大魔法攻击
        /// （万分比）
        /// </summary>
        public int MaxMagicAtkPencent;
        /// <summary>
        /// 最小道术攻击
        /// （万分比）
        /// </summary>
        public int MinTaoistAtkPencent;
        /// <summary>
        /// 最大道术攻击
        /// （万分比）
        /// </summary>
        public int MaxTaoistAtkPencent;
        /// <summary>
        /// 最小物理防御
        /// （万分比）
        /// </summary>
        public int MinPhysicDefPencent;
        /// <summary>
        /// 最大物理防御
        /// （万分比）
        /// </summary>
        public int MaxPhysicDefPencent;
        /// <summary>
        /// 最小魔法防御
        /// （万分比）
        /// </summary>
        public int MinMagicDefPencent;
        /// <summary>
        /// 最大魔法防御
        /// （万分比）
        /// </summary>
        public int MaxMagicDefPencent;
        /// <summary>
        /// 激活消耗道具
        /// </summary>
        public int ActivateCostItem;
        /// <summary>
        /// 激活消耗数量
        /// </summary>
        public int ActivateCostNumber;
        /// <summary>
        /// 暴击伤害
        /// （万分比）
        /// </summary>
        public int CritForcePencent;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRatePencent;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 吸血
        /// </summary>
        public int Vampire;
        /// <summary>
        /// 抗性
        /// </summary>
        public int Resist;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 真实伤害抵抗
        /// </summary>
        public int RealDiscount;
        /// <summary>
        /// 伤害加成
        /// </summary>
        public int AddHurtPercent;
        /// <summary>
        /// 伤害减免
        /// </summary>
        public int ReduceHurtPercent;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK免伤
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对怪减免
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// 对战士增伤
        /// </summary>
        public int DamageToSoldier;
        /// <summary>
        /// 对战士减伤
        /// </summary>
        public int ResistSoldier;
        /// <summary>
        /// 对法师增伤
        /// </summary>
        public int DamageToMage;
        /// <summary>
        /// 对法师减伤
        /// </summary>
        public int ResistMage;
        /// <summary>
        /// 对道士增伤
        /// </summary>
        public int DamageToTaoist;
        /// <summary>
        /// 对道士减免
        /// </summary>
        public int ResistTaoist;
        /// <summary>
        /// 生命回复
        /// </summary>
        public int LifeRecove;
        /// <summary>
        /// 魔法回复
        /// </summary>
        public int MagicRecove;
        /// <summary>
        /// 心魔攻击
        /// </summary>
        public int InnerDemonsAtk;
        /// <summary>
        /// 心魔防御
        /// </summary>
        public int InnerDemonsDef;
        /// <summary>
        /// 斩杀等级
        /// </summary>
        public int StrikeLv;
        /// <summary>
        /// 斩杀血量比（万分比）
        /// </summary>
        public int StrikeHp;
        /// <summary>
        /// 斩杀额外伤害（万分比）
        /// </summary>
        public int StrikeDmg;
        /// <summary>
        /// 混沌几率（万分比）
        /// </summary>
        public int Disturb;
        /// <summary>
        /// 混沌伤害
        /// （万分比）
        /// </summary>
        public int DisturbDmg;
        /// <summary>
        /// 诱惑等级
        /// </summary>
        public int ConfuseLv;
        /// <summary>
        /// 封印等级
        /// </summary>
        public int SealLv;
        /// <summary>
        /// 净化等级
        /// </summary>
        public int CleanLv;
        /// <summary>
        /// 压制等级
        /// </summary>
        public int ControlLv;
        /// <summary>
        /// 溅射等级
        /// </summary>
        public int SpreadLv;
        /// <summary>
        /// 溅射伤害系数（万分比）
        /// </summary>
        public int SpreadDmg;
        /// <summary>
        /// 攻击减速几率（万分比）
        /// </summary>
        public int ReduceMove;
        /// <summary>
        /// 野性伤害系数（万分比）
        /// </summary>
        public int CrazyDmg;
        /// <summary>
        /// 诅咒等级
        /// </summary>
        public int CurseLv;
        /// <summary>
        /// 诅咒效果（万分比）
        /// </summary>
        public int CurseEffect;
        /// <summary>
        /// 极品掉落提升（万分比）
        /// </summary>
        public int BossDiaoluo;
        /// <summary>
        /// 反伤抵抗
        /// </summary>
        public int DmgCounterReduce;
        /// <summary>
        /// 药品回复效率（万分比）
        /// </summary>
        public int DrugsEffect;
        /// <summary>
        /// 移速
        /// </summary>
        public int MoveSpeed;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Part = bytes.ReadInt();
            CultivateType = bytes.ReadInt();
            CultivateName = bytes.ReadUTF();
            ResonanceLv = bytes.ReadInt();
            NeedCultivateLv = bytes.ReadInt();
            NeedGemLv = bytes.ReadInt();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            Curse = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            BaseHpCent = bytes.ReadInt();
            MinPhysicAtkPencent = bytes.ReadInt();
            MaxPhysicAtkPencent = bytes.ReadInt();
            MinMagicAtkPencent = bytes.ReadInt();
            MaxMagicAtkPencent = bytes.ReadInt();
            MinTaoistAtkPencent = bytes.ReadInt();
            MaxTaoistAtkPencent = bytes.ReadInt();
            MinPhysicDefPencent = bytes.ReadInt();
            MaxPhysicDefPencent = bytes.ReadInt();
            MinMagicDefPencent = bytes.ReadInt();
            MaxMagicDefPencent = bytes.ReadInt();
            ActivateCostItem = bytes.ReadInt();
            ActivateCostNumber = bytes.ReadInt();
            CritForcePencent = bytes.ReadInt();
            CritRatePencent = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            Vampire = bytes.ReadInt();
            Resist = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RealDiscount = bytes.ReadInt();
            AddHurtPercent = bytes.ReadInt();
            ReduceHurtPercent = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            DamageToSoldier = bytes.ReadInt();
            ResistSoldier = bytes.ReadInt();
            DamageToMage = bytes.ReadInt();
            ResistMage = bytes.ReadInt();
            DamageToTaoist = bytes.ReadInt();
            ResistTaoist = bytes.ReadInt();
            LifeRecove = bytes.ReadInt();
            MagicRecove = bytes.ReadInt();
            InnerDemonsAtk = bytes.ReadInt();
            InnerDemonsDef = bytes.ReadInt();
            StrikeLv = bytes.ReadInt();
            StrikeHp = bytes.ReadInt();
            StrikeDmg = bytes.ReadInt();
            Disturb = bytes.ReadInt();
            DisturbDmg = bytes.ReadInt();
            ConfuseLv = bytes.ReadInt();
            SealLv = bytes.ReadInt();
            CleanLv = bytes.ReadInt();
            ControlLv = bytes.ReadInt();
            SpreadLv = bytes.ReadInt();
            SpreadDmg = bytes.ReadInt();
            ReduceMove = bytes.ReadInt();
            CrazyDmg = bytes.ReadInt();
            CurseLv = bytes.ReadInt();
            CurseEffect = bytes.ReadInt();
            BossDiaoluo = bytes.ReadInt();
            DmgCounterReduce = bytes.ReadInt();
            DrugsEffect = bytes.ReadInt();
            MoveSpeed = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Part);
            bytes.WriteInt(CultivateType);
            bytes.WriteUTF(CultivateName);
            bytes.WriteInt(ResonanceLv);
            bytes.WriteInt(NeedCultivateLv);
            bytes.WriteInt(NeedGemLv);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(Curse);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(BaseHpCent);
            bytes.WriteInt(MinPhysicAtkPencent);
            bytes.WriteInt(MaxPhysicAtkPencent);
            bytes.WriteInt(MinMagicAtkPencent);
            bytes.WriteInt(MaxMagicAtkPencent);
            bytes.WriteInt(MinTaoistAtkPencent);
            bytes.WriteInt(MaxTaoistAtkPencent);
            bytes.WriteInt(MinPhysicDefPencent);
            bytes.WriteInt(MaxPhysicDefPencent);
            bytes.WriteInt(MinMagicDefPencent);
            bytes.WriteInt(MaxMagicDefPencent);
            bytes.WriteInt(ActivateCostItem);
            bytes.WriteInt(ActivateCostNumber);
            bytes.WriteInt(CritForcePencent);
            bytes.WriteInt(CritRatePencent);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(Vampire);
            bytes.WriteInt(Resist);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RealDiscount);
            bytes.WriteInt(AddHurtPercent);
            bytes.WriteInt(ReduceHurtPercent);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(DamageToSoldier);
            bytes.WriteInt(ResistSoldier);
            bytes.WriteInt(DamageToMage);
            bytes.WriteInt(ResistMage);
            bytes.WriteInt(DamageToTaoist);
            bytes.WriteInt(ResistTaoist);
            bytes.WriteInt(LifeRecove);
            bytes.WriteInt(MagicRecove);
            bytes.WriteInt(InnerDemonsAtk);
            bytes.WriteInt(InnerDemonsDef);
            bytes.WriteInt(StrikeLv);
            bytes.WriteInt(StrikeHp);
            bytes.WriteInt(StrikeDmg);
            bytes.WriteInt(Disturb);
            bytes.WriteInt(DisturbDmg);
            bytes.WriteInt(ConfuseLv);
            bytes.WriteInt(SealLv);
            bytes.WriteInt(CleanLv);
            bytes.WriteInt(ControlLv);
            bytes.WriteInt(SpreadLv);
            bytes.WriteInt(SpreadDmg);
            bytes.WriteInt(ReduceMove);
            bytes.WriteInt(CrazyDmg);
            bytes.WriteInt(CurseLv);
            bytes.WriteInt(CurseEffect);
            bytes.WriteInt(BossDiaoluo);
            bytes.WriteInt(DmgCounterReduce);
            bytes.WriteInt(DrugsEffect);
            bytes.WriteInt(MoveSpeed);
        }
    }

    public class JewelResonanceTemplateMode : TplMode
    {
        private IList<JewelResonanceTemplate> mList = null;

        public JewelResonanceTemplateMode(int step) : base("JewelResonanceTemplate", typeof(JewelResonanceTemplate), step) { }

        public JewelResonanceTemplate this[int id]
        {
            get { return Find<JewelResonanceTemplate>(id); }
        }

        public JewelResonanceTemplate Find(int id)
        {
            return Find<JewelResonanceTemplate>(id);
        }

        public IList<JewelResonanceTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JewelResonanceTemplate>();
            return mList;
        }
    }

public class JewelOpenTemplate : Tpl
    {
        /// <summary>
        /// 第几个格子
        /// </summary>
        public int PosNum;
        /// <summary>
        /// 角色等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int StateLv;
        /// <summary>
        /// 通天塔ID
        /// </summary>
        public int RoadID;
        /// <summary>
        /// 装备位名称
        /// </summary>
        public string EquipName;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PosNum = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            StateLv = bytes.ReadInt();
            RoadID = bytes.ReadInt();
            EquipName = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(PosNum);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(StateLv);
            bytes.WriteInt(RoadID);
            bytes.WriteUTF(EquipName);
        }
    }

    public class JewelOpenTemplateMode : TplMode
    {
        private IList<JewelOpenTemplate> mList = null;

        public JewelOpenTemplateMode(int step) : base("JewelOpenTemplate", typeof(JewelOpenTemplate), step) { }

        public JewelOpenTemplate this[int id]
        {
            get { return Find<JewelOpenTemplate>(id); }
        }

        public JewelOpenTemplate Find(int id)
        {
            return Find<JewelOpenTemplate>(id);
        }

        public IList<JewelOpenTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JewelOpenTemplate>();
            return mList;
        }
    }

public class JewelTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 圣魂类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Type = bytes.ReadInt();
            Level = bytes.ReadInt();
            Name = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Type);
            bytes.WriteInt(Level);
            bytes.WriteUTF(Name);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(HolyDamage);
        }
    }

    public class JewelTemplateMode : TplMode
    {
        private IList<JewelTemplate> mList = null;

        public JewelTemplateMode(int step) : base("JewelTemplate", typeof(JewelTemplate), step) { }

        public JewelTemplate this[int id]
        {
            get { return Find<JewelTemplate>(id); }
        }

        public JewelTemplate Find(int id)
        {
            return Find<JewelTemplate>(id);
        }

        public IList<JewelTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<JewelTemplate>();
            return mList;
        }
    }

public class ArtifactCombineTemplate : Tpl
    {
        /// <summary>
        /// 源装备ID
        /// </summary>
        public int CombineID;
        /// <summary>
        /// 成功率
        /// </summary>
        public int Probability;
        /// <summary>
        /// 消耗材料
        /// </summary>
        public int CostItemID;
        /// <summary>
        /// 消耗数量
        /// </summary>
        public int CostItemNum;
        /// <summary>
        /// 合成需要货币类型
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 合成需要货币
        /// </summary>
        public int CostMoneyNum;
        /// <summary>
        /// 目标装备
        /// </summary>
        public int TargetItemID;
        /// <summary>
        /// 失败产出
        /// </summary>
        public int FailItemID;
        /// <summary>
        /// 失败产出数量
        /// </summary>
        public int FailItemNum;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            CombineID = bytes.ReadInt();
            Probability = bytes.ReadInt();
            CostItemID = bytes.ReadInt();
            CostItemNum = bytes.ReadInt();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
            TargetItemID = bytes.ReadInt();
            FailItemID = bytes.ReadInt();
            FailItemNum = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(CombineID);
            bytes.WriteInt(Probability);
            bytes.WriteInt(CostItemID);
            bytes.WriteInt(CostItemNum);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
            bytes.WriteInt(TargetItemID);
            bytes.WriteInt(FailItemID);
            bytes.WriteInt(FailItemNum);
        }
    }

    public class ArtifactCombineTemplateMode : TplMode
    {
        private IList<ArtifactCombineTemplate> mList = null;

        public ArtifactCombineTemplateMode(int step) : base("ArtifactCombineTemplate", typeof(ArtifactCombineTemplate), step) { }

        public ArtifactCombineTemplate this[int id]
        {
            get { return Find<ArtifactCombineTemplate>(id); }
        }

        public ArtifactCombineTemplate Find(int id)
        {
            return Find<ArtifactCombineTemplate>(id);
        }

        public IList<ArtifactCombineTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ArtifactCombineTemplate>();
            return mList;
        }
    }

public class NameTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 男名
        /// </summary>
        public string MaleName;
        /// <summary>
        /// 女名
        /// </summary>
        public string FemaleName;
        /// <summary>
        /// 全名
        /// </summary>
        public string FullName;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            MaleName = bytes.ReadUTF();
            FemaleName = bytes.ReadUTF();
            FullName = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(MaleName);
            bytes.WriteUTF(FemaleName);
            bytes.WriteUTF(FullName);
        }
    }

    public class NameTemplateMode : TplMode
    {
        private IList<NameTemplate> mList = null;

        public NameTemplateMode(int step) : base("NameTemplate", typeof(NameTemplate), step) { }

        public NameTemplate this[int id]
        {
            get { return Find<NameTemplate>(id); }
        }

        public NameTemplate Find(int id)
        {
            return Find<NameTemplate>(id);
        }

        public IList<NameTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NameTemplate>();
            return mList;
        }
    }

public class TotemTemplate : Tpl
    {
        /// <summary>
        /// 等级名
        /// </summary>
        public string LvName;
        /// <summary>
        /// 实际等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 阶
        /// </summary>
        public int Grade;
        /// <summary>
        /// 等级
        /// </summary>
        public int StageLevel;
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 描述
        /// </summary>
        public string Detail;
        /// <summary>
        /// 展示icon
        /// </summary>
        public int ShowIcon;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 内功
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 魔攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 魔攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 需求伏魔值
        /// </summary>
        public int DemonHunterExp;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int CostGoldType;
        /// <summary>
        /// 货币消耗数量
        /// </summary>
        public int CostGold;
        /// <summary>
        /// 战斗力显示值
        /// </summary>
        public int Sword;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;
        /// <summary>
        /// 开启装备栏
        /// </summary>
        public string OpenEquipPart;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LvName = bytes.ReadUTF();
            Level = bytes.ReadInt();
            Grade = bytes.ReadInt();
            StageLevel = bytes.ReadInt();
            Career = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Detail = bytes.ReadUTF();
            ShowIcon = bytes.ReadInt();
            HP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            DemonHunterExp = bytes.ReadInt();
            CostGoldType = bytes.ReadInt();
            CostGold = bytes.ReadInt();
            Sword = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
            OpenEquipPart = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(LvName);
            bytes.WriteInt(Level);
            bytes.WriteInt(Grade);
            bytes.WriteInt(StageLevel);
            bytes.WriteInt(Career);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Detail);
            bytes.WriteInt(ShowIcon);
            bytes.WriteInt(HP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(DemonHunterExp);
            bytes.WriteInt(CostGoldType);
            bytes.WriteInt(CostGold);
            bytes.WriteInt(Sword);
            bytes.WriteInt(NoticeID);
            bytes.WriteUTF(OpenEquipPart);
        }
    }

    public class TotemTemplateMode : TplMode
    {
        private IList<TotemTemplate> mList = null;

        public TotemTemplateMode(int step) : base("TotemTemplate", typeof(TotemTemplate), step) { }

        public TotemTemplate this[int id]
        {
            get { return Find<TotemTemplate>(id); }
        }

        public TotemTemplate Find(int id)
        {
            return Find<TotemTemplate>(id);
        }

        public IList<TotemTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TotemTemplate>();
            return mList;
        }
    }

public class ExchangeDemonHunterExpTemplate : Tpl
    {
        /// <summary>
        /// 人物等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 档位
        /// </summary>
        public int Type;
        /// <summary>
        /// 等级
        /// </summary>
        public int MinLevel;
        /// <summary>
        /// 兑换伏魔值数量
        /// </summary>
        public int ExchangeDHExp;
        /// <summary>
        /// 消耗经验
        /// </summary>
        public int CostExp;
        /// <summary>
        /// 消耗货币
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int CostMoneyNum;
        /// <summary>
        /// 限制次数
        /// </summary>
        public int LimitTimes;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            Type = bytes.ReadInt();
            MinLevel = bytes.ReadInt();
            ExchangeDHExp = bytes.ReadInt();
            CostExp = bytes.ReadInt();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
            LimitTimes = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteInt(Type);
            bytes.WriteInt(MinLevel);
            bytes.WriteInt(ExchangeDHExp);
            bytes.WriteInt(CostExp);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
            bytes.WriteInt(LimitTimes);
        }
    }

    public class ExchangeDemonHunterExpTemplateMode : TplMode
    {
        private IList<ExchangeDemonHunterExpTemplate> mList = null;

        public ExchangeDemonHunterExpTemplateMode(int step) : base("ExchangeDemonHunterExpTemplate", typeof(ExchangeDemonHunterExpTemplate), step) { }

        public ExchangeDemonHunterExpTemplate this[int id]
        {
            get { return Find<ExchangeDemonHunterExpTemplate>(id); }
        }

        public ExchangeDemonHunterExpTemplate Find(int id)
        {
            return Find<ExchangeDemonHunterExpTemplate>(id);
        }

        public IList<ExchangeDemonHunterExpTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ExchangeDemonHunterExpTemplate>();
            return mList;
        }
    }

public class TotemTaskTemplate : Tpl
    {
        /// <summary>
        /// 序列
        /// </summary>
        public int Sort;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int StateLv;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weight;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonsterID;
        /// <summary>
        /// 击杀数量
        /// </summary>
        public int MonsterNum;
        /// <summary>
        /// 极品奖励
        /// </summary>
        public string BestDropID;
        /// <summary>
        /// 掉落1限制
        /// </summary>
        public int BestDropLimit1;
        /// <summary>
        /// 保底掉落
        /// </summary>
        public int PublicDropID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Sort = bytes.ReadInt();
            StateLv = bytes.ReadInt();
            Weight = bytes.ReadInt();
            MonsterID = bytes.ReadInt();
            MonsterNum = bytes.ReadInt();
            BestDropID = bytes.ReadUTF();
            BestDropLimit1 = bytes.ReadInt();
            PublicDropID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Sort);
            bytes.WriteInt(StateLv);
            bytes.WriteInt(Weight);
            bytes.WriteInt(MonsterID);
            bytes.WriteInt(MonsterNum);
            bytes.WriteUTF(BestDropID);
            bytes.WriteInt(BestDropLimit1);
            bytes.WriteInt(PublicDropID);
        }
    }

    public class TotemTaskTemplateMode : TplMode
    {
        private IList<TotemTaskTemplate> mList = null;

        public TotemTaskTemplateMode(int step) : base("TotemTaskTemplate", typeof(TotemTaskTemplate), step) { }

        public TotemTaskTemplate this[int id]
        {
            get { return Find<TotemTaskTemplate>(id); }
        }

        public TotemTaskTemplate Find(int id)
        {
            return Find<TotemTaskTemplate>(id);
        }

        public IList<TotemTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TotemTaskTemplate>();
            return mList;
        }
    }

public class TotemOthersTemplate : Tpl
    {
        /// <summary>
        /// 每日任务数量
        /// </summary>
        public int TaskNum;
        /// <summary>
        /// 任务重置时间
        /// </summary>
        public int ReSetTime;
        /// <summary>
        /// BOSS刷新ID
        /// </summary>
        public int BOSSSet;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TaskNum = bytes.ReadInt();
            ReSetTime = bytes.ReadInt();
            BOSSSet = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(TaskNum);
            bytes.WriteInt(ReSetTime);
            bytes.WriteInt(BOSSSet);
        }
    }

    public class TotemOthersTemplateMode : TplMode
    {
        private IList<TotemOthersTemplate> mList = null;

        public TotemOthersTemplateMode(int step) : base("TotemOthersTemplate", typeof(TotemOthersTemplate), step) { }

        public TotemOthersTemplate this[int id]
        {
            get { return Find<TotemOthersTemplate>(id); }
        }

        public TotemOthersTemplate Find(int id)
        {
            return Find<TotemOthersTemplate>(id);
        }

        public IList<TotemOthersTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TotemOthersTemplate>();
            return mList;
        }
    }

public class TalentTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 天赋格子顺序ID
        /// </summary>
        public int List;
        /// <summary>
        /// 天赋显示资源
        /// </summary>
        public int Icon;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 天赋名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 属性描述（填了文本按文本显示，没填按属性显示数据）
        /// </summary>
        public string Txt;
        /// <summary>
        /// 需要的等级
        /// </summary>
        public int NeedLevel;
        /// <summary>
        /// 最大等级
        /// </summary>
        public int MaxLevel;
        /// <summary>
        /// 升级需要的天赋点
        /// </summary>
        public int CostPoint;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 准确
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 真实伤害
        /// </summary>
        public int RealDamage;
        /// <summary>
        /// 真实伤害抵消
        /// </summary>
        public int RealDiscount;
        /// <summary>
        /// 伤害加成
        /// </summary>
        public int AddHurtPercent;
        /// <summary>
        /// 伤害减免
        /// </summary>
        public int ReduceHurtPercent;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对怪减免
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// 对战士增伤
        /// </summary>
        public int DamageToSoldier;
        /// <summary>
        /// 对战士减伤
        /// </summary>
        public int ResistSoldier;
        /// <summary>
        /// 对法师增伤
        /// </summary>
        public int DamageToMage;
        /// <summary>
        /// 对法师减伤
        /// </summary>
        public int ResistMage;
        /// <summary>
        /// 对道士增伤
        /// </summary>
        public int DamageToTaoist;
        /// <summary>
        /// 对道士减免
        /// </summary>
        public int ResistTaoist;
        /// <summary>
        /// 连击技能伤害减免
        /// </summary>
        public int ReduceComboSkillHurt;
        /// <summary>
        /// 天赋附加BuffID
        /// </summary>
        public int BuffID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            List = bytes.ReadInt();
            Icon = bytes.ReadInt();
            Level = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Txt = bytes.ReadUTF();
            NeedLevel = bytes.ReadInt();
            MaxLevel = bytes.ReadInt();
            CostPoint = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RealDamage = bytes.ReadInt();
            RealDiscount = bytes.ReadInt();
            AddHurtPercent = bytes.ReadInt();
            ReduceHurtPercent = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            DamageToSoldier = bytes.ReadInt();
            ResistSoldier = bytes.ReadInt();
            DamageToMage = bytes.ReadInt();
            ResistMage = bytes.ReadInt();
            DamageToTaoist = bytes.ReadInt();
            ResistTaoist = bytes.ReadInt();
            ReduceComboSkillHurt = bytes.ReadInt();
            BuffID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(List);
            bytes.WriteInt(Icon);
            bytes.WriteInt(Level);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Txt);
            bytes.WriteInt(NeedLevel);
            bytes.WriteInt(MaxLevel);
            bytes.WriteInt(CostPoint);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RealDamage);
            bytes.WriteInt(RealDiscount);
            bytes.WriteInt(AddHurtPercent);
            bytes.WriteInt(ReduceHurtPercent);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(DamageToSoldier);
            bytes.WriteInt(ResistSoldier);
            bytes.WriteInt(DamageToMage);
            bytes.WriteInt(ResistMage);
            bytes.WriteInt(DamageToTaoist);
            bytes.WriteInt(ResistTaoist);
            bytes.WriteInt(ReduceComboSkillHurt);
            bytes.WriteInt(BuffID);
        }
    }

    public class TalentTemplateMode : TplMode
    {
        private IList<TalentTemplate> mList = null;

        public TalentTemplateMode(int step) : base("TalentTemplate", typeof(TalentTemplate), step) { }

        public TalentTemplate this[int id]
        {
            get { return Find<TalentTemplate>(id); }
        }

        public TalentTemplate Find(int id)
        {
            return Find<TalentTemplate>(id);
        }

        public IList<TalentTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TalentTemplate>();
            return mList;
        }
    }

public class NewSuitAttributeTemplate : Tpl
    {
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 神盾值
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 准确
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 诅咒
        /// </summary>
        public int Curse;
        /// <summary>
        /// 攻速
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 基础生命万分比
        /// </summary>
        public int BaseHpCent;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 吸血
        /// </summary>
        public int Vampire;
        /// <summary>
        /// 提升神盾回复速度万分比
        /// </summary>
        public int SpPercent;
        /// <summary>
        /// 神圣攻击
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 野性伤害系数（万分比）
        /// </summary>
        public int CrazyDmg;
        /// <summary>
        /// 极品掉落提升（万分比）
        /// </summary>
        public int BossDiaoluo;
        /// <summary>
        /// 连击技能对怪伤害增加
        /// </summary>
        public int ComboSkillMonHurtAdd;
        /// <summary>
        /// 连击技能对人伤害增加
        /// </summary>
        public int ComboSkillRoleHurtAdd;
        /// <summary>
        /// 连击技能能量恢复增加比
        /// </summary>
        public int ComboSkillEnergyAddPct;
        /// <summary>
        /// 连击伤害减免
        /// </summary>
        public int ReduceComboSkillHurt;
        /// <summary>
        /// 心魔万分比攻击
        /// </summary>
        public int InnerDemonsAtkPer;
        /// <summary>
        /// 心魔万分比防御
        /// </summary>
        public int InnerDemonsDefPer;
        /// <summary>
        /// 药品回复效率（万分比）
        /// </summary>
        public int DrugsEffect;
        /// <summary>
        /// 装备基础属性万分比
        /// </summary>
        public int SuitAttrPer;
        /// <summary>
        /// BuffID
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 特殊效果描述
        /// </summary>
        public string Des;
        /// <summary>
        /// 属性索引
        /// </summary>
        public int ShuxingIndex;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            HP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            Curse = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            BaseHpCent = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            Vampire = bytes.ReadInt();
            SpPercent = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            CrazyDmg = bytes.ReadInt();
            BossDiaoluo = bytes.ReadInt();
            ComboSkillMonHurtAdd = bytes.ReadInt();
            ComboSkillRoleHurtAdd = bytes.ReadInt();
            ComboSkillEnergyAddPct = bytes.ReadInt();
            ReduceComboSkillHurt = bytes.ReadInt();
            InnerDemonsAtkPer = bytes.ReadInt();
            InnerDemonsDefPer = bytes.ReadInt();
            DrugsEffect = bytes.ReadInt();
            SuitAttrPer = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            Des = bytes.ReadUTF();
            ShuxingIndex = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(HP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(Curse);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(BaseHpCent);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(Vampire);
            bytes.WriteInt(SpPercent);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(CrazyDmg);
            bytes.WriteInt(BossDiaoluo);
            bytes.WriteInt(ComboSkillMonHurtAdd);
            bytes.WriteInt(ComboSkillRoleHurtAdd);
            bytes.WriteInt(ComboSkillEnergyAddPct);
            bytes.WriteInt(ReduceComboSkillHurt);
            bytes.WriteInt(InnerDemonsAtkPer);
            bytes.WriteInt(InnerDemonsDefPer);
            bytes.WriteInt(DrugsEffect);
            bytes.WriteInt(SuitAttrPer);
            bytes.WriteInt(BuffID);
            bytes.WriteUTF(Des);
            bytes.WriteInt(ShuxingIndex);
        }
    }

    public class NewSuitAttributeTemplateMode : TplMode
    {
        private IList<NewSuitAttributeTemplate> mList = null;

        public NewSuitAttributeTemplateMode(int step) : base("NewSuitAttributeTemplate", typeof(NewSuitAttributeTemplate), step) { }

        public NewSuitAttributeTemplate this[int id]
        {
            get { return Find<NewSuitAttributeTemplate>(id); }
        }

        public NewSuitAttributeTemplate Find(int id)
        {
            return Find<NewSuitAttributeTemplate>(id);
        }

        public IList<NewSuitAttributeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NewSuitAttributeTemplate>();
            return mList;
        }
    }

public class NewSuitTemplate : Tpl
    {
        /// <summary>
        /// 套装名
        /// </summary>
        public string Name;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 子类型
        /// </summary>
        public int SubType;
        /// <summary>
        /// 第几套
        /// </summary>
        public int Set;
        /// <summary>
        /// 激活所需条件（客户端）
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 需要套装数目及效果ID
        /// </summary>
        public string Suit;
        /// <summary>
        /// 装备列表
        /// </summary>
        public string EquipIDlist;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            SubType = bytes.ReadInt();
            Set = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            Suit = bytes.ReadUTF();
            EquipIDlist = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(SubType);
            bytes.WriteInt(Set);
            bytes.WriteInt(NeedLv);
            bytes.WriteUTF(Suit);
            bytes.WriteUTF(EquipIDlist);
        }
    }

    public class NewSuitTemplateMode : TplMode
    {
        private IList<NewSuitTemplate> mList = null;

        public NewSuitTemplateMode(int step) : base("NewSuitTemplate", typeof(NewSuitTemplate), step) { }

        public NewSuitTemplate this[int id]
        {
            get { return Find<NewSuitTemplate>(id); }
        }

        public NewSuitTemplate Find(int id)
        {
            return Find<NewSuitTemplate>(id);
        }

        public IList<NewSuitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NewSuitTemplate>();
            return mList;
        }
    }

public class StrengthLVSuitTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 强化等级
        /// </summary>
        public int StrengthenLV;
        /// <summary>
        /// 需要套装数目及效果ID
        /// </summary>
        public string Suit;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            StrengthenLV = bytes.ReadInt();
            Suit = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(StrengthenLV);
            bytes.WriteUTF(Suit);
        }
    }

    public class StrengthLVSuitTemplateMode : TplMode
    {
        private IList<StrengthLVSuitTemplate> mList = null;

        public StrengthLVSuitTemplateMode(int step) : base("StrengthLVSuitTemplate", typeof(StrengthLVSuitTemplate), step) { }

        public StrengthLVSuitTemplate this[int id]
        {
            get { return Find<StrengthLVSuitTemplate>(id); }
        }

        public StrengthLVSuitTemplate Find(int id)
        {
            return Find<StrengthLVSuitTemplate>(id);
        }

        public IList<StrengthLVSuitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<StrengthLVSuitTemplate>();
            return mList;
        }
    }

public class EquipIDSuitTemplate : Tpl
    {
        /// <summary>
        /// 装备数量
        /// </summary>
        public int Number;
        /// <summary>
        /// 需要强化等级及效果ID
        /// </summary>
        public string Suit;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Number = bytes.ReadInt();
            Suit = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Number);
            bytes.WriteUTF(Suit);
        }
    }

    public class EquipIDSuitTemplateMode : TplMode
    {
        private IList<EquipIDSuitTemplate> mList = null;

        public EquipIDSuitTemplateMode(int step) : base("EquipIDSuitTemplate", typeof(EquipIDSuitTemplate), step) { }

        public EquipIDSuitTemplate this[int id]
        {
            get { return Find<EquipIDSuitTemplate>(id); }
        }

        public EquipIDSuitTemplate Find(int id)
        {
            return Find<EquipIDSuitTemplate>(id);
        }

        public IList<EquipIDSuitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<EquipIDSuitTemplate>();
            return mList;
        }
    }

public class FashionSuitTemplate : Tpl
    {
        /// <summary>
        /// 时装套装名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 需要套装数量及效果ID
        /// </summary>
        public string FashionSuit;
        /// <summary>
        /// 时装列表
        /// </summary>
        public string FashionList;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            FashionSuit = bytes.ReadUTF();
            FashionList = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(FashionSuit);
            bytes.WriteUTF(FashionList);
        }
    }

    public class FashionSuitTemplateMode : TplMode
    {
        private IList<FashionSuitTemplate> mList = null;

        public FashionSuitTemplateMode(int step) : base("FashionSuitTemplate", typeof(FashionSuitTemplate), step) { }

        public FashionSuitTemplate this[int id]
        {
            get { return Find<FashionSuitTemplate>(id); }
        }

        public FashionSuitTemplate Find(int id)
        {
            return Find<FashionSuitTemplate>(id);
        }

        public IList<FashionSuitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FashionSuitTemplate>();
            return mList;
        }
    }

public class TumoLvTemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 心魔等阶
        /// </summary>
        public int Order;
        /// <summary>
        /// 小级
        /// </summary>
        public int star;
        /// <summary>
        /// 等阶显示
        /// </summary>
        public string LvName;
        /// <summary>
        /// 界面特效ID
        /// </summary>
        public int EffectID;
        /// <summary>
        /// 升级点数
        /// </summary>
        public int Points;
        /// <summary>
        /// 英雄对BOSS增伤值
        /// </summary>
        public int AddBossHurtValue;
        /// <summary>
        /// BOSS掉率增加（假）
        /// </summary>
        public int BossDiaoluo;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Lv = bytes.ReadInt();
            Order = bytes.ReadInt();
            star = bytes.ReadInt();
            LvName = bytes.ReadUTF();
            EffectID = bytes.ReadInt();
            Points = bytes.ReadInt();
            AddBossHurtValue = bytes.ReadInt();
            BossDiaoluo = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Lv);
            bytes.WriteInt(Order);
            bytes.WriteInt(star);
            bytes.WriteUTF(LvName);
            bytes.WriteInt(EffectID);
            bytes.WriteInt(Points);
            bytes.WriteInt(AddBossHurtValue);
            bytes.WriteInt(BossDiaoluo);
            bytes.WriteInt(NoticeID);
        }
    }

    public class TumoLvTemplateMode : TplMode
    {
        private IList<TumoLvTemplate> mList = null;

        public TumoLvTemplateMode(int step) : base("TumoLvTemplate", typeof(TumoLvTemplate), step) { }

        public TumoLvTemplate this[int id]
        {
            get { return Find<TumoLvTemplate>(id); }
        }

        public TumoLvTemplate Find(int id)
        {
            return Find<TumoLvTemplate>(id);
        }

        public IList<TumoLvTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TumoLvTemplate>();
            return mList;
        }
    }

public class InvestmentTemplate : Tpl
    {
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 类型（1.青铜 2.白银 3.黄金）
        /// </summary>
        public int Type;
        /// <summary>
        /// 货币类型（1.元宝，2.绑元，3.绑金，4.金币）
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 投资奖励（天数#奖励1|数量，奖励2|数量$天数...）
        /// </summary>
        public string InvestmentAward;
        /// <summary>
        /// 职业（1.战士 2.法师 3.道士）
        /// </summary>
        public int job;
        /// <summary>
        /// 第几天开始可以购买
        /// </summary>
        public int BeginDay;
        /// <summary>
        /// 第几天开始禁止购买
        /// </summary>
        public int EndDay;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            InvestmentAward = bytes.ReadUTF();
            job = bytes.ReadInt();
            BeginDay = bytes.ReadInt();
            EndDay = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteUTF(InvestmentAward);
            bytes.WriteInt(job);
            bytes.WriteInt(BeginDay);
            bytes.WriteInt(EndDay);
        }
    }

    public class InvestmentTemplateMode : TplMode
    {
        private IList<InvestmentTemplate> mList = null;

        public InvestmentTemplateMode(int step) : base("InvestmentTemplate", typeof(InvestmentTemplate), step) { }

        public InvestmentTemplate this[int id]
        {
            get { return Find<InvestmentTemplate>(id); }
        }

        public InvestmentTemplate Find(int id)
        {
            return Find<InvestmentTemplate>(id);
        }

        public IList<InvestmentTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<InvestmentTemplate>();
            return mList;
        }
    }

public class NewBossChallengeTemplate : Tpl
    {
        /// <summary>
        /// BOSS类型（0.悬赏、1复古，2异界，3狂暴，4绝迹  5.第三大陆复古  6.第三大陆异界  7.第三大陆狂暴  8.第三大陆绝迹）
        /// </summary>
        public int Type;
        /// <summary>
        /// 稀有BOSS组
        /// </summary>
        public int Subtype;
        /// <summary>
        /// 等级显示
        /// </summary>
        public string ShowRace;
        /// <summary>
        /// 怪物组id
        /// </summary>
        public int GroupID;
        /// <summary>
        /// BOSS列表名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 是否统计的是批次刷怪
        /// </summary>
        public int IsStatisticsBatch;
        /// <summary>
        /// 列表显示条件（转升等级限制）
        /// </summary>
        public int Limit;
        /// <summary>
        /// 列表显示条件天数（开服i天数）
        /// </summary>
        public int ShowDays;
        /// <summary>
        /// 子类编号
        /// </summary>
        public int TabType;
        /// <summary>
        /// 子类名称
        /// </summary>
        public string TypeName;
        /// <summary>
        /// bossid1
        /// </summary>
        public int BossID1;
        /// <summary>
        /// 地图id组
        /// </summary>
        public string MapID;
        /// <summary>
        /// BOSS挑战链接信息
        /// </summary>
        public string TransportPoint;
        /// <summary>
        /// 掉落展示
        /// </summary>
        public int DropID;
        /// <summary>
        /// 怪物头像
        /// </summary>
        public int ShowHead;
        /// <summary>
        /// 界面展示纸娃娃ID
        /// </summary>
        public int ShowAssetID;
        /// <summary>
        /// 界面展示纸娃娃ID2
        /// </summary>
        public int ShowAssetID2;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Subtype = bytes.ReadInt();
            ShowRace = bytes.ReadUTF();
            GroupID = bytes.ReadInt();
            Name = bytes.ReadUTF();
            IsStatisticsBatch = bytes.ReadInt();
            Limit = bytes.ReadInt();
            ShowDays = bytes.ReadInt();
            TabType = bytes.ReadInt();
            TypeName = bytes.ReadUTF();
            BossID1 = bytes.ReadInt();
            MapID = bytes.ReadUTF();
            TransportPoint = bytes.ReadUTF();
            DropID = bytes.ReadInt();
            ShowHead = bytes.ReadInt();
            ShowAssetID = bytes.ReadInt();
            ShowAssetID2 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Subtype);
            bytes.WriteUTF(ShowRace);
            bytes.WriteInt(GroupID);
            bytes.WriteUTF(Name);
            bytes.WriteInt(IsStatisticsBatch);
            bytes.WriteInt(Limit);
            bytes.WriteInt(ShowDays);
            bytes.WriteInt(TabType);
            bytes.WriteUTF(TypeName);
            bytes.WriteInt(BossID1);
            bytes.WriteUTF(MapID);
            bytes.WriteUTF(TransportPoint);
            bytes.WriteInt(DropID);
            bytes.WriteInt(ShowHead);
            bytes.WriteInt(ShowAssetID);
            bytes.WriteInt(ShowAssetID2);
        }
    }

    public class NewBossChallengeTemplateMode : TplMode
    {
        private IList<NewBossChallengeTemplate> mList = null;

        public NewBossChallengeTemplateMode(int step) : base("NewBossChallengeTemplate", typeof(NewBossChallengeTemplate), step) { }

        public NewBossChallengeTemplate this[int id]
        {
            get { return Find<NewBossChallengeTemplate>(id); }
        }

        public NewBossChallengeTemplate Find(int id)
        {
            return Find<NewBossChallengeTemplate>(id);
        }

        public IList<NewBossChallengeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NewBossChallengeTemplate>();
            return mList;
        }
    }

public class BossChallengeTemplate : Tpl
    {
        /// <summary>
        /// 挑战名
        /// </summary>
        public string Name;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// BOSS挑战链接信息
        /// （游戏中只显示第一个地图ID信息，第二个地图ID和坐标供传送，NPCID）
        /// 第一个是发给服务器的地图id（前端用于显示名字）
        /// 第二个是前端判断是否能进入该地图
        /// 第三和第四是后端使用的传送坐标
        /// 第五是npcID（未填写则不读，填写则传送到对应npc）
        /// </summary>
        public string TransportPoint;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonID;
        /// <summary>
        /// 场景ID
        /// </summary>
        public int DungeonID;
        /// <summary>
        /// 刷新时间
        /// </summary>
        public string Time;
        /// <summary>
        /// 界面展示纸娃娃ID
        /// </summary>
        public int ShowAssetID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            TransportPoint = bytes.ReadUTF();
            MonID = bytes.ReadInt();
            DungeonID = bytes.ReadInt();
            Time = bytes.ReadUTF();
            ShowAssetID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteUTF(TransportPoint);
            bytes.WriteInt(MonID);
            bytes.WriteInt(DungeonID);
            bytes.WriteUTF(Time);
            bytes.WriteInt(ShowAssetID);
        }
    }

    public class BossChallengeTemplateMode : TplMode
    {
        private IList<BossChallengeTemplate> mList = null;

        public BossChallengeTemplateMode(int step) : base("BossChallengeTemplate", typeof(BossChallengeTemplate), step) { }

        public BossChallengeTemplate this[int id]
        {
            get { return Find<BossChallengeTemplate>(id); }
        }

        public BossChallengeTemplate Find(int id)
        {
            return Find<BossChallengeTemplate>(id);
        }

        public IList<BossChallengeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<BossChallengeTemplate>();
            return mList;
        }
    }

public class TreasureElvesTemplate : Tpl
    {
        /// <summary>
        /// 精灵类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 阶
        /// </summary>
        public int Grade;
        /// <summary>
        /// 星级
        /// </summary>
        public int Stars;
        /// <summary>
        /// 等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 升级需要等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int State;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int GoldType;
        /// <summary>
        /// 消耗金币
        /// </summary>
        public int GoldCost;
        /// <summary>
        /// 升级材料消耗
        /// </summary>
        public int CostItem;
        /// <summary>
        /// 升级材料
        /// 消耗数量
        /// </summary>
        public int CostItemNum;
        /// <summary>
        /// 描述
        /// </summary>
        public string Lore;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 内功值
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 对BOSS伤害（万分比）
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对BOSS减免（万分比）
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// 极品掉率加成（万分比）
        /// </summary>
        public int AddBaptizeRate;
        /// <summary>
        /// 药品回复效率
        /// </summary>
        public int DrugsEffect;
        /// <summary>
        /// 大暴概率（万分比）
        /// </summary>
        public int AddDoubleDropRate;
        /// <summary>
        /// 石化等级
        /// </summary>
        public int ConfuseLv;
        /// <summary>
        /// 脱战时间(s)
        /// </summary>
        public int LeaveBattleTime;
        /// <summary>
        /// 特殊效果
        /// </summary>
        public string BuffID;
        /// <summary>
        /// 效果名称
        /// </summary>
        public string EffectName;
        /// <summary>
        /// 当前等级效果
        /// </summary>
        public string EffectTips;
        /// <summary>
        /// 下级效果
        /// </summary>
        public string NextEffectTips;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Job = bytes.ReadInt();
            Grade = bytes.ReadInt();
            Stars = bytes.ReadInt();
            Lv = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            State = bytes.ReadInt();
            GoldType = bytes.ReadInt();
            GoldCost = bytes.ReadInt();
            CostItem = bytes.ReadInt();
            CostItemNum = bytes.ReadInt();
            Lore = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            AddBaptizeRate = bytes.ReadInt();
            DrugsEffect = bytes.ReadInt();
            AddDoubleDropRate = bytes.ReadInt();
            ConfuseLv = bytes.ReadInt();
            LeaveBattleTime = bytes.ReadInt();
            BuffID = bytes.ReadUTF();
            EffectName = bytes.ReadUTF();
            EffectTips = bytes.ReadUTF();
            NextEffectTips = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Job);
            bytes.WriteInt(Grade);
            bytes.WriteInt(Stars);
            bytes.WriteInt(Lv);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(State);
            bytes.WriteInt(GoldType);
            bytes.WriteInt(GoldCost);
            bytes.WriteInt(CostItem);
            bytes.WriteInt(CostItemNum);
            bytes.WriteUTF(Lore);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(AddBaptizeRate);
            bytes.WriteInt(DrugsEffect);
            bytes.WriteInt(AddDoubleDropRate);
            bytes.WriteInt(ConfuseLv);
            bytes.WriteInt(LeaveBattleTime);
            bytes.WriteUTF(BuffID);
            bytes.WriteUTF(EffectName);
            bytes.WriteUTF(EffectTips);
            bytes.WriteUTF(NextEffectTips);
        }
    }

    public class TreasureElvesTemplateMode : TplMode
    {
        private IList<TreasureElvesTemplate> mList = null;

        public TreasureElvesTemplateMode(int step) : base("TreasureElvesTemplate", typeof(TreasureElvesTemplate), step) { }

        public TreasureElvesTemplate this[int id]
        {
            get { return Find<TreasureElvesTemplate>(id); }
        }

        public TreasureElvesTemplate Find(int id)
        {
            return Find<TreasureElvesTemplate>(id);
        }

        public IList<TreasureElvesTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TreasureElvesTemplate>();
            return mList;
        }
    }

public class ElvesTemplate : Tpl
    {
        /// <summary>
        /// 精灵类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 默认精灵
        /// </summary>
        public int Default;
        /// <summary>
        /// 资源ID
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 界面展示纸娃娃ID
        /// </summary>
        public int ShowAssetID;
        /// <summary>
        /// 界面头像
        /// </summary>
        public int Avatar;
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 名称高度
        /// </summary>
        public int High;
        /// <summary>
        /// 特殊能力1
        /// </summary>
        public int BUFFID1;
        /// <summary>
        /// 商城物品ID
        /// </summary>
        public int MallItemID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Default = bytes.ReadInt();
            AssetID = bytes.ReadInt();
            ShowAssetID = bytes.ReadInt();
            Avatar = bytes.ReadInt();
            Name = bytes.ReadUTF();
            High = bytes.ReadInt();
            BUFFID1 = bytes.ReadInt();
            MallItemID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Default);
            bytes.WriteInt(AssetID);
            bytes.WriteInt(ShowAssetID);
            bytes.WriteInt(Avatar);
            bytes.WriteUTF(Name);
            bytes.WriteInt(High);
            bytes.WriteInt(BUFFID1);
            bytes.WriteInt(MallItemID);
        }
    }

    public class ElvesTemplateMode : TplMode
    {
        private IList<ElvesTemplate> mList = null;

        public ElvesTemplateMode(int step) : base("ElvesTemplate", typeof(ElvesTemplate), step) { }

        public ElvesTemplate this[int id]
        {
            get { return Find<ElvesTemplate>(id); }
        }

        public ElvesTemplate Find(int id)
        {
            return Find<ElvesTemplate>(id);
        }

        public IList<ElvesTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ElvesTemplate>();
            return mList;
        }
    }

public class BreakTemplate : Tpl
    {
        /// <summary>
        /// 职业判定
        /// </summary>
        public int Job;
        /// <summary>
        /// 需求点数
        /// </summary>
        public int Point;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法值
        /// </summary>
        public int MP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 基础生命万分比
        /// </summary>
        public int BaseHpCent;
        /// <summary>
        /// 等级上限
        /// </summary>
        public int MaxLv;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Point = bytes.ReadInt();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            BaseHpCent = bytes.ReadInt();
            MaxLv = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Point);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(BaseHpCent);
            bytes.WriteInt(MaxLv);
            bytes.WriteInt(NoticeID);
        }
    }

    public class BreakTemplateMode : TplMode
    {
        private IList<BreakTemplate> mList = null;

        public BreakTemplateMode(int step) : base("BreakTemplate", typeof(BreakTemplate), step) { }

        public BreakTemplate this[int id]
        {
            get { return Find<BreakTemplate>(id); }
        }

        public BreakTemplate Find(int id)
        {
            return Find<BreakTemplate>(id);
        }

        public IList<BreakTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<BreakTemplate>();
            return mList;
        }
    }

public class LogTypeTemplate : Tpl
    {
        /// <summary>
        /// 行为
        /// </summary>
        public string LogTypeText;
        /// <summary>
        /// 备注1
        /// </summary>
        public string Note1;
        /// <summary>
        /// 备注2
        /// </summary>
        public string Note2;
        /// <summary>
        /// 备注3
        /// </summary>
        public string Note3;
        /// <summary>
        /// 备注4
        /// </summary>
        public string Note4;
        /// <summary>
        /// 备注5
        /// </summary>
        public string Note5;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LogTypeText = bytes.ReadUTF();
            Note1 = bytes.ReadUTF();
            Note2 = bytes.ReadUTF();
            Note3 = bytes.ReadUTF();
            Note4 = bytes.ReadUTF();
            Note5 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(LogTypeText);
            bytes.WriteUTF(Note1);
            bytes.WriteUTF(Note2);
            bytes.WriteUTF(Note3);
            bytes.WriteUTF(Note4);
            bytes.WriteUTF(Note5);
        }
    }

    public class LogTypeTemplateMode : TplMode
    {
        private IList<LogTypeTemplate> mList = null;

        public LogTypeTemplateMode(int step) : base("LogTypeTemplate", typeof(LogTypeTemplate), step) { }

        public LogTypeTemplate this[int id]
        {
            get { return Find<LogTypeTemplate>(id); }
        }

        public LogTypeTemplate Find(int id)
        {
            return Find<LogTypeTemplate>(id);
        }

        public IList<LogTypeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LogTypeTemplate>();
            return mList;
        }
    }

public class NewLegendRoadTemplate : Tpl
    {
        /// <summary>
        /// 副本TID
        /// </summary>
        public int MapID;
        /// <summary>
        /// 重数
        /// </summary>
        public int Section;
        /// <summary>
        /// 难度
        /// </summary>
        public int Difficulty;
        /// <summary>
        /// 第几个
        /// </summary>
        public int Page;
        /// <summary>
        /// 怪物图片
        /// </summary>
        public int Icon;
        /// <summary>
        /// 推荐战力
        /// </summary>
        public int Param;
        /// <summary>
        /// 冲层奖励
        /// </summary>
        public string Reward;
        /// <summary>
        /// 额外掉落-消耗货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 额外掉落-消耗货币数量
        /// </summary>
        public int Money;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MapID = bytes.ReadInt();
            Section = bytes.ReadInt();
            Difficulty = bytes.ReadInt();
            Page = bytes.ReadInt();
            Icon = bytes.ReadInt();
            Param = bytes.ReadInt();
            Reward = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            Money = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MapID);
            bytes.WriteInt(Section);
            bytes.WriteInt(Difficulty);
            bytes.WriteInt(Page);
            bytes.WriteInt(Icon);
            bytes.WriteInt(Param);
            bytes.WriteUTF(Reward);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(Money);
        }
    }

    public class NewLegendRoadTemplateMode : TplMode
    {
        private IList<NewLegendRoadTemplate> mList = null;

        public NewLegendRoadTemplateMode(int step) : base("NewLegendRoadTemplate", typeof(NewLegendRoadTemplate), step) { }

        public NewLegendRoadTemplate this[int id]
        {
            get { return Find<NewLegendRoadTemplate>(id); }
        }

        public NewLegendRoadTemplate Find(int id)
        {
            return Find<NewLegendRoadTemplate>(id);
        }

        public IList<NewLegendRoadTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NewLegendRoadTemplate>();
            return mList;
        }
    }

public class LegendRoadListTemplate : Tpl
    {
        /// <summary>
        /// 难度
        /// </summary>
        public int Difficulty;
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 通天塔重奖励
        /// </summary>
        public string AwardList;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Difficulty = bytes.ReadInt();
            Name = bytes.ReadUTF();
            AwardList = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Difficulty);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(AwardList);
        }
    }

    public class LegendRoadListTemplateMode : TplMode
    {
        private IList<LegendRoadListTemplate> mList = null;

        public LegendRoadListTemplateMode(int step) : base("LegendRoadListTemplate", typeof(LegendRoadListTemplate), step) { }

        public LegendRoadListTemplate this[int id]
        {
            get { return Find<LegendRoadListTemplate>(id); }
        }

        public LegendRoadListTemplate Find(int id)
        {
            return Find<LegendRoadListTemplate>(id);
        }

        public IList<LegendRoadListTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LegendRoadListTemplate>();
            return mList;
        }
    }

public class FuMoBossAndAwardTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int Statelvl;
        /// <summary>
        /// BOSS刷新时间
        /// </summary>
        public int Time;
        /// <summary>
        /// BOSSID
        /// </summary>
        public int BossID;
        /// <summary>
        /// BOSS刷新坐标
        /// </summary>
        public string position;
        /// <summary>
        /// 第1名排名奖励
        /// </summary>
        public string AwardsConf1;
        /// <summary>
        /// 第2名排名奖励
        /// </summary>
        public string AwardsConf2;
        /// <summary>
        /// 3~5排名奖励
        /// </summary>
        public string AwardsConf3;
        /// <summary>
        /// 其他排名奖励（参与奖）
        /// </summary>
        public string AwardsConf4;
        /// <summary>
        /// 第1名排名奖励
        /// </summary>
        public string CycleAwardsConf1;
        /// <summary>
        /// 第2名排名奖励
        /// </summary>
        public string CycleAwardsConf2;
        /// <summary>
        /// 3~5排名奖励
        /// </summary>
        public string CycleAwardsConf3;
        /// <summary>
        /// 其他排名奖励（参与奖）
        /// </summary>
        public string CycleAwardsConf4;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Statelvl = bytes.ReadInt();
            Time = bytes.ReadInt();
            BossID = bytes.ReadInt();
            position = bytes.ReadUTF();
            AwardsConf1 = bytes.ReadUTF();
            AwardsConf2 = bytes.ReadUTF();
            AwardsConf3 = bytes.ReadUTF();
            AwardsConf4 = bytes.ReadUTF();
            CycleAwardsConf1 = bytes.ReadUTF();
            CycleAwardsConf2 = bytes.ReadUTF();
            CycleAwardsConf3 = bytes.ReadUTF();
            CycleAwardsConf4 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Statelvl);
            bytes.WriteInt(Time);
            bytes.WriteInt(BossID);
            bytes.WriteUTF(position);
            bytes.WriteUTF(AwardsConf1);
            bytes.WriteUTF(AwardsConf2);
            bytes.WriteUTF(AwardsConf3);
            bytes.WriteUTF(AwardsConf4);
            bytes.WriteUTF(CycleAwardsConf1);
            bytes.WriteUTF(CycleAwardsConf2);
            bytes.WriteUTF(CycleAwardsConf3);
            bytes.WriteUTF(CycleAwardsConf4);
        }
    }

    public class FuMoBossAndAwardTemplateMode : TplMode
    {
        private IList<FuMoBossAndAwardTemplate> mList = null;

        public FuMoBossAndAwardTemplateMode(int step) : base("FuMoBossAndAwardTemplate", typeof(FuMoBossAndAwardTemplate), step) { }

        public FuMoBossAndAwardTemplate this[int id]
        {
            get { return Find<FuMoBossAndAwardTemplate>(id); }
        }

        public FuMoBossAndAwardTemplate Find(int id)
        {
            return Find<FuMoBossAndAwardTemplate>(id);
        }

        public IList<FuMoBossAndAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FuMoBossAndAwardTemplate>();
            return mList;
        }
    }

public class QuestionsTemplate : Tpl
    {
        /// <summary>
        /// 题目文本
        /// </summary>
        public string Questions;
        /// <summary>
        /// 正确答案
        /// </summary>
        public string Correct;
        /// <summary>
        /// 错误答案1
        /// </summary>
        public string Wrong1;
        /// <summary>
        /// 错误答案2
        /// </summary>
        public string Wrong2;
        /// <summary>
        /// 错误答案3
        /// </summary>
        public string Wrong3;
        /// <summary>
        /// 答案总数
        /// </summary>
        public int Data2;
        /// <summary>
        /// 开放天数
        /// </summary>
        public int Day;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Questions = bytes.ReadUTF();
            Correct = bytes.ReadUTF();
            Wrong1 = bytes.ReadUTF();
            Wrong2 = bytes.ReadUTF();
            Wrong3 = bytes.ReadUTF();
            Data2 = bytes.ReadInt();
            Day = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Questions);
            bytes.WriteUTF(Correct);
            bytes.WriteUTF(Wrong1);
            bytes.WriteUTF(Wrong2);
            bytes.WriteUTF(Wrong3);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Day);
        }
    }

    public class QuestionsTemplateMode : TplMode
    {
        private IList<QuestionsTemplate> mList = null;

        public QuestionsTemplateMode(int step) : base("QuestionsTemplate", typeof(QuestionsTemplate), step) { }

        public QuestionsTemplate this[int id]
        {
            get { return Find<QuestionsTemplate>(id); }
        }

        public QuestionsTemplate Find(int id)
        {
            return Find<QuestionsTemplate>(id);
        }

        public IList<QuestionsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<QuestionsTemplate>();
            return mList;
        }
    }

public class VIPTemplate : Tpl
    {
        /// <summary>
        /// 升级所需元宝
        /// </summary>
        public int LvIgnot;
        /// <summary>
        /// 专属聊天标识（1:true 0:false）
        /// </summary>
        public int ExclusiveChatLogo;
        /// <summary>
        /// VIP攻击BUFFID
        /// </summary>
        public int VIPAttackBuffID;
        /// <summary>
        /// 每日多倍经验(服务端读)
        /// </summary>
        public int DailyMultiExp;
        /// <summary>
        /// VipBuff使用次数
        /// </summary>
        public int ExpVipCount;
        /// <summary>
        /// 每日原地复活
        /// </summary>
        public int DailyResurrection;
        /// <summary>
        /// VIP等级礼包
        /// </summary>
        public string BeiZhuVIPLvWarp;
        /// <summary>
        /// VIP等级礼包（男战士）
        /// </summary>
        public string VIPLvWarpManZ;
        /// <summary>
        /// VIP等级礼包（女战士）
        /// </summary>
        public string VIPLvWarpWomanZ;
        /// <summary>
        /// VIP等级礼包（男法师）
        /// </summary>
        public string VIPLvWarpManF;
        /// <summary>
        /// VIP等级礼包（女法师）
        /// </summary>
        public string VIPLvWarpWomanF;
        /// <summary>
        /// VIP等级礼包（男道士）
        /// </summary>
        public string VIPLvWarpManD;
        /// <summary>
        /// VIP等级礼包（女道士）
        /// </summary>
        public string VIPLvWarpWomanD;
        /// <summary>
        /// 图片资源ID
        /// </summary>
        public string BeiZhuIcon;
        /// <summary>
        /// 免费补签增加次数
        /// </summary>
        public int RetroactiveTimes;
        /// <summary>
        /// 每日个人boss增加次数（vip玩家次数=基础次数+对应vip填写的次数）
        /// </summary>
        public int DailyPersonBoss;
        /// <summary>
        /// 增加功勋值万分比
        /// </summary>
        public int AddFeatsPer;
        /// <summary>
        /// 聚灵珠存入经验速度加成
        /// </summary>
        public int AddExpSpeed;
        /// <summary>
        /// 免费领取2倍次数
        /// </summary>
        public int FreeExp;
        /// <summary>
        /// 回收经验加成（万分比）
        /// </summary>
        public int BackExpRise;
        /// <summary>
        /// Vip特权描述
        /// </summary>
        public string VipLore;
        /// <summary>
        /// 祈福次数
        /// </summary>
        public int BlessingsNumber;
        /// <summary>
        /// 免费加星个数
        /// </summary>
        public int FreeAddStar;
        /// <summary>
        /// 能否直接回收矿工背包矿石
        /// </summary>
        public int CanBackMine;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LvIgnot = bytes.ReadInt();
            ExclusiveChatLogo = bytes.ReadInt();
            VIPAttackBuffID = bytes.ReadInt();
            DailyMultiExp = bytes.ReadInt();
            ExpVipCount = bytes.ReadInt();
            DailyResurrection = bytes.ReadInt();
            BeiZhuVIPLvWarp = bytes.ReadUTF();
            VIPLvWarpManZ = bytes.ReadUTF();
            VIPLvWarpWomanZ = bytes.ReadUTF();
            VIPLvWarpManF = bytes.ReadUTF();
            VIPLvWarpWomanF = bytes.ReadUTF();
            VIPLvWarpManD = bytes.ReadUTF();
            VIPLvWarpWomanD = bytes.ReadUTF();
            BeiZhuIcon = bytes.ReadUTF();
            RetroactiveTimes = bytes.ReadInt();
            DailyPersonBoss = bytes.ReadInt();
            AddFeatsPer = bytes.ReadInt();
            AddExpSpeed = bytes.ReadInt();
            FreeExp = bytes.ReadInt();
            BackExpRise = bytes.ReadInt();
            VipLore = bytes.ReadUTF();
            BlessingsNumber = bytes.ReadInt();
            FreeAddStar = bytes.ReadInt();
            CanBackMine = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(LvIgnot);
            bytes.WriteInt(ExclusiveChatLogo);
            bytes.WriteInt(VIPAttackBuffID);
            bytes.WriteInt(DailyMultiExp);
            bytes.WriteInt(ExpVipCount);
            bytes.WriteInt(DailyResurrection);
            bytes.WriteUTF(BeiZhuVIPLvWarp);
            bytes.WriteUTF(VIPLvWarpManZ);
            bytes.WriteUTF(VIPLvWarpWomanZ);
            bytes.WriteUTF(VIPLvWarpManF);
            bytes.WriteUTF(VIPLvWarpWomanF);
            bytes.WriteUTF(VIPLvWarpManD);
            bytes.WriteUTF(VIPLvWarpWomanD);
            bytes.WriteUTF(BeiZhuIcon);
            bytes.WriteInt(RetroactiveTimes);
            bytes.WriteInt(DailyPersonBoss);
            bytes.WriteInt(AddFeatsPer);
            bytes.WriteInt(AddExpSpeed);
            bytes.WriteInt(FreeExp);
            bytes.WriteInt(BackExpRise);
            bytes.WriteUTF(VipLore);
            bytes.WriteInt(BlessingsNumber);
            bytes.WriteInt(FreeAddStar);
            bytes.WriteInt(CanBackMine);
        }
    }

    public class VIPTemplateMode : TplMode
    {
        private IList<VIPTemplate> mList = null;

        public VIPTemplateMode(int step) : base("VIPTemplate", typeof(VIPTemplate), step) { }

        public VIPTemplate this[int id]
        {
            get { return Find<VIPTemplate>(id); }
        }

        public VIPTemplate Find(int id)
        {
            return Find<VIPTemplate>(id);
        }

        public IList<VIPTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<VIPTemplate>();
            return mList;
        }
    }

public class FiveElementsTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 五行类别
        /// </summary>
        public int Types;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 升级所需经验值
        /// </summary>
        public int NeedExp;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 魔攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 魔攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Job = bytes.ReadInt();
            Types = bytes.ReadInt();
            Level = bytes.ReadInt();
            NeedExp = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Job);
            bytes.WriteInt(Types);
            bytes.WriteInt(Level);
            bytes.WriteInt(NeedExp);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(HolyDamage);
        }
    }

    public class FiveElementsTemplateMode : TplMode
    {
        private IList<FiveElementsTemplate> mList = null;

        public FiveElementsTemplateMode(int step) : base("FiveElementsTemplate", typeof(FiveElementsTemplate), step) { }

        public FiveElementsTemplate this[int id]
        {
            get { return Find<FiveElementsTemplate>(id); }
        }

        public FiveElementsTemplate Find(int id)
        {
            return Find<FiveElementsTemplate>(id);
        }

        public IList<FiveElementsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FiveElementsTemplate>();
            return mList;
        }
    }

public class WolongTaskTemplate : Tpl
    {
        /// <summary>
        /// 任务名
        /// </summary>
        public string Name;
        /// <summary>
        /// 任务目标描述
        /// </summary>
        public string Txt;
        /// <summary>
        /// 下个任务
        /// </summary>
        public int Next;
        /// <summary>
        /// 任务需求类型
        /// </summary>
        public int TaskNeedType;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 数量
        /// </summary>
        public int Count;
        /// <summary>
        /// 任务需求前端显示推荐
        /// </summary>
        public string TaskUnFinish;
        /// <summary>
        /// 未完成任务传送点
        /// </summary>
        public string UnFinishPoint;
        /// <summary>
        /// 未完成寻路点
        /// </summary>
        public string UnFinishSeekPoint;
        /// <summary>
        /// 经验奖励
        /// </summary>
        public int Exp;
        /// <summary>
        /// 绑定金币奖励
        /// </summary>
        public int Money;
        /// <summary>
        /// 通用物品奖励
        /// </summary>
        public string Bonus;
        /// <summary>
        /// 可立即完成需求特权
        /// </summary>
        public int NeedPrivilege;
        /// <summary>
        /// 立即完成消耗元宝数量
        /// </summary>
        public int Cost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Txt = bytes.ReadUTF();
            Next = bytes.ReadInt();
            TaskNeedType = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Count = bytes.ReadInt();
            TaskUnFinish = bytes.ReadUTF();
            UnFinishPoint = bytes.ReadUTF();
            UnFinishSeekPoint = bytes.ReadUTF();
            Exp = bytes.ReadInt();
            Money = bytes.ReadInt();
            Bonus = bytes.ReadUTF();
            NeedPrivilege = bytes.ReadInt();
            Cost = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Txt);
            bytes.WriteInt(Next);
            bytes.WriteInt(TaskNeedType);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Count);
            bytes.WriteUTF(TaskUnFinish);
            bytes.WriteUTF(UnFinishPoint);
            bytes.WriteUTF(UnFinishSeekPoint);
            bytes.WriteInt(Exp);
            bytes.WriteInt(Money);
            bytes.WriteUTF(Bonus);
            bytes.WriteInt(NeedPrivilege);
            bytes.WriteInt(Cost);
        }
    }

    public class WolongTaskTemplateMode : TplMode
    {
        private IList<WolongTaskTemplate> mList = null;

        public WolongTaskTemplateMode(int step) : base("WolongTaskTemplate", typeof(WolongTaskTemplate), step) { }

        public WolongTaskTemplate this[int id]
        {
            get { return Find<WolongTaskTemplate>(id); }
        }

        public WolongTaskTemplate Find(int id)
        {
            return Find<WolongTaskTemplate>(id);
        }

        public IList<WolongTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WolongTaskTemplate>();
            return mList;
        }
    }

public class WolongMonsterTemplate : Tpl
    {
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonsterID;
        /// <summary>
        /// 刷新X1坐标
        /// </summary>
        public int BornX1;
        /// <summary>
        /// 刷新Y1坐标
        /// </summary>
        public int BornY1;
        /// <summary>
        /// 刷新X2坐标
        /// </summary>
        public int BornX2;
        /// <summary>
        /// 刷新Y2坐标
        /// </summary>
        public int BornY2;
        /// <summary>
        /// 地图ID
        /// </summary>
        public int MapID;
        /// <summary>
        /// 怪物类型
        /// </summary>
        public int Type;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MonsterID = bytes.ReadInt();
            BornX1 = bytes.ReadInt();
            BornY1 = bytes.ReadInt();
            BornX2 = bytes.ReadInt();
            BornY2 = bytes.ReadInt();
            MapID = bytes.ReadInt();
            Type = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MonsterID);
            bytes.WriteInt(BornX1);
            bytes.WriteInt(BornY1);
            bytes.WriteInt(BornX2);
            bytes.WriteInt(BornY2);
            bytes.WriteInt(MapID);
            bytes.WriteInt(Type);
        }
    }

    public class WolongMonsterTemplateMode : TplMode
    {
        private IList<WolongMonsterTemplate> mList = null;

        public WolongMonsterTemplateMode(int step) : base("WolongMonsterTemplate", typeof(WolongMonsterTemplate), step) { }

        public WolongMonsterTemplate this[int id]
        {
            get { return Find<WolongMonsterTemplate>(id); }
        }

        public WolongMonsterTemplate Find(int id)
        {
            return Find<WolongMonsterTemplate>(id);
        }

        public IList<WolongMonsterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<WolongMonsterTemplate>();
            return mList;
        }
    }

public class MilitaryTaskTimesTemplate : Tpl
    {
        /// <summary>
        /// 任务名
        /// </summary>
        public string Name;
        /// <summary>
        /// 需要的赞助等级
        /// </summary>
        public int VipLv;
        /// <summary>
        /// 接任务需要的元宝数量
        /// </summary>
        public int TakeCost;
        /// <summary>
        /// 每天次数
        /// </summary>
        public int TaskTimes;
        /// <summary>
        /// 购买次数
        /// </summary>
        public int BuyTaskTimes;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 购买花费
        /// </summary>
        public int Coast;
        /// <summary>
        /// 奖励1
        /// </summary>
        public int Bonus1;
        /// <summary>
        /// 奖励2
        /// </summary>
        public int Bonus2;
        /// <summary>
        /// 奖励3
        /// </summary>
        public int Bonus3;
        /// <summary>
        /// 奖励4
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 立即完成价格
        /// </summary>
        public int FinishCoast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            VipLv = bytes.ReadInt();
            TakeCost = bytes.ReadInt();
            TaskTimes = bytes.ReadInt();
            BuyTaskTimes = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            Coast = bytes.ReadInt();
            Bonus1 = bytes.ReadInt();
            Bonus2 = bytes.ReadInt();
            Bonus3 = bytes.ReadInt();
            Bonus4 = bytes.ReadUTF();
            FinishCoast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(VipLv);
            bytes.WriteInt(TakeCost);
            bytes.WriteInt(TaskTimes);
            bytes.WriteInt(BuyTaskTimes);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(Coast);
            bytes.WriteInt(Bonus1);
            bytes.WriteInt(Bonus2);
            bytes.WriteInt(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteInt(FinishCoast);
        }
    }

    public class MilitaryTaskTimesTemplateMode : TplMode
    {
        private IList<MilitaryTaskTimesTemplate> mList = null;

        public MilitaryTaskTimesTemplateMode(int step) : base("MilitaryTaskTimesTemplate", typeof(MilitaryTaskTimesTemplate), step) { }

        public MilitaryTaskTimesTemplate this[int id]
        {
            get { return Find<MilitaryTaskTimesTemplate>(id); }
        }

        public MilitaryTaskTimesTemplate Find(int id)
        {
            return Find<MilitaryTaskTimesTemplate>(id);
        }

        public IList<MilitaryTaskTimesTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MilitaryTaskTimesTemplate>();
            return mList;
        }
    }

public class MilitaryTaskTemplate : Tpl
    {
        /// <summary>
        /// 任务名
        /// </summary>
        public string Name;
        /// <summary>
        /// 任务目标描述
        /// </summary>
        public string Txt;
        /// <summary>
        /// 最小境界等级
        /// </summary>
        public int MinJJLV;
        /// <summary>
        /// 对应威名次数表TID
        /// </summary>
        public int TaskID;
        /// <summary>
        /// 任务需求类型
        /// </summary>
        public int TaskNeedType;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 数量
        /// </summary>
        public int Count;
        /// <summary>
        /// 任务需求前端显示推荐
        /// </summary>
        public string TaskUnFinish;
        /// <summary>
        /// 未完成任务传送点
        /// </summary>
        public string UnFinishPoint;
        /// <summary>
        /// 未完成寻路点
        /// </summary>
        public string UnFinishSeekPoint;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Txt = bytes.ReadUTF();
            MinJJLV = bytes.ReadInt();
            TaskID = bytes.ReadInt();
            TaskNeedType = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Count = bytes.ReadInt();
            TaskUnFinish = bytes.ReadUTF();
            UnFinishPoint = bytes.ReadUTF();
            UnFinishSeekPoint = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Txt);
            bytes.WriteInt(MinJJLV);
            bytes.WriteInt(TaskID);
            bytes.WriteInt(TaskNeedType);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Count);
            bytes.WriteUTF(TaskUnFinish);
            bytes.WriteUTF(UnFinishPoint);
            bytes.WriteUTF(UnFinishSeekPoint);
        }
    }

    public class MilitaryTaskTemplateMode : TplMode
    {
        private IList<MilitaryTaskTemplate> mList = null;

        public MilitaryTaskTemplateMode(int step) : base("MilitaryTaskTemplate", typeof(MilitaryTaskTemplate), step) { }

        public MilitaryTaskTemplate this[int id]
        {
            get { return Find<MilitaryTaskTemplate>(id); }
        }

        public MilitaryTaskTemplate Find(int id)
        {
            return Find<MilitaryTaskTemplate>(id);
        }

        public IList<MilitaryTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MilitaryTaskTemplate>();
            return mList;
        }
    }

public class MilitaryRankTemplate : Tpl
    {
        /// <summary>
        /// 威名名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 所需威望
        /// </summary>
        public uint NeedExp;
        /// <summary>
        /// 每日扣除威望
        /// </summary>
        public int SubtractExp;
        /// <summary>
        /// 增加血量%(万分比)
        /// </summary>
        public int HpCent;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 是否显示
        /// </summary>
        public int IsShow;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Level = bytes.ReadInt();
            NeedExp = bytes.ReadUInt();
            SubtractExp = bytes.ReadInt();
            HpCent = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            IsShow = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Level);
            bytes.WriteUInt(NeedExp);
            bytes.WriteInt(SubtractExp);
            bytes.WriteInt(HpCent);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(IsShow);
            bytes.WriteInt(NoticeID);
        }
    }

    public class MilitaryRankTemplateMode : TplMode
    {
        private IList<MilitaryRankTemplate> mList = null;

        public MilitaryRankTemplateMode(int step) : base("MilitaryRankTemplate", typeof(MilitaryRankTemplate), step) { }

        public MilitaryRankTemplate this[int id]
        {
            get { return Find<MilitaryRankTemplate>(id); }
        }

        public MilitaryRankTemplate Find(int id)
        {
            return Find<MilitaryRankTemplate>(id);
        }

        public IList<MilitaryRankTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MilitaryRankTemplate>();
            return mList;
        }
    }

public class WantStrengTempalte : Tpl
    {
        /// <summary>
        /// 变强类型
        /// </summary>
        public int StrengType;
        /// <summary>
        /// 类型名称
        /// </summary>
        public string TypeName;
        /// <summary>
        /// 子类型
        /// </summary>
        public int SubType;
        /// <summary>
        /// 事件类型
        /// </summary>
        public int EventType;
        /// <summary>
        /// 传送面板NPCid
        /// </summary>
        public int tranceNpcId;
        /// <summary>
        /// 推荐星级
        /// </summary>
        public int StarLv;
        /// <summary>
        /// 事件名
        /// </summary>
        public string EventName;
        /// <summary>
        /// 小提示
        /// </summary>
        public string tips;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            StrengType = bytes.ReadInt();
            TypeName = bytes.ReadUTF();
            SubType = bytes.ReadInt();
            EventType = bytes.ReadInt();
            tranceNpcId = bytes.ReadInt();
            StarLv = bytes.ReadInt();
            EventName = bytes.ReadUTF();
            tips = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(StrengType);
            bytes.WriteUTF(TypeName);
            bytes.WriteInt(SubType);
            bytes.WriteInt(EventType);
            bytes.WriteInt(tranceNpcId);
            bytes.WriteInt(StarLv);
            bytes.WriteUTF(EventName);
            bytes.WriteUTF(tips);
        }
    }

    public class WantStrengTempalteMode : TplMode
    {
        private IList<WantStrengTempalte> mList = null;

        public WantStrengTempalteMode(int step) : base("WantStrengTempalte", typeof(WantStrengTempalte), step) { }

        public WantStrengTempalte this[int id]
        {
            get { return Find<WantStrengTempalte>(id); }
        }

        public WantStrengTempalte Find(int id)
        {
            return Find<WantStrengTempalte>(id);
        }

        public IList<WantStrengTempalte> FindAll()
        {
            if (mList == null) mList = FindAll<WantStrengTempalte>();
            return mList;
        }
    }

public class TreasureTemplate : Tpl
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public int GoodsID;
        /// <summary>
        /// 日期|区间
        /// </summary>
        public string DayAndValue;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int Numb;
        /// <summary>
        /// 显示位置-废弃
        /// </summary>
        public int DisPlay;
        /// <summary>
        /// 是否宝藏记录（0不记录，1记录）
        /// </summary>
        public int Broadcast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            GoodsID = bytes.ReadInt();
            DayAndValue = bytes.ReadUTF();
            Numb = bytes.ReadInt();
            DisPlay = bytes.ReadInt();
            Broadcast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(GoodsID);
            bytes.WriteUTF(DayAndValue);
            bytes.WriteInt(Numb);
            bytes.WriteInt(DisPlay);
            bytes.WriteInt(Broadcast);
        }
    }

    public class TreasureTemplateMode : TplMode
    {
        private IList<TreasureTemplate> mList = null;

        public TreasureTemplateMode(int step) : base("TreasureTemplate", typeof(TreasureTemplate), step) { }

        public TreasureTemplate this[int id]
        {
            get { return Find<TreasureTemplate>(id); }
        }

        public TreasureTemplate Find(int id)
        {
            return Find<TreasureTemplate>(id);
        }

        public IList<TreasureTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TreasureTemplate>();
            return mList;
        }
    }

public class TreasureExtraAwardTemplate : Tpl
    {
        /// <summary>
        /// 开服第几天
        /// </summary>
        public int OpenDays;
        /// <summary>
        /// 开服第几天结束
        /// </summary>
        public int EndDays;
        /// <summary>
        /// 触发条件类型
        /// 0-个人每日，
        /// 1-个人累计，
        /// 2-服务器每日，
        /// 3-服务器累计
        /// 4-个人免费探宝累计
        /// </summary>
        public int Type;
        /// <summary>
        /// 跨天重置0-不重置，1-重置
        /// </summary>
        public int ChangeDayReset;
        /// <summary>
        /// 可以重复领取，0-不可以，1-可以
        /// </summary>
        public int CanRepeat;
        /// <summary>
        /// 最小触发次数
        /// </summary>
        public int Times;
        /// <summary>
        /// 概率
        /// </summary>
        public int Probability;
        /// <summary>
        /// 最大触发次数
        /// </summary>
        public int MaxTimes;
        /// <summary>
        /// 男战士职业包
        /// </summary>
        public int MaleWarrior;
        /// <summary>
        /// 女战士职业包
        /// </summary>
        public int WomanWarrior;
        /// <summary>
        /// 男法师职业包
        /// </summary>
        public int MaleMaster;
        /// <summary>
        /// 女法师职业包
        /// </summary>
        public int WomanMaster;
        /// <summary>
        /// 男道士职业包
        /// </summary>
        public int MaleTaoist;
        /// <summary>
        /// 女道士职业包
        /// </summary>
        public int WomanTaoist;
        /// <summary>
        /// 通用包
        /// </summary>
        public int Common;
        /// <summary>
        /// 日志ID
        /// </summary>
        public int LogType;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            OpenDays = bytes.ReadInt();
            EndDays = bytes.ReadInt();
            Type = bytes.ReadInt();
            ChangeDayReset = bytes.ReadInt();
            CanRepeat = bytes.ReadInt();
            Times = bytes.ReadInt();
            Probability = bytes.ReadInt();
            MaxTimes = bytes.ReadInt();
            MaleWarrior = bytes.ReadInt();
            WomanWarrior = bytes.ReadInt();
            MaleMaster = bytes.ReadInt();
            WomanMaster = bytes.ReadInt();
            MaleTaoist = bytes.ReadInt();
            WomanTaoist = bytes.ReadInt();
            Common = bytes.ReadInt();
            LogType = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(OpenDays);
            bytes.WriteInt(EndDays);
            bytes.WriteInt(Type);
            bytes.WriteInt(ChangeDayReset);
            bytes.WriteInt(CanRepeat);
            bytes.WriteInt(Times);
            bytes.WriteInt(Probability);
            bytes.WriteInt(MaxTimes);
            bytes.WriteInt(MaleWarrior);
            bytes.WriteInt(WomanWarrior);
            bytes.WriteInt(MaleMaster);
            bytes.WriteInt(WomanMaster);
            bytes.WriteInt(MaleTaoist);
            bytes.WriteInt(WomanTaoist);
            bytes.WriteInt(Common);
            bytes.WriteInt(LogType);
        }
    }

    public class TreasureExtraAwardTemplateMode : TplMode
    {
        private IList<TreasureExtraAwardTemplate> mList = null;

        public TreasureExtraAwardTemplateMode(int step) : base("TreasureExtraAwardTemplate", typeof(TreasureExtraAwardTemplate), step) { }

        public TreasureExtraAwardTemplate this[int id]
        {
            get { return Find<TreasureExtraAwardTemplate>(id); }
        }

        public TreasureExtraAwardTemplate Find(int id)
        {
            return Find<TreasureExtraAwardTemplate>(id);
        }

        public IList<TreasureExtraAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TreasureExtraAwardTemplate>();
            return mList;
        }
    }

public class ItemLimitTemplate : Tpl
    {
        /// <summary>
        /// 每日使用次数
        /// </summary>
        public int DayTime;
        /// <summary>
        /// vip额外次数
        /// </summary>
        public string VipExtraTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            DayTime = bytes.ReadInt();
            VipExtraTime = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(DayTime);
            bytes.WriteUTF(VipExtraTime);
        }
    }

    public class ItemLimitTemplateMode : TplMode
    {
        private IList<ItemLimitTemplate> mList = null;

        public ItemLimitTemplateMode(int step) : base("ItemLimitTemplate", typeof(ItemLimitTemplate), step) { }

        public ItemLimitTemplate this[int id]
        {
            get { return Find<ItemLimitTemplate>(id); }
        }

        public ItemLimitTemplate Find(int id)
        {
            return Find<ItemLimitTemplate>(id);
        }

        public IList<ItemLimitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ItemLimitTemplate>();
            return mList;
        }
    }

public class Itemtemplate : Tpl
    {
        /// <summary>
        /// 图标资源
        /// </summary>
        public int Icon;
        /// <summary>
        /// 场景资源（武器和衣服才有对应的id）
        /// </summary>
        public int SceneImage;
        /// <summary>
        /// 显示名称
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 是否装备
        /// </summary>
        public int Type;
        /// <summary>
        /// 品质
        /// </summary>
        public int Quality;
        /// <summary>
        /// 特效ID
        /// </summary>
        public int EffectID;
        /// <summary>
        /// 特效ID2
        /// </summary>
        public string EffectID2;
        /// <summary>
        /// 场景特效ID
        /// </summary>
        public string MapEffectID;
        /// <summary>
        /// Tips特效
        /// </summary>
        public int TipsEffect;
        /// <summary>
        /// 物品掉落声音
        /// </summary>
        public string DropSound;
        /// <summary>
        /// 使用等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 最大使用等级
        /// </summary>
        public int MaxUseLv;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int State;
        /// <summary>
        /// 心魔等阶
        /// </summary>
        public int DemoLv;
        /// <summary>
        /// 培养等级
        /// </summary>
        public int BreedLv;
        /// <summary>
        /// 性别
        /// </summary>
        public int Sex;
        /// <summary>
        /// 职业
        /// </summary>
        public int Job;
        /// <summary>
        /// 可叠加数
        /// </summary>
        public int Numb;
        /// <summary>
        /// 是否可摧毁
        /// </summary>
        public int Destroy;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int Binding;
        /// <summary>
        /// 激活打金卡后
        /// 是否可上架拍卖行
        /// </summary>
        public int GoldCardSale;
        /// <summary>
        /// 过期时间
        /// </summary>
        public int ExpireTime;
        /// <summary>
        /// 是否公告
        /// </summary>
        public int BroadCast;
        /// <summary>
        /// 使用触发公告ID
        /// </summary>
        public int UseNotice;
        /// <summary>
        /// 是否后台记录
        /// </summary>
        public int NeedLog;
        /// <summary>
        /// 排序ID
        /// </summary>
        public int SortID;
        /// <summary>
        /// 主宰描述
        /// </summary>
        public string GodLore;
        /// <summary>
        /// 物品描述（物品的描述由物品描述+物品描述1组成，优先配置物品描述）
        /// </summary>
        public string Lore;
        /// <summary>
        /// 物品描述1（配置的描述有3职业区分）
        /// </summary>
        public string Lore1;
        /// <summary>
        /// 套装ID
        /// </summary>
        public int SuitID;
        /// <summary>
        /// 套装ID2
        /// </summary>
        public int SuitID2;
        /// <summary>
        /// 出售货币类型
        /// </summary>
        public int SellMoneyType;
        /// <summary>
        /// 出售价格
        /// </summary>
        public int SellPrice;
        /// <summary>
        /// 元宝拍卖区间
        /// </summary>
        public string Auctiongold1;
        /// <summary>
        /// 钻石拍卖区间
        /// </summary>
        public string Auctiongold2;
        /// <summary>
        /// 拍卖时
        /// 是否可被系统回收
        /// </summary>
        public int SystemAuction;
        /// <summary>
        /// 拍卖时
        /// 价格区间|回收概率
        /// </summary>
        public string SystemAuctionPct;
        /// <summary>
        /// 拍卖时
        /// 概率上限按天数变化
        /// </summary>
        public string PctIncreasing;
        /// <summary>
        /// 拍卖行
        /// 套装推送价格
        /// </summary>
        public string SuitAuctionPrice;
        /// <summary>
        /// 熔炼类别
        /// </summary>
        public int MeltType;
        /// <summary>
        /// 回收类型
        /// </summary>
        public int RecoveryType;
        /// <summary>
        /// 回收货币类型
        /// </summary>
        public int RecoveryMoney;
        /// <summary>
        /// 回收货币数量
        /// </summary>
        public int MoneyQuantity;
        /// <summary>
        /// 回收道具id
        /// </summary>
        public int RecoveryGoodsID;
        /// <summary>
        /// 回收道具数量
        /// </summary>
        public int RecoveryQuantity;
        /// <summary>
        /// 神炉熔炼消耗元宝
        /// </summary>
        public int MeltingMoney;
        /// <summary>
        /// 神炉熔炼道具id
        /// </summary>
        public int MeltingGoodsID;
        /// <summary>
        /// 神炉熔炼道具数量
        /// </summary>
        public int MeltingQuantity;
        /// <summary>
        /// 拾取类型id
        /// </summary>
        public int PickupType;
        /// <summary>
        /// 是否首爆
        /// </summary>
        public int IsFirstDrop;
        /// <summary>
        /// 背包类型
        /// </summary>
        public int BagType;
        /// <summary>
        /// 掉落位置优先级
        /// </summary>
        public int PrecedenceDrop;
        /// <summary>
        /// 自动使用
        /// </summary>
        public int AutoUse;
        /// <summary>
        /// 自动使用是否5s倒计时
        /// </summary>
        public int IsCountDown;
        /// <summary>
        /// 宝箱类专用tips
        /// </summary>
        public string BoxLore;
        /// <summary>
        /// 掉落筛选
        /// </summary>
        public int DropSift;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Icon = bytes.ReadInt();
            SceneImage = bytes.ReadInt();
            GoodsName = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Quality = bytes.ReadInt();
            EffectID = bytes.ReadInt();
            EffectID2 = bytes.ReadUTF();
            MapEffectID = bytes.ReadUTF();
            TipsEffect = bytes.ReadInt();
            DropSound = bytes.ReadUTF();
            Lv = bytes.ReadInt();
            MaxUseLv = bytes.ReadInt();
            State = bytes.ReadInt();
            DemoLv = bytes.ReadInt();
            BreedLv = bytes.ReadInt();
            Sex = bytes.ReadInt();
            Job = bytes.ReadInt();
            Numb = bytes.ReadInt();
            Destroy = bytes.ReadInt();
            Binding = bytes.ReadInt();
            GoldCardSale = bytes.ReadInt();
            ExpireTime = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
            UseNotice = bytes.ReadInt();
            NeedLog = bytes.ReadInt();
            SortID = bytes.ReadInt();
            GodLore = bytes.ReadUTF();
            Lore = bytes.ReadUTF();
            Lore1 = bytes.ReadUTF();
            SuitID = bytes.ReadInt();
            SuitID2 = bytes.ReadInt();
            SellMoneyType = bytes.ReadInt();
            SellPrice = bytes.ReadInt();
            Auctiongold1 = bytes.ReadUTF();
            Auctiongold2 = bytes.ReadUTF();
            SystemAuction = bytes.ReadInt();
            SystemAuctionPct = bytes.ReadUTF();
            PctIncreasing = bytes.ReadUTF();
            SuitAuctionPrice = bytes.ReadUTF();
            MeltType = bytes.ReadInt();
            RecoveryType = bytes.ReadInt();
            RecoveryMoney = bytes.ReadInt();
            MoneyQuantity = bytes.ReadInt();
            RecoveryGoodsID = bytes.ReadInt();
            RecoveryQuantity = bytes.ReadInt();
            MeltingMoney = bytes.ReadInt();
            MeltingGoodsID = bytes.ReadInt();
            MeltingQuantity = bytes.ReadInt();
            PickupType = bytes.ReadInt();
            IsFirstDrop = bytes.ReadInt();
            BagType = bytes.ReadInt();
            PrecedenceDrop = bytes.ReadInt();
            AutoUse = bytes.ReadInt();
            IsCountDown = bytes.ReadInt();
            BoxLore = bytes.ReadUTF();
            DropSift = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Icon);
            bytes.WriteInt(SceneImage);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(Type);
            bytes.WriteInt(Quality);
            bytes.WriteInt(EffectID);
            bytes.WriteUTF(EffectID2);
            bytes.WriteUTF(MapEffectID);
            bytes.WriteInt(TipsEffect);
            bytes.WriteUTF(DropSound);
            bytes.WriteInt(Lv);
            bytes.WriteInt(MaxUseLv);
            bytes.WriteInt(State);
            bytes.WriteInt(DemoLv);
            bytes.WriteInt(BreedLv);
            bytes.WriteInt(Sex);
            bytes.WriteInt(Job);
            bytes.WriteInt(Numb);
            bytes.WriteInt(Destroy);
            bytes.WriteInt(Binding);
            bytes.WriteInt(GoldCardSale);
            bytes.WriteInt(ExpireTime);
            bytes.WriteInt(BroadCast);
            bytes.WriteInt(UseNotice);
            bytes.WriteInt(NeedLog);
            bytes.WriteInt(SortID);
            bytes.WriteUTF(GodLore);
            bytes.WriteUTF(Lore);
            bytes.WriteUTF(Lore1);
            bytes.WriteInt(SuitID);
            bytes.WriteInt(SuitID2);
            bytes.WriteInt(SellMoneyType);
            bytes.WriteInt(SellPrice);
            bytes.WriteUTF(Auctiongold1);
            bytes.WriteUTF(Auctiongold2);
            bytes.WriteInt(SystemAuction);
            bytes.WriteUTF(SystemAuctionPct);
            bytes.WriteUTF(PctIncreasing);
            bytes.WriteUTF(SuitAuctionPrice);
            bytes.WriteInt(MeltType);
            bytes.WriteInt(RecoveryType);
            bytes.WriteInt(RecoveryMoney);
            bytes.WriteInt(MoneyQuantity);
            bytes.WriteInt(RecoveryGoodsID);
            bytes.WriteInt(RecoveryQuantity);
            bytes.WriteInt(MeltingMoney);
            bytes.WriteInt(MeltingGoodsID);
            bytes.WriteInt(MeltingQuantity);
            bytes.WriteInt(PickupType);
            bytes.WriteInt(IsFirstDrop);
            bytes.WriteInt(BagType);
            bytes.WriteInt(PrecedenceDrop);
            bytes.WriteInt(AutoUse);
            bytes.WriteInt(IsCountDown);
            bytes.WriteUTF(BoxLore);
            bytes.WriteInt(DropSift);
        }
    }

    public class ItemtemplateMode : TplMode
    {
        private IList<Itemtemplate> mList = null;

        public ItemtemplateMode(int step) : base("Itemtemplate", typeof(Itemtemplate), step) { }

        public Itemtemplate this[int id]
        {
            get { return Find<Itemtemplate>(id); }
        }

        public Itemtemplate Find(int id)
        {
            return Find<Itemtemplate>(id);
        }

        public IList<Itemtemplate> FindAll()
        {
            if (mList == null) mList = FindAll<Itemtemplate>();
            return mList;
        }
    }

public class PickupTypeTemplate : Tpl
    {
        /// <summary>
        /// 页签类别
        /// </summary>
        public int TabType;
        /// <summary>
        /// 子类别名称
        /// </summary>
        public string SubTypeName;
        /// <summary>
        /// 是否默认勾选
        /// </summary>
        public int DefaultSelect;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TabType = bytes.ReadInt();
            SubTypeName = bytes.ReadUTF();
            DefaultSelect = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(TabType);
            bytes.WriteUTF(SubTypeName);
            bytes.WriteInt(DefaultSelect);
        }
    }

    public class PickupTypeTemplateMode : TplMode
    {
        private IList<PickupTypeTemplate> mList = null;

        public PickupTypeTemplateMode(int step) : base("PickupTypeTemplate", typeof(PickupTypeTemplate), step) { }

        public PickupTypeTemplate this[int id]
        {
            get { return Find<PickupTypeTemplate>(id); }
        }

        public PickupTypeTemplate Find(int id)
        {
            return Find<PickupTypeTemplate>(id);
        }

        public IList<PickupTypeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PickupTypeTemplate>();
            return mList;
        }
    }

public class MaintainCompensationTemplate : Tpl
    {
        /// <summary>
        /// 领奖开始时间
        /// </summary>
        public int BeginTime;
        /// <summary>
        /// 领奖结束时间
        /// </summary>
        public int EndTime;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int StateLv;
        /// <summary>
        /// 创角时间
        /// </summary>
        public int CreateTime;
        /// <summary>
        /// 奖励内容
        /// </summary>
        public string Awards;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            BeginTime = bytes.ReadInt();
            EndTime = bytes.ReadInt();
            StateLv = bytes.ReadInt();
            CreateTime = bytes.ReadInt();
            Awards = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(BeginTime);
            bytes.WriteInt(EndTime);
            bytes.WriteInt(StateLv);
            bytes.WriteInt(CreateTime);
            bytes.WriteUTF(Awards);
        }
    }

    public class MaintainCompensationTemplateMode : TplMode
    {
        private IList<MaintainCompensationTemplate> mList = null;

        public MaintainCompensationTemplateMode(int step) : base("MaintainCompensationTemplate", typeof(MaintainCompensationTemplate), step) { }

        public MaintainCompensationTemplate this[int id]
        {
            get { return Find<MaintainCompensationTemplate>(id); }
        }

        public MaintainCompensationTemplate Find(int id)
        {
            return Find<MaintainCompensationTemplate>(id);
        }

        public IList<MaintainCompensationTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MaintainCompensationTemplate>();
            return mList;
        }
    }

public class MonopolyRoomTemplate : Tpl
    {
        /// <summary>
        /// 对应地图
        /// </summary>
        public int Mapid;
        /// <summary>
        /// 房间序号
        /// </summary>
        public int Index;
        /// <summary>
        /// 房间X坐标
        /// </summary>
        public int RoomLocX;
        /// <summary>
        /// 房间Y坐标
        /// </summary>
        public int RoomLocY;
        /// <summary>
        /// 房间类型
        /// </summary>
        public int RoomType;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Mapid = bytes.ReadInt();
            Index = bytes.ReadInt();
            RoomLocX = bytes.ReadInt();
            RoomLocY = bytes.ReadInt();
            RoomType = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Mapid);
            bytes.WriteInt(Index);
            bytes.WriteInt(RoomLocX);
            bytes.WriteInt(RoomLocY);
            bytes.WriteInt(RoomType);
        }
    }

    public class MonopolyRoomTemplateMode : TplMode
    {
        private IList<MonopolyRoomTemplate> mList = null;

        public MonopolyRoomTemplateMode(int step) : base("MonopolyRoomTemplate", typeof(MonopolyRoomTemplate), step) { }

        public MonopolyRoomTemplate this[int id]
        {
            get { return Find<MonopolyRoomTemplate>(id); }
        }

        public MonopolyRoomTemplate Find(int id)
        {
            return Find<MonopolyRoomTemplate>(id);
        }

        public IList<MonopolyRoomTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MonopolyRoomTemplate>();
            return mList;
        }
    }

public class RandomDrawTemplate : Tpl
    {
        /// <summary>
        /// 事件类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 事件子序
        /// </summary>
        public int index;
        /// <summary>
        /// 奖励货币类型
        /// </summary>
        public int RewardCurrency;
        /// <summary>
        /// 奖励货币数量
        /// </summary>
        public int Currency;
        /// <summary>
        /// 奖励道具id
        /// </summary>
        public int RewardItem;
        /// <summary>
        /// 奖励道具数量
        /// </summary>
        public int item;
        /// <summary>
        /// 回退格数
        /// </summary>
        public int BackStep;
        /// <summary>
        /// 强制骰子点数
        /// </summary>
        public int NextStep;
        /// <summary>
        /// 奖励移动次数
        /// </summary>
        public int RewardStep;
        /// <summary>
        /// 刷出怪物id|数量
        /// </summary>
        public string ReMonster;
        /// <summary>
        /// 事件权重万分比
        /// </summary>
        public int WeightPct;
        /// <summary>
        /// 事件使用资源
        /// </summary>
        public int DrawArt;
        /// <summary>
        /// 事件备注
        /// </summary>
        public string Name;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            index = bytes.ReadInt();
            RewardCurrency = bytes.ReadInt();
            Currency = bytes.ReadInt();
            RewardItem = bytes.ReadInt();
            item = bytes.ReadInt();
            BackStep = bytes.ReadInt();
            NextStep = bytes.ReadInt();
            RewardStep = bytes.ReadInt();
            ReMonster = bytes.ReadUTF();
            WeightPct = bytes.ReadInt();
            DrawArt = bytes.ReadInt();
            Name = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(index);
            bytes.WriteInt(RewardCurrency);
            bytes.WriteInt(Currency);
            bytes.WriteInt(RewardItem);
            bytes.WriteInt(item);
            bytes.WriteInt(BackStep);
            bytes.WriteInt(NextStep);
            bytes.WriteInt(RewardStep);
            bytes.WriteUTF(ReMonster);
            bytes.WriteInt(WeightPct);
            bytes.WriteInt(DrawArt);
            bytes.WriteUTF(Name);
        }
    }

    public class RandomDrawTemplateMode : TplMode
    {
        private IList<RandomDrawTemplate> mList = null;

        public RandomDrawTemplateMode(int step) : base("RandomDrawTemplate", typeof(RandomDrawTemplate), step) { }

        public RandomDrawTemplate this[int id]
        {
            get { return Find<RandomDrawTemplate>(id); }
        }

        public RandomDrawTemplate Find(int id)
        {
            return Find<RandomDrawTemplate>(id);
        }

        public IList<RandomDrawTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RandomDrawTemplate>();
            return mList;
        }
    }

public class TreasureEventTemplate : Tpl
    {
        /// <summary>
        /// 事件名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 所属事件类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 刷怪事件怪物
        /// </summary>
        public int Monster;
        /// <summary>
        /// 怪物组刷怪
        /// </summary>
        public string MonsterGroup;
        /// <summary>
        /// 怪物组刷怪坐标
        /// </summary>
        public string MonsterGroupCoordinate;
        /// <summary>
        /// 掉落物品
        /// </summary>
        public string DropItem;
        /// <summary>
        /// 宝箱奖励物品
        /// </summary>
        public string ItemAward;
        /// <summary>
        /// 转盘组
        /// </summary>
        public int TurntableGroup;
        /// <summary>
        /// 事件公告
        /// </summary>
        public int Notice;
        /// <summary>
        /// 事件喊话
        /// </summary>
        public string Message;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Monster = bytes.ReadInt();
            MonsterGroup = bytes.ReadUTF();
            MonsterGroupCoordinate = bytes.ReadUTF();
            DropItem = bytes.ReadUTF();
            ItemAward = bytes.ReadUTF();
            TurntableGroup = bytes.ReadInt();
            Notice = bytes.ReadInt();
            Message = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(Monster);
            bytes.WriteUTF(MonsterGroup);
            bytes.WriteUTF(MonsterGroupCoordinate);
            bytes.WriteUTF(DropItem);
            bytes.WriteUTF(ItemAward);
            bytes.WriteInt(TurntableGroup);
            bytes.WriteInt(Notice);
            bytes.WriteUTF(Message);
        }
    }

    public class TreasureEventTemplateMode : TplMode
    {
        private IList<TreasureEventTemplate> mList = null;

        public TreasureEventTemplateMode(int step) : base("TreasureEventTemplate", typeof(TreasureEventTemplate), step) { }

        public TreasureEventTemplate this[int id]
        {
            get { return Find<TreasureEventTemplate>(id); }
        }

        public TreasureEventTemplate Find(int id)
        {
            return Find<TreasureEventTemplate>(id);
        }

        public IList<TreasureEventTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TreasureEventTemplate>();
            return mList;
        }
    }

public class TreasureDunTemple : Tpl
    {
        /// <summary>
        /// 副本类型
        /// </summary>
        public int DunType;
        /// <summary>
        /// 副本层数
        /// </summary>
        public int index;
        /// <summary>
        /// 所用地图|使用概率
        /// </summary>
        public string maplist;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            DunType = bytes.ReadInt();
            index = bytes.ReadInt();
            maplist = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(DunType);
            bytes.WriteInt(index);
            bytes.WriteUTF(maplist);
        }
    }

    public class TreasureDunTempleMode : TplMode
    {
        private IList<TreasureDunTemple> mList = null;

        public TreasureDunTempleMode(int step) : base("TreasureDunTemple", typeof(TreasureDunTemple), step) { }

        public TreasureDunTemple this[int id]
        {
            get { return Find<TreasureDunTemple>(id); }
        }

        public TreasureDunTemple Find(int id)
        {
            return Find<TreasureDunTemple>(id);
        }

        public IList<TreasureDunTemple> FindAll()
        {
            if (mList == null) mList = FindAll<TreasureDunTemple>();
            return mList;
        }
    }

public class ExConsumeTemplate : Tpl
    {
        /// <summary>
        /// 所属类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 使用次数
        /// </summary>
        public int Times;
        /// <summary>
        /// 消耗道具id
        /// </summary>
        public int ConItem;
        /// <summary>
        /// 消耗道具量
        /// </summary>
        public int ItemPct;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int Name;
        /// <summary>
        /// 消耗货币量
        /// </summary>
        public int ExPct;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Times = bytes.ReadInt();
            ConItem = bytes.ReadInt();
            ItemPct = bytes.ReadInt();
            Name = bytes.ReadInt();
            ExPct = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Times);
            bytes.WriteInt(ConItem);
            bytes.WriteInt(ItemPct);
            bytes.WriteInt(Name);
            bytes.WriteInt(ExPct);
        }
    }

    public class ExConsumeTemplateMode : TplMode
    {
        private IList<ExConsumeTemplate> mList = null;

        public ExConsumeTemplateMode(int step) : base("ExConsumeTemplate", typeof(ExConsumeTemplate), step) { }

        public ExConsumeTemplate this[int id]
        {
            get { return Find<ExConsumeTemplate>(id); }
        }

        public ExConsumeTemplate Find(int id)
        {
            return Find<ExConsumeTemplate>(id);
        }

        public IList<ExConsumeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ExConsumeTemplate>();
            return mList;
        }
    }

public class DemoDispatchTemplate : Tpl
    {
        /// <summary>
        /// 派遣类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 心魔等阶
        /// </summary>
        public int DemoLv;
        /// <summary>
        /// 前端展示道具
        /// </summary>
        public string ShowGoods;
        /// <summary>
        /// 前段显示的道具ID
        /// </summary>
        public int ShowItem;
        /// <summary>
        /// 单位时间内经验奖励
        /// </summary>
        public int ExpBonus;
        /// <summary>
        /// 单位时间内绑金奖励
        /// </summary>
        public int BindGoinBonus;
        /// <summary>
        /// 单位时间内龙血值奖励
        /// </summary>
        public int LongXueBonus;
        /// <summary>
        /// 单位时间内龙鳞值奖励
        /// </summary>
        public int LongLinBonus;
        /// <summary>
        /// 单位时间内随机包ID
        /// </summary>
        public int DropID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            DemoLv = bytes.ReadInt();
            ShowGoods = bytes.ReadUTF();
            ShowItem = bytes.ReadInt();
            ExpBonus = bytes.ReadInt();
            BindGoinBonus = bytes.ReadInt();
            LongXueBonus = bytes.ReadInt();
            LongLinBonus = bytes.ReadInt();
            DropID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(DemoLv);
            bytes.WriteUTF(ShowGoods);
            bytes.WriteInt(ShowItem);
            bytes.WriteInt(ExpBonus);
            bytes.WriteInt(BindGoinBonus);
            bytes.WriteInt(LongXueBonus);
            bytes.WriteInt(LongLinBonus);
            bytes.WriteInt(DropID);
        }
    }

    public class DemoDispatchTemplateMode : TplMode
    {
        private IList<DemoDispatchTemplate> mList = null;

        public DemoDispatchTemplateMode(int step) : base("DemoDispatchTemplate", typeof(DemoDispatchTemplate), step) { }

        public DemoDispatchTemplate this[int id]
        {
            get { return Find<DemoDispatchTemplate>(id); }
        }

        public DemoDispatchTemplate Find(int id)
        {
            return Find<DemoDispatchTemplate>(id);
        }

        public IList<DemoDispatchTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DemoDispatchTemplate>();
            return mList;
        }
    }

public class InnerDemonsTemplate : Tpl
    {
        /// <summary>
        /// 小级
        /// </summary>
        public int star;
        /// <summary>
        /// 心魔等阶
        /// </summary>
        public int Order;
        /// <summary>
        /// 心魔等阶名字
        /// </summary>
        public string LvName;
        /// <summary>
        /// 强化失败基础经验
        /// </summary>
        public int StrengthenExp;
        /// <summary>
        /// 强化魔念衰减
        /// </summary>
        public int StrengthenDamp;
        /// <summary>
        /// 角色死亡基础经验
        /// </summary>
        public int DeadExp;
        /// <summary>
        /// 死亡魔念衰减
        /// </summary>
        public int DeadDamp;
        /// <summary>
        /// 降妖除魔刷新失败经验
        /// </summary>
        public int XiangYaoExp;
        /// <summary>
        /// 降妖魔念衰减
        /// </summary>
        public int XiangYaoDamp;
        /// <summary>
        /// 膜拜刷新失败经验
        /// </summary>
        public int MoBaiRefreshExp;
        /// <summary>
        /// 膜拜刷新失败魔念衰减
        /// </summary>
        public int MoBaiExpDamp;
        /// <summary>
        /// 押镖刷新失败经验
        /// </summary>
        public int YaBiaoRefreshExp;
        /// <summary>
        /// 押镖刷新失败魔念衰减
        /// </summary>
        public int YaBiaoRefreshExpDamp;
        /// <summary>
        /// 押镖失败经验
        /// </summary>
        public int YaBiaoExp;
        /// <summary>
        /// 押镖失败魔念衰减
        /// </summary>
        public int YaBiaoExpDamp;
        /// <summary>
        /// 挖宝经验丹经验
        /// </summary>
        public int DigTreasureExp;
        /// <summary>
        /// 挖宝魔念衰减
        /// </summary>
        public int DigTreasureDamp;
        /// <summary>
        /// Boss掉落基础经验
        /// </summary>
        public int BossDrop;
        /// <summary>
        /// Boss魔念衰减
        /// </summary>
        public int BossDropDamp;
        /// <summary>
        /// 升级需要的魔念
        /// </summary>
        public uint NeedExp;
        /// <summary>
        /// 每日扣除魔念
        /// </summary>
        public int SubtractExp;
        /// <summary>
        /// 最大经验数
        /// </summary>
        public int MaxExp;
        /// <summary>
        /// 引魔入体buffID
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 引魔入体需要的物品
        /// </summary>
        public string BuffItem;
        /// <summary>
        /// 变身buff
        /// </summary>
        public int ChangBuffID;
        /// <summary>
        /// 最大能量值
        /// </summary>
        public int ChangeNum;
        /// <summary>
        /// 渡劫副本ID。不需要写0
        /// </summary>
        public int DungeonID;
        /// <summary>
        /// 渡劫肉身怪物模板ID
        /// </summary>
        public int Body;
        /// <summary>
        /// 增加血量绝对值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 魔装属性加成
        /// </summary>
        public int MoBonuses;
        /// <summary>
        /// 每日PK获得煞气上限
        /// </summary>
        public int HarvestCeiling;
        /// <summary>
        /// 小保护符价格
        /// </summary>
        public string Price1;
        /// <summary>
        /// 大保护价格
        /// </summary>
        public string Price2;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            star = bytes.ReadInt();
            Order = bytes.ReadInt();
            LvName = bytes.ReadUTF();
            StrengthenExp = bytes.ReadInt();
            StrengthenDamp = bytes.ReadInt();
            DeadExp = bytes.ReadInt();
            DeadDamp = bytes.ReadInt();
            XiangYaoExp = bytes.ReadInt();
            XiangYaoDamp = bytes.ReadInt();
            MoBaiRefreshExp = bytes.ReadInt();
            MoBaiExpDamp = bytes.ReadInt();
            YaBiaoRefreshExp = bytes.ReadInt();
            YaBiaoRefreshExpDamp = bytes.ReadInt();
            YaBiaoExp = bytes.ReadInt();
            YaBiaoExpDamp = bytes.ReadInt();
            DigTreasureExp = bytes.ReadInt();
            DigTreasureDamp = bytes.ReadInt();
            BossDrop = bytes.ReadInt();
            BossDropDamp = bytes.ReadInt();
            NeedExp = bytes.ReadUInt();
            SubtractExp = bytes.ReadInt();
            MaxExp = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            BuffItem = bytes.ReadUTF();
            ChangBuffID = bytes.ReadInt();
            ChangeNum = bytes.ReadInt();
            DungeonID = bytes.ReadInt();
            Body = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            MoBonuses = bytes.ReadInt();
            HarvestCeiling = bytes.ReadInt();
            Price1 = bytes.ReadUTF();
            Price2 = bytes.ReadUTF();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(star);
            bytes.WriteInt(Order);
            bytes.WriteUTF(LvName);
            bytes.WriteInt(StrengthenExp);
            bytes.WriteInt(StrengthenDamp);
            bytes.WriteInt(DeadExp);
            bytes.WriteInt(DeadDamp);
            bytes.WriteInt(XiangYaoExp);
            bytes.WriteInt(XiangYaoDamp);
            bytes.WriteInt(MoBaiRefreshExp);
            bytes.WriteInt(MoBaiExpDamp);
            bytes.WriteInt(YaBiaoRefreshExp);
            bytes.WriteInt(YaBiaoRefreshExpDamp);
            bytes.WriteInt(YaBiaoExp);
            bytes.WriteInt(YaBiaoExpDamp);
            bytes.WriteInt(DigTreasureExp);
            bytes.WriteInt(DigTreasureDamp);
            bytes.WriteInt(BossDrop);
            bytes.WriteInt(BossDropDamp);
            bytes.WriteUInt(NeedExp);
            bytes.WriteInt(SubtractExp);
            bytes.WriteInt(MaxExp);
            bytes.WriteInt(BuffID);
            bytes.WriteUTF(BuffItem);
            bytes.WriteInt(ChangBuffID);
            bytes.WriteInt(ChangeNum);
            bytes.WriteInt(DungeonID);
            bytes.WriteInt(Body);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(MoBonuses);
            bytes.WriteInt(HarvestCeiling);
            bytes.WriteUTF(Price1);
            bytes.WriteUTF(Price2);
            bytes.WriteInt(NoticeID);
        }
    }

    public class InnerDemonsTemplateMode : TplMode
    {
        private IList<InnerDemonsTemplate> mList = null;

        public InnerDemonsTemplateMode(int step) : base("InnerDemonsTemplate", typeof(InnerDemonsTemplate), step) { }

        public InnerDemonsTemplate this[int id]
        {
            get { return Find<InnerDemonsTemplate>(id); }
        }

        public InnerDemonsTemplate Find(int id)
        {
            return Find<InnerDemonsTemplate>(id);
        }

        public IList<InnerDemonsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<InnerDemonsTemplate>();
            return mList;
        }
    }

public class BaptizeCostTemplate : Tpl
    {
        /// <summary>
        /// 洗炼消耗
        /// </summary>
        public int BaptizeCost;
        /// <summary>
        /// 锁定消耗
        /// </summary>
        public string LockCost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            BaptizeCost = bytes.ReadInt();
            LockCost = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(BaptizeCost);
            bytes.WriteUTF(LockCost);
        }
    }

    public class BaptizeCostTemplateMode : TplMode
    {
        private IList<BaptizeCostTemplate> mList = null;

        public BaptizeCostTemplateMode(int step) : base("BaptizeCostTemplate", typeof(BaptizeCostTemplate), step) { }

        public BaptizeCostTemplate this[int id]
        {
            get { return Find<BaptizeCostTemplate>(id); }
        }

        public BaptizeCostTemplate Find(int id)
        {
            return Find<BaptizeCostTemplate>(id);
        }

        public IList<BaptizeCostTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<BaptizeCostTemplate>();
            return mList;
        }
    }

public class DayXueFuTaskTemplate : Tpl
    {
        /// <summary>
        /// 地图ID
        /// </summary>
        public int MapID;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int MonsterID;
        /// <summary>
        /// 怪物数量
        /// </summary>
        public int MonsterNum;
        /// <summary>
        /// 奖励
        /// </summary>
        public string Award;
        /// <summary>
        /// 任务坐标
        /// </summary>
        public string Coordinate;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MapID = bytes.ReadInt();
            MonsterID = bytes.ReadInt();
            MonsterNum = bytes.ReadInt();
            Award = bytes.ReadUTF();
            Coordinate = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MapID);
            bytes.WriteInt(MonsterID);
            bytes.WriteInt(MonsterNum);
            bytes.WriteUTF(Award);
            bytes.WriteUTF(Coordinate);
        }
    }

    public class DayXueFuTaskTemplateMode : TplMode
    {
        private IList<DayXueFuTaskTemplate> mList = null;

        public DayXueFuTaskTemplateMode(int step) : base("DayXueFuTaskTemplate", typeof(DayXueFuTaskTemplate), step) { }

        public DayXueFuTaskTemplate this[int id]
        {
            get { return Find<DayXueFuTaskTemplate>(id); }
        }

        public DayXueFuTaskTemplate Find(int id)
        {
            return Find<DayXueFuTaskTemplate>(id);
        }

        public IList<DayXueFuTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DayXueFuTaskTemplate>();
            return mList;
        }
    }

public class XingShiAwardTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int Statelvl;
        /// <summary>
        /// 第1名排名奖励
        /// </summary>
        public string AwardsConf1;
        /// <summary>
        /// 第2名排名奖励
        /// </summary>
        public string AwardsConf2;
        /// <summary>
        /// 第3名排名奖励
        /// </summary>
        public string AwardsConf3;
        /// <summary>
        /// 第4名排名奖励
        /// </summary>
        public string AwardsConf4;
        /// <summary>
        /// 第5名排名奖励
        /// </summary>
        public string AwardsConf5;
        /// <summary>
        /// 第6名排名奖励
        /// </summary>
        public string AwardsConf6;
        /// <summary>
        /// 第7名排名奖励
        /// </summary>
        public string AwardsConf7;
        /// <summary>
        /// 第8名排名奖励
        /// </summary>
        public string AwardsConf8;
        /// <summary>
        /// 第9名排名奖励
        /// </summary>
        public string AwardsConf9;
        /// <summary>
        /// 第10名排名奖励
        /// </summary>
        public string AwardsConf10;
        /// <summary>
        /// 其他排名奖励（参与奖）
        /// </summary>
        public string AwardsConf11;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Statelvl = bytes.ReadInt();
            AwardsConf1 = bytes.ReadUTF();
            AwardsConf2 = bytes.ReadUTF();
            AwardsConf3 = bytes.ReadUTF();
            AwardsConf4 = bytes.ReadUTF();
            AwardsConf5 = bytes.ReadUTF();
            AwardsConf6 = bytes.ReadUTF();
            AwardsConf7 = bytes.ReadUTF();
            AwardsConf8 = bytes.ReadUTF();
            AwardsConf9 = bytes.ReadUTF();
            AwardsConf10 = bytes.ReadUTF();
            AwardsConf11 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Statelvl);
            bytes.WriteUTF(AwardsConf1);
            bytes.WriteUTF(AwardsConf2);
            bytes.WriteUTF(AwardsConf3);
            bytes.WriteUTF(AwardsConf4);
            bytes.WriteUTF(AwardsConf5);
            bytes.WriteUTF(AwardsConf6);
            bytes.WriteUTF(AwardsConf7);
            bytes.WriteUTF(AwardsConf8);
            bytes.WriteUTF(AwardsConf9);
            bytes.WriteUTF(AwardsConf10);
            bytes.WriteUTF(AwardsConf11);
        }
    }

    public class XingShiAwardTemplateMode : TplMode
    {
        private IList<XingShiAwardTemplate> mList = null;

        public XingShiAwardTemplateMode(int step) : base("XingShiAwardTemplate", typeof(XingShiAwardTemplate), step) { }

        public XingShiAwardTemplate this[int id]
        {
            get { return Find<XingShiAwardTemplate>(id); }
        }

        public XingShiAwardTemplate Find(int id)
        {
            return Find<XingShiAwardTemplate>(id);
        }

        public IList<XingShiAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<XingShiAwardTemplate>();
            return mList;
        }
    }

public class NewDayTaskTemplate : Tpl
    {
        /// <summary>
        /// 等级大于等于
        /// </summary>
        public int LvMin;
        /// <summary>
        /// 等级小于
        /// </summary>
        public int LvMax;
        /// <summary>
        /// 转生大于等于
        /// </summary>
        public int JJLvMin;
        /// <summary>
        /// 转生小于
        /// </summary>
        public int JJLvMax;
        /// <summary>
        /// 权重
        /// </summary>
        public int Power;
        /// <summary>
        /// 星星概率（总概率10000）
        /// </summary>
        public string StarInfo;
        /// <summary>
        /// 怪物组id
        /// </summary>
        public int BossGroupId;
        /// <summary>
        /// 怪物组名
        /// </summary>
        public string boss1GroupName;
        /// <summary>
        /// 基础经验
        /// </summary>
        public int BaseExp;
        /// <summary>
        /// 星级经验
        /// </summary>
        public int StarExp;
        /// <summary>
        /// 基础杀怪数量
        /// </summary>
        public int BaseNum;
        /// <summary>
        /// 杀怪数激活星级
        /// </summary>
        public int BeginAddStar;
        /// <summary>
        /// 星级杀怪数
        /// </summary>
        public int AddNum;
        /// <summary>
        /// 物品奖励
        /// </summary>
        public string GoodsReward;
        /// <summary>
        /// BOSS挑战跳转
        /// </summary>
        public string BossChallengeTransfer;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LvMin = bytes.ReadInt();
            LvMax = bytes.ReadInt();
            JJLvMin = bytes.ReadInt();
            JJLvMax = bytes.ReadInt();
            Power = bytes.ReadInt();
            StarInfo = bytes.ReadUTF();
            BossGroupId = bytes.ReadInt();
            boss1GroupName = bytes.ReadUTF();
            BaseExp = bytes.ReadInt();
            StarExp = bytes.ReadInt();
            BaseNum = bytes.ReadInt();
            BeginAddStar = bytes.ReadInt();
            AddNum = bytes.ReadInt();
            GoodsReward = bytes.ReadUTF();
            BossChallengeTransfer = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(LvMin);
            bytes.WriteInt(LvMax);
            bytes.WriteInt(JJLvMin);
            bytes.WriteInt(JJLvMax);
            bytes.WriteInt(Power);
            bytes.WriteUTF(StarInfo);
            bytes.WriteInt(BossGroupId);
            bytes.WriteUTF(boss1GroupName);
            bytes.WriteInt(BaseExp);
            bytes.WriteInt(StarExp);
            bytes.WriteInt(BaseNum);
            bytes.WriteInt(BeginAddStar);
            bytes.WriteInt(AddNum);
            bytes.WriteUTF(GoodsReward);
            bytes.WriteUTF(BossChallengeTransfer);
        }
    }

    public class NewDayTaskTemplateMode : TplMode
    {
        private IList<NewDayTaskTemplate> mList = null;

        public NewDayTaskTemplateMode(int step) : base("NewDayTaskTemplate", typeof(NewDayTaskTemplate), step) { }

        public NewDayTaskTemplate this[int id]
        {
            get { return Find<NewDayTaskTemplate>(id); }
        }

        public NewDayTaskTemplate Find(int id)
        {
            return Find<NewDayTaskTemplate>(id);
        }

        public IList<NewDayTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NewDayTaskTemplate>();
            return mList;
        }
    }

public class DayTaskTemplate : Tpl
    {
        /// <summary>
        /// 星星概率（总概率10000）
        /// </summary>
        public string StarInfo;
        /// <summary>
        /// 地图ID
        /// </summary>
        public int MapID;
        /// <summary>
        /// 基础经验
        /// </summary>
        public int BaseExp;
        /// <summary>
        /// 星级经验
        /// </summary>
        public int StarExp;
        /// <summary>
        /// 基础杀怪数量
        /// </summary>
        public int BaseNum;
        /// <summary>
        /// 星级杀怪数
        /// </summary>
        public int AddNum;
        /// <summary>
        /// 功勋奖励
        /// </summary>
        public int Legacy;
        /// <summary>
        /// 星级功勋奖励
        /// </summary>
        public int StarLegacy;
        /// <summary>
        /// 物品奖励
        /// </summary>
        public string GoodsReward;
        /// <summary>
        /// 换任务的话费（金币&绑定金币）
        /// </summary>
        public int TaskChangeCost;
        /// <summary>
        /// 双倍领取奖励（金币%版定金币）
        /// </summary>
        public int TaskBonusDoubleCost;
        /// <summary>
        /// 三倍领取的花费（金币&绑定金币）
        /// </summary>
        public int TaskBonusTripleCost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            StarInfo = bytes.ReadUTF();
            MapID = bytes.ReadInt();
            BaseExp = bytes.ReadInt();
            StarExp = bytes.ReadInt();
            BaseNum = bytes.ReadInt();
            AddNum = bytes.ReadInt();
            Legacy = bytes.ReadInt();
            StarLegacy = bytes.ReadInt();
            GoodsReward = bytes.ReadUTF();
            TaskChangeCost = bytes.ReadInt();
            TaskBonusDoubleCost = bytes.ReadInt();
            TaskBonusTripleCost = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(StarInfo);
            bytes.WriteInt(MapID);
            bytes.WriteInt(BaseExp);
            bytes.WriteInt(StarExp);
            bytes.WriteInt(BaseNum);
            bytes.WriteInt(AddNum);
            bytes.WriteInt(Legacy);
            bytes.WriteInt(StarLegacy);
            bytes.WriteUTF(GoodsReward);
            bytes.WriteInt(TaskChangeCost);
            bytes.WriteInt(TaskBonusDoubleCost);
            bytes.WriteInt(TaskBonusTripleCost);
        }
    }

    public class DayTaskTemplateMode : TplMode
    {
        private IList<DayTaskTemplate> mList = null;

        public DayTaskTemplateMode(int step) : base("DayTaskTemplate", typeof(DayTaskTemplate), step) { }

        public DayTaskTemplate this[int id]
        {
            get { return Find<DayTaskTemplate>(id); }
        }

        public DayTaskTemplate Find(int id)
        {
            return Find<DayTaskTemplate>(id);
        }

        public IList<DayTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DayTaskTemplate>();
            return mList;
        }
    }

public class ConditionTemplate : Tpl
    {
        /// <summary>
        /// 强化限制
        /// [强化等级大于等级此变量不能回收、合成]
        /// </summary>
        public int EquipLimitQH;
        /// <summary>
        /// 注灵限制
        /// [注灵等级大于等级此变量不能回收、合成]
        /// </summary>
        public int EquipLimitZL;
        /// <summary>
        /// 幸运限制
        /// [幸运等级大于等级此变量不能回收、合成]
        /// </summary>
        public int EquipLimitLuck;
        /// <summary>
        /// 所有玩家默认
        /// 免费原地复活次数
        /// </summary>
        public int FreeReviveCount;
        /// <summary>
        /// 原地复活消耗元宝数量
        /// </summary>
        public int StayReviveCost;
        /// <summary>
        /// 原地复活倒计时（秒）
        /// </summary>
        public int StayReviveTime;
        /// <summary>
        /// 挖宝相关信息
        /// </summary>
        public string FindTreasureCorrelation;
        /// <summary>
        /// 摆摊地图ID
        /// </summary>
        public int RetailMapID;
        /// <summary>
        /// 创建行会需求道具ID
        /// </summary>
        public int CreateGuildItemID;
        /// <summary>
        /// 挖宝宝藏钥匙ID
        /// </summary>
        public int TreasureKeyItemID;
        /// <summary>
        /// 行会救援令ID
        /// </summary>
        public int GuildHelpItemID;
        /// <summary>
        /// 聊天等待时间(秒)
        /// </summary>
        public int ChatWaitTime;
        /// <summary>
        /// 成就的名字
        /// </summary>
        public string AchievementName;
        /// <summary>
        /// 购买除魔任务次数绑定元宝消费
        /// </summary>
        public int BuyTaskCost;
        /// <summary>
        /// 每日购买除魔任务次数总上限
        /// </summary>
        public int BuyTaskLimitNumb;
        /// <summary>
        /// 防掉落邮件
        /// </summary>
        public int FYouJian;
        /// <summary>
        /// 每日免费除魔次数
        /// </summary>
        public int BuyTaskFreeNumb;
        /// <summary>
        /// 每次杀人获得PK值
        /// </summary>
        public int AddPkValue;
        /// <summary>
        /// 经验红包
        /// 等级限制
        /// </summary>
        public int ExpRedBag;
        /// <summary>
        /// 新手自动任务>=1029就不自动任务
        /// </summary>
        public int autoTaskID;
        /// <summary>
        /// 任务下方快捷功能区>=50（50级后才显示）
        /// </summary>
        public int shortcut;
        /// <summary>
        /// 开服活动关闭时间
        /// </summary>
        public int OpenActiveClose;
        /// <summary>
        /// 合服活动关闭时间
        /// </summary>
        public int UnionEndDay;
        /// <summary>
        /// 玩家保护等级
        /// </summary>
        public int PlayerProtectLv;
        /// <summary>
        /// 每次补签价格（1-元宝）
        /// </summary>
        public string RetroactiveMoney;
        /// <summary>
        /// 循环公告播放间隔时间（秒）
        /// </summary>
        public int NoticeInterval;
        /// <summary>
        /// 组队人数上限
        /// </summary>
        public int TeamSizeLimit;
        /// <summary>
        /// 1随便加入
        /// 2需要审核
        /// 3拒绝加入
        /// </summary>
        public int GuildApplyJoinType;
        /// <summary>
        /// PK值上限
        /// </summary>
        public int PKMaxNum;
        /// <summary>
        /// SOS冷却时间(单位秒)
        /// </summary>
        public int SosCoolingTime;
        /// <summary>
        /// 红包随机权重(基础值|浮动百分比）
        /// </summary>
        public string RedBagAlgorithm;
        /// <summary>
        /// 行会红包发送元宝最小数
        /// </summary>
        public int GuildRedBagNum;
        /// <summary>
        /// 行会红包持续时间(单位 秒)
        /// </summary>
        public int GuildRedBagTime;
        /// <summary>
        /// 经验红包持续天数
        /// </summary>
        public int RedBagTime;
        /// <summary>
        /// 经验红包推送等级
        /// </summary>
        public string RedBagSendLv;
        /// <summary>
        /// 积分对换日志数、熔炉1全服日志数、熔炉2全服日志数、熔炉1全服稀有数、熔炉2稀有日志数
        /// </summary>
        public string TreasureLogNum;
        /// <summary>
        /// 第一次镜像天堂地图ID|第二次镜像天堂ID|最终镜像天堂ID
        /// </summary>
        public string JingXiangDianTangMapIDList;
        /// <summary>
        /// 镜像殿堂掉落物展示
        /// </summary>
        public string JingXiangGoods;
        /// <summary>
        /// 个人boss每日进入次数（不包含vip增加次数）
        /// </summary>
        public int PersonBossNum;
        /// <summary>
        /// 个人boss每日刷新次数（也是上限次数）
        /// </summary>
        public int PersonBossChange;
        /// <summary>
        /// 个人boss单次刷新需要元宝
        /// </summary>
        public int PersonBossGold;
        /// <summary>
        /// 个人boss增加一次刷新次数需要的倒计时时间（s）
        /// </summary>
        public int PersonBossTime;
        /// <summary>
        /// 玩家开启离线经验功能最低等级
        /// </summary>
        public int AbsentMinLv;
        /// <summary>
        /// 离线经验最大等级系数（超过80级以80级计算）
        /// </summary>
        public int AbsentMaxLv;
        /// <summary>
        /// 离线经验最低展示时间（s）
        /// </summary>
        public int AbsentMinTime;
        /// <summary>
        /// 离线经验最大累计时间（s）
        /// </summary>
        public int AbsentMaxTime;
        /// <summary>
        /// 离线经验时常系数（万分比）
        /// </summary>
        public int AbsentB;
        /// <summary>
        /// 离线经验第二档次对应的倍率
        /// </summary>
        public int AbsentLv2;
        /// <summary>
        /// 离线经验第三档次对应的倍率
        /// </summary>
        public int AbsentLv3;
        /// <summary>
        /// 离线经验每10万经验需要的元宝数
        /// </summary>
        public int AbsentPrice;
        /// <summary>
        /// 离线经验领取额外vip经验的最低vip等级
        /// </summary>
        public int AbsentMinVip;
        /// <summary>
        /// 离线经验vip经验系数（控制vip额外获得的离线经验）（万分比）
        /// </summary>
        public int AbsentVipExp;
        /// <summary>
        /// 微端登录经验BuffID
        /// </summary>
        public int MiniClientExp;
        /// <summary>
        /// 微端右下小面板触发等级（等级1|等级2|等级3）
        /// </summary>
        public string ClientLv;
        /// <summary>
        /// 首次充值触发(等级1|等级2|等级3）
        /// </summary>
        public string FirstPayLv;
        /// <summary>
        /// 行会战时长
        /// </summary>
        public int GuildWarTime;
        /// <summary>
        /// 翅膀进阶购买商品ID
        /// </summary>
        public int WingItemPrice;
        /// <summary>
        /// 快捷栏禁止放入道具id（主要针对药水包）
        /// </summary>
        public string ShortCuts;
        /// <summary>
        /// 好友名额上限
        /// </summary>
        public int FriendNum;
        /// <summary>
        /// 结义名额上限
        /// </summary>
        public int BrotherNum;
        /// <summary>
        /// 追踪一次价格（元宝）
        /// </summary>
        public int TrackCost;
        /// <summary>
        /// 复仇价格（元宝）
        /// </summary>
        public int RevengeCost;
        /// <summary>
        /// 复仇BUFF
        /// </summary>
        public int RevengeBuffGroup;
        /// <summary>
        /// 复仇范围
        /// </summary>
        public int RevengeArea;
        /// <summary>
        /// 好友推荐等级
        /// </summary>
        public string FriendRecommendLv;
        /// <summary>
        /// 多少级开启提示|第一个任务ID|低于多少任务数量提醒|多少秒自动关闭
        /// </summary>
        public string FunctionShowLv;
        /// <summary>
        /// 宝藏界面展示
        /// </summary>
        public string DayTreasureShow;
        /// <summary>
        /// 寻宝展示旋转速度
        /// </summary>
        public int TreasureSpinSpeed;
        /// <summary>
        /// 开服几天后可以进入神器密库
        /// </summary>
        public int LibraryOpenDay;
        /// <summary>
        /// 境界装备回收几天后开启
        /// </summary>
        public int RecoveryOpenDay;
        /// <summary>
        /// BOSS归属时间（秒）
        /// </summary>
        public int PickUpSaveTime;
        /// <summary>
        /// 帮战活动怪物
        /// </summary>
        public string GuildFightMonsterInfo;
        /// <summary>
        /// 成长计划几天后停止购买
        /// </summary>
        public int BuyGrowthPlanEndDay;
        /// <summary>
        /// 成长计划消耗元宝
        /// </summary>
        public int GrowthPlanCoast;
        /// <summary>
        /// 回血NPC花费（绑元）
        /// </summary>
        public int HPReplyCoast;
        /// <summary>
        /// 威名额外伤害
        /// </summary>
        public int AddDamage;
        /// <summary>
        /// 初始英雄ID
        /// </summary>
        public int InitialHeroId;
        /// <summary>
        /// 镜像殿堂在第几天变更为世界地图
        /// </summary>
        public int AddCdTime;
        /// <summary>
        /// 推荐行会奖励
        /// </summary>
        public int ExtraAward;
        /// <summary>
        /// 行会贡献令大|对应的贡献值|行会贡献令小|对应的贡献值
        /// </summary>
        public string MoneyDonation;
        /// <summary>
        /// 离开行会多久不能加入行会（秒）
        /// </summary>
        public int LeaveGuildTime;
        /// <summary>
        /// 暴击等级转换暴击率比
        /// </summary>
        public int CritRateConversion;
        /// <summary>
        /// 闪避等级转换闪避率比
        /// </summary>
        public int DodgeRateConversion;
        /// <summary>
        /// 连击引导怪物（锁定指定怪物的时候会出现释放连击的提示）
        /// </summary>
        public string ComboGuide;
        /// <summary>
        /// 任务特效
        /// </summary>
        public string TaskEffect;
        /// <summary>
        /// 传奇之魂重置花费元宝
        /// </summary>
        public int SoulResetCost;
        /// <summary>
        /// 每日进入通天塔次数
        /// </summary>
        public int LegendRoadTimes;
        /// <summary>
        /// 通天塔增益buff
        /// </summary>
        public string LegendRoadBuff;
        /// <summary>
        /// 通天塔buff描述
        /// </summary>
        public string LegendRoadBuffDesc1;
        /// <summary>
        /// 通天塔buff描述
        /// </summary>
        public string LegendRoadBuffDesc2;
        /// <summary>
        /// 预加载技能ID
        /// </summary>
        public string PreloadingSkillsID;
        /// <summary>
        /// 活动掉落
        /// </summary>
        public string BossDrop;
        /// <summary>
        /// 引导打开后持续时间（毫秒）
        /// </summary>
        public int AutoOpenTime;
        /// <summary>
        /// 合成相关第几天开启配置：6转装备|8转装备|10转装备|神4转装备|神6转装备|神8转装备|神10转装备|神12转装备|圣主宰装备|至尊主宰装备|主宰装备转换|第一套魔装合成分解|贪婪魔装合成|无妄魔装合成|复仇魔装合成|贪婪魔装分解|翅膀装备合成|圣翅膀装备合成|至尊翅膀装备|初级技能书合成|龙技能1卷合成|龙技能2卷合成|翅膀技能合成|龙装合成|主宰神剑神甲合成
        /// </summary>
        public string CompoundOpen;
        /// <summary>
        /// 威望任务积分奖励
        /// </summary>
        public string MilitaryTaskAward;
        /// <summary>
        /// 怪物走一格需要的毫秒|跑一个需要的毫秒
        /// </summary>
        public string SoldierGridTime;
        /// <summary>
        /// 召唤物走一格需要的毫秒|跑一个需要的毫秒
        /// </summary>
        public string MasterierGridTime;
        /// <summary>
        /// 基础移动时间，角色走一格需要的毫秒|跑一个需要的毫秒
        /// 实际跑步时间=基础移动时间*(移速/200)
        /// </summary>
        public string DaoierGridTime;
        /// <summary>
        /// 特定装备影子
        /// </summary>
        public string EquipShadow;
        /// <summary>
        /// 召唤BOSS消耗行会活跃度
        /// [填几次最多就能招几次]
        /// </summary>
        public string SommerBossInfo;
        /// <summary>
        /// 行会活动类型
        /// </summary>
        public string GuildActivity;
        /// <summary>
        /// 探宝元宝
        /// </summary>
        public int TreasureGold;
        /// <summary>
        /// 节日活动
        /// </summary>
        public string FestivalActivities;
        /// <summary>
        /// 腾讯平台节日活动
        /// </summary>
        public string FestivalActivities2;
        /// <summary>
        /// 5元秒杀需要充值元宝
        /// </summary>
        public int SeckillCoast;
        /// <summary>
        /// 摆摊税收
        /// </summary>
        public int Revenue;
        /// <summary>
        /// 邮箱限制
        /// </summary>
        public string Emaillimit;
        /// <summary>
        /// 押镖每日次数
        /// </summary>
        public int PatrolTime;
        /// <summary>
        /// 押镖免费刷新次数
        /// </summary>
        public int PatrolFree;
        /// <summary>
        /// 押镖购买保险被截掉落物品ID
        /// </summary>
        public int PatrolDropItemID;
        /// <summary>
        /// 押镖购买保险被截掉落物品数量
        /// </summary>
        public int PatrolDropItemNum;
        /// <summary>
        /// 押镖求救cd（秒）
        /// </summary>
        public int PatrolHelpCd;
        /// <summary>
        /// 每日劫镖奖励次数
        /// </summary>
        public int RobNum;
        /// <summary>
        /// 押镖传送花费绑元数量
        /// </summary>
        public int PatrolTransferCost;
        /// <summary>
        /// 主线任务右侧面板引导结束任务
        /// </summary>
        public int EndTaskId;
        /// <summary>
        /// 辅助自动随机CD(毫秒)
        /// </summary>
        public int RowCd;
        /// <summary>
        /// 缓慢回血公共CD（ms）
        /// </summary>
        public int MedicineCd1;
        /// <summary>
        /// 瞬回药公共CD（ms）
        /// </summary>
        public int MedicineCd2;
        /// <summary>
        /// 公会默认公告
        /// </summary>
        public string GuildNotice;
        /// <summary>
        /// 主城ID
        /// </summary>
        public int BiQiId;
        /// <summary>
        /// 出生地图ID
        /// </summary>
        public int ChuSheng;
        /// <summary>
        /// 出生X
        /// </summary>
        public int ChuShengX;
        /// <summary>
        /// 出生Y
        /// </summary>
        public int ChuShengY;
        /// <summary>
        /// 重启位置X（地图是主城id）
        /// </summary>
        public int ChongQiX;
        /// <summary>
        /// 重启位置Y
        /// </summary>
        public int ChongQiY;
        /// <summary>
        /// 背包基础默认掉率
        /// </summary>
        public int BagInitialDrop;
        /// <summary>
        /// 背包未掉落掉率增加
        /// </summary>
        public int BagUnDrop;
        /// <summary>
        /// 背包掉落掉率减少
        /// </summary>
        public int BagDrop;
        /// <summary>
        /// 装备基础默认掉率
        /// </summary>
        public int EquipMoren;
        /// <summary>
        /// 装备未掉落掉率增加
        /// </summary>
        public int EquipInitialDrop;
        /// <summary>
        /// 武器衣服掉落概率万分比
        /// </summary>
        public int Dropwuqiyifu;
        /// <summary>
        /// 翅膀装备掉落概率万分比
        /// </summary>
        public int Dropchibang;
        /// <summary>
        /// 首饰掉落概率万分比
        /// </summary>
        public int Dropshoushi;
        /// <summary>
        /// 神器掉落概率万分比
        /// </summary>
        public int Dropshenqi;
        /// <summary>
        /// 首饰掉落装备掉率减少
        /// </summary>
        public int ShouDrop;
        /// <summary>
        /// 贵重装备掉落装备掉率减少
        /// </summary>
        public int GuiDrop;
        /// <summary>
        /// 1点诅咒值增加背包掉落几率
        /// </summary>
        public int CurseBag;
        /// <summary>
        /// 1点诅咒值增加装备掉落几率
        /// </summary>
        public int CurseEquip;
        /// <summary>
        /// 红名增加背包掉落几率
        /// </summary>
        public int RedBagDrop;
        /// <summary>
        /// 红名增加装备掉落几率
        /// </summary>
        public int RedEquipDrop;
        /// <summary>
        /// 背包掉落个数1档
        /// </summary>
        public int CurseBagNum1;
        /// <summary>
        /// 背包掉落个数2档
        /// </summary>
        public int CurseBagNum2;
        /// <summary>
        /// 背包掉落个数3档
        /// </summary>
        public int CurseBagNum3;
        /// <summary>
        /// 诅咒值影响背包掉落参数
        /// </summary>
        public int CurseBagNum;
        /// <summary>
        /// 诅咒值影响首饰掉落2件几率参数
        /// </summary>
        public int CurseShouNum;
        /// <summary>
        /// 开服不掉落天数
        /// </summary>
        public int NoDrop;
        /// <summary>
        /// 开服不掉落装备天数
        /// </summary>
        public int EquipNoDrop;
        /// <summary>
        /// 降妖除魔多少级重置
        /// </summary>
        public int DailyRestartLevel;
        /// <summary>
        /// 玩家视野范围大小（x,y公用一个值
        /// </summary>
        public int ViewRange;
        /// <summary>
        /// 翅膀来源
        /// </summary>
        public string WingApproach;
        /// <summary>
        /// 传送石道具id
        /// </summary>
        public int TransferStone;
        /// <summary>
        /// 炼狱提示时间秒
        /// </summary>
        public int LyTime;
        /// <summary>
        /// 每次进入炼狱直接扣除炼狱点卡时间（秒）
        /// </summary>
        public int LianYuCostTime;
        /// <summary>
        /// 进入炼狱需求的最小点卡时间（秒）小于该值则无法进入
        /// </summary>
        public int LianYuMinTime;
        /// <summary>
        /// 只拾取本职业的装备的地图
        /// </summary>
        public string OccupationPicking;
        /// <summary>
        /// 每日捐献装备获得行会资金上限
        /// </summary>
        public int DayFunds;
        /// <summary>
        /// 贡献和资金的兑换比值
        /// </summary>
        public int FundsRatio;
        /// <summary>
        /// VIP体验卡buff
        /// </summary>
        public int VIPBuffId;
        /// <summary>
        /// 沙巴克地图ID（非活动）
        /// </summary>
        public int ShaMap;
        /// <summary>
        /// 重置天赋元宝消耗
        /// </summary>
        public int ResetTalent;
        /// <summary>
        /// 行会红包最低发几个人
        /// </summary>
        public int GuildRedNum;
        /// <summary>
        /// 收购系统邮件ID
        /// </summary>
        public int PurchaseMailID;
        /// <summary>
        /// 1元宝物品ID
        /// </summary>
        public string yuanbao1;
        /// <summary>
        /// 场景角色达到一定数开始优化显示
        /// </summary>
        public int OptimizeNum;
        /// <summary>
        /// 随机传送使用CD 毫秒
        /// </summary>
        public int SuijiCd;
        /// <summary>
        /// 特殊活动正常开启时间,例如沙巴克开服第5天内，第4天开启；5天后按照weekday顺序开启
        /// </summary>
        public int ActivityStart;
        /// <summary>
        /// 行会相关vip等级需求
        /// 创建行会|提升行会权限（被提升人的VIP等级）|转让行会会长（被转移人的vip等级,也是弹劾会长的玩家VIP等级）
        /// </summary>
        public string GuildNeedVip;
        /// <summary>
        /// 极品转移消耗元宝|幸运转移消耗元宝
        /// </summary>
        public string MoveBaptizeCost;
        /// <summary>
        /// 千里传音道具id
        /// </summary>
        public int BigHorn;
        /// <summary>
        /// 挖宝出2条元素属性概率
        /// </summary>
        public int TreasureDropRate;
        /// <summary>
        /// boss掉落出1条元素属性概率
        /// </summary>
        public int BossDropRate;
        /// <summary>
        /// 僵直抗性系数
        /// </summary>
        public int ResistJz;
        /// <summary>
        /// 麻痹抗性系数
        /// </summary>
        public int ResistMabi;
        /// <summary>
        /// 中毒抗性系数
        /// </summary>
        public int ResistZd;
        /// <summary>
        /// 野蛮抗拒位移速度（毫秒/格）
        /// </summary>
        public int PushSpeed;
        /// <summary>
        /// 兑换奖励次数
        /// </summary>
        public int ExchangeGoodsTimes;
        /// <summary>
        /// 降妖除魔任务自动回城等级上限
        /// </summary>
        public int ComeBack;
        /// <summary>
        /// 藏宝图传送价格
        /// </summary>
        public int Transfer;
        /// <summary>
        /// 英雄每日培养次数
        /// </summary>
        public int PeiyangTimes;
        /// <summary>
        /// 英雄培养返还邮件
        /// </summary>
        public int PeiyangMail;
        /// <summary>
        /// 英雄培养返还绑金id
        /// </summary>
        public int PeiyangMailItem;
        /// <summary>
        /// 降妖除魔面板关闭等级
        /// </summary>
        public int XiangyaoClose;
        /// <summary>
        /// 机器人开服第几天全消失
        /// </summary>
        public int RobotMissDay;
        /// <summary>
        /// 心魔试练歌词公告ID
        /// </summary>
        public int DemoNotice;
        /// <summary>
        /// 威名前3所需最低威望
        /// </summary>
        public int Military;
        /// <summary>
        /// 血符任务每日次数
        /// </summary>
        public int BloodChitTaskTime;
        /// <summary>
        /// 公会福利元宝ID
        /// </summary>
        public int GoldID;
        /// <summary>
        /// 变身每秒消耗能量（废弃）
        /// </summary>
        public int SecondsEnergy;
        /// <summary>
        /// 变身最低所需能量值
        /// </summary>
        public int EnergyDemand;
        /// <summary>
        /// 变身CD秒
        /// </summary>
        public int ChangeCD;
        /// <summary>
        /// 取消变身CD秒
        /// </summary>
        public int CancelCD;
        /// <summary>
        /// 离线时间低于这个小时数被踢出公会会扣除公会资金
        /// </summary>
        public int GuildProtectTime;
        /// <summary>
        /// 装备每天最大回收件数，70|80|1转|2转
        /// </summary>
        public string MaxRecovery;
        /// <summary>
        /// 炼狱buffID
        /// </summary>
        public int LianyuBuff;
        /// <summary>
        /// 装备回收护盾碎片ID
        /// </summary>
        public int EnergyItemId;
        /// <summary>
        /// 副本剧情刷怪
        /// </summary>
        public string StoryBoss;
        /// <summary>
        /// 公共CD时间（毫秒）
        /// </summary>
        public int PublicTime;
        /// <summary>
        /// 上周在线领奖每次给予绑元数目
        /// </summary>
        public int LastWeekAwards;
        /// <summary>
        /// 沙巴克城主坐骑ID（金装表id）
        /// </summary>
        public int ChengzhuHorse;
        /// <summary>
        /// 1级宝石价格
        /// </summary>
        public int GemPrice;
        /// <summary>
        /// 离线挂机配置
        /// </summary>
        public string OfflineExp;
        /// <summary>
        /// 大刀和弓箭手下跪持续时间（s）
        /// </summary>
        public int KneelDownTime;
        /// <summary>
        /// 挖矿公告黑铁矿石、稀有道具ID
        /// </summary>
        public string StoneID;
        /// <summary>
        /// 攻沙剑法加熟练度概率
        /// </summary>
        public int AddSkillExpRate;
        /// <summary>
        /// 最高境界等级
        /// </summary>
        public int MaxStateLv;
        /// <summary>
        /// 世界角色等级限制
        /// </summary>
        public int WorldLvRoleLimit;
        /// <summary>
        /// 世界等级限制
        /// </summary>
        public int WorldLvLimit;
        /// <summary>
        /// 网页登录经验BuffID
        /// </summary>
        public int WebExp;
        /// <summary>
        /// 刺杀半月开关CD
        /// </summary>
        public int CishaBanyueCD;
        /// <summary>
        /// 屠魔等级开启勋章
        /// </summary>
        public int XunzhangOpen;
        /// <summary>
        /// 屠魔功能首次升级引导步骤
        /// </summary>
        public string TumoGuide;
        /// <summary>
        /// 向从未加入过行会的玩家推送行会邀请间隔时间（ms）
        /// </summary>
        public int GuildPushCostTime;
        /// <summary>
        /// 同IP登录数量限制白名单（该IP下不限制）格式：ip|ip|ip
        /// </summary>
        public string IPWhiteList;
        /// <summary>
        /// 魔器出2条极品属性概率
        /// </summary>
        public int MagicEquipTwoProp;
        /// <summary>
        /// 辅助默认配置
        /// </summary>
        public string InitialSetting;
        /// <summary>
        /// 公告ID（1BOSS掉落|2挖宝获得|3工会捐献|4杀人爆装|5会长被杀|6副会长被杀|7其他被杀|8第1名被更换|9魔法阵|10幸运|11首冲|12创建行会|13加入行会|14发公会红包|15押镖接任务|16押镖被劫|17行会求救|18活跃完成|19成就完成|20打开箱子获得稀有道具|21收购公告|22弹劾公告|23弹劾成功|24个人押镖求救|25通天塔通关|26兑换公会装备）|27挖矿获得黑铁矿石|28玩家经验红包被领光的公告|29玩家发送经验红包口令的公告|30魔器洗练3条以上|31派发经验红包中奖|32世界BOSS最后一击|33装备摧毁|34卧龙名将刷新|35卧龙庄主刷新|36卧龙魔将刷新|37卧龙魔主刷新|38特权找回装备公告|39卧龙庄主死亡公告|40矿工被击杀掉落公告|41矿工被击杀公告
        /// </summary>
        public string GoodsNotice;
        /// <summary>
        /// 行会宣战公告
        /// </summary>
        public string GuildWarNotice;
        /// <summary>
        /// 魔法阵个数上限|时间(秒)|副本ID
        /// </summary>
        public string MagicInfo;
        /// <summary>
        /// 洗炼属性权重（属性ID|权重,属性ID|权重）
        /// </summary>
        public string BaptizeAttributesInfo;
        /// <summary>
        /// 全民红包信息
        /// </summary>
        public string QuanMinHongBao;
        /// <summary>
        /// 全民红包称号信息
        /// </summary>
        public string QuanMinHongBaoTitleInfo;
        /// <summary>
        /// 自动解包功能（任何状态都有用）
        /// </summary>
        public string OpenPackage;
        /// <summary>
        /// 通天塔排行榜奖励
        /// </summary>
        public string TttRankPraise;
        /// <summary>
        /// 七天奖励左上特效编号
        /// </summary>
        public string QiTian;
        /// <summary>
        /// 在线1小时给予亲密度|在线给予亲密度次数|结义好友组队杀怪获得亲密度|获得亲密度上限|鲜花道具id|1朵鲜花获得亲密度|赠送鲜花界面第一格鲜花数量|第二格数量|第三格数量|结义世界公告
        /// </summary>
        public string Intimacy;
        /// <summary>
        /// 进阶失败邮件|小经验丹ID|肉身无敌道具ID|道具2|渡劫NPC1|渡劫NPC2|渡劫NPC3|心魔试练NPC|击杀肉身邮件|邮件内物品|限制获奖次数
        /// </summary>
        public string InnerDemonsInfo;
        /// <summary>
        /// 神算子所需物品
        /// </summary>
        public string DemoGoods;
        /// <summary>
        /// 心魔试练地图组
        /// </summary>
        public string DemoMap;
        /// <summary>
        /// 骰子ID|5次|免费绑元|骰子价格|入库比例|胜率基数|胜率递增|胜率递减(十万分比)
        /// </summary>
        public string ChuanQiShaiZi;
        /// <summary>
        /// 行会押镖失败 邮件提示
        /// </summary>
        public string PatrolLostEmail;
        /// <summary>
        /// 魔器锁定消耗
        /// </summary>
        public string MagicEquipLockCost;
        /// <summary>
        /// 魔器血量系数
        /// </summary>
        public string MagicEquipHPCoefficient;
        /// <summary>
        /// 魔器基础属性随机强化等级
        /// </summary>
        public string MagicEquipRndLv;
        /// <summary>
        /// 转生兑换次数|原力兑换次数|突破值兑换次数
        /// </summary>
        public string ForceChange;
        /// <summary>
        /// 魔器回收等级
        /// </summary>
        public string MagicEquipDesc;
        /// <summary>
        /// 烧猪准备时间(毫秒)|烧猪地图ID|最大怪物波数|烧猪总经验|守卫令ID|满扫荡需要守卫令数量|守卫令单价|普通扫荡经验系数(万分比)
        /// </summary>
        public string FirePigInfo;
        /// <summary>
        /// 开始任务ID|结束任务ID|心魔瓶子出现特效ID|心魔瓶子出现特效持续时间|英雄X坐标|英雄Y坐标|特效X|特效Y|硬直BuffID|歌词公告ID|英雄AI停止时间
        /// |心魔英雄ID
        /// </summary>
        public string TaskStoryInfo;
        /// <summary>
        /// 首次激活付费英雄时功能引导步骤，读取引导表
        /// </summary>
        public string HeroGuide;
        /// <summary>
        /// 宝箱怪物ID
        /// </summary>
        public string MonBoxID;
        /// <summary>
        /// 限时任务每轮礼包
        /// </summary>
        public string LimiteTask;
        /// <summary>
        /// BOSS随开服天数免伤
        /// </summary>
        public string BossMian;
        /// <summary>
        /// 元宝奖池初始金额,猜拳胜利获得积分|平局获得积分|失败获得积分,猜拳胜利获得元宝|平局获得元宝|失败获得元宝,猜拳胜利奖池增加元宝|平局奖池增加元宝|失败奖池增加元宝,vip0禁用次数|vip1禁用次数|vip2禁用次数,元宝奖池最低积分|白银奖励积分|青铜奖励积分,猜拳胜利公告id|平局公告id|失败公告id,实际分配的元宝奖池上限（奖池大于该值则取该值，小于则取奖池）,玩家分配到的实际元宝上限,客户端显示奖池元宝总数增加值
        /// </summary>
        public string HappyGuess;
        /// <summary>
        /// 竞猜持续时间（开服前几天）|活动总持续时间（开服前几天）
        /// </summary>
        public string HappyGuessTime;
        /// <summary>
        /// 竞猜活动白银奖励|竞猜活动青铜奖励
        /// </summary>
        public string HappyGuessReward;
        /// <summary>
        /// 卧龙boss回收时间|卧龙boss刷新时间|暗之卧龙boss刷新时间
        /// </summary>
        public string WoLongTime;
        /// <summary>
        /// 心魔等级开启功能（变身|魔器|魔装|战魂|魔装加成）
        /// </summary>
        public string DemoFunctionOpen;
        /// <summary>
        /// 矿洞杀手信息(地图ID|最短刷新时间|最长刷新时间|在线人数大于多少刷新|战士怪物ID|法师怪物ID|道士怪物ID|持续多少时间后消失|血量低于多少后消失)
        /// </summary>
        public string KillerInfo;
        /// <summary>
        /// 派遣收益单位时间(秒)|普通派遣持续时长(小时)|高级派遣持续时长(小时)|可中断派遣领取奖励的最小时间(秒)|特权花费元宝|特权持续时间(天)
        /// </summary>
        public string DemoDispatch;
        /// <summary>
        /// 经验红包初始奖池数量|个人奖金占比|中奖概率
        /// </summary>
        public string ExpRedBagJiangChi;
        /// <summary>
        /// 开服活动列表
        /// </summary>
        public string OpenActivityID;
        /// <summary>
        /// 合服活动列表
        /// </summary>
        public string UnionActivityID;
        /// <summary>
        /// 合服后不清空的开服活动ID
        /// </summary>
        public string UnionActivityID2;
        /// <summary>
        /// 公测庆典活动列表
        /// </summary>
        public string TestActivityID;
        /// <summary>
        /// 首充奖励
        /// </summary>
        public string FirstPayReward;
        /// <summary>
        /// 使用物品播放特效       1.圣器
        /// </summary>
        public string SpecialEffects;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EquipLimitQH = bytes.ReadInt();
            EquipLimitZL = bytes.ReadInt();
            EquipLimitLuck = bytes.ReadInt();
            FreeReviveCount = bytes.ReadInt();
            StayReviveCost = bytes.ReadInt();
            StayReviveTime = bytes.ReadInt();
            FindTreasureCorrelation = bytes.ReadUTF();
            RetailMapID = bytes.ReadInt();
            CreateGuildItemID = bytes.ReadInt();
            TreasureKeyItemID = bytes.ReadInt();
            GuildHelpItemID = bytes.ReadInt();
            ChatWaitTime = bytes.ReadInt();
            AchievementName = bytes.ReadUTF();
            BuyTaskCost = bytes.ReadInt();
            BuyTaskLimitNumb = bytes.ReadInt();
            FYouJian = bytes.ReadInt();
            BuyTaskFreeNumb = bytes.ReadInt();
            AddPkValue = bytes.ReadInt();
            ExpRedBag = bytes.ReadInt();
            autoTaskID = bytes.ReadInt();
            shortcut = bytes.ReadInt();
            OpenActiveClose = bytes.ReadInt();
            UnionEndDay = bytes.ReadInt();
            PlayerProtectLv = bytes.ReadInt();
            RetroactiveMoney = bytes.ReadUTF();
            NoticeInterval = bytes.ReadInt();
            TeamSizeLimit = bytes.ReadInt();
            GuildApplyJoinType = bytes.ReadInt();
            PKMaxNum = bytes.ReadInt();
            SosCoolingTime = bytes.ReadInt();
            RedBagAlgorithm = bytes.ReadUTF();
            GuildRedBagNum = bytes.ReadInt();
            GuildRedBagTime = bytes.ReadInt();
            RedBagTime = bytes.ReadInt();
            RedBagSendLv = bytes.ReadUTF();
            TreasureLogNum = bytes.ReadUTF();
            JingXiangDianTangMapIDList = bytes.ReadUTF();
            JingXiangGoods = bytes.ReadUTF();
            PersonBossNum = bytes.ReadInt();
            PersonBossChange = bytes.ReadInt();
            PersonBossGold = bytes.ReadInt();
            PersonBossTime = bytes.ReadInt();
            AbsentMinLv = bytes.ReadInt();
            AbsentMaxLv = bytes.ReadInt();
            AbsentMinTime = bytes.ReadInt();
            AbsentMaxTime = bytes.ReadInt();
            AbsentB = bytes.ReadInt();
            AbsentLv2 = bytes.ReadInt();
            AbsentLv3 = bytes.ReadInt();
            AbsentPrice = bytes.ReadInt();
            AbsentMinVip = bytes.ReadInt();
            AbsentVipExp = bytes.ReadInt();
            MiniClientExp = bytes.ReadInt();
            ClientLv = bytes.ReadUTF();
            FirstPayLv = bytes.ReadUTF();
            GuildWarTime = bytes.ReadInt();
            WingItemPrice = bytes.ReadInt();
            ShortCuts = bytes.ReadUTF();
            FriendNum = bytes.ReadInt();
            BrotherNum = bytes.ReadInt();
            TrackCost = bytes.ReadInt();
            RevengeCost = bytes.ReadInt();
            RevengeBuffGroup = bytes.ReadInt();
            RevengeArea = bytes.ReadInt();
            FriendRecommendLv = bytes.ReadUTF();
            FunctionShowLv = bytes.ReadUTF();
            DayTreasureShow = bytes.ReadUTF();
            TreasureSpinSpeed = bytes.ReadInt();
            LibraryOpenDay = bytes.ReadInt();
            RecoveryOpenDay = bytes.ReadInt();
            PickUpSaveTime = bytes.ReadInt();
            GuildFightMonsterInfo = bytes.ReadUTF();
            BuyGrowthPlanEndDay = bytes.ReadInt();
            GrowthPlanCoast = bytes.ReadInt();
            HPReplyCoast = bytes.ReadInt();
            AddDamage = bytes.ReadInt();
            InitialHeroId = bytes.ReadInt();
            AddCdTime = bytes.ReadInt();
            ExtraAward = bytes.ReadInt();
            MoneyDonation = bytes.ReadUTF();
            LeaveGuildTime = bytes.ReadInt();
            CritRateConversion = bytes.ReadInt();
            DodgeRateConversion = bytes.ReadInt();
            ComboGuide = bytes.ReadUTF();
            TaskEffect = bytes.ReadUTF();
            SoulResetCost = bytes.ReadInt();
            LegendRoadTimes = bytes.ReadInt();
            LegendRoadBuff = bytes.ReadUTF();
            LegendRoadBuffDesc1 = bytes.ReadUTF();
            LegendRoadBuffDesc2 = bytes.ReadUTF();
            PreloadingSkillsID = bytes.ReadUTF();
            BossDrop = bytes.ReadUTF();
            AutoOpenTime = bytes.ReadInt();
            CompoundOpen = bytes.ReadUTF();
            MilitaryTaskAward = bytes.ReadUTF();
            SoldierGridTime = bytes.ReadUTF();
            MasterierGridTime = bytes.ReadUTF();
            DaoierGridTime = bytes.ReadUTF();
            EquipShadow = bytes.ReadUTF();
            SommerBossInfo = bytes.ReadUTF();
            GuildActivity = bytes.ReadUTF();
            TreasureGold = bytes.ReadInt();
            FestivalActivities = bytes.ReadUTF();
            FestivalActivities2 = bytes.ReadUTF();
            SeckillCoast = bytes.ReadInt();
            Revenue = bytes.ReadInt();
            Emaillimit = bytes.ReadUTF();
            PatrolTime = bytes.ReadInt();
            PatrolFree = bytes.ReadInt();
            PatrolDropItemID = bytes.ReadInt();
            PatrolDropItemNum = bytes.ReadInt();
            PatrolHelpCd = bytes.ReadInt();
            RobNum = bytes.ReadInt();
            PatrolTransferCost = bytes.ReadInt();
            EndTaskId = bytes.ReadInt();
            RowCd = bytes.ReadInt();
            MedicineCd1 = bytes.ReadInt();
            MedicineCd2 = bytes.ReadInt();
            GuildNotice = bytes.ReadUTF();
            BiQiId = bytes.ReadInt();
            ChuSheng = bytes.ReadInt();
            ChuShengX = bytes.ReadInt();
            ChuShengY = bytes.ReadInt();
            ChongQiX = bytes.ReadInt();
            ChongQiY = bytes.ReadInt();
            BagInitialDrop = bytes.ReadInt();
            BagUnDrop = bytes.ReadInt();
            BagDrop = bytes.ReadInt();
            EquipMoren = bytes.ReadInt();
            EquipInitialDrop = bytes.ReadInt();
            Dropwuqiyifu = bytes.ReadInt();
            Dropchibang = bytes.ReadInt();
            Dropshoushi = bytes.ReadInt();
            Dropshenqi = bytes.ReadInt();
            ShouDrop = bytes.ReadInt();
            GuiDrop = bytes.ReadInt();
            CurseBag = bytes.ReadInt();
            CurseEquip = bytes.ReadInt();
            RedBagDrop = bytes.ReadInt();
            RedEquipDrop = bytes.ReadInt();
            CurseBagNum1 = bytes.ReadInt();
            CurseBagNum2 = bytes.ReadInt();
            CurseBagNum3 = bytes.ReadInt();
            CurseBagNum = bytes.ReadInt();
            CurseShouNum = bytes.ReadInt();
            NoDrop = bytes.ReadInt();
            EquipNoDrop = bytes.ReadInt();
            DailyRestartLevel = bytes.ReadInt();
            ViewRange = bytes.ReadInt();
            WingApproach = bytes.ReadUTF();
            TransferStone = bytes.ReadInt();
            LyTime = bytes.ReadInt();
            LianYuCostTime = bytes.ReadInt();
            LianYuMinTime = bytes.ReadInt();
            OccupationPicking = bytes.ReadUTF();
            DayFunds = bytes.ReadInt();
            FundsRatio = bytes.ReadInt();
            VIPBuffId = bytes.ReadInt();
            ShaMap = bytes.ReadInt();
            ResetTalent = bytes.ReadInt();
            GuildRedNum = bytes.ReadInt();
            PurchaseMailID = bytes.ReadInt();
            yuanbao1 = bytes.ReadUTF();
            OptimizeNum = bytes.ReadInt();
            SuijiCd = bytes.ReadInt();
            ActivityStart = bytes.ReadInt();
            GuildNeedVip = bytes.ReadUTF();
            MoveBaptizeCost = bytes.ReadUTF();
            BigHorn = bytes.ReadInt();
            TreasureDropRate = bytes.ReadInt();
            BossDropRate = bytes.ReadInt();
            ResistJz = bytes.ReadInt();
            ResistMabi = bytes.ReadInt();
            ResistZd = bytes.ReadInt();
            PushSpeed = bytes.ReadInt();
            ExchangeGoodsTimes = bytes.ReadInt();
            ComeBack = bytes.ReadInt();
            Transfer = bytes.ReadInt();
            PeiyangTimes = bytes.ReadInt();
            PeiyangMail = bytes.ReadInt();
            PeiyangMailItem = bytes.ReadInt();
            XiangyaoClose = bytes.ReadInt();
            RobotMissDay = bytes.ReadInt();
            DemoNotice = bytes.ReadInt();
            Military = bytes.ReadInt();
            BloodChitTaskTime = bytes.ReadInt();
            GoldID = bytes.ReadInt();
            SecondsEnergy = bytes.ReadInt();
            EnergyDemand = bytes.ReadInt();
            ChangeCD = bytes.ReadInt();
            CancelCD = bytes.ReadInt();
            GuildProtectTime = bytes.ReadInt();
            MaxRecovery = bytes.ReadUTF();
            LianyuBuff = bytes.ReadInt();
            EnergyItemId = bytes.ReadInt();
            StoryBoss = bytes.ReadUTF();
            PublicTime = bytes.ReadInt();
            LastWeekAwards = bytes.ReadInt();
            ChengzhuHorse = bytes.ReadInt();
            GemPrice = bytes.ReadInt();
            OfflineExp = bytes.ReadUTF();
            KneelDownTime = bytes.ReadInt();
            StoneID = bytes.ReadUTF();
            AddSkillExpRate = bytes.ReadInt();
            MaxStateLv = bytes.ReadInt();
            WorldLvRoleLimit = bytes.ReadInt();
            WorldLvLimit = bytes.ReadInt();
            WebExp = bytes.ReadInt();
            CishaBanyueCD = bytes.ReadInt();
            XunzhangOpen = bytes.ReadInt();
            TumoGuide = bytes.ReadUTF();
            GuildPushCostTime = bytes.ReadInt();
            IPWhiteList = bytes.ReadUTF();
            MagicEquipTwoProp = bytes.ReadInt();
            InitialSetting = bytes.ReadUTF();
            GoodsNotice = bytes.ReadUTF();
            GuildWarNotice = bytes.ReadUTF();
            MagicInfo = bytes.ReadUTF();
            BaptizeAttributesInfo = bytes.ReadUTF();
            QuanMinHongBao = bytes.ReadUTF();
            QuanMinHongBaoTitleInfo = bytes.ReadUTF();
            OpenPackage = bytes.ReadUTF();
            TttRankPraise = bytes.ReadUTF();
            QiTian = bytes.ReadUTF();
            Intimacy = bytes.ReadUTF();
            InnerDemonsInfo = bytes.ReadUTF();
            DemoGoods = bytes.ReadUTF();
            DemoMap = bytes.ReadUTF();
            ChuanQiShaiZi = bytes.ReadUTF();
            PatrolLostEmail = bytes.ReadUTF();
            MagicEquipLockCost = bytes.ReadUTF();
            MagicEquipHPCoefficient = bytes.ReadUTF();
            MagicEquipRndLv = bytes.ReadUTF();
            ForceChange = bytes.ReadUTF();
            MagicEquipDesc = bytes.ReadUTF();
            FirePigInfo = bytes.ReadUTF();
            TaskStoryInfo = bytes.ReadUTF();
            HeroGuide = bytes.ReadUTF();
            MonBoxID = bytes.ReadUTF();
            LimiteTask = bytes.ReadUTF();
            BossMian = bytes.ReadUTF();
            HappyGuess = bytes.ReadUTF();
            HappyGuessTime = bytes.ReadUTF();
            HappyGuessReward = bytes.ReadUTF();
            WoLongTime = bytes.ReadUTF();
            DemoFunctionOpen = bytes.ReadUTF();
            KillerInfo = bytes.ReadUTF();
            DemoDispatch = bytes.ReadUTF();
            ExpRedBagJiangChi = bytes.ReadUTF();
            OpenActivityID = bytes.ReadUTF();
            UnionActivityID = bytes.ReadUTF();
            UnionActivityID2 = bytes.ReadUTF();
            TestActivityID = bytes.ReadUTF();
            FirstPayReward = bytes.ReadUTF();
            SpecialEffects = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EquipLimitQH);
            bytes.WriteInt(EquipLimitZL);
            bytes.WriteInt(EquipLimitLuck);
            bytes.WriteInt(FreeReviveCount);
            bytes.WriteInt(StayReviveCost);
            bytes.WriteInt(StayReviveTime);
            bytes.WriteUTF(FindTreasureCorrelation);
            bytes.WriteInt(RetailMapID);
            bytes.WriteInt(CreateGuildItemID);
            bytes.WriteInt(TreasureKeyItemID);
            bytes.WriteInt(GuildHelpItemID);
            bytes.WriteInt(ChatWaitTime);
            bytes.WriteUTF(AchievementName);
            bytes.WriteInt(BuyTaskCost);
            bytes.WriteInt(BuyTaskLimitNumb);
            bytes.WriteInt(FYouJian);
            bytes.WriteInt(BuyTaskFreeNumb);
            bytes.WriteInt(AddPkValue);
            bytes.WriteInt(ExpRedBag);
            bytes.WriteInt(autoTaskID);
            bytes.WriteInt(shortcut);
            bytes.WriteInt(OpenActiveClose);
            bytes.WriteInt(UnionEndDay);
            bytes.WriteInt(PlayerProtectLv);
            bytes.WriteUTF(RetroactiveMoney);
            bytes.WriteInt(NoticeInterval);
            bytes.WriteInt(TeamSizeLimit);
            bytes.WriteInt(GuildApplyJoinType);
            bytes.WriteInt(PKMaxNum);
            bytes.WriteInt(SosCoolingTime);
            bytes.WriteUTF(RedBagAlgorithm);
            bytes.WriteInt(GuildRedBagNum);
            bytes.WriteInt(GuildRedBagTime);
            bytes.WriteInt(RedBagTime);
            bytes.WriteUTF(RedBagSendLv);
            bytes.WriteUTF(TreasureLogNum);
            bytes.WriteUTF(JingXiangDianTangMapIDList);
            bytes.WriteUTF(JingXiangGoods);
            bytes.WriteInt(PersonBossNum);
            bytes.WriteInt(PersonBossChange);
            bytes.WriteInt(PersonBossGold);
            bytes.WriteInt(PersonBossTime);
            bytes.WriteInt(AbsentMinLv);
            bytes.WriteInt(AbsentMaxLv);
            bytes.WriteInt(AbsentMinTime);
            bytes.WriteInt(AbsentMaxTime);
            bytes.WriteInt(AbsentB);
            bytes.WriteInt(AbsentLv2);
            bytes.WriteInt(AbsentLv3);
            bytes.WriteInt(AbsentPrice);
            bytes.WriteInt(AbsentMinVip);
            bytes.WriteInt(AbsentVipExp);
            bytes.WriteInt(MiniClientExp);
            bytes.WriteUTF(ClientLv);
            bytes.WriteUTF(FirstPayLv);
            bytes.WriteInt(GuildWarTime);
            bytes.WriteInt(WingItemPrice);
            bytes.WriteUTF(ShortCuts);
            bytes.WriteInt(FriendNum);
            bytes.WriteInt(BrotherNum);
            bytes.WriteInt(TrackCost);
            bytes.WriteInt(RevengeCost);
            bytes.WriteInt(RevengeBuffGroup);
            bytes.WriteInt(RevengeArea);
            bytes.WriteUTF(FriendRecommendLv);
            bytes.WriteUTF(FunctionShowLv);
            bytes.WriteUTF(DayTreasureShow);
            bytes.WriteInt(TreasureSpinSpeed);
            bytes.WriteInt(LibraryOpenDay);
            bytes.WriteInt(RecoveryOpenDay);
            bytes.WriteInt(PickUpSaveTime);
            bytes.WriteUTF(GuildFightMonsterInfo);
            bytes.WriteInt(BuyGrowthPlanEndDay);
            bytes.WriteInt(GrowthPlanCoast);
            bytes.WriteInt(HPReplyCoast);
            bytes.WriteInt(AddDamage);
            bytes.WriteInt(InitialHeroId);
            bytes.WriteInt(AddCdTime);
            bytes.WriteInt(ExtraAward);
            bytes.WriteUTF(MoneyDonation);
            bytes.WriteInt(LeaveGuildTime);
            bytes.WriteInt(CritRateConversion);
            bytes.WriteInt(DodgeRateConversion);
            bytes.WriteUTF(ComboGuide);
            bytes.WriteUTF(TaskEffect);
            bytes.WriteInt(SoulResetCost);
            bytes.WriteInt(LegendRoadTimes);
            bytes.WriteUTF(LegendRoadBuff);
            bytes.WriteUTF(LegendRoadBuffDesc1);
            bytes.WriteUTF(LegendRoadBuffDesc2);
            bytes.WriteUTF(PreloadingSkillsID);
            bytes.WriteUTF(BossDrop);
            bytes.WriteInt(AutoOpenTime);
            bytes.WriteUTF(CompoundOpen);
            bytes.WriteUTF(MilitaryTaskAward);
            bytes.WriteUTF(SoldierGridTime);
            bytes.WriteUTF(MasterierGridTime);
            bytes.WriteUTF(DaoierGridTime);
            bytes.WriteUTF(EquipShadow);
            bytes.WriteUTF(SommerBossInfo);
            bytes.WriteUTF(GuildActivity);
            bytes.WriteInt(TreasureGold);
            bytes.WriteUTF(FestivalActivities);
            bytes.WriteUTF(FestivalActivities2);
            bytes.WriteInt(SeckillCoast);
            bytes.WriteInt(Revenue);
            bytes.WriteUTF(Emaillimit);
            bytes.WriteInt(PatrolTime);
            bytes.WriteInt(PatrolFree);
            bytes.WriteInt(PatrolDropItemID);
            bytes.WriteInt(PatrolDropItemNum);
            bytes.WriteInt(PatrolHelpCd);
            bytes.WriteInt(RobNum);
            bytes.WriteInt(PatrolTransferCost);
            bytes.WriteInt(EndTaskId);
            bytes.WriteInt(RowCd);
            bytes.WriteInt(MedicineCd1);
            bytes.WriteInt(MedicineCd2);
            bytes.WriteUTF(GuildNotice);
            bytes.WriteInt(BiQiId);
            bytes.WriteInt(ChuSheng);
            bytes.WriteInt(ChuShengX);
            bytes.WriteInt(ChuShengY);
            bytes.WriteInt(ChongQiX);
            bytes.WriteInt(ChongQiY);
            bytes.WriteInt(BagInitialDrop);
            bytes.WriteInt(BagUnDrop);
            bytes.WriteInt(BagDrop);
            bytes.WriteInt(EquipMoren);
            bytes.WriteInt(EquipInitialDrop);
            bytes.WriteInt(Dropwuqiyifu);
            bytes.WriteInt(Dropchibang);
            bytes.WriteInt(Dropshoushi);
            bytes.WriteInt(Dropshenqi);
            bytes.WriteInt(ShouDrop);
            bytes.WriteInt(GuiDrop);
            bytes.WriteInt(CurseBag);
            bytes.WriteInt(CurseEquip);
            bytes.WriteInt(RedBagDrop);
            bytes.WriteInt(RedEquipDrop);
            bytes.WriteInt(CurseBagNum1);
            bytes.WriteInt(CurseBagNum2);
            bytes.WriteInt(CurseBagNum3);
            bytes.WriteInt(CurseBagNum);
            bytes.WriteInt(CurseShouNum);
            bytes.WriteInt(NoDrop);
            bytes.WriteInt(EquipNoDrop);
            bytes.WriteInt(DailyRestartLevel);
            bytes.WriteInt(ViewRange);
            bytes.WriteUTF(WingApproach);
            bytes.WriteInt(TransferStone);
            bytes.WriteInt(LyTime);
            bytes.WriteInt(LianYuCostTime);
            bytes.WriteInt(LianYuMinTime);
            bytes.WriteUTF(OccupationPicking);
            bytes.WriteInt(DayFunds);
            bytes.WriteInt(FundsRatio);
            bytes.WriteInt(VIPBuffId);
            bytes.WriteInt(ShaMap);
            bytes.WriteInt(ResetTalent);
            bytes.WriteInt(GuildRedNum);
            bytes.WriteInt(PurchaseMailID);
            bytes.WriteUTF(yuanbao1);
            bytes.WriteInt(OptimizeNum);
            bytes.WriteInt(SuijiCd);
            bytes.WriteInt(ActivityStart);
            bytes.WriteUTF(GuildNeedVip);
            bytes.WriteUTF(MoveBaptizeCost);
            bytes.WriteInt(BigHorn);
            bytes.WriteInt(TreasureDropRate);
            bytes.WriteInt(BossDropRate);
            bytes.WriteInt(ResistJz);
            bytes.WriteInt(ResistMabi);
            bytes.WriteInt(ResistZd);
            bytes.WriteInt(PushSpeed);
            bytes.WriteInt(ExchangeGoodsTimes);
            bytes.WriteInt(ComeBack);
            bytes.WriteInt(Transfer);
            bytes.WriteInt(PeiyangTimes);
            bytes.WriteInt(PeiyangMail);
            bytes.WriteInt(PeiyangMailItem);
            bytes.WriteInt(XiangyaoClose);
            bytes.WriteInt(RobotMissDay);
            bytes.WriteInt(DemoNotice);
            bytes.WriteInt(Military);
            bytes.WriteInt(BloodChitTaskTime);
            bytes.WriteInt(GoldID);
            bytes.WriteInt(SecondsEnergy);
            bytes.WriteInt(EnergyDemand);
            bytes.WriteInt(ChangeCD);
            bytes.WriteInt(CancelCD);
            bytes.WriteInt(GuildProtectTime);
            bytes.WriteUTF(MaxRecovery);
            bytes.WriteInt(LianyuBuff);
            bytes.WriteInt(EnergyItemId);
            bytes.WriteUTF(StoryBoss);
            bytes.WriteInt(PublicTime);
            bytes.WriteInt(LastWeekAwards);
            bytes.WriteInt(ChengzhuHorse);
            bytes.WriteInt(GemPrice);
            bytes.WriteUTF(OfflineExp);
            bytes.WriteInt(KneelDownTime);
            bytes.WriteUTF(StoneID);
            bytes.WriteInt(AddSkillExpRate);
            bytes.WriteInt(MaxStateLv);
            bytes.WriteInt(WorldLvRoleLimit);
            bytes.WriteInt(WorldLvLimit);
            bytes.WriteInt(WebExp);
            bytes.WriteInt(CishaBanyueCD);
            bytes.WriteInt(XunzhangOpen);
            bytes.WriteUTF(TumoGuide);
            bytes.WriteInt(GuildPushCostTime);
            bytes.WriteUTF(IPWhiteList);
            bytes.WriteInt(MagicEquipTwoProp);
            bytes.WriteUTF(InitialSetting);
            bytes.WriteUTF(GoodsNotice);
            bytes.WriteUTF(GuildWarNotice);
            bytes.WriteUTF(MagicInfo);
            bytes.WriteUTF(BaptizeAttributesInfo);
            bytes.WriteUTF(QuanMinHongBao);
            bytes.WriteUTF(QuanMinHongBaoTitleInfo);
            bytes.WriteUTF(OpenPackage);
            bytes.WriteUTF(TttRankPraise);
            bytes.WriteUTF(QiTian);
            bytes.WriteUTF(Intimacy);
            bytes.WriteUTF(InnerDemonsInfo);
            bytes.WriteUTF(DemoGoods);
            bytes.WriteUTF(DemoMap);
            bytes.WriteUTF(ChuanQiShaiZi);
            bytes.WriteUTF(PatrolLostEmail);
            bytes.WriteUTF(MagicEquipLockCost);
            bytes.WriteUTF(MagicEquipHPCoefficient);
            bytes.WriteUTF(MagicEquipRndLv);
            bytes.WriteUTF(ForceChange);
            bytes.WriteUTF(MagicEquipDesc);
            bytes.WriteUTF(FirePigInfo);
            bytes.WriteUTF(TaskStoryInfo);
            bytes.WriteUTF(HeroGuide);
            bytes.WriteUTF(MonBoxID);
            bytes.WriteUTF(LimiteTask);
            bytes.WriteUTF(BossMian);
            bytes.WriteUTF(HappyGuess);
            bytes.WriteUTF(HappyGuessTime);
            bytes.WriteUTF(HappyGuessReward);
            bytes.WriteUTF(WoLongTime);
            bytes.WriteUTF(DemoFunctionOpen);
            bytes.WriteUTF(KillerInfo);
            bytes.WriteUTF(DemoDispatch);
            bytes.WriteUTF(ExpRedBagJiangChi);
            bytes.WriteUTF(OpenActivityID);
            bytes.WriteUTF(UnionActivityID);
            bytes.WriteUTF(UnionActivityID2);
            bytes.WriteUTF(TestActivityID);
            bytes.WriteUTF(FirstPayReward);
            bytes.WriteUTF(SpecialEffects);
        }
    }

    public class ConditionTemplateMode : TplMode
    {
        private IList<ConditionTemplate> mList = null;

        public ConditionTemplateMode(int step) : base("ConditionTemplate", typeof(ConditionTemplate), step) { }

        public ConditionTemplate this[int id]
        {
            get { return Find<ConditionTemplate>(id); }
        }

        public ConditionTemplate Find(int id)
        {
            return Find<ConditionTemplate>(id);
        }

        public IList<ConditionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ConditionTemplate>();
            return mList;
        }
    }

public class ConditionTwoTemplate : Tpl
    {
        /// <summary>
        /// 转职消耗元宝数
        /// </summary>
        public int TurnJobCost;
        /// <summary>
        /// 战士怒气杀招
        /// </summary>
        public int AngerZ;
        /// <summary>
        /// 法师怒气杀招
        /// </summary>
        public int AngerF;
        /// <summary>
        /// 道士怒气杀招
        /// </summary>
        public int AngerD;
        /// <summary>
        /// 拍卖行暂存数量上限
        /// </summary>
        public int auctionmax;
        /// <summary>
        /// 行会拍卖时间（秒）
        /// </summary>
        public int hanghuitime;
        /// <summary>
        /// 世界拍卖时间（秒）
        /// </summary>
        public int auctiontime;
        /// <summary>
        /// 世界拍卖手续比例（万分比）
        /// </summary>
        public int auctionfee;
        /// <summary>
        /// 行会拍卖手续费（万分比）
        /// </summary>
        public int hanghuifee;
        /// <summary>
        /// 免费召唤次数
        /// </summary>
        public int FreeSummon;
        /// <summary>
        /// 召唤消耗
        /// </summary>
        public int SummonCost;
        /// <summary>
        /// 战宠走一格需要的毫秒|跑一个需要的毫秒
        /// </summary>
        public string PetGridTime;
        /// <summary>
        /// 需要出售的矿石ID
        /// </summary>
        public string MineSellID;
        /// <summary>
        /// 鹤嘴锄商城ID
        /// </summary>
        public int HoeShopID;
        /// <summary>
        /// 矿洞地图ID
        /// </summary>
        public int MineMapID;
        /// <summary>
        /// 矿工背包掉落
        /// 万分比
        /// </summary>
        public string MineBagDrop;
        /// <summary>
        /// 多倍泡点buffID
        /// </summary>
        public int FreeBubbleBuff;
        /// <summary>
        /// 提高多倍泡点效率货币类型
        /// </summary>
        public int BubbleUpCostType;
        /// <summary>
        /// 提高多倍泡点效率金刚石价格
        /// </summary>
        public int BubbleUpCost;
        /// <summary>
        /// 提高多倍泡点效率buffID
        /// </summary>
        public int BubbleUpBuff;
        /// <summary>
        /// 特殊属性buffID
        /// 封印|诱惑|净化|压制|战宠撕裂|诅咒|减速
        /// </summary>
        public string SpecialEffectBuffId;
        /// <summary>
        /// 角色额外仇恨系数
        /// </summary>
        public int RoleHatredCoefficient;
        /// <summary>
        /// 仇恨刷新时间
        /// （毫秒）
        /// </summary>
        public int HatredRefreshTime;
        /// <summary>
        /// 任务悬赏邮件id（失败|成功）
        /// </summary>
        public string TaskOfferID;
        /// <summary>
        /// 生命值低于xx触发神盾
        /// （万分比）
        /// </summary>
        public int HpPctActEnergy;
        /// <summary>
        /// 神盾触发CD
        /// （毫秒)
        /// </summary>
        public int ActEnergyCD;
        /// <summary>
        /// 地下黑市刷新时间（小时）|地下黑市刷新数量，集市会场刷新时间（小时|集市会场刷新数量
        /// </summary>
        public string ShopRefreshTime;
        /// <summary>
        /// 境界提升邮件发放奖励
        /// </summary>
        public int JJLVMail;
        /// <summary>
        /// 宝藏快速回收类别
        /// </summary>
        public string RecoveryType;
        /// <summary>
        /// 官职压制（免伤万分比）
        /// </summary>
        public int OfficealReduceHurt;
        /// <summary>
        /// 超级练功房赠送时间（秒）
        /// </summary>
        public int PracticeTime;
        /// <summary>
        /// 日常活动(UI界面显示)
        /// </summary>
        public string TimeLine;
        /// <summary>
        /// 周期活动开启时间(时间戳）
        /// </summary>
        public int CycleStartTime;
        /// <summary>
        /// 服务器境界均值
        /// </summary>
        public string JjAverage;
        /// <summary>
        /// 悬赏任务刷新时间点
        /// </summary>
        public string RewardOrderCheck;
        /// <summary>
        /// 当已发布悬赏任务数量大于该值时，不再发布系统悬赏任务
        /// </summary>
        public int RewardOrderLimited;
        /// <summary>
        /// 押镖地图
        /// </summary>
        public int Escort;
        /// <summary>
        /// 免费会员每日奖励邮件
        /// </summary>
        public int FreeMemberDailyRewardsMail;
        /// <summary>
        /// 单词强化失败增加熟练度
        /// </summary>
        public int StrengthExp;
        /// <summary>
        /// 可增加熟练度上限（万分比）
        /// </summary>
        public int StrengthExpMax;
        /// <summary>
        /// 怪物
        /// 最低伤害系数
        /// </summary>
        public int MinDmgSet;
        /// <summary>
        /// 怪物
        /// 伤害波动系数
        /// </summary>
        public int DmgRndSet;
        /// <summary>
        /// 召唤物
        /// 最低伤害系数
        /// </summary>
        public int PetMinDmgSet;
        /// <summary>
        /// 召唤物
        /// 伤害波动系数
        /// </summary>
        public int PetDmgRndSet;
        /// <summary>
        /// 鉴定文字标识
        /// </summary>
        public string IdentifySign;
        /// <summary>
        /// 官印升级所需
        /// </summary>
        public int OfficialSealNeed;
        /// <summary>
        /// 短期活动开启时间
        /// </summary>
        public int ShortActTime;
        /// <summary>
        /// 寻宝-普通宝箱id
        /// </summary>
        public string NormalTreasure;
        /// <summary>
        /// 寻宝-高级宝箱id
        /// </summary>
        public string HigherTreasure;
        /// <summary>
        /// 寻宝-终极宝箱id
        /// </summary>
        public string BestTreasure;
        /// <summary>
        /// 宝藏展示界面2
        /// </summary>
        public string DayTreasureShow2;
        /// <summary>
        /// 宝藏展示界面3
        /// </summary>
        public string DayTreasureShow3;
        /// <summary>
        /// 寻宝获取途径
        /// </summary>
        public string TreasureApproach;
        /// <summary>
        /// 宝物各阶段开放条件（境界）
        /// </summary>
        public string EvilEquipOpenCondition;
        /// <summary>
        /// 寻宝-大富翁副本初始移动次数
        /// </summary>
        public int MonopolyStep;
        /// <summary>
        /// 寻宝主界面提示文本
        /// </summary>
        public string TreasureTxt;
        /// <summary>
        /// 迷雾副本提示
        /// </summary>
        public string FogTxt;
        /// <summary>
        /// 骰子副本
        /// 提示
        /// </summary>
        public string MonopolyTxt;
        /// <summary>
        /// 深渊魔装效果BUFF组ID
        /// </summary>
        public int EvilEquipEffectGroupID;
        /// <summary>
        /// 寻宝-副本小地图图标tips
        /// </summary>
        public string MonopolyMapTxet;
        /// <summary>
        /// 降妖除魔刷新
        /// </summary>
        public string DemonExorcisRefresh;
        /// <summary>
        /// 玩家攻速上限
        /// </summary>
        public int AttackSpeedLimit;
        /// <summary>
        /// 拍卖行
        /// 系统回收间隔时间
        /// （秒）
        /// </summary>
        public string SystemAuctionTime;
        /// <summary>
        /// 快捷栏默认设置
        /// </summary>
        public string DefaultHotkeys;
        /// <summary>
        /// 拍卖行
        /// 常规类上架间隔时间
        /// （秒）
        /// </summary>
        public string SystemAuctionUpTime;
        /// <summary>
        /// 拍卖行常规推送
        /// 数量区间
        /// </summary>
        public string SystemAuctionUpItem;
        /// <summary>
        /// 拍卖行世界推送上架间隔时间
        /// </summary>
        public string WorldAuctionUpItemTime;
        /// <summary>
        /// 拍卖行世界推送上架数量区间
        /// </summary>
        public string WorldAuctionUpItem;
        /// <summary>
        /// 拍卖行
        /// 套装类上架间隔时间
        /// （秒）
        /// </summary>
        public string SystemAuctionSuitTime;
        /// <summary>
        /// 拍卖行套装推送
        /// 数量区间
        /// </summary>
        public string SystemAuctionSuitItem;
        /// <summary>
        /// 货币对应道具id
        /// </summary>
        public string MoneyTypeItemId;
        /// <summary>
        /// 快捷行动条按等级替换
        /// </summary>
        public string HotkeyReplace;
        /// <summary>
        /// 可用提示
        /// </summary>
        public string EnableTipsLimit;
        /// <summary>
        /// 黑市刷新次数及价格
        /// </summary>
        public string BlackMarketRefresh;
        /// <summary>
        /// 铭文套装效果累进 参数
        /// </summary>
        public string InscriptionSuitEffectPara;
        /// <summary>
        /// 道具品质对应的颜色
        /// </summary>
        public string GoodsQualityColors;
        /// <summary>
        /// 安全区信息库存上限
        /// </summary>
        public int SafeZoneInfo;
        /// <summary>
        /// 安全区信息入库需达到角色等级
        /// </summary>
        public int SafeZoneRobotLv;
        /// <summary>
        /// 安全区机器人刷新时间间隔
        /// (秒)
        /// </summary>
        public int SafeZoneRobotRefreshTime;
        /// <summary>
        /// 每次刷新机器人数量
        /// </summary>
        public int SafeZoneRobotRefresh;
        /// <summary>
        /// 安全区机器人数量上限
        /// </summary>
        public int SafeZoneRobotLimit;
        /// <summary>
        /// 安全区机器人使用ai
        /// </summary>
        public int SafeZoneRobotAi;
        /// <summary>
        /// BOSS之家刷新公告（公告表ID）
        /// </summary>
        public int BossFamilyNotice;
        /// <summary>
        /// 荣耀点
        /// 属性BUFF
        /// </summary>
        public string HonourAtrr;
        /// <summary>
        /// 荣耀点数
        /// 衰减比例
        /// </summary>
        public int DecayRatio;
        /// <summary>
        /// 熔炉抽奖次数
        /// </summary>
        public string FurnaceTimes;
        /// <summary>
        /// 熔炉普通抽奖消耗道具id
        /// </summary>
        public string FurnaceCostItem;
        /// <summary>
        /// 熔炉高级抽奖消耗道具id
        /// </summary>
        public string Furnace2CostItem;
        /// <summary>
        /// 熔炉高级抽奖消耗钻石
        /// </summary>
        public string Furnace2CostDiamond;
        /// <summary>
        /// 帮派拍卖行物品最大数量
        /// </summary>
        public string GuildAuctionMax;
        /// <summary>
        /// 自动熔炼触发间隔
        /// （秒）
        /// </summary>
        public int AutoMeltingTime;
        /// <summary>
        /// 超出天赋上限后
        /// 天赋道具获得钻石
        /// </summary>
        public int TalentDiamonds;
        /// <summary>
        /// 五行之力Buff
        /// </summary>
        public string WuXingBuff;
        /// <summary>
        /// 掉落留存时间（秒）
        /// </summary>
        public int FloorItmeSiveTimes;
        /// <summary>
        /// 分身消失所用特效
        /// </summary>
        public int SeparationEffect;
        /// <summary>
        /// 藏宝图随机点
        /// </summary>
        public string TreasureMapPoint;
        /// <summary>
        /// 开服多少天内，怪物刷新时间加快
        /// </summary>
        public string MonTimeAcceleration;
        /// <summary>
        /// 击杀掉落物品数量比例
        /// </summary>
        public string KillDropRatio;
        /// <summary>
        /// 召唤物与魂兽
        /// 是否共存
        /// 0是1否
        /// </summary>
        public int DoubleSummoned;
        /// <summary>
        /// flash大厅奖励
        /// </summary>
        public string FlashReward;
        /// <summary>
        /// 开服第几天开指定活动
        /// </summary>
        public string OpenDayDailyActivity;
        /// <summary>
        /// 合服第几天开指定活动
        /// </summary>
        public string UnionDayDailyActivity;
        /// <summary>
        /// 自动拾取范围
        /// </summary>
        public int AutoCollectRange;
        /// <summary>
        /// 新四件熔炼物品ID
        /// </summary>
        public string RongLian4;
        /// <summary>
        /// 常规活动入口开启时间
        /// </summary>
        public int CommonActivityDate;
        /// <summary>
        /// 常规活动列表
        /// </summary>
        public string CommonActivityList;
        /// <summary>
        /// 常规活动持续时间
        /// </summary>
        public int CommonActivityDelayDay;
        /// <summary>
        /// 常规活动入口icon
        /// </summary>
        public int CommonActivityIcon;
        /// <summary>
        /// 沙城捐赠红包数量|持续时间
        /// </summary>
        public string AttackCityDoante;
        /// <summary>
        /// 十二宫入场券单价
        /// </summary>
        public string TwelveCostMoney;
        /// <summary>
        /// 十二宫扫荡消耗道具折扣万分比
        /// </summary>
        public int TwelveCostSale;
        /// <summary>
        /// 十二宫界面奖励文本
        /// </summary>
        public string TwelveText;
        /// <summary>
        /// 十二宫界面奖励预览
        /// </summary>
        public string TwelveBonusShow;
        /// <summary>
        /// 时间阶段和等级上限
        /// </summary>
        public string LevelLimit;
        /// <summary>
        /// 商品展示数量（聚灵黑市）
        /// </summary>
        public int CommodiyShowNum;
        /// <summary>
        /// 跨服龙城归属-龙头称号
        /// </summary>
        public int DragonCityTitle;
        /// <summary>
        /// 跨服龙城归属-龙头坐骑
        /// </summary>
        public int DragonCityHorse;
        /// <summary>
        /// 足迹专属效果
        /// </summary>
        public string FootBuff;
        /// <summary>
        /// 每月补签次数
        /// </summary>
        public int FreeRetroactive;
        /// <summary>
        /// 龙族宝藏探宝次数
        /// </summary>
        public string DragonTreasureTimes;
        /// <summary>
        /// 龙族宝藏探宝消耗钻石
        /// </summary>
        public string DragonTreasureCostDiamond;
        /// <summary>
        /// 跨服攻沙医生消耗
        /// </summary>
        public string WarDocCost;
        /// <summary>
        /// 月中月末活动开服几天后开
        /// </summary>
        public int AssembleMonthOpenDay;
        /// <summary>
        /// 周三周六活动开服几天后开
        /// </summary>
        public int AssembleWeekOpenDay;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TurnJobCost = bytes.ReadInt();
            AngerZ = bytes.ReadInt();
            AngerF = bytes.ReadInt();
            AngerD = bytes.ReadInt();
            auctionmax = bytes.ReadInt();
            hanghuitime = bytes.ReadInt();
            auctiontime = bytes.ReadInt();
            auctionfee = bytes.ReadInt();
            hanghuifee = bytes.ReadInt();
            FreeSummon = bytes.ReadInt();
            SummonCost = bytes.ReadInt();
            PetGridTime = bytes.ReadUTF();
            MineSellID = bytes.ReadUTF();
            HoeShopID = bytes.ReadInt();
            MineMapID = bytes.ReadInt();
            MineBagDrop = bytes.ReadUTF();
            FreeBubbleBuff = bytes.ReadInt();
            BubbleUpCostType = bytes.ReadInt();
            BubbleUpCost = bytes.ReadInt();
            BubbleUpBuff = bytes.ReadInt();
            SpecialEffectBuffId = bytes.ReadUTF();
            RoleHatredCoefficient = bytes.ReadInt();
            HatredRefreshTime = bytes.ReadInt();
            TaskOfferID = bytes.ReadUTF();
            HpPctActEnergy = bytes.ReadInt();
            ActEnergyCD = bytes.ReadInt();
            ShopRefreshTime = bytes.ReadUTF();
            JJLVMail = bytes.ReadInt();
            RecoveryType = bytes.ReadUTF();
            OfficealReduceHurt = bytes.ReadInt();
            PracticeTime = bytes.ReadInt();
            TimeLine = bytes.ReadUTF();
            CycleStartTime = bytes.ReadInt();
            JjAverage = bytes.ReadUTF();
            RewardOrderCheck = bytes.ReadUTF();
            RewardOrderLimited = bytes.ReadInt();
            Escort = bytes.ReadInt();
            FreeMemberDailyRewardsMail = bytes.ReadInt();
            StrengthExp = bytes.ReadInt();
            StrengthExpMax = bytes.ReadInt();
            MinDmgSet = bytes.ReadInt();
            DmgRndSet = bytes.ReadInt();
            PetMinDmgSet = bytes.ReadInt();
            PetDmgRndSet = bytes.ReadInt();
            IdentifySign = bytes.ReadUTF();
            OfficialSealNeed = bytes.ReadInt();
            ShortActTime = bytes.ReadInt();
            NormalTreasure = bytes.ReadUTF();
            HigherTreasure = bytes.ReadUTF();
            BestTreasure = bytes.ReadUTF();
            DayTreasureShow2 = bytes.ReadUTF();
            DayTreasureShow3 = bytes.ReadUTF();
            TreasureApproach = bytes.ReadUTF();
            EvilEquipOpenCondition = bytes.ReadUTF();
            MonopolyStep = bytes.ReadInt();
            TreasureTxt = bytes.ReadUTF();
            FogTxt = bytes.ReadUTF();
            MonopolyTxt = bytes.ReadUTF();
            EvilEquipEffectGroupID = bytes.ReadInt();
            MonopolyMapTxet = bytes.ReadUTF();
            DemonExorcisRefresh = bytes.ReadUTF();
            AttackSpeedLimit = bytes.ReadInt();
            SystemAuctionTime = bytes.ReadUTF();
            DefaultHotkeys = bytes.ReadUTF();
            SystemAuctionUpTime = bytes.ReadUTF();
            SystemAuctionUpItem = bytes.ReadUTF();
            WorldAuctionUpItemTime = bytes.ReadUTF();
            WorldAuctionUpItem = bytes.ReadUTF();
            SystemAuctionSuitTime = bytes.ReadUTF();
            SystemAuctionSuitItem = bytes.ReadUTF();
            MoneyTypeItemId = bytes.ReadUTF();
            HotkeyReplace = bytes.ReadUTF();
            EnableTipsLimit = bytes.ReadUTF();
            BlackMarketRefresh = bytes.ReadUTF();
            InscriptionSuitEffectPara = bytes.ReadUTF();
            GoodsQualityColors = bytes.ReadUTF();
            SafeZoneInfo = bytes.ReadInt();
            SafeZoneRobotLv = bytes.ReadInt();
            SafeZoneRobotRefreshTime = bytes.ReadInt();
            SafeZoneRobotRefresh = bytes.ReadInt();
            SafeZoneRobotLimit = bytes.ReadInt();
            SafeZoneRobotAi = bytes.ReadInt();
            BossFamilyNotice = bytes.ReadInt();
            HonourAtrr = bytes.ReadUTF();
            DecayRatio = bytes.ReadInt();
            FurnaceTimes = bytes.ReadUTF();
            FurnaceCostItem = bytes.ReadUTF();
            Furnace2CostItem = bytes.ReadUTF();
            Furnace2CostDiamond = bytes.ReadUTF();
            GuildAuctionMax = bytes.ReadUTF();
            AutoMeltingTime = bytes.ReadInt();
            TalentDiamonds = bytes.ReadInt();
            WuXingBuff = bytes.ReadUTF();
            FloorItmeSiveTimes = bytes.ReadInt();
            SeparationEffect = bytes.ReadInt();
            TreasureMapPoint = bytes.ReadUTF();
            MonTimeAcceleration = bytes.ReadUTF();
            KillDropRatio = bytes.ReadUTF();
            DoubleSummoned = bytes.ReadInt();
            FlashReward = bytes.ReadUTF();
            OpenDayDailyActivity = bytes.ReadUTF();
            UnionDayDailyActivity = bytes.ReadUTF();
            AutoCollectRange = bytes.ReadInt();
            RongLian4 = bytes.ReadUTF();
            CommonActivityDate = bytes.ReadInt();
            CommonActivityList = bytes.ReadUTF();
            CommonActivityDelayDay = bytes.ReadInt();
            CommonActivityIcon = bytes.ReadInt();
            AttackCityDoante = bytes.ReadUTF();
            TwelveCostMoney = bytes.ReadUTF();
            TwelveCostSale = bytes.ReadInt();
            TwelveText = bytes.ReadUTF();
            TwelveBonusShow = bytes.ReadUTF();
            LevelLimit = bytes.ReadUTF();
            CommodiyShowNum = bytes.ReadInt();
            DragonCityTitle = bytes.ReadInt();
            DragonCityHorse = bytes.ReadInt();
            FootBuff = bytes.ReadUTF();
            FreeRetroactive = bytes.ReadInt();
            DragonTreasureTimes = bytes.ReadUTF();
            DragonTreasureCostDiamond = bytes.ReadUTF();
            WarDocCost = bytes.ReadUTF();
            AssembleMonthOpenDay = bytes.ReadInt();
            AssembleWeekOpenDay = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(TurnJobCost);
            bytes.WriteInt(AngerZ);
            bytes.WriteInt(AngerF);
            bytes.WriteInt(AngerD);
            bytes.WriteInt(auctionmax);
            bytes.WriteInt(hanghuitime);
            bytes.WriteInt(auctiontime);
            bytes.WriteInt(auctionfee);
            bytes.WriteInt(hanghuifee);
            bytes.WriteInt(FreeSummon);
            bytes.WriteInt(SummonCost);
            bytes.WriteUTF(PetGridTime);
            bytes.WriteUTF(MineSellID);
            bytes.WriteInt(HoeShopID);
            bytes.WriteInt(MineMapID);
            bytes.WriteUTF(MineBagDrop);
            bytes.WriteInt(FreeBubbleBuff);
            bytes.WriteInt(BubbleUpCostType);
            bytes.WriteInt(BubbleUpCost);
            bytes.WriteInt(BubbleUpBuff);
            bytes.WriteUTF(SpecialEffectBuffId);
            bytes.WriteInt(RoleHatredCoefficient);
            bytes.WriteInt(HatredRefreshTime);
            bytes.WriteUTF(TaskOfferID);
            bytes.WriteInt(HpPctActEnergy);
            bytes.WriteInt(ActEnergyCD);
            bytes.WriteUTF(ShopRefreshTime);
            bytes.WriteInt(JJLVMail);
            bytes.WriteUTF(RecoveryType);
            bytes.WriteInt(OfficealReduceHurt);
            bytes.WriteInt(PracticeTime);
            bytes.WriteUTF(TimeLine);
            bytes.WriteInt(CycleStartTime);
            bytes.WriteUTF(JjAverage);
            bytes.WriteUTF(RewardOrderCheck);
            bytes.WriteInt(RewardOrderLimited);
            bytes.WriteInt(Escort);
            bytes.WriteInt(FreeMemberDailyRewardsMail);
            bytes.WriteInt(StrengthExp);
            bytes.WriteInt(StrengthExpMax);
            bytes.WriteInt(MinDmgSet);
            bytes.WriteInt(DmgRndSet);
            bytes.WriteInt(PetMinDmgSet);
            bytes.WriteInt(PetDmgRndSet);
            bytes.WriteUTF(IdentifySign);
            bytes.WriteInt(OfficialSealNeed);
            bytes.WriteInt(ShortActTime);
            bytes.WriteUTF(NormalTreasure);
            bytes.WriteUTF(HigherTreasure);
            bytes.WriteUTF(BestTreasure);
            bytes.WriteUTF(DayTreasureShow2);
            bytes.WriteUTF(DayTreasureShow3);
            bytes.WriteUTF(TreasureApproach);
            bytes.WriteUTF(EvilEquipOpenCondition);
            bytes.WriteInt(MonopolyStep);
            bytes.WriteUTF(TreasureTxt);
            bytes.WriteUTF(FogTxt);
            bytes.WriteUTF(MonopolyTxt);
            bytes.WriteInt(EvilEquipEffectGroupID);
            bytes.WriteUTF(MonopolyMapTxet);
            bytes.WriteUTF(DemonExorcisRefresh);
            bytes.WriteInt(AttackSpeedLimit);
            bytes.WriteUTF(SystemAuctionTime);
            bytes.WriteUTF(DefaultHotkeys);
            bytes.WriteUTF(SystemAuctionUpTime);
            bytes.WriteUTF(SystemAuctionUpItem);
            bytes.WriteUTF(WorldAuctionUpItemTime);
            bytes.WriteUTF(WorldAuctionUpItem);
            bytes.WriteUTF(SystemAuctionSuitTime);
            bytes.WriteUTF(SystemAuctionSuitItem);
            bytes.WriteUTF(MoneyTypeItemId);
            bytes.WriteUTF(HotkeyReplace);
            bytes.WriteUTF(EnableTipsLimit);
            bytes.WriteUTF(BlackMarketRefresh);
            bytes.WriteUTF(InscriptionSuitEffectPara);
            bytes.WriteUTF(GoodsQualityColors);
            bytes.WriteInt(SafeZoneInfo);
            bytes.WriteInt(SafeZoneRobotLv);
            bytes.WriteInt(SafeZoneRobotRefreshTime);
            bytes.WriteInt(SafeZoneRobotRefresh);
            bytes.WriteInt(SafeZoneRobotLimit);
            bytes.WriteInt(SafeZoneRobotAi);
            bytes.WriteInt(BossFamilyNotice);
            bytes.WriteUTF(HonourAtrr);
            bytes.WriteInt(DecayRatio);
            bytes.WriteUTF(FurnaceTimes);
            bytes.WriteUTF(FurnaceCostItem);
            bytes.WriteUTF(Furnace2CostItem);
            bytes.WriteUTF(Furnace2CostDiamond);
            bytes.WriteUTF(GuildAuctionMax);
            bytes.WriteInt(AutoMeltingTime);
            bytes.WriteInt(TalentDiamonds);
            bytes.WriteUTF(WuXingBuff);
            bytes.WriteInt(FloorItmeSiveTimes);
            bytes.WriteInt(SeparationEffect);
            bytes.WriteUTF(TreasureMapPoint);
            bytes.WriteUTF(MonTimeAcceleration);
            bytes.WriteUTF(KillDropRatio);
            bytes.WriteInt(DoubleSummoned);
            bytes.WriteUTF(FlashReward);
            bytes.WriteUTF(OpenDayDailyActivity);
            bytes.WriteUTF(UnionDayDailyActivity);
            bytes.WriteInt(AutoCollectRange);
            bytes.WriteUTF(RongLian4);
            bytes.WriteInt(CommonActivityDate);
            bytes.WriteUTF(CommonActivityList);
            bytes.WriteInt(CommonActivityDelayDay);
            bytes.WriteInt(CommonActivityIcon);
            bytes.WriteUTF(AttackCityDoante);
            bytes.WriteUTF(TwelveCostMoney);
            bytes.WriteInt(TwelveCostSale);
            bytes.WriteUTF(TwelveText);
            bytes.WriteUTF(TwelveBonusShow);
            bytes.WriteUTF(LevelLimit);
            bytes.WriteInt(CommodiyShowNum);
            bytes.WriteInt(DragonCityTitle);
            bytes.WriteInt(DragonCityHorse);
            bytes.WriteUTF(FootBuff);
            bytes.WriteInt(FreeRetroactive);
            bytes.WriteUTF(DragonTreasureTimes);
            bytes.WriteUTF(DragonTreasureCostDiamond);
            bytes.WriteUTF(WarDocCost);
            bytes.WriteInt(AssembleMonthOpenDay);
            bytes.WriteInt(AssembleWeekOpenDay);
        }
    }

    public class ConditionTwoTemplateMode : TplMode
    {
        private IList<ConditionTwoTemplate> mList = null;

        public ConditionTwoTemplateMode(int step) : base("ConditionTwoTemplate", typeof(ConditionTwoTemplate), step) { }

        public ConditionTwoTemplate this[int id]
        {
            get { return Find<ConditionTwoTemplate>(id); }
        }

        public ConditionTwoTemplate Find(int id)
        {
            return Find<ConditionTwoTemplate>(id);
        }

        public IList<ConditionTwoTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ConditionTwoTemplate>();
            return mList;
        }
    }

public class LimiteTaskTemplate : Tpl
    {
        /// <summary>
        /// 任务轮次
        /// </summary>
        public int Time;
        /// <summary>
        /// 限时时间（天）
        /// </summary>
        public int LimiteTime;
        /// <summary>
        /// 名称
        /// </summary>
        public string name;
        /// <summary>
        /// 完成类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 完成次数
        /// </summary>
        public int Count;
        /// <summary>
        /// 进入地图ID
        /// </summary>
        public int Data1;
        /// <summary>
        /// 数据2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 数据3
        /// </summary>
        public int Data3;
        /// <summary>
        /// 对应链接
        /// </summary>
        public string Link;
        /// <summary>
        /// 奖励道具id
        /// </summary>
        public string Awards;
        /// <summary>
        /// 作废
        /// </summary>
        public int GemLevel;
        /// <summary>
        /// 排序
        /// </summary>
        public int Order;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Time = bytes.ReadInt();
            LimiteTime = bytes.ReadInt();
            name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Count = bytes.ReadInt();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Data3 = bytes.ReadInt();
            Link = bytes.ReadUTF();
            Awards = bytes.ReadUTF();
            GemLevel = bytes.ReadInt();
            Order = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Time);
            bytes.WriteInt(LimiteTime);
            bytes.WriteUTF(name);
            bytes.WriteInt(Type);
            bytes.WriteInt(Count);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteInt(Data3);
            bytes.WriteUTF(Link);
            bytes.WriteUTF(Awards);
            bytes.WriteInt(GemLevel);
            bytes.WriteInt(Order);
        }
    }

    public class LimiteTaskTemplateMode : TplMode
    {
        private IList<LimiteTaskTemplate> mList = null;

        public LimiteTaskTemplateMode(int step) : base("LimiteTaskTemplate", typeof(LimiteTaskTemplate), step) { }

        public LimiteTaskTemplate this[int id]
        {
            get { return Find<LimiteTaskTemplate>(id); }
        }

        public LimiteTaskTemplate Find(int id)
        {
            return Find<LimiteTaskTemplate>(id);
        }

        public IList<LimiteTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<LimiteTaskTemplate>();
            return mList;
        }
    }

public class TimeLimitedtTargetTemplate : Tpl
    {
        /// <summary>
        /// 目标名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 排序
        /// </summary>
        public int idx;
        /// <summary>
        /// 目标类型
        /// </summary>
        public int TargetType;
        /// <summary>
        /// 出现等级条件
        /// </summary>
        public int Lv;
        /// <summary>
        /// 出现转生等级条件
        /// </summary>
        public int StateLv;
        /// <summary>
        /// 开服天数
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 需求系统类型
        /// </summary>
        public int FunctionType;
        /// <summary>
        /// 需求系统等级
        /// </summary>
        public int FunctionLv;
        /// <summary>
        /// 持续时间
        /// </summary>
        public int Time;
        /// <summary>
        /// 是否完成首充
        /// </summary>
        public int FirstPay;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 完成类型
        /// </summary>
        public int TaskType;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Param1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Param2;
        /// <summary>
        /// 参数3
        /// </summary>
        public int Param3;
        /// <summary>
        /// 参数4
        /// </summary>
        public int Param4;
        /// <summary>
        /// 描述数字（前端用）
        /// </summary>
        public int DesNum;
        /// <summary>
        /// 立即前往界面
        /// </summary>
        public string SkipTarget;
        /// <summary>
        /// 快捷途径入口
        /// </summary>
        public string SkipPath;
        /// <summary>
        /// 界面图案
        /// </summary>
        public int Image;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            idx = bytes.ReadInt();
            TargetType = bytes.ReadInt();
            Lv = bytes.ReadInt();
            StateLv = bytes.ReadInt();
            OpenDay = bytes.ReadInt();
            FunctionType = bytes.ReadInt();
            FunctionLv = bytes.ReadInt();
            Time = bytes.ReadInt();
            FirstPay = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            TaskType = bytes.ReadInt();
            Param1 = bytes.ReadInt();
            Param2 = bytes.ReadInt();
            Param3 = bytes.ReadInt();
            Param4 = bytes.ReadInt();
            DesNum = bytes.ReadInt();
            SkipTarget = bytes.ReadUTF();
            SkipPath = bytes.ReadUTF();
            Image = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(idx);
            bytes.WriteInt(TargetType);
            bytes.WriteInt(Lv);
            bytes.WriteInt(StateLv);
            bytes.WriteInt(OpenDay);
            bytes.WriteInt(FunctionType);
            bytes.WriteInt(FunctionLv);
            bytes.WriteInt(Time);
            bytes.WriteInt(FirstPay);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(TaskType);
            bytes.WriteInt(Param1);
            bytes.WriteInt(Param2);
            bytes.WriteInt(Param3);
            bytes.WriteInt(Param4);
            bytes.WriteInt(DesNum);
            bytes.WriteUTF(SkipTarget);
            bytes.WriteUTF(SkipPath);
            bytes.WriteInt(Image);
        }
    }

    public class TimeLimitedtTargetTemplateMode : TplMode
    {
        private IList<TimeLimitedtTargetTemplate> mList = null;

        public TimeLimitedtTargetTemplateMode(int step) : base("TimeLimitedtTargetTemplate", typeof(TimeLimitedtTargetTemplate), step) { }

        public TimeLimitedtTargetTemplate this[int id]
        {
            get { return Find<TimeLimitedtTargetTemplate>(id); }
        }

        public TimeLimitedtTargetTemplate Find(int id)
        {
            return Find<TimeLimitedtTargetTemplate>(id);
        }

        public IList<TimeLimitedtTargetTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TimeLimitedtTargetTemplate>();
            return mList;
        }
    }

public class FlashSaleTemplate : Tpl
    {
        /// <summary>
        /// 礼包名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 判定顺序
        /// </summary>
        public int idx;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 持续时间（秒）
        /// </summary>
        public int Duration;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int JJlv;
        /// <summary>
        /// 开服天数
        /// </summary>
        public int Days;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            idx = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            Duration = bytes.ReadInt();
            JJlv = bytes.ReadInt();
            Days = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(idx);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(Duration);
            bytes.WriteInt(JJlv);
            bytes.WriteInt(Days);
        }
    }

    public class FlashSaleTemplateMode : TplMode
    {
        private IList<FlashSaleTemplate> mList = null;

        public FlashSaleTemplateMode(int step) : base("FlashSaleTemplate", typeof(FlashSaleTemplate), step) { }

        public FlashSaleTemplate this[int id]
        {
            get { return Find<FlashSaleTemplate>(id); }
        }

        public FlashSaleTemplate Find(int id)
        {
            return Find<FlashSaleTemplate>(id);
        }

        public IList<FlashSaleTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FlashSaleTemplate>();
            return mList;
        }
    }

public class SystemListTemplate : Tpl
    {
        /// <summary>
        /// 系统名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 等级单位名称
        /// </summary>
        public string LevelName;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            LevelName = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(LevelName);
        }
    }

    public class SystemListTemplateMode : TplMode
    {
        private IList<SystemListTemplate> mList = null;

        public SystemListTemplateMode(int step) : base("SystemListTemplate", typeof(SystemListTemplate), step) { }

        public SystemListTemplate this[int id]
        {
            get { return Find<SystemListTemplate>(id); }
        }

        public SystemListTemplate Find(int id)
        {
            return Find<SystemListTemplate>(id);
        }

        public IList<SystemListTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SystemListTemplate>();
            return mList;
        }
    }

public class YeZhanAwardTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int Statelvl;
        /// <summary>
        /// 第1名排名奖励
        /// </summary>
        public string AwardsConf1;
        /// <summary>
        /// 第2名排名奖励
        /// </summary>
        public string AwardsConf2;
        /// <summary>
        /// 第3名排名奖励
        /// </summary>
        public string AwardsConf3;
        /// <summary>
        /// 第4~10名排名奖励
        /// </summary>
        public string AwardsConf4;
        /// <summary>
        /// 参与奖励
        /// </summary>
        public string AwardsConf5;
        /// <summary>
        /// 奋斗奖
        /// </summary>
        public string AwardsConf6;
        /// <summary>
        /// 五杀奖励
        /// </summary>
        public string AwardsConf7;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Statelvl = bytes.ReadInt();
            AwardsConf1 = bytes.ReadUTF();
            AwardsConf2 = bytes.ReadUTF();
            AwardsConf3 = bytes.ReadUTF();
            AwardsConf4 = bytes.ReadUTF();
            AwardsConf5 = bytes.ReadUTF();
            AwardsConf6 = bytes.ReadUTF();
            AwardsConf7 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Statelvl);
            bytes.WriteUTF(AwardsConf1);
            bytes.WriteUTF(AwardsConf2);
            bytes.WriteUTF(AwardsConf3);
            bytes.WriteUTF(AwardsConf4);
            bytes.WriteUTF(AwardsConf5);
            bytes.WriteUTF(AwardsConf6);
            bytes.WriteUTF(AwardsConf7);
        }
    }

    public class YeZhanAwardTemplateMode : TplMode
    {
        private IList<YeZhanAwardTemplate> mList = null;

        public YeZhanAwardTemplateMode(int step) : base("YeZhanAwardTemplate", typeof(YeZhanAwardTemplate), step) { }

        public YeZhanAwardTemplate this[int id]
        {
            get { return Find<YeZhanAwardTemplate>(id); }
        }

        public YeZhanAwardTemplate Find(int id)
        {
            return Find<YeZhanAwardTemplate>(id);
        }

        public IList<YeZhanAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<YeZhanAwardTemplate>();
            return mList;
        }
    }

public class GuideTemplate : Tpl
    {
        /// <summary>
        /// 1：强化
        /// 2：召唤英雄
        /// 3：随身商店
        /// 4:一键回收
        /// 5:翅膀升级
        /// 6:佩戴称号
        /// 7:合成装备
        /// 8:炼狱空间
        /// 9：升级品阶
        /// 10：点开魔法阵
        /// 11：翅膀副本
        /// 12：降妖除魔
        /// 13：开启神器1
        /// 14：开启神器2
        /// 15：提升内功
        /// 16：挑战BOSS
        /// 17：斗笠合成
        /// 18：魔法阵开启
        /// 19：神器分解
        /// 20：进入未知暗殿
        /// 21：传奇之路
        /// 22：翅膀觉醒
        /// 24：宝藏
        /// 25：魔龙
        /// 26：进阶英雄
        /// 27:解锁连击
        /// 28：圣器引导
        /// 29:新手宝典
        /// 30.心魔魔器升级
        /// 31：伙伴、勋章培养
        /// </summary>
        public string Type;
        /// <summary>
        /// 方向
        /// 1：上
        /// 2：下
        /// 3：左
        /// 4：右
        /// </summary>
        public int Direction;
        /// <summary>
        /// 描述
        /// </summary>
        public string Des;
        /// <summary>
        /// UI代码
        /// 下方主功能条：mainFuncCtrl
        /// 右上方小地图：mapSmallCtrl
        /// 上方功能条：activityFuncCtrl
        /// 其他类型件 uiType
        /// </summary>
        public string UIname;
        /// <summary>
        /// 对象
        /// </summary>
        public string DisplayObject;
        /// <summary>
        /// 偏移X
        /// </summary>
        public int offsetX;
        /// <summary>
        /// 偏移Y
        /// </summary>
        public int offsetY;
        /// <summary>
        /// 当相同任务是否循环目前只用于降妖除魔，0循环1不循环
        /// </summary>
        public int loop;
        /// <summary>
        /// 自动点击时间（如果玩家长时间不操作会自动点击）
        /// 0则不会自动操作
        /// 单位是秒
        /// </summary>
        public int AutoTime;
        /// <summary>
        /// 出现等级
        /// </summary>
        public int ShowLv;
        /// <summary>
        /// 自动引导对应的页签（如果不在此页签，那么自动引导结束）
        /// </summary>
        public string List;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadUTF();
            Direction = bytes.ReadInt();
            Des = bytes.ReadUTF();
            UIname = bytes.ReadUTF();
            DisplayObject = bytes.ReadUTF();
            offsetX = bytes.ReadInt();
            offsetY = bytes.ReadInt();
            loop = bytes.ReadInt();
            AutoTime = bytes.ReadInt();
            ShowLv = bytes.ReadInt();
            List = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Type);
            bytes.WriteInt(Direction);
            bytes.WriteUTF(Des);
            bytes.WriteUTF(UIname);
            bytes.WriteUTF(DisplayObject);
            bytes.WriteInt(offsetX);
            bytes.WriteInt(offsetY);
            bytes.WriteInt(loop);
            bytes.WriteInt(AutoTime);
            bytes.WriteInt(ShowLv);
            bytes.WriteUTF(List);
        }
    }

    public class GuideTemplateMode : TplMode
    {
        private IList<GuideTemplate> mList = null;

        public GuideTemplateMode(int step) : base("GuideTemplate", typeof(GuideTemplate), step) { }

        public GuideTemplate this[int id]
        {
            get { return Find<GuideTemplate>(id); }
        }

        public GuideTemplate Find(int id)
        {
            return Find<GuideTemplate>(id);
        }

        public IList<GuideTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuideTemplate>();
            return mList;
        }
    }

public class PatrolTemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 镖车ID
        /// </summary>
        public int MonsterId;
        /// <summary>
        /// 镖车名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 初始随机权重
        /// </summary>
        public int RandomWeight;
        /// <summary>
        /// 刷新升级概率
        /// </summary>
        public int UpgradeProbability;
        /// <summary>
        /// 刷新消耗道具
        /// </summary>
        public int ConsumableItem;
        /// <summary>
        /// 刷新消耗元宝
        /// </summary>
        public string ConsumableCoupon;
        /// <summary>
        /// 刷新消耗钻石
        /// </summary>
        public int ConsumableGold;
        /// <summary>
        /// 高级押镖消耗钻石
        /// </summary>
        public int InsuranceGold;
        /// <summary>
        /// 高级押镖获得奖励万分比
        /// </summary>
        public int InsuranceReward;
        /// <summary>
        /// 高级押镖失败奖励成功的万分比
        /// </summary>
        public int SafeReward;
        /// <summary>
        /// 成功获得经验
        /// </summary>
        public int Exp;
        /// <summary>
        /// 奖励货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 成功获得元宝
        /// </summary>
        public int Money;
        /// <summary>
        /// 奖励物品
        /// </summary>
        public string Item;
        /// <summary>
        /// 失败获得经验
        /// </summary>
        public int LosedExp;
        /// <summary>
        /// 失败获得元宝
        /// </summary>
        public int LosedMoney;
        /// <summary>
        /// 奖励物品
        /// </summary>
        public string LosedItem;
        /// <summary>
        /// 击杀获得经验
        /// </summary>
        public int KillExp;
        /// <summary>
        /// 击杀获得元宝
        /// </summary>
        public int KillMoney;
        /// <summary>
        /// 完成时间（s）
        /// </summary>
        public int FinishTime;
        /// <summary>
        /// 完成NPC
        /// </summary>
        public int TaskNpc;
        /// <summary>
        /// 是否公告
        /// </summary>
        public int IsNotice;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Level = bytes.ReadInt();
            MonsterId = bytes.ReadInt();
            Name = bytes.ReadUTF();
            RandomWeight = bytes.ReadInt();
            UpgradeProbability = bytes.ReadInt();
            ConsumableItem = bytes.ReadInt();
            ConsumableCoupon = bytes.ReadUTF();
            ConsumableGold = bytes.ReadInt();
            InsuranceGold = bytes.ReadInt();
            InsuranceReward = bytes.ReadInt();
            SafeReward = bytes.ReadInt();
            Exp = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            Money = bytes.ReadInt();
            Item = bytes.ReadUTF();
            LosedExp = bytes.ReadInt();
            LosedMoney = bytes.ReadInt();
            LosedItem = bytes.ReadUTF();
            KillExp = bytes.ReadInt();
            KillMoney = bytes.ReadInt();
            FinishTime = bytes.ReadInt();
            TaskNpc = bytes.ReadInt();
            IsNotice = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Level);
            bytes.WriteInt(MonsterId);
            bytes.WriteUTF(Name);
            bytes.WriteInt(RandomWeight);
            bytes.WriteInt(UpgradeProbability);
            bytes.WriteInt(ConsumableItem);
            bytes.WriteUTF(ConsumableCoupon);
            bytes.WriteInt(ConsumableGold);
            bytes.WriteInt(InsuranceGold);
            bytes.WriteInt(InsuranceReward);
            bytes.WriteInt(SafeReward);
            bytes.WriteInt(Exp);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(Money);
            bytes.WriteUTF(Item);
            bytes.WriteInt(LosedExp);
            bytes.WriteInt(LosedMoney);
            bytes.WriteUTF(LosedItem);
            bytes.WriteInt(KillExp);
            bytes.WriteInt(KillMoney);
            bytes.WriteInt(FinishTime);
            bytes.WriteInt(TaskNpc);
            bytes.WriteInt(IsNotice);
        }
    }

    public class PatrolTemplateMode : TplMode
    {
        private IList<PatrolTemplate> mList = null;

        public PatrolTemplateMode(int step) : base("PatrolTemplate", typeof(PatrolTemplate), step) { }

        public PatrolTemplate this[int id]
        {
            get { return Find<PatrolTemplate>(id); }
        }

        public PatrolTemplate Find(int id)
        {
            return Find<PatrolTemplate>(id);
        }

        public IList<PatrolTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PatrolTemplate>();
            return mList;
        }
    }

public class GuidePlayTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public string type;
        /// <summary>
        /// 特效id
        /// </summary>
        public int eff;
        /// <summary>
        /// 自动点击时间
        /// </summary>
        public int autoTime;
        /// <summary>
        /// 主线任务id
        /// </summary>
        public int Maintask;
        /// <summary>
        /// 数据1
        /// </summary>
        public string data1;
        /// <summary>
        /// 数据2
        /// </summary>
        public string data2;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            type = bytes.ReadUTF();
            eff = bytes.ReadInt();
            autoTime = bytes.ReadInt();
            Maintask = bytes.ReadInt();
            data1 = bytes.ReadUTF();
            data2 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(type);
            bytes.WriteInt(eff);
            bytes.WriteInt(autoTime);
            bytes.WriteInt(Maintask);
            bytes.WriteUTF(data1);
            bytes.WriteUTF(data2);
        }
    }

    public class GuidePlayTemplateMode : TplMode
    {
        private IList<GuidePlayTemplate> mList = null;

        public GuidePlayTemplateMode(int step) : base("GuidePlayTemplate", typeof(GuidePlayTemplate), step) { }

        public GuidePlayTemplate this[int id]
        {
            get { return Find<GuidePlayTemplate>(id); }
        }

        public GuidePlayTemplate Find(int id)
        {
            return Find<GuidePlayTemplate>(id);
        }

        public IList<GuidePlayTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<GuidePlayTemplate>();
            return mList;
        }
    }

public class HeroTalentTemplate : Tpl
    {
        /// <summary>
        /// 等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 生命恢复(秒)
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 升级点数
        /// </summary>
        public int Points;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Lv = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
            Points = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Lv);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(Points);
        }
    }

    public class HeroTalentTemplateMode : TplMode
    {
        private IList<HeroTalentTemplate> mList = null;

        public HeroTalentTemplateMode(int step) : base("HeroTalentTemplate", typeof(HeroTalentTemplate), step) { }

        public HeroTalentTemplate this[int id]
        {
            get { return Find<HeroTalentTemplate>(id); }
        }

        public HeroTalentTemplate Find(int id)
        {
            return Find<HeroTalentTemplate>(id);
        }

        public IList<HeroTalentTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<HeroTalentTemplate>();
            return mList;
        }
    }

public class HeroDevelopTemplate : Tpl
    {
        /// <summary>
        /// 培养等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 需要玩家等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 背景图
        /// </summary>
        public int BackGround;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 战斗力
        /// </summary>
        public int ComatEffectiveness;
        /// <summary>
        /// 消耗金币
        /// </summary>
        public int CostMoney;
        /// <summary>
        /// 毁灭一击buffID
        /// </summary>
        public int BuffID1;
        /// <summary>
        /// 冰霜群雨buffID
        /// </summary>
        public int BuffID2;
        /// <summary>
        /// 回血概率
        /// </summary>
        public int AddPhRate;
        /// <summary>
        /// 回血值
        /// </summary>
        public int AddPh;
        /// <summary>
        /// 分身术技能ID
        /// </summary>
        public int SkillID;
        /// <summary>
        /// 技能名称
        /// </summary>
        public string SkillName;
        /// <summary>
        /// 技能效果提升(百分比)
        /// </summary>
        public string SkillEffect;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Lv = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            BackGround = bytes.ReadInt();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            ComatEffectiveness = bytes.ReadInt();
            CostMoney = bytes.ReadInt();
            BuffID1 = bytes.ReadInt();
            BuffID2 = bytes.ReadInt();
            AddPhRate = bytes.ReadInt();
            AddPh = bytes.ReadInt();
            SkillID = bytes.ReadInt();
            SkillName = bytes.ReadUTF();
            SkillEffect = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Lv);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(BackGround);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(ComatEffectiveness);
            bytes.WriteInt(CostMoney);
            bytes.WriteInt(BuffID1);
            bytes.WriteInt(BuffID2);
            bytes.WriteInt(AddPhRate);
            bytes.WriteInt(AddPh);
            bytes.WriteInt(SkillID);
            bytes.WriteUTF(SkillName);
            bytes.WriteUTF(SkillEffect);
        }
    }

    public class HeroDevelopTemplateMode : TplMode
    {
        private IList<HeroDevelopTemplate> mList = null;

        public HeroDevelopTemplateMode(int step) : base("HeroDevelopTemplate", typeof(HeroDevelopTemplate), step) { }

        public HeroDevelopTemplate this[int id]
        {
            get { return Find<HeroDevelopTemplate>(id); }
        }

        public HeroDevelopTemplate Find(int id)
        {
            return Find<HeroDevelopTemplate>(id);
        }

        public IList<HeroDevelopTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<HeroDevelopTemplate>();
            return mList;
        }
    }

public class HeroTemplate : Tpl
    {
        /// <summary>
        /// 等级（与抗拒火环等相关）
        /// </summary>
        public int LV;
        /// <summary>
        /// 英雄榜排行
        /// </summary>
        public int Rank;
        /// <summary>
        /// 资源id（场景和纸娃娃公用）
        /// </summary>
        public int AssetID;
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 简介
        /// </summary>
        public string Introduction;
        /// <summary>
        /// 技能展示
        /// </summary>
        public string SkillShow;
        /// <summary>
        /// 伤害描述展示
        /// </summary>
        public int DamageShow;
        /// <summary>
        /// AI模板
        /// </summary>
        public int AITmlpID;
        /// <summary>
        /// 满级AI
        /// </summary>
        public int AITmlpID2;
        /// <summary>
        /// 每日召唤次数
        /// </summary>
        public int Time;
        /// <summary>
        /// 召唤回复时间
        /// </summary>
        public int RecoveTime;
        /// <summary>
        /// 召唤绑定元宝
        /// </summary>
        public int CallGold;
        /// <summary>
        /// 是否有培养属性
        /// </summary>
        public int Culture;
        /// <summary>
        /// 进阶类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 激活消耗元宝
        /// </summary>
        public int CostGold;
        /// <summary>
        /// 激活需要VIP等级
        /// </summary>
        public int NeedVip;
        /// <summary>
        /// 激活需要累积登录天数
        /// </summary>
        public int NeedSignDay;
        /// <summary>
        /// 激活需要前一英雄培养等级
        /// </summary>
        public string NeedLevel;
        /// <summary>
        /// 查看英雄需要先激活英雄id
        /// </summary>
        public int Show;
        /// <summary>
        /// 最小攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 生命回复(秒)
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 魔法闪避
        /// </summary>
        public int MagicDodge;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 额外的仇恨系数万分比
        /// </summary>
        public int HatredCoefficient;
        /// <summary>
        /// 召唤特效
        /// </summary>
        public int Effect1;
        /// <summary>
        /// 进阶特效
        /// </summary>
        public int Effect3;
        /// <summary>
        /// 名字版高度
        /// </summary>
        public int High;
        /// <summary>
        /// 激活公告ID
        /// </summary>
        public int NoticeID;
        /// <summary>
        /// 说话间隔（毫秒）
        /// </summary>
        public int SpeakTime;
        /// <summary>
        /// 说话概率(百分)
        /// </summary>
        public int SpeakRate;
        /// <summary>
        /// 说话内容
        /// </summary>
        public string SpeakTxt;
        /// <summary>
        /// 是否隐身半透
        /// </summary>
        public int IsInvisible;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LV = bytes.ReadInt();
            Rank = bytes.ReadInt();
            AssetID = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Introduction = bytes.ReadUTF();
            SkillShow = bytes.ReadUTF();
            DamageShow = bytes.ReadInt();
            AITmlpID = bytes.ReadInt();
            AITmlpID2 = bytes.ReadInt();
            Time = bytes.ReadInt();
            RecoveTime = bytes.ReadInt();
            CallGold = bytes.ReadInt();
            Culture = bytes.ReadInt();
            Type = bytes.ReadInt();
            CostGold = bytes.ReadInt();
            NeedVip = bytes.ReadInt();
            NeedSignDay = bytes.ReadInt();
            NeedLevel = bytes.ReadUTF();
            Show = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            HP = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            Hits = bytes.ReadInt();
            MagicDodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            HatredCoefficient = bytes.ReadInt();
            Effect1 = bytes.ReadInt();
            Effect3 = bytes.ReadInt();
            High = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
            SpeakTime = bytes.ReadInt();
            SpeakRate = bytes.ReadInt();
            SpeakTxt = bytes.ReadUTF();
            IsInvisible = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(LV);
            bytes.WriteInt(Rank);
            bytes.WriteInt(AssetID);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Introduction);
            bytes.WriteUTF(SkillShow);
            bytes.WriteInt(DamageShow);
            bytes.WriteInt(AITmlpID);
            bytes.WriteInt(AITmlpID2);
            bytes.WriteInt(Time);
            bytes.WriteInt(RecoveTime);
            bytes.WriteInt(CallGold);
            bytes.WriteInt(Culture);
            bytes.WriteInt(Type);
            bytes.WriteInt(CostGold);
            bytes.WriteInt(NeedVip);
            bytes.WriteInt(NeedSignDay);
            bytes.WriteUTF(NeedLevel);
            bytes.WriteInt(Show);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(HP);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(Hits);
            bytes.WriteInt(MagicDodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(HatredCoefficient);
            bytes.WriteInt(Effect1);
            bytes.WriteInt(Effect3);
            bytes.WriteInt(High);
            bytes.WriteInt(NoticeID);
            bytes.WriteInt(SpeakTime);
            bytes.WriteInt(SpeakRate);
            bytes.WriteUTF(SpeakTxt);
            bytes.WriteInt(IsInvisible);
        }
    }

    public class HeroTemplateMode : TplMode
    {
        private IList<HeroTemplate> mList = null;

        public HeroTemplateMode(int step) : base("HeroTemplate", typeof(HeroTemplate), step) { }

        public HeroTemplate this[int id]
        {
            get { return Find<HeroTemplate>(id); }
        }

        public HeroTemplate Find(int id)
        {
            return Find<HeroTemplate>(id);
        }

        public IList<HeroTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<HeroTemplate>();
            return mList;
        }
    }

public class MailTemplate : Tpl
    {
        /// <summary>
        /// 发件人姓名
        /// </summary>
        public string SetName;
        /// <summary>
        /// 主题
        /// </summary>
        public string Title;
        /// <summary>
        /// 正文
        /// </summary>
        public string RealText;
        /// <summary>
        /// 事件ID
        /// </summary>
        public string EventID;
        /// <summary>
        /// 触发条件（0不触发，1等级，2活动,3完成任务，4开服天数,5踢出行会成员,6击杀邮件,7-行会红包超时返回元宝））
        /// </summary>
        public int TriggerCondition;
        /// <summary>
        /// 人物等级（0无等级限制）
        /// </summary>
        public int CharacterLv;
        /// <summary>
        /// 完成任务的ID
        /// </summary>
        public int TaskID;
        /// <summary>
        /// 开服天数
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 附件
        /// </summary>
        public string Goods;
        /// <summary>
        /// 附件是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 传参数量
        /// </summary>
        public int TransferParameters;
        /// <summary>
        /// 播报需求前端显示
        /// </summary>
        public string BroadCastParameterType;
        /// <summary>
        /// 事件参数
        /// </summary>
        public string EventDate;
        /// <summary>
        /// 事件ID
        /// 1.传送至NPC身边并打开面板
        /// ①神器密库
        /// ②深渊魔域
        /// ③跨服天下布武
        /// </summary>
        public int NpcUI;
        /// <summary>
        /// 颜色类型（0.没有颜色 1.金黄色 2.红色）
        /// </summary>
        public int ColorType;
        /// <summary>
        /// 打开界面参数
        /// </summary>
        public string OpenUI;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            SetName = bytes.ReadUTF();
            Title = bytes.ReadUTF();
            RealText = bytes.ReadUTF();
            EventID = bytes.ReadUTF();
            TriggerCondition = bytes.ReadInt();
            CharacterLv = bytes.ReadInt();
            TaskID = bytes.ReadInt();
            OpenDay = bytes.ReadInt();
            Goods = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
            TransferParameters = bytes.ReadInt();
            BroadCastParameterType = bytes.ReadUTF();
            EventDate = bytes.ReadUTF();
            NpcUI = bytes.ReadInt();
            ColorType = bytes.ReadInt();
            OpenUI = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(SetName);
            bytes.WriteUTF(Title);
            bytes.WriteUTF(RealText);
            bytes.WriteUTF(EventID);
            bytes.WriteInt(TriggerCondition);
            bytes.WriteInt(CharacterLv);
            bytes.WriteInt(TaskID);
            bytes.WriteInt(OpenDay);
            bytes.WriteUTF(Goods);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(TransferParameters);
            bytes.WriteUTF(BroadCastParameterType);
            bytes.WriteUTF(EventDate);
            bytes.WriteInt(NpcUI);
            bytes.WriteInt(ColorType);
            bytes.WriteUTF(OpenUI);
        }
    }

    public class MailTemplateMode : TplMode
    {
        private IList<MailTemplate> mList = null;

        public MailTemplateMode(int step) : base("MailTemplate", typeof(MailTemplate), step) { }

        public MailTemplate this[int id]
        {
            get { return Find<MailTemplate>(id); }
        }

        public MailTemplate Find(int id)
        {
            return Find<MailTemplate>(id);
        }

        public IList<MailTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MailTemplate>();
            return mList;
        }
    }

public class MusicTemplate : Tpl
    {
        /// <summary>
        /// 音乐ID
        /// </summary>
        public int MusicID;
        /// <summary>
        /// 音乐描述
        /// </summary>
        public string Description;
        /// <summary>
        /// 1、游戏音效
        /// 2、背景音乐
        /// </summary>
        public int Type;
        /// <summary>
        /// 1.预加载 2.非预加载
        /// </summary>
        public int IsPreload;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MusicID = bytes.ReadInt();
            Description = bytes.ReadUTF();
            Type = bytes.ReadInt();
            IsPreload = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MusicID);
            bytes.WriteUTF(Description);
            bytes.WriteInt(Type);
            bytes.WriteInt(IsPreload);
        }
    }

    public class MusicTemplateMode : TplMode
    {
        private IList<MusicTemplate> mList = null;

        public MusicTemplateMode(int step) : base("MusicTemplate", typeof(MusicTemplate), step) { }

        public MusicTemplate this[int id]
        {
            get { return Find<MusicTemplate>(id); }
        }

        public MusicTemplate Find(int id)
        {
            return Find<MusicTemplate>(id);
        }

        public IList<MusicTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MusicTemplate>();
            return mList;
        }
    }

public class DominatorTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 持续天数
        /// </summary>
        public int Days;
        /// <summary>
        /// 价格
        /// </summary>
        public int Cost;
        /// <summary>
        /// BuffID
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 首次奖励
        /// </summary>
        public string FirstBuyAward;
        /// <summary>
        /// 每日奖励
        /// </summary>
        public string Award;
        /// <summary>
        /// 首次奖励未领邮件ID
        /// </summary>
        public int MailID;
        /// <summary>
        /// 每日奖励邮件ID
        /// </summary>
        public int DailyMailID;
        /// <summary>
        /// 权限即将到期邮件ID
        /// </summary>
        public int DueMailID;
        /// <summary>
        /// 权限到期邮件ID
        /// </summary>
        public int ExoireMailID;
        /// <summary>
        /// 回收元宝增加百分比
        /// </summary>
        public int Recovergain;
        /// <summary>
        /// 每日声望任务+N
        /// </summary>
        public int Popularity;
        /// <summary>
        /// 每日副本三倍领取
        /// </summary>
        public int DailyCopyAward;
        /// <summary>
        /// 装备掉落保护几率
        /// </summary>
        public int ProtectChance;
        /// <summary>
        /// 描述
        /// </summary>
        public string Describe;
        /// <summary>
        /// 额外参数
        /// </summary>
        public string AdditionalParameters;
        /// <summary>
        /// 激活公告ID
        /// </summary>
        public int NoticeID;
        /// <summary>
        /// 主宰者BOSS挑战次数+N
        /// </summary>
        public int BossChallenge;
        /// <summary>
        /// 每日押镖次数+N
        /// </summary>
        public int DailyEscort;
        /// <summary>
        /// 每日副本一键完成特权
        /// </summary>
        public int CopyComplete;
        /// <summary>
        /// 日常副本挑战次数+N
        /// </summary>
        public int DailyCopyChallenge;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Days = bytes.ReadInt();
            Cost = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            FirstBuyAward = bytes.ReadUTF();
            Award = bytes.ReadUTF();
            MailID = bytes.ReadInt();
            DailyMailID = bytes.ReadInt();
            DueMailID = bytes.ReadInt();
            ExoireMailID = bytes.ReadInt();
            Recovergain = bytes.ReadInt();
            Popularity = bytes.ReadInt();
            DailyCopyAward = bytes.ReadInt();
            ProtectChance = bytes.ReadInt();
            Describe = bytes.ReadUTF();
            AdditionalParameters = bytes.ReadUTF();
            NoticeID = bytes.ReadInt();
            BossChallenge = bytes.ReadInt();
            DailyEscort = bytes.ReadInt();
            CopyComplete = bytes.ReadInt();
            DailyCopyChallenge = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Days);
            bytes.WriteInt(Cost);
            bytes.WriteInt(BuffID);
            bytes.WriteUTF(FirstBuyAward);
            bytes.WriteUTF(Award);
            bytes.WriteInt(MailID);
            bytes.WriteInt(DailyMailID);
            bytes.WriteInt(DueMailID);
            bytes.WriteInt(ExoireMailID);
            bytes.WriteInt(Recovergain);
            bytes.WriteInt(Popularity);
            bytes.WriteInt(DailyCopyAward);
            bytes.WriteInt(ProtectChance);
            bytes.WriteUTF(Describe);
            bytes.WriteUTF(AdditionalParameters);
            bytes.WriteInt(NoticeID);
            bytes.WriteInt(BossChallenge);
            bytes.WriteInt(DailyEscort);
            bytes.WriteInt(CopyComplete);
            bytes.WriteInt(DailyCopyChallenge);
        }
    }

    public class DominatorTemplateMode : TplMode
    {
        private IList<DominatorTemplate> mList = null;

        public DominatorTemplateMode(int step) : base("DominatorTemplate", typeof(DominatorTemplate), step) { }

        public DominatorTemplate this[int id]
        {
            get { return Find<DominatorTemplate>(id); }
        }

        public DominatorTemplate Find(int id)
        {
            return Find<DominatorTemplate>(id);
        }

        public IList<DominatorTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<DominatorTemplate>();
            return mList;
        }
    }

public class MainTaskTemplate : Tpl
    {
        /// <summary>
        /// 任务名
        /// </summary>
        public string Name;
        /// <summary>
        /// 完成任务对话
        /// </summary>
        public string GiveLove;
        /// <summary>
        /// 任务追踪文本
        /// </summary>
        public string TaskTxt;
        /// <summary>
        /// 接取任务英雄说话
        /// </summary>
        public string HeroStartTalk;
        /// <summary>
        /// 完成任务英雄说话
        /// </summary>
        public string HeroEndTalk;
        /// <summary>
        /// 任务类型
        /// </summary>
        public int TaskType;
        /// <summary>
        /// 触发类型
        /// </summary>
        public string TriggerType;
        /// <summary>
        /// 任务需求类型
        /// </summary>
        public int TaskNeedType;
        /// <summary>
        /// 接收事件
        /// </summary>
        public int TakeEvent;
        /// <summary>
        /// 接受事件的面板
        /// </summary>
        public string OpenUI;
        /// <summary>
        /// 完成领奖事件
        /// </summary>
        public string FinishEvent;
        /// <summary>
        /// 完成提示文本
        /// </summary>
        public string FinishText;
        /// <summary>
        /// 共享怪物
        /// </summary>
        public int ShareMonster;
        /// <summary>
        /// 是否自动
        /// 跳过
        /// </summary>
        public int AutoSkip;
        /// <summary>
        /// 引导步骤
        /// </summary>
        public string GuideStep;
        /// <summary>
        /// 参数1
        /// </summary>
        public int Data1;
        /// <summary>
        /// 参数2
        /// </summary>
        public int Data2;
        /// <summary>
        /// 参数3
        /// </summary>
        public string Data3;
        /// <summary>
        /// 参数4
        /// </summary>
        public int Data4;
        /// <summary>
        /// 完成任务NPC
        /// </summary>
        public int NPCID;
        /// <summary>
        /// 下次任务_
        /// </summary>
        public int NextID;
        /// <summary>
        /// 任务需求前端显示
        /// </summary>
        public string TaskUnFinish;
        /// <summary>
        /// 完成后显示文本
        /// </summary>
        public string TaskFinish;
        /// <summary>
        /// 任务完成领奖点
        /// </summary>
        public string FinishPoint;
        /// <summary>
        /// 任务完成检测点
        /// </summary>
        public string FinishNPCPoint;
        /// <summary>
        /// 未完成任务传送点
        /// </summary>
        public string UnFinishPoint;
        /// <summary>
        /// 未完成寻路点
        /// </summary>
        public string UnFinishSeekPoint;
        /// <summary>
        /// 任务完成传送点
        /// </summary>
        public string FinishTransport;
        /// <summary>
        /// 战士男物品奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 战士女物品奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 法师男物品奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 法师女物品奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 道士男物品奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 道士女物品奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 通用物品奖励
        /// </summary>
        public string Bonus7;
        /// <summary>
        /// 镜像副本
        /// </summary>
        public int Mirrormap;
        /// <summary>
        /// 镜像副本进入次数
        /// </summary>
        public int MirrorTime;
        /// <summary>
        /// 经验奖励
        /// </summary>
        public int Exp;
        /// <summary>
        /// 绑定金币奖励
        /// </summary>
        public int Money;
        /// <summary>
        /// 绑定元宝
        /// </summary>
        public int Gifts;
        /// <summary>
        /// 是否打开传送阵
        /// </summary>
        public int OpenTransArray;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            GiveLove = bytes.ReadUTF();
            TaskTxt = bytes.ReadUTF();
            HeroStartTalk = bytes.ReadUTF();
            HeroEndTalk = bytes.ReadUTF();
            TaskType = bytes.ReadInt();
            TriggerType = bytes.ReadUTF();
            TaskNeedType = bytes.ReadInt();
            TakeEvent = bytes.ReadInt();
            OpenUI = bytes.ReadUTF();
            FinishEvent = bytes.ReadUTF();
            FinishText = bytes.ReadUTF();
            ShareMonster = bytes.ReadInt();
            AutoSkip = bytes.ReadInt();
            GuideStep = bytes.ReadUTF();
            Data1 = bytes.ReadInt();
            Data2 = bytes.ReadInt();
            Data3 = bytes.ReadUTF();
            Data4 = bytes.ReadInt();
            NPCID = bytes.ReadInt();
            NextID = bytes.ReadInt();
            TaskUnFinish = bytes.ReadUTF();
            TaskFinish = bytes.ReadUTF();
            FinishPoint = bytes.ReadUTF();
            FinishNPCPoint = bytes.ReadUTF();
            UnFinishPoint = bytes.ReadUTF();
            UnFinishSeekPoint = bytes.ReadUTF();
            FinishTransport = bytes.ReadUTF();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            Bonus7 = bytes.ReadUTF();
            Mirrormap = bytes.ReadInt();
            MirrorTime = bytes.ReadInt();
            Exp = bytes.ReadInt();
            Money = bytes.ReadInt();
            Gifts = bytes.ReadInt();
            OpenTransArray = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(GiveLove);
            bytes.WriteUTF(TaskTxt);
            bytes.WriteUTF(HeroStartTalk);
            bytes.WriteUTF(HeroEndTalk);
            bytes.WriteInt(TaskType);
            bytes.WriteUTF(TriggerType);
            bytes.WriteInt(TaskNeedType);
            bytes.WriteInt(TakeEvent);
            bytes.WriteUTF(OpenUI);
            bytes.WriteUTF(FinishEvent);
            bytes.WriteUTF(FinishText);
            bytes.WriteInt(ShareMonster);
            bytes.WriteInt(AutoSkip);
            bytes.WriteUTF(GuideStep);
            bytes.WriteInt(Data1);
            bytes.WriteInt(Data2);
            bytes.WriteUTF(Data3);
            bytes.WriteInt(Data4);
            bytes.WriteInt(NPCID);
            bytes.WriteInt(NextID);
            bytes.WriteUTF(TaskUnFinish);
            bytes.WriteUTF(TaskFinish);
            bytes.WriteUTF(FinishPoint);
            bytes.WriteUTF(FinishNPCPoint);
            bytes.WriteUTF(UnFinishPoint);
            bytes.WriteUTF(UnFinishSeekPoint);
            bytes.WriteUTF(FinishTransport);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteUTF(Bonus7);
            bytes.WriteInt(Mirrormap);
            bytes.WriteInt(MirrorTime);
            bytes.WriteInt(Exp);
            bytes.WriteInt(Money);
            bytes.WriteInt(Gifts);
            bytes.WriteInt(OpenTransArray);
        }
    }

    public class MainTaskTemplateMode : TplMode
    {
        private IList<MainTaskTemplate> mList = null;

        public MainTaskTemplateMode(int step) : base("MainTaskTemplate", typeof(MainTaskTemplate), step) { }

        public MainTaskTemplate this[int id]
        {
            get { return Find<MainTaskTemplate>(id); }
        }

        public MainTaskTemplate Find(int id)
        {
            return Find<MainTaskTemplate>(id);
        }

        public IList<MainTaskTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MainTaskTemplate>();
            return mList;
        }
    }

public class CycleCorrespondenceTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int Jjlv;
        /// <summary>
        /// 怪物ID
        /// </summary>
        public int Bossid;
        /// <summary>
        /// 权重
        /// </summary>
        public int Weight;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Jjlv = bytes.ReadInt();
            Bossid = bytes.ReadInt();
            Weight = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Jjlv);
            bytes.WriteInt(Bossid);
            bytes.WriteInt(Weight);
        }
    }

    public class CycleCorrespondenceTemplateMode : TplMode
    {
        private IList<CycleCorrespondenceTemplate> mList = null;

        public CycleCorrespondenceTemplateMode(int step) : base("CycleCorrespondenceTemplate", typeof(CycleCorrespondenceTemplate), step) { }

        public CycleCorrespondenceTemplate this[int id]
        {
            get { return Find<CycleCorrespondenceTemplate>(id); }
        }

        public CycleCorrespondenceTemplate Find(int id)
        {
            return Find<CycleCorrespondenceTemplate>(id);
        }

        public IList<CycleCorrespondenceTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CycleCorrespondenceTemplate>();
            return mList;
        }
    }

public class CycleActivityTemplate : Tpl
    {
        /// <summary>
        /// 周期活动名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 组装活动名称ID
        /// </summary>
        public int AssembleActivity;
        /// <summary>
        /// 活动类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 组装活动的TID
        /// </summary>
        public string Subactivity;
        /// <summary>
        /// 开启时间
        /// </summary>
        public int TimeStart;
        /// <summary>
        /// 结束时间
        /// </summary>
        public int TimeEnd;
        /// <summary>
        /// 产出特殊道具
        /// </summary>
        public int Goodsid;
        /// <summary>
        /// 兑换比例
        /// </summary>
        public int Propotion;
        /// <summary>
        /// 结束后强制兑换货币
        /// </summary>
        public int Moneyid;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            AssembleActivity = bytes.ReadInt();
            Type = bytes.ReadInt();
            Subactivity = bytes.ReadUTF();
            TimeStart = bytes.ReadInt();
            TimeEnd = bytes.ReadInt();
            Goodsid = bytes.ReadInt();
            Propotion = bytes.ReadInt();
            Moneyid = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(AssembleActivity);
            bytes.WriteInt(Type);
            bytes.WriteUTF(Subactivity);
            bytes.WriteInt(TimeStart);
            bytes.WriteInt(TimeEnd);
            bytes.WriteInt(Goodsid);
            bytes.WriteInt(Propotion);
            bytes.WriteInt(Moneyid);
        }
    }

    public class CycleActivityTemplateMode : TplMode
    {
        private IList<CycleActivityTemplate> mList = null;

        public CycleActivityTemplateMode(int step) : base("CycleActivityTemplate", typeof(CycleActivityTemplate), step) { }

        public CycleActivityTemplate this[int id]
        {
            get { return Find<CycleActivityTemplate>(id); }
        }

        public CycleActivityTemplate Find(int id)
        {
            return Find<CycleActivityTemplate>(id);
        }

        public IList<CycleActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CycleActivityTemplate>();
            return mList;
        }
    }

public class AccumulationPayTemplate : Tpl
    {
        /// <summary>
        /// 周期
        /// </summary>
        public int Cycle;
        /// <summary>
        /// 第几天
        /// </summary>
        public int Day;
        /// <summary>
        /// 周期持续次数
        /// </summary>
        public int CycleTimes;
        /// <summary>
        /// 周期累充奖励
        /// </summary>
        public string CycleAward;
        /// <summary>
        /// 单笔充值(钻石数量)
        /// </summary>
        public int PayNum;
        /// <summary>
        /// 当日奖励
        /// </summary>
        public string DayAward;
        /// <summary>
        /// 荣耀点数
        /// </summary>
        public int Honour;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Cycle = bytes.ReadInt();
            Day = bytes.ReadInt();
            CycleTimes = bytes.ReadInt();
            CycleAward = bytes.ReadUTF();
            PayNum = bytes.ReadInt();
            DayAward = bytes.ReadUTF();
            Honour = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Cycle);
            bytes.WriteInt(Day);
            bytes.WriteInt(CycleTimes);
            bytes.WriteUTF(CycleAward);
            bytes.WriteInt(PayNum);
            bytes.WriteUTF(DayAward);
            bytes.WriteInt(Honour);
        }
    }

    public class AccumulationPayTemplateMode : TplMode
    {
        private IList<AccumulationPayTemplate> mList = null;

        public AccumulationPayTemplateMode(int step) : base("AccumulationPayTemplate", typeof(AccumulationPayTemplate), step) { }

        public AccumulationPayTemplate this[int id]
        {
            get { return Find<AccumulationPayTemplate>(id); }
        }

        public AccumulationPayTemplate Find(int id)
        {
            return Find<AccumulationPayTemplate>(id);
        }

        public IList<AccumulationPayTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AccumulationPayTemplate>();
            return mList;
        }
    }

public class PermanenAccumulationPayTemplate : Tpl
    {
        /// <summary>
        /// 累计金额
        /// </summary>
        public int AccumulationPay;
        /// <summary>
        /// 当日奖励
        /// </summary>
        public string Awards;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            AccumulationPay = bytes.ReadInt();
            Awards = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(AccumulationPay);
            bytes.WriteUTF(Awards);
        }
    }

    public class PermanenAccumulationPayTemplateMode : TplMode
    {
        private IList<PermanenAccumulationPayTemplate> mList = null;

        public PermanenAccumulationPayTemplateMode(int step) : base("PermanenAccumulationPayTemplate", typeof(PermanenAccumulationPayTemplate), step) { }

        public PermanenAccumulationPayTemplate this[int id]
        {
            get { return Find<PermanenAccumulationPayTemplate>(id); }
        }

        public PermanenAccumulationPayTemplate Find(int id)
        {
            return Find<PermanenAccumulationPayTemplate>(id);
        }

        public IList<PermanenAccumulationPayTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PermanenAccumulationPayTemplate>();
            return mList;
        }
    }

public class ImprintTemplate : Tpl
    {
        /// <summary>
        /// 职业
        /// </summary>
        public int Career;
        /// <summary>
        /// 阶级
        /// </summary>
        public int Level;
        /// <summary>
        /// 等级
        /// </summary>
        public int ImprintLv;
        /// <summary>
        /// 开启战宠吞噬
        /// </summary>
        public int OpenMix;
        /// <summary>
        /// 消耗金币
        /// </summary>
        public int CostMoney;
        /// <summary>
        /// 可出战战宠等级
        /// </summary>
        public int SealLv;
        /// <summary>
        /// 推荐boss的id
        /// </summary>
        public string SealID;
        /// <summary>
        /// 生命（作废）
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Career = bytes.ReadInt();
            Level = bytes.ReadInt();
            ImprintLv = bytes.ReadInt();
            OpenMix = bytes.ReadInt();
            CostMoney = bytes.ReadInt();
            SealLv = bytes.ReadInt();
            SealID = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Career);
            bytes.WriteInt(Level);
            bytes.WriteInt(ImprintLv);
            bytes.WriteInt(OpenMix);
            bytes.WriteInt(CostMoney);
            bytes.WriteInt(SealLv);
            bytes.WriteUTF(SealID);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
        }
    }

    public class ImprintTemplateMode : TplMode
    {
        private IList<ImprintTemplate> mList = null;

        public ImprintTemplateMode(int step) : base("ImprintTemplate", typeof(ImprintTemplate), step) { }

        public ImprintTemplate this[int id]
        {
            get { return Find<ImprintTemplate>(id); }
        }

        public ImprintTemplate Find(int id)
        {
            return Find<ImprintTemplate>(id);
        }

        public IList<ImprintTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ImprintTemplate>();
            return mList;
        }
    }

public class ImprintExtraTemplate : Tpl
    {
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 仇恨等级
        /// </summary>
        public int HatredLv;
        /// <summary>
        /// 最小物理攻击万分比
        /// </summary>
        public int MinPhysicAtkPencent;
        /// <summary>
        /// 最大物理攻击万分比
        /// </summary>
        public int MaxPhysicAtkPencent;
        /// <summary>
        /// 最小魔法攻击万分比
        /// </summary>
        public int MinMagicAtkPencent;
        /// <summary>
        /// 最大魔法攻击万分比
        /// </summary>
        public int MaxMagicAtkPencent;
        /// <summary>
        /// 最小道术攻击万分比
        /// </summary>
        public int MinTaoistAtkPencent;
        /// <summary>
        /// 最大道术攻击万分比
        /// </summary>
        public int MaxTaoistAtkPencent;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            HatredLv = bytes.ReadInt();
            MinPhysicAtkPencent = bytes.ReadInt();
            MaxPhysicAtkPencent = bytes.ReadInt();
            MinMagicAtkPencent = bytes.ReadInt();
            MaxMagicAtkPencent = bytes.ReadInt();
            MinTaoistAtkPencent = bytes.ReadInt();
            MaxTaoistAtkPencent = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(HatredLv);
            bytes.WriteInt(MinPhysicAtkPencent);
            bytes.WriteInt(MaxPhysicAtkPencent);
            bytes.WriteInt(MinMagicAtkPencent);
            bytes.WriteInt(MaxMagicAtkPencent);
            bytes.WriteInt(MinTaoistAtkPencent);
            bytes.WriteInt(MaxTaoistAtkPencent);
        }
    }

    public class ImprintExtraTemplateMode : TplMode
    {
        private IList<ImprintExtraTemplate> mList = null;

        public ImprintExtraTemplateMode(int step) : base("ImprintExtraTemplate", typeof(ImprintExtraTemplate), step) { }

        public ImprintExtraTemplate this[int id]
        {
            get { return Find<ImprintExtraTemplate>(id); }
        }

        public ImprintExtraTemplate Find(int id)
        {
            return Find<ImprintExtraTemplate>(id);
        }

        public IList<ImprintExtraTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ImprintExtraTemplate>();
            return mList;
        }
    }

public class PetLvTemplate : Tpl
    {
        /// <summary>
        /// 战宠等级
        /// </summary>
        public int PetLv;
        /// <summary>
        /// 所需经验
        /// </summary>
        public long EXP;
        /// <summary>
        /// 封魔石提供经验
        /// </summary>
        public long ProvideEXP;
        /// <summary>
        /// 最小攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PetLv = bytes.ReadInt();
            EXP = bytes.ReadInt64();
            ProvideEXP = bytes.ReadInt64();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            HP = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(PetLv);
            bytes.WriteInt64(EXP);
            bytes.WriteInt64(ProvideEXP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(HP);
        }
    }

    public class PetLvTemplateMode : TplMode
    {
        private IList<PetLvTemplate> mList = null;

        public PetLvTemplateMode(int step) : base("PetLvTemplate", typeof(PetLvTemplate), step) { }

        public PetLvTemplate this[int id]
        {
            get { return Find<PetLvTemplate>(id); }
        }

        public PetLvTemplate Find(int id)
        {
            return Find<PetLvTemplate>(id);
        }

        public IList<PetLvTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PetLvTemplate>();
            return mList;
        }
    }

public class SummonPetTemplate : Tpl
    {
        /// <summary>
        /// 游戏内怪物显示名称
        /// </summary>
        public string MonName;
        /// <summary>
        /// 职业，决定显示攻击类型
        /// </summary>
        public int Job;
        /// <summary>
        /// 阶级
        /// </summary>
        public int Rank;
        /// <summary>
        /// 稀有度（前端使用）
        /// </summary>
        public int Quality;
        /// <summary>
        /// 战宠等级（用于和魔王之印对应）
        /// </summary>
        public int lv;
        /// <summary>
        /// 经验值（作废）
        /// </summary>
        public int ProvideEXP;
        /// <summary>
        /// 道具奖励
        /// </summary>
        public string Item;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 生命回复(秒)
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 魔法闪避
        /// </summary>
        public int MagicDodge;
        /// <summary>
        /// 暴击率
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 额外的仇恨系数万分比
        /// </summary>
        public int HatredCoefficient;
        /// <summary>
        /// 仇恨等级
        /// </summary>
        public int HatredLv;
        /// <summary>
        /// 撕裂等级
        /// </summary>
        public int TearingLv;
        /// <summary>
        /// 撕裂伤害
        /// </summary>
        public int TearingDmg;
        /// <summary>
        /// 伤害分担
        /// （万分比）
        /// </summary>
        public int HostDmgPct;
        /// <summary>
        /// 战斗ai
        /// </summary>
        public int FightAI;
        /// <summary>
        /// bossID
        /// </summary>
        public int BossID;
        /// <summary>
        /// 镜像bossid
        /// </summary>
        public int MirrorBossID;
        /// <summary>
        /// 描述
        /// </summary>
        public string Detail;
        /// <summary>
        /// 界面展示纸娃娃ID
        /// </summary>
        public int ShowAssetID;
        /// <summary>
        /// 界面头像
        /// </summary>
        public int Avatar;
        /// <summary>
        /// 固定技能池
        /// </summary>
        public string UnchangeSkills;
        /// <summary>
        /// 流动技能池
        /// </summary>
        public int ChangeSkillsType;
        /// <summary>
        /// 战宠蛋id
        /// </summary>
        public int PetEgg;
        /// <summary>
        /// 收集类型
        /// </summary>
        public int CollectType;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MonName = bytes.ReadUTF();
            Job = bytes.ReadInt();
            Rank = bytes.ReadInt();
            Quality = bytes.ReadInt();
            lv = bytes.ReadInt();
            ProvideEXP = bytes.ReadInt();
            Item = bytes.ReadUTF();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            HP = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            Hits = bytes.ReadInt();
            MagicDodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            HatredCoefficient = bytes.ReadInt();
            HatredLv = bytes.ReadInt();
            TearingLv = bytes.ReadInt();
            TearingDmg = bytes.ReadInt();
            HostDmgPct = bytes.ReadInt();
            FightAI = bytes.ReadInt();
            BossID = bytes.ReadInt();
            MirrorBossID = bytes.ReadInt();
            Detail = bytes.ReadUTF();
            ShowAssetID = bytes.ReadInt();
            Avatar = bytes.ReadInt();
            UnchangeSkills = bytes.ReadUTF();
            ChangeSkillsType = bytes.ReadInt();
            PetEgg = bytes.ReadInt();
            CollectType = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(MonName);
            bytes.WriteInt(Job);
            bytes.WriteInt(Rank);
            bytes.WriteInt(Quality);
            bytes.WriteInt(lv);
            bytes.WriteInt(ProvideEXP);
            bytes.WriteUTF(Item);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(HP);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(Hits);
            bytes.WriteInt(MagicDodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(HatredCoefficient);
            bytes.WriteInt(HatredLv);
            bytes.WriteInt(TearingLv);
            bytes.WriteInt(TearingDmg);
            bytes.WriteInt(HostDmgPct);
            bytes.WriteInt(FightAI);
            bytes.WriteInt(BossID);
            bytes.WriteInt(MirrorBossID);
            bytes.WriteUTF(Detail);
            bytes.WriteInt(ShowAssetID);
            bytes.WriteInt(Avatar);
            bytes.WriteUTF(UnchangeSkills);
            bytes.WriteInt(ChangeSkillsType);
            bytes.WriteInt(PetEgg);
            bytes.WriteInt(CollectType);
        }
    }

    public class SummonPetTemplateMode : TplMode
    {
        private IList<SummonPetTemplate> mList = null;

        public SummonPetTemplateMode(int step) : base("SummonPetTemplate", typeof(SummonPetTemplate), step) { }

        public SummonPetTemplate this[int id]
        {
            get { return Find<SummonPetTemplate>(id); }
        }

        public SummonPetTemplate Find(int id)
        {
            return Find<SummonPetTemplate>(id);
        }

        public IList<SummonPetTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SummonPetTemplate>();
            return mList;
        }
    }

public class PetProTemplate : Tpl
    {
        /// <summary>
        /// 策划查看名字用
        /// </summary>
        public string MonName;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 生命回复(秒)
        /// </summary>
        public int RestoreHP;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MonName = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(MonName);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(RestoreHP);
        }
    }

    public class PetProTemplateMode : TplMode
    {
        private IList<PetProTemplate> mList = null;

        public PetProTemplateMode(int step) : base("PetProTemplate", typeof(PetProTemplate), step) { }

        public PetProTemplate this[int id]
        {
            get { return Find<PetProTemplate>(id); }
        }

        public PetProTemplate Find(int id)
        {
            return Find<PetProTemplate>(id);
        }

        public IList<PetProTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PetProTemplate>();
            return mList;
        }
    }

public class PetSkillTypeTemplate : Tpl
    {
        /// <summary>
        /// 技能池类型
        /// </summary>
        public int SkillType;
        /// <summary>
        /// 技能列表和概率（权重）
        /// </summary>
        public string SkillList;
        /// <summary>
        /// 数量概率（万分比）
        /// </summary>
        public string SkillAmount;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            SkillType = bytes.ReadInt();
            SkillList = bytes.ReadUTF();
            SkillAmount = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(SkillType);
            bytes.WriteUTF(SkillList);
            bytes.WriteUTF(SkillAmount);
        }
    }

    public class PetSkillTypeTemplateMode : TplMode
    {
        private IList<PetSkillTypeTemplate> mList = null;

        public PetSkillTypeTemplateMode(int step) : base("PetSkillTypeTemplate", typeof(PetSkillTypeTemplate), step) { }

        public PetSkillTypeTemplate this[int id]
        {
            get { return Find<PetSkillTypeTemplate>(id); }
        }

        public PetSkillTypeTemplate Find(int id)
        {
            return Find<PetSkillTypeTemplate>(id);
        }

        public IList<PetSkillTypeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PetSkillTypeTemplate>();
            return mList;
        }
    }

public class PetConditionTemplate : Tpl
    {
        /// <summary>
        /// 战宠默认技能数量
        /// </summary>
        public int InitialSkill;
        /// <summary>
        /// 购买增加吞噬技能数量
        /// </summary>
        public int IncreaseSkill;
        /// <summary>
        /// 购买消耗金刚石
        /// </summary>
        public int Cost;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            InitialSkill = bytes.ReadInt();
            IncreaseSkill = bytes.ReadInt();
            Cost = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(InitialSkill);
            bytes.WriteInt(IncreaseSkill);
            bytes.WriteInt(Cost);
        }
    }

    public class PetConditionTemplateMode : TplMode
    {
        private IList<PetConditionTemplate> mList = null;

        public PetConditionTemplateMode(int step) : base("PetConditionTemplate", typeof(PetConditionTemplate), step) { }

        public PetConditionTemplate this[int id]
        {
            get { return Find<PetConditionTemplate>(id); }
        }

        public PetConditionTemplate Find(int id)
        {
            return Find<PetConditionTemplate>(id);
        }

        public IList<PetConditionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<PetConditionTemplate>();
            return mList;
        }
    }

public class FightTemplate : Tpl
    {
        /// <summary>
        /// 战士系数
        /// </summary>
        public float ZhanShiXiShu;
        /// <summary>
        /// 法师系数
        /// </summary>
        public float FaShiXiShu;
        /// <summary>
        /// 道士系数
        /// </summary>
        public float DaoShiXiShu;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ZhanShiXiShu = bytes.ReadFloat();
            FaShiXiShu = bytes.ReadFloat();
            DaoShiXiShu = bytes.ReadFloat();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteFloat(ZhanShiXiShu);
            bytes.WriteFloat(FaShiXiShu);
            bytes.WriteFloat(DaoShiXiShu);
        }
    }

    public class FightTemplateMode : TplMode
    {
        private IList<FightTemplate> mList = null;

        public FightTemplateMode(int step) : base("FightTemplate", typeof(FightTemplate), step) { }

        public FightTemplate this[int id]
        {
            get { return Find<FightTemplate>(id); }
        }

        public FightTemplate Find(int id)
        {
            return Find<FightTemplate>(id);
        }

        public IList<FightTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FightTemplate>();
            return mList;
        }
    }

public class FixTemplate : Tpl
    {
        /// <summary>
        /// 注灵部位
        /// </summary>
        public int Type;
        /// <summary>
        /// 注灵等级
        /// </summary>
        public int Lv;
        /// <summary>
        /// 消耗灵气值
        /// </summary>
        public int CostNum;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 回收灵气值
        /// </summary>
        public int RecycleNum;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Lv = bytes.ReadInt();
            CostNum = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            RecycleNum = bytes.ReadInt();
            NoticeID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(Lv);
            bytes.WriteInt(CostNum);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(RecycleNum);
            bytes.WriteInt(NoticeID);
        }
    }

    public class FixTemplateMode : TplMode
    {
        private IList<FixTemplate> mList = null;

        public FixTemplateMode(int step) : base("FixTemplate", typeof(FixTemplate), step) { }

        public FixTemplate this[int id]
        {
            get { return Find<FixTemplate>(id); }
        }

        public FixTemplate Find(int id)
        {
            return Find<FixTemplate>(id);
        }

        public IList<FixTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<FixTemplate>();
            return mList;
        }
    }

public class BlessingTemplate : Tpl
    {
        /// <summary>
        /// 保持需求值
        /// </summary>
        public int NeedValue;
        /// <summary>
        /// 升级需求值
        /// </summary>
        public int UpgradeValue;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedValue = bytes.ReadInt();
            UpgradeValue = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedValue);
            bytes.WriteInt(UpgradeValue);
        }
    }

    public class BlessingTemplateMode : TplMode
    {
        private IList<BlessingTemplate> mList = null;

        public BlessingTemplateMode(int step) : base("BlessingTemplate", typeof(BlessingTemplate), step) { }

        public BlessingTemplate this[int id]
        {
            get { return Find<BlessingTemplate>(id); }
        }

        public BlessingTemplate Find(int id)
        {
            return Find<BlessingTemplate>(id);
        }

        public IList<BlessingTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<BlessingTemplate>();
            return mList;
        }
    }

public class AssembleHappyExchangeTemplate : Tpl
    {
        /// <summary>
        /// 积分消耗
        /// </summary>
        public int NeedScore;
        /// <summary>
        /// 兑换次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedScore = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedScore);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssembleHappyExchangeTemplateMode : TplMode
    {
        private IList<AssembleHappyExchangeTemplate> mList = null;

        public AssembleHappyExchangeTemplateMode(int step) : base("AssembleHappyExchangeTemplate", typeof(AssembleHappyExchangeTemplate), step) { }

        public AssembleHappyExchangeTemplate this[int id]
        {
            get { return Find<AssembleHappyExchangeTemplate>(id); }
        }

        public AssembleHappyExchangeTemplate Find(int id)
        {
            return Find<AssembleHappyExchangeTemplate>(id);
        }

        public IList<AssembleHappyExchangeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleHappyExchangeTemplate>();
            return mList;
        }
    }

public class AssembleHappyKillMonTemplate : Tpl
    {
        /// <summary>
        /// BOSS类型
        /// </summary>
        public int BossType;
        /// <summary>
        /// BOSS子类型
        /// </summary>
        public int BossSubType;
        /// <summary>
        /// BOSS等级
        /// </summary>
        public int BossLevel;
        /// <summary>
        /// 生效地图
        /// </summary>
        public string MapTypeList;
        /// <summary>
        /// 获得积分
        /// </summary>
        public int Score;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            BossType = bytes.ReadInt();
            BossSubType = bytes.ReadInt();
            BossLevel = bytes.ReadInt();
            MapTypeList = bytes.ReadUTF();
            Score = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(BossType);
            bytes.WriteInt(BossSubType);
            bytes.WriteInt(BossLevel);
            bytes.WriteUTF(MapTypeList);
            bytes.WriteInt(Score);
        }
    }

    public class AssembleHappyKillMonTemplateMode : TplMode
    {
        private IList<AssembleHappyKillMonTemplate> mList = null;

        public AssembleHappyKillMonTemplateMode(int step) : base("AssembleHappyKillMonTemplate", typeof(AssembleHappyKillMonTemplate), step) { }

        public AssembleHappyKillMonTemplate this[int id]
        {
            get { return Find<AssembleHappyKillMonTemplate>(id); }
        }

        public AssembleHappyKillMonTemplate Find(int id)
        {
            return Find<AssembleHappyKillMonTemplate>(id);
        }

        public IList<AssembleHappyKillMonTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleHappyKillMonTemplate>();
            return mList;
        }
    }

public class AssembleHappyRemainTemplate : Tpl
    {
        /// <summary>
        /// 活动ID
        /// </summary>
        public int Activity;
        /// <summary>
        /// 剩余积分结算规则
        /// </summary>
        public string CloseAnAccount;
        /// <summary>
        /// 结算邮件ID
        /// </summary>
        public int Mail;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Activity = bytes.ReadInt();
            CloseAnAccount = bytes.ReadUTF();
            Mail = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Activity);
            bytes.WriteUTF(CloseAnAccount);
            bytes.WriteInt(Mail);
        }
    }

    public class AssembleHappyRemainTemplateMode : TplMode
    {
        private IList<AssembleHappyRemainTemplate> mList = null;

        public AssembleHappyRemainTemplateMode(int step) : base("AssembleHappyRemainTemplate", typeof(AssembleHappyRemainTemplate), step) { }

        public AssembleHappyRemainTemplate this[int id]
        {
            get { return Find<AssembleHappyRemainTemplate>(id); }
        }

        public AssembleHappyRemainTemplate Find(int id)
        {
            return Find<AssembleHappyRemainTemplate>(id);
        }

        public IList<AssembleHappyRemainTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleHappyRemainTemplate>();
            return mList;
        }
    }

public class AssemblSpawnBossTemplate : Tpl
    {
        /// <summary>
        /// 活动ID
        /// </summary>
        public int ActivityID;
        /// <summary>
        /// boss名称
        /// </summary>
        public string Name;
        /// <summary>
        /// bossID
        /// </summary>
        public int MonID;
        /// <summary>
        /// 刷怪小时
        /// </summary>
        public string Time;
        /// <summary>
        /// 刷怪地图
        /// </summary>
        public int MapID;
        /// <summary>
        /// 坐标X
        /// </summary>
        public int MapX;
        /// <summary>
        /// 坐标y
        /// </summary>
        public int MapY;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ActivityID = bytes.ReadInt();
            Name = bytes.ReadUTF();
            MonID = bytes.ReadInt();
            Time = bytes.ReadUTF();
            MapID = bytes.ReadInt();
            MapX = bytes.ReadInt();
            MapY = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ActivityID);
            bytes.WriteUTF(Name);
            bytes.WriteInt(MonID);
            bytes.WriteUTF(Time);
            bytes.WriteInt(MapID);
            bytes.WriteInt(MapX);
            bytes.WriteInt(MapY);
        }
    }

    public class AssemblSpawnBossTemplateMode : TplMode
    {
        private IList<AssemblSpawnBossTemplate> mList = null;

        public AssemblSpawnBossTemplateMode(int step) : base("AssemblSpawnBossTemplate", typeof(AssemblSpawnBossTemplate), step) { }

        public AssemblSpawnBossTemplate this[int id]
        {
            get { return Find<AssemblSpawnBossTemplate>(id); }
        }

        public AssemblSpawnBossTemplate Find(int id)
        {
            return Find<AssemblSpawnBossTemplate>(id);
        }

        public IList<AssemblSpawnBossTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblSpawnBossTemplate>();
            return mList;
        }
    }

public class AssembleFirstBossKillTemplate : Tpl
    {
        /// <summary>
        /// 活动组
        /// </summary>
        public int ActivtyGroup;
        /// <summary>
        /// 怪物组id
        /// </summary>
        public int MonsterGroupTID;
        /// <summary>
        /// 总领取次数
        /// </summary>
        public int ServerRewardTimes;
        /// <summary>
        /// 个人可领取次数
        /// </summary>
        public int PersonRewardTimes;
        /// <summary>
        /// 奖励
        /// </summary>
        public string Awards;
        /// <summary>
        /// BOSS挑战跳转
        /// </summary>
        public string BossChallengeTransfer;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ActivtyGroup = bytes.ReadInt();
            MonsterGroupTID = bytes.ReadInt();
            ServerRewardTimes = bytes.ReadInt();
            PersonRewardTimes = bytes.ReadInt();
            Awards = bytes.ReadUTF();
            BossChallengeTransfer = bytes.ReadUTF();
            Sort = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ActivtyGroup);
            bytes.WriteInt(MonsterGroupTID);
            bytes.WriteInt(ServerRewardTimes);
            bytes.WriteInt(PersonRewardTimes);
            bytes.WriteUTF(Awards);
            bytes.WriteUTF(BossChallengeTransfer);
            bytes.WriteInt(Sort);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssembleFirstBossKillTemplateMode : TplMode
    {
        private IList<AssembleFirstBossKillTemplate> mList = null;

        public AssembleFirstBossKillTemplateMode(int step) : base("AssembleFirstBossKillTemplate", typeof(AssembleFirstBossKillTemplate), step) { }

        public AssembleFirstBossKillTemplate this[int id]
        {
            get { return Find<AssembleFirstBossKillTemplate>(id); }
        }

        public AssembleFirstBossKillTemplate Find(int id)
        {
            return Find<AssembleFirstBossKillTemplate>(id);
        }

        public IList<AssembleFirstBossKillTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleFirstBossKillTemplate>();
            return mList;
        }
    }

public class AssembleRechargreRankTemplate : Tpl
    {
        /// <summary>
        /// 名次
        /// </summary>
        public int Rank;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 邮件
        /// </summary>
        public int MailID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Rank = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            MailID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Rank);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(MailID);
        }
    }

    public class AssembleRechargreRankTemplateMode : TplMode
    {
        private IList<AssembleRechargreRankTemplate> mList = null;

        public AssembleRechargreRankTemplateMode(int step) : base("AssembleRechargreRankTemplate", typeof(AssembleRechargreRankTemplate), step) { }

        public AssembleRechargreRankTemplate this[int id]
        {
            get { return Find<AssembleRechargreRankTemplate>(id); }
        }

        public AssembleRechargreRankTemplate Find(int id)
        {
            return Find<AssembleRechargreRankTemplate>(id);
        }

        public IList<AssembleRechargreRankTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleRechargreRankTemplate>();
            return mList;
        }
    }

public class AssembleRechargreGiftTemplate : Tpl
    {
        /// <summary>
        /// 充值钻石
        /// </summary>
        public int Num;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Num = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Num);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
        }
    }

    public class AssembleRechargreGiftTemplateMode : TplMode
    {
        private IList<AssembleRechargreGiftTemplate> mList = null;

        public AssembleRechargreGiftTemplateMode(int step) : base("AssembleRechargreGiftTemplate", typeof(AssembleRechargreGiftTemplate), step) { }

        public AssembleRechargreGiftTemplate this[int id]
        {
            get { return Find<AssembleRechargreGiftTemplate>(id); }
        }

        public AssembleRechargreGiftTemplate Find(int id)
        {
            return Find<AssembleRechargreGiftTemplate>(id);
        }

        public IList<AssembleRechargreGiftTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleRechargreGiftTemplate>();
            return mList;
        }
    }

public class AssemblSpawnMonsterTemplate : Tpl
    {
        /// <summary>
        /// 第几天
        /// </summary>
        public int Day;
        /// <summary>
        /// 小时
        /// </summary>
        public int Hour;
        /// <summary>
        /// 分钟
        /// </summary>
        public int Minute;
        /// <summary>
        /// 地图ID
        /// </summary>
        public int MapID;
        /// <summary>
        /// 回收时间(毫秒，0不回收)
        /// </summary>
        public int RecycleTime;
        /// <summary>
        /// ID|X|Y,ID|X|Y
        /// </summary>
        public string MonsterInfo;
        /// <summary>
        /// 展示道具
        /// </summary>
        public string ShowItem;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Day = bytes.ReadInt();
            Hour = bytes.ReadInt();
            Minute = bytes.ReadInt();
            MapID = bytes.ReadInt();
            RecycleTime = bytes.ReadInt();
            MonsterInfo = bytes.ReadUTF();
            ShowItem = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Day);
            bytes.WriteInt(Hour);
            bytes.WriteInt(Minute);
            bytes.WriteInt(MapID);
            bytes.WriteInt(RecycleTime);
            bytes.WriteUTF(MonsterInfo);
            bytes.WriteUTF(ShowItem);
        }
    }

    public class AssemblSpawnMonsterTemplateMode : TplMode
    {
        private IList<AssemblSpawnMonsterTemplate> mList = null;

        public AssemblSpawnMonsterTemplateMode(int step) : base("AssemblSpawnMonsterTemplate", typeof(AssemblSpawnMonsterTemplate), step) { }

        public AssemblSpawnMonsterTemplate this[int id]
        {
            get { return Find<AssemblSpawnMonsterTemplate>(id); }
        }

        public AssemblSpawnMonsterTemplate Find(int id)
        {
            return Find<AssemblSpawnMonsterTemplate>(id);
        }

        public IList<AssemblSpawnMonsterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblSpawnMonsterTemplate>();
            return mList;
        }
    }

public class AssembleActivityNameTemplate : Tpl
    {
        /// <summary>
        /// 活动名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 按钮资源
        /// </summary>
        public string Btn;
        /// <summary>
        /// 描述栏展示界面
        /// </summary>
        public string DesShow;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Btn = bytes.ReadUTF();
            DesShow = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(Btn);
            bytes.WriteUTF(DesShow);
        }
    }

    public class AssembleActivityNameTemplateMode : TplMode
    {
        private IList<AssembleActivityNameTemplate> mList = null;

        public AssembleActivityNameTemplateMode(int step) : base("AssembleActivityNameTemplate", typeof(AssembleActivityNameTemplate), step) { }

        public AssembleActivityNameTemplate this[int id]
        {
            get { return Find<AssembleActivityNameTemplate>(id); }
        }

        public AssembleActivityNameTemplate Find(int id)
        {
            return Find<AssembleActivityNameTemplate>(id);
        }

        public IList<AssembleActivityNameTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleActivityNameTemplate>();
            return mList;
        }
    }

public class AssembleStoneAthleticsTemplate : Tpl
    {
        /// <summary>
        /// 需要的命珠等阶
        /// </summary>
        public int NeedStoneTID;
        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedStoneTID = bytes.ReadInt();
            Icon = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedStoneTID);
            bytes.WriteInt(Icon);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssembleStoneAthleticsTemplateMode : TplMode
    {
        private IList<AssembleStoneAthleticsTemplate> mList = null;

        public AssembleStoneAthleticsTemplateMode(int step) : base("AssembleStoneAthleticsTemplate", typeof(AssembleStoneAthleticsTemplate), step) { }

        public AssembleStoneAthleticsTemplate this[int id]
        {
            get { return Find<AssembleStoneAthleticsTemplate>(id); }
        }

        public AssembleStoneAthleticsTemplate Find(int id)
        {
            return Find<AssembleStoneAthleticsTemplate>(id);
        }

        public IList<AssembleStoneAthleticsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleStoneAthleticsTemplate>();
            return mList;
        }
    }

public class AssembleShangPinYouHuiTemplate : Tpl
    {
        /// <summary>
        /// 左侧购买次数
        /// </summary>
        public int LeftTime;
        /// <summary>
        /// 左侧购买价格
        /// </summary>
        public int LeftPrice;
        /// <summary>
        /// 右侧购买次数
        /// </summary>
        public int RightTime;
        /// <summary>
        /// 右侧购买价格
        /// </summary>
        public int RightPrice;
        /// <summary>
        /// 商品信息
        /// </summary>
        public string ItemInfo;
        /// <summary>
        /// 随机奖励信息
        /// </summary>
        public string AwardInfo;
        /// <summary>
        /// 购买次数
        /// </summary>
        public int Times;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            LeftTime = bytes.ReadInt();
            LeftPrice = bytes.ReadInt();
            RightTime = bytes.ReadInt();
            RightPrice = bytes.ReadInt();
            ItemInfo = bytes.ReadUTF();
            AwardInfo = bytes.ReadUTF();
            Times = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(LeftTime);
            bytes.WriteInt(LeftPrice);
            bytes.WriteInt(RightTime);
            bytes.WriteInt(RightPrice);
            bytes.WriteUTF(ItemInfo);
            bytes.WriteUTF(AwardInfo);
            bytes.WriteInt(Times);
        }
    }

    public class AssembleShangPinYouHuiTemplateMode : TplMode
    {
        private IList<AssembleShangPinYouHuiTemplate> mList = null;

        public AssembleShangPinYouHuiTemplateMode(int step) : base("AssembleShangPinYouHuiTemplate", typeof(AssembleShangPinYouHuiTemplate), step) { }

        public AssembleShangPinYouHuiTemplate this[int id]
        {
            get { return Find<AssembleShangPinYouHuiTemplate>(id); }
        }

        public AssembleShangPinYouHuiTemplate Find(int id)
        {
            return Find<AssembleShangPinYouHuiTemplate>(id);
        }

        public IList<AssembleShangPinYouHuiTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleShangPinYouHuiTemplate>();
            return mList;
        }
    }

public class AssemblServerFirstTemplate : Tpl
    {
        /// <summary>
        /// 装备最低等级
        /// </summary>
        public int EquipLv;
        /// <summary>
        /// 纸娃娃套装ID
        /// </summary>
        public int RoleShow;
        /// <summary>
        /// 装备位置
        /// </summary>
        public string EquipPos;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EquipLv = bytes.ReadInt();
            RoleShow = bytes.ReadInt();
            EquipPos = bytes.ReadUTF();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EquipLv);
            bytes.WriteInt(RoleShow);
            bytes.WriteUTF(EquipPos);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
        }
    }

    public class AssemblServerFirstTemplateMode : TplMode
    {
        private IList<AssemblServerFirstTemplate> mList = null;

        public AssemblServerFirstTemplateMode(int step) : base("AssemblServerFirstTemplate", typeof(AssemblServerFirstTemplate), step) { }

        public AssemblServerFirstTemplate this[int id]
        {
            get { return Find<AssemblServerFirstTemplate>(id); }
        }

        public AssemblServerFirstTemplate Find(int id)
        {
            return Find<AssemblServerFirstTemplate>(id);
        }

        public IList<AssemblServerFirstTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblServerFirstTemplate>();
            return mList;
        }
    }

public class AssembleTreasureRankTemplate : Tpl
    {
        /// <summary>
        /// 名次
        /// </summary>
        public int Rank;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 发放邮件模版ID
        /// </summary>
        public int MailID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Rank = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            MailID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Rank);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(MailID);
        }
    }

    public class AssembleTreasureRankTemplateMode : TplMode
    {
        private IList<AssembleTreasureRankTemplate> mList = null;

        public AssembleTreasureRankTemplateMode(int step) : base("AssembleTreasureRankTemplate", typeof(AssembleTreasureRankTemplate), step) { }

        public AssembleTreasureRankTemplate this[int id]
        {
            get { return Find<AssembleTreasureRankTemplate>(id); }
        }

        public AssembleTreasureRankTemplate Find(int id)
        {
            return Find<AssembleTreasureRankTemplate>(id);
        }

        public IList<AssembleTreasureRankTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleTreasureRankTemplate>();
            return mList;
        }
    }

public class AssembleLuckyTurntableTemplate : Tpl
    {
        /// <summary>
        /// 奖励列表
        /// </summary>
        public string AwardItem;
        /// <summary>
        /// 抽奖次数1（表示在抽奖次1和抽奖次数2的抽奖中可抽中）
        /// </summary>
        public int BeginNum;
        /// <summary>
        /// 抽奖次数2
        /// </summary>
        public int EndNum;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            AwardItem = bytes.ReadUTF();
            BeginNum = bytes.ReadInt();
            EndNum = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(AwardItem);
            bytes.WriteInt(BeginNum);
            bytes.WriteInt(EndNum);
        }
    }

    public class AssembleLuckyTurntableTemplateMode : TplMode
    {
        private IList<AssembleLuckyTurntableTemplate> mList = null;

        public AssembleLuckyTurntableTemplateMode(int step) : base("AssembleLuckyTurntableTemplate", typeof(AssembleLuckyTurntableTemplate), step) { }

        public AssembleLuckyTurntableTemplate this[int id]
        {
            get { return Find<AssembleLuckyTurntableTemplate>(id); }
        }

        public AssembleLuckyTurntableTemplate Find(int id)
        {
            return Find<AssembleLuckyTurntableTemplate>(id);
        }

        public IList<AssembleLuckyTurntableTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleLuckyTurntableTemplate>();
            return mList;
        }
    }

public class AssemblFashionBuyTemplate : Tpl
    {
        /// <summary>
        /// 购买次数（0不限）
        /// </summary>
        public int BuyTimes;
        /// <summary>
        /// 元宝消耗
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            BuyTimes = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(BuyTimes);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
        }
    }

    public class AssemblFashionBuyTemplateMode : TplMode
    {
        private IList<AssemblFashionBuyTemplate> mList = null;

        public AssemblFashionBuyTemplateMode(int step) : base("AssemblFashionBuyTemplate", typeof(AssemblFashionBuyTemplate), step) { }

        public AssemblFashionBuyTemplate this[int id]
        {
            get { return Find<AssemblFashionBuyTemplate>(id); }
        }

        public AssemblFashionBuyTemplate Find(int id)
        {
            return Find<AssemblFashionBuyTemplate>(id);
        }

        public IList<AssemblFashionBuyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblFashionBuyTemplate>();
            return mList;
        }
    }

public class AssembleXinMoAthleticsTemplate : Tpl
    {
        /// <summary>
        /// 需要的心魔等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedLv = bytes.ReadInt();
            Icon = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(Icon);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssembleXinMoAthleticsTemplateMode : TplMode
    {
        private IList<AssembleXinMoAthleticsTemplate> mList = null;

        public AssembleXinMoAthleticsTemplateMode(int step) : base("AssembleXinMoAthleticsTemplate", typeof(AssembleXinMoAthleticsTemplate), step) { }

        public AssembleXinMoAthleticsTemplate this[int id]
        {
            get { return Find<AssembleXinMoAthleticsTemplate>(id); }
        }

        public AssembleXinMoAthleticsTemplate Find(int id)
        {
            return Find<AssembleXinMoAthleticsTemplate>(id);
        }

        public IList<AssembleXinMoAthleticsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleXinMoAthleticsTemplate>();
            return mList;
        }
    }

public class AssemblChallengeBossTemplate : Tpl
    {
        /// <summary>
        /// 怪物组ID列表
        /// </summary>
        public string BossList;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 事件类型
        /// </summary>
        public int Event;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            BossList = bytes.ReadUTF();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            Event = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(BossList);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(Event);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssemblChallengeBossTemplateMode : TplMode
    {
        private IList<AssemblChallengeBossTemplate> mList = null;

        public AssemblChallengeBossTemplateMode(int step) : base("AssemblChallengeBossTemplate", typeof(AssemblChallengeBossTemplate), step) { }

        public AssemblChallengeBossTemplate this[int id]
        {
            get { return Find<AssemblChallengeBossTemplate>(id); }
        }

        public AssemblChallengeBossTemplate Find(int id)
        {
            return Find<AssemblChallengeBossTemplate>(id);
        }

        public IList<AssemblChallengeBossTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblChallengeBossTemplate>();
            return mList;
        }
    }

public class AssembleMonthScheduleTemplate : Tpl
    {
        /// <summary>
        /// 开始时间
        /// </summary>
        public string StartDay;
        /// <summary>
        /// 活动入口类型
        /// </summary>
        public int ActivityType;
        /// <summary>
        /// 入口名称
        /// </summary>
        public int TitleID;
        /// <summary>
        /// 持续时间
        /// </summary>
        public int DelayDay;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            StartDay = bytes.ReadUTF();
            ActivityType = bytes.ReadInt();
            TitleID = bytes.ReadInt();
            DelayDay = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(StartDay);
            bytes.WriteInt(ActivityType);
            bytes.WriteInt(TitleID);
            bytes.WriteInt(DelayDay);
        }
    }

    public class AssembleMonthScheduleTemplateMode : TplMode
    {
        private IList<AssembleMonthScheduleTemplate> mList = null;

        public AssembleMonthScheduleTemplateMode(int step) : base("AssembleMonthScheduleTemplate", typeof(AssembleMonthScheduleTemplate), step) { }

        public AssembleMonthScheduleTemplate this[int id]
        {
            get { return Find<AssembleMonthScheduleTemplate>(id); }
        }

        public AssembleMonthScheduleTemplate Find(int id)
        {
            return Find<AssembleMonthScheduleTemplate>(id);
        }

        public IList<AssembleMonthScheduleTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleMonthScheduleTemplate>();
            return mList;
        }
    }

public class AMonthActivityListTemplate : Tpl
    {
        /// <summary>
        /// 开服时间(月)
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 活动入口类型
        /// </summary>
        public int ActivityType;
        /// <summary>
        /// 组装活动id
        /// </summary>
        public string ActivityList;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            OpenDay = bytes.ReadInt();
            ActivityType = bytes.ReadInt();
            ActivityList = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(OpenDay);
            bytes.WriteInt(ActivityType);
            bytes.WriteUTF(ActivityList);
        }
    }

    public class AMonthActivityListTemplateMode : TplMode
    {
        private IList<AMonthActivityListTemplate> mList = null;

        public AMonthActivityListTemplateMode(int step) : base("AMonthActivityListTemplate", typeof(AMonthActivityListTemplate), step) { }

        public AMonthActivityListTemplate this[int id]
        {
            get { return Find<AMonthActivityListTemplate>(id); }
        }

        public AMonthActivityListTemplate Find(int id)
        {
            return Find<AMonthActivityListTemplate>(id);
        }

        public IList<AMonthActivityListTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AMonthActivityListTemplate>();
            return mList;
        }
    }

public class AssembleWeekScheduleTemplate : Tpl
    {
        /// <summary>
        /// 开始时间
        /// </summary>
        public string StartDay;
        /// <summary>
        /// 活动入口类型
        /// </summary>
        public int ActivityType;
        /// <summary>
        /// 入口名称
        /// </summary>
        public int TitleID;
        /// <summary>
        /// 持续时间
        /// </summary>
        public int DelayDay;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            StartDay = bytes.ReadUTF();
            ActivityType = bytes.ReadInt();
            TitleID = bytes.ReadInt();
            DelayDay = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(StartDay);
            bytes.WriteInt(ActivityType);
            bytes.WriteInt(TitleID);
            bytes.WriteInt(DelayDay);
        }
    }

    public class AssembleWeekScheduleTemplateMode : TplMode
    {
        private IList<AssembleWeekScheduleTemplate> mList = null;

        public AssembleWeekScheduleTemplateMode(int step) : base("AssembleWeekScheduleTemplate", typeof(AssembleWeekScheduleTemplate), step) { }

        public AssembleWeekScheduleTemplate this[int id]
        {
            get { return Find<AssembleWeekScheduleTemplate>(id); }
        }

        public AssembleWeekScheduleTemplate Find(int id)
        {
            return Find<AssembleWeekScheduleTemplate>(id);
        }

        public IList<AssembleWeekScheduleTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleWeekScheduleTemplate>();
            return mList;
        }
    }

public class AWeekActivityListTemplate : Tpl
    {
        /// <summary>
        /// 开服时间(周)
        /// </summary>
        public int OpenDay;
        /// <summary>
        /// 活动入口类型
        /// </summary>
        public int ActivityType;
        /// <summary>
        /// 组装活动id
        /// </summary>
        public string ActivityList;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            OpenDay = bytes.ReadInt();
            ActivityType = bytes.ReadInt();
            ActivityList = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(OpenDay);
            bytes.WriteInt(ActivityType);
            bytes.WriteUTF(ActivityList);
        }
    }

    public class AWeekActivityListTemplateMode : TplMode
    {
        private IList<AWeekActivityListTemplate> mList = null;

        public AWeekActivityListTemplateMode(int step) : base("AWeekActivityListTemplate", typeof(AWeekActivityListTemplate), step) { }

        public AWeekActivityListTemplate this[int id]
        {
            get { return Find<AWeekActivityListTemplate>(id); }
        }

        public AWeekActivityListTemplate Find(int id)
        {
            return Find<AWeekActivityListTemplate>(id);
        }

        public IList<AWeekActivityListTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AWeekActivityListTemplate>();
            return mList;
        }
    }

public class AssembleMonthRechargeTemplate : Tpl
    {
        /// <summary>
        /// 周期
        /// </summary>
        public int Circle;
        /// <summary>
        /// 条件
        /// </summary>
        public int Need;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Circle = bytes.ReadInt();
            Need = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Circle);
            bytes.WriteInt(Need);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(IsBind);
        }
    }

    public class AssembleMonthRechargeTemplateMode : TplMode
    {
        private IList<AssembleMonthRechargeTemplate> mList = null;

        public AssembleMonthRechargeTemplateMode(int step) : base("AssembleMonthRechargeTemplate", typeof(AssembleMonthRechargeTemplate), step) { }

        public AssembleMonthRechargeTemplate this[int id]
        {
            get { return Find<AssembleMonthRechargeTemplate>(id); }
        }

        public AssembleMonthRechargeTemplate Find(int id)
        {
            return Find<AssembleMonthRechargeTemplate>(id);
        }

        public IList<AssembleMonthRechargeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleMonthRechargeTemplate>();
            return mList;
        }
    }

public class CostMaterialtivityTemplate : Tpl
    {
        /// <summary>
        /// 关联活动ID
        /// </summary>
        public int ActivityID;
        /// <summary>
        /// 积分需求
        /// </summary>
        public int Number;
        /// <summary>
        /// 奖励1
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 奖励2
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 奖励3
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 奖励4
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 奖励5
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 奖励6
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 奖励7
        /// </summary>
        public string Bonus7;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ActivityID = bytes.ReadInt();
            Number = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            Bonus7 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ActivityID);
            bytes.WriteInt(Number);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteUTF(Bonus7);
        }
    }

    public class CostMaterialtivityTemplateMode : TplMode
    {
        private IList<CostMaterialtivityTemplate> mList = null;

        public CostMaterialtivityTemplateMode(int step) : base("CostMaterialtivityTemplate", typeof(CostMaterialtivityTemplate), step) { }

        public CostMaterialtivityTemplate this[int id]
        {
            get { return Find<CostMaterialtivityTemplate>(id); }
        }

        public CostMaterialtivityTemplate Find(int id)
        {
            return Find<CostMaterialtivityTemplate>(id);
        }

        public IList<CostMaterialtivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CostMaterialtivityTemplate>();
            return mList;
        }
    }

public class AssembleDailyRestrictiTemplate : Tpl
    {
        /// <summary>
        /// 原价
        /// </summary>
        public int OldMoney;
        /// <summary>
        /// 现价
        /// </summary>
        public int Money;
        /// <summary>
        /// 购买次数
        /// </summary>
        public int Times;
        /// <summary>
        /// 物品
        /// </summary>
        public string ItemInfo;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            OldMoney = bytes.ReadInt();
            Money = bytes.ReadInt();
            Times = bytes.ReadInt();
            ItemInfo = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(OldMoney);
            bytes.WriteInt(Money);
            bytes.WriteInt(Times);
            bytes.WriteUTF(ItemInfo);
        }
    }

    public class AssembleDailyRestrictiTemplateMode : TplMode
    {
        private IList<AssembleDailyRestrictiTemplate> mList = null;

        public AssembleDailyRestrictiTemplateMode(int step) : base("AssembleDailyRestrictiTemplate", typeof(AssembleDailyRestrictiTemplate), step) { }

        public AssembleDailyRestrictiTemplate this[int id]
        {
            get { return Find<AssembleDailyRestrictiTemplate>(id); }
        }

        public AssembleDailyRestrictiTemplate Find(int id)
        {
            return Find<AssembleDailyRestrictiTemplate>(id);
        }

        public IList<AssembleDailyRestrictiTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleDailyRestrictiTemplate>();
            return mList;
        }
    }

public class AssembleHongFuQiTianTemplate : Tpl
    {
        /// <summary>
        /// 单价
        /// </summary>
        public int Money;
        /// <summary>
        /// 礼包信息
        /// </summary>
        public string ItemInfo;
        /// <summary>
        /// 购买次数
        /// </summary>
        public int Times;
        /// <summary>
        /// 中奖物品ID
        /// </summary>
        public string Award;
        /// <summary>
        /// 大奖揭晓时间
        /// </summary>
        public int AwardTime;
        /// <summary>
        /// 大奖邮件
        /// </summary>
        public int AwardMailID;
        /// <summary>
        /// 幸运尾数邮件
        /// </summary>
        public int LuckyMailID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Money = bytes.ReadInt();
            ItemInfo = bytes.ReadUTF();
            Times = bytes.ReadInt();
            Award = bytes.ReadUTF();
            AwardTime = bytes.ReadInt();
            AwardMailID = bytes.ReadInt();
            LuckyMailID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Money);
            bytes.WriteUTF(ItemInfo);
            bytes.WriteInt(Times);
            bytes.WriteUTF(Award);
            bytes.WriteInt(AwardTime);
            bytes.WriteInt(AwardMailID);
            bytes.WriteInt(LuckyMailID);
        }
    }

    public class AssembleHongFuQiTianTemplateMode : TplMode
    {
        private IList<AssembleHongFuQiTianTemplate> mList = null;

        public AssembleHongFuQiTianTemplateMode(int step) : base("AssembleHongFuQiTianTemplate", typeof(AssembleHongFuQiTianTemplate), step) { }

        public AssembleHongFuQiTianTemplate this[int id]
        {
            get { return Find<AssembleHongFuQiTianTemplate>(id); }
        }

        public AssembleHongFuQiTianTemplate Find(int id)
        {
            return Find<AssembleHongFuQiTianTemplate>(id);
        }

        public IList<AssembleHongFuQiTianTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleHongFuQiTianTemplate>();
            return mList;
        }
    }

public class AssembleCostRankTemplate : Tpl
    {
        /// <summary>
        /// 名次
        /// </summary>
        public int Rank;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 发放邮件模版ID
        /// </summary>
        public int MailID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Rank = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            MailID = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Rank);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(MailID);
        }
    }

    public class AssembleCostRankTemplateMode : TplMode
    {
        private IList<AssembleCostRankTemplate> mList = null;

        public AssembleCostRankTemplateMode(int step) : base("AssembleCostRankTemplate", typeof(AssembleCostRankTemplate), step) { }

        public AssembleCostRankTemplate this[int id]
        {
            get { return Find<AssembleCostRankTemplate>(id); }
        }

        public AssembleCostRankTemplate Find(int id)
        {
            return Find<AssembleCostRankTemplate>(id);
        }

        public IList<AssembleCostRankTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleCostRankTemplate>();
            return mList;
        }
    }

public class AssemblPreferentialGiftTemplate : Tpl
    {
        /// <summary>
        /// 前端显示
        /// </summary>
        public string Display;
        /// <summary>
        /// 礼包组
        /// </summary>
        public int Group;
        /// <summary>
        /// 组序
        /// </summary>
        public int Queue;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 价格
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 特效ID|x坐标|y坐标
        /// </summary>
        public string EffectID;
        /// <summary>
        /// 限购次数
        /// </summary>
        public int ForPurchasing;
        /// <summary>
        /// 是否打折
        /// </summary>
        public int IsSale;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Display = bytes.ReadUTF();
            Group = bytes.ReadInt();
            Queue = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            EffectID = bytes.ReadUTF();
            ForPurchasing = bytes.ReadInt();
            IsSale = bytes.ReadInt();
            IsBind = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Display);
            bytes.WriteInt(Group);
            bytes.WriteInt(Queue);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteUTF(EffectID);
            bytes.WriteInt(ForPurchasing);
            bytes.WriteInt(IsSale);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssemblPreferentialGiftTemplateMode : TplMode
    {
        private IList<AssemblPreferentialGiftTemplate> mList = null;

        public AssemblPreferentialGiftTemplateMode(int step) : base("AssemblPreferentialGiftTemplate", typeof(AssemblPreferentialGiftTemplate), step) { }

        public AssemblPreferentialGiftTemplate this[int id]
        {
            get { return Find<AssemblPreferentialGiftTemplate>(id); }
        }

        public AssemblPreferentialGiftTemplate Find(int id)
        {
            return Find<AssemblPreferentialGiftTemplate>(id);
        }

        public IList<AssemblPreferentialGiftTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblPreferentialGiftTemplate>();
            return mList;
        }
    }

public class AssembleSmashingEggsTemplate : Tpl
    {
        /// <summary>
        /// 对应第几个蛋
        /// </summary>
        public int Group;
        /// <summary>
        /// 砸蛋需要VIP等级
        /// </summary>
        public int NeedVip;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int ItemId;
        /// <summary>
        /// 物品数目
        /// </summary>
        public int ItemNum;
        /// <summary>
        /// 权重
        /// </summary>
        public int Right;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Group = bytes.ReadInt();
            NeedVip = bytes.ReadInt();
            ItemId = bytes.ReadInt();
            ItemNum = bytes.ReadInt();
            Right = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Group);
            bytes.WriteInt(NeedVip);
            bytes.WriteInt(ItemId);
            bytes.WriteInt(ItemNum);
            bytes.WriteInt(Right);
        }
    }

    public class AssembleSmashingEggsTemplateMode : TplMode
    {
        private IList<AssembleSmashingEggsTemplate> mList = null;

        public AssembleSmashingEggsTemplateMode(int step) : base("AssembleSmashingEggsTemplate", typeof(AssembleSmashingEggsTemplate), step) { }

        public AssembleSmashingEggsTemplate this[int id]
        {
            get { return Find<AssembleSmashingEggsTemplate>(id); }
        }

        public AssembleSmashingEggsTemplate Find(int id)
        {
            return Find<AssembleSmashingEggsTemplate>(id);
        }

        public IList<AssembleSmashingEggsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleSmashingEggsTemplate>();
            return mList;
        }
    }

public class AssembleJewelAthleticsTemplate : Tpl
    {
        /// <summary>
        /// 需要的宝石等阶
        /// </summary>
        public int NeedJewelTID;
        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedJewelTID = bytes.ReadInt();
            Icon = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedJewelTID);
            bytes.WriteInt(Icon);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssembleJewelAthleticsTemplateMode : TplMode
    {
        private IList<AssembleJewelAthleticsTemplate> mList = null;

        public AssembleJewelAthleticsTemplateMode(int step) : base("AssembleJewelAthleticsTemplate", typeof(AssembleJewelAthleticsTemplate), step) { }

        public AssembleJewelAthleticsTemplate this[int id]
        {
            get { return Find<AssembleJewelAthleticsTemplate>(id); }
        }

        public AssembleJewelAthleticsTemplate Find(int id)
        {
            return Find<AssembleJewelAthleticsTemplate>(id);
        }

        public IList<AssembleJewelAthleticsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleJewelAthleticsTemplate>();
            return mList;
        }
    }

public class AssembleMysteryShopTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 物品
        /// </summary>
        public int ItemTID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int ItemCount;
        /// <summary>
        /// 权重
        /// </summary>
        public int ItemProbability;
        /// <summary>
        /// 原价货币类型
        /// </summary>
        public int OldCostType;
        /// <summary>
        /// 原价展示
        /// </summary>
        public int OldCostValue;
        /// <summary>
        /// 当前货币类型
        /// </summary>
        public int CostType;
        /// <summary>
        /// 当前货币值
        /// </summary>
        public int CostValue;
        /// <summary>
        /// 折扣
        /// </summary>
        public int Discount;
        /// <summary>
        /// 购买次数
        /// </summary>
        public int PurchaseTimes;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            ItemTID = bytes.ReadInt();
            ItemCount = bytes.ReadInt();
            ItemProbability = bytes.ReadInt();
            OldCostType = bytes.ReadInt();
            OldCostValue = bytes.ReadInt();
            CostType = bytes.ReadInt();
            CostValue = bytes.ReadInt();
            Discount = bytes.ReadInt();
            PurchaseTimes = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(ItemTID);
            bytes.WriteInt(ItemCount);
            bytes.WriteInt(ItemProbability);
            bytes.WriteInt(OldCostType);
            bytes.WriteInt(OldCostValue);
            bytes.WriteInt(CostType);
            bytes.WriteInt(CostValue);
            bytes.WriteInt(Discount);
            bytes.WriteInt(PurchaseTimes);
        }
    }

    public class AssembleMysteryShopTemplateMode : TplMode
    {
        private IList<AssembleMysteryShopTemplate> mList = null;

        public AssembleMysteryShopTemplateMode(int step) : base("AssembleMysteryShopTemplate", typeof(AssembleMysteryShopTemplate), step) { }

        public AssembleMysteryShopTemplate this[int id]
        {
            get { return Find<AssembleMysteryShopTemplate>(id); }
        }

        public AssembleMysteryShopTemplate Find(int id)
        {
            return Find<AssembleMysteryShopTemplate>(id);
        }

        public IList<AssembleMysteryShopTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleMysteryShopTemplate>();
            return mList;
        }
    }

public class AthleticsActivityTemplate : Tpl
    {
        /// <summary>
        /// 养成类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 需要等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 生效时间（天）
        /// </summary>
        public int EffectiveTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            NeedLv = bytes.ReadInt();
            Icon = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            BroadCast = bytes.ReadInt();
            IsBind = bytes.ReadInt();
            EffectiveTime = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(Icon);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(BroadCast);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(EffectiveTime);
        }
    }

    public class AthleticsActivityTemplateMode : TplMode
    {
        private IList<AthleticsActivityTemplate> mList = null;

        public AthleticsActivityTemplateMode(int step) : base("AthleticsActivityTemplate", typeof(AthleticsActivityTemplate), step) { }

        public AthleticsActivityTemplate this[int id]
        {
            get { return Find<AthleticsActivityTemplate>(id); }
        }

        public AthleticsActivityTemplate Find(int id)
        {
            return Find<AthleticsActivityTemplate>(id);
        }

        public IList<AthleticsActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AthleticsActivityTemplate>();
            return mList;
        }
    }

public class AssembleLevelAthleticsTemplate : Tpl
    {
        /// <summary>
        /// 需要的等级
        /// </summary>
        public int NeedLv;
        /// <summary>
        /// 需要的境界等级
        /// </summary>
        public int NeedState;
        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 生效时间（天）
        /// </summary>
        public int EffectiveTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedLv = bytes.ReadInt();
            NeedState = bytes.ReadInt();
            Icon = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            BroadCast = bytes.ReadInt();
            IsBind = bytes.ReadInt();
            EffectiveTime = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedLv);
            bytes.WriteInt(NeedState);
            bytes.WriteInt(Icon);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(BroadCast);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(EffectiveTime);
        }
    }

    public class AssembleLevelAthleticsTemplateMode : TplMode
    {
        private IList<AssembleLevelAthleticsTemplate> mList = null;

        public AssembleLevelAthleticsTemplateMode(int step) : base("AssembleLevelAthleticsTemplate", typeof(AssembleLevelAthleticsTemplate), step) { }

        public AssembleLevelAthleticsTemplate this[int id]
        {
            get { return Find<AssembleLevelAthleticsTemplate>(id); }
        }

        public AssembleLevelAthleticsTemplate Find(int id)
        {
            return Find<AssembleLevelAthleticsTemplate>(id);
        }

        public IList<AssembleLevelAthleticsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleLevelAthleticsTemplate>();
            return mList;
        }
    }

public class AssemblCumulativeRecharTemplate : Tpl
    {
        /// <summary>
        /// 充值数量
        /// </summary>
        public int Numb;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Numb = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Numb);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
        }
    }

    public class AssemblCumulativeRecharTemplateMode : TplMode
    {
        private IList<AssemblCumulativeRecharTemplate> mList = null;

        public AssemblCumulativeRecharTemplateMode(int step) : base("AssemblCumulativeRecharTemplate", typeof(AssemblCumulativeRecharTemplate), step) { }

        public AssemblCumulativeRecharTemplate this[int id]
        {
            get { return Find<AssemblCumulativeRecharTemplate>(id); }
        }

        public AssemblCumulativeRecharTemplate Find(int id)
        {
            return Find<AssemblCumulativeRecharTemplate>(id);
        }

        public IList<AssemblCumulativeRecharTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblCumulativeRecharTemplate>();
            return mList;
        }
    }

public class AssembleAccTreasuresTemplate : Tpl
    {
        /// <summary>
        /// 奖励条件数值
        /// </summary>
        public int Numb;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Numb = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Numb);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
        }
    }

    public class AssembleAccTreasuresTemplateMode : TplMode
    {
        private IList<AssembleAccTreasuresTemplate> mList = null;

        public AssembleAccTreasuresTemplateMode(int step) : base("AssembleAccTreasuresTemplate", typeof(AssembleAccTreasuresTemplate), step) { }

        public AssembleAccTreasuresTemplate this[int id]
        {
            get { return Find<AssembleAccTreasuresTemplate>(id); }
        }

        public AssembleAccTreasuresTemplate Find(int id)
        {
            return Find<AssembleAccTreasuresTemplate>(id);
        }

        public IList<AssembleAccTreasuresTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleAccTreasuresTemplate>();
            return mList;
        }
    }

public class AssembleCumulativeLoginTemplate : Tpl
    {
        /// <summary>
        /// 需要天数
        /// </summary>
        public int NeedLoginDays;
        /// <summary>
        /// 领取条件
        /// </summary>
        public int NeedLevel;
        /// <summary>
        /// 转生等级
        /// </summary>
        public int State;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedLoginDays = bytes.ReadInt();
            NeedLevel = bytes.ReadInt();
            State = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedLoginDays);
            bytes.WriteInt(NeedLevel);
            bytes.WriteInt(State);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(IsBind);
        }
    }

    public class AssembleCumulativeLoginTemplateMode : TplMode
    {
        private IList<AssembleCumulativeLoginTemplate> mList = null;

        public AssembleCumulativeLoginTemplateMode(int step) : base("AssembleCumulativeLoginTemplate", typeof(AssembleCumulativeLoginTemplate), step) { }

        public AssembleCumulativeLoginTemplate this[int id]
        {
            get { return Find<AssembleCumulativeLoginTemplate>(id); }
        }

        public AssembleCumulativeLoginTemplate Find(int id)
        {
            return Find<AssembleCumulativeLoginTemplate>(id);
        }

        public IList<AssembleCumulativeLoginTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleCumulativeLoginTemplate>();
            return mList;
        }
    }

public class AssembleWingAthleticsTemplate : Tpl
    {
        /// <summary>
        /// 需要的翅膀等级
        /// </summary>
        public int NeedWingLv;
        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;
        /// <summary>
        /// 生效时间（天）
        /// </summary>
        public int EffectiveTime;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedWingLv = bytes.ReadInt();
            Icon = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
            EffectiveTime = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedWingLv);
            bytes.WriteInt(Icon);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(BroadCast);
            bytes.WriteInt(EffectiveTime);
        }
    }

    public class AssembleWingAthleticsTemplateMode : TplMode
    {
        private IList<AssembleWingAthleticsTemplate> mList = null;

        public AssembleWingAthleticsTemplateMode(int step) : base("AssembleWingAthleticsTemplate", typeof(AssembleWingAthleticsTemplate), step) { }

        public AssembleWingAthleticsTemplate this[int id]
        {
            get { return Find<AssembleWingAthleticsTemplate>(id); }
        }

        public AssembleWingAthleticsTemplate Find(int id)
        {
            return Find<AssembleWingAthleticsTemplate>(id);
        }

        public IList<AssembleWingAthleticsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleWingAthleticsTemplate>();
            return mList;
        }
    }

public class MultipleRebateActivityTemplate : Tpl
    {
        /// <summary>
        /// 获得聚宝盆使用次数需累计充值额度
        /// </summary>
        public int Gear;
        /// <summary>
        /// 使用消耗货币类型
        /// </summary>
        public int CostType;
        /// <summary>
        /// 使用消耗货币数量
        /// </summary>
        public int CostMoney;
        /// <summary>
        /// 产出及倍数权重
        /// </summary>
        public string Awards;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Gear = bytes.ReadInt();
            CostType = bytes.ReadInt();
            CostMoney = bytes.ReadInt();
            Awards = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Gear);
            bytes.WriteInt(CostType);
            bytes.WriteInt(CostMoney);
            bytes.WriteUTF(Awards);
        }
    }

    public class MultipleRebateActivityTemplateMode : TplMode
    {
        private IList<MultipleRebateActivityTemplate> mList = null;

        public MultipleRebateActivityTemplateMode(int step) : base("MultipleRebateActivityTemplate", typeof(MultipleRebateActivityTemplate), step) { }

        public MultipleRebateActivityTemplate this[int id]
        {
            get { return Find<MultipleRebateActivityTemplate>(id); }
        }

        public MultipleRebateActivityTemplate Find(int id)
        {
            return Find<MultipleRebateActivityTemplate>(id);
        }

        public IList<MultipleRebateActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MultipleRebateActivityTemplate>();
            return mList;
        }
    }

public class AssembleFestRequiteTemplate : Tpl
    {
        /// <summary>
        /// 充值档位（元）
        /// </summary>
        public string Gear;
        /// <summary>
        /// 奖池及权重
        /// </summary>
        public string Awards;
        /// <summary>
        /// 抽取关系
        /// </summary>
        public string Draw;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Gear = bytes.ReadUTF();
            Awards = bytes.ReadUTF();
            Draw = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Gear);
            bytes.WriteUTF(Awards);
            bytes.WriteUTF(Draw);
        }
    }

    public class AssembleFestRequiteTemplateMode : TplMode
    {
        private IList<AssembleFestRequiteTemplate> mList = null;

        public AssembleFestRequiteTemplateMode(int step) : base("AssembleFestRequiteTemplate", typeof(AssembleFestRequiteTemplate), step) { }

        public AssembleFestRequiteTemplate this[int id]
        {
            get { return Find<AssembleFestRequiteTemplate>(id); }
        }

        public AssembleFestRequiteTemplate Find(int id)
        {
            return Find<AssembleFestRequiteTemplate>(id);
        }

        public IList<AssembleFestRequiteTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleFestRequiteTemplate>();
            return mList;
        }
    }

public class AssembleLowCostTemplate : Tpl
    {
        /// <summary>
        /// 第几天
        /// </summary>
        public int Day;
        /// <summary>
        /// 道具
        /// </summary>
        public int ItemId;
        /// <summary>
        /// 数目
        /// </summary>
        public int ItemNum;
        /// <summary>
        /// 限购次数
        /// </summary>
        public int CostTimes;
        /// <summary>
        /// 原价
        /// </summary>
        public int OldPrice;
        /// <summary>
        /// 第一次价格
        /// </summary>
        public int FirstPrice;
        /// <summary>
        /// 第二次价格
        /// </summary>
        public int SecondPrice;
        /// <summary>
        /// 第三次价格
        /// </summary>
        public int ThirdPrice;
        /// <summary>
        /// 第四次价格
        /// </summary>
        public int FourthPrice;
        /// <summary>
        /// 显示折扣
        /// </summary>
        public int Discount;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Day = bytes.ReadInt();
            ItemId = bytes.ReadInt();
            ItemNum = bytes.ReadInt();
            CostTimes = bytes.ReadInt();
            OldPrice = bytes.ReadInt();
            FirstPrice = bytes.ReadInt();
            SecondPrice = bytes.ReadInt();
            ThirdPrice = bytes.ReadInt();
            FourthPrice = bytes.ReadInt();
            Discount = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Day);
            bytes.WriteInt(ItemId);
            bytes.WriteInt(ItemNum);
            bytes.WriteInt(CostTimes);
            bytes.WriteInt(OldPrice);
            bytes.WriteInt(FirstPrice);
            bytes.WriteInt(SecondPrice);
            bytes.WriteInt(ThirdPrice);
            bytes.WriteInt(FourthPrice);
            bytes.WriteInt(Discount);
        }
    }

    public class AssembleLowCostTemplateMode : TplMode
    {
        private IList<AssembleLowCostTemplate> mList = null;

        public AssembleLowCostTemplateMode(int step) : base("AssembleLowCostTemplate", typeof(AssembleLowCostTemplate), step) { }

        public AssembleLowCostTemplate this[int id]
        {
            get { return Find<AssembleLowCostTemplate>(id); }
        }

        public AssembleLowCostTemplate Find(int id)
        {
            return Find<AssembleLowCostTemplate>(id);
        }

        public IList<AssembleLowCostTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleLowCostTemplate>();
            return mList;
        }
    }

public class AssembleDuiHuanTemplate : Tpl
    {
        /// <summary>
        /// 开服天数
        /// </summary>
        public int OpensDay;
        /// <summary>
        /// 位置
        /// </summary>
        public int Pos;
        /// <summary>
        /// 权重
        /// </summary>
        public int Probability;
        /// <summary>
        /// 物品ID
        /// </summary>
        public int ItemID;
        /// <summary>
        /// 物品数量
        /// </summary>
        public int ItemCount;
        /// <summary>
        /// 每天最大购买次数
        /// </summary>
        public int MaxCount;
        /// <summary>
        /// 需求贡献数量
        /// </summary>
        public int DonateValue;
        /// <summary>
        /// 需求元宝数量
        /// </summary>
        public int MoneyCount;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            OpensDay = bytes.ReadInt();
            Pos = bytes.ReadInt();
            Probability = bytes.ReadInt();
            ItemID = bytes.ReadInt();
            ItemCount = bytes.ReadInt();
            MaxCount = bytes.ReadInt();
            DonateValue = bytes.ReadInt();
            MoneyCount = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(OpensDay);
            bytes.WriteInt(Pos);
            bytes.WriteInt(Probability);
            bytes.WriteInt(ItemID);
            bytes.WriteInt(ItemCount);
            bytes.WriteInt(MaxCount);
            bytes.WriteInt(DonateValue);
            bytes.WriteInt(MoneyCount);
        }
    }

    public class AssembleDuiHuanTemplateMode : TplMode
    {
        private IList<AssembleDuiHuanTemplate> mList = null;

        public AssembleDuiHuanTemplateMode(int step) : base("AssembleDuiHuanTemplate", typeof(AssembleDuiHuanTemplate), step) { }

        public AssembleDuiHuanTemplate this[int id]
        {
            get { return Find<AssembleDuiHuanTemplate>(id); }
        }

        public AssembleDuiHuanTemplate Find(int id)
        {
            return Find<AssembleDuiHuanTemplate>(id);
        }

        public IList<AssembleDuiHuanTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleDuiHuanTemplate>();
            return mList;
        }
    }

public class AssembleEquipRecoveryTemplate : Tpl
    {
        /// <summary>
        /// 所属活动ID
        /// </summary>
        public int ActivityID;
        /// <summary>
        /// 回收的物品
        /// </summary>
        public int RecoveryItemID;
        /// <summary>
        /// 装备名称
        /// </summary>
        public string ItemName;
        /// <summary>
        /// 回收数量
        /// </summary>
        public int RecoveryItemNumber;
        /// <summary>
        /// 兑换名额
        /// </summary>
        public int RecoveryQuota;
        /// <summary>
        /// 货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币奖励
        /// </summary>
        public int MoneyCount;
        /// <summary>
        /// 道具奖励
        /// </summary>
        public string ItemAwards;
        /// <summary>
        /// 排序
        /// </summary>
        public int Sort;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ActivityID = bytes.ReadInt();
            RecoveryItemID = bytes.ReadInt();
            ItemName = bytes.ReadUTF();
            RecoveryItemNumber = bytes.ReadInt();
            RecoveryQuota = bytes.ReadInt();
            MoneyType = bytes.ReadInt();
            MoneyCount = bytes.ReadInt();
            ItemAwards = bytes.ReadUTF();
            Sort = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ActivityID);
            bytes.WriteInt(RecoveryItemID);
            bytes.WriteUTF(ItemName);
            bytes.WriteInt(RecoveryItemNumber);
            bytes.WriteInt(RecoveryQuota);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyCount);
            bytes.WriteUTF(ItemAwards);
            bytes.WriteInt(Sort);
        }
    }

    public class AssembleEquipRecoveryTemplateMode : TplMode
    {
        private IList<AssembleEquipRecoveryTemplate> mList = null;

        public AssembleEquipRecoveryTemplateMode(int step) : base("AssembleEquipRecoveryTemplate", typeof(AssembleEquipRecoveryTemplate), step) { }

        public AssembleEquipRecoveryTemplate this[int id]
        {
            get { return Find<AssembleEquipRecoveryTemplate>(id); }
        }

        public AssembleEquipRecoveryTemplate Find(int id)
        {
            return Find<AssembleEquipRecoveryTemplate>(id);
        }

        public IList<AssembleEquipRecoveryTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleEquipRecoveryTemplate>();
            return mList;
        }
    }

public class EquipFirstDropTemplate : Tpl
    {
        /// <summary>
        /// 装备ID
        /// </summary>
        public int ItemID;
        /// <summary>
        /// 剩余次数
        /// </summary>
        public int Times;
        /// <summary>
        /// 奖励道具组
        /// </summary>
        public string Awards;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int IsBroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ItemID = bytes.ReadInt();
            Times = bytes.ReadInt();
            Awards = bytes.ReadUTF();
            IsBroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ItemID);
            bytes.WriteInt(Times);
            bytes.WriteUTF(Awards);
            bytes.WriteInt(IsBroadCast);
        }
    }

    public class EquipFirstDropTemplateMode : TplMode
    {
        private IList<EquipFirstDropTemplate> mList = null;

        public EquipFirstDropTemplateMode(int step) : base("EquipFirstDropTemplate", typeof(EquipFirstDropTemplate), step) { }

        public EquipFirstDropTemplate this[int id]
        {
            get { return Find<EquipFirstDropTemplate>(id); }
        }

        public EquipFirstDropTemplate Find(int id)
        {
            return Find<EquipFirstDropTemplate>(id);
        }

        public IList<EquipFirstDropTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<EquipFirstDropTemplate>();
            return mList;
        }
    }

public class AssembleTreasureTemplate : Tpl
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public int ActivityType;
        /// <summary>
        /// 道具id
        /// </summary>
        public int ItemID;
        /// <summary>
        /// 道具数量
        /// </summary>
        public int ItemNum;
        /// <summary>
        /// 是否宝藏记录（0不记录，1记录）
        /// </summary>
        public int Broadcast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ActivityType = bytes.ReadInt();
            ItemID = bytes.ReadInt();
            ItemNum = bytes.ReadInt();
            Broadcast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ActivityType);
            bytes.WriteInt(ItemID);
            bytes.WriteInt(ItemNum);
            bytes.WriteInt(Broadcast);
        }
    }

    public class AssembleTreasureTemplateMode : TplMode
    {
        private IList<AssembleTreasureTemplate> mList = null;

        public AssembleTreasureTemplateMode(int step) : base("AssembleTreasureTemplate", typeof(AssembleTreasureTemplate), step) { }

        public AssembleTreasureTemplate this[int id]
        {
            get { return Find<AssembleTreasureTemplate>(id); }
        }

        public AssembleTreasureTemplate Find(int id)
        {
            return Find<AssembleTreasureTemplate>(id);
        }

        public IList<AssembleTreasureTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleTreasureTemplate>();
            return mList;
        }
    }

public class AssembleRechargeTemplate : Tpl
    {
        /// <summary>
        /// 充值金额
        /// </summary>
        public int PayNum;
        /// <summary>
        /// 充值天数
        /// </summary>
        public int PayDay;
        /// <summary>
        /// 跨天是否清空
        /// </summary>
        public int IsChangeDay;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            PayNum = bytes.ReadInt();
            PayDay = bytes.ReadInt();
            IsChangeDay = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(PayNum);
            bytes.WriteInt(PayDay);
            bytes.WriteInt(IsChangeDay);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
        }
    }

    public class AssembleRechargeTemplateMode : TplMode
    {
        private IList<AssembleRechargeTemplate> mList = null;

        public AssembleRechargeTemplateMode(int step) : base("AssembleRechargeTemplate", typeof(AssembleRechargeTemplate), step) { }

        public AssembleRechargeTemplate this[int id]
        {
            get { return Find<AssembleRechargeTemplate>(id); }
        }

        public AssembleRechargeTemplate Find(int id)
        {
            return Find<AssembleRechargeTemplate>(id);
        }

        public IList<AssembleRechargeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleRechargeTemplate>();
            return mList;
        }
    }

public class AssembleMakeWineTemplate : Tpl
    {
        /// <summary>
        /// 需要的Vip等级
        /// </summary>
        public int NeedVipLv;
        /// <summary>
        /// 激活需要的元宝数
        /// </summary>
        public int ActiveMoney;
        /// <summary>
        /// 第几次领奖
        /// </summary>
        public int EndCount;
        /// <summary>
        /// 间隔时间(秒)
        /// </summary>
        public int Interval;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedVipLv = bytes.ReadInt();
            ActiveMoney = bytes.ReadInt();
            EndCount = bytes.ReadInt();
            Interval = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(NeedVipLv);
            bytes.WriteInt(ActiveMoney);
            bytes.WriteInt(EndCount);
            bytes.WriteInt(Interval);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssembleMakeWineTemplateMode : TplMode
    {
        private IList<AssembleMakeWineTemplate> mList = null;

        public AssembleMakeWineTemplateMode(int step) : base("AssembleMakeWineTemplate", typeof(AssembleMakeWineTemplate), step) { }

        public AssembleMakeWineTemplate this[int id]
        {
            get { return Find<AssembleMakeWineTemplate>(id); }
        }

        public AssembleMakeWineTemplate Find(int id)
        {
            return Find<AssembleMakeWineTemplate>(id);
        }

        public IList<AssembleMakeWineTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleMakeWineTemplate>();
            return mList;
        }
    }

public class CostMoneyTemplate : Tpl
    {
        /// <summary>
        /// 关联活动ID
        /// </summary>
        public int ActivityID;
        /// <summary>
        /// 消耗需求
        /// </summary>
        public int Number;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ActivityID = bytes.ReadInt();
            Number = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ActivityID);
            bytes.WriteInt(Number);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(BroadCast);
        }
    }

    public class CostMoneyTemplateMode : TplMode
    {
        private IList<CostMoneyTemplate> mList = null;

        public CostMoneyTemplateMode(int step) : base("CostMoneyTemplate", typeof(CostMoneyTemplate), step) { }

        public CostMoneyTemplate this[int id]
        {
            get { return Find<CostMoneyTemplate>(id); }
        }

        public CostMoneyTemplate Find(int id)
        {
            return Find<CostMoneyTemplate>(id);
        }

        public IList<CostMoneyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CostMoneyTemplate>();
            return mList;
        }
    }

public class RechargeMoneyTemplate : Tpl
    {
        /// <summary>
        /// 关联活动ID
        /// </summary>
        public int ActivityID;
        /// <summary>
        /// 消耗需求
        /// </summary>
        public int Number;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战士奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战士奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法师奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法师奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道士奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道士奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ActivityID = bytes.ReadInt();
            Number = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ActivityID);
            bytes.WriteInt(Number);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(IsBind);
            bytes.WriteInt(BroadCast);
        }
    }

    public class RechargeMoneyTemplateMode : TplMode
    {
        private IList<RechargeMoneyTemplate> mList = null;

        public RechargeMoneyTemplateMode(int step) : base("RechargeMoneyTemplate", typeof(RechargeMoneyTemplate), step) { }

        public RechargeMoneyTemplate this[int id]
        {
            get { return Find<RechargeMoneyTemplate>(id); }
        }

        public RechargeMoneyTemplate Find(int id)
        {
            return Find<RechargeMoneyTemplate>(id);
        }

        public IList<RechargeMoneyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RechargeMoneyTemplate>();
            return mList;
        }
    }

public class AssemblInvestTemplate : Tpl
    {
        /// <summary>
        /// 关联活动
        /// </summary>
        public int ActivityID;
        /// <summary>
        /// 天数
        /// </summary>
        public int Days;
        /// <summary>
        /// 奖励列表
        /// </summary>
        public string AwardsList;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ActivityID = bytes.ReadInt();
            Days = bytes.ReadInt();
            AwardsList = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ActivityID);
            bytes.WriteInt(Days);
            bytes.WriteUTF(AwardsList);
        }
    }

    public class AssemblInvestTemplateMode : TplMode
    {
        private IList<AssemblInvestTemplate> mList = null;

        public AssemblInvestTemplateMode(int step) : base("AssemblInvestTemplate", typeof(AssemblInvestTemplate), step) { }

        public AssemblInvestTemplate this[int id]
        {
            get { return Find<AssemblInvestTemplate>(id); }
        }

        public AssemblInvestTemplate Find(int id)
        {
            return Find<AssemblInvestTemplate>(id);
        }

        public IList<AssemblInvestTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblInvestTemplate>();
            return mList;
        }
    }

public class RebateGiftActivityTemplate : Tpl
    {
        /// <summary>
        /// 每次购买礼包需要充值额度（元）
        /// </summary>
        public int Gear;
        /// <summary>
        /// 购买礼包消耗货币类型
        /// </summary>
        public int CostType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int CostMoney;
        /// <summary>
        /// 单次活动期间购买次数上限
        /// </summary>
        public int Buytime;
        /// <summary>
        /// 返利奖励物品
        /// </summary>
        public string BackAwards;
        /// <summary>
        /// 礼包内容物品
        /// </summary>
        public string Awards;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Gear = bytes.ReadInt();
            CostType = bytes.ReadInt();
            CostMoney = bytes.ReadInt();
            Buytime = bytes.ReadInt();
            BackAwards = bytes.ReadUTF();
            Awards = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Gear);
            bytes.WriteInt(CostType);
            bytes.WriteInt(CostMoney);
            bytes.WriteInt(Buytime);
            bytes.WriteUTF(BackAwards);
            bytes.WriteUTF(Awards);
        }
    }

    public class RebateGiftActivityTemplateMode : TplMode
    {
        private IList<RebateGiftActivityTemplate> mList = null;

        public RebateGiftActivityTemplateMode(int step) : base("RebateGiftActivityTemplate", typeof(RebateGiftActivityTemplate), step) { }

        public RebateGiftActivityTemplate this[int id]
        {
            get { return Find<RebateGiftActivityTemplate>(id); }
        }

        public RebateGiftActivityTemplate Find(int id)
        {
            return Find<RebateGiftActivityTemplate>(id);
        }

        public IList<RebateGiftActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RebateGiftActivityTemplate>();
            return mList;
        }
    }

public class AssembleExchangeTemplate : Tpl
    {
        /// <summary>
        /// 需要物品
        /// </summary>
        public string NeedItem;
        /// <summary>
        /// 需要的元宝数
        /// </summary>
        public int NeedMoney;
        /// <summary>
        /// 跨天是否清空
        /// </summary>
        public int IsChangeDay;
        /// <summary>
        /// 兑换次数（0不限）
        /// </summary>
        public int Times;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 是否绑定
        /// </summary>
        public int IsBind;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            NeedItem = bytes.ReadUTF();
            NeedMoney = bytes.ReadInt();
            IsChangeDay = bytes.ReadInt();
            Times = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            IsBind = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(NeedItem);
            bytes.WriteInt(NeedMoney);
            bytes.WriteInt(IsChangeDay);
            bytes.WriteInt(Times);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(IsBind);
        }
    }

    public class AssembleExchangeTemplateMode : TplMode
    {
        private IList<AssembleExchangeTemplate> mList = null;

        public AssembleExchangeTemplateMode(int step) : base("AssembleExchangeTemplate", typeof(AssembleExchangeTemplate), step) { }

        public AssembleExchangeTemplate this[int id]
        {
            get { return Find<AssembleExchangeTemplate>(id); }
        }

        public AssembleExchangeTemplate Find(int id)
        {
            return Find<AssembleExchangeTemplate>(id);
        }

        public IList<AssembleExchangeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleExchangeTemplate>();
            return mList;
        }
    }

public class AssembleActivityTemplate : Tpl
    {
        /// <summary>
        /// 活动类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 活动名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 是否周期活动
        /// </summary>
        public int IsCycle;
        /// <summary>
        /// 是否在活动列表(0,在列表，1不在列表)
        /// </summary>
        public int IsActivity;
        /// <summary>
        /// 合服后是否清空
        /// </summary>
        public int IsClearOfMerger;
        /// <summary>
        /// 按钮名字
        /// </summary>
        public string ButtonNameSkin;
        /// <summary>
        /// 真名
        /// </summary>
        public string RealName;
        /// <summary>
        /// 后台是否显示
        /// </summary>
        public int IsShow;
        /// <summary>
        /// 开始时间(0表示和总活动一起开始)
        /// </summary>
        public int StartDay;
        /// <summary>
        /// 持续时间
        /// </summary>
        public int DelayDay;
        /// <summary>
        /// 日志数量
        /// </summary>
        public int LogCount;
        /// <summary>
        /// 活动信息3
        /// </summary>
        public string info3;
        /// <summary>
        /// UI布局
        /// </summary>
        public string UIView;
        /// <summary>
        /// 描述
        /// </summary>
        public string Des;
        /// <summary>
        /// 活动信息
        /// </summary>
        public string Info;
        /// <summary>
        /// 活动信息2
        /// </summary>
        public string Info2;
        /// <summary>
        /// UI界面路径
        /// </summary>
        public string UIInfo;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Name = bytes.ReadUTF();
            IsCycle = bytes.ReadInt();
            IsActivity = bytes.ReadInt();
            IsClearOfMerger = bytes.ReadInt();
            ButtonNameSkin = bytes.ReadUTF();
            RealName = bytes.ReadUTF();
            IsShow = bytes.ReadInt();
            StartDay = bytes.ReadInt();
            DelayDay = bytes.ReadInt();
            LogCount = bytes.ReadInt();
            info3 = bytes.ReadUTF();
            UIView = bytes.ReadUTF();
            Des = bytes.ReadUTF();
            Info = bytes.ReadUTF();
            Info2 = bytes.ReadUTF();
            UIInfo = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteUTF(Name);
            bytes.WriteInt(IsCycle);
            bytes.WriteInt(IsActivity);
            bytes.WriteInt(IsClearOfMerger);
            bytes.WriteUTF(ButtonNameSkin);
            bytes.WriteUTF(RealName);
            bytes.WriteInt(IsShow);
            bytes.WriteInt(StartDay);
            bytes.WriteInt(DelayDay);
            bytes.WriteInt(LogCount);
            bytes.WriteUTF(info3);
            bytes.WriteUTF(UIView);
            bytes.WriteUTF(Des);
            bytes.WriteUTF(Info);
            bytes.WriteUTF(Info2);
            bytes.WriteUTF(UIInfo);
        }
    }

    public class AssembleActivityTemplateMode : TplMode
    {
        private IList<AssembleActivityTemplate> mList = null;

        public AssembleActivityTemplateMode(int step) : base("AssembleActivityTemplate", typeof(AssembleActivityTemplate), step) { }

        public AssembleActivityTemplate this[int id]
        {
            get { return Find<AssembleActivityTemplate>(id); }
        }

        public AssembleActivityTemplate Find(int id)
        {
            return Find<AssembleActivityTemplate>(id);
        }

        public IList<AssembleActivityTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssembleActivityTemplate>();
            return mList;
        }
    }

public class AssemblShaiziTemplate : Tpl
    {
        /// <summary>
        /// 骰子组合(填3个骰子点数1-6)
        /// </summary>
        public string Combination;
        /// <summary>
        /// 骰子组合类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 第1天玩家投出几率
        /// </summary>
        public int PlayerChance1;
        /// <summary>
        /// 第2天玩家投出几率
        /// </summary>
        public int PlayerChance2;
        /// <summary>
        /// 第3天玩家投出几率
        /// </summary>
        public int PlayerChance3;
        /// <summary>
        /// 第1天系统投出几率
        /// </summary>
        public int SystemsChance1;
        /// <summary>
        /// 第2天系统投出几率
        /// </summary>
        public int SystemsChance2;
        /// <summary>
        /// 第3天系统投出几率
        /// </summary>
        public int SystemsChance3;
        /// <summary>
        /// 系统公告
        /// </summary>
        public int Announcement;
        /// <summary>
        /// 奖励元宝
        /// </summary>
        public int GoldAward;
        /// <summary>
        /// 邮件 idf
        /// </summary>
        public int MailId;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Combination = bytes.ReadUTF();
            Type = bytes.ReadInt();
            PlayerChance1 = bytes.ReadInt();
            PlayerChance2 = bytes.ReadInt();
            PlayerChance3 = bytes.ReadInt();
            SystemsChance1 = bytes.ReadInt();
            SystemsChance2 = bytes.ReadInt();
            SystemsChance3 = bytes.ReadInt();
            Announcement = bytes.ReadInt();
            GoldAward = bytes.ReadInt();
            MailId = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Combination);
            bytes.WriteInt(Type);
            bytes.WriteInt(PlayerChance1);
            bytes.WriteInt(PlayerChance2);
            bytes.WriteInt(PlayerChance3);
            bytes.WriteInt(SystemsChance1);
            bytes.WriteInt(SystemsChance2);
            bytes.WriteInt(SystemsChance3);
            bytes.WriteInt(Announcement);
            bytes.WriteInt(GoldAward);
            bytes.WriteInt(MailId);
        }
    }

    public class AssemblShaiziTemplateMode : TplMode
    {
        private IList<AssemblShaiziTemplate> mList = null;

        public AssemblShaiziTemplateMode(int step) : base("AssemblShaiziTemplate", typeof(AssemblShaiziTemplate), step) { }

        public AssemblShaiziTemplate this[int id]
        {
            get { return Find<AssemblShaiziTemplate>(id); }
        }

        public AssemblShaiziTemplate Find(int id)
        {
            return Find<AssemblShaiziTemplate>(id);
        }

        public IList<AssemblShaiziTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblShaiziTemplate>();
            return mList;
        }
    }

public class AssemblMagicAthleticsTemplate : Tpl
    {
        /// <summary>
        /// 捐献数量
        /// </summary>
        public int Numb;
        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;
        /// <summary>
        /// 全服奖励次数(0无限)
        /// </summary>
        public int AwardCount;
        /// <summary>
        /// 男战奖励
        /// </summary>
        public string Bonus1;
        /// <summary>
        /// 女战奖励
        /// </summary>
        public string Bonus2;
        /// <summary>
        /// 男法奖励
        /// </summary>
        public string Bonus3;
        /// <summary>
        /// 女法奖励
        /// </summary>
        public string Bonus4;
        /// <summary>
        /// 男道奖励
        /// </summary>
        public string Bonus5;
        /// <summary>
        /// 女道奖励
        /// </summary>
        public string Bonus6;
        /// <summary>
        /// 公告ID
        /// </summary>
        public int BroadCast;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Numb = bytes.ReadInt();
            Icon = bytes.ReadInt();
            AwardCount = bytes.ReadInt();
            Bonus1 = bytes.ReadUTF();
            Bonus2 = bytes.ReadUTF();
            Bonus3 = bytes.ReadUTF();
            Bonus4 = bytes.ReadUTF();
            Bonus5 = bytes.ReadUTF();
            Bonus6 = bytes.ReadUTF();
            BroadCast = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Numb);
            bytes.WriteInt(Icon);
            bytes.WriteInt(AwardCount);
            bytes.WriteUTF(Bonus1);
            bytes.WriteUTF(Bonus2);
            bytes.WriteUTF(Bonus3);
            bytes.WriteUTF(Bonus4);
            bytes.WriteUTF(Bonus5);
            bytes.WriteUTF(Bonus6);
            bytes.WriteInt(BroadCast);
        }
    }

    public class AssemblMagicAthleticsTemplateMode : TplMode
    {
        private IList<AssemblMagicAthleticsTemplate> mList = null;

        public AssemblMagicAthleticsTemplateMode(int step) : base("AssemblMagicAthleticsTemplate", typeof(AssemblMagicAthleticsTemplate), step) { }

        public AssemblMagicAthleticsTemplate this[int id]
        {
            get { return Find<AssemblMagicAthleticsTemplate>(id); }
        }

        public AssemblMagicAthleticsTemplate Find(int id)
        {
            return Find<AssemblMagicAthleticsTemplate>(id);
        }

        public IList<AssemblMagicAthleticsTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AssemblMagicAthleticsTemplate>();
            return mList;
        }
    }

public class AutoUseTemplate : Tpl
    {
        /// <summary>
        /// 物品ID
        /// </summary>
        public int TabType;
        /// <summary>
        /// 分类名称
        /// </summary>
        public string TabTypeName;
        /// <summary>
        /// 道具ID
        /// </summary>
        public int ItemID;
        /// <summary>
        /// 是否默认勾选
        /// </summary>
        public int DefaultSelect;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TabType = bytes.ReadInt();
            TabTypeName = bytes.ReadUTF();
            ItemID = bytes.ReadInt();
            DefaultSelect = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(TabType);
            bytes.WriteUTF(TabTypeName);
            bytes.WriteInt(ItemID);
            bytes.WriteInt(DefaultSelect);
        }
    }

    public class AutoUseTemplateMode : TplMode
    {
        private IList<AutoUseTemplate> mList = null;

        public AutoUseTemplateMode(int step) : base("AutoUseTemplate", typeof(AutoUseTemplate), step) { }

        public AutoUseTemplate this[int id]
        {
            get { return Find<AutoUseTemplate>(id); }
        }

        public AutoUseTemplate Find(int id)
        {
            return Find<AutoUseTemplate>(id);
        }

        public IList<AutoUseTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<AutoUseTemplate>();
            return mList;
        }
    }

public class SuperVipTemplate : Tpl
    {
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 名字
        /// </summary>
        public string Name;
        /// <summary>
        /// 持续天数
        /// </summary>
        public int Days;
        /// <summary>
        /// 价格
        /// </summary>
        public int Cost;
        /// <summary>
        /// 续费价格
        /// </summary>
        public int ContinuCost;
        /// <summary>
        /// BuffID
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 首次购买奖励
        /// </summary>
        public string FirstBuyAward;
        /// <summary>
        /// 即将到期邮件ID
        /// </summary>
        public int DueMailID;
        /// <summary>
        /// 首次购买奖励邮件ID
        /// </summary>
        public int MailID;
        /// <summary>
        /// 到期邮件ID
        /// </summary>
        public int ExoireMailID;
        /// <summary>
        /// 每日奖励
        /// </summary>
        public string Award;
        /// <summary>
        /// 每日奖励邮件ID
        /// </summary>
        public int DailyMailID;
        /// <summary>
        /// 石墓烧猪次数
        /// </summary>
        public int PingTimes;
        /// <summary>
        /// 每日领取声望
        /// </summary>
        public int Prestige;
        /// <summary>
        /// 特惠礼包折扣
        /// </summary>
        public int PackageDiscount;
        /// <summary>
        /// 自动签到
        /// </summary>
        public int IsSign;
        /// <summary>
        /// 专属BOSS
        /// </summary>
        public int BossID;
        /// <summary>
        /// 专属BOSS地图
        /// </summary>
        public int MapID;
        /// <summary>
        /// 专属BOSS挑战次数+N
        /// </summary>
        public int BossChallenge;
        /// <summary>
        /// 专属BOSS是否可以扫荡
        /// </summary>
        public int BossSweep;
        /// <summary>
        /// 学习技能折扣
        /// </summary>
        public int SkillDiscount;
        /// <summary>
        /// 随身仓库
        /// </summary>
        public int Warehouse;
        /// <summary>
        /// 副本扫荡
        /// </summary>
        public int Sweep;
        /// <summary>
        /// 快捷回收
        /// </summary>
        public int Recovery;
        /// <summary>
        /// 自动降妖除魔
        /// </summary>
        public int DayTask;
        /// <summary>
        /// 降妖除魔次数
        /// </summary>
        public int DayTaskTimes;
        /// <summary>
        /// 猎魔任务奖励增加
        /// </summary>
        public int DayTaskUp;
        /// <summary>
        /// 全民诛魔购买增加
        /// </summary>
        public int DayCreamTaskTimes;
        /// <summary>
        /// 自动买药
        /// </summary>
        public int BuyMedicine;
        /// <summary>
        /// 高级挂机
        /// </summary>
        public int Gaogua;
        /// <summary>
        /// 自动挖尸体
        /// </summary>
        public int Mining;
        /// <summary>
        /// 激活自动拾取（填BUFFID）
        /// </summary>
        public int PickUp;
        /// <summary>
        /// 回收元宝增加百分比
        /// </summary>
        public int Recovergain;
        /// <summary>
        /// 每日声望任务+N
        /// </summary>
        public int Popularity;
        /// <summary>
        /// 每日副本倍率领取
        /// </summary>
        public int DailyCopyAward;
        /// <summary>
        /// 每日押镖次数+N
        /// </summary>
        public int DailyEscort;
        /// <summary>
        /// 押镖经验元宝奖励加成
        /// </summary>
        public int DailyEscortUp;
        /// <summary>
        /// 每日副本一键完成特权
        /// </summary>
        public int CopyComplete;
        /// <summary>
        /// 日常副本挑战次数+N
        /// </summary>
        public int DailyCopyChallenge;
        /// <summary>
        /// 自动全民诛魔
        /// </summary>
        public int DayCreamTask;
        /// <summary>
        /// 挖矿购买鹤嘴锄次数
        /// </summary>
        public int HoeBuyTimes;
        /// <summary>
        /// 装备掉落保护几率
        /// </summary>
        public int ProtectChance;
        /// <summary>
        /// 描述
        /// </summary>
        public string Describe;
        /// <summary>
        /// 激活公告ID
        /// </summary>
        public string NoticeID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Type = bytes.ReadInt();
            Name = bytes.ReadUTF();
            Days = bytes.ReadInt();
            Cost = bytes.ReadInt();
            ContinuCost = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            FirstBuyAward = bytes.ReadUTF();
            DueMailID = bytes.ReadInt();
            MailID = bytes.ReadInt();
            ExoireMailID = bytes.ReadInt();
            Award = bytes.ReadUTF();
            DailyMailID = bytes.ReadInt();
            PingTimes = bytes.ReadInt();
            Prestige = bytes.ReadInt();
            PackageDiscount = bytes.ReadInt();
            IsSign = bytes.ReadInt();
            BossID = bytes.ReadInt();
            MapID = bytes.ReadInt();
            BossChallenge = bytes.ReadInt();
            BossSweep = bytes.ReadInt();
            SkillDiscount = bytes.ReadInt();
            Warehouse = bytes.ReadInt();
            Sweep = bytes.ReadInt();
            Recovery = bytes.ReadInt();
            DayTask = bytes.ReadInt();
            DayTaskTimes = bytes.ReadInt();
            DayTaskUp = bytes.ReadInt();
            DayCreamTaskTimes = bytes.ReadInt();
            BuyMedicine = bytes.ReadInt();
            Gaogua = bytes.ReadInt();
            Mining = bytes.ReadInt();
            PickUp = bytes.ReadInt();
            Recovergain = bytes.ReadInt();
            Popularity = bytes.ReadInt();
            DailyCopyAward = bytes.ReadInt();
            DailyEscort = bytes.ReadInt();
            DailyEscortUp = bytes.ReadInt();
            CopyComplete = bytes.ReadInt();
            DailyCopyChallenge = bytes.ReadInt();
            DayCreamTask = bytes.ReadInt();
            HoeBuyTimes = bytes.ReadInt();
            ProtectChance = bytes.ReadInt();
            Describe = bytes.ReadUTF();
            NoticeID = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Type);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Days);
            bytes.WriteInt(Cost);
            bytes.WriteInt(ContinuCost);
            bytes.WriteInt(BuffID);
            bytes.WriteUTF(FirstBuyAward);
            bytes.WriteInt(DueMailID);
            bytes.WriteInt(MailID);
            bytes.WriteInt(ExoireMailID);
            bytes.WriteUTF(Award);
            bytes.WriteInt(DailyMailID);
            bytes.WriteInt(PingTimes);
            bytes.WriteInt(Prestige);
            bytes.WriteInt(PackageDiscount);
            bytes.WriteInt(IsSign);
            bytes.WriteInt(BossID);
            bytes.WriteInt(MapID);
            bytes.WriteInt(BossChallenge);
            bytes.WriteInt(BossSweep);
            bytes.WriteInt(SkillDiscount);
            bytes.WriteInt(Warehouse);
            bytes.WriteInt(Sweep);
            bytes.WriteInt(Recovery);
            bytes.WriteInt(DayTask);
            bytes.WriteInt(DayTaskTimes);
            bytes.WriteInt(DayTaskUp);
            bytes.WriteInt(DayCreamTaskTimes);
            bytes.WriteInt(BuyMedicine);
            bytes.WriteInt(Gaogua);
            bytes.WriteInt(Mining);
            bytes.WriteInt(PickUp);
            bytes.WriteInt(Recovergain);
            bytes.WriteInt(Popularity);
            bytes.WriteInt(DailyCopyAward);
            bytes.WriteInt(DailyEscort);
            bytes.WriteInt(DailyEscortUp);
            bytes.WriteInt(CopyComplete);
            bytes.WriteInt(DailyCopyChallenge);
            bytes.WriteInt(DayCreamTask);
            bytes.WriteInt(HoeBuyTimes);
            bytes.WriteInt(ProtectChance);
            bytes.WriteUTF(Describe);
            bytes.WriteUTF(NoticeID);
        }
    }

    public class SuperVipTemplateMode : TplMode
    {
        private IList<SuperVipTemplate> mList = null;

        public SuperVipTemplateMode(int step) : base("SuperVipTemplate", typeof(SuperVipTemplate), step) { }

        public SuperVipTemplate this[int id]
        {
            get { return Find<SuperVipTemplate>(id); }
        }

        public SuperVipTemplate Find(int id)
        {
            return Find<SuperVipTemplate>(id);
        }

        public IList<SuperVipTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SuperVipTemplate>();
            return mList;
        }
    }

public class SoulEaterTemplate : Tpl
    {
        /// <summary>
        /// 装备类型
        /// </summary>
        public int EquipType;
        /// <summary>
        /// 等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 需要装备等级
        /// </summary>
        public int NeedEquipLevel;
        /// <summary>
        /// 需要经验值
        /// </summary>
        public int NeedExp;
        /// <summary>
        /// 下一级需要经验值
        /// </summary>
        public int NextNeedExp;
        /// <summary>
        /// 最小物理攻击
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 最大物理攻击
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 最小魔法攻击
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 最大魔法攻击
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 最小道术攻击
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 最大道术攻击
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 最小物理防御
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 最大物理防御
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 最小魔法防御
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 最大魔法防御
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 颜色
        /// </summary>
        public int Color;
        /// <summary>
        /// 单价系数
        /// </summary>
        public int SoulEaterCost1;
        /// <summary>
        /// 常数
        /// </summary>
        public int SoulEaterCost2;
        /// <summary>
        /// 转移消耗的货币类型
        /// </summary>
        public int TransferCostType;
        /// <summary>
        /// 转移消耗的数量
        /// </summary>
        public int TransferCostNum;
        /// <summary>
        /// 转移消耗的道具
        /// </summary>
        public string TransferCostItem;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EquipType = bytes.ReadInt();
            Level = bytes.ReadInt();
            NeedEquipLevel = bytes.ReadInt();
            NeedExp = bytes.ReadInt();
            NextNeedExp = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Color = bytes.ReadInt();
            SoulEaterCost1 = bytes.ReadInt();
            SoulEaterCost2 = bytes.ReadInt();
            TransferCostType = bytes.ReadInt();
            TransferCostNum = bytes.ReadInt();
            TransferCostItem = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EquipType);
            bytes.WriteInt(Level);
            bytes.WriteInt(NeedEquipLevel);
            bytes.WriteInt(NeedExp);
            bytes.WriteInt(NextNeedExp);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Color);
            bytes.WriteInt(SoulEaterCost1);
            bytes.WriteInt(SoulEaterCost2);
            bytes.WriteInt(TransferCostType);
            bytes.WriteInt(TransferCostNum);
            bytes.WriteUTF(TransferCostItem);
        }
    }

    public class SoulEaterTemplateMode : TplMode
    {
        private IList<SoulEaterTemplate> mList = null;

        public SoulEaterTemplateMode(int step) : base("SoulEaterTemplate", typeof(SoulEaterTemplate), step) { }

        public SoulEaterTemplate this[int id]
        {
            get { return Find<SoulEaterTemplate>(id); }
        }

        public SoulEaterTemplate Find(int id)
        {
            return Find<SoulEaterTemplate>(id);
        }

        public IList<SoulEaterTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SoulEaterTemplate>();
            return mList;
        }
    }

public class RecoveryTemplate : Tpl
    {
        /// <summary>
        /// 回收类型类别
        /// </summary>
        public int ItemType;
        /// <summary>
        /// 类别名称
        /// </summary>
        public string TypeName;
        /// <summary>
        /// 是否默认勾选
        /// </summary>
        public int IsSelect;
        /// <summary>
        /// 是否为极品·系列
        /// </summary>
        public int IsBest;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            ItemType = bytes.ReadInt();
            TypeName = bytes.ReadUTF();
            IsSelect = bytes.ReadInt();
            IsBest = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(ItemType);
            bytes.WriteUTF(TypeName);
            bytes.WriteInt(IsSelect);
            bytes.WriteInt(IsBest);
        }
    }

    public class RecoveryTemplateMode : TplMode
    {
        private IList<RecoveryTemplate> mList = null;

        public RecoveryTemplateMode(int step) : base("RecoveryTemplate", typeof(RecoveryTemplate), step) { }

        public RecoveryTemplate this[int id]
        {
            get { return Find<RecoveryTemplate>(id); }
        }

        public RecoveryTemplate Find(int id)
        {
            return Find<RecoveryTemplate>(id);
        }

        public IList<RecoveryTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<RecoveryTemplate>();
            return mList;
        }
    }

public class MeltTypeTemplate : Tpl
    {
        /// <summary>
        /// 熔炼类别
        /// </summary>
        public int MeltType;
        /// <summary>
        /// 类别名称
        /// </summary>
        public string TypeName;
        /// <summary>
        /// 是否默认勾选
        /// </summary>
        public int IsSelect;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            MeltType = bytes.ReadInt();
            TypeName = bytes.ReadUTF();
            IsSelect = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(MeltType);
            bytes.WriteUTF(TypeName);
            bytes.WriteInt(IsSelect);
        }
    }

    public class MeltTypeTemplateMode : TplMode
    {
        private IList<MeltTypeTemplate> mList = null;

        public MeltTypeTemplateMode(int step) : base("MeltTypeTemplate", typeof(MeltTypeTemplate), step) { }

        public MeltTypeTemplate this[int id]
        {
            get { return Find<MeltTypeTemplate>(id); }
        }

        public MeltTypeTemplate Find(int id)
        {
            return Find<MeltTypeTemplate>(id);
        }

        public IList<MeltTypeTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<MeltTypeTemplate>();
            return mList;
        }
    }

public class EquipTemplate : Tpl
    {
        /// <summary>
        /// 真名
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 内功
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻min
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻max
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 魔攻min
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 魔攻max
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻min
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻max
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 命中
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 敏捷
        /// </summary>
        public int Agile;
        /// <summary>
        /// 魔法躲避
        /// </summary>
        public int MagicDodge;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 暴伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 致命概率
        /// </summary>
        public int AccurateTriggerRate;
        /// <summary>
        /// 致命伤害
        /// </summary>
        public int AccurateHurtPct;
        /// <summary>
        /// 致命增伤
        /// </summary>
        public int AddAccurateHurtRate;
        /// <summary>
        /// 致命减伤
        /// </summary>
        public int ReduceAccurateHurtRate;
        /// <summary>
        /// 对怪致命概率
        /// </summary>
        public int DeadlyToMonProb;
        /// <summary>
        /// 对怪致命倍率
        /// </summary>
        public int DeadlyToMonMultiple;
        /// <summary>
        /// 忽视防御
        /// </summary>
        public int IgnoreDefendPercent;
        /// <summary>
        /// 诅咒
        /// </summary>
        public int Curse;
        /// <summary>
        /// 攻速
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 基础生命万分比
        /// </summary>
        public int BaseHpCent;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 吸血
        /// </summary>
        public int Vampire;
        /// <summary>
        /// 吸血抵抗
        /// </summary>
        public int DisVampire;
        /// <summary>
        /// 抗性
        /// </summary>
        public int Resist;
        /// <summary>
        /// 控制状态抵抗
        /// </summary>
        public int DisControl;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 真实伤害
        /// </summary>
        public int RealDamage;
        /// <summary>
        /// 真实伤害抵抗
        /// </summary>
        public int RealDiscount;
        /// <summary>
        /// 伤害加成
        /// </summary>
        public int AddAllHurt;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK免伤
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对怪减免
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// 对战士增伤
        /// </summary>
        public int DamageToSoldier;
        /// <summary>
        /// 对战士减伤
        /// </summary>
        public int ResistSoldier;
        /// <summary>
        /// 对法师增伤
        /// </summary>
        public int DamageToMage;
        /// <summary>
        /// 对法师减伤
        /// </summary>
        public int ResistMage;
        /// <summary>
        /// 对道士增伤
        /// </summary>
        public int DamageToTaoist;
        /// <summary>
        /// 对道士减免
        /// </summary>
        public int ResistTaoist;
        /// <summary>
        /// 攻击%
        /// </summary>
        public int MinPhysicAtkPencent;
        /// <summary>
        /// 攻击%
        /// </summary>
        public int MaxPhysicAtkPencent;
        /// <summary>
        /// 攻击%
        /// </summary>
        public int MinMagicAtkPencent;
        /// <summary>
        /// 攻击%
        /// </summary>
        public int MaxMagicAtkPencent;
        /// <summary>
        /// 攻击%
        /// </summary>
        public int MinTaoistAtkPencent;
        /// <summary>
        /// 攻击%
        /// </summary>
        public int MaxTaoistAtkPencent;
        /// <summary>
        /// 防御%
        /// </summary>
        public int MinPhysicDefPencent;
        /// <summary>
        /// 防御%
        /// </summary>
        public int MaxPhysicDefPencent;
        /// <summary>
        /// 防御%
        /// </summary>
        public int MinMagicDefPencent;
        /// <summary>
        /// 防御%
        /// </summary>
        public int MaxMagicDefPencent;
        /// <summary>
        /// 攻击%
        /// </summary>
        public int AtkCent;
        /// <summary>
        /// 防御%
        /// </summary>
        public int DefCent;
        /// <summary>
        /// 生命值%
        /// </summary>
        public int HpCent;
        /// <summary>
        /// 内功值%
        /// </summary>
        public int EnergyCent;
        /// <summary>
        /// 生命回复
        /// </summary>
        public int LifeRecove;
        /// <summary>
        /// 魔法回复
        /// </summary>
        public int MagicRecove;
        /// <summary>
        /// 基础装备攻击加成（万分比）
        /// </summary>
        public int EquipBaseAtkPencent;
        /// <summary>
        /// 诱惑等级
        /// </summary>
        public int ConfuseLv;
        /// <summary>
        /// 极品掉落提升（万分比）
        /// </summary>
        public int BossDiaoluo;
        /// <summary>
        /// 反伤抵抗
        /// </summary>
        public int DmgCounterReduce;
        /// <summary>
        /// 生命恢复(秒)
        /// </summary>
        public int RestoreHP;
        /// <summary>
        /// 魔法恢复(秒)
        /// </summary>
        public int RestoreMP;
        /// <summary>
        /// 药品回复效率（万分比）
        /// </summary>
        public int DrugsEffect;
        /// <summary>
        /// 移速
        /// </summary>
        public int MoveSpeed;
        /// <summary>
        /// 攻击伤害加成（万分比）
        /// </summary>
        public int AddBaseHurt;
        /// <summary>
        /// 攻击伤害减免（万分比）
        /// </summary>
        public int ReduceBaseHurt;
        /// <summary>
        /// 技能伤害加成（万分比）
        /// </summary>
        public int AddSkillHurt;
        /// <summary>
        /// 技能伤害减免（万分比）
        /// </summary>
        public int ReduceSkillHurt;
        /// <summary>
        /// 复活封印概率
        /// </summary>
        public int DisRebirth;
        /// <summary>
        /// 冰元素伤害抵抗
        /// </summary>
        public int IceHurtReduce;
        /// <summary>
        /// 火元素伤害抵抗
        /// </summary>
        public int FireHurtReduce;
        /// <summary>
        /// 雷元素伤害抵抗
        /// </summary>
        public int ThunderHurtReduce;
        /// <summary>
        /// 特殊效果id1
        /// </summary>
        public int BuffID;
        /// <summary>
        /// 特殊效果id2
        /// </summary>
        public int BuffID2;
        /// <summary>
        /// 特殊效果替换条件
        /// </summary>
        public int ConditionType;
        /// <summary>
        /// 特殊效果替换条件值
        /// </summary>
        public int ConditionNum;
        /// <summary>
        /// 满足条件后的新Buff1
        /// </summary>
        public int ConBuffID1;
        /// <summary>
        /// 满足条件后的新Buff2
        /// </summary>
        public int ConBuffID2;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            GoodsName = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            Agile = bytes.ReadInt();
            MagicDodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            AccurateTriggerRate = bytes.ReadInt();
            AccurateHurtPct = bytes.ReadInt();
            AddAccurateHurtRate = bytes.ReadInt();
            ReduceAccurateHurtRate = bytes.ReadInt();
            DeadlyToMonProb = bytes.ReadInt();
            DeadlyToMonMultiple = bytes.ReadInt();
            IgnoreDefendPercent = bytes.ReadInt();
            Curse = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            BaseHpCent = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            Vampire = bytes.ReadInt();
            DisVampire = bytes.ReadInt();
            Resist = bytes.ReadInt();
            DisControl = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RealDamage = bytes.ReadInt();
            RealDiscount = bytes.ReadInt();
            AddAllHurt = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            DamageToSoldier = bytes.ReadInt();
            ResistSoldier = bytes.ReadInt();
            DamageToMage = bytes.ReadInt();
            ResistMage = bytes.ReadInt();
            DamageToTaoist = bytes.ReadInt();
            ResistTaoist = bytes.ReadInt();
            MinPhysicAtkPencent = bytes.ReadInt();
            MaxPhysicAtkPencent = bytes.ReadInt();
            MinMagicAtkPencent = bytes.ReadInt();
            MaxMagicAtkPencent = bytes.ReadInt();
            MinTaoistAtkPencent = bytes.ReadInt();
            MaxTaoistAtkPencent = bytes.ReadInt();
            MinPhysicDefPencent = bytes.ReadInt();
            MaxPhysicDefPencent = bytes.ReadInt();
            MinMagicDefPencent = bytes.ReadInt();
            MaxMagicDefPencent = bytes.ReadInt();
            AtkCent = bytes.ReadInt();
            DefCent = bytes.ReadInt();
            HpCent = bytes.ReadInt();
            EnergyCent = bytes.ReadInt();
            LifeRecove = bytes.ReadInt();
            MagicRecove = bytes.ReadInt();
            EquipBaseAtkPencent = bytes.ReadInt();
            ConfuseLv = bytes.ReadInt();
            BossDiaoluo = bytes.ReadInt();
            DmgCounterReduce = bytes.ReadInt();
            RestoreHP = bytes.ReadInt();
            RestoreMP = bytes.ReadInt();
            DrugsEffect = bytes.ReadInt();
            MoveSpeed = bytes.ReadInt();
            AddBaseHurt = bytes.ReadInt();
            ReduceBaseHurt = bytes.ReadInt();
            AddSkillHurt = bytes.ReadInt();
            ReduceSkillHurt = bytes.ReadInt();
            DisRebirth = bytes.ReadInt();
            IceHurtReduce = bytes.ReadInt();
            FireHurtReduce = bytes.ReadInt();
            ThunderHurtReduce = bytes.ReadInt();
            BuffID = bytes.ReadInt();
            BuffID2 = bytes.ReadInt();
            ConditionType = bytes.ReadInt();
            ConditionNum = bytes.ReadInt();
            ConBuffID1 = bytes.ReadInt();
            ConBuffID2 = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(Agile);
            bytes.WriteInt(MagicDodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(AccurateTriggerRate);
            bytes.WriteInt(AccurateHurtPct);
            bytes.WriteInt(AddAccurateHurtRate);
            bytes.WriteInt(ReduceAccurateHurtRate);
            bytes.WriteInt(DeadlyToMonProb);
            bytes.WriteInt(DeadlyToMonMultiple);
            bytes.WriteInt(IgnoreDefendPercent);
            bytes.WriteInt(Curse);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(BaseHpCent);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(Vampire);
            bytes.WriteInt(DisVampire);
            bytes.WriteInt(Resist);
            bytes.WriteInt(DisControl);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RealDamage);
            bytes.WriteInt(RealDiscount);
            bytes.WriteInt(AddAllHurt);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(DamageToSoldier);
            bytes.WriteInt(ResistSoldier);
            bytes.WriteInt(DamageToMage);
            bytes.WriteInt(ResistMage);
            bytes.WriteInt(DamageToTaoist);
            bytes.WriteInt(ResistTaoist);
            bytes.WriteInt(MinPhysicAtkPencent);
            bytes.WriteInt(MaxPhysicAtkPencent);
            bytes.WriteInt(MinMagicAtkPencent);
            bytes.WriteInt(MaxMagicAtkPencent);
            bytes.WriteInt(MinTaoistAtkPencent);
            bytes.WriteInt(MaxTaoistAtkPencent);
            bytes.WriteInt(MinPhysicDefPencent);
            bytes.WriteInt(MaxPhysicDefPencent);
            bytes.WriteInt(MinMagicDefPencent);
            bytes.WriteInt(MaxMagicDefPencent);
            bytes.WriteInt(AtkCent);
            bytes.WriteInt(DefCent);
            bytes.WriteInt(HpCent);
            bytes.WriteInt(EnergyCent);
            bytes.WriteInt(LifeRecove);
            bytes.WriteInt(MagicRecove);
            bytes.WriteInt(EquipBaseAtkPencent);
            bytes.WriteInt(ConfuseLv);
            bytes.WriteInt(BossDiaoluo);
            bytes.WriteInt(DmgCounterReduce);
            bytes.WriteInt(RestoreHP);
            bytes.WriteInt(RestoreMP);
            bytes.WriteInt(DrugsEffect);
            bytes.WriteInt(MoveSpeed);
            bytes.WriteInt(AddBaseHurt);
            bytes.WriteInt(ReduceBaseHurt);
            bytes.WriteInt(AddSkillHurt);
            bytes.WriteInt(ReduceSkillHurt);
            bytes.WriteInt(DisRebirth);
            bytes.WriteInt(IceHurtReduce);
            bytes.WriteInt(FireHurtReduce);
            bytes.WriteInt(ThunderHurtReduce);
            bytes.WriteInt(BuffID);
            bytes.WriteInt(BuffID2);
            bytes.WriteInt(ConditionType);
            bytes.WriteInt(ConditionNum);
            bytes.WriteInt(ConBuffID1);
            bytes.WriteInt(ConBuffID2);
        }
    }

    public class EquipTemplateMode : TplMode
    {
        private IList<EquipTemplate> mList = null;

        public EquipTemplateMode(int step) : base("EquipTemplate", typeof(EquipTemplate), step) { }

        public EquipTemplate this[int id]
        {
            get { return Find<EquipTemplate>(id); }
        }

        public EquipTemplate Find(int id)
        {
            return Find<EquipTemplate>(id);
        }

        public IList<EquipTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<EquipTemplate>();
            return mList;
        }
    }

public class EquipOrderRelationTemplate : Tpl
    {
        /// <summary>
        /// 装备组
        /// </summary>
        public int EquipGroup;
        /// <summary>
        /// 阶数
        /// </summary>
        public int Grade;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            EquipGroup = bytes.ReadInt();
            Grade = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(EquipGroup);
            bytes.WriteInt(Grade);
        }
    }

    public class EquipOrderRelationTemplateMode : TplMode
    {
        private IList<EquipOrderRelationTemplate> mList = null;

        public EquipOrderRelationTemplateMode(int step) : base("EquipOrderRelationTemplate", typeof(EquipOrderRelationTemplate), step) { }

        public EquipOrderRelationTemplate this[int id]
        {
            get { return Find<EquipOrderRelationTemplate>(id); }
        }

        public EquipOrderRelationTemplate Find(int id)
        {
            return Find<EquipOrderRelationTemplate>(id);
        }

        public IList<EquipOrderRelationTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<EquipOrderRelationTemplate>();
            return mList;
        }
    }

public class SignatureTemplate : Tpl
    {
        /// <summary>
        /// 策划用（装备名称）
        /// </summary>
        public string Name;
        /// <summary>
        /// 改签名货币类型
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 改签名消耗数量
        /// </summary>
        public int MoneyNumber;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 神盾
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 准确
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 诅咒
        /// </summary>
        public int Curse;
        /// <summary>
        /// 攻速
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 基础生命万分比
        /// </summary>
        public int BaseHpCent;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 吸血
        /// </summary>
        public int Vampire;
        /// <summary>
        /// 抗性
        /// </summary>
        public int Resist;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 真实伤害抵抗
        /// </summary>
        public int RealDiscount;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK免伤
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对怪减免
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// 对战士增伤
        /// </summary>
        public int DamageToSoldier;
        /// <summary>
        /// 对战士减伤
        /// </summary>
        public int ResistSoldier;
        /// <summary>
        /// 对法师增伤
        /// </summary>
        public int DamageToMage;
        /// <summary>
        /// 对法师减伤
        /// </summary>
        public int ResistMage;
        /// <summary>
        /// 对道士增伤
        /// </summary>
        public int DamageToTaoist;
        /// <summary>
        /// 对道士减免
        /// </summary>
        public int ResistTaoist;
        /// <summary>
        /// 生命回复
        /// </summary>
        public int LifeRecove;
        /// <summary>
        /// 魔法回复
        /// </summary>
        public int MagicRecove;
        /// <summary>
        /// 心魔攻击
        /// </summary>
        public int InnerDemonsAtk;
        /// <summary>
        /// 心魔防御
        /// </summary>
        public int InnerDemonsDef;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            MoneyNumber = bytes.ReadInt();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            Curse = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            BaseHpCent = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            Vampire = bytes.ReadInt();
            Resist = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RealDiscount = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            DamageToSoldier = bytes.ReadInt();
            ResistSoldier = bytes.ReadInt();
            DamageToMage = bytes.ReadInt();
            ResistMage = bytes.ReadInt();
            DamageToTaoist = bytes.ReadInt();
            ResistTaoist = bytes.ReadInt();
            LifeRecove = bytes.ReadInt();
            MagicRecove = bytes.ReadInt();
            InnerDemonsAtk = bytes.ReadInt();
            InnerDemonsDef = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumber);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(Curse);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(BaseHpCent);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(Vampire);
            bytes.WriteInt(Resist);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RealDiscount);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(DamageToSoldier);
            bytes.WriteInt(ResistSoldier);
            bytes.WriteInt(DamageToMage);
            bytes.WriteInt(ResistMage);
            bytes.WriteInt(DamageToTaoist);
            bytes.WriteInt(ResistTaoist);
            bytes.WriteInt(LifeRecove);
            bytes.WriteInt(MagicRecove);
            bytes.WriteInt(InnerDemonsAtk);
            bytes.WriteInt(InnerDemonsDef);
        }
    }

    public class SignatureTemplateMode : TplMode
    {
        private IList<SignatureTemplate> mList = null;

        public SignatureTemplateMode(int step) : base("SignatureTemplate", typeof(SignatureTemplate), step) { }

        public SignatureTemplate this[int id]
        {
            get { return Find<SignatureTemplate>(id); }
        }

        public SignatureTemplate Find(int id)
        {
            return Find<SignatureTemplate>(id);
        }

        public IList<SignatureTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<SignatureTemplate>();
            return mList;
        }
    }

public class NaturalSuitTemplate : Tpl
    {
        /// <summary>
        /// 策划用（装备名称）
        /// </summary>
        public string Name;
        /// <summary>
        /// 装备id用|隔开
        /// </summary>
        public string EquipID;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 神盾
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 准确
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 幸运
        /// </summary>
        public int Lucky;
        /// <summary>
        /// 诅咒
        /// </summary>
        public int Curse;
        /// <summary>
        /// 攻速
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 基础生命万分比
        /// </summary>
        public int BaseHpCent;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 吸血
        /// </summary>
        public int Vampire;
        /// <summary>
        /// 抗性
        /// </summary>
        public int Resist;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 真实伤害抵抗
        /// </summary>
        public int RealDiscount;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK免伤
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对怪减免
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// 对战士增伤
        /// </summary>
        public int DamageToSoldier;
        /// <summary>
        /// 对战士减伤
        /// </summary>
        public int ResistSoldier;
        /// <summary>
        /// 对法师增伤
        /// </summary>
        public int DamageToMage;
        /// <summary>
        /// 对法师减伤
        /// </summary>
        public int ResistMage;
        /// <summary>
        /// 对道士增伤
        /// </summary>
        public int DamageToTaoist;
        /// <summary>
        /// 对道士减免
        /// </summary>
        public int ResistTaoist;
        /// <summary>
        /// 生命回复
        /// </summary>
        public int LifeRecove;
        /// <summary>
        /// 魔法回复
        /// </summary>
        public int MagicRecove;
        /// <summary>
        /// 心魔攻击
        /// </summary>
        public int InnerDemonsAtk;
        /// <summary>
        /// 心魔防御
        /// </summary>
        public int InnerDemonsDef;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            EquipID = bytes.ReadUTF();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            Lucky = bytes.ReadInt();
            Curse = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            BaseHpCent = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            Vampire = bytes.ReadInt();
            Resist = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RealDiscount = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            DamageToSoldier = bytes.ReadInt();
            ResistSoldier = bytes.ReadInt();
            DamageToMage = bytes.ReadInt();
            ResistMage = bytes.ReadInt();
            DamageToTaoist = bytes.ReadInt();
            ResistTaoist = bytes.ReadInt();
            LifeRecove = bytes.ReadInt();
            MagicRecove = bytes.ReadInt();
            InnerDemonsAtk = bytes.ReadInt();
            InnerDemonsDef = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(EquipID);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(Lucky);
            bytes.WriteInt(Curse);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(BaseHpCent);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(Vampire);
            bytes.WriteInt(Resist);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RealDiscount);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(DamageToSoldier);
            bytes.WriteInt(ResistSoldier);
            bytes.WriteInt(DamageToMage);
            bytes.WriteInt(ResistMage);
            bytes.WriteInt(DamageToTaoist);
            bytes.WriteInt(ResistTaoist);
            bytes.WriteInt(LifeRecove);
            bytes.WriteInt(MagicRecove);
            bytes.WriteInt(InnerDemonsAtk);
            bytes.WriteInt(InnerDemonsDef);
        }
    }

    public class NaturalSuitTemplateMode : TplMode
    {
        private IList<NaturalSuitTemplate> mList = null;

        public NaturalSuitTemplateMode(int step) : base("NaturalSuitTemplate", typeof(NaturalSuitTemplate), step) { }

        public NaturalSuitTemplate this[int id]
        {
            get { return Find<NaturalSuitTemplate>(id); }
        }

        public NaturalSuitTemplate Find(int id)
        {
            return Find<NaturalSuitTemplate>(id);
        }

        public IList<NaturalSuitTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NaturalSuitTemplate>();
            return mList;
        }
    }

public class EquipItemTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string GoodsName;
        /// <summary>
        /// 装备部位
        /// </summary>
        public int Type;
        /// <summary>
        /// 阶级
        /// </summary>
        public int Grade;
        /// <summary>
        /// 默认星星数
        /// </summary>
        public int StarCount;
        /// <summary>
        /// 强化上限
        /// </summary>
        public int IintensifyMax;
        /// <summary>
        /// 对应套装id
        /// </summary>
        public int EquipSuitID;
        /// <summary>
        /// 魔器等级
        /// </summary>
        public int GemEquipLv;
        /// <summary>
        /// 魔魂等级
        /// </summary>
        public int DSLV;
        /// <summary>
        /// 魔魂耐久度
        /// </summary>
        public int DSDurability;
        /// <summary>
        /// 内甲等级
        /// </summary>
        public int InnerEquipLv;
        /// <summary>
        /// 盒子神器品质
        /// </summary>
        public int BoxArtifactQuality;
        /// <summary>
        /// 盒子神器种类
        /// </summary>
        public int BoxArtifactType;
        /// <summary>
        /// 盒子熔炼值
        /// </summary>
        public int ArtifactMeltNum;
        /// <summary>
        /// 轮回品质
        /// </summary>
        public int ReincarnationQuality;
        /// <summary>
        /// 初始极品属性概率（万分比）
        /// </summary>
        public int OriginalBaptizeRate;
        /// <summary>
        /// 初始极品属性条数
        /// </summary>
        public int OriginalBaptizeNum;
        /// <summary>
        /// 极品属性组ID
        /// </summary>
        public int CanBaptize;
        /// <summary>
        /// 极品属性条数
        /// </summary>
        public int CanBaptizeTime;
        /// <summary>
        /// 极品属性大类
        /// （无效）
        /// </summary>
        public int Subtype;
        /// <summary>
        /// 主宰保护率
        /// </summary>
        public int NoDropRate;
        /// <summary>
        /// 幸运
        /// </summary>
        public int Lucky;
        /// <summary>
        /// 战士职业属性
        /// </summary>
        public int PhysicJob;
        /// <summary>
        /// 法师职业属性
        /// </summary>
        public int MagicJob;
        /// <summary>
        /// 道士职业属性
        /// </summary>
        public int TaoistJob;
        /// <summary>
        /// 是否可交易
        /// </summary>
        public int Binding;
        /// <summary>
        /// 贡献值
        /// </summary>
        public int DonateValue;
        /// <summary>
        /// 是否可回收
        /// </summary>
        public int CanBack;
        /// <summary>
        /// 回收可获得经验
        /// </summary>
        public int BackExp;
        /// <summary>
        /// 回收货币类型
        /// </summary>
        public int BackMoneyType;
        /// <summary>
        /// 回收货币数值
        /// </summary>
        public int BackMoneyValue;
        /// <summary>
        /// 回收可获得护盾碎片
        /// </summary>
        public int BackEnergy;
        /// <summary>
        /// 融合返还结晶
        /// </summary>
        public int BackBaptize;
        /// <summary>
        /// 外观是否相同
        /// </summary>
        public int IsDiffAvata;
        /// <summary>
        /// 战士链接属性
        /// </summary>
        public int PhysicLinkJob;
        /// <summary>
        /// 法师链接属性
        /// </summary>
        public int MagicLinkJob;
        /// <summary>
        /// 道士链接属性
        /// </summary>
        public int TaoistLinkJob;
        /// <summary>
        /// 战士签名属性
        /// </summary>
        public int PhysicSignJob;
        /// <summary>
        /// 法师签名属性
        /// </summary>
        public int MagicSignJob;
        /// <summary>
        /// 道士签名属性
        /// </summary>
        public int TaoistSignJob;
        /// <summary>
        /// 战士自然套装属性
        /// </summary>
        public int PhysicSuitJob;
        /// <summary>
        /// 法师自然套装属性
        /// </summary>
        public int MagicSuitJob;
        /// <summary>
        /// 道士自然套装属性
        /// </summary>
        public int TaoistSuitJob;
        /// <summary>
        /// 战士魔魂升级组
        /// </summary>
        public int PhysicDSup;
        /// <summary>
        /// 法师魔魂升级组
        /// </summary>
        public int MagicDSup;
        /// <summary>
        /// 道士魔魂升级组
        /// </summary>
        public int TaoistDSup;
        /// <summary>
        /// 轮回装备强化属性组
        /// </summary>
        public int ReincarnationAttrGroup;
        /// <summary>
        /// 装备说明
        /// </summary>
        public string Lore;
        /// <summary>
        /// 可鉴定概率（万分比）
        /// </summary>
        public int EnableIdentify;
        /// <summary>
        /// 邮件ID
        /// </summary>
        public int MailID;
        /// <summary>
        /// 复合战士职业属性
        /// </summary>
        public string PhysicJobPlus;
        /// <summary>
        /// 复合法师职业属性
        /// </summary>
        public string MagicJobPlus;
        /// <summary>
        /// 复合道士职业属性
        /// </summary>
        public string TaoistJobPlus;
        /// <summary>
        /// 祝福最大值
        /// </summary>
        public int MaxPower;
        /// <summary>
        /// 祝福值节点
        /// </summary>
        public int PowerPoint;
        /// <summary>
        /// 法宝升阶失败获得祝福值
        /// </summary>
        public string MagicExUp;
        /// <summary>
        /// 法宝升星概率
        /// </summary>
        public int MagicUp;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            GoodsName = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Grade = bytes.ReadInt();
            StarCount = bytes.ReadInt();
            IintensifyMax = bytes.ReadInt();
            EquipSuitID = bytes.ReadInt();
            GemEquipLv = bytes.ReadInt();
            DSLV = bytes.ReadInt();
            DSDurability = bytes.ReadInt();
            InnerEquipLv = bytes.ReadInt();
            BoxArtifactQuality = bytes.ReadInt();
            BoxArtifactType = bytes.ReadInt();
            ArtifactMeltNum = bytes.ReadInt();
            ReincarnationQuality = bytes.ReadInt();
            OriginalBaptizeRate = bytes.ReadInt();
            OriginalBaptizeNum = bytes.ReadInt();
            CanBaptize = bytes.ReadInt();
            CanBaptizeTime = bytes.ReadInt();
            Subtype = bytes.ReadInt();
            NoDropRate = bytes.ReadInt();
            Lucky = bytes.ReadInt();
            PhysicJob = bytes.ReadInt();
            MagicJob = bytes.ReadInt();
            TaoistJob = bytes.ReadInt();
            Binding = bytes.ReadInt();
            DonateValue = bytes.ReadInt();
            CanBack = bytes.ReadInt();
            BackExp = bytes.ReadInt();
            BackMoneyType = bytes.ReadInt();
            BackMoneyValue = bytes.ReadInt();
            BackEnergy = bytes.ReadInt();
            BackBaptize = bytes.ReadInt();
            IsDiffAvata = bytes.ReadInt();
            PhysicLinkJob = bytes.ReadInt();
            MagicLinkJob = bytes.ReadInt();
            TaoistLinkJob = bytes.ReadInt();
            PhysicSignJob = bytes.ReadInt();
            MagicSignJob = bytes.ReadInt();
            TaoistSignJob = bytes.ReadInt();
            PhysicSuitJob = bytes.ReadInt();
            MagicSuitJob = bytes.ReadInt();
            TaoistSuitJob = bytes.ReadInt();
            PhysicDSup = bytes.ReadInt();
            MagicDSup = bytes.ReadInt();
            TaoistDSup = bytes.ReadInt();
            ReincarnationAttrGroup = bytes.ReadInt();
            Lore = bytes.ReadUTF();
            EnableIdentify = bytes.ReadInt();
            MailID = bytes.ReadInt();
            PhysicJobPlus = bytes.ReadUTF();
            MagicJobPlus = bytes.ReadUTF();
            TaoistJobPlus = bytes.ReadUTF();
            MaxPower = bytes.ReadInt();
            PowerPoint = bytes.ReadInt();
            MagicExUp = bytes.ReadUTF();
            MagicUp = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(GoodsName);
            bytes.WriteInt(Type);
            bytes.WriteInt(Grade);
            bytes.WriteInt(StarCount);
            bytes.WriteInt(IintensifyMax);
            bytes.WriteInt(EquipSuitID);
            bytes.WriteInt(GemEquipLv);
            bytes.WriteInt(DSLV);
            bytes.WriteInt(DSDurability);
            bytes.WriteInt(InnerEquipLv);
            bytes.WriteInt(BoxArtifactQuality);
            bytes.WriteInt(BoxArtifactType);
            bytes.WriteInt(ArtifactMeltNum);
            bytes.WriteInt(ReincarnationQuality);
            bytes.WriteInt(OriginalBaptizeRate);
            bytes.WriteInt(OriginalBaptizeNum);
            bytes.WriteInt(CanBaptize);
            bytes.WriteInt(CanBaptizeTime);
            bytes.WriteInt(Subtype);
            bytes.WriteInt(NoDropRate);
            bytes.WriteInt(Lucky);
            bytes.WriteInt(PhysicJob);
            bytes.WriteInt(MagicJob);
            bytes.WriteInt(TaoistJob);
            bytes.WriteInt(Binding);
            bytes.WriteInt(DonateValue);
            bytes.WriteInt(CanBack);
            bytes.WriteInt(BackExp);
            bytes.WriteInt(BackMoneyType);
            bytes.WriteInt(BackMoneyValue);
            bytes.WriteInt(BackEnergy);
            bytes.WriteInt(BackBaptize);
            bytes.WriteInt(IsDiffAvata);
            bytes.WriteInt(PhysicLinkJob);
            bytes.WriteInt(MagicLinkJob);
            bytes.WriteInt(TaoistLinkJob);
            bytes.WriteInt(PhysicSignJob);
            bytes.WriteInt(MagicSignJob);
            bytes.WriteInt(TaoistSignJob);
            bytes.WriteInt(PhysicSuitJob);
            bytes.WriteInt(MagicSuitJob);
            bytes.WriteInt(TaoistSuitJob);
            bytes.WriteInt(PhysicDSup);
            bytes.WriteInt(MagicDSup);
            bytes.WriteInt(TaoistDSup);
            bytes.WriteInt(ReincarnationAttrGroup);
            bytes.WriteUTF(Lore);
            bytes.WriteInt(EnableIdentify);
            bytes.WriteInt(MailID);
            bytes.WriteUTF(PhysicJobPlus);
            bytes.WriteUTF(MagicJobPlus);
            bytes.WriteUTF(TaoistJobPlus);
            bytes.WriteInt(MaxPower);
            bytes.WriteInt(PowerPoint);
            bytes.WriteUTF(MagicExUp);
            bytes.WriteInt(MagicUp);
        }
    }

    public class EquipItemTemplateMode : TplMode
    {
        private IList<EquipItemTemplate> mList = null;

        public EquipItemTemplateMode(int step) : base("EquipItemTemplate", typeof(EquipItemTemplate), step) { }

        public EquipItemTemplate this[int id]
        {
            get { return Find<EquipItemTemplate>(id); }
        }

        public EquipItemTemplate Find(int id)
        {
            return Find<EquipItemTemplate>(id);
        }

        public IList<EquipItemTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<EquipItemTemplate>();
            return mList;
        }
    }

public class NewAdvancedIdentifyTemplate : Tpl
    {
        /// <summary>
        /// 分类索引
        /// </summary>
        public int TabType;
        /// <summary>
        /// 分类名称
        /// </summary>
        public string TabTypeName;
        /// <summary>
        /// 项索引
        /// </summary>
        public int SubType;
        /// <summary>
        /// 项名称
        /// </summary>
        public string SubTypeName;
        /// <summary>
        /// 鉴定等级
        /// </summary>
        public int IdentifyLv;
        /// <summary>
        /// 子项名称
        /// </summary>
        public string IdentifyName;
        /// <summary>
        /// 源装备ID
        /// </summary>
        public int SourceEquipID;
        /// <summary>
        /// 源装备数量
        /// </summary>
        public int SourceEquipNum;
        /// <summary>
        /// 源装备鉴定等级
        /// </summary>
        public int SourceEquipIdentifyLv;
        /// <summary>
        /// 材料ID
        /// </summary>
        public int CostItemID;
        /// <summary>
        /// 材料数量
        /// </summary>
        public int CostItemNum;
        /// <summary>
        /// 消耗货币类型
        /// </summary>
        public int CostMoneyType;
        /// <summary>
        /// 消耗货币数量
        /// </summary>
        public int CostMoneyNum;
        /// <summary>
        /// 鉴定成功率（万分比）
        /// </summary>
        public int SuccessRate;
        /// <summary>
        /// 生命值
        /// </summary>
        public int HP;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 物防min
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防max
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 魔防min
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 魔防max
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 神盾值
        /// </summary>
        public int Energy;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            TabType = bytes.ReadInt();
            TabTypeName = bytes.ReadUTF();
            SubType = bytes.ReadInt();
            SubTypeName = bytes.ReadUTF();
            IdentifyLv = bytes.ReadInt();
            IdentifyName = bytes.ReadUTF();
            SourceEquipID = bytes.ReadInt();
            SourceEquipNum = bytes.ReadInt();
            SourceEquipIdentifyLv = bytes.ReadInt();
            CostItemID = bytes.ReadInt();
            CostItemNum = bytes.ReadInt();
            CostMoneyType = bytes.ReadInt();
            CostMoneyNum = bytes.ReadInt();
            SuccessRate = bytes.ReadInt();
            HP = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            Energy = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(TabType);
            bytes.WriteUTF(TabTypeName);
            bytes.WriteInt(SubType);
            bytes.WriteUTF(SubTypeName);
            bytes.WriteInt(IdentifyLv);
            bytes.WriteUTF(IdentifyName);
            bytes.WriteInt(SourceEquipID);
            bytes.WriteInt(SourceEquipNum);
            bytes.WriteInt(SourceEquipIdentifyLv);
            bytes.WriteInt(CostItemID);
            bytes.WriteInt(CostItemNum);
            bytes.WriteInt(CostMoneyType);
            bytes.WriteInt(CostMoneyNum);
            bytes.WriteInt(SuccessRate);
            bytes.WriteInt(HP);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(Energy);
        }
    }

    public class NewAdvancedIdentifyTemplateMode : TplMode
    {
        private IList<NewAdvancedIdentifyTemplate> mList = null;

        public NewAdvancedIdentifyTemplateMode(int step) : base("NewAdvancedIdentifyTemplate", typeof(NewAdvancedIdentifyTemplate), step) { }

        public NewAdvancedIdentifyTemplate this[int id]
        {
            get { return Find<NewAdvancedIdentifyTemplate>(id); }
        }

        public NewAdvancedIdentifyTemplate Find(int id)
        {
            return Find<NewAdvancedIdentifyTemplate>(id);
        }

        public IList<NewAdvancedIdentifyTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<NewAdvancedIdentifyTemplate>();
            return mList;
        }
    }

public class EquipLinkTemplate : Tpl
    {
        /// <summary>
        /// 策划用（装备名称）
        /// </summary>
        public string Name;
        /// <summary>
        /// 硬件类别（1官职，2神盾，3心魔，4翅膀，5战宠魔王之印等级，6勋章）
        /// </summary>
        public int HardwareType;
        /// <summary>
        /// 硬件等级
        /// </summary>
        public int HardwareLV;
        /// <summary>
        /// 生命
        /// </summary>
        public int HP;
        /// <summary>
        /// 魔法
        /// </summary>
        public int MP;
        /// <summary>
        /// 神盾
        /// </summary>
        public int Energy;
        /// <summary>
        /// 物攻下
        /// </summary>
        public int MinPhysicAtk;
        /// <summary>
        /// 物攻上
        /// </summary>
        public int MaxPhysicAtk;
        /// <summary>
        /// 法攻下
        /// </summary>
        public int MinMagicAtk;
        /// <summary>
        /// 法攻上
        /// </summary>
        public int MaxMagicAtk;
        /// <summary>
        /// 道攻下
        /// </summary>
        public int MinTaoistAtk;
        /// <summary>
        /// 道攻上
        /// </summary>
        public int MaxTaoistAtk;
        /// <summary>
        /// 物防下
        /// </summary>
        public int MinPhysicDef;
        /// <summary>
        /// 物防上
        /// </summary>
        public int MaxPhysicDef;
        /// <summary>
        /// 法防下
        /// </summary>
        public int MinMagicDef;
        /// <summary>
        /// 法防上
        /// </summary>
        public int MaxMagicDef;
        /// <summary>
        /// 准确
        /// </summary>
        public int Hits;
        /// <summary>
        /// 闪避
        /// </summary>
        public int Dodge;
        /// <summary>
        /// 暴击
        /// </summary>
        public int CritRate;
        /// <summary>
        /// 暴击力
        /// </summary>
        public int CritForce;
        /// <summary>
        /// 抗暴
        /// </summary>
        public int DisCrit;
        /// <summary>
        /// 爆伤抵消
        /// </summary>
        public int DisCritForce;
        /// <summary>
        /// 诅咒
        /// </summary>
        public int Curse;
        /// <summary>
        /// 攻速
        /// </summary>
        public int AttackSpeed;
        /// <summary>
        /// 基础生命万分比
        /// </summary>
        public int BaseHpCent;
        /// <summary>
        /// 吸血几率
        /// </summary>
        public int VampireRate;
        /// <summary>
        /// 吸血
        /// </summary>
        public int Vampire;
        /// <summary>
        /// 抗性
        /// </summary>
        public int Resist;
        /// <summary>
        /// 神圣伤害
        /// </summary>
        public int HolyDamage;
        /// <summary>
        /// 真实伤害抵抗
        /// </summary>
        public int RealDiscount;
        /// <summary>
        /// PK增伤
        /// </summary>
        public int AddPlayerHurt;
        /// <summary>
        /// PK免伤
        /// </summary>
        public int ReducePlayerHurt;
        /// <summary>
        /// 对怪增伤
        /// </summary>
        public int AddMonHurt;
        /// <summary>
        /// 对怪减免
        /// </summary>
        public int DisMonHurt;
        /// <summary>
        /// 对战士增伤
        /// </summary>
        public int DamageToSoldier;
        /// <summary>
        /// 对战士减伤
        /// </summary>
        public int ResistSoldier;
        /// <summary>
        /// 对法师增伤
        /// </summary>
        public int DamageToMage;
        /// <summary>
        /// 对法师减伤
        /// </summary>
        public int ResistMage;
        /// <summary>
        /// 对道士增伤
        /// </summary>
        public int DamageToTaoist;
        /// <summary>
        /// 对道士减免
        /// </summary>
        public int ResistTaoist;
        /// <summary>
        /// 生命回复
        /// </summary>
        public int LifeRecove;
        /// <summary>
        /// 魔法回复
        /// </summary>
        public int MagicRecove;
        /// <summary>
        /// 心魔攻击
        /// </summary>
        public int InnerDemonsAtk;
        /// <summary>
        /// 心魔防御
        /// </summary>
        public int InnerDemonsDef;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            HardwareType = bytes.ReadInt();
            HardwareLV = bytes.ReadInt();
            HP = bytes.ReadInt();
            MP = bytes.ReadInt();
            Energy = bytes.ReadInt();
            MinPhysicAtk = bytes.ReadInt();
            MaxPhysicAtk = bytes.ReadInt();
            MinMagicAtk = bytes.ReadInt();
            MaxMagicAtk = bytes.ReadInt();
            MinTaoistAtk = bytes.ReadInt();
            MaxTaoistAtk = bytes.ReadInt();
            MinPhysicDef = bytes.ReadInt();
            MaxPhysicDef = bytes.ReadInt();
            MinMagicDef = bytes.ReadInt();
            MaxMagicDef = bytes.ReadInt();
            Hits = bytes.ReadInt();
            Dodge = bytes.ReadInt();
            CritRate = bytes.ReadInt();
            CritForce = bytes.ReadInt();
            DisCrit = bytes.ReadInt();
            DisCritForce = bytes.ReadInt();
            Curse = bytes.ReadInt();
            AttackSpeed = bytes.ReadInt();
            BaseHpCent = bytes.ReadInt();
            VampireRate = bytes.ReadInt();
            Vampire = bytes.ReadInt();
            Resist = bytes.ReadInt();
            HolyDamage = bytes.ReadInt();
            RealDiscount = bytes.ReadInt();
            AddPlayerHurt = bytes.ReadInt();
            ReducePlayerHurt = bytes.ReadInt();
            AddMonHurt = bytes.ReadInt();
            DisMonHurt = bytes.ReadInt();
            DamageToSoldier = bytes.ReadInt();
            ResistSoldier = bytes.ReadInt();
            DamageToMage = bytes.ReadInt();
            ResistMage = bytes.ReadInt();
            DamageToTaoist = bytes.ReadInt();
            ResistTaoist = bytes.ReadInt();
            LifeRecove = bytes.ReadInt();
            MagicRecove = bytes.ReadInt();
            InnerDemonsAtk = bytes.ReadInt();
            InnerDemonsDef = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(HardwareType);
            bytes.WriteInt(HardwareLV);
            bytes.WriteInt(HP);
            bytes.WriteInt(MP);
            bytes.WriteInt(Energy);
            bytes.WriteInt(MinPhysicAtk);
            bytes.WriteInt(MaxPhysicAtk);
            bytes.WriteInt(MinMagicAtk);
            bytes.WriteInt(MaxMagicAtk);
            bytes.WriteInt(MinTaoistAtk);
            bytes.WriteInt(MaxTaoistAtk);
            bytes.WriteInt(MinPhysicDef);
            bytes.WriteInt(MaxPhysicDef);
            bytes.WriteInt(MinMagicDef);
            bytes.WriteInt(MaxMagicDef);
            bytes.WriteInt(Hits);
            bytes.WriteInt(Dodge);
            bytes.WriteInt(CritRate);
            bytes.WriteInt(CritForce);
            bytes.WriteInt(DisCrit);
            bytes.WriteInt(DisCritForce);
            bytes.WriteInt(Curse);
            bytes.WriteInt(AttackSpeed);
            bytes.WriteInt(BaseHpCent);
            bytes.WriteInt(VampireRate);
            bytes.WriteInt(Vampire);
            bytes.WriteInt(Resist);
            bytes.WriteInt(HolyDamage);
            bytes.WriteInt(RealDiscount);
            bytes.WriteInt(AddPlayerHurt);
            bytes.WriteInt(ReducePlayerHurt);
            bytes.WriteInt(AddMonHurt);
            bytes.WriteInt(DisMonHurt);
            bytes.WriteInt(DamageToSoldier);
            bytes.WriteInt(ResistSoldier);
            bytes.WriteInt(DamageToMage);
            bytes.WriteInt(ResistMage);
            bytes.WriteInt(DamageToTaoist);
            bytes.WriteInt(ResistTaoist);
            bytes.WriteInt(LifeRecove);
            bytes.WriteInt(MagicRecove);
            bytes.WriteInt(InnerDemonsAtk);
            bytes.WriteInt(InnerDemonsDef);
        }
    }

    public class EquipLinkTemplateMode : TplMode
    {
        private IList<EquipLinkTemplate> mList = null;

        public EquipLinkTemplateMode(int step) : base("EquipLinkTemplate", typeof(EquipLinkTemplate), step) { }

        public EquipLinkTemplate this[int id]
        {
            get { return Find<EquipLinkTemplate>(id); }
        }

        public EquipLinkTemplate Find(int id)
        {
            return Find<EquipLinkTemplate>(id);
        }

        public IList<EquipLinkTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<EquipLinkTemplate>();
            return mList;
        }
    }

public class ResourcesApproachTemplate : Tpl
    {
        /// <summary>
        /// 名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 链接ID
        /// </summary>
        public string LinkID;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            LinkID = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteUTF(LinkID);
        }
    }

    public class ResourcesApproachTemplateMode : TplMode
    {
        private IList<ResourcesApproachTemplate> mList = null;

        public ResourcesApproachTemplateMode(int step) : base("ResourcesApproachTemplate", typeof(ResourcesApproachTemplate), step) { }

        public ResourcesApproachTemplate this[int id]
        {
            get { return Find<ResourcesApproachTemplate>(id); }
        }

        public ResourcesApproachTemplate Find(int id)
        {
            return Find<ResourcesApproachTemplate>(id);
        }

        public IList<ResourcesApproachTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ResourcesApproachTemplate>();
            return mList;
        }
    }

public class ResourceGetBackTemplate : Tpl
    {
        /// <summary>
        /// 名字前端用
        /// </summary>
        public string Name;
        /// <summary>
        /// 类型
        /// </summary>
        public int Type;
        /// <summary>
        /// 参数
        /// </summary>
        public int Data;
        /// <summary>
        /// 排列顺序
        /// </summary>
        public int Order;
        /// <summary>
        /// 累计最大次数
        /// </summary>
        public int MaxTimes;
        /// <summary>
        /// 每次花费货币类型
        /// </summary>
        public int CostType;
        /// <summary>
        /// 每次花费数量
        /// </summary>
        public int CostNum;
        /// <summary>
        /// 花费物品
        /// </summary>
        public string CostItem;
        /// <summary>
        /// 增加经验
        /// </summary>
        public int AddExp;
        /// <summary>
        /// 奖励物品-战士
        /// </summary>
        public string AwardItem1;
        /// <summary>
        /// 奖励物品-法师
        /// </summary>
        public string AwardItem2;
        /// <summary>
        /// 奖励物品-道士
        /// </summary>
        public string AwardItem3;
        /// <summary>
        /// 找回半数资源每次花费货币类型
        /// </summary>
        public int CostType1;
        /// <summary>
        /// 找回半数资源每次花费货币数量
        /// </summary>
        public int CostNum1;
        /// <summary>
        /// 增加一半经验
        /// </summary>
        public int HalfAddExp;
        /// <summary>
        /// 奖励一半物品-战士
        /// </summary>
        public string HalfAwardItem1;
        /// <summary>
        /// 奖励一半物品-法师
        /// </summary>
        public string HalfAwardItem2;
        /// <summary>
        /// 奖励一半物品-道士
        /// </summary>
        public string HalfAwardItem3;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Type = bytes.ReadInt();
            Data = bytes.ReadInt();
            Order = bytes.ReadInt();
            MaxTimes = bytes.ReadInt();
            CostType = bytes.ReadInt();
            CostNum = bytes.ReadInt();
            CostItem = bytes.ReadUTF();
            AddExp = bytes.ReadInt();
            AwardItem1 = bytes.ReadUTF();
            AwardItem2 = bytes.ReadUTF();
            AwardItem3 = bytes.ReadUTF();
            CostType1 = bytes.ReadInt();
            CostNum1 = bytes.ReadInt();
            HalfAddExp = bytes.ReadInt();
            HalfAwardItem1 = bytes.ReadUTF();
            HalfAwardItem2 = bytes.ReadUTF();
            HalfAwardItem3 = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Type);
            bytes.WriteInt(Data);
            bytes.WriteInt(Order);
            bytes.WriteInt(MaxTimes);
            bytes.WriteInt(CostType);
            bytes.WriteInt(CostNum);
            bytes.WriteUTF(CostItem);
            bytes.WriteInt(AddExp);
            bytes.WriteUTF(AwardItem1);
            bytes.WriteUTF(AwardItem2);
            bytes.WriteUTF(AwardItem3);
            bytes.WriteInt(CostType1);
            bytes.WriteInt(CostNum1);
            bytes.WriteInt(HalfAddExp);
            bytes.WriteUTF(HalfAwardItem1);
            bytes.WriteUTF(HalfAwardItem2);
            bytes.WriteUTF(HalfAwardItem3);
        }
    }

    public class ResourceGetBackTemplateMode : TplMode
    {
        private IList<ResourceGetBackTemplate> mList = null;

        public ResourceGetBackTemplateMode(int step) : base("ResourceGetBackTemplate", typeof(ResourceGetBackTemplate), step) { }

        public ResourceGetBackTemplate this[int id]
        {
            get { return Find<ResourceGetBackTemplate>(id); }
        }

        public ResourceGetBackTemplate Find(int id)
        {
            return Find<ResourceGetBackTemplate>(id);
        }

        public IList<ResourceGetBackTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ResourceGetBackTemplate>();
            return mList;
        }
    }

public class TurntableTemplate : Tpl
    {
        /// <summary>
        /// 转盘名称
        /// </summary>
        public string Name;
        /// <summary>
        /// 转盘组
        /// </summary>
        public int Group;
        /// <summary>
        /// 转盘等级
        /// </summary>
        public int Level;
        /// <summary>
        /// 需求境界等级
        /// </summary>
        public int NeedStateLv;
        /// <summary>
        /// 货币消耗
        /// </summary>
        public string MoneyCost;
        /// <summary>
        /// 材料消耗
        /// </summary>
        public string ItemCost;
        /// <summary>
        /// 货币类型(废弃)
        /// </summary>
        public int MoneyType;
        /// <summary>
        /// 货币数量(废弃)
        /// </summary>
        public int MoneyNumb;
        /// <summary>
        /// 奖励列表
        /// </summary>
        public string RewardList;
        /// <summary>
        /// 任务列表
        /// </summary>
        public string TaskList;
        /// <summary>
        /// 转盘说明
        /// </summary>
        public string TurntableTxt;
        /// <summary>
        /// 转盘数
        /// </summary>
        public int Number;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            Group = bytes.ReadInt();
            Level = bytes.ReadInt();
            NeedStateLv = bytes.ReadInt();
            MoneyCost = bytes.ReadUTF();
            ItemCost = bytes.ReadUTF();
            MoneyType = bytes.ReadInt();
            MoneyNumb = bytes.ReadInt();
            RewardList = bytes.ReadUTF();
            TaskList = bytes.ReadUTF();
            TurntableTxt = bytes.ReadUTF();
            Number = bytes.ReadInt();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(Group);
            bytes.WriteInt(Level);
            bytes.WriteInt(NeedStateLv);
            bytes.WriteUTF(MoneyCost);
            bytes.WriteUTF(ItemCost);
            bytes.WriteInt(MoneyType);
            bytes.WriteInt(MoneyNumb);
            bytes.WriteUTF(RewardList);
            bytes.WriteUTF(TaskList);
            bytes.WriteUTF(TurntableTxt);
            bytes.WriteInt(Number);
        }
    }

    public class TurntableTemplateMode : TplMode
    {
        private IList<TurntableTemplate> mList = null;

        public TurntableTemplateMode(int step) : base("TurntableTemplate", typeof(TurntableTemplate), step) { }

        public TurntableTemplate this[int id]
        {
            get { return Find<TurntableTemplate>(id); }
        }

        public TurntableTemplate Find(int id)
        {
            return Find<TurntableTemplate>(id);
        }

        public IList<TurntableTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TurntableTemplate>();
            return mList;
        }
    }

public class TurnJobTemplate : Tpl
    {
        /// <summary>
        /// 备注
        /// </summary>
        public string Des;
        /// <summary>
        /// 战士
        /// </summary>
        public string Physic;
        /// <summary>
        /// 法师
        /// </summary>
        public string Magic;
        /// <summary>
        /// 道士
        /// </summary>
        public string Taoist;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Des = bytes.ReadUTF();
            Physic = bytes.ReadUTF();
            Magic = bytes.ReadUTF();
            Taoist = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Des);
            bytes.WriteUTF(Physic);
            bytes.WriteUTF(Magic);
            bytes.WriteUTF(Taoist);
        }
    }

    public class TurnJobTemplateMode : TplMode
    {
        private IList<TurnJobTemplate> mList = null;

        public TurnJobTemplateMode(int step) : base("TurnJobTemplate", typeof(TurnJobTemplate), step) { }

        public TurnJobTemplate this[int id]
        {
            get { return Find<TurnJobTemplate>(id); }
        }

        public TurnJobTemplate Find(int id)
        {
            return Find<TurnJobTemplate>(id);
        }

        public IList<TurnJobTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<TurnJobTemplate>();
            return mList;
        }
    }

public class CyclePromotionTemplate : Tpl
    {
        /// <summary>
        /// 组装活动组名
        /// </summary>
        public string Name;
        /// <summary>
        /// 开启时间
        /// </summary>
        public int StartTime;
        /// <summary>
        /// 结束时间
        /// </summary>
        public int EndTime;
        /// <summary>
        /// 组装活动的TID
        /// </summary>
        public string Subactivity;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Name = bytes.ReadUTF();
            StartTime = bytes.ReadInt();
            EndTime = bytes.ReadInt();
            Subactivity = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteUTF(Name);
            bytes.WriteInt(StartTime);
            bytes.WriteInt(EndTime);
            bytes.WriteUTF(Subactivity);
        }
    }

    public class CyclePromotionTemplateMode : TplMode
    {
        private IList<CyclePromotionTemplate> mList = null;

        public CyclePromotionTemplateMode(int step) : base("CyclePromotionTemplate", typeof(CyclePromotionTemplate), step) { }

        public CyclePromotionTemplate this[int id]
        {
            get { return Find<CyclePromotionTemplate>(id); }
        }

        public CyclePromotionTemplate Find(int id)
        {
            return Find<CyclePromotionTemplate>(id);
        }

        public IList<CyclePromotionTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<CyclePromotionTemplate>();
            return mList;
        }
    }

public class ZhenMoBossAndAwardTemplate : Tpl
    {
        /// <summary>
        /// 境界等级
        /// </summary>
        public int Statelvl;
        /// <summary>
        /// BOSS配置
        /// </summary>
        public string MonsterConf;
        /// <summary>
        /// 奖励配置
        /// </summary>
        public string AwardsConf;
        /// <summary>
        /// 奖励配置
        /// </summary>
        public string CycleAwardsConf;

        public override void ReadFrom(ByteArray bytes)
        {
            base.ReadFrom(bytes);
            Statelvl = bytes.ReadInt();
            MonsterConf = bytes.ReadUTF();
            AwardsConf = bytes.ReadUTF();
            CycleAwardsConf = bytes.ReadUTF();
        }

        public override void WriteTo(ByteArray bytes)
        {
            base.WriteTo(bytes);
            bytes.WriteInt(Statelvl);
            bytes.WriteUTF(MonsterConf);
            bytes.WriteUTF(AwardsConf);
            bytes.WriteUTF(CycleAwardsConf);
        }
    }

    public class ZhenMoBossAndAwardTemplateMode : TplMode
    {
        private IList<ZhenMoBossAndAwardTemplate> mList = null;

        public ZhenMoBossAndAwardTemplateMode(int step) : base("ZhenMoBossAndAwardTemplate", typeof(ZhenMoBossAndAwardTemplate), step) { }

        public ZhenMoBossAndAwardTemplate this[int id]
        {
            get { return Find<ZhenMoBossAndAwardTemplate>(id); }
        }

        public ZhenMoBossAndAwardTemplate Find(int id)
        {
            return Find<ZhenMoBossAndAwardTemplate>(id);
        }

        public IList<ZhenMoBossAndAwardTemplate> FindAll()
        {
            if (mList == null) mList = FindAll<ZhenMoBossAndAwardTemplate>();
            return mList;
        }
    }

    [TplSearchable]
    public class Templates
    {
        public static AITemplateMode AITemplates = new AITemplateMode(200);
        public static HalfmoonTemplateMode HalfmoonTemplates = new HalfmoonTemplateMode(200);
        public static DemonsChangeTemplateMode DemonsChangeTemplates = new DemonsChangeTemplateMode(200);
        public static ChangeBodyTemplateMode ChangeBodyTemplates = new ChangeBodyTemplateMode(200);
        public static EvilEquipTemplateMode EvilEquipTemplates = new EvilEquipTemplateMode(200);
        public static JadeStoneTemplateMode JadeStoneTemplates = new JadeStoneTemplateMode(200);
        public static JadeStoneRandAttrTemplateMode JadeStoneRandAttrTemplates = new JadeStoneRandAttrTemplateMode(200);
        public static JadeStonePerTemplateMode JadeStonePerTemplates = new JadeStonePerTemplateMode(200);
        public static JadeStoneUnlockTemplateMode JadeStoneUnlockTemplates = new JadeStoneUnlockTemplateMode(200);
        public static DivideRawstoneTemplateMode DivideRawstoneTemplates = new DivideRawstoneTemplateMode(200);
        public static JadeStoneSlotTemplateMode JadeStoneSlotTemplates = new JadeStoneSlotTemplateMode(200);
        public static TreasureExchangeTemplateMode TreasureExchangeTemplates = new TreasureExchangeTemplateMode(200);
        public static NewBuffTemplateMode NewBuffTemplates = new NewBuffTemplateMode(200);
        public static BagUpdateTemplateMode BagUpdateTemplates = new BagUpdateTemplateMode(200);
        public static PartStrengthTemplateMode PartStrengthTemplates = new PartStrengthTemplateMode(200);
        public static EquipBaWangListTemplateMode EquipBaWangListTemplates = new EquipBaWangListTemplateMode(200);
        public static WarehouseConfigTemplateMode WarehouseConfigTemplates = new WarehouseConfigTemplateMode(200);
        public static LegendPropertyTemplateMode LegendPropertyTemplates = new LegendPropertyTemplateMode(200);
        public static LegendSoulTemplateMode LegendSoulTemplates = new LegendSoulTemplateMode(200);
        public static RechargeTemplateMode RechargeTemplates = new RechargeTemplateMode(200);
        public static RechargeAwardsTemplateMode RechargeAwardsTemplates = new RechargeAwardsTemplateMode(200);
        public static CreatRoleGiftTemplateMode CreatRoleGiftTemplates = new CreatRoleGiftTemplateMode(200);
        public static AchievementTemplateMode AchievementTemplates = new AchievementTemplateMode(200);
        public static GrowthPlanTemplateMode GrowthPlanTemplates = new GrowthPlanTemplateMode(200);
        public static CsTemplateMode CsTemplates = new CsTemplateMode(200);
        public static HappyGuessTemplateMode HappyGuessTemplates = new HappyGuessTemplateMode(200);
        public static TitleTemplateMode TitleTemplates = new TitleTemplateMode(200);
        public static TextTipsTemplateMode TextTipsTemplates = new TextTipsTemplateMode(200);
        public static WingTemplateMode WingTemplates = new WingTemplateMode(200);
        public static TreasureMapTemplateMode TreasureMapTemplates = new TreasureMapTemplateMode(200);
        public static ChangeTreasureTemplateMode ChangeTreasureTemplates = new ChangeTreasureTemplateMode(200);
        public static TreasureMapMonsterTemplateMode TreasureMapMonsterTemplates = new TreasureMapMonsterTemplateMode(200);
        public static AffixTemplateMode AffixTemplates = new AffixTemplateMode(200);
        public static CollectionTemplateMode CollectionTemplates = new CollectionTemplateMode(200);
        public static LoadErrorTemplateMode LoadErrorTemplates = new LoadErrorTemplateMode(200);
        public static MapEventTemplateMode MapEventTemplates = new MapEventTemplateMode(200);
        public static MapLinkTemplateMode MapLinkTemplates = new MapLinkTemplateMode(200);
        public static MonsterRefreshTemplateMode MonsterRefreshTemplates = new MonsterRefreshTemplateMode(200);
        public static MapConditionTemplateMode MapConditionTemplates = new MapConditionTemplateMode(200);
        public static MapTemplateMode MapTemplates = new MapTemplateMode(200);
        public static DailyActivityTemplateMode DailyActivityTemplates = new DailyActivityTemplateMode(200);
        public static DailyActivityShowTemplateMode DailyActivityShowTemplates = new DailyActivityShowTemplateMode(200);
        public static DailyActivityBossAwardTemplateMode DailyActivityBossAwardTemplates = new DailyActivityBossAwardTemplateMode(200);
        public static DropTemplateMode DropTemplates = new DropTemplateMode(200);
        public static ShortActivityTemplateMode ShortActivityTemplates = new ShortActivityTemplateMode(200);
        public static FirstSysTemTemplateMode FirstSysTemTemplates = new FirstSysTemTemplateMode(200);
        public static PropItemTemplateMode PropItemTemplates = new PropItemTemplateMode(200);
        public static PlayerEventTemplateMode PlayerEventTemplates = new PlayerEventTemplateMode(200);
        public static DungeonTemplateMode DungeonTemplates = new DungeonTemplateMode(200);
        public static OptionTemplateMode OptionTemplates = new OptionTemplateMode(200);
        public static NoticeParameterColorTemplateMode NoticeParameterColorTemplates = new NoticeParameterColorTemplateMode(200);
        public static NewNoticeTemplateMode NewNoticeTemplates = new NewNoticeTemplateMode(200);
        public static FunctionUseTipTemplateMode FunctionUseTipTemplates = new FunctionUseTipTemplateMode(200);
        public static FunctionOpenTemplateMode FunctionOpenTemplates = new FunctionOpenTemplateMode(200);
        public static FunctionOpen1TemplateMode FunctionOpen1Templates = new FunctionOpen1TemplateMode(200);
        public static FunctionGuideTemplateMode FunctionGuideTemplates = new FunctionGuideTemplateMode(200);
        public static NationalTreasureTemplateMode NationalTreasureTemplates = new NationalTreasureTemplateMode(200);
        public static NationalTreasureSuitTemplateMode NationalTreasureSuitTemplates = new NationalTreasureSuitTemplateMode(200);
        public static OfficialSealTemplateMode OfficialSealTemplates = new OfficialSealTemplateMode(200);
        public static OfficialTemplateMode OfficialTemplates = new OfficialTemplateMode(200);
        public static MonsterTeamTemplateMode MonsterTeamTemplates = new MonsterTeamTemplateMode(200);
        public static MonsterTemplateMode MonsterTemplates = new MonsterTemplateMode(200);
        public static PersonBossMode PersonBosss = new PersonBossMode(200);
        public static AdvancedIdentifyTemplateMode AdvancedIdentifyTemplates = new AdvancedIdentifyTemplateMode(200);
        public static AltarTemplateMode AltarTemplates = new AltarTemplateMode(200);
        public static AltarDonateTemplateMode AltarDonateTemplates = new AltarDonateTemplateMode(200);
        public static GuildHongbaoTemplateMode GuildHongbaoTemplates = new GuildHongbaoTemplateMode(200);
        public static GuildLeaderNoticeTemplateMode GuildLeaderNoticeTemplates = new GuildLeaderNoticeTemplateMode(200);
        public static CompoundTemplateMode CompoundTemplates = new CompoundTemplateMode(200);
        public static MingHunCompTemplateMode MingHunCompTemplates = new MingHunCompTemplateMode(200);
        public static CombineTemplateMode CombineTemplates = new CombineTemplateMode(200);
        public static CategoryTemplateMode CategoryTemplates = new CategoryTemplateMode(200);
        public static RecyclingTaskTemplateMode RecyclingTaskTemplates = new RecyclingTaskTemplateMode(200);
        public static ChangeDiamondTemplateMode ChangeDiamondTemplates = new ChangeDiamondTemplateMode(200);
        public static SignTemplateMode SignTemplates = new SignTemplateMode(200);
        public static WeddingRingTemplateMode WeddingRingTemplates = new WeddingRingTemplateMode(200);
        public static HuanMapTemplateMode HuanMapTemplates = new HuanMapTemplateMode(200);
        public static OpenFireTemplateMode OpenFireTemplates = new OpenFireTemplateMode(200);
        public static ApproachTemplateMode ApproachTemplates = new ApproachTemplateMode(200);
        public static GuildTaskTemplateMode GuildTaskTemplates = new GuildTaskTemplateMode(200);
        public static GuildFlagTemplateMode GuildFlagTemplates = new GuildFlagTemplateMode(200);
        public static GuildPatrolTemplateMode GuildPatrolTemplates = new GuildPatrolTemplateMode(200);
        public static GuildActivityMonsterTemplateMode GuildActivityMonsterTemplates = new GuildActivityMonsterTemplateMode(200);
        public static GuildConfigTemplateMode GuildConfigTemplates = new GuildConfigTemplateMode(200);
        public static GuildWelfareTemplateMode GuildWelfareTemplates = new GuildWelfareTemplateMode(200);
        public static GuildLvTemplateMode GuildLvTemplates = new GuildLvTemplateMode(200);
        public static GuildPositionTemplateMode GuildPositionTemplates = new GuildPositionTemplateMode(200);
        public static LivenessLvtemplateMode LivenessLvtemplates = new LivenessLvtemplateMode(200);
        public static StoneLevelTemplateMode StoneLevelTemplates = new StoneLevelTemplateMode(200);
        public static StoryTemplateMode StoryTemplates = new StoryTemplateMode(200);
        public static NEWJJTemplateMode NEWJJTemplates = new NEWJJTemplateMode(200);
        public static JJTaskTemplateMode JJTaskTemplates = new JJTaskTemplateMode(200);
        public static JJAttrTemplateMode JJAttrTemplates = new JJAttrTemplateMode(200);
        public static StateTemplateMode StateTemplates = new StateTemplateMode(200);
        public static AwardHallTemplateMode AwardHallTemplates = new AwardHallTemplateMode(200);
        public static SignInTemplateMode SignInTemplates = new SignInTemplateMode(200);
        public static ShopTemplateMode ShopTemplates = new ShopTemplateMode(200);
        public static SkillEffectTemplateMode SkillEffectTemplates = new SkillEffectTemplateMode(200);
        public static SkillTemplateMode SkillTemplates = new SkillTemplateMode(200);
        public static AttackCityDoanteTemplateMode AttackCityDoanteTemplates = new AttackCityDoanteTemplateMode(200);
        public static RobotTaskTemplateMode RobotTaskTemplates = new RobotTaskTemplateMode(200);
        public static RobotAttrObtainTemplateMode RobotAttrObtainTemplates = new RobotAttrObtainTemplateMode(200);
        public static RobotTemplateMode RobotTemplates = new RobotTemplateMode(200);
        public static BaptizeRandomAttributesTemplateMode BaptizeRandomAttributesTemplates = new BaptizeRandomAttributesTemplateMode(200);
        public static IdentifyTemplateMode IdentifyTemplates = new IdentifyTemplateMode(200);
        public static AwakenTemplateMode AwakenTemplates = new AwakenTemplateMode(200);
        public static UIPageCountMode UIPageCounts = new UIPageCountMode(200);
        public static WindowTemplateMode WindowTemplates = new WindowTemplateMode(200);
        public static ArenaRankTemplateMode ArenaRankTemplates = new ArenaRankTemplateMode(200);
        public static ArenaBotTemplateMode ArenaBotTemplates = new ArenaBotTemplateMode(200);
        public static ArenaInfoTemplateMode ArenaInfoTemplates = new ArenaInfoTemplateMode(200);
        public static ExperienceRefineTemplateMode ExperienceRefineTemplates = new ExperienceRefineTemplateMode(200);
        public static ExpRedBagTemplateMode ExpRedBagTemplates = new ExpRedBagTemplateMode(200);
        public static SwornTemplateMode SwornTemplates = new SwornTemplateMode(200);
        public static MarryTemplateMode MarryTemplates = new MarryTemplateMode(200);
        public static ExpJadeTemplateMode ExpJadeTemplates = new ExpJadeTemplateMode(200);
        public static AuraEventTemplateMode AuraEventTemplates = new AuraEventTemplateMode(200);
        public static AuraTemplateMode AuraTemplates = new AuraTemplateMode(200);
        public static SeparationTemplateMode SeparationTemplates = new SeparationTemplateMode(200);
        public static PetAttrTemplateMode PetAttrTemplates = new PetAttrTemplateMode(200);
        public static LevelUpTemplateMode LevelUpTemplates = new LevelUpTemplateMode(200);
        public static FashionTemplateMode FashionTemplates = new FashionTemplateMode(200);
        public static OpenChestTemplateMode OpenChestTemplates = new OpenChestTemplateMode(200);
        public static QuickShopTemplateMode QuickShopTemplates = new QuickShopTemplateMode(200);
        public static ViolentTemplateMode ViolentTemplates = new ViolentTemplateMode(200);
        public static MineralTemplateMode MineralTemplates = new MineralTemplateMode(200);
        public static ServiceWarItemTemplateMode ServiceWarItemTemplates = new ServiceWarItemTemplateMode(200);
        public static ServiceWarActivityTemplateMode ServiceWarActivityTemplates = new ServiceWarActivityTemplateMode(200);
        public static CycleServiceWarActivityTemplateMode CycleServiceWarActivityTemplates = new CycleServiceWarActivityTemplateMode(200);
        public static MultipleArenaInfoTemplateMode MultipleArenaInfoTemplates = new MultipleArenaInfoTemplateMode(200);
        public static MultipleArenaRankTemplateMode MultipleArenaRankTemplates = new MultipleArenaRankTemplateMode(200);
        public static MultipleArenaBotTemplateMode MultipleArenaBotTemplates = new MultipleArenaBotTemplateMode(200);
        public static ReincarnationTemplateMode ReincarnationTemplates = new ReincarnationTemplateMode(200);
        public static ReincarnationAttrTemplateMode ReincarnationAttrTemplates = new ReincarnationAttrTemplateMode(200);
        public static ReincarnationFilterTemplateMode ReincarnationFilterTemplates = new ReincarnationFilterTemplateMode(200);
        public static PracticeHouseTemplateMode PracticeHouseTemplates = new PracticeHouseTemplateMode(200);
        public static ComboSkillTemplateMode ComboSkillTemplates = new ComboSkillTemplateMode(200);
        public static FreeVipTemplateMode FreeVipTemplates = new FreeVipTemplateMode(200);
        public static DailyPayTemplateMode DailyPayTemplates = new DailyPayTemplateMode(200);
        public static QuestionsExtraAwardTemplateMode QuestionsExtraAwardTemplates = new QuestionsExtraAwardTemplateMode(200);
        public static WorshipTemplateMode WorshipTemplates = new WorshipTemplateMode(200);
        public static InscriptionStoneTemplateMode InscriptionStoneTemplates = new InscriptionStoneTemplateMode(200);
        public static MoQiTemplateMode MoQiTemplates = new MoQiTemplateMode(200);
        public static MagicEquipRandAttrTemplateMode MagicEquipRandAttrTemplates = new MagicEquipRandAttrTemplateMode(200);
        public static MagicCircleTemplateMode MagicCircleTemplates = new MagicCircleTemplateMode(200);
        public static MoShaTemplateMode MoShaTemplates = new MoShaTemplateMode(200);
        public static DSattrtemplateMode DSattrtemplates = new DSattrtemplateMode(200);
        public static DSRechargetemplateMode DSRechargetemplates = new DSRechargetemplateMode(200);
        public static FillingtemplateMode Fillingtemplates = new FillingtemplateMode(200);
        public static TransferTemplateMode TransferTemplates = new TransferTemplateMode(200);
        public static NPCShopTemplateMode NPCShopTemplates = new NPCShopTemplateMode(200);
        public static NPCTemplateMode NPCTemplates = new NPCTemplateMode(200);
        public static InterTemplateMode InterTemplates = new InterTemplateMode(200);
        public static WuxingRandomTemplateMode WuxingRandomTemplates = new WuxingRandomTemplateMode(200);
        public static InnerEquipTemplateMode InnerEquipTemplates = new InnerEquipTemplateMode(200);
        public static WuxingGroupTemplateMode WuxingGroupTemplates = new WuxingGroupTemplateMode(200);
        public static WuxingWeightsTemplateMode WuxingWeightsTemplates = new WuxingWeightsTemplateMode(200);
        public static PlatFormVIPTemplateMode PlatFormVIPTemplates = new PlatFormVIPTemplateMode(200);
        public static PlatformRechargeTemplateMode PlatformRechargeTemplates = new PlatformRechargeTemplateMode(200);
        public static PlatformTemplateMode PlatformTemplates = new PlatformTemplateMode(200);
        public static AuctionListTemplateMode AuctionListTemplates = new AuctionListTemplateMode(200);
        public static AuctionFilterTemplateMode AuctionFilterTemplates = new AuctionFilterTemplateMode(200);
        public static SystemAuctionTemplateMode SystemAuctionTemplates = new SystemAuctionTemplateMode(200);
        public static RankingTemplateMode RankingTemplates = new RankingTemplateMode(200);
        public static SevenDayRechargeTemplateMode SevenDayRechargeTemplates = new SevenDayRechargeTemplateMode(200);
        public static CipherTemplateMode CipherTemplates = new CipherTemplateMode(200);
        public static SurpriseShopTemplateMode SurpriseShopTemplates = new SurpriseShopTemplateMode(200);
        public static SurpriseOpenTemplateMode SurpriseOpenTemplates = new SurpriseOpenTemplateMode(200);
        public static StrengthTemplateMode StrengthTemplates = new StrengthTemplateMode(200);
        public static StrengthSuitTemplateMode StrengthSuitTemplates = new StrengthSuitTemplateMode(200);
        public static PrayTemplateMode PrayTemplates = new PrayTemplateMode(200);
        public static RewardOrderTemplateMode RewardOrderTemplates = new RewardOrderTemplateMode(200);
        public static OfferTaskTemplateMode OfferTaskTemplates = new OfferTaskTemplateMode(200);
        public static OrderTaskLimitTemplateMode OrderTaskLimitTemplates = new OrderTaskLimitTemplateMode(200);
        public static LivenessAwardTemplateMode LivenessAwardTemplates = new LivenessAwardTemplateMode(200);
        public static LivenessTemplateMode LivenessTemplates = new LivenessTemplateMode(200);
        public static HotPushTempalteMode HotPushTempaltes = new HotPushTempalteMode(200);
        public static SmelterdrawTemplateMode SmelterdrawTemplates = new SmelterdrawTemplateMode(200);
        public static SmelterdrawShowMode SmelterdrawShows = new SmelterdrawShowMode(200);
        public static SmelterBoneTemplateMode SmelterBoneTemplates = new SmelterBoneTemplateMode(200);
        public static SmelterEffectTemplateMode SmelterEffectTemplates = new SmelterEffectTemplateMode(200);
        public static WorldLvTemplateMode WorldLvTemplates = new WorldLvTemplateMode(200);
        public static LVAwardsTemplateMode LVAwardsTemplates = new LVAwardsTemplateMode(200);
        public static MallTemplateMode MallTemplates = new MallTemplateMode(200);
        public static MarketTemplateMode MarketTemplates = new MarketTemplateMode(200);
        public static CurrencyTemplateMode CurrencyTemplates = new CurrencyTemplateMode(200);
        public static GuildAuctionTemplateMode GuildAuctionTemplates = new GuildAuctionTemplateMode(200);
        public static TXMallTemplateMode TXMallTemplates = new TXMallTemplateMode(200);
        public static AdvanceNewTemplateMode AdvanceNewTemplates = new AdvanceNewTemplateMode(200);
        public static DeadChooseTemplateMode DeadChooseTemplates = new DeadChooseTemplateMode(200);
        public static GuardsTemplateMode GuardsTemplates = new GuardsTemplateMode(200);
        public static AttributesNamesTemplateMode AttributesNamesTemplates = new AttributesNamesTemplateMode(200);
        public static AttributesListTemplateMode AttributesListTemplates = new AttributesListTemplateMode(200);
        public static GemstoneListTemplateMode GemstoneListTemplates = new GemstoneListTemplateMode(200);
        public static GemstonePosTemplateMode GemstonePosTemplates = new GemstonePosTemplateMode(200);
        public static GemstoneTemplateMode GemstoneTemplates = new GemstoneTemplateMode(200);
        public static AbyssCallBossTemplateMode AbyssCallBossTemplates = new AbyssCallBossTemplateMode(200);
        public static AbyssMissonTemplateMode AbyssMissonTemplates = new AbyssMissonTemplateMode(200);
        public static NewFirePigMode NewFirePigs = new NewFirePigMode(200);
        public static ShiMuAwardTemplateMode ShiMuAwardTemplates = new ShiMuAwardTemplateMode(200);
        public static LibraryTemplateMode LibraryTemplates = new LibraryTemplateMode(200);
        public static ArtifactBoxTemplateMode ArtifactBoxTemplates = new ArtifactBoxTemplateMode(200);
        public static JewelResonanceTemplateMode JewelResonanceTemplates = new JewelResonanceTemplateMode(200);
        public static JewelOpenTemplateMode JewelOpenTemplates = new JewelOpenTemplateMode(200);
        public static JewelTemplateMode JewelTemplates = new JewelTemplateMode(200);
        public static ArtifactCombineTemplateMode ArtifactCombineTemplates = new ArtifactCombineTemplateMode(200);
        public static NameTemplateMode NameTemplates = new NameTemplateMode(200);
        public static TotemTemplateMode TotemTemplates = new TotemTemplateMode(200);
        public static ExchangeDemonHunterExpTemplateMode ExchangeDemonHunterExpTemplates = new ExchangeDemonHunterExpTemplateMode(200);
        public static TotemTaskTemplateMode TotemTaskTemplates = new TotemTaskTemplateMode(200);
        public static TotemOthersTemplateMode TotemOthersTemplates = new TotemOthersTemplateMode(200);
        public static TalentTemplateMode TalentTemplates = new TalentTemplateMode(200);
        public static NewSuitAttributeTemplateMode NewSuitAttributeTemplates = new NewSuitAttributeTemplateMode(200);
        public static NewSuitTemplateMode NewSuitTemplates = new NewSuitTemplateMode(200);
        public static StrengthLVSuitTemplateMode StrengthLVSuitTemplates = new StrengthLVSuitTemplateMode(200);
        public static EquipIDSuitTemplateMode EquipIDSuitTemplates = new EquipIDSuitTemplateMode(200);
        public static FashionSuitTemplateMode FashionSuitTemplates = new FashionSuitTemplateMode(200);
        public static TumoLvTemplateMode TumoLvTemplates = new TumoLvTemplateMode(200);
        public static InvestmentTemplateMode InvestmentTemplates = new InvestmentTemplateMode(200);
        public static NewBossChallengeTemplateMode NewBossChallengeTemplates = new NewBossChallengeTemplateMode(200);
        public static BossChallengeTemplateMode BossChallengeTemplates = new BossChallengeTemplateMode(200);
        public static TreasureElvesTemplateMode TreasureElvesTemplates = new TreasureElvesTemplateMode(200);
        public static ElvesTemplateMode ElvesTemplates = new ElvesTemplateMode(200);
        public static BreakTemplateMode BreakTemplates = new BreakTemplateMode(200);
        public static LogTypeTemplateMode LogTypeTemplates = new LogTypeTemplateMode(200);
        public static NewLegendRoadTemplateMode NewLegendRoadTemplates = new NewLegendRoadTemplateMode(200);
        public static LegendRoadListTemplateMode LegendRoadListTemplates = new LegendRoadListTemplateMode(200);
        public static FuMoBossAndAwardTemplateMode FuMoBossAndAwardTemplates = new FuMoBossAndAwardTemplateMode(200);
        public static QuestionsTemplateMode QuestionsTemplates = new QuestionsTemplateMode(200);
        public static VIPTemplateMode VIPTemplates = new VIPTemplateMode(200);
        public static FiveElementsTemplateMode FiveElementsTemplates = new FiveElementsTemplateMode(200);
        public static WolongTaskTemplateMode WolongTaskTemplates = new WolongTaskTemplateMode(200);
        public static WolongMonsterTemplateMode WolongMonsterTemplates = new WolongMonsterTemplateMode(200);
        public static MilitaryTaskTimesTemplateMode MilitaryTaskTimesTemplates = new MilitaryTaskTimesTemplateMode(200);
        public static MilitaryTaskTemplateMode MilitaryTaskTemplates = new MilitaryTaskTemplateMode(200);
        public static MilitaryRankTemplateMode MilitaryRankTemplates = new MilitaryRankTemplateMode(200);
        public static WantStrengTempalteMode WantStrengTempaltes = new WantStrengTempalteMode(200);
        public static TreasureTemplateMode TreasureTemplates = new TreasureTemplateMode(200);
        public static TreasureExtraAwardTemplateMode TreasureExtraAwardTemplates = new TreasureExtraAwardTemplateMode(200);
        public static ItemLimitTemplateMode ItemLimitTemplates = new ItemLimitTemplateMode(200);
        public static ItemtemplateMode Itemtemplates = new ItemtemplateMode(200);
        public static PickupTypeTemplateMode PickupTypeTemplates = new PickupTypeTemplateMode(200);
        public static MaintainCompensationTemplateMode MaintainCompensationTemplates = new MaintainCompensationTemplateMode(200);
        public static MonopolyRoomTemplateMode MonopolyRoomTemplates = new MonopolyRoomTemplateMode(200);
        public static RandomDrawTemplateMode RandomDrawTemplates = new RandomDrawTemplateMode(200);
        public static TreasureEventTemplateMode TreasureEventTemplates = new TreasureEventTemplateMode(200);
        public static TreasureDunTempleMode TreasureDunTemples = new TreasureDunTempleMode(200);
        public static ExConsumeTemplateMode ExConsumeTemplates = new ExConsumeTemplateMode(200);
        public static DemoDispatchTemplateMode DemoDispatchTemplates = new DemoDispatchTemplateMode(200);
        public static InnerDemonsTemplateMode InnerDemonsTemplates = new InnerDemonsTemplateMode(200);
        public static BaptizeCostTemplateMode BaptizeCostTemplates = new BaptizeCostTemplateMode(200);
        public static DayXueFuTaskTemplateMode DayXueFuTaskTemplates = new DayXueFuTaskTemplateMode(200);
        public static XingShiAwardTemplateMode XingShiAwardTemplates = new XingShiAwardTemplateMode(200);
        public static NewDayTaskTemplateMode NewDayTaskTemplates = new NewDayTaskTemplateMode(200);
        public static DayTaskTemplateMode DayTaskTemplates = new DayTaskTemplateMode(200);
        public static ConditionTemplateMode ConditionTemplates = new ConditionTemplateMode(200);
        public static ConditionTwoTemplateMode ConditionTwoTemplates = new ConditionTwoTemplateMode(200);
        public static LimiteTaskTemplateMode LimiteTaskTemplates = new LimiteTaskTemplateMode(200);
        public static TimeLimitedtTargetTemplateMode TimeLimitedtTargetTemplates = new TimeLimitedtTargetTemplateMode(200);
        public static FlashSaleTemplateMode FlashSaleTemplates = new FlashSaleTemplateMode(200);
        public static SystemListTemplateMode SystemListTemplates = new SystemListTemplateMode(200);
        public static YeZhanAwardTemplateMode YeZhanAwardTemplates = new YeZhanAwardTemplateMode(200);
        public static GuideTemplateMode GuideTemplates = new GuideTemplateMode(200);
        public static PatrolTemplateMode PatrolTemplates = new PatrolTemplateMode(200);
        public static GuidePlayTemplateMode GuidePlayTemplates = new GuidePlayTemplateMode(200);
        public static HeroTalentTemplateMode HeroTalentTemplates = new HeroTalentTemplateMode(200);
        public static HeroDevelopTemplateMode HeroDevelopTemplates = new HeroDevelopTemplateMode(200);
        public static HeroTemplateMode HeroTemplates = new HeroTemplateMode(200);
        public static MailTemplateMode MailTemplates = new MailTemplateMode(200);
        public static MusicTemplateMode MusicTemplates = new MusicTemplateMode(200);
        public static DominatorTemplateMode DominatorTemplates = new DominatorTemplateMode(200);
        public static MainTaskTemplateMode MainTaskTemplates = new MainTaskTemplateMode(200);
        public static CycleCorrespondenceTemplateMode CycleCorrespondenceTemplates = new CycleCorrespondenceTemplateMode(200);
        public static CycleActivityTemplateMode CycleActivityTemplates = new CycleActivityTemplateMode(200);
        public static AccumulationPayTemplateMode AccumulationPayTemplates = new AccumulationPayTemplateMode(200);
        public static PermanenAccumulationPayTemplateMode PermanenAccumulationPayTemplates = new PermanenAccumulationPayTemplateMode(200);
        public static ImprintTemplateMode ImprintTemplates = new ImprintTemplateMode(200);
        public static ImprintExtraTemplateMode ImprintExtraTemplates = new ImprintExtraTemplateMode(200);
        public static PetLvTemplateMode PetLvTemplates = new PetLvTemplateMode(200);
        public static SummonPetTemplateMode SummonPetTemplates = new SummonPetTemplateMode(200);
        public static PetProTemplateMode PetProTemplates = new PetProTemplateMode(200);
        public static PetSkillTypeTemplateMode PetSkillTypeTemplates = new PetSkillTypeTemplateMode(200);
        public static PetConditionTemplateMode PetConditionTemplates = new PetConditionTemplateMode(200);
        public static FightTemplateMode FightTemplates = new FightTemplateMode(200);
        public static FixTemplateMode FixTemplates = new FixTemplateMode(200);
        public static BlessingTemplateMode BlessingTemplates = new BlessingTemplateMode(200);
        public static AssembleHappyExchangeTemplateMode AssembleHappyExchangeTemplates = new AssembleHappyExchangeTemplateMode(200);
        public static AssembleHappyKillMonTemplateMode AssembleHappyKillMonTemplates = new AssembleHappyKillMonTemplateMode(200);
        public static AssembleHappyRemainTemplateMode AssembleHappyRemainTemplates = new AssembleHappyRemainTemplateMode(200);
        public static AssemblSpawnBossTemplateMode AssemblSpawnBossTemplates = new AssemblSpawnBossTemplateMode(200);
        public static AssembleFirstBossKillTemplateMode AssembleFirstBossKillTemplates = new AssembleFirstBossKillTemplateMode(200);
        public static AssembleRechargreRankTemplateMode AssembleRechargreRankTemplates = new AssembleRechargreRankTemplateMode(200);
        public static AssembleRechargreGiftTemplateMode AssembleRechargreGiftTemplates = new AssembleRechargreGiftTemplateMode(200);
        public static AssemblSpawnMonsterTemplateMode AssemblSpawnMonsterTemplates = new AssemblSpawnMonsterTemplateMode(200);
        public static AssembleActivityNameTemplateMode AssembleActivityNameTemplates = new AssembleActivityNameTemplateMode(200);
        public static AssembleStoneAthleticsTemplateMode AssembleStoneAthleticsTemplates = new AssembleStoneAthleticsTemplateMode(200);
        public static AssembleShangPinYouHuiTemplateMode AssembleShangPinYouHuiTemplates = new AssembleShangPinYouHuiTemplateMode(200);
        public static AssemblServerFirstTemplateMode AssemblServerFirstTemplates = new AssemblServerFirstTemplateMode(200);
        public static AssembleTreasureRankTemplateMode AssembleTreasureRankTemplates = new AssembleTreasureRankTemplateMode(200);
        public static AssembleLuckyTurntableTemplateMode AssembleLuckyTurntableTemplates = new AssembleLuckyTurntableTemplateMode(200);
        public static AssemblFashionBuyTemplateMode AssemblFashionBuyTemplates = new AssemblFashionBuyTemplateMode(200);
        public static AssembleXinMoAthleticsTemplateMode AssembleXinMoAthleticsTemplates = new AssembleXinMoAthleticsTemplateMode(200);
        public static AssemblChallengeBossTemplateMode AssemblChallengeBossTemplates = new AssemblChallengeBossTemplateMode(200);
        public static AssembleMonthScheduleTemplateMode AssembleMonthScheduleTemplates = new AssembleMonthScheduleTemplateMode(200);
        public static AMonthActivityListTemplateMode AMonthActivityListTemplates = new AMonthActivityListTemplateMode(200);
        public static AssembleWeekScheduleTemplateMode AssembleWeekScheduleTemplates = new AssembleWeekScheduleTemplateMode(200);
        public static AWeekActivityListTemplateMode AWeekActivityListTemplates = new AWeekActivityListTemplateMode(200);
        public static AssembleMonthRechargeTemplateMode AssembleMonthRechargeTemplates = new AssembleMonthRechargeTemplateMode(200);
        public static CostMaterialtivityTemplateMode CostMaterialtivityTemplates = new CostMaterialtivityTemplateMode(200);
        public static AssembleDailyRestrictiTemplateMode AssembleDailyRestrictiTemplates = new AssembleDailyRestrictiTemplateMode(200);
        public static AssembleHongFuQiTianTemplateMode AssembleHongFuQiTianTemplates = new AssembleHongFuQiTianTemplateMode(200);
        public static AssembleCostRankTemplateMode AssembleCostRankTemplates = new AssembleCostRankTemplateMode(200);
        public static AssemblPreferentialGiftTemplateMode AssemblPreferentialGiftTemplates = new AssemblPreferentialGiftTemplateMode(200);
        public static AssembleSmashingEggsTemplateMode AssembleSmashingEggsTemplates = new AssembleSmashingEggsTemplateMode(200);
        public static AssembleJewelAthleticsTemplateMode AssembleJewelAthleticsTemplates = new AssembleJewelAthleticsTemplateMode(200);
        public static AssembleMysteryShopTemplateMode AssembleMysteryShopTemplates = new AssembleMysteryShopTemplateMode(200);
        public static AthleticsActivityTemplateMode AthleticsActivityTemplates = new AthleticsActivityTemplateMode(200);
        public static AssembleLevelAthleticsTemplateMode AssembleLevelAthleticsTemplates = new AssembleLevelAthleticsTemplateMode(200);
        public static AssemblCumulativeRecharTemplateMode AssemblCumulativeRecharTemplates = new AssemblCumulativeRecharTemplateMode(200);
        public static AssembleAccTreasuresTemplateMode AssembleAccTreasuresTemplates = new AssembleAccTreasuresTemplateMode(200);
        public static AssembleCumulativeLoginTemplateMode AssembleCumulativeLoginTemplates = new AssembleCumulativeLoginTemplateMode(200);
        public static AssembleWingAthleticsTemplateMode AssembleWingAthleticsTemplates = new AssembleWingAthleticsTemplateMode(200);
        public static MultipleRebateActivityTemplateMode MultipleRebateActivityTemplates = new MultipleRebateActivityTemplateMode(200);
        public static AssembleFestRequiteTemplateMode AssembleFestRequiteTemplates = new AssembleFestRequiteTemplateMode(200);
        public static AssembleLowCostTemplateMode AssembleLowCostTemplates = new AssembleLowCostTemplateMode(200);
        public static AssembleDuiHuanTemplateMode AssembleDuiHuanTemplates = new AssembleDuiHuanTemplateMode(200);
        public static AssembleEquipRecoveryTemplateMode AssembleEquipRecoveryTemplates = new AssembleEquipRecoveryTemplateMode(200);
        public static EquipFirstDropTemplateMode EquipFirstDropTemplates = new EquipFirstDropTemplateMode(200);
        public static AssembleTreasureTemplateMode AssembleTreasureTemplates = new AssembleTreasureTemplateMode(200);
        public static AssembleRechargeTemplateMode AssembleRechargeTemplates = new AssembleRechargeTemplateMode(200);
        public static AssembleMakeWineTemplateMode AssembleMakeWineTemplates = new AssembleMakeWineTemplateMode(200);
        public static CostMoneyTemplateMode CostMoneyTemplates = new CostMoneyTemplateMode(200);
        public static RechargeMoneyTemplateMode RechargeMoneyTemplates = new RechargeMoneyTemplateMode(200);
        public static AssemblInvestTemplateMode AssemblInvestTemplates = new AssemblInvestTemplateMode(200);
        public static RebateGiftActivityTemplateMode RebateGiftActivityTemplates = new RebateGiftActivityTemplateMode(200);
        public static AssembleExchangeTemplateMode AssembleExchangeTemplates = new AssembleExchangeTemplateMode(200);
        public static AssembleActivityTemplateMode AssembleActivityTemplates = new AssembleActivityTemplateMode(200);
        public static AssemblShaiziTemplateMode AssemblShaiziTemplates = new AssemblShaiziTemplateMode(200);
        public static AssemblMagicAthleticsTemplateMode AssemblMagicAthleticsTemplates = new AssemblMagicAthleticsTemplateMode(200);
        public static AutoUseTemplateMode AutoUseTemplates = new AutoUseTemplateMode(200);
        public static SuperVipTemplateMode SuperVipTemplates = new SuperVipTemplateMode(200);
        public static SoulEaterTemplateMode SoulEaterTemplates = new SoulEaterTemplateMode(200);
        public static RecoveryTemplateMode RecoveryTemplates = new RecoveryTemplateMode(200);
        public static MeltTypeTemplateMode MeltTypeTemplates = new MeltTypeTemplateMode(200);
        public static EquipTemplateMode EquipTemplates = new EquipTemplateMode(200);
        public static EquipOrderRelationTemplateMode EquipOrderRelationTemplates = new EquipOrderRelationTemplateMode(200);
        public static SignatureTemplateMode SignatureTemplates = new SignatureTemplateMode(200);
        public static NaturalSuitTemplateMode NaturalSuitTemplates = new NaturalSuitTemplateMode(200);
        public static EquipItemTemplateMode EquipItemTemplates = new EquipItemTemplateMode(200);
        public static NewAdvancedIdentifyTemplateMode NewAdvancedIdentifyTemplates = new NewAdvancedIdentifyTemplateMode(200);
        public static EquipLinkTemplateMode EquipLinkTemplates = new EquipLinkTemplateMode(200);
        public static ResourcesApproachTemplateMode ResourcesApproachTemplates = new ResourcesApproachTemplateMode(200);
        public static ResourceGetBackTemplateMode ResourceGetBackTemplates = new ResourceGetBackTemplateMode(200);
        public static TurntableTemplateMode TurntableTemplates = new TurntableTemplateMode(200);
        public static TurnJobTemplateMode TurnJobTemplates = new TurnJobTemplateMode(200);
        public static CyclePromotionTemplateMode CyclePromotionTemplates = new CyclePromotionTemplateMode(200);
        public static ZhenMoBossAndAwardTemplateMode ZhenMoBossAndAwardTemplates = new ZhenMoBossAndAwardTemplateMode(200);
    }

}
